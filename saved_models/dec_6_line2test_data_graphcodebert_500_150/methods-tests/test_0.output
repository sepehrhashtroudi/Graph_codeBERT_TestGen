@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]        
@Test [EOL]     public void test_getSimpleName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]         assertEquals("<null>", Class
@Test [EOL]     public void test_getSimpleName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]         assertEquals("<null>", Class
@Test [EOL]     public void test_getPackageName_Object() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); [EOL]  
@Test [EOL]     public void test_getPackageName_Class() { [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getPackageName((Class<?>)null)); [EOL]  [EOL]         // LANG-535 [EOL]     
@Test [EOL]     public void test_getPackageName_String() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]         assertEquals("", ClassUtils.getPackageName((String)null)); [EOL]         assertEquals("
@Test [EOL]     public void test_getPackageName_String() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]         assertEquals("", ClassUtils.getPackageName((String)null)); [EOL]         assertEquals("
@Test [EOL]     public void test_getPackageName_String() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]         assertEquals("", ClassUtils.getPackageName((String)null)); [EOL]         assertEquals("
@Test [EOL]     public void test_getAllSuperclasses_Class() { [EOL]         final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]         assertEquals(2, list.size()); [EOL]         assertEquals(CX.class, list.get(0)); [EOL]         assertEquals(Object.class, list.get(1)); [EOL]  [EOL]         assertEqu
@Test [EOL]     public void test_getAllInterfaces_Class() { [EOL]         final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]         assertEquals(6, list.size()); [EOL]         assertEquals(IB.class, list.get(0)); [EOL]         assertEquals(IC.class, list.get(1)); [EOL]         assertEquals(ID.class,
@Test [EOL]     public void test_getAllInterfaces_Class() { [EOL]         final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]         assertEquals(6, list.size()); [EOL]         assertEquals(IB.class, list.get(0)); [EOL]         assertEquals(IC.class, list.get(1)); [EOL]         assertEquals(ID.class,
@Test [EOL]     public void test_convertClassNamesToClasses_List() { [EOL]         final List<String> list = new ArrayList<String>(); [EOL]         List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add("java.lang.String"); [EOL]         list.add
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {};
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {};
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {};
@Test [EOL]     public void testIsPrimitiveOrWrapper() { [EOL]  [EOL]         // test primitive wrapper classes [EOL]         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [
@Test [EOL]     public void testIsPrimitiveOrWrapper() { [EOL]  [EOL]         // test primitive wrapper classes [EOL]         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class));
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class));
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class));
@Test [EOL]     public void testWrappersToPrimitivesEmpty() { [EOL] //        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning [EOL]         assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // equivalent cast [EOL]         // Other possible casts for null [EOL]         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY
@Test [EOL]     public void testGetInnerClass() throws ClassNotFoundException { [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); [EOL]    
@Test [EOL]     public void testGetInnerClass() throws ClassNotFoundException { [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); [EOL]    
@Test [EOL]     public void testGetPublicMethod() throws Exception { [EOL]         // Tests with Collections$UnmodifiableSet [EOL]         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); [EOL]             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().
@Test [EOL]     public void testGetPublicMethod() throws Exception { [EOL]         // Tests with Collections$UnmodifiableSet [EOL]         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); [EOL]             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().
@Test [EOL]     public void testGetPublicMethod() throws Exception { [EOL]         // Tests with Collections$UnmodifiableSet [EOL]         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); [EOL]             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().
@Test [EOL]     public void testGetClassByNormalNameArrays() throws ClassNotFoundException { [EOL]         assertEquals( int[].class, ClassUtils.getClass( "int[]" ) ); [EOL]         assertEquals( long[].class, ClassUtils.getClass( "long[]" ) ); [EOL]         assertEquals( short[].class, ClassUtils.getClass( "short[]" ) ); [EOL]         assertEquals( byte[].
@Test [EOL]     public void testToClass_object() { [EOL] //        assertNull(ClassUtils.toClass(null)); // generates warning [EOL]         assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast [EOL]          [EOL]         // Additional varargs tests [EOL]         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.
@Test [EOL]     public void test_getShortCanonicalName_Class() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); [EOL]  
@Test [EOL]     public void test_getPackageCanonicalName_Object() { [EOL]         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Class
@Test [EOL]     public void test_getPackageCanonicalName_Object() { [EOL]         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Class
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.get
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.get
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.get
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.get
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.get
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testBindEventsToMethodWithEvent() [EOL]     { [EOL]         final PropertyChangeSource src = new PropertyChangeSource(); [EOL]         final EventCounterWithEvent counter = new EventCounterWithEvent(); [EOL]         EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]         assertEquals(0, counter.getCount()); [EOL]        
@Test [EOL]     public void testInvokeMethod() throws Exception { [EOL]         assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("foo()", MethodUtils.invokeMethod(testBean, "foo", [EOL]                 (Object[]) null));
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test [EOL]     public void testNewThreadNamingPattern() { [EOL]         final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]         final Runnable r = EasyMock.createMock(Runnable.class); [EOL]         final int count = 12; [EOL]         for (int i = 0; i < count; i++) { [EOL]             EasyMock.expect
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.TestAnnotation(")); [
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hash
@Test [EOL]     public void testSerialization() { [EOL]         CharRange range = CharRange.is('a'); [EOL]         assertEquals(range, SerializationUtils.clone(range));  [EOL]         range = SerializationUtils.clone(range); [EOL]         assertEquals(range, SerializationUtils.clone(range)); [EOL]         range = SerializationUtils.clone(range); [EOL]   
@Test [EOL]     public void testConstructorAccessors_isNotIn_Same() { [EOL]         final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]         assertEquals('a', rangea.getStart()); [EOL]         assertEquals('a', rangea.getEnd()); [EOL]         assertTrue(rangea.isNegated()); [EOL]         assertEquals("^a", rangea.to
@Test [EOL]     public void testContains_Charrange() { [EOL]         final CharRange a = CharRange.is('a'); [EOL]         final CharRange b = CharRange.is('b'); [EOL]         final CharRange c = CharRange.is('c'); [EOL]         final CharRange c2 = CharRange.is('c'); [EOL]         final CharRange d = CharRange.is('d'); [EOL]  
@Test [EOL]     public void testSerialization() { [EOL]         CharRange range = CharRange.is('a'); [EOL]         assertEquals(range, SerializationUtils.clone(range));  [EOL]         range = CharRange.isIn('a', 'e'); [EOL]         assertEquals(range, SerializationUtils.clone(range));  [EOL]         range = CharRange.isNotIn('a', 'e'); [
@Test [EOL]     public void testConstructorAccessors_isNotIn_Same() { [EOL]         final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]         assertEquals('a', rangea.getStart()); [EOL]         assertEquals('a', rangea.getEnd()); [EOL]         assertTrue(rangea.isNegated()); [EOL]         assertEquals("^a", rangea.to
@Test [EOL]     public void testIterator() { [EOL]         final CharRange a = CharRange.is('a'); [EOL]         final CharRange ad = CharRange.isIn('a', 'd'); [EOL]         final CharRange nota = CharRange.isNot('a'); [EOL]         final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]         final CharRange notFirst = Char
@Test [EOL]     public void testEquals() { [EOL]         final MutableBoolean mutNumA = new MutableBoolean(true); [EOL]         final MutableBoolean mutB = new MutableBoolean(false); [EOL]         final MutableBoolean mutNumC = new MutableBoolean(true); [EOL]         assertEquals(true, mutNum.hashCode()); [EOL]         assertEquals(true, mutNum.
@Test [EOL]     public void testIsTrue3() { [EOL]         Validate.isTrue(true, "MSG", 6); [EOL]         try { [EOL]             Validate.isTrue(false, "MSG", 6); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]        
@Test [EOL]     public void testIsTrue5() { [EOL]         Validate.isTrue(true, "MSG", 7.4d); [EOL]         try { [EOL]             Validate.isTrue(false, "MSG", 7.4d); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]  
@Test [EOL]     public void testIsTrue1() { [EOL]         Validate.isTrue(true); [EOL]         try { [EOL]             Validate.isTrue(false); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("The validated expression is
@Test [EOL]     public void testNoNullElementsArray1() { [EOL]         String[] array = new String[] {"a", "b"}; [EOL]         Validate.noNullElements(array); [EOL]         try { [EOL]             Validate.noNullElements((Object[]) null); [EOL]             fail("Expecting NullPointerException"); [EOL]       
@Test [EOL]     public void testNoNullElementsArray1() { [EOL]         String[] array = new String[] {"a", "b"}; [EOL]         Validate.noNullElements(array); [EOL]         try { [EOL]             Validate.noNullElements((Object[]) null); [EOL]             fail("Expecting NullPointerException"); [EOL]       
@Test [EOL]     public void testNotEmptyArray2() { [EOL]         Validate.notEmpty(new Object[] {null}, "MSG"); [EOL]         try { [EOL]             Validate.notEmpty((Object[]) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]    
@Test [EOL]     public void testNotEmptyArray2() { [EOL]         Validate.notEmpty(new Object[] {null}, "MSG"); [EOL]         try { [EOL]             Validate.notEmpty((Object[]) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]    
@Test [EOL]     public void testNotEmptyCollection2() { [EOL]         final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Collection<?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]      
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException
@Test [EOL]     public void testNoNullElementsCollection2() { [EOL]         final List<String> coll = new ArrayList<String>(); [EOL]         coll.add("a"); [EOL]         coll.add("b"); [EOL]         Validate.noNullElements(coll, "MSG"); [EOL]         try { [EOL]             Validate.noNullElements((Collection
@Test [EOL]     public void testNoNullElementsCollection2() { [EOL]         final List<String> coll = new ArrayList<String>(); [EOL]         coll.add("a"); [EOL]         coll.add("b"); [EOL]         Validate.noNullElements(coll, "MSG"); [EOL]         try { [EOL]             Validate.noNullElements((Collection
@Test [EOL]     public void testValidIndex_withMessage_collection() { [EOL]         final Collection<String> coll = new ArrayList<String>(); [EOL]         coll.add(null); [EOL]         coll.add(null); [EOL]         Validate.validIndex(coll, 0, "Broken: "); [EOL]         Validate.validIndex(coll, 1, "Broken: "); [EOL]    
@Test [EOL]     public void testValidIndex_withMessage_collection() { [EOL]         final Collection<String> coll = new ArrayList<String>(); [EOL]         coll.add(null); [EOL]         coll.add(null); [EOL]         Validate.validIndex(coll, 0, "Broken: "); [EOL]         Validate.validIndex(coll, 1, "Broken: "); [EOL]    
@Test [EOL]     public void testValidIndex_withMessage_charSequence() { [EOL]         final CharSequence str = "Hi"; [EOL]         Validate.validIndex(str, 0, "Broken: "); [EOL]         Validate.validIndex(str, 1, "Broken: "); [EOL]         try { [EOL]             Validate.validIndex(str, -1, "Broken: ");
@Test [EOL]     public void testMatchesPattern_withMessage() [EOL]     { [EOL]         final CharSequence str = "hi"; [EOL]         Validate.matchesPattern(str, "[a-z]*", "Does not match"); [EOL]         try [EOL]         { [EOL]             Validate.matchesPattern(str, "[0-9]*", "Does not match"); [E
@Test [EOL]     public void testIsInstanceOfExceptionMessage() { [EOL]         try { [EOL]             Validate.isInstanceOf(List.class, "hi"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch(final IllegalArgumentException e) { [EOL]             assertEquals("Expected type: java.util.List, actual: java.lang.
@Test [EOL]     public void testIsAssignable_withMessage() { [EOL]         Validate.isAssignableFrom(CharSequence.class, String.class, "Error"); [EOL]         Validate.isAssignableFrom(AbstractList.class, ArrayList.class, "Error"); [EOL]         try { [EOL]             Validate.isAssignableFrom(List.class, String.class, "Error"); [EOL]    
@Test [EOL]     public void testEquals() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0); [EOL]         final MutableDouble mutNumB = new MutableDouble(0); [EOL]         final MutableDouble mutNumC = new MutableDouble(1); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertEquals(mutNum.
@Test [EOL]     public void testTripleOf() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, "foo", Boolean.FALSE); [EOL]         assertEquals(0, triple.left.intValue()); [EOL]         assertEquals(0, triple.getLeft().intValue()); [EOL]         assertEquals("foo", triple.middle); [EOL]        
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     public void testMutate() throws Exception { [EOL]         final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, "foo"); [EOL]         pair.setLeft(42); [EOL]         pair.setRight("bar"); [EOL]         assertEquals(42, pair.getLeft().intValue()); [EOL]         assertEquals("bar", pair.getRight()); [EOL
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     public void testMutate() throws Exception { [EOL]         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]         triple.setLeft(42); [EOL]         triple.setMiddle("bar"); [EOL]         triple.setRight(Boolean.FALSE); [EOL]         assertEquals(42, triple.
@Test [EOL]     public void testEquals() { [EOL]         final MutableBoolean mutBoolA = new MutableBoolean(false); [EOL]         final MutableBoolean mutBoolB = new MutableBoolean(false); [EOL]         final MutableBoolean mutBoolC = new MutableBoolean(true); [EOL]  [EOL]         assertEquals(mutBoolA.equals(mutBoolA)); [EOL]   
@Test(expected=NullPointerException.class) [EOL]     public void testSetNull() { [EOL]         final MutableBoolean mutBool = new MutableBoolean(false); [EOL]         mutBool.setValue(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_Boolean() { [EOL]         assertTrue(BooleanUtils.toBoolean(Boolean.TRUE)); [EOL]         assertFalse(BooleanUtils.toBoolean(Boolean.FALSE)); [EOL]         assertFalse(BooleanUtils.toBoolean((Boolean) null)); [EOL]     } [EOL]  [EOL]
@Test(expected=NullPointerException.class) [EOL]     public void testCompareToNull() { [EOL]         final MutableBoolean mutBool = new MutableBoolean(false); [EOL]         mutBool.compareTo(null); [EOL]     } [EOL]  [EOL]     // ---------------------------------------------------------------- [EOL]
@Test(expected=NullPointerException.class) [EOL]     public void testCompareToNull() { [EOL]         final MutableBoolean mutBool = new MutableBoolean(false); [EOL]         mutBool.compareTo(null); [EOL]     } [EOL]  [EOL]     // ---------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableInt(0).toString()); [EOL]         assertEquals("10", new MutableInt(10).toString()); [EOL]         assertEquals("-123", new MutableInt(-123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testToIntStringI() { [EOL]         assertTrue("toInt(String,int) 1 failed", NumberUtils.toInt("12345", 5) == 12345); [EOL]         assertTrue("toInt(String,int) 2 failed", NumberUtils.toInt("1234.5", 5) == 5); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toLong(String
@Test [EOL]     public void testToLongStringL() { [EOL]         assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l); [EOL]         assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#
@Test [EOL]     public void testToFloatString() { [EOL]         assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]         assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]         assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]  
@Test [EOL]     public void testStringToDoubleStringD() { [EOL]         assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); [EOL]         assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); [EOL]     } [EOL]  [EOL]      /** [EOL]      *
@Test [EOL]     public void testToByteString() { [EOL]         assertTrue("toByte(String) 1 failed", NumberUtils.toByte("123") == 123); [EOL]         assertTrue("toByte(String) 2 failed", NumberUtils.toByte("abc") == 0); [EOL]         assertTrue("toByte(empty) failed", NumberUtils.toByte("") == 0); [EOL]         assertTrue("toByte(null) failed", NumberUtils.to
@Test [EOL]     public void testToShortString() { [EOL]         assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]         assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]         assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]         assertTrue("toShort(null) failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")
@Test [EOL]     public void testCreateInteger() { [EOL]         assertEquals("createInteger(String) failed", Integer.valueOf("12345"), NumberUtils.createInteger("12345")); [EOL]         assertEquals("createInteger(null) failed", null, NumberUtils.createInteger(null)); [EOL]         this.testCreateIntegerFailure(""); [EOL]         this.testCreateIntegerFailure(" "); [EOL]         this.
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")
@Test [EOL]     public void testCreateBigDecimal() { [EOL]         assertEquals("createBigDecimal(String) failed", new BigDecimal("1234.5"), NumberUtils.createBigDecimal("1234.5")); [EOL]         assertEquals("createBigDecimal(null) failed", null, NumberUtils.createBigDecimal(null)); [EOL]         this.testCreateBigDecimalFailure(""); [EOL]         this.testCreateBigDecimal
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(
@Test [EOL]     public void testMinShort() { [EOL]         assertEquals( [EOL]             "min(short[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new short[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]       
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]       
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]       
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test [EOL]     public void testMaxInt() { [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test [EOL]     public void testMaxInt() { [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test(expected = IllegalArgumentException.class) [EOL]     public void testMaxByte_emptyArray() { [EOL]         NumberUtils.max(new byte[0]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxByte() { [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new byte[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test [EOL]     public void testMaxByte() { [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new byte[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test(expected = IllegalArgumentException.class) [EOL]     public void testMinInt_nullArray() { [EOL]         NumberUtils.min((int[]) null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinimumInt() { [EOL]         assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); [EOL]         assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); [EOL]         assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils
@Test [EOL]     public void testMaximumInt() { [EOL]         assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); [EOL]         assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); [EOL]         assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append
@Test [EOL]     public void testIntArray() { [EOL]         int[] array = new int[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
@Test [EOL]     public void testShortArray() { [EOL]         short[] array = new short[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b",
@Test [EOL]     public void testDouble() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append
@Test [EOL]     public void testLong() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString
@Test [EOL]     public void testShort() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b",
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testObjectBuild() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).build()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).build()); [EOL]   
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testRandomStringUtils() { [EOL]         String r1 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         String r2 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals
@Test [EOL]     public void testRandomStringUtils() { [EOL]         String r1 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         String r2 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]       
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testNullExceptionPassing() { [EOL]         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) [EOL]         .addContextValue("test1", null) [EOL]         .addContextValue("test2", "some value") [EOL]         .addContextValue("test Date", new Date()) [EOL]         .addContextValue
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testNullExceptionPassing() { [EOL]         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) [EOL]         .addContextValue("test1", null) [EOL]         .addContextValue("test2", "some value") [EOL]         .addContextValue("test Date", new Date()) [EOL]         .addContextValue
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj
@Test [EOL]     public void testByteArrayAsObject() { [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
@Test [EOL]     public void testByteArrayAsObject() { [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
@Test [EOL]     public void testByteArrayAsObject() { [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
@Test [EOL]     public void testCharArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode()); [EOL]         final char[] obj = new char[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (char) 5; [EOL]    
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int
@Test [EOL]     public void testFloatArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); [EOL]         final float[] obj = new float[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = 5.4f; [EOL]    
@Test [EOL]     public void testIntArrayAsObject() { [EOL]         final int[] obj = new int[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL
@Test [EOL]     public void testLongArrayAsObject() { [EOL]         final long[] obj = new long[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5L; [EOL]         final int h1 = (int) (5L ^ 5L >> 32); [EOL]         assertEquals((17
@Test [EOL]     public void testLongArrayAsObject() { [EOL]         final long[] obj = new long[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5L; [EOL]         final int h1 = (int) (5L ^ 5L >> 32); [EOL]         assertEquals((17
@Test [EOL]     public void testObjectArrayAsObject() { [EOL]         final Object[] obj = new Object[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = new Object(); [EOL]         assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append((Object) obj).to
@Test [EOL]     public void testCharArrayAsObject() { [EOL]         final char[] obj = new char[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (char) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode());
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int
@Test [EOL]     public void testObjectArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); [EOL]         final Object[] obj = new Object[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = new Object(); [EOL]      
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]    
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]    
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]    
@Test [EOL]     public void testSuper() { [EOL]         final Object obj = new Object(); [EOL]         assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper( [EOL]                 new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL] 
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL] 
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL] 
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testAlternatePadCharacter() { [EOL]         final char pad='_'; [EOL]         assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString()); [EOL]         assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString()); [EOL]         assertEquals("_foo", Formattable
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", BooleanUtils.toString(null)); [EOL]         assertEquals("{}", new HashCodeBuilder(base).append("")); [EOL]         assertEquals(baseStr + "[a=1]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[a=a=a]", new ToStringBuilder(base).
@Test [EOL]     public void testGetShortValue() { [EOL]         assertEquals(bf_multi.getShortValue((short) - 1), (short) 127); [EOL]         assertEquals(bf_multi.getShortValue((short) 0), (short) 0); [EOL]         assertEquals(bf_single.getShortValue((short) - 1), (short) 1); [EOL]         assertEquals(bf_single.getShortValue((short) 0), (
@Test [EOL]     public void testByte() { [EOL]         assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(4, new BitField(4).setByteBoo
@Test [EOL]     public void testSetBoolean() { [EOL]         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); [EOL]         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); [EOL]         assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); [EOL]         assertEquals(bf_multi
@Test [EOL]     public void testByte() { [EOL]         assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(4, new BitField(4).setByteBoo
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testHandleCauseChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]             fail("ConcurrentException not thrown!"); [EOL]         } catch (final ConcurrentException cex) { [EOL]            
@Test [EOL]     public void testHandleCauseUncheckedChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]             fail("ConcurrentRuntimeException not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]      
@Test [EOL]     public void testHandleCauseUncheckedChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]             fail("ConcurrentRuntimeException not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]      
@Test [EOL]     public void testHandleCauseChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]             fail("ConcurrentException not thrown!"); [EOL]         } catch (final ConcurrentException cex) { [EOL]            
@Test [EOL]     public void testPutIfAbsentKeyPresent() { [EOL]         final String key = "testKey"; [EOL]         final Integer value = 42; [EOL]         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]         map.put(key, value); [EOL]         assertEquals("Wrong result", value, [EOL]         
@Test [EOL]     public void testPutIfAbsentKeyPresent() { [EOL]         final String key = "testKey"; [EOL]         final Integer value = 42; [EOL]         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]         map.put(key, value); [EOL]         assertEquals("Wrong result", value, [EOL]         
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.
@Test [EOL]     public void testHexDigitToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); [EOL]      
@Test [EOL]     public void testHexDigitToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); [EOL]      
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]   
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]   
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]   
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]   
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]   
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]   
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]     
@Test [EOL]     public void testIntToHexDigit() { [EOL]         assertEquals('0', Conversion.intToHexDigit(0)); [EOL]         assertEquals('1', Conversion.intToHexDigit(1)); [EOL]         assertEquals('2', Conversion.intToHexDigit(2)); [EOL]         assertEquals('3', Conversion.intToHexDigit(3)); [EOL]       
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb
@Test [EOL]     public void testIntArrayToLong() { [EOL]         final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000}; [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]    
@Test [EOL]     public void testIntArrayToLong() { [EOL]         final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000}; [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]    
@Test [EOL]     public void testShortArrayToLong() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]     
@Test [EOL]     public void testShortArrayToLong() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]     
@Test [EOL]     public void testShortArrayToInt() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]       
@Test [EOL]     public void testShortArrayToInt() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]       
@Test [EOL]     public void testByteArrayToLong() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]     
@Test [EOL]     public void testByteArrayToInt() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]     
@Test [EOL]     public void testByteArrayToInt() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]     
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]     
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]     
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]     
@Test [EOL]     public void testHexToLong() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x000000001C0F
@Test [EOL]     public void testHexToInt() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0x1C0F1FDC, Conversion
@Test [EOL]     public void testHexToInt() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0x1C0F1FDC, Conversion
@Test [EOL]     public void testHexToShort() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short
@Test [EOL]     public void testHexToShort() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short
@Test [EOL]     public void testHexToByte() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); [EOL]         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); [EOL]         assertEquals((byte
@Test [EOL]     public void testHexToByte() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); [EOL]         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); [EOL]         assertEquals((byte
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToShort() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToByte() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testBinaryToByte() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false,
@Test [EOL]     public void testLongToIntArray() { [EOL]         assertArrayEquals( [EOL]             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0)); [EOL]   
@Test [EOL]     public void testLongToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]          
@Test [EOL]     public void testLongToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]          
@Test [EOL]     public void testIntToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0)); [EOL]     
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]          
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]          
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]          
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]          
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]          
@Test [EOL]     public void testIntToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0)); [EOL]     
@Test [EOL]     public void testShortToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); [EOL] 
@Test [EOL]     public void testShortToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); [EOL] 
@Test [EOL]     public void testLongToHex() { [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]         assertEquals( [E
@Test [EOL]     public void testLongToHex() { [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]         assertEquals( [E
@Test [EOL]     public void testIntToHex() { [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL] 
@Test [EOL]     public void testIntToHex() { [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL] 
@Test [EOL]     public void testShortToHex() { [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); [EOL]         assertEquals
@Test [EOL]     public void testShortToHex() { [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); [EOL]         assertEquals
@Test [EOL]     public void testByteToHex() { [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); [EOL]         assertEquals
@Test [EOL]     public void testByteToHex() { [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); [EOL]         assertEquals
@Test [EOL]     public void testByteToHex() { [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); [EOL]         assertEquals
@Test [EOL]     public void testLongToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]        
@Test [EOL]     public void testLongToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]        
@Test [EOL]     public void testIntToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0)); [EOL]   
@Test [EOL]     public void testShortToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.shortToBinary((short)0x
@Test [EOL]     public void testByteArrayToUuid() { [EOL]         assertEquals( [EOL]             new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), [EOL]             Conversion.byteArrayToUuid(new byte[]{ [EOL]                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testGetUserDir() { [EOL]         final File dir = SystemUtils.getUserDir(); [EOL]         Assert.assertNotNull(dir); [EOL]         Assert.assertTrue(dir.exists()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Assums no security manager exists. [EOL]      */ [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testGetUserDir() { [EOL]         final File dir = SystemUtils.getUserDir(); [EOL]         Assert.assertNotNull(dir); [EOL]         Assert.assertTrue(dir.exists()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Assums no security manager exists. [EOL]      */ [EOL]
@Test [EOL]     public void testJavaVersionMatches() { [EOL]         String javaVersion = null; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]        
@Test [EOL]     public void testJavaVersionMatches() { [EOL]         String javaVersion = null; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]        
@Test [EOL]     public void testOSMatchesName() { [EOL]         String osName = null; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = ""; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "Windows 95"; [EOL]         assert
@Test [EOL]     public void testOSMatchesName() { [EOL]         String osName = null; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = ""; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "Windows 95"; [EOL]         assert
@Test [EOL]     public void testSet() { [EOL]         final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]         assertEquals(null, new MutableObject<String>")); [EOL]         assertEquals("", new MutableObject<String>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormattable_padded() throws Exception { [EOL]         final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]         assertEquals("       (Key,Value)", String.format("%1$20s", pair)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void test_toStringExcludeNullArray() { [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), (String[]) null); [EOL]         this.validateSecretFieldPresent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testLang538() { [EOL]         assertFalse(BooleanUtils.toBoolean(true)); [EOL]         assertFalse(BooleanUtils.toBoolean(true)); [EOL]         assertFalse(BooleanUtils.toBoolean(false)); [EOL]         assertFalse(BooleanUtils.toBoolean(false)); [EOL]         assertFalse(BooleanUtils.toBoolean(false));
@Test [EOL]     public void test_negate_Boolean() { [EOL]         assertSame(null, BooleanUtils.negate(null)); [EOL]         assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_isNotFalse_Boolean() { [EOL]         assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); [EOL]         assertTrue(BooleanUtils.isNotFalse(Boolean.FALSE)); [EOL]         assertTrue(BooleanUtils.isNotFalse((Boolean) null)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_toBooleanObject_Integer() { [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1))); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1))); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0))); [EOL]     
@Test [EOL]     public void test_toBoolean_Integer_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]  [EOL]         assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); [EOL]         assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); [EOL]  [EOL
@Test [EOL]     public void test_toBooleanObject_int_int_int() { [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL]     }
@Test [EOL]     public void test_toBooleanObject_int_int_int() { [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL]     }
@Test(expected = IllegalArgumentException.class) [EOL]     public void test_toBooleanObject_Integer_Integer_Integer_Integer_nullValue() { [EOL]         BooleanUtils.toBooleanObject(null, Integer.valueOf(6), Integer.valueOf(7), Integer.valueOf(8)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toIntegerObject_Boolean_Integer_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]         final Integer eight = Integer.valueOf(8); [EOL]         assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); [EOL]         assert
@Test [EOL]     public void test_toBooleanObject_String() { [EOL]         assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils
@Test [EOL]     public void test_toBooleanObject_String_String_String_String() { [EOL]         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "
@Test(expected = IllegalArgumentException.class) [EOL]     public void test_toBooleanObject_String_String_String_String_nullValue() { [EOL]         BooleanUtils.toBooleanObject((String) null, "Y", "N", "U"); [EOL]     } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void test_toBooleanObject_String_String_String_String_nullValue() { [EOL]         BooleanUtils.toBooleanObject((String) null, "Y", "N", "U"); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils
@Test(expected = IllegalArgumentException.class) [EOL]     public void test_toBoolean_String_String_String_nullValue() { [EOL]         BooleanUtils.toBoolean(null, "Y", "N"); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringOnOff_boolean() { [EOL]         assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]         assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_toStringTrueFalse_Boolean() { [EOL]         assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); [EOL]         assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); [EOL]         assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_toStringYesNo_Boolean() { [EOL]         assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null)); [EOL]         assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE)); [EOL]         assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAnd_primitive_validInput_2items() { [EOL]         assertTrue( [EOL]             "False result for (true, true)", [EOL]             BooleanUtils.and(new boolean[] { true, true })); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, false
@Test [EOL]     public void testAnd_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "False result for (true, true)", [EOL]             BooleanUtils [EOL]             .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]             .booleanValue()); [EOL]       
@Test [EOL]     public void testAnd_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "False result for (true, true)", [EOL]             BooleanUtils [EOL]             .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]             .booleanValue()); [EOL]       
@Test(expected = IllegalArgumentException.class) [EOL]     public void testOr_primitive_emptyInput() { [EOL]         BooleanUtils.or(new boolean[] {}); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testOr_primitive_validInput_3items() { [EOL]         assertTrue( [EOL]             "False result for (false, false, true)", [EOL]             BooleanUtils.or(new boolean[] { false, false, true })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for
@Test [EOL]     public void testXor_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "True result for (true, true)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]                 .booleanValue());
@Test [EOL]     public void testXor_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "True result for (true, true)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]                 .booleanValue());
@Test [EOL]     public void testXor_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "True result for (true, true)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]                 .booleanValue());
@Test [EOL]     public void testLocaleMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(SWEDEN, printer.getLocale()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLoc
@Test [EOL]     public void testLocaleLookupList_Locale() { [EOL]         assertLocaleLookupList(null, null, new Locale[0]); [EOL]         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_
@Test [EOL]     public void testLocaleLookupList_Locale() { [EOL]         assertLocaleLookupList(null, null, new Locale[0]); [EOL]         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_
@Test [EOL]     public void testLanguagesByCountry() { [EOL]         assertLanguageByCountry(null, new String[0]); [EOL]         assertLanguageByCountry("GB", new String[]{"en"}); [EOL]         assertLanguageByCountry("ZZ", new String[0]); [EOL]         assertLanguageByCountry("CH", new String[]{"fr", "de", "it"}); [EOL]     } [EOL]  [EOL]     //
@Test [EOL]     public void testLanguagesByCountry() { [EOL]         assertLanguageByCountry(null, new String[0]); [EOL]         assertLanguageByCountry("GB", new String[]{"en"}); [EOL]         assertLanguageByCountry("ZZ", new String[0]); [EOL]         assertLanguageByCountry("CH", new String[]{"fr", "de", "it"}); [EOL]     } [EOL]  [EOL]     //
@Test [EOL]     public void testCountriesByLanguage() { [EOL]         assertCountriesByLanguage(null, new String[0]); [EOL]         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); [EOL]         assertCountriesByLanguage("zz", new String[0]); [EOL]         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); [EOL]     } [EOL]
@Test [EOL]     public void testCountriesByLanguage() { [EOL]         assertCountriesByLanguage(null, new String[0]); [EOL]         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); [EOL]         assertCountriesByLanguage("zz", new String[0]); [EOL]         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); [EOL]     } [EOL]
@Test [EOL]     public void testCountriesByLanguage() { [EOL]         assertCountriesByLanguage(null, new String[0]); [EOL]         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); [EOL]         assertCountriesByLanguage("zz", new String[0]); [EOL]         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); [EOL]     } [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testInvert() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(50, 75); [EOL]         f = f.invert(); [EOL]         assertEquals(75, f.getNumerator()); [EOL]         assertEquals(50, f.getDenominator()); [EOL]  
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]
@Test [EOL]     public void testReducedFactory_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getReducedFraction(0, 1); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]   
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]   
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]   
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]   
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]   
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]   
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testConversions() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 7, 8); [EOL]         assertEquals(3, f.intValue()); [EOL]         assertEquals(3L, f.longValue()); [EOL]         assertEquals(3.875f, f.floatValue(),
@Test [EOL]     public void testConversions() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 7, 8); [EOL]         assertEquals(3, f.intValue()); [EOL]         assertEquals(3L, f.longValue()); [EOL]         assertEquals(3.875f, f.floatValue(),
@Test [EOL]     public void testReduce() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(50, 75); [EOL]         Fraction result = f.reduce(); [EOL]         assertEquals(2, result.getNumerator()); [EOL]         assertEquals(3, result.getDenominator()); [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testReducedFactory_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getReducedFraction(0, 1); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]       
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]       
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]       
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]       
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]       
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testDivide() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]      
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]     
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]        
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testBasicLookup() throws IOException { [EOL]         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); [EOL]         final StringWriter out = new StringWriter(); [EOL]         final int result = lt.translate("one", 0, out); [EOL]         assertEquals("Incorrect codepoint consumption", 3, result); [EOL]    
@Test [EOL]     public void testBasicLookup() throws IOException { [EOL]         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); [EOL]         final StringWriter out = new StringWriter(); [EOL]         final int result = lt.translate("one", 0, out); [EOL]         assertEquals("Incorrect codepoint consumption", 3, result); [EOL]    
@Test [EOL]     public void testInitializeUnchecked() throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Object> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Object result = new Object(); [EOL]         EasyMock
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]         
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]         
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]         
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]         
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testSetExternalExecutorAfterStart() throws ConcurrentException { [EOL]         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]         init.start(); [EOL]         try { [EOL]             init.setExternalExecutor(Executors.newSingleThreadExecutor()); [EOL]             fail("Could set executor after start()!"); [EOL]  
@Test [EOL]     public void testGetActiveExecutorTemp() { [EOL]         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]         init.start(); [EOL]         assertNotNull("No active executor", init.getActiveExecutor()); [EOL]         checkInitialize(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the execution of the background
@Test [EOL]     public void testGetActiveExecutorTemp() { [EOL]         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]         init.start(); [EOL]         assertNotNull("No active executor", init.getActiveExecutor()); [EOL]         checkInitialize(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the execution of the background
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void test_getEnumMap() { [EOL]         final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class); [EOL]         assertEquals( "getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); [EOL]         assertEquals(3, test.size()); [EOL]         assertTrue(test.containsKey("RED"));
@Test [EOL]     public void test_getEnum() { [EOL]         assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]         assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]         assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]      
@Test [EOL]     public void test_generateBitVector() { [EOL]         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]         assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]         assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, En
@Test [EOL]     public void test_generateBitVector() { [EOL]         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]         assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]         assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, En
@Test [EOL]     public void test_generateBitVectors() { [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(
@Test [EOL]     public void test_generateBitVectorsFromArray() { [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); [EOL]
@Test [EOL]     public void test_generateBitVectorsFromArray() { [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); [EOL]
@Test [EOL]     public void test_processBitVector() { [EOL]         assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]         assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.
@Test(expected=NullPointerException.class) [EOL]     public void test_generateBitVector_nullIterable() { [EOL]         EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testStopWatchSimple(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long time = watch.getTime(); [EOL]         assertEquals(time, watch.getTime());
@Test [EOL]     public void testStopWatchSimple(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long time = watch.getTime(); [EOL]         assertEquals(time, watch.getTime());
@Test [EOL]     public void testStopWatchSimple(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long time = watch.getTime(); [EOL]         assertEquals(time, watch.getTime());
@Test [EOL]     public void testStopWatchSplit(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.split(); [EOL]         final long splitTime = watch.getSplitTime(); [EOL]         final String splitStr = watch.toSplit
@Test [EOL]     public void testStopWatchSplit(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.split(); [EOL]         final long splitTime = watch.getSplitTime(); [EOL]         final String splitStr = watch.toSplit
@Test [EOL]     public void testStopWatchSuspend(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.suspend(); [EOL]         final long suspendTime = watch.getTime(); [EOL]             try {Thread
@Test [EOL]     public void testStopWatchSuspend(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.suspend(); [EOL]         final long suspendTime = watch.getTime(); [EOL]             try {Thread
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]             
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]             
@Test [EOL]     public void testEquals_Object() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new TestObject(4).build()); [EOL]         assertEquals(Integer.valueOf(2), new TestObject(4).build()); [EOL]         assertEquals(Integer.value
@Test [EOL]     public void testEquals() { [EOL]         final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumC = new MutableByte((byte) (byte) 1); [EOL]  [EOL]         assertEquals((byte) 0, mutNum.equals((byte) 0)); [EOL]  
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]   
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]   
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]   
@Test [EOL]     public void testDecrement() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 1); [EOL]         mutNum.subtract(Integer.valueOf(1)); [EOL]          [EOL]         assertEquals((byte) 0, mutNum.byteValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIncrement() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 1); [EOL]         mutNum.increment(); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIncrement() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 1); [EOL]         mutNum.increment(); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableLong mutNum = new MutableLong(1L); [EOL]  [EOL]         assertEquals( 1.0F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.0, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL]         assert
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableShort mutNum = new MutableShort( (short) 1 ); [EOL]          [EOL]         assertEquals( 1.0F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.0, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL
@Test [EOL]     public void testEquals() { [EOL]         final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assert
@Test [EOL]     public void testEquals() { [EOL]         final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assert
@Test(expected=NullPointerException.class) [EOL]     public void testCompareToNull() { [EOL]         final MutableInt mutNum = new MutableInt(0); [EOL]         mutNum.compareTo(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCompareTo() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]  [EOL]         assertEquals((byte) 0, mutNum.compareTo(new MutableByte((byte) 0))); [EOL]         assertEquals((byte) +1, mutNum.compareTo(new MutableByte((byte) -1))); [EOL]         assertEquals((byte) -1, mut
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableInt(0).toString()); [EOL]         assertEquals("10", new MutableInt(10).toString()); [EOL]         assertEquals("-123", new MutableInt(-123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testJavaVersionAt() { [EOL]         assertEquals(SystemUtils.getJavaVersionAtLeastJavaVersionAtLeast(JAVA_1)); [EOL]         assertEquals(1.1 failed", JAVA_1.getJavaVersionAtLeastJavaVersion() { [EOL]              SystemUtils.getJavaVersionAt(java.JAVA_1)); [EOL]            assertEquals(java.
@Test [EOL]     public void testJavaVersionMatches() { [EOL]         String javaVersion = null; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]        
@Test [EOL]     public void testGetJavaVersion() { [EOL]         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]         assertEquals("1.3 failed", J
@Test [EOL]     public void testGetJavaVersion() { [EOL]         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]         assertEquals("1.3 failed", J
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test"); [EOL]         exceptionContext.addContextValue("test3"); [EOL]         final String message = exceptionContext.getContext(); [EOL]         try { [EOL]             @Override [EOL]   
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testEquals() { [EOL]         final MutableLong mutNumA = new MutableLong(0); [EOL]         final MutableLong mutNumB = new MutableLong(0); [EOL]         final MutableLong mutNumC = new MutableLong(1); [EOL]  [EOL]         assertEquals(mutNumL, mutNumA.longValue()); [EOL]         assertEquals(mutNum
@Test [EOL]     public void testDecrement() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.subtract(Long.valueOf(1)); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL] 
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.add(1); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.add(1); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableLong mutNumA = new MutableLong(0); [EOL]         final MutableLong mutNumB = new MutableLong(0); [EOL]         final MutableLong mutNumC = new MutableLong(1); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.
@Test [EOL]     public void testCompareTo() { [EOL]         final MutableLong mutNum = new MutableLong(0); [EOL]  [EOL]         assertEquals(0, mutNum.compareTo(new MutableLong(0))); [EOL]         assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); [EOL]         assertEquals(-1, mutNum.compareTo(new MutableLong(1)));
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableInt(0).toString()); [EOL]         assertEquals("10", new MutableInt(10).toString()); [EOL]         assertEquals("-123", new MutableInt(-123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBe
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBe
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBe
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testToCharacterObject_char() { [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils
@Test [EOL]     public void testToCharacterObject_char() { [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]         [EOL]         for (int i = 0; i < 128; i++) { [EOL]             final Character ch = CharUt
@Test [EOL]     public void testToCharacterObject_char() { [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]         [EOL]         for (int i = 0; i < 128; i++) { [EOL]             final Character ch = CharUt
@Test [EOL]     public void testToIntValue_Character() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]         try { [EOL]             CharUtils.toIntValue(null); [EOL]         } catch (final IllegalArgumentException ex)
@Test [EOL]     public void testToIntValue_Character_int() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]         assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]         assertEquals(-1, CharUtils.toInt
@Test [EOL]     public void testToIntValue_Character_int() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]         assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]         assertEquals(-1, CharUtils.toInt
@Test [EOL]     public void testIsAsciiAlphaUpper_char() { [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]         assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append(true).toString()); [EOL]         assertEquals(baseStr + "[a=a]", new ToStringBuilder(base).append("a")).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("b").toString()); [EOL]         assertEqu
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     public void testToString() throws Exception { [EOL]         final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); [EOL]         assertEquals("(Key,Something,Value)", triple.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testUnfinishedEntity() { [EOL]         // parse it [EOL]         NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]         String input = "Test &#x30 not test"; [EOL]         String expected = "Test \u0030 not test"; [EOL]  [EOL]         String result
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testUnfinishedEntity() { [EOL]         // parse it [EOL]         NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]         String input = "Test &#x30 not test"; [EOL]         String expected = "Test \u0030 not test"; [EOL]  [EOL]         String result
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testInitializeTempExec() throws ConcurrentException { [EOL]         checkInitialize(); [EOL]         assertTrue("Executor not shutdown", initializer.getActiveExecutor() [EOL]                 .isShutdown()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests background processing if an external executor service is provided. [EOL]      */ [
@Test [EOL]     public void testInitializeTempExec() throws ConcurrentException { [EOL]         checkInitialize(); [EOL]         assertTrue("Executor not shutdown", initializer.getActiveExecutor() [EOL]                 .isShutdown()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests background processing if an external executor service is provided. [EOL]      */ [
@Test [EOL]     public void testInitializeNested() throws ConcurrentException { [EOL]         final String nameMulti = "multiChildInitializer"; [EOL]         initializer [EOL]                 .addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer(); [EOL]         final int count = 3; [EOL]   
@Test [EOL]     public void testInitializeNested() throws ConcurrentException { [EOL]         final String nameMulti = "multiChildInitializer"; [EOL]         initializer [EOL]                 .addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer(); [EOL]         final int count = 3; [EOL]   
@Test [EOL]     public void testLang645() { [EOL]         final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]         final String input = "ADFGZ"; [EOL]         final String encoding = "ADFGZ"; [EOL]         final String encoding = "UTF-8"; [EOL]         final String encoding = uu.translate(encoding); [EOL]         assertEqu
@Test [EOL]     public void testMustBeSupportedJava1_3_1() { [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) { [EOL]             this.assertSupportedEncoding(CharEncoding.ISO_8859_1); [EOL]             this.assertSupportedEncoding(CharEncoding.US_ASCII); [EOL]             this.assertSupportedEncoding(Char
@Test [EOL]     public void testMustBeSupportedJava1_3_1() { [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) { [EOL]             this.assertSupportedEncoding(CharEncoding.ISO_8859_1); [EOL]             this.assertSupportedEncoding(CharEncoding.US_ASCII); [EOL]             this.assertSupportedEncoding(Char
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]    
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testCharArrayArray() { [EOL]         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object)
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString());
@Test [EOL]     public void testByte() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b",
@Test [EOL]     public void testByte() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b",
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b",
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b",
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append
@Test [EOL]     public void testPerson() { [EOL]         final Person p = new Person(); [EOL]         p.name = "Ron Paul"; [EOL]         p.age = 72; [EOL]         p.smoker = false; [EOL]         final String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p)); [EOL]      
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]    
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]    
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]    
@Test [EOL]     public void testLongArray() { [EOL]         long[] array = new long[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR
@Test [EOL]     public void testLongArray() { [EOL]         long[] array = new long[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testIntArray() { [EOL]         int[] array = new int[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testObjectArray() { [EOL]         Object[] array = new Object[] {null, base, new int[] {3, 6}}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUt
@Test [EOL]     public void testObjectArray() { [EOL]         Object[] array = new Object[] {null, base, new int[] {3, 6}}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUt
@Test [EOL]     public void testByteArray() { [EOL]         byte[] array = new byte[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]      
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]    
@Test [EOL]     public void testCharArray() { [EOL]         char[] array = new char[] {'A', '2', '_', 'D'}; [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]  
@Test [EOL]     public void testCharArray() { [EOL]         char[] array = new char[] {'A', '2', '_', 'D'}; [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]  
@Test [EOL]     public void testCharArrayArray() { [EOL]         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object)
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.
@Test [EOL]     public void testFloatArray() { [EOL]         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.0000
@Test [EOL]     public void testFloatArray() { [EOL]         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.0000
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null;
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null;
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null;
@Test [EOL]     public void testBooleanArrayArray() { [EOL]         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString
@Test [EOL]     public void testBooleanArrayArray() { [EOL]         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]  
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testOneArgNull() { [EOL]         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArrayStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayStart(null); [EOL]         assertEquals("", style.getArrayStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArrayStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayStart(null); [EOL]         assertEquals("", style.getArrayStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArrayEnd() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayEnd(null); [EOL]         assertEquals("", style.getArrayEnd()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArraySeparator() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArraySeparator(null); [EOL]         assertEquals("", style.getArraySeparator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContentStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setContentStart(null); [EOL]         assertEquals("", style.getContentStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetFieldNameValueSeparator() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setFieldNameValueSeparator(null); [EOL]         assertEquals("", style.getFieldNameValueSeparator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetNullText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setNullText(null); [EOL]         assertEquals("", style.getNullText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetNullText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setNullText(null); [EOL]         assertEquals("", style.getNullText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetSizeEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSizeEndText(null); [EOL]         assertEquals("", style.getSizeEndText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetSummaryObjectEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSummaryObjectEndText(null); [EOL]         assertEquals("", style.getSummaryObjectEndText()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * An object used to test {@link ToStringStyle}. [EOL]      *  [
@Test [EOL]     public void testSetSummaryObjectEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSummaryObjectEndText(null); [EOL]         assertEquals("", style.getSummaryObjectEndText()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * An object used to test {@link ToStringStyle}. [EOL]      *  [
@Test [EOL]     public void testInitializeUnchecked() throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Object> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Object result = new Object(); [EOL]         EasyMock
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableFloat mutNumA = new MutableFloat(0f); [EOL]         final MutableFloat mutNumB = new MutableFloat(0f); [EOL]         final MutableFloat mutNumC = new MutableFloat(1f); [EOL]  [EOL]         assertEquals(mutNum.hashCode(), mutNum.hashCode()); [EOL]         assertEqu
@Test [EOL]     public void testSubtractValuePrimitive() { [EOL]         final MutableFloat mutNum = new MutableFloat(1); [EOL]         mutNum.subtract(0.9f); [EOL]          [EOL]         assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.add(1); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableFloat mutNumA = new MutableFloat(0f); [EOL]         final MutableFloat mutNumB = new MutableFloat(0f); [EOL]         final MutableFloat mutNumC = new MutableFloat(1f); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mut
@Test [EOL]     public void testHashCode() { [EOL]         final MutableFloat mutNumA = new MutableFloat(0f); [EOL]         final MutableFloat mutNumB = new MutableFloat(0f); [EOL]         final MutableFloat mutNumC = new MutableFloat(1f); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]        
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testUnescapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); [
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void testIndexOf_StrMatcher() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]          [EOL]         sb.append("ab bd"); [EOL] 
@Test [EOL]     public void testQuoteMatcher() { [EOL]         final StrMatcher matcher = StrMatcher.quoteMatcher(); [EOL]         assertSame(matcher, StrMatcher.quoteMatcher()); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 11)); [EOL]         assertEquals(1
@Test [EOL]     public void testDoubleQuoteMatcher() { [EOL]         final StrMatcher matcher = StrMatcher.doubleQuoteMatcher(); [EOL]         assertSame(matcher, StrMatcher.doubleQuoteMatcher()); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 11)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 12)); [EOL]         assertEqu
@Test [EOL]     public void testCharSetMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]   
@Test [EOL]     public void testCharSetMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]   
@Test [EOL]     public void testStringMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(2, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 2)); [EOL]     
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableInt mutNumA = new MutableInt(0); [EOL]         final MutableInt mutNumB = new MutableInt(0); [EOL]         final MutableInt mutNumC = new MutableInt(1); [EOL]  [EOL]         assertEquals(mutNum.hashCode(), mutNumA.hashCode()); [EOL]         assertEquals(
@Test [EOL]     public void testGetSet() { [EOL]         final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]         assertEquals(null, new MutableObject<Object>().getValue()); [EOL]          [EOL]         mutNum.setValue("HELLO"); [EOL]         assertSame("HELLO", mutNum.getValue()); [EOL]        
@Test [EOL]     public void testGetSet() { [EOL]         final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]         assertEquals(null, new MutableObject<Object>().getValue()); [EOL]          [EOL]         mutNum.setValue("HELLO"); [EOL]         assertSame("HELLO", mutNum.getValue()); [EOL]        
@Test [EOL]     public void testEquals() { [EOL]         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]         final MutableObject<String> mutNumD = new MutableObject
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testToMap() { [EOL]         Map<?, ?> map = ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"hello", "world"}}); [EOL]          [EOL]         assertEquals("bar", map.get("foo")); [EOL]         assertEquals("world", map.get("hello")); [EOL]          [EOL]     
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testNullToEmptyInt() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]         // Test valid array handling [EOL]         final int[] original = new int[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [E
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [
@Test [EOL]     public void testNullToEmptyShortObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); [EOL]         // Test valid array handling [EOL]         @SuppressWarnings("boxing") [EOL]         final [EOL]         Short[] original
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2L}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original));
@Test [EOL]     public void testNullToEmptyDouble() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]         // Test valid array handling [EOL]         final double[] original = new double[] {1L, 2L}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(
@Test [EOL]     public void testNullToEmptyBoolean() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]         // Test valid array handling [EOL]         final boolean[] original = new boolean[] {true, false}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty
@Test [EOL]     public void testNullToEmptyBoolean() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]         // Test valid array handling [EOL]         final boolean[] original = new boolean[] {true, false}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty
@Test [EOL]     public void testNullToEmptyShortObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); [EOL]         // Test valid array handling [EOL]         @SuppressWarnings("boxing") [EOL]         final [EOL]         Short[] original
@Test [EOL]     public void testNullToEmptyCharObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); [EOL]         // Test valid array handling [EOL]         final Character[] original = new Character[] {'a', 'b'}; [EOL]         assertArrayEquals(original, Array
@Test [EOL]     public void testNullToEmptyByteObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); [EOL]         // Test valid array handling [EOL]         final Byte[] original = new Byte[] {0x0F, 0x0E}; [EOL]         assertArrayEquals(original
@Test [EOL]     public void testNullToEmptyDoubleObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]         // Test valid array handling [EOL]         final Double[] original = new Double[] {1D, 2D}; [EOL]         assertArrayEquals(original, ArrayUt
@Test [EOL]     public void testNullToEmptyDoubleObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]         // Test valid array handling [EOL]         final Double[] original = new Double[] {1D, 2D}; [EOL]         assertArrayEquals(original, ArrayUt
@Test [EOL]     public void testSubarrayObject() { [EOL]         final Object[] nullArray = null; [EOL]         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; [EOL]  [EOL]         assertEquals("0 start, mid end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]
@Test [EOL]     public void testSubarrayObject() { [EOL]         final Object[] nullArray = null; [EOL]         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; [EOL]  [EOL]         assertEquals("0 start, mid end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]
@Test [EOL]     public void testSubarrayShort() { [EOL]         final short[] nullArray = null; [EOL]         final short[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final short[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final short[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final short[] rightSub
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSub
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSub
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSub
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSub
@Test [EOL]     public void testSubarrayBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] array = { true, true, false, true, false, true }; [EOL]         final boolean[] leftSubarray  = { true, true, false, true  }; [EOL]         final boolean[] midSubarray   = { true, false, true, false }; [EOL]         final boolean[] rightSubarray =
@Test [EOL]     public void testSameLengthInt() { [EOL]         final int[] nullArray = null; [EOL]         final int[] emptyArray = new int[0]; [EOL]         final int[] oneArray = new int[] {4}; [EOL]         final int[] twoArray = new int[] {5, 7}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(null
@Test [EOL]     public void testSameLengthFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] emptyArray = new float[0]; [EOL]         final float[] oneArray = new float[] {2.5f}; [EOL]         final float[] twoArray = new float[] {6.4f, 5.8f}; [EOL]          [EOL]         assertTrue(
@Test [EOL]     public void testSameLengthBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] emptyArray = new boolean[0]; [EOL]         final boolean[] oneArray = new boolean[] {true}; [EOL]         final boolean[] twoArray = new boolean[] {true, false}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(
@Test [EOL]     public void testSameLengthBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] emptyArray = new boolean[0]; [EOL]         final boolean[] oneArray = new boolean[] {true}; [EOL]         final boolean[] twoArray = new boolean[] {true, false}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3
@Test [EOL]     public void testReverseLong() { [EOL]         long[] array = new long[] {1L, 2L, 3L}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3L); [EOL]         assertEquals(array[1], 2L); [EOL]         assertEquals(array[2], 1L); [EOL]  [EOL]  
@Test [EOL]     public void testReverseLong() { [EOL]         long[] array = new long[] {1L, 2L, 3L}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3L); [EOL]         assertEquals(array[1], 2L); [EOL]         assertEquals(array[2], 1L); [EOL]  [EOL]  
@Test [EOL]     public void testReverseInt() { [EOL]         int[] array = new int[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]        
@Test [EOL]     public void testReverseInt() { [EOL]         int[] array = new int[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]        
@Test [EOL]     public void testReverseShort() { [EOL]         short[] array = new short[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]        
@Test [EOL]     public void testReverseChar() { [EOL]         char[] array = new char[] {'a', 'f', 'C'}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 'C'); [EOL]         assertEquals(array[1], 'f'); [EOL]         assertEquals(array[2], 'a'); [EOL]  [EOL] 
@Test [EOL]     public void testReverseChar() { [EOL]         char[] array = new char[] {'a', 'f', 'C'}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 'C'); [EOL]         assertEquals(array[1], 'f'); [EOL]         assertEquals(array[2], 'a'); [EOL]  [EOL] 
@Test [EOL]     public void testReverseByte() { [EOL]         byte[] array = new byte[] {2, 3, 4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 4); [EOL]         assertEquals(array[1], 3); [EOL]         assertEquals(array[2], 2); [EOL]  [EOL]        
@Test [EOL]     public void testReverseByte() { [EOL]         byte[] array = new byte[] {2, 3, 4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 4); [EOL]         assertEquals(array[1], 3); [EOL]         assertEquals(array[2], 2); [EOL]  [EOL]        
@Test [EOL]     public void testReverseByte() { [EOL]         byte[] array = new byte[] {2, 3, 4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 4); [EOL]         assertEquals(array[1], 3); [EOL]         assertEquals(array[2], 2); [EOL]  [EOL]        
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEqu
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEqu
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEqu
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEqu
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEqu
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEqu
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEqu
@Test [EOL]     public void testContains() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertFalse(ArrayUtils.contains(null, null)); [EOL]         assertFalse(ArrayUtils.contains(null, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "0")); [EOL]      
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "
@Test [EOL]     public void testContains() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertFalse(ArrayUtils.contains(null, null)); [EOL]         assertFalse(ArrayUtils.contains(null, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "0")); [EOL]      
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     public void testLastIndexOfLongWithStartIndex() { [EOL]         long[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]         array = new long[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]         assertEquals(
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_AR
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_AR
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_AR
@Test [EOL]     public void testLastIndexOfInt() { [EOL]         int[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]         array = new int[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]         assertEquals(1, ArrayUtils.last
@Test [EOL]     public void testLastIndexOfInt() { [EOL]         int[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]         array = new int[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]         assertEquals(1, ArrayUtils.last
@Test [EOL]     public void testLastIndexOfShort() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         assertEquals(1
@Test [EOL]     public void testLastIndexOfShort() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         assertEquals(1
@Test [EOL]     public void testLastIndexOfShort() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         assertEquals(1
@Test [EOL]     public void testContainsShort() { [EOL]         short[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]         assertTrue(ArrayUtils.contains(array, (short
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(
@Test [EOL]     public void testLastIndexOfChar() { [EOL]         char[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 'a')); [EOL]         assert
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testLastIndexOfByte() { [EOL]         byte[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         assertEquals(1
@Test [EOL]     public void testLastIndexOfByte() { [EOL]         byte[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         assertEquals(1
@Test [EOL]     public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]      
@Test [EOL]     public void testLastIndexOfDoubleWithStartIndex() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         array = new double[] { 0
@Test [EOL]     public void testLastIndexOfDoubleTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array =
@Test [EOL]     public void testLastIndexOfDoubleTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array =
@Test [EOL]     public void testIndexOfBooleanWithStartIndex() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[] { true, false, true }; [EOL
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]   
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]   
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]   
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]   
@Test [EOL]     public void testToPrimitive_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]          [EOL]         assertTrue
@Test [EOL]     public void testToPrimitive_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]          [EOL]         assertTrue
@Test [EOL]     public void testToPrimitive_char_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Character[0], (char)
@Test [EOL]     public void testToPrimitive_char_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Character[0], (char)
@Test [EOL]      public void testToPrimitive_long() { [EOL]          final Long[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Long[0])); [EOL]
@Test [EOL]      public void testToPrimitive_long_long() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Long[0],
@Test [EOL]     public void testToObject_long() { [EOL]         final long[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new long[
@Test [EOL]      public void testToPrimitive_int() { [EOL]          final Integer[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]          assertTrue(Arrays.equals( [EOL]          
@Test [EOL]      public void testToPrimitive_int() { [EOL]          final Integer[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]          assertTrue(Arrays.equals( [EOL]          
@Test [EOL]      public void testToPrimitive_int() { [EOL]          final Integer[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]          assertTrue(Arrays.equals( [EOL]          
@Test [EOL]      public void testToPrimitive_int_int() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]         
@Test [EOL]      public void testToPrimitive_int_int() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]         
@Test [EOL]     public void testToObject_int() { [EOL]         final int[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new int
@Test [EOL]     public void testToPrimitive_short_short() { [EOL]         final Short[] s = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],  [EOL]         Short.MIN_VALUE));
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]        
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]        
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]        
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]        
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]        
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]        
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assert
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assert
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assert
@Test [EOL]     public void testToPrimitive_byte_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Byte[0], (byte
@Test [EOL]     public void testToPrimitive_byte_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Byte[0], (byte
@Test [EOL]     public void testToObject_byte() { [EOL]         final byte[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,  [EOL]             ArrayUtils.toObject(new byte[0])); [EOL]    
@Test [EOL]     public void testToObject_double() { [EOL]         final double[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new double
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0
@Test [EOL]     public void testToObject_float() { [EOL]         final float[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new float
@Test [EOL]     public void testToPrimitive_boolean() { [EOL]         final Boolean[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]         assertTrue(Arrays.equals( [EOL]           
@Test [EOL]     public void testToPrimitive_boolean_boolean() { [EOL]         assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, true}, [E
@Test [EOL]     public void testToObject_boolean() { [EOL]         final boolean[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]         assertTrue(Arrays.equals( [EOL]          
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testIsNotEmptyPrimitives() { [EOL]         final long[] emptyLongArray = new long[] {}; [EOL]         final long[] notEmptyLongArray = new long[] { 1L }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((long[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty
@Test [EOL]     public void testIsNotEmptyPrimitives() { [EOL]         final long[] emptyLongArray = new long[] {}; [EOL]         final long[] notEmptyLongArray = new long[] { 1L }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((long[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         new
@Test [EOL]     public void testAddObjectArrayObject() { [EOL]         Object[] newArray; [EOL]  [EOL]         //show that not casting is okay [EOL]         newArray = ArrayUtils.add((Object[])null, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray
@Test [EOL]     public void testAddObjectArrayObject() { [EOL]         Object[] newArray; [EOL]  [EOL]         //show that not casting is okay [EOL]         newArray = ArrayUtils.add((Object[])null, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray
@Test [EOL]     public void testAddObjectArrayChar() { [EOL]         char[] newArray; [EOL]         newArray = ArrayUtils.add((char[])null, (char)0); [EOL]         assertTrue(Arrays.equals(new char[]{0}, newArray)); [EOL]         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((
@Test [EOL]     public void testAddObjectArrayDouble() { [EOL]         double[] newArray; [EOL]         newArray = ArrayUtils.add((double[])null, 0); [EOL]         assertTrue(Arrays.equals(new double[]{0}, newArray)); [EOL]         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((double[])
@Test [EOL]     public void testAddObjectArrayFloat() { [EOL]         float[] newArray; [EOL]         newArray = ArrayUtils.add((float[])null, 0); [EOL]         assertTrue(Arrays.equals(new float[]{0}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((float[])
@Test [EOL]     public void testAddObjectArrayShort() { [EOL]         short[] newArray; [EOL]         newArray = ArrayUtils.add((short[])null, (short)0); [EOL]         assertTrue(Arrays.equals(new short[]{0}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, new
@Test [EOL]     public void testRemoveElementObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElement((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_AR
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]    
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElement((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY,
@Test [EOL]     public void testRemoveIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.remove(new int[] {1}, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int
@Test [EOL]     public void testRemoveIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.remove(new int[] {1}, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_AR
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_AR
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]  
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]  
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllBooleanArrayNegativeIndex() { [EOL]         ArrayUtils.removeAll(new boolean[] { 1, 2 }, -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMP
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]   
@Test [EOL]     public void testHandleCauseChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]             fail("ConcurrentException not thrown!"); [EOL]         } catch (final ConcurrentException cex) { [EOL]            
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]        
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]        
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]        
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]        
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]        
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]        
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assert
@Test [EOL]     public void testIndexOf_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]       
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assert
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assert
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]        
@Test [EOL]     public void test_getRootCauseMessage_Throwable() { [EOL]         Throwable th = null; [EOL]         assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]          [EOL]         th = new IllegalArgumentException("Base"); [EOL]         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 [EOL]  
@Test [EOL]     public void testGetSet() { [EOL]         final Set<String> set = new MutableInt(0); [EOL]         assertEquals(0, new MutableUtils.getInstance(new Mutable(1)); [EOL]         assertEquals(baseStr + "[a=2]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append
@Test [EOL]     public void testSubstituteDefaultProperties(){ [EOL]         final String org = "${doesnotwork}"; [EOL]         System.setProperty("doesnotwork", "It works!"); [EOL]  [EOL]         // create a new Properties object with the System.getProperties as default [EOL]         final Properties props = new Properties(System.getProperties()); [EOL]  [EOL]         assertEquals("It
@Test [EOL]     public void testSubstituteDefaultProperties(){ [EOL]         final String org = "${doesnotwork}"; [EOL]         System.setProperty("doesnotwork", "It works!"); [EOL]  [EOL]         // create a new Properties object with the System.getProperties as default [EOL]         final Properties props = new Properties(System.getProperties()); [EOL]  [EOL]         assertEquals("It
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testCyclicReplacement() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("animal", "${critter}"); [EOL]         map.put("target", "${pet}"); [EOL]         map.put("pet", "${petCharacteristic} dog"); [EOL]         map.put("petCharacteristic", "lazy"); [
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testGetSetSuffix() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         sub.setVariableSuffix('<'); [EOL]         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]  [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testSamePrefixAndSuffix() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("greeting", "Hello"); [EOL]         map.put(" there ", "XXX"); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi @name
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]    
@Test [EOL]     public void testGetSetPrefix() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         sub.setVariablePrefix('<'); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]  [EOL]    
@Test [EOL]     public void testReflectionCompare() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]         o2.setA(
@Test [EOL]     public void testReflectionCompare() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]         o2.setA(
@Test [EOL]     public void testReflectionCompare() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]         o2.setA(
@Test [EOL]     public void testAppendSuper() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [E
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]   
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]   
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]   
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]   
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] =
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] =
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [
@Test [EOL]     public void testObjectArray() { [EOL]         final TestObject[] obj1 = new TestObject[2]; [EOL]         obj1[0] = new TestObject(4); [EOL]         obj1[1] = new TestObject(5); [EOL]         final TestObject[] obj2 = new TestObject[2]; [EOL]         obj2[0] = new TestObject(4); [EOL]     
@Test [EOL]     public void testObjectArray() { [EOL]         final TestObject[] obj1 = new TestObject[2]; [EOL]         obj1[0] = new TestObject(4); [EOL]         obj1[1] = new TestObject(5); [EOL]         final TestObject[] obj2 = new TestObject[2]; [EOL]         obj2[0] = new TestObject(4); [EOL]     
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] =
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] =
@Test [EOL]     public void testLongArray() { [EOL]         final long[] obj1 = new long[2]; [EOL]         obj1[0] = 5L; [EOL]         obj1[1] = 6L; [EOL]         final long[] obj2 = new long[2]; [EOL]         obj2[0] = 5L; [EOL]         obj2[1] = 6L; [
@Test [EOL]     public void testLongArray() { [EOL]         final long[] obj1 = new long[2]; [EOL]         obj1[0] = 5L; [EOL]         obj1[1] = 6L; [EOL]         final long[] obj2 = new long[2]; [EOL]         obj2[0] = 5L; [EOL]         obj2[1] = 6L; [
@Test [EOL]     public void testIntArray() { [EOL]         final int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testIntArray() { [EOL]         final int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testShortArray() { [EOL]         final short[] obj1 = new short[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final short[] obj2 = new short[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testShortArray() { [EOL]         final short[] obj1 = new short[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final short[] obj2 = new short[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testCharArray() { [EOL]         final char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testCharArray() { [EOL]         final char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testDoubleArray() { [EOL]         final double[] obj1 = new double[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final double[] obj2 = new double[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testDoubleArray() { [EOL]         final double[] obj1 = new double[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final double[] obj2 = new double[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testDoubleArray() { [EOL]         final double[] obj1 = new double[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final double[] obj2 = new double[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL] 
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testFloatArrayHiddenByObject() { [EOL]         final float[] array1 = new float[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final float[] array2 = new float[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testFloatArrayHiddenByObject() { [EOL]         final float[] array1 = new float[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final float[] array2 = new float[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testBooleanArray() { [EOL]         final boolean[] obj1 = new boolean[2]; [EOL]         obj1[0] = true; [EOL]         obj1[1] = false; [EOL]         final boolean[] obj2 = new boolean[2]; [EOL]         obj2[0] = true; [EOL]         obj2[1] = false; [EOL]
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertFalse(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertTrue(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertTrue(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]  
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]  
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]  
@Test [EOL]     public void testDeserializeStreamClassNotFound() throws Exception { [EOL]         final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]         oos.writeObject(new ClassNotFoundSerialization()); [EOL]         oos.flush(); [EOL]         oos.close(); [EOL]  [EOL]   
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertTrue(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]     
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]        
@Test [EOL]     public void testFormatUTC() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]        
@Test [EOL]     public void testFormatCalendar() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR);
@Test [EOL]     public void testFormat() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [E
@Test [EOL]     public void testFormat() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [E
@Test [EOL]     public void testFormatCalendar() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR);
@Test [EOL]     public void testFormatCalendar() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR);
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testAbove() { [EOL]         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL]     } [
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ThreadFactory wrapped = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]        
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testIsSameDay_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13,
@Test [EOL]     public void testIsSameInstant_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13,
@Test [EOL]     public void testIsSameInstant_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13,
@Test [EOL]     public void testIsSameLocalTime_Cal() { [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]         cal1.set(2004, 6, 9, 13, 45, 0); [EOL]         cal1.set(Calendar.MILL
@Test [EOL]     public void testIsSameLocalTime_Cal() { [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]         cal1.set(2004, 6, 9, 13, 45, 0); [EOL]         cal1.set(Calendar.MILL
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss z
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss z
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss z
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss z
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss z
@Test [EOL]     public void testAddMonths() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addMonths(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4
@Test [EOL]     public void testAddWeeks() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addWeeks(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4
@Test [EOL]     public void testAddWeeks() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addWeeks(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4
@Test [EOL]     public void testAddMonths() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addMonths(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]               
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]               
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]   
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinutesOfMonthWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH); [EOL]         assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) [EOL]                         / DateUtils.MILLIS_PER
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinutesOfMonthWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH); [EOL]         assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) [EOL]                         / DateUtils.MILLIS_PER
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL] 
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]       
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL] 
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testFormatDurationISO() { [EOL]         assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10
@Test [EOL]     public void testFormatDurationISO() { [EOL]         assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [E
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("
@Test [EOL]     public void testInitializeNumeric() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[]
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, WordUtils.swapCase(null)); [EOL]         assertEquals("", WordUtils.swapCase("")); [EOL]         assertEquals("  ", WordUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [E
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, WordUtils.swapCase(null)); [EOL]         assertEquals("", WordUtils.swapCase("")); [EOL]         assertEquals("  ", WordUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [E
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testAbove() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL]     } [EOL] }
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [E
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [E
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [E
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSV() { [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCSVSimple() { [EOL]         this.testCSV(CSV_SIMPLE_FIXTURE); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL] 
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL] 
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]  
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testDouble() { [EOL]         final double o1 = 1; [EOL]         final double o2 = 2; [EOL]         assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]         assertTrue(!new EqualsBuilder().append(o1, Double.Na
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [E
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]   
@Test [EOL]     public void testMultiBooleanArray() { [EOL]         final boolean[][] array1 = new boolean[2][2]; [EOL]         final boolean[][] array2 = new boolean[2][2]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             for (int j = 0; j < array1[0].length; j++) { [EOL]      
@Test [EOL]     public void testMultiBooleanArray() { [EOL]         final boolean[][] array1 = new boolean[2][2]; [EOL]         final boolean[][] array2 = new boolean[2][2]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             for (int j = 0; j < array1[0].length; j++) { [EOL]      
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]       
@Test [EOL]     public void testEquals() { [EOL]         final MutableShort mutNumA = new MutableShort((short) 0); [EOL]         final MutableShort mutNumB = new MutableShort((short) 0); [EOL]         final MutableShort mutNumC = new MutableShort((short) 1); [EOL]  [EOL]         assertEquals((short) 0, mutNum.equals((short) 0)); [EOL]     
@Test [EOL]     public void testAddValueObject() { [EOL]         final MutableShort mutNum = new MutableShort((short) 1); [EOL]         mutNum.add((short) 1); [EOL]          [EOL]         assertEquals((short) 2, mutNum.shortValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetSet() { [EOL]         final MutableShort mutNum = new MutableShort((short) 0); [EOL]         assertEquals((short) 0, new MutableShort().shortValue()); [EOL]         assertEquals(Short.valueOf((short) 0), new MutableShort().getValue()); [EOL]          [EOL]         mutNum.setValue((short) 1); [EOL]   
@Test [EOL]     public void testEquals() { [EOL]         final MutableShort mutNumA = new MutableShort((short) 0); [EOL]         final MutableShort mutNumB = new MutableShort((short) 0); [EOL]         final MutableShort mutNumC = new MutableShort((short) 1); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assert
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testDefaultIfBlank_StringBuffers() { [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).
@Test [EOL]     public void testDefaultIfBlank_StringBuffers() { [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).
@Test [EOL]     public void testTrimToNull() { [EOL]         assertEquals(FOO, StringUtils.trimToNull(FOO + "  ")); [EOL]         assertEquals(FOO, StringUtils.trimToNull(" " + FOO + "  ")); [EOL]         assertEquals(FOO, StringUtils.trimToNull(" " + FOO)); [EOL]         assertEquals(FOO, StringUtils.tr
@Test [EOL]     public void testStripToEmpty_String() { [EOL]         assertEquals("", StringUtils.stripToEmpty(null)); [EOL]         assertEquals("", StringUtils.stripToEmpty("")); [EOL]         assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]         assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL
@Test [EOL]     public void testLANG666() { [EOL]         assertEquals("12",StringUtils.stripEnd("120.00", ".0")); [EOL]         assertEquals("121",StringUtils.stripEnd("121.00", ".0")); [EOL]     } [EOL]  [EOL]     // Methods on StringUtils that are immutable in spirit (i.e. calculate the length)  [EOL]     // should take a CharSequence parameter. Methods that are mut
@Test [EOL]     public void testLANG666() { [EOL]         assertEquals("12",StringUtils.stripEnd("120.00", ".0")); [EOL]         assertEquals("121",StringUtils.stripEnd("121.00", ".0")); [EOL]     } [EOL]  [EOL]     // Methods on StringUtils that are immutable in spirit (i.e. calculate the length)  [EOL]     // should take a CharSequence parameter. Methods that are mut
@Test [EOL]     public void testStripAll() { [EOL]         // test stripAll method, merely an array version of the above strip [EOL]         final String[] empty = new String[0]; [EOL]         final String[] fooSpace = new String[] { "  "+FOO+"  ", "  "+FOO, FOO+"  " }; [EOL]         final String[] fooDots = new String[] { ".."+FOO+"..", ".."+FO
@Test [EOL]     public void testIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]
@Test [EOL]     public void testIndexOf_String() { [EOL]         assertEquals(-1, StringUtils.indexOf(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOf("", null)); [EOL]         assertEquals(0, StringUtils.indexOf("", "")); [EOL]         assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); [EOL]     
@Test [EOL]     public void testOrdinalIndexOf() { [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUt
@Test [EOL]     public void testOrdinalIndexOf() { [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUt
@Test [EOL]     public void testIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("", "
@Test [EOL]     public void testIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("", "
@Test [EOL]     public void testIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("", "
@Test [EOL]     public void testLastIndexOf_char() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", '
@Test [EOL]     public void testLastIndexOf_char() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", '
@Test [EOL]     public void testLastIndexOf_StringInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, "",
@Test [EOL]     public void testLastIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgn
@Test [EOL]     public void testLastIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgn
@Test [EOL]     public void testLastIndexOfIgnoreCase_StringInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); [EOL]         assertEquals(-1,
@Test [EOL]     public void testContains_Char() { [EOL]         assertFalse(StringUtils.contains(null, ' ')); [EOL]         assertFalse(StringUtils.contains("", ' ')); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertTrue(StringUtils.contains("abc", '
@Test [EOL]     public void testContains_String() { [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains(null, "")); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertTrue(StringUtils.contains("abc", "
@Test [EOL]     public void testContains_String() { [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains(null, null));
@Test [EOL]     public void testContains_String() { [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains("", ""));
@Test [EOL]     public void testContainsIgnoreCase_StringString() { [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]  [EOL]         // Null tests [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]         assertFalse(
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]
@Test [EOL]     public void testContainsAny_StringCharArrayWithSupplementaryChars() { [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray())); [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU
@Test [EOL]     public void testContainsAny_StringCharArrayWithSupplementaryChars() { [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray())); [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow,
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow,
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow,
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow,
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow,
@Test [EOL]     public void testContainsNone_String() { [EOL]         final String str1 = "a"; [EOL]         final String str2 = "b"; [EOL]         final String str3 = "ab."; [EOL]         final String chars1= "b"; [EOL]         final String chars2= "."; [EOL]         final String chars3= "cd"; [EOL]   
@Test [EOL]     public void testIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]         assertEquals(2
@Test [EOL]     public void testIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]         assertEquals(2
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]  
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]  
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]  
@Test [EOL]     public void testSubstring_StringIntInt() { [EOL]         assertEquals(null, StringUtils.substring(null, 0, 0)); [EOL]         assertEquals(null, StringUtils.substring(null, 1, 2)); [EOL]         assertEquals("", StringUtils.substring("", 0, 0)); [EOL]         assertEquals("", StringUtils.substring("", 1, 2)); [EOL]   
@Test [EOL]     public void testSubstring_StringIntInt() { [EOL]         assertEquals(null, StringUtils.substring(null, 0, 0)); [EOL]         assertEquals(null, StringUtils.substring(null, 1, 2)); [EOL]         assertEquals("", StringUtils.substring("", 0, 0)); [EOL]         assertEquals("", StringUtils.substring("", 1, 2)); [EOL]   
@Test [EOL]     public void testLeft_String() { [EOL]         assertSame(null, StringUtils.left(null, -1)); [EOL]         assertSame(null, StringUtils.left(null, 0)); [EOL]         assertSame(null, StringUtils.left(null, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.left("", -1)); [EOL]    
@Test [EOL]     public void testRight_String() { [EOL]         assertSame(null, StringUtils.right(null, -1)); [EOL]         assertSame(null, StringUtils.right(null, 0)); [EOL]         assertSame(null, StringUtils.right(null, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.right("", -1)); [EOL]    
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]        
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]        
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]        
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substring
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substring
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substring
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assert
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assert
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assert
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assert
@Test [EOL]     public void testSubstringBeforeLast_StringString() { [EOL]         assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, null)); [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, "")); [EOL]         assertEquals(null,
@Test [EOL]     public void testSubstringAfterLast_StringString() { [EOL]         assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringAfterLast(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfterLast(null, "")); [EOL]         assertEquals(null, String
@Test [EOL]     public void testSubstringBetween_StringStringString() { [EOL]         assertEquals(null, StringUtils.substringBetween(null, "", "")); [EOL]         assertEquals(null, StringUtils.substringBetween("", null, "")); [EOL]         assertEquals(null, StringUtils.substringBetween("", "", null)); [EOL]         assertEquals("", StringUtils.substringBetween("", "", "")
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("
@Test [EOL]     public void testSplit_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.split("", ".").length); [EOL]         assertEquals(0, StringUtils
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL] 
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg
@Test [EOL]     public void testJoin_ArrayOfLongs() { [EOL]         assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]
@Test [EOL]     public void testJoin_ArrayOfChars() { [EOL]         assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testReverseDelimited_StringChar() { [EOL]         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); [EOL]         assertEquals("a b c
@Test [EOL]     public void testReverseDelimited_StringChar() { [EOL]         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); [EOL]         assertEquals("a b c
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL] 
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL] 
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL] 
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL] 
@Test [EOL]     public void testJoin_ArrayOfShorts() { [EOL]         assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]
@Test [EOL]     public void testJoin_ArrayOfShorts() { [EOL]         assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]
@Test [EOL]     public void testJoin_ArrayOfChars() { [EOL]         assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]  
@Test [EOL]     public void testJoin_ArrayOfDoubles() { [EOL]         assertEquals(null, StringUtils.join((double[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] 
@Test [EOL]     public void testJoin_ArrayOfFloats() { [EOL]         assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] 
@Test [EOL]     public void testJoin_ArrayOfFloats() { [EOL]         assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL] 
@Test [EOL]     public void testJoin_Objectarray() { [EOL] //        assertEquals(null, StringUtils.join(null)); // generates warning [EOL]         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast [EOL]         // test additional varargs calls [EOL]         assertEquals("", StringUtils.join()); // empty array [EOL]         assertEquals("", StringUtils.join((
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]  
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]  
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]  
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]     
@Test [EOL]     public void testDeleteWhitespace_String() { [EOL]         assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]         assertEquals("", StringUtils.deleteWhitespace("")); [EOL]         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]         assertEquals("", StringUt
@Test [EOL]     public void testDeleteWhitespace_String() { [EOL]         assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]         assertEquals("", StringUtils.deleteWhitespace("")); [EOL]         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]         assertEquals("", StringUt
@Test [EOL]     public void testRemoveStartIgnoreCase() { [EOL]         // StringUtils.removeStart("", *)        = "" [EOL]         assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); [EOL]         assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); [EOL]         assertNull("remove
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL] 
@Test [EOL]     public void testRemoveEndIgnoreCase() { [EOL]         // StringUtils.removeEndIgnoreCase("", *)        = "" [EOL]         assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]         assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]         assert
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]        
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null,
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null,
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null,
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null,
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null,
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null,
@Test [EOL]     public void testOverlay_StringStringIntInt() { [EOL]         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]          [EOL]         assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]         assertEqu
@Test [EOL]     public void testOverlay_StringStringIntInt() { [EOL]         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]          [EOL]         assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]         assertEqu
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]
@Test [EOL]     public void testChop() { [EOL]  [EOL]         final String[][] chopCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL
@Test [EOL]     public void testChop() { [EOL]  [EOL]         final String[][] chopCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL] 
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL] 
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL] 
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]    
@Test [EOL]     public void testRightPad_StringInt() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]     
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]    
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]    
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]    
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]    
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]    
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]    
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]    
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, StringUtils.swapCase(null)); [EOL]         assertEquals("", StringUtils.swapCase("")); [EOL]         assertEquals("  ", StringUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [E
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, StringUtils.swapCase(null)); [EOL]         assertEquals("", StringUtils.swapCase("")); [EOL]         assertEquals("  ", StringUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [E
@Test [EOL]     public void testIsAlpha() { [EOL]         assertFalse(StringUtils.isAlpha(null)); [EOL]         assertFalse(StringUtils.isAlpha("")); [EOL]         assertFalse(StringUtils.isAlpha(" ")); [EOL]         assertTrue(StringUtils.isAlpha("a")); [EOL]         assertTrue(StringUtils.isAlpha("A")); [EOL]     
@Test [EOL]     public void testIsAlpha() { [EOL]         assertFalse(StringUtils.isAlpha(null)); [EOL]         assertFalse(StringUtils.isAlpha("")); [EOL]         assertFalse(StringUtils.isAlpha(" ")); [EOL]         assertTrue(StringUtils.isAlpha("a")); [EOL]         assertTrue(StringUtils.isAlpha("A")); [EOL]     
@Test [EOL]     public void testIsAlphaspace() { [EOL]         assertFalse(StringUtils.isAlphaSpace(null)); [EOL]         assertTrue(StringUtils.isAlphaSpace("")); [EOL]         assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]         assertTrue(StringUtils.isAlphaSpace("a")); [EOL]         assertTrue(StringUtils.isAlphaSpace("A")); [
@Test [EOL]     public void testIsAlphanumericSpace() { [EOL]         assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]         assertTrue(StringUtils.
@Test [EOL]     public void testIsAlphanumericSpace() { [EOL]         assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]         assertTrue(StringUtils.
@Test [EOL]     public void testIsAsciiPrintable_String() { [EOL]         assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]         assertTrue(StringUtils.isAsciiPrintable("")); [EOL]         assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]        
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL
@Test [EOL]     public void testIsNumericSpace() { [EOL]         assertFalse(StringUtils.isNumericSpace(null)); [EOL]         assertTrue(StringUtils.isNumericSpace("")); [EOL]         assertTrue(StringUtils.isNumericSpace(" ")); [EOL]         assertFalse(StringUtils.isNumericSpace("a")); [EOL]         assertFalse(StringUtils.isNumericSpace("
@Test [EOL]     public void testIsWhitespace() { [EOL]         assertFalse(StringUtils.isWhitespace(null)); [EOL]         assertTrue(StringUtils.isWhitespace("")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]         assertFalse(StringUtils.
@Test [EOL]     public void testIsWhitespace() { [EOL]         assertFalse(StringUtils.isWhitespace(null)); [EOL]         assertTrue(StringUtils.isWhitespace("")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]         assertFalse(StringUtils.
@Test [EOL]     public void testIsAllLowerCase() { [EOL]         assertFalse(StringUtils.isAllLowerCase(null)); [EOL]         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]         assertFalse(StringUtils
@Test [EOL]     public void testIsAllLowerCase() { [EOL]         assertFalse(StringUtils.isAllLowerCase(null)); [EOL]         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]         assertFalse(StringUtils
@Test [EOL]     public void testIsAllUpperCase() { [EOL]         assertFalse(StringUtils.isAllUpperCase(null)); [EOL]         assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]         assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]         assert
@Test [EOL]     public void testDefault_StringString() { [EOL]         assertEquals("NULL", StringUtils.defaultString(null, "NULL")); [EOL]         assertEquals("", StringUtils.defaultString("", "NULL")); [EOL]         assertEquals("abc", StringUtils.defaultString("abc", "NULL")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all
@Test [EOL]     public void testAbbreviateMiddle() { [EOL]         // javadoc examples [EOL]         assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); [EOL]  
@Test [EOL]     public void testAbbreviateMiddle() { [EOL]         // javadoc examples [EOL]         assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); [EOL]  
@Test [EOL]     public void testAbbreviateMiddle() { [EOL]         // javadoc examples [EOL]         assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); [EOL]  
@Test [EOL]     public void testDifference_StringString() { [EOL]         assertEquals(null, StringUtils.difference(null, null)); [EOL]         assertEquals("", StringUtils.difference("", "")); [EOL]         assertEquals("abc", StringUtils.difference("", "abc")); [EOL]         assertEquals("", StringUtils.difference("abc", "")); [EOL]        
@Test [EOL]     public void testDifferenceAt_StringString() { [EOL]         assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]         assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]         assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]         assertEquals(0, StringUtils.indexOfDifference("", "
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]     
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7));
@Test [EOL]     public void testPrependIfMissing() { [EOL]         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); [EOL]         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); [EOL]
@Test [EOL]     public void testRemoveEndIgnoreCase() { [EOL]         // StringUtils.removeEndIgnoreCase("", *)        = "" [EOL]         assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]         assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]         assert
@Test [EOL]     public void testNormalizeSpace() { [EOL]         assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]         assertEquals("", StringUtils.normalizeSpace("")); [EOL]         assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]         assertEquals("", StringUt
@Test [EOL]     public void testEndsWithAny() { [EOL]         assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String)null)); [EOL]         assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] {"abc"})); [EOL]         assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abc
@Test [EOL]     public void testAppendIfMissingIgnoreCase() { [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.append
@Test [EOL]     public void testAppendIfMissingIgnoreCase() { [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.append
@Test [EOL]     public void testPrependIfMissing() { [EOL]         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); [EOL]         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); [EOL]
@Test [EOL]     public void testInitializeUnchecked() throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Object> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Object result = new Object(); [EOL]         EasyMock
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]         
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]         
@Test [EOL]     public void testHashCode() { [EOL]         final MutableInt mutNumA = new MutableInt(0); [EOL]         final MutableInt mutNumB = new MutableInt(0); [EOL]         final MutableInt mutNumC = new MutableInt(1); [EOL]  [EOL]         assertEquals(mutNum.hashCode(), mutNumA.hashCode()); [EOL]         assertEquals(
@Test [EOL]     public void testConstructors() { [EOL]         assertEquals(0, new MutableInt().intValue()); [EOL]          [EOL]         assertEquals(1, new MutableInt(1).intValue()); [EOL]          [EOL]         assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]         assertEquals(3,
@Test [EOL]     public void testCompareTo() { [EOL]         final MutableInt mutNum = new MutableInt(0); [EOL]  [EOL]         assertEquals(0, mutNum.compareTo(new MutableInt(0))); [EOL]         assertEquals(+1, mutNum.compareTo(new MutableInt(-1))); [EOL]         assertEquals(-1, mutNum.compareTo(new MutableInt(1)));
@Test [EOL]     public void testCompareTo() { [EOL]         final MutableInt mutNum = new MutableInt(0); [EOL]  [EOL]         assertEquals(0, mutNum.compareTo(new MutableInt(0))); [EOL]         assertEquals(+1, mutNum.compareTo(new MutableInt(-1))); [EOL]         assertEquals(-1, mutNum.compareTo(new MutableInt(1)));
@Test [EOL]     public void testCheckDefaults() { [EOL]         final FastDateFormat format = FastDateFormat.getInstance(); [EOL]         final FastDateFormat medium = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT); [EOL]         assertEquals(medium, format); [EOL]          [EOL]         final SimpleDateFormat sdf = new SimpleDateFormat(); [EOL]   
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America
@Test [EOL]     public void testTimeDateDefaults() { [EOL]         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), [EOL]                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getDateTimeInstance
@Test [EOL]     public void testTimeDateDefaults() { [EOL]         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), [EOL]                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getDateTimeInstance
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTruncateDate() throws Exception { [EOL]         final int calendarField = Calendar.DATE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]         baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]     
@Test [EOL]     public void testTruncateDate() throws Exception { [EOL]         final int calendarField = Calendar.DATE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]         baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]     
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]             
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCheckDifferingStyles() { [EOL]         final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]         final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG
@Test [EOL]     public void testTimeDefaults() { [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]        
@Test [EOL]     public void testCheckDifferingStyles() { [EOL]         final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]         final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG
@Test [EOL]     public void testTimeDefaults() { [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]        
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]        
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]        
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testNotEqual() { [EOL]         assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); [EOL]         assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); [EOL]         assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR));
@Test [EOL]     public void testIdentityToString() { [EOL]         assertEquals(null, ObjectUtils.identityToString(null)); [EOL]         assertEquals( [EOL]             "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), [EOL]             ObjectUtils.identityToString(FOO)); [EOL]         final Integer
@Test [EOL]     public void testIdentityToString() { [EOL]         assertEquals(null, ObjectUtils.identityToString(null)); [EOL]         assertEquals( [EOL]             "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), [EOL]             ObjectUtils.identityToString(FOO)); [EOL]         final Integer
@Test [EOL]     public void testToString_Object() { [EOL]         assertEquals("", ObjectUtils.toString((Object) null) ); [EOL]         assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) ); [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testMax() { [EOL]         final Calendar calendar = Calendar.getInstance(); [EOL]         final Date nonNullComparable1 = calendar.getTime(); [EOL]         final Date nonNullComparable2 = calendar.getTime(); [EOL]         final String[] nullAray = null; [EOL]          [EOL]         calendar.set( Calendar.YEAR, calendar.get( Calendar.
@Test [EOL]     public void testComparatorMedian() { [EOL]         final CharSequenceComparator cmp = new CharSequenceComparator(); [EOL]         final NonComparableCharSequence foo = new NonComparableCharSequence("foo"); [EOL]         final NonComparableCharSequence bar = new NonComparableCharSequence("bar"); [EOL]         final NonComparableCharSequence baz = new NonComparableCharSequence("baz"); [EOL]  
@Test [EOL]     public void testMode() { [EOL]         assertNull(ObjectUtils.mode((Object[]) null)); [EOL]         assertNull(ObjectUtils.mode()); [EOL]         assertNull(ObjectUtils.mode("foo", "bar", "baz")); [EOL]         assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); [EOL]         assertEquals("foo
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not clone
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not clone
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not clone
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not clone
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not clone
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not clone
@Test [EOL]     public void testPossibleCloneOfNotCloneable() { [EOL]         final String string = new String("apache"); [EOL]         assertSame(string, ObjectUtils.cloneIfPossible(string)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]        
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]        
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]        
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]        
@Test [EOL]     public void testGetInstance_String() { [EOL]         assertEquals(null, CharSet.getInstance(null)); [EOL]         assertEquals(null, CharSet.getInstance((String) null)); [EOL]         assertEquals(null, CharSet.getInstance(new Object[0])); [EOL]         assertEquals(null, CharSet.getInstance(null)); [EOL]         assertEquals(null, Char
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]        
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]        
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]        
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]        
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]        
@Test [EOL]     public void testEquals_Object() { [EOL]         final CharSet abc = CharSet.getInstance("abc"); [EOL]         final CharSet abc2 = CharSet.getInstance("abc"); [EOL]         final CharSet atoc = CharSet.getInstance("a-c"); [EOL]         final CharSet atoc2 = CharSet.getInstance("a-c"); [EOL]         final CharSet notatoc =
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testSubSequenceInt() { [EOL]         final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL] 
@Test [EOL]     public void testLastIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1
@Test [EOL]     public void testLastIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1
@Test [EOL]     public void testEquals() { [EOL]         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]         assertTrue(StringUtils.equals(null, null)); [EOL]         assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]         assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]    
@Test [EOL]     public void testEquals() { [EOL]         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]         assertTrue(StringUtils.equals(null, null)); [EOL]         assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]         assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]    
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(new ObjectUtils#clone
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test)); [EOL]         try { [EOL]             fail("Exception"); [EOL]         } catch (final ConcurrentException ex) { [EOL]             exception
@Test [EOL]     public void testNullExceptionPassing() { [EOL]         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) [EOL]         .addContextValue("test1", null) [EOL]         .addContextValue("test2", "some value") [EOL]         .addContextValue("test Date", new Date()) [EOL]         .addContextValue
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]      
@Test [EOL]     public void testNullExceptionPassing() { [EOL]         exceptionContext = new ContextedRuntimeException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) [EOL]         .addContextValue("test1", null) [EOL]         .addContextValue("test2", "some value") [EOL]         .addContextValue("test Date", new Date()) [EOL]         .addContextValue
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL] 
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN,
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL] 
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL
@Test [EOL]     public void testSqueeze_StringString() { [EOL]         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]         assertEquals("
@Test [EOL]     public void testSqueeze_StringString() { [EOL]         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]         assertEquals("
@Test [EOL]     public void testContainsAny_StringString() { [EOL]         assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny(null, "")); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny("
@Test [EOL]     public void testContainsAny_StringString() { [EOL]         assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny(null, "")); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny("
@Test [EOL]     public void testCount_StringString() { [EOL]         assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]         assertEquals(0, CharSetUtils.count(null, "")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]         assertEquals(0, CharSetUtils.
@Test [EOL]     public void testCount_StringString() { [EOL]         assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]         assertEquals(0, CharSetUtils.count(null, "")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]         assertEquals(0, CharSetUtils.
@Test [EOL]     public void testKeep_StringString() { [EOL]         assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.keep(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("
@Test [EOL]     public void testKeep_StringString() { [EOL]         assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.keep(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("
@Test [EOL]     public void testGetSet() { [EOL]         assertEquals(0, ObjectUtils.getInstance(new Object[])); [EOL]         assertEquals(1, ObjectUtils.getInstance(new Object[])); [EOL]         assertEquals(Double.valueOf(2).getValue()); [EOL]         assertEquals(3.size()); [EOL]         assertEquals(1.valueOf(3.3.
@Test [EOL]     public void testTripleOf() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, "foo", Boolean.FALSE); [EOL]         assertEquals(0, triple.left.intValue()); [EOL]         assertEquals(0, triple.getLeft().intValue()); [EOL]         assertEquals("foo", triple.middle); [EOL]        
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.
@Test [EOL]     public void testToString() throws Exception { [EOL]         final Triple<String, String, String> triple = Triple.of("Key", "Something", "Value"); [EOL]         assertEquals("(Key,Something,Value)", triple.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testLessThanFour() { [EOL]         final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]  [EOL]         final String input = "\\0047\\u006"; [EOL]         try { [EOL]             uu.translate(input); [EOL]             fail("A lack of digits in a Unicode escape sequence failed to throw an exception"); [
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testEquals() { [EOL]         final Mutable<String> mutNumA = new MutableObject<String>(); [EOL]         final MutableString> mutNum = new MutableObject<String>("ALPHA"); [EOL]         assertEquals(0, mutNum.getValue()); [EOL]         assertEquals(null, mutNum.hashCode(), mutNum.hashCode()); [EOL]     } [EOL]  [
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair);
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticString2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testOneArgNull() { [EOL]         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testOneArgNull() { [EOL]         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL
@Test [EOL]     public void testPatternMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD); [EOL]         assertEquals(YYYY_MM_DD, printer.getPattern()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL
@Test [EOL]     public void testToStringContainsName() { [EOL]         final DateParser parser= getInstance(YMD_SLASH); [EOL]         assertTrue(parser.toString().startsWith("FastDate")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE',
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, us
@Test [EOL]     public void testAmPm() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]  [EOL]         final DateParser h = getInstance("yyyy-MM-dd hh a mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser K = getInstance("yyyy-MM-dd KK a mm:
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]    
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]       
@Test [EOL]     public void testNoneLookup() { [EOL]         assertEquals(null, StrLookup.noneLookup().lookup(null)); [EOL]         assertEquals(null, StrLookup.noneLookup().lookup("")); [EOL]         assertEquals(null, StrLookup.noneLookup().lookup("any")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSystemProperiesLookup() { [EOL]         assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); [EOL]         try { [EOL
@Test [EOL]     public void testSystemProperiesLookup() { [EOL]         assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); [EOL]         try { [EOL
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false
@Test [EOL]     public void testInvokeExactMethod() throws Exception { [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                
@Test [EOL]     public void testInvokeExactMethod() throws Exception { [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                
@Test [EOL]     public void testInvokeExactStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]            
@Test [EOL]     public void testInvokeStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar
@Test [EOL]     public void testInvokeStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar
@Test [EOL]     public void testInvokeExactStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]            
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null,
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null,
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null,
@Test [EOL]     public void testAddEventListenerWithNoAddMethod() [EOL]     { [EOL]         final PropertyChangeSource src = new PropertyChangeSource(); [EOL]         final EventCountingInvociationHandler handler = new EventCountingInvociationHandler(); [EOL]         final ObjectChangeListener listener = handler.createListener(ObjectChangeListener.class); [EOL]         try [EOL]         { [EOL]        
@Test(expected=NullPointerException.class) [EOL]     public void testAddNullListener() [EOL]     { [EOL]         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]         listenerSupport.addListener(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEventDispatchOrder() throws PropertyVetoException [EOL]     { [EOL]         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]         final List<VetoableChangeListener> calledListeners = new ArrayList<VetoableChangeListener>(); [EOL]  [EOL]         final VetoableChangeListener listener1 = createListener(calledListeners); [EOL]    
@Test [EOL]     public void testEquals() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertEquals(Double.valueOf(2d); [EOL]         assertEquals(mutNum
@Test [EOL]     public void testGetSet() { [EOL]         final MutableDouble mutNum = new MutableDouble(0d); [EOL]         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]          [EOL]         mutNum.setValue(1); [EOL]    
@Test [EOL]     public void testGetSet() { [EOL]         final MutableDouble mutNum = new MutableDouble(0d); [EOL]         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]          [EOL]         mutNum.setValue(1); [EOL]    
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.add(1.1d); [EOL]          [EOL]         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.subtract(Double.valueOf(0.9d)); [EOL]          [EOL]         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDecrement() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValueObject() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.add(Double.valueOf(1.1d)); [EOL]          [EOL]         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mut
@Test [EOL]     public void testHashCode() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]        
@Test [EOL]     public void testHashCode() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]        
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text
@Test [EOL]     public void testChaining() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertSame(sb, sb.setNewLineText(null)); [EOL]         assertSame(sb, sb.setNullText(null)); [EOL]         assertSame(sb, sb.setLength(1)); [EOL]         assertSame(sb, sb.setCharAt(0, 'a')); [
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"),
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         s
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         s
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         s
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]    
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]    
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]    
@Test [EOL]     public void testToCharArray() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); [EOL]  [EOL]         char[] a = sb.toCharArray(); [EOL]         assertNotNull("toCharArray() result is null", a); [EOL]         assertEquals("toCharArray
@Test [EOL]     public void testGetChars ( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]          [EOL]         char[] input = new char[10]; [EOL]         char[] a = sb.getChars(input); [EOL]         assertSame (input, a); [EOL]         assertTrue(Arrays.equals(new char[10], a)); [
@Test [EOL]     public void testGetChars ( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]          [EOL]         char[] input = new char[10]; [EOL]         char[] a = sb.getChars(input); [EOL]         assertSame (input, a); [EOL]         assertTrue(Arrays.equals(new char[10], a)); [
@Test [EOL]     public void testGetCharsIntIntCharArrayInt( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]                 [EOL]         sb.append("junit"); [EOL]         char[] a = new char[5]; [EOL]         sb.getChars(0,5,a,0); [EOL]         assertTrue
@Test [EOL]     public void testGetCharsIntIntCharArrayInt( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]                 [EOL]         sb.append("junit"); [EOL]         char[] a = new char[5]; [EOL]         sb.getChars(0,5,a,0); [EOL]         assertTrue
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"),
@Test [EOL]     public void testEnsureCapacity() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.ensureCapacity(2); [EOL]         assertTrue(sb.capacity() >= 2); [EOL]          [EOL]         sb.ensureCapacity(-1); [EOL]         assertTrue(sb.capacity() >= 0); [EOL]  
@Test [EOL]     public void testAppendln_String_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]                 count[0]++; [
@Test [EOL]     public void testAppendln_String_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]                 count[0]++; [
@Test [EOL]     public void testAppendln_FormattedString() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final String str) { [EOL]                 count[0]++; [EOL]        
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]        
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]        
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]        
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]        
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"),
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]        
@Test [EOL]     public void testAppendln_StringBuilder_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppend_StrBuilder() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo")); [EOL]   
@Test [EOL]     public void testAppend_StrBuilder() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo")); [EOL]   
@Test [EOL]     public void testAppend_StrBuilder_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo"),
@Test [EOL]     public void testAppend_StrBuilder_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo"),
@Test [EOL]     public void testAppend_CharArray() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((char[]) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new char[0]); [EOL]     
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]   
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]   
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]   
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]   
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]     
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL] 
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL] 
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL] 
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL] 
@Test [EOL]     public void testAppendAll_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendAll((Object[]) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(new Object[0]); [EOL]         assertEquals
@Test [EOL]     public void testAppendAll_Iterator() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendAll((Iterator<?>) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(Collections.EMPTY_LIST.iterator()); [EOL]      
@Test [EOL]     public void testAppendWithSeparators_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Object[]) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[0], ",");
@Test [EOL]     public void testAppendWithSeparators_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Object[]) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[0], ",");
@Test [EOL]     public void testAppendWithSeparators_Collection() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Collection<?>) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Collections.EMPTY_LIST,
@Test [EOL]     public void testAppendWithSeparators_Iterator() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Collections.EMPTY_LIST.
@Test [EOL]     public void testAppendSeparator_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendSeparator(',');  // no effect [EOL]         assertEquals("", sb.toString()); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]        
@Test [EOL]     public void testAppendSeparator_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendSeparator(',');  // no effect [EOL]         assertEquals("", sb.toString()); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]        
@Test [EOL]     public void testAppendSeparator_char_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         final char startSeparator = ':'; [EOL]         final char standardSeparator = ','; [EOL]         final String foo = "foo"; [EOL]         sb.appendSeparator(standardSeparator, startSeparator);  // no effect [EOL] 
@Test [EOL]     public void testAppendPadding() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(-1, '-'); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]  
@Test [EOL]     public void testAppendPadding() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(-1, '-'); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]  
@Test [EOL]     public void testAppendFixedWidthPadLeft_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 0, '-'); [
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]         
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]    
@Test [EOL]     public void testDeleteAll_char() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteAll('X'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteAll('a'); [EOL]         assertEquals("bcbccb", sb.toString()); [EOL]     
@Test [EOL]     public void testDeleteFirst_char() { [EOL]         StrBuilder sb = new StrBuilder("abcba"); [EOL]         sb.deleteFirst('X'); [EOL]         assertEquals("abcba", sb.toString()); [EOL]         sb.deleteFirst('a'); [EOL]         assertEquals("bcba", sb.toString()); [EOL]         sb.
@Test [EOL]     public void testDeleteAll_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteAll((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteAll(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]    
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]       
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]       
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]       
@Test [EOL]     public void testReplace_int_int_String() { [EOL]         StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.replace(0, 1, "d"); [EOL]         assertEquals("dbc", sb.toString()); [EOL]         sb.replace(0, 1, "aaa"); [EOL]         assertEquals("aaabc", sb.toString()); [EOL]
@Test [EOL]     public void testReplaceFirst_char_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceFirst('x', 'y'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceFirst('a', 'd'); [EOL]         assertEquals("dbcbccba", sb.toString
@Test [EOL]     public void testReplaceFirst_char_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceFirst('x', 'y'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceFirst('a', 'd'); [EOL]         assertEquals("dbcbccba", sb.toString
@Test [EOL]     public void testReplaceAll_String_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceAll((String) null, null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceAll((String) null, "anything"); [EOL]         assertEquals("abcbccba", sb.
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]       
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]       
@Test [EOL]     public void testChaining() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertSame(sb, sb.setNewLineText(null)); [EOL]         assertSame(sb, sb.setNullText(null)); [EOL]         assertSame(sb, sb.setLength(1)); [EOL]         assertSame(sb, sb.setCharAt(0, 'a')); [
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]    
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]    
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]    
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]    
@Test [EOL]     public void testStartsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.startsWith("a")); [EOL]         assertFalse(sb.startsWith(null)); [EOL]         assertTrue(sb.startsWith("")); [EOL]         sb.append("abc"); [EOL]         assertTrue(sb.starts
@Test [EOL]     public void testEndsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.endsWith("a")); [EOL]         assertFalse(sb.endsWith("c")); [EOL]         assertTrue(sb.endsWith("")); [EOL]         assertFalse(sb.endsWith(null)); [EOL]         sb.append("abc
@Test [EOL]     public void testEndsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.endsWith("a")); [EOL]         assertFalse(sb.endsWith("c")); [EOL]         assertTrue(sb.endsWith("")); [EOL]         assertFalse(sb.endsWith(null)); [EOL]         sb.append("abc
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL] 
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL] 
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL] 
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL
@Test [EOL]     public void testRightString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("right", sb.rightString(5)); [EOL]         assertEquals("", sb.rightString(0)); [EOL]         assertEquals("", sb.rightString(-5)); [EOL]         assertEquals("left right", sb.rightString(15)); [EOL
@Test [EOL]     public void testRightString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("right", sb.rightString(5)); [EOL]         assertEquals("", sb.rightString(0)); [EOL]         assertEquals("", sb.rightString(-5)); [EOL]         assertEquals("left right", sb.rightString(15)); [EOL
@Test [EOL]     public void testMidString() { [EOL]         final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]         assertEquals("goodbye", sb.midString(6, 7)); [EOL]         assertEquals("hello", sb.midString(0, 5)); [EOL]         assertEquals("hello", sb.midString(-5, 5)); [EOL]         assertEquals("", sb.
@Test [EOL]     public void testMidString() { [EOL]         final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]         assertEquals("goodbye", sb.midString(6, 7)); [EOL]         assertEquals("hello", sb.midString(0, 5)); [EOL]         assertEquals("hello", sb.midString(-5, 5)); [EOL]         assertEquals("", sb.
@Test [EOL]     public void testContains_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]         assertTrue(sb.contains('a')); [EOL]         assertTrue(sb.contains('o')); [EOL]         assertTrue(sb.contains('z')); [EOL]         assertFalse(sb.contains('1'));
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL
@Test [EOL]     public void testIndexOf_StrMatcher() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]          [EOL]         sb.append("ab bd"); [EOL] 
@Test [EOL]     public void testIndexOf_StrMatcher() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]          [EOL]         sb.append("ab bd"); [EOL] 
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEqu
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEqu
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEqu
@Test [EOL]     public void testLastIndexOf_StrMatcher_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher
@Test [EOL]     public void testLastIndexOf_StrMatcher_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher
@Test [EOL]     public void testEqualsIgnoreCase() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]         assertTrue(sb2.equalsIgnoreCase(sb2)); [
@Test [EOL]     public void testEqualsIgnoreCase() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]         assertTrue(sb2.equalsIgnoreCase(sb2)); [
@Test [EOL]     public void testEquals() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals(sb1)); [EOL]         assertTrue(sb2.equals(sb2)); [EOL]         assert
@Test [EOL]     public void testEquals() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals(sb1)); [EOL]         assertTrue(sb2.equals(sb2)); [EOL]         assert
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"),
@Test [EOL]     public void testToStringBuilder() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendToString("Integer@88[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendToString("Integer@88[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"),
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]       
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]     
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]     
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text
@Test [EOL]     public void testAsWriter() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("base"); [EOL]         final Writer writer = sb.asWriter(); [EOL]          [EOL]         writer.write('l'); [EOL]         assertEquals("basel", sb.toString()); [EOL]          [EOL]         writer.
@Test [EOL]     public void testAsWriter() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("base"); [EOL]         final Writer writer = sb.asWriter(); [EOL]          [EOL]         writer.write('l'); [EOL]         assertEquals("basel", sb.toString()); [EOL]          [EOL]         writer.
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final Date d = new Object(); [EOL]   
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testGetMaximum() { [EOL]         assertEquals(20, (int) intRange.getMaximum()); [EOL]         assertEquals(20L, (long) longRange.getMaximum()); [EOL]         assertEquals(20f, floatRange.getMaximum(), 0.00001f); [EOL]         assertEquals(20d, doubleRange.getMaximum(), 0.00001d); [EOL]     } [EOL] 
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testIsAfter() { [EOL]         assertFalse(intRange.isAfter(null)); [EOL]          [EOL]         assertTrue(intRange.isAfter(5)); [EOL]         assertFalse(intRange.isAfter(10)); [EOL]         assertFalse(intRange.isAfter(15)); [EOL]         assertFalse(intRange.isAfter(20)); [EOL
@Test [EOL]     public void testIsAfter() { [EOL]         assertFalse(intRange.isAfter(null)); [EOL]          [EOL]         assertTrue(intRange.isAfter(5)); [EOL]         assertFalse(intRange.isAfter(10)); [EOL]         assertFalse(intRange.isAfter(15)); [EOL]         assertFalse(intRange.isAfter(20)); [EOL
@Test [EOL]     public void testElementCompareTo() { [EOL]         try { [EOL]             intRange.elementCompareTo(null); [EOL]             fail("NullPointerException should have been thrown"); [EOL]         } catch(final NullPointerException npe) { [EOL]             // expected [EOL]         } [EOL]     
@Test [EOL]     public void testElementCompareTo() { [EOL]         try { [EOL]             intRange.elementCompareTo(null); [EOL]             fail("NullPointerException should have been thrown"); [EOL]         } catch(final NullPointerException npe) { [EOL]             // expected [EOL]         } [EOL]     
@Test [EOL]     public void testIsAfterRange() { [EOL]         assertFalse(intRange.isAfterRange(null)); [EOL]          [EOL]         assertTrue(intRange.isAfterRange(Range.between(5, 9))); [EOL]          [EOL]         assertFalse(intRange.isAfterRange(Range.between(5, 10))); [EOL]         assertFalse(intRange.
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange,
@Test [EOL]     public void testHashCode() { [EOL]         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); [EOL]         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); [EOL]          [EOL]         assertEquals(intRange.hashCode(), intRange.hashCode()); [EOL]         assertTrue(intRange.hashCode() != 0); [EOL]    
@Test [EOL]     public void testToString() { [EOL]         assertNotNull(byteRange.toString()); [EOL]          [EOL]         final String str = intRange.toString(); [EOL]         assertEquals("[10..20]", str); [EOL]         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL]     } [EOL] 
@Test [EOL]     public void testToString() { [EOL]         assertNotNull(byteRange.toString()); [EOL]          [EOL]         final String str = intRange.toString(); [EOL]         assertEquals("[10..20]", str); [EOL]         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL]     } [EOL] 
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]             
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DateParser parser= getInstance(yMdHmsSZ, REYKJAVIK); [EOL]         assertEquals(REYKJAVIK, parser.getTimeZone()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]        
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DateParser parser1= getInstance(YMD_SLASH); [EOL]         final DateParser parser2= getInstance(YMD_SLASH); [EOL]  [EOL]         assertEquals(parser1, parser2); [EOL]         assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]  [EOL]         assertFalse(parser1
@Test [EOL]     public void testEquals() { [EOL]         final DateParser parser1= getInstance(YMD_SLASH); [EOL]         final DateParser parser2= getInstance(YMD_SLASH); [EOL]  [EOL]         assertEquals(parser1, parser2); [EOL]         assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]  [EOL]         assertFalse(parser1
@Test [EOL]     public void testLANG_831() throws Exception { [EOL]         testSdfAndFdp("M E","3  Tue", true); [EOL]     } [EOL]  [EOL]     private void testSdfAndFdp(final String format, final String date, final boolean shouldFail) [EOL]             throws Exception { [EOL]         final boolean debug = false; [EOL]         Date dfdp =
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser f
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser f
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser f
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser f
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final Extended
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final Extended
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final Extended
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]   
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]   
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]   
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]   
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]   
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]
@Test [EOL]     public void testInitializeUnchecked() throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Object> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Object result = new Object(); [EOL]         EasyMock
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertEquals("Wrong object", VALUE, init.get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests equals() if the expected result is true. [EOL]      */ [EOL]
@Test [EOL]     public void testEqualsTrue() { [EOL]         checkEquals(init, true); [EOL]         ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>( [EOL]                 Integer.valueOf(VALUE.intValue())); [EOL]         checkEquals(init2, true); [EOL]         init = new ConstantInitializer<Integer>(null); [EOL]   
@Test [EOL]     public void testEqualsWithOtherObjects() { [EOL]         checkEquals(null, false); [EOL]         checkEquals(this, false); [EOL]         checkEquals(new ConstantInitializer<String>("Test"), false); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the string representation. [EOL]      */ [EOL]
@Test [EOL]     public void testEqualsWithOtherObjects() { [EOL]         checkEquals(null, false); [EOL]         checkEquals(this, false); [EOL]         checkEquals(new ConstantInitializer<String>("Test"), false); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the string representation. [EOL]      */ [EOL]
