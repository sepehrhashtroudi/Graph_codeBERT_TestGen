lang3/ClassUtils.java
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortClassName_Class() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]  [EOL]         // LANG-535 [EOL]         assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]         assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]  [EOL]         // Primitives [EOL]         assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]         assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]         assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]         assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]         assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]         assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]         assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]         assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]  [EOL]         // Primitive Arrays [EOL]         assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]         assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]         assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]         assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]         assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]         assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]         assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]         assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]  [EOL]         // Arrays of arrays of ... [EOL]         assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]         assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]         assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object(){}.getClass())); [EOL]         assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL]     } [EOL]  [EOL]  [EOL]  [EOL]
@Test [EOL]     public void test_getShortClassName_Class() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]  [EOL]         // LANG-535 [EOL]         assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]         assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]  [EOL]         // Primitives [EOL]         assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]         assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]         assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]         assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]         assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]         assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]         assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]         assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]  [EOL]         // Primitive Arrays [EOL]         assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]         assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]         assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]         assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]         assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]         assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]         assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]         assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]  [EOL]         // Arrays of arrays of ... [EOL]         assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]         assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]         assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object(){}.getClass())); [EOL]         assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL]     } [EOL]  [EOL]  [EOL]  [EOL]
@Test [EOL]     public void test_getShortClassName_Class() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class)); [EOL]         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getShortClassName((Class<?>) null)); [EOL]  [EOL]         // LANG-535 [EOL]         assertEquals("String[]", ClassUtils.getShortClassName(String[].class)); [EOL]         assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class)); [EOL]  [EOL]         // Primitives [EOL]         assertEquals("boolean", ClassUtils.getShortClassName(boolean.class)); [EOL]         assertEquals("byte", ClassUtils.getShortClassName(byte.class)); [EOL]         assertEquals("char", ClassUtils.getShortClassName(char.class)); [EOL]         assertEquals("short", ClassUtils.getShortClassName(short.class)); [EOL]         assertEquals("int", ClassUtils.getShortClassName(int.class)); [EOL]         assertEquals("long", ClassUtils.getShortClassName(long.class)); [EOL]         assertEquals("float", ClassUtils.getShortClassName(float.class)); [EOL]         assertEquals("double", ClassUtils.getShortClassName(double.class)); [EOL]  [EOL]         // Primitive Arrays [EOL]         assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class)); [EOL]         assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class)); [EOL]         assertEquals("char[]", ClassUtils.getShortClassName(char[].class)); [EOL]         assertEquals("short[]", ClassUtils.getShortClassName(short[].class)); [EOL]         assertEquals("int[]", ClassUtils.getShortClassName(int[].class)); [EOL]         assertEquals("long[]", ClassUtils.getShortClassName(long[].class)); [EOL]         assertEquals("float[]", ClassUtils.getShortClassName(float[].class)); [EOL]         assertEquals("double[]", ClassUtils.getShortClassName(double[].class)); [EOL]  [EOL]         // Arrays of arrays of ... [EOL]         assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class)); [EOL]         assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class)); [EOL]         assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class)); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.2", ClassUtils.getShortClassName(new Object(){}.getClass())); [EOL]         assertEquals("ClassUtilsTest.2Named", ClassUtils.getShortClassName(Named.class)); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(Inner.class)); [EOL]     } [EOL]  [EOL]  [EOL]  [EOL]
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getSimpleName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getSimpleName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getPackageName_Object() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getPackageName_Class() { [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getPackageName((Class<?>)null)); [EOL]  [EOL]         // LANG-535 [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]  [EOL]         // Primitive Arrays [EOL]         assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]  [EOL]         // Arrays of arrays of ... [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); [EOL]          [EOL]         // On-the-fly types [EOL]         class Named extends Object {} [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object(){}.getClass())); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getPackageName_Class() { [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getPackageName((Class<?>)null)); [EOL]  [EOL]         // LANG-535 [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]  [EOL]         // Primitive Arrays [EOL]         assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]  [EOL]         // Arrays of arrays of ... [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class)); [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class)); [EOL]          [EOL]         // On-the-fly types [EOL]         class Named extends Object {} [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Object(){}.getClass())); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(Named.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getPackageName_String() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]         assertEquals("", ClassUtils.getPackageName((String)null)); [EOL]         assertEquals("", ClassUtils.getPackageName("")); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getPackageName_String() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]         assertEquals("", ClassUtils.getPackageName((String)null)); [EOL]         assertEquals("", ClassUtils.getPackageName("")); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getAllSuperclasses_Class() { [EOL]         final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]         assertEquals(2, list.size()); [EOL]         assertEquals(CX.class, list.get(0)); [EOL]         assertEquals(Object.class, list.get(1)); [EOL]  [EOL]         assertEquals(null, ClassUtils.getAllSuperclasses(null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getAllInterfaces_Class() { [EOL]         final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]         assertEquals(6, list.size()); [EOL]         assertEquals(IB.class, list.get(0)); [EOL]         assertEquals(IC.class, list.get(1)); [EOL]         assertEquals(ID.class, list.get(2)); [EOL]         assertEquals(IE.class, list.get(3)); [EOL]         assertEquals(IF.class, list.get(4)); [EOL]         assertEquals(IA.class, list.get(5)); [EOL]  [EOL]         assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL]     } [EOL]  [EOL]     private static interface IA { [EOL]     } [EOL]     private static interface IB { [EOL]     } [EOL]     private static interface IC extends ID, IE { [EOL]     } [EOL]     private static interface ID { [EOL]     } [EOL]     private static interface IE extends IF { [EOL]     } [EOL]     private static interface IF { [EOL]     } [EOL]     private static class CX implements IB, IA, IE { [EOL]     } [EOL]     private static class CY extends CX implements IB, IC { [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getAllInterfaces_Class() { [EOL]         final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]         assertEquals(6, list.size()); [EOL]         assertEquals(IB.class, list.get(0)); [EOL]         assertEquals(IC.class, list.get(1)); [EOL]         assertEquals(ID.class, list.get(2)); [EOL]         assertEquals(IE.class, list.get(3)); [EOL]         assertEquals(IF.class, list.get(4)); [EOL]         assertEquals(IA.class, list.get(5)); [EOL]  [EOL]         assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL]     } [EOL]  [EOL]     private static interface IA { [EOL]     } [EOL]     private static interface IB { [EOL]     } [EOL]     private static interface IC extends ID, IE { [EOL]     } [EOL]     private static interface ID { [EOL]     } [EOL]     private static interface IE extends IF { [EOL]     } [EOL]     private static interface IF { [EOL]     } [EOL]     private static class CX implements IB, IA, IE { [EOL]     } [EOL]     private static class CY extends CX implements IB, IC { [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_convertClassNamesToClasses_List() { [EOL]         final List<String> list = new ArrayList<String>(); [EOL]         List<Class<?>> result = ClassUtils.convertClassNamesToClasses(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add("java.lang.String"); [EOL]         list.add("java.lang.xxx"); [EOL]         list.add("java.lang.Object"); [EOL]         result = ClassUtils.convertClassNamesToClasses(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals(String.class, result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals(Object.class, result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassNamesToClasses(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [EOL]         assertEquals(null, ClassUtils.convertClassNamesToClasses(null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(null); [EOL]         list.add(Object.class); [EOL]         result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals("java.lang.String", result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals("java.lang.Object", result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassesToClassNames(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [EOL]         assertEquals(null, ClassUtils.convertClassesToClassNames(null)); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(null); [EOL]         list.add(Object.class); [EOL]         result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals("java.lang.String", result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals("java.lang.Object", result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassesToClassNames(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [EOL]         assertEquals(null, ClassUtils.convertClassesToClassNames(null)); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(null); [EOL]         list.add(Object.class); [EOL]         result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals("java.lang.String", result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals("java.lang.Object", result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassesToClassNames(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [EOL]         assertEquals(null, ClassUtils.convertClassesToClassNames(null)); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {}; [EOL]         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]         assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]         assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {}; [EOL]         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]         assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]         assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {}; [EOL]         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]         assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, arrayWrappers, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayWrappers, arrayPrimitives, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array1, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayWrappers, array1, false)); [EOL]         assertTrue(ClassUtils.isAssignable(arrayWrappers, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(arrayPrimitives, array2, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsPrimitiveOrWrapper() { [EOL]  [EOL]         // test primitive wrapper classes [EOL]         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]         assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]         assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]         assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]         assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]         assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]          [EOL]         // test primitive classes [EOL]         assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]         assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]         assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]         assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]         assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]         assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]         assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]         assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]         assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]          [EOL]         // others [EOL]         assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]         assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]         assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]         assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsPrimitiveOrWrapper() { [EOL]  [EOL]         // test primitive wrapper classes [EOL]         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]         assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]         assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]         assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]         assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]         assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]          [EOL]         // test primitive classes [EOL]         assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]         assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]         assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]         assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]         assertTrue("int", ClassUtils.isPrimitiveOrWrapper(Integer.TYPE)); [EOL]         assertTrue("long", ClassUtils.isPrimitiveOrWrapper(Long.TYPE)); [EOL]         assertTrue("double", ClassUtils.isPrimitiveOrWrapper(Double.TYPE)); [EOL]         assertTrue("float", ClassUtils.isPrimitiveOrWrapper(Float.TYPE)); [EOL]         assertTrue("Void.TYPE", ClassUtils.isPrimitiveOrWrapper(Void.TYPE)); [EOL]          [EOL]         // others [EOL]         assertFalse("null", ClassUtils.isPrimitiveOrWrapper(null)); [EOL]         assertFalse("Void.class", ClassUtils.isPrimitiveOrWrapper(Void.class)); [EOL]         assertFalse("String.class", ClassUtils.isPrimitiveOrWrapper(String.class)); [EOL]         assertFalse("this.getClass()", ClassUtils.isPrimitiveOrWrapper(this.getClass())); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); [EOL]         assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); [EOL]         assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); [EOL]         assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); [EOL]         assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); [EOL]         assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test short conversions [EOL]         assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); [EOL]         assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); [EOL]         assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); [EOL]         assertTrue("short -> int", ClassUtils.isAssignable(Short.class, Integer.TYPE, true)); [EOL]         assertTrue("short -> long", ClassUtils.isAssignable(Short.class, Long.TYPE, true)); [EOL]         assertTrue("short -> float", ClassUtils.isAssignable(Short.class, Float.TYPE, true)); [EOL]         assertTrue("short -> double", ClassUtils.isAssignable(Short.class, Double.TYPE, true)); [EOL]         assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test char conversions [EOL]         assertTrue("char -> char", ClassUtils.isAssignable(Character.class, Character.TYPE, true)); [EOL]         assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE, true)); [EOL]         assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE, true)); [EOL]         assertTrue("char -> int", ClassUtils.isAssignable(Character.class, Integer.TYPE, true)); [EOL]         assertTrue("char -> long", ClassUtils.isAssignable(Character.class, Long.TYPE, true)); [EOL]         assertTrue("char -> float", ClassUtils.isAssignable(Character.class, Float.TYPE, true)); [EOL]         assertTrue("char -> double", ClassUtils.isAssignable(Character.class, Double.TYPE, true)); [EOL]         assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test int conversions [EOL]         assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE, true)); [EOL]         assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true)); [EOL]         assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE, true)); [EOL]         assertTrue("int -> int", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); [EOL]         assertTrue("int -> long", ClassUtils.isAssignable(Integer.class, Long.TYPE, true)); [EOL]         assertTrue("int -> float", ClassUtils.isAssignable(Integer.class, Float.TYPE, true)); [EOL]         assertTrue("int -> double", ClassUtils.isAssignable(Integer.class, Double.TYPE, true)); [EOL]         assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test long conversions [EOL]         assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE, true)); [EOL]         assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE, true)); [EOL]         assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE, true)); [EOL]         assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE, true)); [EOL]         assertTrue("long -> long", ClassUtils.isAssignable(Long.class, Long.TYPE, true)); [EOL]         assertTrue("long -> float", ClassUtils.isAssignable(Long.class, Float.TYPE, true)); [EOL]         assertTrue("long -> double", ClassUtils.isAssignable(Long.class, Double.TYPE, true)); [EOL]         assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test float conversions [EOL]         assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE, true)); [EOL]         assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE, true)); [EOL]         assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE, true)); [EOL]         assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE, true)); [EOL]         assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE, true)); [EOL]         assertTrue("float -> float", ClassUtils.isAssignable(Float.class, Float.TYPE, true)); [EOL]         assertTrue("float -> double", ClassUtils.isAssignable(Float.class, Double.TYPE, true)); [EOL]         assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test double conversions [EOL]         assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE, true)); [EOL]         assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE, true)); [EOL]         assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE, true)); [EOL]         assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE, true)); [EOL]         assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE, true)); [EOL]         assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE, true)); [EOL]         assertTrue("double -> double", ClassUtils.isAssignable(Double.class, Double.TYPE, true)); [EOL]         assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test boolean conversions [EOL]         assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true)); [EOL]         assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true)); [EOL]         assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true)); [EOL]         assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true)); [EOL]         assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true)); [EOL]         assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true)); [EOL]         assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true)); [EOL]         assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); [EOL]         assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); [EOL]         assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); [EOL]         assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); [EOL]         assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); [EOL]         assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test short conversions [EOL]         assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); [EOL]         assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); [EOL]         assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); [EOL]         assertTrue("short -> int", ClassUtils.isAssignable(Short.class, Integer.TYPE, true)); [EOL]         assertTrue("short -> long", ClassUtils.isAssignable(Short.class, Long.TYPE, true)); [EOL]         assertTrue("short -> float", ClassUtils.isAssignable(Short.class, Float.TYPE, true)); [EOL]         assertTrue("short -> double", ClassUtils.isAssignable(Short.class, Double.TYPE, true)); [EOL]         assertFalse("short -> boolean", ClassUtils.isAssignable(Short.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test char conversions [EOL]         assertTrue("char -> char", ClassUtils.isAssignable(Character.class, Character.TYPE, true)); [EOL]         assertFalse("char -> byte", ClassUtils.isAssignable(Character.class, Byte.TYPE, true)); [EOL]         assertFalse("char -> short", ClassUtils.isAssignable(Character.class, Short.TYPE, true)); [EOL]         assertTrue("char -> int", ClassUtils.isAssignable(Character.class, Integer.TYPE, true)); [EOL]         assertTrue("char -> long", ClassUtils.isAssignable(Character.class, Long.TYPE, true)); [EOL]         assertTrue("char -> float", ClassUtils.isAssignable(Character.class, Float.TYPE, true)); [EOL]         assertTrue("char -> double", ClassUtils.isAssignable(Character.class, Double.TYPE, true)); [EOL]         assertFalse("char -> boolean", ClassUtils.isAssignable(Character.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test int conversions [EOL]         assertFalse("int -> char", ClassUtils.isAssignable(Integer.class, Character.TYPE, true)); [EOL]         assertFalse("int -> byte", ClassUtils.isAssignable(Integer.class, Byte.TYPE, true)); [EOL]         assertFalse("int -> short", ClassUtils.isAssignable(Integer.class, Short.TYPE, true)); [EOL]         assertTrue("int -> int", ClassUtils.isAssignable(Integer.class, Integer.TYPE, true)); [EOL]         assertTrue("int -> long", ClassUtils.isAssignable(Integer.class, Long.TYPE, true)); [EOL]         assertTrue("int -> float", ClassUtils.isAssignable(Integer.class, Float.TYPE, true)); [EOL]         assertTrue("int -> double", ClassUtils.isAssignable(Integer.class, Double.TYPE, true)); [EOL]         assertFalse("int -> boolean", ClassUtils.isAssignable(Integer.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test long conversions [EOL]         assertFalse("long -> char", ClassUtils.isAssignable(Long.class, Character.TYPE, true)); [EOL]         assertFalse("long -> byte", ClassUtils.isAssignable(Long.class, Byte.TYPE, true)); [EOL]         assertFalse("long -> short", ClassUtils.isAssignable(Long.class, Short.TYPE, true)); [EOL]         assertFalse("long -> int", ClassUtils.isAssignable(Long.class, Integer.TYPE, true)); [EOL]         assertTrue("long -> long", ClassUtils.isAssignable(Long.class, Long.TYPE, true)); [EOL]         assertTrue("long -> float", ClassUtils.isAssignable(Long.class, Float.TYPE, true)); [EOL]         assertTrue("long -> double", ClassUtils.isAssignable(Long.class, Double.TYPE, true)); [EOL]         assertFalse("long -> boolean", ClassUtils.isAssignable(Long.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test float conversions [EOL]         assertFalse("float -> char", ClassUtils.isAssignable(Float.class, Character.TYPE, true)); [EOL]         assertFalse("float -> byte", ClassUtils.isAssignable(Float.class, Byte.TYPE, true)); [EOL]         assertFalse("float -> short", ClassUtils.isAssignable(Float.class, Short.TYPE, true)); [EOL]         assertFalse("float -> int", ClassUtils.isAssignable(Float.class, Integer.TYPE, true)); [EOL]         assertFalse("float -> long", ClassUtils.isAssignable(Float.class, Long.TYPE, true)); [EOL]         assertTrue("float -> float", ClassUtils.isAssignable(Float.class, Float.TYPE, true)); [EOL]         assertTrue("float -> double", ClassUtils.isAssignable(Float.class, Double.TYPE, true)); [EOL]         assertFalse("float -> boolean", ClassUtils.isAssignable(Float.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test double conversions [EOL]         assertFalse("double -> char", ClassUtils.isAssignable(Double.class, Character.TYPE, true)); [EOL]         assertFalse("double -> byte", ClassUtils.isAssignable(Double.class, Byte.TYPE, true)); [EOL]         assertFalse("double -> short", ClassUtils.isAssignable(Double.class, Short.TYPE, true)); [EOL]         assertFalse("double -> int", ClassUtils.isAssignable(Double.class, Integer.TYPE, true)); [EOL]         assertFalse("double -> long", ClassUtils.isAssignable(Double.class, Long.TYPE, true)); [EOL]         assertFalse("double -> float", ClassUtils.isAssignable(Double.class, Float.TYPE, true)); [EOL]         assertTrue("double -> double", ClassUtils.isAssignable(Double.class, Double.TYPE, true)); [EOL]         assertFalse("double -> boolean", ClassUtils.isAssignable(Double.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test boolean conversions [EOL]         assertFalse("boolean -> char", ClassUtils.isAssignable(Boolean.class, Character.TYPE, true)); [EOL]         assertFalse("boolean -> byte", ClassUtils.isAssignable(Boolean.class, Byte.TYPE, true)); [EOL]         assertFalse("boolean -> short", ClassUtils.isAssignable(Boolean.class, Short.TYPE, true)); [EOL]         assertFalse("boolean -> int", ClassUtils.isAssignable(Boolean.class, Integer.TYPE, true)); [EOL]         assertFalse("boolean -> long", ClassUtils.isAssignable(Boolean.class, Long.TYPE, true)); [EOL]         assertFalse("boolean -> float", ClassUtils.isAssignable(Boolean.class, Float.TYPE, true)); [EOL]         assertFalse("boolean -> double", ClassUtils.isAssignable(Boolean.class, Double.TYPE, true)); [EOL]         assertTrue("boolean -> boolean", ClassUtils.isAssignable(Boolean.class, Boolean.TYPE, true)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.TYPE, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Integer.class, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Boolean.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Boolean.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Boolean.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.TYPE, Boolean.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(Boolean.class, Boolean.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWrapperToPrimitiveNull() { [EOL]         assertNull("Wrong result for null class", ClassUtils.wrapperToPrimitive(null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWrappersToPrimitivesNull() { [EOL] //        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning [EOL]         assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // equivalent cast [EOL]         // Other possible casts for null [EOL]         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); [EOL]         final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>)null); // == new Class<?>[]{null} [EOL]         assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[]{null}, castNull)); [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testGetInnerClass() throws ClassNotFoundException { [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested" ) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetInnerClass() throws ClassNotFoundException { [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested" ) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetPublicMethod() throws Exception { [EOL]         // Tests with Collections$UnmodifiableSet [EOL]         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); [EOL]             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); [EOL]  [EOL]         try { [EOL]             isEmptyMethod.invoke(set, new Object[0]); [EOL]         } catch(final java.lang.IllegalAccessException iae) { [EOL]             fail("Should not have thrown IllegalAccessException"); [EOL]         } [EOL]  [EOL]         // Tests with a public Class [EOL]         final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString",  new Class[0]); [EOL]             assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetPublicMethod() throws Exception { [EOL]         // Tests with Collections$UnmodifiableSet [EOL]         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); [EOL]             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); [EOL]  [EOL]         try { [EOL]             isEmptyMethod.invoke(set, new Object[0]); [EOL]         } catch(final java.lang.IllegalAccessException iae) { [EOL]             fail("Should not have thrown IllegalAccessException"); [EOL]         } [EOL]  [EOL]         // Tests with a public Class [EOL]         final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString",  new Class[0]); [EOL]             assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetPublicMethod() throws Exception { [EOL]         // Tests with Collections$UnmodifiableSet [EOL]         final Set<?> set = Collections.unmodifiableSet(new HashSet<Object>()); [EOL]         final Method isEmptyMethod = ClassUtils.getPublicMethod(set.getClass(), "isEmpty",  new Class[0]); [EOL]             assertTrue(Modifier.isPublic(isEmptyMethod.getDeclaringClass().getModifiers())); [EOL]  [EOL]         try { [EOL]             isEmptyMethod.invoke(set, new Object[0]); [EOL]         } catch(final java.lang.IllegalAccessException iae) { [EOL]             fail("Should not have thrown IllegalAccessException"); [EOL]         } [EOL]  [EOL]         // Tests with a public Class [EOL]         final Method toStringMethod = ClassUtils.getPublicMethod(Object.class, "toString",  new Class[0]); [EOL]             assertEquals(Object.class.getMethod("toString", new Class[0]), toStringMethod); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetClassInvalidArguments() throws Exception { [EOL]         assertGetClassThrowsNullPointerException( null ); [EOL]         assertGetClassThrowsClassNotFound( "[][][]" ); [EOL]         assertGetClassThrowsClassNotFound( "[[]" ); [EOL]         assertGetClassThrowsClassNotFound( "[" ); [EOL]         assertGetClassThrowsClassNotFound( "java.lang.String][" ); [EOL]         assertGetClassThrowsClassNotFound( ".hello.world" ); [EOL]         assertGetClassThrowsClassNotFound( "hello..world" ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToClass_object() { [EOL] //        assertNull(ClassUtils.toClass(null)); // generates warning [EOL]         assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast [EOL]          [EOL]         // Additional varargs tests [EOL]         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]         final Class<?>[] castNull = ClassUtils.toClass((Object) null); // == new Object[]{null} [EOL]         assertTrue("(Object)null -> [null]", Arrays.equals(new Object[]{null}, castNull)); [EOL]  [EOL]         assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]  [EOL]         assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, [EOL]                 ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]  [EOL]         assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, [EOL]                 ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_Class() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object(){}.getClass())); [EOL]         assertEquals("ClassUtilsTest.6Named", ClassUtils.getShortCanonicalName(Named.class)); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getPackageCanonicalName_Object() { [EOL]         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object(){}, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getPackageCanonicalName_Object() { [EOL]         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object(){}, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]         assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]         assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]         assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]         assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]         assertEquals("ClassUtilsTest.5Named", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$5Named")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$Inner")); [EOL]     } [EOL]  [EOL]
lang3/event/EventUtils.java
@Test [EOL]     public void testBindEventsToMethodWithEvent() [EOL]     { [EOL]         final PropertyChangeSource src = new PropertyChangeSource(); [EOL]         final EventCounterWithEvent counter = new EventCounterWithEvent(); [EOL]         EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]         assertEquals(0, counter.getCount()); [EOL]         src.setProperty("newValue"); [EOL]         assertEquals(1, counter.getCount()); [EOL]     } [EOL]  [EOL]  [EOL]
@Test [EOL]     public void testBindEventsToMethodWithEvent() [EOL]     { [EOL]         final PropertyChangeSource src = new PropertyChangeSource(); [EOL]         final EventCounterWithEvent counter = new EventCounterWithEvent(); [EOL]         EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]         assertEquals(0, counter.getCount()); [EOL]         src.setProperty("newValue"); [EOL]         assertEquals(1, counter.getCount()); [EOL]     } [EOL]  [EOL]  [EOL]
lang3/concurrent/BasicThreadFactory.java
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]         builder.namingPattern(PATTERN).daemon(true).priority( [EOL]                 Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler) [EOL]                 .wrappedFactory(wrappedFactory); [EOL]         builder.reset(); [EOL]         final BasicThreadFactory factory = builder.build(); [EOL]         checkFactoryDefaults(factory); [EOL]         assertNotSame("Wrapped factory not reset", wrappedFactory, factory [EOL]                 .getWrappedFactory()); [EOL]         EasyMock.verify(wrappedFactory, exHandler); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether reset() is automatically called after build(). [EOL]      */ [EOL]
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]         builder.namingPattern(PATTERN).daemon(true).priority( [EOL]                 Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler) [EOL]                 .wrappedFactory(wrappedFactory); [EOL]         builder.reset(); [EOL]         final BasicThreadFactory factory = builder.build(); [EOL]         checkFactoryDefaults(factory); [EOL]         assertNotSame("Wrapped factory not reset", wrappedFactory, factory [EOL]                 .getWrappedFactory()); [EOL]         EasyMock.verify(wrappedFactory, exHandler); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether reset() is automatically called after build(). [EOL]      */ [EOL]
@Test [EOL]     public void testNewThreadDaemonFalse() { [EOL]         checkDaemonFlag(false); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether the daemon flag is not touched on newly created threads if [EOL]      * it is not specified. [EOL]      */ [EOL]
@Test(expected = NullPointerException.class) [EOL]     public void testBuildWrappedFactoryNull() { [EOL]         builder.wrappedFactory(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tries to set a null exception handler. [EOL]      */ [EOL]
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]         builder.namingPattern(PATTERN).daemon(true).priority( [EOL]                 Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler) [EOL]                 .wrappedFactory(wrappedFactory); [EOL]         builder.reset(); [EOL]         final BasicThreadFactory factory = builder.build(); [EOL]         checkFactoryDefaults(factory); [EOL]         assertNotSame("Wrapped factory not reset", wrappedFactory, factory [EOL]                 .getWrappedFactory()); [EOL]         EasyMock.verify(wrappedFactory, exHandler); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether reset() is automatically called after build(). [EOL]      */ [EOL]
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]         builder.namingPattern(PATTERN).daemon(true).priority( [EOL]                 Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler) [EOL]                 .wrappedFactory(wrappedFactory); [EOL]         builder.reset(); [EOL]         final BasicThreadFactory factory = builder.build(); [EOL]         checkFactoryDefaults(factory); [EOL]         assertNotSame("Wrapped factory not reset", wrappedFactory, factory [EOL]                 .getWrappedFactory()); [EOL]         EasyMock.verify(wrappedFactory, exHandler); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether reset() is automatically called after build(). [EOL]      */ [EOL]
lang3/AnnotationUtils.java
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]         assertTrue(toString.endsWith(")")); [EOL]         assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]         assertTrue(toString.contains("timeout=666000")); [EOL]         assertTrue(toString.contains(", ")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]         assertTrue(toString.endsWith(")")); [EOL]         assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]         assertTrue(toString.contains("timeout=666000")); [EOL]         assertTrue(toString.contains(", ")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]         assertTrue(toString.endsWith(")")); [EOL]         assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]         assertTrue(toString.contains("timeout=666000")); [EOL]         assertTrue(toString.contains(", ")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNonEquivalentAnnotationsOfSameType() { [EOL]         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field3.getAnnotation(TestAnnotation.class))); [EOL]         assertFalse(AnnotationUtils.equals(field3.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
lang3/CharRange.java
@Test [EOL]     public void testConstructorAccessors_isNotIn_Same() { [EOL]         final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]         assertEquals('a', rangea.getStart()); [EOL]         assertEquals('a', rangea.getEnd()); [EOL]         assertTrue(rangea.isNegated()); [EOL]         assertEquals("^a", rangea.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains_Charrange() { [EOL]         final CharRange a = CharRange.is('a'); [EOL]         final CharRange b = CharRange.is('b'); [EOL]         final CharRange c = CharRange.is('c'); [EOL]         final CharRange c2 = CharRange.is('c'); [EOL]         final CharRange d = CharRange.is('d'); [EOL]         final CharRange e = CharRange.is('e'); [EOL]         final CharRange cd = CharRange.isIn('c', 'd'); [EOL]         final CharRange bd = CharRange.isIn('b', 'd'); [EOL]         final CharRange bc = CharRange.isIn('b', 'c'); [EOL]         final CharRange ab = CharRange.isIn('a', 'b'); [EOL]         final CharRange de = CharRange.isIn('d', 'e'); [EOL]         final CharRange ef = CharRange.isIn('e', 'f'); [EOL]         final CharRange ae = CharRange.isIn('a', 'e'); [EOL]  [EOL]         // normal/normal [EOL]         assertFalse(c.contains(b)); [EOL]         assertTrue(c.contains(c)); [EOL]         assertTrue(c.contains(c2)); [EOL]         assertFalse(c.contains(d)); [EOL]  [EOL]         assertFalse(c.contains(cd)); [EOL]         assertFalse(c.contains(bd)); [EOL]         assertFalse(c.contains(bc)); [EOL]         assertFalse(c.contains(ab)); [EOL]         assertFalse(c.contains(de)); [EOL]  [EOL]         assertTrue(cd.contains(c)); [EOL]         assertTrue(bd.contains(c)); [EOL]         assertTrue(bc.contains(c)); [EOL]         assertFalse(ab.contains(c)); [EOL]         assertFalse(de.contains(c)); [EOL]  [EOL]         assertTrue(ae.contains(b)); [EOL]         assertTrue(ae.contains(ab)); [EOL]         assertTrue(ae.contains(bc)); [EOL]         assertTrue(ae.contains(cd)); [EOL]         assertTrue(ae.contains(de)); [EOL]  [EOL]         final CharRange notb = CharRange.isNot('b'); [EOL]         final CharRange notc = CharRange.isNot('c'); [EOL]         final CharRange notd = CharRange.isNot('d'); [EOL]         final CharRange notab = CharRange.isNotIn('a', 'b'); [EOL]         final CharRange notbc = CharRange.isNotIn('b', 'c'); [EOL]         final CharRange notbd = CharRange.isNotIn('b', 'd'); [EOL]         final CharRange notcd = CharRange.isNotIn('c', 'd'); [EOL]         final CharRange notde = CharRange.isNotIn('d', 'e'); [EOL]         final CharRange notae = CharRange.isNotIn('a', 'e'); [EOL]         final CharRange all = CharRange.isIn((char) 0, Character.MAX_VALUE); [EOL]         final CharRange allbutfirst = CharRange.isIn((char) 1, Character.MAX_VALUE); [EOL]  [EOL]         // normal/negated [EOL]         assertFalse(c.contains(notc)); [EOL]         assertFalse(c.contains(notbd)); [EOL]         assertTrue(all.contains(notc)); [EOL]         assertTrue(all.contains(notbd)); [EOL]         assertFalse(allbutfirst.contains(notc)); [EOL]         assertFalse(allbutfirst.contains(notbd)); [EOL]  [EOL]         // negated/normal [EOL]         assertTrue(notc.contains(a)); [EOL]         assertTrue(notc.contains(b)); [EOL]         assertFalse(notc.contains(c)); [EOL]         assertTrue(notc.contains(d)); [EOL]         assertTrue(notc.contains(e)); [EOL]  [EOL]         assertTrue(notc.contains(ab)); [EOL]         assertFalse(notc.contains(bc)); [EOL]         assertFalse(notc.contains(bd)); [EOL]         assertFalse(notc.contains(cd)); [EOL]         assertTrue(notc.contains(de)); [EOL]         assertFalse(notc.contains(ae)); [EOL]         assertFalse(notc.contains(all)); [EOL]         assertFalse(notc.contains(allbutfirst)); [EOL]  [EOL]         assertTrue(notbd.contains(a)); [EOL]         assertFalse(notbd.contains(b)); [EOL]         assertFalse(notbd.contains(c)); [EOL]         assertFalse(notbd.contains(d)); [EOL]         assertTrue(notbd.contains(e)); [EOL]  [EOL]         assertTrue(notcd.contains(ab)); [EOL]         assertFalse(notcd.contains(bc)); [EOL]         assertFalse(notcd.contains(bd)); [EOL]         assertFalse(notcd.contains(cd)); [EOL]         assertFalse(notcd.contains(de)); [EOL]         assertFalse(notcd.contains(ae)); [EOL]         assertTrue(notcd.contains(ef)); [EOL]         assertFalse(notcd.contains(all)); [EOL]         assertFalse(notcd.contains(allbutfirst)); [EOL]  [EOL]         // negated/negated [EOL]         assertFalse(notc.contains(notb)); [EOL]         assertTrue(notc.contains(notc)); [EOL]         assertFalse(notc.contains(notd)); [EOL]  [EOL]         assertFalse(notc.contains(notab)); [EOL]         assertTrue(notc.contains(notbc)); [EOL]         assertTrue(notc.contains(notbd)); [EOL]         assertTrue(notc.contains(notcd)); [EOL]         assertFalse(notc.contains(notde)); [EOL]  [EOL]         assertFalse(notbd.contains(notb)); [EOL]         assertFalse(notbd.contains(notc)); [EOL]         assertFalse(notbd.contains(notd)); [EOL]  [EOL]         assertFalse(notbd.contains(notab)); [EOL]         assertFalse(notbd.contains(notbc)); [EOL]         assertTrue(notbd.contains(notbd)); [EOL]         assertFalse(notbd.contains(notcd)); [EOL]         assertFalse(notbd.contains(notde)); [EOL]         assertTrue(notbd.contains(notae)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final CharRange rangea = CharRange.is('a'); [EOL]         final CharRange rangeae = CharRange.isIn('a', 'e'); [EOL]         final CharRange rangenotbf = CharRange.isIn('b', 'f'); [EOL]  [EOL]         assertTrue(rangea.hashCode() == rangea.hashCode()); [EOL]         assertTrue(rangea.hashCode() == CharRange.is('a').hashCode()); [EOL]         assertTrue(rangeae.hashCode() == rangeae.hashCode()); [EOL]         assertTrue(rangeae.hashCode() == CharRange.isIn('a', 'e').hashCode()); [EOL]         assertTrue(rangenotbf.hashCode() == rangenotbf.hashCode()); [EOL]         assertTrue(rangenotbf.hashCode() == CharRange.isIn('b', 'f').hashCode()); [EOL]  [EOL]         assertFalse(rangea.hashCode() == rangeae.hashCode()); [EOL]         assertFalse(rangea.hashCode() == rangenotbf.hashCode()); [EOL]         assertFalse(rangeae.hashCode() == rangea.hashCode()); [EOL]         assertFalse(rangeae.hashCode() == rangenotbf.hashCode()); [EOL]         assertFalse(rangenotbf.hashCode() == rangea.hashCode()); [EOL]         assertFalse(rangenotbf.hashCode() == rangeae.hashCode()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructorAccessors_isNotIn_Same() { [EOL]         final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]         assertEquals('a', rangea.getStart()); [EOL]         assertEquals('a', rangea.getEnd()); [EOL]         assertTrue(rangea.isNegated()); [EOL]         assertEquals("^a", rangea.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIterator() { [EOL]         final CharRange a = CharRange.is('a'); [EOL]         final CharRange ad = CharRange.isIn('a', 'd'); [EOL]         final CharRange nota = CharRange.isNot('a'); [EOL]         final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]         final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]         final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]  [EOL]         final Iterator<Character> aIt = a.iterator(); [EOL]         assertNotNull(aIt); [EOL]         assertTrue(aIt.hasNext()); [EOL]         assertEquals(Character.valueOf('a'), aIt.next()); [EOL]         assertFalse(aIt.hasNext()); [EOL]  [EOL]         final Iterator<Character> adIt = ad.iterator(); [EOL]         assertNotNull(adIt); [EOL]         assertTrue(adIt.hasNext()); [EOL]         assertEquals(Character.valueOf('a'), adIt.next()); [EOL]         assertEquals(Character.valueOf('b'), adIt.next()); [EOL]         assertEquals(Character.valueOf('c'), adIt.next()); [EOL]         assertEquals(Character.valueOf('d'), adIt.next()); [EOL]         assertFalse(adIt.hasNext()); [EOL]  [EOL]         final Iterator<Character> notaIt = nota.iterator(); [EOL]         assertNotNull(notaIt); [EOL]         assertTrue(notaIt.hasNext()); [EOL]         while (notaIt.hasNext()) { [EOL]             final Character c = notaIt.next(); [EOL]             assertFalse('a' == c.charValue()); [EOL]         } [EOL]  [EOL]         final Iterator<Character> emptySetIt = emptySet.iterator(); [EOL]         assertNotNull(emptySetIt); [EOL]         assertFalse(emptySetIt.hasNext()); [EOL]         try { [EOL]             emptySetIt.next(); [EOL]             fail("Should throw NoSuchElementException"); [EOL]         } catch (final NoSuchElementException e) { [EOL]             assertTrue(true); [EOL]         } [EOL]  [EOL]         final Iterator<Character> notFirstIt = notFirst.iterator(); [EOL]         assertNotNull(notFirstIt); [EOL]         assertTrue(notFirstIt.hasNext()); [EOL]         assertEquals(Character.valueOf((char) 0), notFirstIt.next()); [EOL]         assertFalse(notFirstIt.hasNext()); [EOL]         try { [EOL]             notFirstIt.next(); [EOL]             fail("Should throw NoSuchElementException"); [EOL]         } catch (final NoSuchElementException e) { [EOL]             assertTrue(true); [EOL]         } [EOL]  [EOL]         final Iterator<Character> notLastIt = notLast.iterator(); [EOL]         assertNotNull(notLastIt); [EOL]         assertTrue(notLastIt.hasNext()); [EOL]         assertEquals(Character.valueOf(Character.MAX_VALUE), notLastIt.next()); [EOL]         assertFalse(notLastIt.hasNext()); [EOL]         try { [EOL]             notLastIt.next(); [EOL]             fail("Should throw NoSuchElementException"); [EOL]         } catch (final NoSuchElementException e) { [EOL]             assertTrue(true); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
lang3/Validate.java
@Test [EOL]     public void testIsTrue3() { [EOL]         Validate.isTrue(true, "MSG", 6); [EOL]         try { [EOL]             Validate.isTrue(false, "MSG", 6); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsTrue5() { [EOL]         Validate.isTrue(true, "MSG", 7.4d); [EOL]         try { [EOL]             Validate.isTrue(false, "MSG", 7.4d); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsTrue1() { [EOL]         Validate.isTrue(true); [EOL]         try { [EOL]             Validate.isTrue(false); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("The validated expression is false", ex.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNoNullElementsArray1() { [EOL]         String[] array = new String[] {"a", "b"}; [EOL]         Validate.noNullElements(array); [EOL]         try { [EOL]             Validate.noNullElements((Object[]) null); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("The validated object is null", ex.getMessage()); [EOL]         } [EOL]         array[1] = null; [EOL]         try { [EOL]             Validate.noNullElements(array); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("The validated array contains null element at index: 1", ex.getMessage()); [EOL]         } [EOL]          [EOL]         array = new String[] {"a", "b"}; [EOL]         final String[] test = Validate.noNullElements(array); [EOL]         assertSame(array, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNoNullElementsArray1() { [EOL]         String[] array = new String[] {"a", "b"}; [EOL]         Validate.noNullElements(array); [EOL]         try { [EOL]             Validate.noNullElements((Object[]) null); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("The validated object is null", ex.getMessage()); [EOL]         } [EOL]         array[1] = null; [EOL]         try { [EOL]             Validate.noNullElements(array); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("The validated array contains null element at index: 1", ex.getMessage()); [EOL]         } [EOL]          [EOL]         array = new String[] {"a", "b"}; [EOL]         final String[] test = Validate.noNullElements(array); [EOL]         assertSame(array, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotEmptyArray2() { [EOL]         Validate.notEmpty(new Object[] {null}, "MSG"); [EOL]         try { [EOL]             Validate.notEmpty((Object[]) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(new Object[0], "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final String[] array = new String[] {"hi"}; [EOL]         final String[] test = Validate.notEmpty(array, "Message"); [EOL]         assertSame(array, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotEmptyArray2() { [EOL]         Validate.notEmpty(new Object[] {null}, "MSG"); [EOL]         try { [EOL]             Validate.notEmpty((Object[]) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(new Object[0], "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final String[] array = new String[] {"hi"}; [EOL]         final String[] test = Validate.notEmpty(array, "Message"); [EOL]         assertSame(array, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotEmptyCollection2() { [EOL]         final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Collection<?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(coll, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         coll.add(Integer.valueOf(8)); [EOL]         Validate.notEmpty(coll, "MSG"); [EOL]          [EOL]         final Collection<Integer> test = Validate.notEmpty(coll, "Message"); [EOL]         assertSame(coll, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(map, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         map.put("ll", Integer.valueOf(8)); [EOL]         Validate.notEmpty(map, "MSG"); [EOL]          [EOL]         final Map<String, Integer> test = Validate.notEmpty(map, "Message"); [EOL]         assertSame(map, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(map, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         map.put("ll", Integer.valueOf(8)); [EOL]         Validate.notEmpty(map, "MSG"); [EOL]          [EOL]         final Map<String, Integer> test = Validate.notEmpty(map, "Message"); [EOL]         assertSame(map, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(map, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         map.put("ll", Integer.valueOf(8)); [EOL]         Validate.notEmpty(map, "MSG"); [EOL]          [EOL]         final Map<String, Integer> test = Validate.notEmpty(map, "Message"); [EOL]         assertSame(map, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotBlankNullStringShouldThrow() { [EOL]         //given [EOL]         final String string = null; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException e) { [EOL]             //then [EOL]             assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             //then [EOL]             assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             //then [EOL]             assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNoNullElementsCollection2() { [EOL]         final List<String> coll = new ArrayList<String>(); [EOL]         coll.add("a"); [EOL]         coll.add("b"); [EOL]         Validate.noNullElements(coll, "MSG"); [EOL]         try { [EOL]             Validate.noNullElements((Collection<?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("The validated object is null", ex.getMessage()); [EOL]         } [EOL]         coll.set(1, null); [EOL]         try { [EOL]             Validate.noNullElements(coll, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]          [EOL]         coll.set(1, "b"); [EOL]         final List<String> test = Validate.noNullElements(coll, "Message"); [EOL]         assertSame(coll, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNoNullElementsCollection2() { [EOL]         final List<String> coll = new ArrayList<String>(); [EOL]         coll.add("a"); [EOL]         coll.add("b"); [EOL]         Validate.noNullElements(coll, "MSG"); [EOL]         try { [EOL]             Validate.noNullElements((Collection<?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("The validated object is null", ex.getMessage()); [EOL]         } [EOL]         coll.set(1, null); [EOL]         try { [EOL]             Validate.noNullElements(coll, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]          [EOL]         coll.set(1, "b"); [EOL]         final List<String> test = Validate.noNullElements(coll, "Message"); [EOL]         assertSame(coll, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testValidIndex_withMessage_collection() { [EOL]         final Collection<String> coll = new ArrayList<String>(); [EOL]         coll.add(null); [EOL]         coll.add(null); [EOL]         Validate.validIndex(coll, 0, "Broken: "); [EOL]         Validate.validIndex(coll, 1, "Broken: "); [EOL]         try { [EOL]             Validate.validIndex(coll, -1, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.validIndex(coll, 2, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); [EOL]         final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]         assertSame(strColl, test); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testValidIndex_withMessage_collection() { [EOL]         final Collection<String> coll = new ArrayList<String>(); [EOL]         coll.add(null); [EOL]         coll.add(null); [EOL]         Validate.validIndex(coll, 0, "Broken: "); [EOL]         Validate.validIndex(coll, 1, "Broken: "); [EOL]         try { [EOL]             Validate.validIndex(coll, -1, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.validIndex(coll, 2, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final List<String> strColl = Arrays.asList(new String[] {"Hi"}); [EOL]         final List<String> test = Validate.validIndex(strColl, 0, "Message"); [EOL]         assertSame(strColl, test); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testValidIndex_withMessage_charSequence() { [EOL]         final CharSequence str = "Hi"; [EOL]         Validate.validIndex(str, 0, "Broken: "); [EOL]         Validate.validIndex(str, 1, "Broken: "); [EOL]         try { [EOL]             Validate.validIndex(str, -1, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.validIndex(str, 2, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final String input = "Hi"; [EOL]         final String test = Validate.validIndex(input, 0, "Message"); [EOL]         assertSame(input, test); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMatchesPattern() [EOL]     { [EOL]         final CharSequence str = "hi"; [EOL]         Validate.matchesPattern(str, "[a-z]*"); [EOL]         try [EOL]         { [EOL]             Validate.matchesPattern(str, "[0-9]*"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } [EOL]         catch (final IllegalArgumentException e) [EOL]         { [EOL]             assertEquals("The string hi does not match the pattern [0-9]*", e.getMessage()); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsInstanceOf_withMessage() { [EOL]         Validate.isInstanceOf(String.class, "hi", "Error"); [EOL]         Validate.isInstanceOf(Integer.class, 1, "Error"); [EOL]         try { [EOL]             Validate.isInstanceOf(List.class, "hi", "Error"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch(final IllegalArgumentException e) { [EOL]             assertEquals("Error", e.getMessage()); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsInstanceOf_withMessage() { [EOL]         Validate.isInstanceOf(String.class, "hi", "Error"); [EOL]         Validate.isInstanceOf(Integer.class, 1, "Error"); [EOL]         try { [EOL]             Validate.isInstanceOf(List.class, "hi", "Error"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch(final IllegalArgumentException e) { [EOL]             assertEquals("Error", e.getMessage()); [EOL]         } [EOL]     } [EOL]      [EOL]
lang3/tuple/MutableTriple.java
@Test [EOL]     public void testToString() throws Exception { [EOL]         assertEquals("(null,null,null)", MutableTriple.of(null, null, null).toString()); [EOL]         assertEquals("(null,two,null)", MutableTriple.of(null, "two", null).toString()); [EOL]         assertEquals("(one,null,null)", MutableTriple.of("one", null, null).toString()); [EOL]         assertEquals("(one,two,null)", MutableTriple.of("one", "two", null).toString()); [EOL]         assertEquals("(null,two,three)", MutableTriple.of(null, "two", "three").toString()); [EOL]         assertEquals("(one,null,three)", MutableTriple.of("one", null, "three").toString()); [EOL]         assertEquals("(one,two,three)", MutableTriple.of("one", "two", "three").toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() throws Exception { [EOL]         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMutate() throws Exception { [EOL]         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]         triple.setLeft(42); [EOL]         triple.setMiddle("bar"); [EOL]         triple.setRight(Boolean.FALSE); [EOL]         assertEquals(42, triple.getLeft().intValue()); [EOL]         assertEquals("bar", triple.getMiddle()); [EOL]         assertEquals(Boolean.FALSE, triple.getRight()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair); [EOL]         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origPair, deserializedPair); [EOL]         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testMutate() throws Exception { [EOL]         final MutableTriple<Integer, String, Boolean> triple = new MutableTriple<Integer, String, Boolean>(0, "foo", Boolean.TRUE); [EOL]         triple.setLeft(42); [EOL]         triple.setMiddle("bar"); [EOL]         triple.setRight(Boolean.FALSE); [EOL]         assertEquals(42, triple.getLeft().intValue()); [EOL]         assertEquals("bar", triple.getMiddle()); [EOL]         assertEquals(Boolean.FALSE, triple.getRight()); [EOL]     } [EOL]  [EOL]
lang3/mutable/MutableBoolean.java
@Test(expected=NullPointerException.class) [EOL]     public void testSetNull() { [EOL]         final MutableBoolean mutBool = new MutableBoolean(false); [EOL]         mutBool.setValue(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetSet() { [EOL]         assertFalse(new MutableBoolean().booleanValue()); [EOL]         assertEquals(Boolean.FALSE, new MutableBoolean().getValue()); [EOL]          [EOL]         final MutableBoolean mutBool = new MutableBoolean(false); [EOL]         assertEquals(Boolean.FALSE, mutBool.toBoolean()); [EOL]         assertFalse(mutBool.booleanValue()); [EOL]         assertTrue(mutBool.isFalse()); [EOL]         assertFalse(mutBool.isTrue()); [EOL]  [EOL]         mutBool.setValue(Boolean.TRUE); [EOL]         assertEquals(Boolean.TRUE, mutBool.toBoolean()); [EOL]         assertTrue(mutBool.booleanValue()); [EOL]         assertFalse(mutBool.isFalse()); [EOL]         assertTrue(mutBool.isTrue()); [EOL]  [EOL]         mutBool.setValue(false); [EOL]         assertFalse(mutBool.booleanValue()); [EOL]  [EOL]         mutBool.setValue(true); [EOL]         assertTrue(mutBool.booleanValue()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCompareTo() { [EOL]         final MutableBoolean mutBool = new MutableBoolean(false); [EOL]  [EOL]         assertEquals(0, mutBool.compareTo(new MutableBoolean(false))); [EOL]         assertEquals(-1, mutBool.compareTo(new MutableBoolean(true))); [EOL]         mutBool.setValue(true); [EOL]         assertEquals(+1, mutBool.compareTo(new MutableBoolean(false))); [EOL]         assertEquals(0, mutBool.compareTo(new MutableBoolean(true))); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); [EOL]         assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableByte((byte) 0).toString()); [EOL]         assertEquals("10", new MutableByte((byte) 10).toString()); [EOL]         assertEquals("-123", new MutableByte((byte) -123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/math/NumberUtils.java
@Test [EOL]     public void testToIntString() { [EOL]         assertTrue("toInt(String) 1 failed", NumberUtils.toInt("12345") == 12345); [EOL]         assertTrue("toInt(String) 2 failed", NumberUtils.toInt("abc") == 0); [EOL]         assertTrue("toInt(empty) failed", NumberUtils.toInt("") == 0); [EOL]         assertTrue("toInt(null) failed", NumberUtils.toInt(null) == 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toInt(String, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testToLongStringL() { [EOL]         assertTrue("toLong(String,long) 1 failed", NumberUtils.toLong("12345", 5l) == 12345l); [EOL]         assertTrue("toLong(String,long) 2 failed", NumberUtils.toLong("1234.5", 5l) == 5l); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toFloat(String)}. [EOL]      */ [EOL]
@Test [EOL]     public void testToFloatString() { [EOL]         assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]         assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]         assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]         assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE+"") ==  Float.MAX_VALUE); [EOL]         assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE+"") == Float.MIN_VALUE); [EOL]         assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); [EOL]         assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toFloat(String, float)}. [EOL]      */ [EOL]
@Test [EOL]     public void testStringToDoubleStringD() { [EOL]         assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); [EOL]         assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); [EOL]     } [EOL]  [EOL]      /** [EOL]      * Test for {@link NumberUtils#toByte(String)}. [EOL]      */ [EOL]
@Test [EOL]     public void testToByteStringI() { [EOL]         assertTrue("toByte(String,byte) 1 failed", NumberUtils.toByte("123", (byte) 5) == 123); [EOL]         assertTrue("toByte(String,byte) 2 failed", NumberUtils.toByte("12.3", (byte) 5) == 5); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toShort(String)}. [EOL]      */ [EOL]
@Test [EOL]     public void testToShortString() { [EOL]         assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]         assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]         assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]         assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toShort(String, short)}. [EOL]      */ [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("0x7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("#7fffffffffffffff")); [EOL]         assertEquals(new BigInteger("7fffffffffffffff0",16), NumberUtils.createNumber("#7fffffffffffffff0")); [EOL]  [EOL]         assertEquals(Integer.valueOf(017777777777), NumberUtils.createNumber("017777777777")); // 31 bits [EOL]         assertEquals(Long.valueOf(037777777777L),   NumberUtils.createNumber("037777777777")); // 32 bits [EOL]  [EOL]         assertEquals(Long.valueOf(0777777777777777777777L),      NumberUtils.createNumber("0777777777777777777777")); // 63 bits [EOL]         assertEquals(new BigInteger("1777777777777777777777",8), NumberUtils.createNumber("01777777777777777777777"));// 64 bits [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinShort() { [EOL]         assertEquals( [EOL]             "min(short[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new short[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(short[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new short[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 2", [EOL]             6.8f, [EOL]             NumberUtils.min(new float[] { 6.8f, 9.7f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 5", [EOL]             -10.6f, [EOL]             NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), [EOL]             0); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 2", [EOL]             6.8f, [EOL]             NumberUtils.min(new float[] { 6.8f, 9.7f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 5", [EOL]             -10.6f, [EOL]             NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), [EOL]             0); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 2", [EOL]             6.8f, [EOL]             NumberUtils.min(new float[] { 6.8f, 9.7f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 5", [EOL]             -10.6f, [EOL]             NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), [EOL]             0); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new long[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new long[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new long[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxInt() { [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxInt() { [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testMaxByte_nullArray() { [EOL]         NumberUtils.max((byte[]) null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxByte() { [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new byte[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new byte[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaxByte() { [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new byte[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new byte[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(byte[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new byte[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new byte[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(aF))); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max(bF))); [EOL]     } [EOL]  [EOL] } [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testMaxFloat_emptyArray() { [EOL]         NumberUtils.max(new float[0]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinimumInt() { [EOL]         assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); [EOL]         assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); [EOL]         assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); [EOL]         assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); [EOL]         assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMaximumInt() { [EOL]         assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); [EOL]         assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); [EOL]         assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); [EOL]         assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); [EOL]         assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests isNumber(String) and tests that createNumber(String) returns [EOL]      * a valid number iff isNumber(String) returns false. [EOL]      */ [EOL]
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests isNumber(String) and tests that createNumber(String) returns [EOL]      * a valid number iff isNumber(String) returns false. [EOL]      */ [EOL]
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests isNumber(String) and tests that createNumber(String) returns [EOL]      * a valid number iff isNumber(String) returns false. [EOL]      */ [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val)); [EOL]         val = "123.4E5"; [EOL]         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val)); [EOL]         val = "-1234"; [EOL]         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val)); [EOL]         val = "-1234.5"; [EOL]         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val)); [EOL]         val = "-.12345"; [EOL]         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val)); [EOL]         val = "-1234E5"; [EOL]         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val)); [EOL]         val = "0"; [EOL]         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val)); [EOL]         val = "-0"; [EOL]         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val)); [EOL]         val = "01234"; [EOL]         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val)); [EOL]         val = "-01234"; [EOL]         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val)); [EOL]         val = "0xABC123"; [EOL]         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val)); [EOL]         val = "0x0"; [EOL]         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val)); [EOL]         val = "123.4E21D"; [EOL]         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val)); [EOL]         val = "-221.23F"; [EOL]         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val)); [EOL]         val = "22338L"; [EOL]         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val)); [EOL]         val = null; [EOL]         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val)); [EOL]         val = ""; [EOL]         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val)); [EOL]         val = "--2.3"; [EOL]         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val)); [EOL]         val = ".12.3"; [EOL]         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E"; [EOL]         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E+-212"; [EOL]         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-123E2.12"; [EOL]         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xGF"; [EOL]         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val)); [EOL]         val = "0xFAE-1"; [EOL]         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val)); [EOL]         val = "."; [EOL]         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val)); [EOL]         val = "-0ABC123"; [EOL]         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4E-D"; [EOL]         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val)); [EOL]         val = "123.4ED"; [EOL]         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1234E5l"; [EOL]         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11a"; [EOL]         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1a"; [EOL]         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); [EOL]         val = "a"; [EOL]         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11g"; [EOL]         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11z"; [EOL]         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11def"; [EOL]         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11d11"; [EOL]         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); [EOL]         val = "11 11"; [EOL]         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val)); [EOL]         val = " 1111"; [EOL]         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val)); [EOL]         val = "1111 "; [EOL]         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val)); [EOL]  [EOL]         // LANG-521 [EOL]         val = "2."; [EOL]         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val)); [EOL]  [EOL]         // LANG-664 [EOL]         val = "1.1L"; [EOL]         assertFalse("isNumber(String) LANG-664 failed", NumberUtils.isNumber(val)); [EOL]     } [EOL]  [EOL]     private boolean checkCreateNumber(final String val) { [EOL]         try { [EOL]             final Object obj = NumberUtils.createNumber(val); [EOL]             if (obj == null) { [EOL]                 return false; [EOL]             } [EOL]             return true; [EOL]         } catch (final NumberFormatException e) { [EOL]             return false; [EOL]        } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // suppress instanceof warning check [EOL]
lang3/builder/ToStringBuilder.java
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * <p>This method uses reflection to build a suitable [EOL]      * <code>toString</code> value which includes static fields.</p> [EOL]      * [EOL]      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private [EOL]      * fields. This means that it will throw a security exception if run [EOL]      * under a security manager, if the permissions are not set up correctly. [EOL]      * It is also not as efficient as testing explicitly. </p> [EOL]      * [EOL]      * <p>Transient fields are not output.</p> [EOL]      * [EOL]      * <p>Superclass fields will be appended up to and including the specified superclass. [EOL]      * A null superclass is treated as <code>java.lang.Object</code>.</p> [EOL]      * [EOL]      * <p>If the style is <code>null</code>, the default [EOL]      * <code>ToStringStyle</code> is used.</p> [EOL]      * [EOL]      * @param object  the Object to be output [EOL]      * @param style  the style of the <code>toString</code> to create, [EOL]      *  may be <code>null</code> [EOL]      * @param reflectUpToClass  the superclass to reflect up to (inclusive), [EOL]      *  may be <code>null</code> [EOL]      * @return the String result [EOL]      * @throws IllegalArgumentException if the Object is <code>null</code> [EOL]      */ [EOL]     public <T> String toStringWithStatics(final T object, final ToStringStyle style, final Class<? super T> reflectUpToClass) { [EOL]         return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests ReflectionToStringBuilder setUpToClass(). [EOL]      */ [EOL]
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         int[] array = new int[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         short[] array = new short[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDouble() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLong() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // cast is not really needed, keep for consistency [EOL]
@Test [EOL]     public void testShort() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((short) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (short) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (short) 3).append("b", (short) 4).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * <p>This method uses reflection to build a suitable [EOL]      * <code>toString</code> value which includes static fields.</p> [EOL]      * [EOL]      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private [EOL]      * fields. This means that it will throw a security exception if run [EOL]      * under a security manager, if the permissions are not set up correctly. [EOL]      * It is also not as efficient as testing explicitly. </p> [EOL]      * [EOL]      * <p>Transient fields are not output.</p> [EOL]      * [EOL]      * <p>Superclass fields will be appended up to and including the specified superclass. [EOL]      * A null superclass is treated as <code>java.lang.Object</code>.</p> [EOL]      * [EOL]      * <p>If the style is <code>null</code>, the default [EOL]      * <code>ToStringStyle</code> is used.</p> [EOL]      * [EOL]      * @param object  the Object to be output [EOL]      * @param style  the style of the <code>toString</code> to create, [EOL]      *  may be <code>null</code> [EOL]      * @param reflectUpToClass  the superclass to reflect up to (inclusive), [EOL]      *  may be <code>null</code> [EOL]      * @return the String result [EOL]      * @throws IllegalArgumentException if the Object is <code>null</code> [EOL]      */ [EOL]     public <T> String toStringWithStatics(final T object, final ToStringStyle style, final Class<? super T> reflectUpToClass) { [EOL]         return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests ReflectionToStringBuilder setUpToClass(). [EOL]      */ [EOL]
@Test [EOL]     public void testAsBuilder() { [EOL]         final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]         assertEquals(sb.toString(), sb.build()); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/RandomStringUtils.java
@Test [EOL]     public void testRandomStringUtils() { [EOL]         String r1 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         String r2 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAscii(50); [EOL]         assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]         }         [EOL]         r2 = RandomStringUtils.randomAscii(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         r1 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]         assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomNumeric(50); [EOL]         assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomNumeric(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         String set = "abcdefg"; [EOL]         r1 = RandomStringUtils.random(50, set); [EOL]         assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]         } [EOL]         r2 = RandomStringUtils.random(50, set); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.random(50, (String) null); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         r2 = RandomStringUtils.random(50, (String) null); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         set = "stuvwxyz"; [EOL]         r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]         assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]         } [EOL]         r2 = RandomStringUtils.random(50, set); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.random(50, (char[]) null); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         r2 = RandomStringUtils.random(50, (char[]) null); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         final long seed = System.currentTimeMillis(); [EOL]         r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed)); [EOL]         r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed)); [EOL]         assertEquals("r1.equals(r2)", r1, r2); [EOL]  [EOL]         r1 = RandomStringUtils.random(0); [EOL]         assertEquals("random(0).equals(\"\")", "", r1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRandomStringUtils() { [EOL]         String r1 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         String r2 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAscii(50); [EOL]         assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]         }         [EOL]         r2 = RandomStringUtils.randomAscii(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         r1 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]         assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomNumeric(50); [EOL]         assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomNumeric(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         String set = "abcdefg"; [EOL]         r1 = RandomStringUtils.random(50, set); [EOL]         assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]         } [EOL]         r2 = RandomStringUtils.random(50, set); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.random(50, (String) null); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         r2 = RandomStringUtils.random(50, (String) null); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         set = "stuvwxyz"; [EOL]         r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]         assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]         } [EOL]         r2 = RandomStringUtils.random(50, set); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.random(50, (char[]) null); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         r2 = RandomStringUtils.random(50, (char[]) null); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         final long seed = System.currentTimeMillis(); [EOL]         r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed)); [EOL]         r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed)); [EOL]         assertEquals("r1.equals(r2)", r1, r2); [EOL]  [EOL]         r1 = RandomStringUtils.random(0); [EOL]         assertEquals("random(0).equals(\"\")", "", r1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExceptions() { [EOL]         final char[] DUMMY = new char[]{'a'}; // valid char array [EOL]         try { [EOL]             RandomStringUtils.random(-1); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, true, true); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, ""); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, (String)null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     /** [EOL]      * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric [EOL]      * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7 [EOL]      */   [EOL]
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]         // for a verbose compare: [EOL]         for (int i=0; i < orig.length() && i < copy.length(); i++) { [EOL]             final char o = orig.charAt(i); [EOL]             final char c = copy.charAt(i); [EOL]             assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + [EOL]             Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]         } [EOL]         // compare length also [EOL]         assertEquals(orig.length(), copy.length()); [EOL]         // just to be complete [EOL]         assertEquals(orig, copy); [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]         // for a verbose compare: [EOL]         for (int i=0; i < orig.length() && i < copy.length(); i++) { [EOL]             final char o = orig.charAt(i); [EOL]             final char c = copy.charAt(i); [EOL]             assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + [EOL]             Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]         } [EOL]         // compare length also [EOL]         assertEquals(orig.length(), copy.length()); [EOL]         // just to be complete [EOL]         assertEquals(orig, copy); [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testRandomStringUtils() { [EOL]         String r1 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         String r2 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAscii(50); [EOL]         assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]         }         [EOL]         r2 = RandomStringUtils.randomAscii(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         r1 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains alphabetic", Character.isLetter(r1.charAt(i)) && !Character.isDigit(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAlphanumeric(50); [EOL]         assertEquals("randomAlphanumeric(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains alphanumeric", Character.isLetterOrDigit(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomNumeric(50); [EOL]         assertEquals("randomNumeric(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("r1 contains numeric", Character.isDigit(r1.charAt(i)) && !Character.isLetter(r1.charAt(i))); [EOL]         } [EOL]         r2 = RandomStringUtils.randomNumeric(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         String set = "abcdefg"; [EOL]         r1 = RandomStringUtils.random(50, set); [EOL]         assertEquals("random(50, \"abcdefg\")", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]         } [EOL]         r2 = RandomStringUtils.random(50, set); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.random(50, (String) null); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         r2 = RandomStringUtils.random(50, (String) null); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         set = "stuvwxyz"; [EOL]         r1 = RandomStringUtils.random(50, set.toCharArray()); [EOL]         assertEquals("random(50, \"stuvwxyz\")", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("random char in set", set.indexOf(r1.charAt(i)) > -1); [EOL]         } [EOL]         r2 = RandomStringUtils.random(50, set); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.random(50, (char[]) null); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         r2 = RandomStringUtils.random(50, (char[]) null); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         final long seed = System.currentTimeMillis(); [EOL]         r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed)); [EOL]         r2 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed)); [EOL]         assertEquals("r1.equals(r2)", r1, r2); [EOL]  [EOL]         r1 = RandomStringUtils.random(0); [EOL]         assertEquals("random(0).equals(\"\")", "", r1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExceptions() { [EOL]         final char[] DUMMY = new char[]{'a'}; // valid char array [EOL]         try { [EOL]             RandomStringUtils.random(-1); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, true, true); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, ""); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, (String)null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     /** [EOL]      * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric [EOL]      * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7 [EOL]      */   [EOL]
@Test [EOL]     public void testExceptions() { [EOL]         final char[] DUMMY = new char[]{'a'}; // valid char array [EOL]         try { [EOL]             RandomStringUtils.random(-1); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, true, true); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, ""); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, (String)null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, 'a', 'z', false, false, DUMMY, new Random()); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     /** [EOL]      * Make sure boundary alphanumeric characters are generated by randomAlphaNumeric [EOL]      * This test will fail randomly with probability = 6 * (61/62)**1000 ~ 5.2E-7 [EOL]      */   [EOL]
lang3/exception/ContextedException.java
@Test [EOL]     public void testNullExceptionPassing() { [EOL]         exceptionContext = new ContextedException(TEST_MESSAGE_2, new Exception(TEST_MESSAGE), null) [EOL]         .addContextValue("test1", null) [EOL]         .addContextValue("test2", "some value") [EOL]         .addContextValue("test Date", new Date()) [EOL]         .addContextValue("test Nbr", Integer.valueOf(5)) [EOL]         .addContextValue("test Poorly written obj", new ObjectWithFaultyToString()); [EOL]          [EOL]         final String message = exceptionContext.getMessage(); [EOL]         assertTrue(message != null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddContextValue() { [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test1") >= 0); [EOL]         assertTrue(message.indexOf("test2") >= 0); [EOL]         assertTrue(message.indexOf("test Date") >= 0); [EOL]         assertTrue(message.indexOf("test Nbr") >= 0); [EOL]         assertTrue(message.indexOf("some value") >= 0); [EOL]         assertTrue(message.indexOf("5") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]  [EOL]         assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test1")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Date")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Nbr")); [EOL]  [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddContextValue() { [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test1") >= 0); [EOL]         assertTrue(message.indexOf("test2") >= 0); [EOL]         assertTrue(message.indexOf("test Date") >= 0); [EOL]         assertTrue(message.indexOf("test Nbr") >= 0); [EOL]         assertTrue(message.indexOf("some value") >= 0); [EOL]         assertTrue(message.indexOf("5") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]  [EOL]         assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test1")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Date")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Nbr")); [EOL]  [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
lang3/builder/HashCodeBuilder.java
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = false; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = false; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayAsObject() { [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = (byte) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((byte[]) null).toHashCode()); [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (byte) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayAsObject() { [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = (byte) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode()); [EOL]         final char[] obj = new char[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (char) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (char) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int h1 = (int) (l1 ^ l1 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6.3d; [EOL]         final long l2 = Double.doubleToLongBits(6.3d); [EOL]         final int h2 = (int) (l2 ^ l2 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int h1 = (int) (l1 ^ l1 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6.3d; [EOL]         final long l2 = Double.doubleToLongBits(6.3d); [EOL]         final int h2 = (int) (l2 ^ l2 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); [EOL]         final float[] obj = new float[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = 5.4f; [EOL]         final int h1 = Float.floatToIntBits(5.4f); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = 6.3f; [EOL]         final int h2 = Float.floatToIntBits(6.3f); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((int[]) null).toHashCode()); [EOL]         final int[] obj = new int[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayAsObject() { [EOL]         final long[] obj = new long[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5L; [EOL]         final int h1 = (int) (5L ^ 5L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6L; [EOL]         final int h2 = (int) (6L ^ 6L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayAsObject() { [EOL]         final long[] obj = new long[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5L; [EOL]         final int h1 = (int) (5L ^ 5L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6L; [EOL]         final int h2 = (int) (6L ^ 6L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); [EOL]         final Object[] obj = new Object[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = new Object(); [EOL]         assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = new Object(); [EOL]         assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj) [EOL]                 .toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArrayAsObject() { [EOL]         final char[] obj = new char[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (char) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = (char) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = false; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int h1 = (int) (l1 ^ l1 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6.3d; [EOL]         final long l2 = Double.doubleToLongBits(6.3d); [EOL]         final int h2 = (int) (l2 ^ l2 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((Object[]) null).toHashCode()); [EOL]         final Object[] obj = new Object[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = new Object(); [EOL]         assertEquals((17 * 37 + obj[0].hashCode()) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = new Object(); [EOL]         assertEquals((17 * 37 + obj[0].hashCode()) * 37 + obj[1].hashCode(), new HashCodeBuilder(17, 37).append(obj) [EOL]                 .toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (short) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (short) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (short) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSuper() { [EOL]         final Object obj = new Object(); [EOL]         assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper( [EOL]                 new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
lang3/text/translate/OctalUnescaper.java
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL]         input = "\\377"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]  [EOL]         input = "\\377 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]  [EOL]         input = "\\378 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]  [EOL]         input = "\\378"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]  [EOL]         input = "\\1"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL]         input = "\\377"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]  [EOL]         input = "\\377 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]  [EOL]         input = "\\378 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]  [EOL]         input = "\\378"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]  [EOL]         input = "\\1"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL]         input = "\\377"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]  [EOL]         input = "\\377 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]  [EOL]         input = "\\378 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]  [EOL]         input = "\\378"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]  [EOL]         input = "\\1"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\1", result); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/text/FormattableUtils.java
@Test [EOL]     public void testEllipsis() { [EOL]         assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "*").toString()); [EOL]         assertEquals("f*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "*").toString()); [EOL]         assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "*").toString()); [EOL]         assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "*").toString()); [EOL]         assertEquals(" f*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "*").toString()); [EOL]         assertEquals("   f*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "*").toString()); [EOL]         assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "*").toString()); [EOL]         assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "*").toString()); [EOL]         assertEquals("f* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "*").toString()); [EOL]         assertEquals("f*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "*").toString()); [EOL]  [EOL]         assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, "+*").toString()); [EOL]         assertEquals("+*", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, "+*").toString()); [EOL]         assertEquals(" foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, "+*").toString()); [EOL]         assertEquals("   foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, "+*").toString()); [EOL]         assertEquals(" +*", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, "+*").toString()); [EOL]         assertEquals("   +*", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, "+*").toString()); [EOL]         assertEquals("foo ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, "+*").toString()); [EOL]         assertEquals("foo   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, "+*").toString()); [EOL]         assertEquals("+* ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, "+*").toString()); [EOL]         assertEquals("+*   ", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, "+*").toString()); [EOL]     } [EOL]  [EOL]
lang3/BitField.java
@Test [EOL]     public void testGetShortValue() { [EOL]         assertEquals(bf_multi.getShortValue((short) - 1), (short) 127); [EOL]         assertEquals(bf_multi.getShortValue((short) 0), (short) 0); [EOL]         assertEquals(bf_single.getShortValue((short) - 1), (short) 1); [EOL]         assertEquals(bf_single.getShortValue((short) 0), (short) 0); [EOL]         assertEquals(bf_zero.getShortValue((short) -1), (short) 0); [EOL]         assertEquals(bf_zero.getShortValue((short) 0), (short) 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * test the getRawValue() method [EOL]      */ [EOL]
@Test [EOL]     public void testIsAllSet() { [EOL]         for (int j = 0; j < 0x3F80; j += 0x80) { [EOL]             assertTrue(!bf_multi.isAllSet(j)); [EOL]             assertTrue(bf_zero.isAllSet(j)); [EOL]         } [EOL]         assertTrue(bf_multi.isAllSet(0x3F80)); [EOL]         assertTrue(!bf_single.isAllSet(0)); [EOL]         assertTrue(bf_single.isAllSet(0x4000)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * test the setValue() method [EOL]      */ [EOL]
@Test [EOL]     public void testSetBoolean() { [EOL]         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); [EOL]         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); [EOL]         assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); [EOL]         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); [EOL]         assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); [EOL]         assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * test the setShortBoolean() method [EOL]      */ [EOL]
@Test [EOL]     public void testByte() { [EOL]         assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]         assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]         assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]         assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]         assertEquals(0, new BitField(8).setByteBoolean((byte) 8, false)); [EOL]         assertEquals(0, new BitField(16).setByteBoolean((byte) 16, false)); [EOL]         assertEquals(0, new BitField(32).setByteBoolean((byte) 32, false)); [EOL]         assertEquals(0, new BitField(64).setByteBoolean((byte) 64, false)); [EOL]         assertEquals(0, new BitField(128).setByteBoolean((byte) 128, false)); [EOL]         assertEquals(-2, new BitField(1).setByteBoolean((byte) 255, false)); [EOL]         final byte clearedBit = new BitField(0x40).setByteBoolean((byte) - 63, false); [EOL]  [EOL]         assertFalse(new BitField(0x40).isSet(clearedBit)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * test the clear() method [EOL]      */ [EOL]
lang3/concurrent/ConcurrentUtils.java
@Test [EOL]     public void testHandleCauseChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]             fail("ConcurrentException not thrown!"); [EOL]         } catch (final ConcurrentException cex) { [EOL]             assertEquals("Wrong cause", ex, cex.getCause()); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests handleCause() for a null parameter or a null cause. In this case [EOL]      * the method should do nothing. We can only test that no exception is [EOL]      * thrown. [EOL]      */ [EOL]
@Test [EOL]     public void testExtractCauseUncheckedNull() { [EOL]         assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(null)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests extractCauseUnchecked() if the cause of the passed in exception is null. [EOL]      */ [EOL]
@Test [EOL]     public void testHandleCauseUncheckedChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCauseUnchecked(new ExecutionException(ex)); [EOL]             fail("ConcurrentRuntimeException not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]             assertEquals("Wrong cause", ex, crex.getCause()); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests handleCauseUnchecked() for a null parameter or a null cause. In [EOL]      * this case the method should do nothing. We can only test that no [EOL]      * exception is thrown. [EOL]      */ [EOL]
@Test [EOL]     public void testHandleCauseUncheckedException() throws ConcurrentException { [EOL]         final RuntimeException rex = new RuntimeException("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(rex)); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final RuntimeException r) { [EOL]             assertEquals("Wrong exception", rex, r); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests handleCause() if the cause is a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testPutIfAbsentNullMap() { [EOL]         assertNull("Wrong result", [EOL]                 ConcurrentUtils.putIfAbsent(null, "test", 100)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests createIfAbsent() if the key is found in the map. [EOL]      */ [EOL]
@Test [EOL]     public void testPutIfAbsentKeyPresent() { [EOL]         final String key = "testKey"; [EOL]         final Integer value = 42; [EOL]         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]         map.put(key, value); [EOL]         assertEquals("Wrong result", value, [EOL]                 ConcurrentUtils.putIfAbsent(map, key, 0)); [EOL]         assertEquals("Wrong value in map", value, map.get(key)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests putIfAbsent() if the map does not contain the key in question. [EOL]      */ [EOL]
@Test [EOL]     public void testCreateIfAbsentNullMap() throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         EasyMock.replay(init); [EOL]         assertNull("Wrong result", [EOL]                 ConcurrentUtils.createIfAbsent(null, "test", init)); [EOL]         EasyMock.verify(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests createIfAbsent() if a null initializer is passed in. [EOL]      */ [EOL]
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex = new Exception(); [EOL]         EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]         EasyMock.replay(init); [EOL]         try { [EOL]             ConcurrentUtils.createIfAbsentUnchecked( [EOL]                     new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]             fail("Exception not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]             assertEquals("Wrong cause", ex, crex.getCause()); [EOL]         } [EOL]         EasyMock.verify(init); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testCreateIfAbsentKeyPresent() throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         EasyMock.replay(init); [EOL]         final String key = "testKey"; [EOL]         final Integer value = 42; [EOL]         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]         map.put(key, value); [EOL]         assertEquals("Wrong result", value, [EOL]                 ConcurrentUtils.createIfAbsent(map, key, init)); [EOL]         assertEquals("Wrong value in map", value, map.get(key)); [EOL]         EasyMock.verify(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests createIfAbsent() if the map does not contain the key in question. [EOL]      */ [EOL]
lang3/Conversion.java
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToInt('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToInt('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToInt('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToInt('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToInt('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('C')); [EOL]         assertEquals(0x3, Conversion.hexDigitMsb0ToInt('c')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('D')); [EOL]         assertEquals(0xB, Conversion.hexDigitMsb0ToInt('d')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('E')); [EOL]         assertEquals(0x7, Conversion.hexDigitMsb0ToInt('e')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('F')); [EOL]         assertEquals(0xF, Conversion.hexDigitMsb0ToInt('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToInt('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f')); [EOL]         try { [EOL]             Conversion.hexDigitToBinary('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitMsb0ToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitToBinary('8')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, true}, Conversion.hexDigitToBinary('9')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('A')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitToBinary('a')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('B')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitToBinary('b')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('C')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitToBinary('c')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('D')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitToBinary('d')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('E')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitToBinary('e')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('F')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitToBinary('f')); [EOL]         try { [EOL]             Conversion.hexDigitToBinary('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexDigitMsb0ToBinary(char)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToBinary('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigit(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToBinary('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigit(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToBinary('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigit(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true}, Conversion.hexDigitMsb0ToBinary('7')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitMsb0ToBinary('8')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, true}, Conversion.hexDigitMsb0ToBinary('9')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('A')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitMsb0ToBinary('a')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('B')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, true}, Conversion.hexDigitMsb0ToBinary('b')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('C')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitMsb0ToBinary('c')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('D')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, true}, Conversion.hexDigitMsb0ToBinary('d')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('E')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitMsb0ToBinary('e')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('F')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, true}, Conversion.hexDigitMsb0ToBinary('f')); [EOL]         try { [EOL]             Conversion.hexDigitMsb0ToBinary('G'); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigit(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true})); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true})); [EOL]         assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true})); [EOL]         assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true})); [EOL]         assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigit(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryBeMsb0ToHexDigit(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true})); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true})); [EOL]         assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true})); [EOL]         assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true})); [EOL]         assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigit(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryBeMsb0ToHexDigit(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals('b', Conversion.binaryToHexDigit(new boolean[]{true, true, false, true})); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(new boolean[]{false, false, true, true})); [EOL]         assertEquals('d', Conversion.binaryToHexDigit(new boolean[]{true, false, true, true})); [EOL]         assertEquals('e', Conversion.binaryToHexDigit(new boolean[]{false, true, true, true})); [EOL]         assertEquals('f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigit(new boolean[]{true, true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigit(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryBeMsb0ToHexDigit(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]             '6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false})); [EOL]         assertEquals( [EOL]             '7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true})); [EOL]         assertEquals( [EOL]             '8', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false})); [EOL]         assertEquals( [EOL]             '9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true})); [EOL]         assertEquals( [EOL]             'a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false})); [EOL]         assertEquals( [EOL]             'b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true})); [EOL]         assertEquals( [EOL]             'c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false})); [EOL]         assertEquals( [EOL]             'd', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true})); [EOL]         assertEquals( [EOL]             'e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]             '6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false})); [EOL]         assertEquals( [EOL]             '7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true})); [EOL]         assertEquals( [EOL]             '8', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false})); [EOL]         assertEquals( [EOL]             '9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true})); [EOL]         assertEquals( [EOL]             'a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false})); [EOL]         assertEquals( [EOL]             'b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true})); [EOL]         assertEquals( [EOL]             'c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false})); [EOL]         assertEquals( [EOL]             'd', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true})); [EOL]         assertEquals( [EOL]             'e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]             '6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false})); [EOL]         assertEquals( [EOL]             '7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true})); [EOL]         assertEquals( [EOL]             '8', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false})); [EOL]         assertEquals( [EOL]             '9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true})); [EOL]         assertEquals( [EOL]             'a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false})); [EOL]         assertEquals( [EOL]             'b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true})); [EOL]         assertEquals( [EOL]             'c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false})); [EOL]         assertEquals( [EOL]             'd', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true})); [EOL]         assertEquals( [EOL]             'e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]             '6', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, false})); [EOL]         assertEquals( [EOL]             '7', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, true, true})); [EOL]         assertEquals( [EOL]             '8', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, false})); [EOL]         assertEquals( [EOL]             '9', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, false, true})); [EOL]         assertEquals( [EOL]             'a', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, false})); [EOL]         assertEquals( [EOL]             'b', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, false, true, true})); [EOL]         assertEquals( [EOL]             'c', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, false})); [EOL]         assertEquals( [EOL]             'd', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, false, true})); [EOL]         assertEquals( [EOL]             'e', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, false})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{true, true, true, true})); [EOL]         try { [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]             '6', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals( [EOL]             '7', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{false, true, true, true})); [EOL]         assertEquals( [EOL]             '8', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals( [EOL]             '9', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals( [EOL]             'a', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals( [EOL]             'b', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, false, true, true})); [EOL]         assertEquals( [EOL]             'c', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals( [EOL]             'd', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, false, true})); [EOL]         assertEquals( [EOL]             'e', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals( [EOL]             'f', Conversion.binaryBeMsb0ToHexDigit(new boolean[]{true, true, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, true, false, false})); [EOL]         try { [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{}); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigit(boolean[], int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 5)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 6)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 7)); [EOL]         final boolean[] multiBytesArray = new boolean[]{ [EOL]             true, true, false, false, true, false, true, false, true, true, true, false, false, [EOL]             true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 3)); [EOL]         assertEquals('e', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 4)); [EOL]         assertEquals('7', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 5)); [EOL]         assertEquals('b', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 6)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 7)); [EOL]  [EOL]         assertEquals('a', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 8)); [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 9)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 10)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 11)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 12)); [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 13)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 14)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(multiBytesArray, 15)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigit(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigit() { [EOL]         assertEquals('0', Conversion.intToHexDigit(0)); [EOL]         assertEquals('1', Conversion.intToHexDigit(1)); [EOL]         assertEquals('2', Conversion.intToHexDigit(2)); [EOL]         assertEquals('3', Conversion.intToHexDigit(3)); [EOL]         assertEquals('4', Conversion.intToHexDigit(4)); [EOL]         assertEquals('5', Conversion.intToHexDigit(5)); [EOL]         assertEquals('6', Conversion.intToHexDigit(6)); [EOL]         assertEquals('7', Conversion.intToHexDigit(7)); [EOL]         assertEquals('8', Conversion.intToHexDigit(8)); [EOL]         assertEquals('9', Conversion.intToHexDigit(9)); [EOL]         assertEquals('a', Conversion.intToHexDigit(10)); [EOL]         assertEquals('b', Conversion.intToHexDigit(11)); [EOL]         assertEquals('c', Conversion.intToHexDigit(12)); [EOL]         assertEquals('d', Conversion.intToHexDigit(13)); [EOL]         assertEquals('e', Conversion.intToHexDigit(14)); [EOL]         assertEquals('f', Conversion.intToHexDigit(15)); [EOL]         try { [EOL]             Conversion.intToHexDigit(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHexDigitMsb0(int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigitMsb0(14)); [EOL]         assertEquals('f', Conversion.intToHexDigitMsb0(15)); [EOL]         try { [EOL]             Conversion.intToHexDigitMsb0(16); [EOL]             fail("Thrown " + IllegalArgumentException.class.getName() + " expected"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     static String dbgPrint(final boolean[] src) { [EOL]         final StringBuilder sb = new StringBuilder(); [EOL]         for (final boolean e : src) { [EOL]             if (e) { [EOL]                 sb.append("1,"); [EOL]             } else { [EOL]                 sb.append("0,"); [EOL]             } [EOL]         } [EOL]         final String out = sb.toString(); [EOL]         return out.substring(0, out.length() - 1); [EOL]     } [EOL]  [EOL]     // org.junit.Assert(boolean[], boolean[]) does not exist in JUnit 4.2 [EOL]     static void assertBinaryEquals(final boolean[] expected, final boolean[] actual) { [EOL]         assertEquals(expected.length, actual.length); [EOL]         for (int i = 0; i < expected.length; i++ ) { [EOL]             try { [EOL]                 assertEquals(expected[i], actual[i]); [EOL]             } catch (final Throwable e) { [EOL]                 final String msg = "Mismatch at index " [EOL]                     + i [EOL]                     + " between:\n" [EOL]                     + dbgPrint(expected) [EOL]                     + " and\n" [EOL]                     + dbgPrint(actual); [EOL]                 fail(msg + "\n" + e.getMessage()); [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intArrayToLong(int[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntArrayToLong() { [EOL]         final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000}; [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]         assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); [EOL]         assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); [EOL]         // assertEquals(0x0F12345678000000L,Conversion.intsToLong(src,1,0x123456789ABCDEF0L,32,2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortArrayToLong(short[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntArrayToLong() { [EOL]         final int[] src = new int[]{0xCDF1F0C1, 0x0F123456, 0x78000000}; [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x0000000000000000L, Conversion.intArrayToLong(src, 1, 0L, 0, 0)); [EOL]         assertEquals(0x00000000CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x0F123456CDF1F0C1L, Conversion.intArrayToLong(src, 0, 0L, 0, 2)); [EOL]         assertEquals(0x000000000F123456L, Conversion.intArrayToLong(src, 1, 0L, 0, 1)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.intArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567878000000L, Conversion.intArrayToLong(src, 2, 0x123456789ABCDEF0L, 0, 1)); [EOL]         // assertEquals(0x0F12345678000000L,Conversion.intsToLong(src,1,0x123456789ABCDEF0L,32,2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortArrayToLong(short[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortArrayToLong() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); [EOL]         assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x123456CDF1BCDEF0L, [EOL]             Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]         assertEquals( [EOL]             0x123478003456DEF0L, [EOL]             Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToLong(byte[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortArrayToLong() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); [EOL]         assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x123456CDF1BCDEF0L, [EOL]             Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]         assertEquals( [EOL]             0x123478003456DEF0L, [EOL]             Conversion.shortArrayToLong(src, 3, 0x123456789ABCDEF0L, 16, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToLong(byte[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortArrayToInt() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]         assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]         assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL]         // assertEquals(0x34567800,Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToInt(byte[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortArrayToInt() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]         assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]         assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL]         // assertEquals(0x34567800,Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToInt(byte[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToLong() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); [EOL]         assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]         assertEquals( [EOL]             0x123456789A7856F0L, Conversion.byteArrayToLong(src, 7, 0x123456789ABCDEF0L, 8, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortArrayToInt(short[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToInt() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]         assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]         assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL]         // assertEquals(0x56341278,Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToShort(byte[], int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToInt() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]         assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]         assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL]         // assertEquals(0x56341278,Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToShort(byte[], int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); [EOL]         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); [EOL]         assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1)); [EOL]         // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8, [EOL]         // 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToLong(String, int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); [EOL]         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); [EOL]         assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1)); [EOL]         // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8, [EOL]         // 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToLong(String, int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); [EOL]         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); [EOL]         assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1)); [EOL]         // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8, [EOL]         // 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToLong(String, int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToLong() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x0000000000000000L, Conversion.hexToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.hexToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.hexToLong(src, 0, 0L, 0, 8)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.hexToLong(src, 1, 0L, 0, 8)); [EOL]         assertEquals( [EOL]             0x123456798ABCDEF0L, Conversion.hexToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567876BCDEF0L, Conversion.hexToLong(src, 15, 0x123456798ABCDEF0L, 24, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToInt(String, int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToInt() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); [EOL]         assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); [EOL]         assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); [EOL]         assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToShort(String, int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToInt() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); [EOL]         assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); [EOL]         assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); [EOL]         assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToShort(String, int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToShort() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4)); [EOL]         assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4)); [EOL]         assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToByte(String, int, byte, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToShort() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4)); [EOL]         assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4)); [EOL]         assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToByte(String, int, byte, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToByte() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); [EOL]         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); [EOL]         assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0)); [EOL]         assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToLong(boolean[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testHexToByte() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); [EOL]         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); [EOL]         assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0)); [EOL]         assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToLong(boolean[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]         assertEquals( [EOL]             0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567876BCDEF0L, [EOL]             Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToInt(boolean[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]         assertEquals( [EOL]             0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567876BCDEF0L, [EOL]             Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToInt(boolean[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]         assertEquals( [EOL]             0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567876BCDEF0L, [EOL]             Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToInt(boolean[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]         assertEquals( [EOL]             0x123456798ABCDEF0L, Conversion.binaryToLong(src, 0, 0x123456798ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x1234567876BCDEF0L, [EOL]             Conversion.binaryToLong(src, 15 * 4, 0x123456798ABCDEF0L, 24, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToInt(boolean[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]         assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]         assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToShort(boolean[], int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]         assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]         assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToShort(boolean[], int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]         assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]         assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToShort(boolean[], int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]         assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x12345679, Conversion.binaryToInt(src, 0 * 4, 0x12345679, 0, 0 * 4)); [EOL]         assertEquals(0x87645679, Conversion.binaryToInt(src, 15 * 4, 0x12345679, 20, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToShort(boolean[], int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToShort() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals((short)0x0000, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 0 * 4)); [EOL]         assertEquals((short)0x000C, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 1 * 4)); [EOL]         assertEquals((short)0x1FDC, Conversion.binaryToShort(src, 0 * 4, (short)0, 0, 4 * 4)); [EOL]         assertEquals((short)0xF1FD, Conversion.binaryToShort(src, 1 * 4, (short)0, 0, 4 * 4)); [EOL]         assertEquals( [EOL]             (short)0x1234, Conversion.binaryToShort(src, 0 * 4, (short)0x1234, 0, 0 * 4)); [EOL]         assertEquals( [EOL]             (short)0x8764, Conversion.binaryToShort(src, 15 * 4, (short)0x1234, 4, 3 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToByte(boolean[], int, byte, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToByte() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals((byte)0x00, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 0 * 4)); [EOL]         assertEquals((byte)0x0C, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 1 * 4)); [EOL]         assertEquals((byte)0xDC, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 2 * 4)); [EOL]         assertEquals((byte)0xFD, Conversion.binaryToByte(src, 1 * 4, (byte)0, 0, 2 * 4)); [EOL]         assertEquals((byte)0x34, Conversion.binaryToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4)); [EOL]         assertEquals((byte)0x84, Conversion.binaryToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToIntArray(long, int, int[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToByte() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals((byte)0x00, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 0 * 4)); [EOL]         assertEquals((byte)0x0C, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 1 * 4)); [EOL]         assertEquals((byte)0xDC, Conversion.binaryToByte(src, 0 * 4, (byte)0, 0, 2 * 4)); [EOL]         assertEquals((byte)0xFD, Conversion.binaryToByte(src, 1 * 4, (byte)0, 0, 2 * 4)); [EOL]         assertEquals((byte)0x34, Conversion.binaryToByte(src, 0 * 4, (byte)0x34, 0, 0 * 4)); [EOL]         assertEquals((byte)0x84, Conversion.binaryToByte(src, 17 * 4, (byte)0x34, 4, 1 * 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToIntArray(long, int, int[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToIntArray() { [EOL]         assertArrayEquals( [EOL]             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 100, new int[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new int[]{}, Conversion.longToIntArray(0x0000000000000000L, 0, new int[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new int[]{0x90ABCDEF, 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new int[]{0x90ABCDEF, 0x12345678, 0xFFFFFFFF, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 0, 2)); [EOL]         // assertArrayEquals(new [EOL]         // int[]{0x90ABCDEF,0x12345678,0x90ABCDEF,0x12345678},Conversion.longToIntArray(0x1234567890ABCDEFL, [EOL]         // 0,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion [EOL]         // assertArrayEquals(new [EOL]         // int[]{0xFFFFFFFF,0x90ABCDEF,0x12345678,0x90ABCDEF},Conversion.longToIntArray(0x1234567890ABCDEFL, [EOL]         // 0,new int[]{-1,-1,-1,-1},1,3)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0x12345678}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 2)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x90ABCDEF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 0, new int[]{-1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x4855E6F7, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 1, new int[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x242AF37B, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 2, new int[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x121579BD, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 3, new int[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new int[]{0xFFFFFFFF, 0xFFFFFFFF, 0x890ABCDE, 0xFFFFFFFF}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 4, new int[]{-1, -1, -1, -1}, 2, 1)); [EOL]         // assertArrayEquals(new [EOL]         // int[]{0x4855E6F7,0x091A2B3C,0x4855E6F7,0x091A2B3C},Conversion.longToIntArray(0x1234567890ABCDEFL, [EOL]         // 1,new int[]{-1,-1,-1,-1},0,4));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new int[]{0x091A2B3C}, [EOL]             Conversion.longToIntArray(0x1234567890ABCDEFL, 33, new int[]{0}, 0, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToShortArray(long, int, short[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0x90AB, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0x1234}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xCDEF, (short)0x90AB, (short)0x5678}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0x90AB}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xCDEF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xE6F7, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xF37B, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x79BD, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xBCDE, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xE6F7, (short)0x4855, (short)0x2B3C, (short)0x091A}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x2B3C}, [EOL]             Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToShortArray(int, int, short[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0x90AB, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 3)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0x90AB, (short)0x5678, (short)0x1234}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xCDEF, (short)0x90AB, (short)0x5678}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 1, 3)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0x90AB}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 2)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xCDEF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xCDEF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xE6F7, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xF37B, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 2, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x79BD, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 3, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xBCDE, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 4, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xE6F7, (short)0x4855, (short)0x2B3C, (short)0x091A}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 1, new short[]{-1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x2B3C}, [EOL]             Conversion.longToShortArray(0x1234567890ABCDEFL, 33, new short[]{0}, 0, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToShortArray(int, int, short[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x5678, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x5678, (short)0x1234, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 2)); [EOL]         // assertArrayEquals(new [EOL]         // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0xFFFF},Conversion.intToShortArray(0x12345678, [EOL]         // 0,new short[]{-1,-1,-1,-1},0,3));//rejected by assertion [EOL]         // assertArrayEquals(new [EOL]         // short[]{(short)0x5678,(short)0x1234,(short)0x5678,(short)0x1234},Conversion.intToShortArray(0x12345678, [EOL]         // 0,new short[]{-1,-1,-1,-1},0,4)); [EOL]         // assertArrayEquals(new [EOL]         // short[]{(short)0xFFFF,(short)0x5678,(short)0x1234,(short)0x5678},Conversion.intToShortArray(0x12345678, [EOL]         // 0,new short[]{-1,-1,-1,-1},1,3)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0x1234}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 2)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x5678, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0x5678}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x2B3C, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 1, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x159E, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 2, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x8ACF, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 3, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0x4567, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 4, new short[]{-1, -1, -1, -1}, 2, 1)); [EOL]         // assertArrayEquals(new [EOL]         // short[]{(short)0xE6F7,(short)0x4855,(short)0x2B3C,(short)0x091A},Conversion.intToShortArray(0x12345678, [EOL]         // 1,new short[]{-1,-1,-1,-1},0,4));//rejected by assertion [EOL]         // assertArrayEquals(new [EOL]         // short[]{(short)0x2B3C},Conversion.intToShortArray(0x12345678,33,new [EOL]         // short[]{0},0,1));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x091A}, [EOL]             Conversion.intToShortArray(0x12345678, 17, new short[]{0}, 0, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToByteArray(long, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85, [EOL]                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4, [EOL]                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85, [EOL]                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4, [EOL]                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85, [EOL]                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4, [EOL]                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85, [EOL]                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4, [EOL]                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, [EOL]             Conversion.longToByteArray(0x0000000000000000L, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0x78, (byte)0x56, [EOL]                 (byte)0x34, (byte)0x12, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0x78, (byte)0x56, (byte)0x34, (byte)0x12}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85, [EOL]                 (byte)0xC4, (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 8)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xC4,(byte)0xB3,(byte)0xA2,(byte)0x91,(byte)0x00,(byte)0x00},Conversion.longToByteArray(0x1234567890ABCDEFL,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,8));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xC4, [EOL]                 (byte)0xB3, (byte)0xA2, (byte)0x91, (byte)0x00, (byte)0xFF}, [EOL]             Conversion.longToByteArray(0x1234567890ABCDEFL, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 7)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToByteArray(int, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.intToByteArray(0x00000000, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.intToByteArray(0x00000000, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xAB, (byte)0x90, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xAB, [EOL]                 (byte)0x90, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0x5E, (byte)0x85, [EOL]                 (byte)0xFC, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 4)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0x85,(byte)0xFC,(byte)0x00,(byte)0xFF,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.intToByteArray(0x90ABCDEF,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1},3,4));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x5E, (byte)0x85, (byte)0xFC, [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF}, [EOL]             Conversion.intToByteArray(0x90ABCDEF, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1}, 3, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortToByteArray(short, int, byte[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0xFE, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToByteArray((short)0xCDEF,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1}, 3, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToHex(long, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xCD, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 3, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xEF, (byte)0xCD, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xF7, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 1, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0x7B, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 2, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0x6F, (byte)0xFE, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 5, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1}, 3, 2)); [EOL]         // assertArrayEquals(new [EOL]         // byte[]{(byte)0xFF,(byte)0x00,(byte)0xFF,(byte)0x5E,(byte)0xFF,(byte)0xFF,(byte)0xFF},Conversion.shortToByteArray((short)0xCDEF,13,new [EOL]         // byte[]{-1, 0,-1,-1,-1,-1,-1},3,2));//rejected by assertion [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0x00, (byte)0xFF, (byte)0xFE, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 13, new byte[]{ [EOL]                 -1, 0, -1, -1, -1, -1, -1}, 3, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToHex(long, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToHex() { [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fedcba098765432fffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15)); [EOL]         assertEquals( [EOL]             "fedcba0987654321ffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16)); [EOL]         assertEquals( [EOL]             "fff3ffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]         assertEquals( [EOL]             "ffffefffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]         assertEquals( [EOL]             "ffffedcfffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]         assertEquals( [EOL]             "ffffedcba098765432ffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15)); [EOL]         assertEquals( [EOL]             "ffffedcba0987654321fffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16)); [EOL]         assertEquals( [EOL]             "7fffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "bfffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "fffdb975121fca86420fffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16)); [EOL]         // assertEquals("ffffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL,4,"ffffffffffffffffffffffff",3,16));//rejected [EOL]         // by assertion [EOL]         assertEquals( [EOL]             "fffedcba0987654321ffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15)); [EOL]         assertEquals( [EOL]             "fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16)); [EOL]         try { [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHex(int, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToHex() { [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fedcba098765432fffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 15)); [EOL]         assertEquals( [EOL]             "fedcba0987654321ffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 16)); [EOL]         assertEquals( [EOL]             "fff3ffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]         assertEquals( [EOL]             "ffffefffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]         assertEquals( [EOL]             "ffffedcfffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]         assertEquals( [EOL]             "ffffedcba098765432ffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 15)); [EOL]         assertEquals( [EOL]             "ffffedcba0987654321fffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 3, 16)); [EOL]         assertEquals( [EOL]             "7fffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "bfffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "fffdb975121fca86420fffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 3, "ffffffffffffffffffffffff", 3, 16)); [EOL]         // assertEquals("ffffffffffffffffffffffff",Conversion.longToHex(0x1234567890ABCDEFL,4,"ffffffffffffffffffffffff",3,16));//rejected [EOL]         // by assertion [EOL]         assertEquals( [EOL]             "fffedcba0987654321ffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 4, "ffffffffffffffffffffffff", 3, 15)); [EOL]         assertEquals( [EOL]             "fedcba0987654321", Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 0, 16)); [EOL]         try { [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "", 1, 8); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToHex(int, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHex() { [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fedcba0fffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7)); [EOL]         assertEquals( [EOL]             "fedcba09ffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8)); [EOL]         assertEquals( [EOL]             "fff3ffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]         assertEquals( [EOL]             "ffffefffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]         assertEquals( [EOL]             "ffffedcfffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]         assertEquals( [EOL]             "ffffedcba0ffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7)); [EOL]         assertEquals( [EOL]             "ffffedcba09fffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8)); [EOL]         assertEquals( [EOL]             "7fffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "bfffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "fffdb97512ffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8)); [EOL]         // assertEquals("ffffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, [EOL]         // 4,"ffffffffffffffffffffffff",3,8));//rejected by assertion [EOL]         assertEquals( [EOL]             "fffedcba09ffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7)); [EOL]         assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8)); [EOL]         try { [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortToHex(short, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToHex() { [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fedcba0fffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 7)); [EOL]         assertEquals( [EOL]             "fedcba09ffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 8)); [EOL]         assertEquals( [EOL]             "fff3ffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]         assertEquals( [EOL]             "ffffefffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]         assertEquals( [EOL]             "ffffedcfffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 4)); [EOL]         assertEquals( [EOL]             "ffffedcba0ffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 7)); [EOL]         assertEquals( [EOL]             "ffffedcba09fffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 3, 8)); [EOL]         assertEquals( [EOL]             "7fffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "bfffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "fffdb97512ffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 3, "ffffffffffffffffffffffff", 3, 8)); [EOL]         // assertEquals("ffffffffffffffffffffffff",Conversion.intToHex(0x90ABCDEF, [EOL]         // 4,"ffffffffffffffffffffffff",3,8));//rejected by assertion [EOL]         assertEquals( [EOL]             "fffedcba09ffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 4, "ffffffffffffffffffffffff", 3, 7)); [EOL]         assertEquals("fedcba09", Conversion.intToHex(0x90ABCDEF, 0, "", 0, 8)); [EOL]         try { [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "", 1, 8); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortToHex(short, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortToHex() { [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedfffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fff3ffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]         assertEquals( [EOL]             "ffffefffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]         assertEquals( [EOL]             "7fffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "bfffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "fffdb9ffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4)); [EOL]         // assertEquals("ffffffffffffffffffffffff",Conversion.shortToHex((short)0xCDEF, [EOL]         // 4,"ffffffffffffffffffffffff",3,4));//rejected by assertion [EOL]         assertEquals( [EOL]             "fffedcffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3)); [EOL]         assertEquals("fedc", Conversion.shortToHex((short)0xCDEF, 0, "", 0, 4)); [EOL]         try { [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "", 1, 4); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteToHex(byte, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortToHex() { [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedfffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fff3ffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 3, 1)); [EOL]         assertEquals( [EOL]             "ffffefffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 3, 2)); [EOL]         assertEquals( [EOL]             "7fffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 1, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "bfffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 2, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "fffdb9ffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 3, "ffffffffffffffffffffffff", 3, 4)); [EOL]         // assertEquals("ffffffffffffffffffffffff",Conversion.shortToHex((short)0xCDEF, [EOL]         // 4,"ffffffffffffffffffffffff",3,4));//rejected by assertion [EOL]         assertEquals( [EOL]             "fffedcffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 4, "ffffffffffffffffffffffff", 3, 3)); [EOL]         assertEquals("fedc", Conversion.shortToHex((short)0xCDEF, 0, "", 0, 4)); [EOL]         try { [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "", 1, 4); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteToHex(byte, int, String, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteToHex() { [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); [EOL]         assertEquals("00000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 0)); [EOL]         assertEquals("f0000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 1)); [EOL]         assertEquals("fe000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 2)); [EOL]         assertEquals("000f0", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 1)); [EOL]         assertEquals("000fe", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 2)); [EOL]         assertEquals("70000", Conversion.byteToHex((byte)0xEF, 1, "00000", 0, 1)); [EOL]         assertEquals("b0000", Conversion.byteToHex((byte)0xEF, 2, "00000", 0, 1)); [EOL]         assertEquals("000df", Conversion.byteToHex((byte)0xEF, 3, "00000", 3, 2)); [EOL]         // assertEquals("00000",Conversion.byteToHex((byte)0xEF, 4,"00000",3,2));//rejected by [EOL]         // assertion [EOL]         assertEquals("000e0", Conversion.byteToHex((byte)0xEF, 4, "00000", 3, 1)); [EOL]         assertEquals("fe", Conversion.byteToHex((byte)0xEF, 0, "", 0, 2)); [EOL]         try { [EOL]             Conversion.byteToHex((byte)0xEF, 0, "", 1, 2); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToBinary(long, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteToHex() { [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); [EOL]         assertEquals("00000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 0)); [EOL]         assertEquals("f0000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 1)); [EOL]         assertEquals("fe000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 2)); [EOL]         assertEquals("000f0", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 1)); [EOL]         assertEquals("000fe", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 2)); [EOL]         assertEquals("70000", Conversion.byteToHex((byte)0xEF, 1, "00000", 0, 1)); [EOL]         assertEquals("b0000", Conversion.byteToHex((byte)0xEF, 2, "00000", 0, 1)); [EOL]         assertEquals("000df", Conversion.byteToHex((byte)0xEF, 3, "00000", 3, 2)); [EOL]         // assertEquals("00000",Conversion.byteToHex((byte)0xEF, 4,"00000",3,2));//rejected by [EOL]         // assertion [EOL]         assertEquals("000e0", Conversion.byteToHex((byte)0xEF, 4, "00000", 3, 1)); [EOL]         assertEquals("fe", Conversion.byteToHex((byte)0xEF, 0, "", 0, 2)); [EOL]         try { [EOL]             Conversion.byteToHex((byte)0xEF, 0, "", 1, 2); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToBinary(long, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteToHex() { [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.byteToHex((byte)0x00, 0, "", 100, 0)); [EOL]         assertEquals("00000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 0)); [EOL]         assertEquals("f0000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 1)); [EOL]         assertEquals("fe000", Conversion.byteToHex((byte)0xEF, 0, "00000", 0, 2)); [EOL]         assertEquals("000f0", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 1)); [EOL]         assertEquals("000fe", Conversion.byteToHex((byte)0xEF, 0, "00000", 3, 2)); [EOL]         assertEquals("70000", Conversion.byteToHex((byte)0xEF, 1, "00000", 0, 1)); [EOL]         assertEquals("b0000", Conversion.byteToHex((byte)0xEF, 2, "00000", 0, 1)); [EOL]         assertEquals("000df", Conversion.byteToHex((byte)0xEF, 3, "00000", 3, 2)); [EOL]         // assertEquals("00000",Conversion.byteToHex((byte)0xEF, 4,"00000",3,2));//rejected by [EOL]         // assertion [EOL]         assertEquals("000e0", Conversion.byteToHex((byte)0xEF, 4, "00000", 3, 1)); [EOL]         assertEquals("fe", Conversion.byteToHex((byte)0xEF, 0, "", 0, 2)); [EOL]         try { [EOL]             Conversion.byteToHex((byte)0xEF, 0, "", 1, 2); [EOL]             fail("Thrown " + StringIndexOutOfBoundsException.class.getName() + " expected"); [EOL]         } catch (final StringIndexOutOfBoundsException e) { [EOL]             // OK [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#longToBinary(long, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[69], [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0)); [EOL]  [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, true, true, false, true, false, true, false, true, [EOL]                 false, false, false, false, true, false, false, true, false, false, false, [EOL]                 true, true, true, true, false, false, true, true, false, true, false, true, [EOL]                 false, false, false, true, false, true, true, false, false, false, true, false, [EOL]                 false, true, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, true, true, false, true, false, true, false, true, [EOL]                 false, false, false, false, true, false, false, true, false, false, false, [EOL]                 true, true, true, true, false, false, true, true, false, true, false, true, [EOL]                 false, false, false, true, false, true, true, false, false, false, true, false, [EOL]                 false, true, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, true, true, true, false, true, true, true, true, false, [EOL]                 true, true, false, false, true, true, true, true, false, true, false, true, [EOL]                 false, true, false, false, false, false, true, false, false, true, false, [EOL]                 false, false, true, true, true, true, false, false, true, true, false, true, [EOL]                 false, true, false, false, false, true, false, true, true, false, false, false, [EOL]                 true, false, false, true, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, true, true, true, true, false, true, true, false, [EOL]                 false, true, true, true, true, false, true, false, true, false, true, false, [EOL]                 false, false, false, true, false, false, true, false, false, false, true, true, [EOL]                 true, true, false, false, true, true, false, true, false, true, false, false, [EOL]                 false, true, false, true, true, false, false, false, true, false, false, true, [EOL]                 false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, true, true, true, true, false, true, true, false, false, [EOL]                 true, true, true, true, false, true, false, true, false, true, false, false, [EOL]                 false, false, true, false, false, true, false, false, false, true, true, true, [EOL]                 true, false, false, true, true, false, true, false, true, false, false, false, [EOL]                 true, false, true, true, false, false, false, true, false, false, true, false, [EOL]                 false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62)); [EOL]  [EOL]         // assertBinaryEquals(new boolean[]{false,false,false, true, true, false, true, true, [EOL]         // true, true, false, true, true, false, false, true, true, true, true, false, true, [EOL]         // false, true, false, true, false, false, false, false, true, false, false, true, [EOL]         // false, false, false, true, true, true, true, false, false, true, true, false, true, [EOL]         // false, true, false, false, false, true, false, true, true, false, false, false, true, [EOL]         // false, false, true, false, false, false [EOL]         // ,false,false,false,false},Conversion.longToBinary(0x1234567890ABCDEFL, 2,new [EOL]         // boolean[69], 3, 63));//rejected by assertion [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, false, true, true, false, true, true, true, true, false, true, [EOL]                 true, false, false, true, true, true, true, false, true, false, true, false, [EOL]                 true, false, false, false, false, true, false, false, true, false, false, [EOL]                 false, true, true, true, true, false, false, true, true, false, true, false, [EOL]                 true, false, false, false, true, false, true, true, false, false, false, true, [EOL]                 false, false, true, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToBinary(int, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLongToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 100, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.longToBinary(0x0000000000000000L, 0, new boolean[]{}, 100, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[69], [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 0)); [EOL]  [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 2)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 3)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, true, true, false, true, false, true, false, true, [EOL]                 false, false, false, false, true, false, false, true, false, false, false, [EOL]                 true, true, true, true, false, false, true, true, false, true, false, true, [EOL]                 false, false, false, true, false, true, true, false, false, false, true, false, [EOL]                 false, true, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 63)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, true, true, false, true, false, true, false, true, [EOL]                 false, false, false, false, true, false, false, true, false, false, false, [EOL]                 true, true, true, true, false, false, true, true, false, true, false, true, [EOL]                 false, false, false, true, false, true, true, false, false, false, true, false, [EOL]                 false, true, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 0, 64)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, true, true, true, false, true, true, true, true, false, [EOL]                 true, true, false, false, true, true, true, true, false, true, false, true, [EOL]                 false, true, false, false, false, false, true, false, false, true, false, [EOL]                 false, false, true, true, true, true, false, false, true, true, false, true, [EOL]                 false, true, false, false, false, true, false, true, true, false, false, false, [EOL]                 true, false, false, true, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 0, new boolean[69], 2, 64)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, true, true, true, true, false, true, true, false, [EOL]                 false, true, true, true, true, false, true, false, true, false, true, false, [EOL]                 false, false, false, true, false, false, true, false, false, false, true, true, [EOL]                 true, true, false, false, true, true, false, true, false, true, false, false, [EOL]                 false, true, false, true, true, false, false, false, true, false, false, true, [EOL]                 false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 1, new boolean[69], 0, 63)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, true, true, true, true, false, true, true, false, false, [EOL]                 true, true, true, true, false, true, false, true, false, true, false, false, [EOL]                 false, false, true, false, false, true, false, false, false, true, true, true, [EOL]                 true, false, false, true, true, false, true, false, true, false, false, false, [EOL]                 true, false, true, true, false, false, false, true, false, false, true, false, [EOL]                 false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 0, 62)); [EOL]  [EOL]         // assertBinaryEquals(new boolean[]{false,false,false, true, true, false, true, true, [EOL]         // true, true, false, true, true, false, false, true, true, true, true, false, true, [EOL]         // false, true, false, true, false, false, false, false, true, false, false, true, [EOL]         // false, false, false, true, true, true, true, false, false, true, true, false, true, [EOL]         // false, true, false, false, false, true, false, true, true, false, false, false, true, [EOL]         // false, false, true, false, false, false [EOL]         // ,false,false,false,false},Conversion.longToBinary(0x1234567890ABCDEFL, 2,new [EOL]         // boolean[69], 3, 63));//rejected by assertion [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, false, true, true, false, true, true, true, true, false, true, [EOL]                 true, false, false, true, true, true, true, false, true, false, true, false, [EOL]                 true, false, false, false, false, true, false, false, true, false, false, [EOL]                 false, true, true, true, true, false, false, true, true, false, true, false, [EOL]                 true, false, false, false, true, false, true, true, false, false, false, true, [EOL]                 false, false, true, false, false, false, false, false, false, false}, [EOL]             Conversion.longToBinary(0x1234567890ABCDEFL, 2, new boolean[69], 3, 62)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#intToBinary(int, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIntToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.intToBinary(0x00000000, 100, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.intToBinary(0x00000000, 0, new boolean[]{}, 100, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[69], Conversion.intToBinary(0x90ABCDEF, 0, new boolean[69], 0, 0)); [EOL]         assertBinaryEquals(new boolean[]{ [EOL]             true, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 1)); [EOL]         assertBinaryEquals(new boolean[]{ [EOL]             true, true, false, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 2)); [EOL]         assertBinaryEquals(new boolean[]{ [EOL]             true, true, true, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 3)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, true, true, false, true, false, true, false, true, [EOL]                 false, false, false, false, true, false, false, false, false, false, false, [EOL]                 false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 31)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, true, true, false, true, false, true, false, true, [EOL]                 false, false, false, false, true, false, false, true, false, false, false, [EOL]                 false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 0, 32)); [EOL]         assertBinaryEquals(new boolean[]{ [EOL]             false, false, true, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false, false, false, false, false, false, false, false, false, false, false, false, [EOL]             false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, true, true, true, false, true, true, true, true, false, [EOL]                 true, true, false, false, true, true, true, true, false, true, false, true, [EOL]                 false, true, false, false, false, false, true, false, false, true, false, [EOL]                 false, false}, Conversion.intToBinary(0x90ABCDEF, 0, new boolean[37], 2, 32)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, true, true, true, true, false, true, true, false, [EOL]                 false, true, true, true, true, false, true, false, true, false, true, false, [EOL]                 false, false, false, true, false, false, true, false, false, false, false, [EOL]                 false, false}, Conversion.intToBinary(0x90ABCDEF, 1, new boolean[37], 0, 31)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, true, true, true, true, false, true, true, false, false, [EOL]                 true, true, true, true, false, true, false, true, false, true, false, false, [EOL]                 false, false, true, false, false, true, false, false, false, false, false, [EOL]                 false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 0, 30)); [EOL]         // assertBinaryEquals(new boolean[]{false, false, false, true, true, false, true, [EOL]         // true, [EOL]         // true, true, false, true, true, false, false, true, true, true, true, false, true, [EOL]         // false, true, false, true, false, false, false, false, true, false, false, false, [EOL]         // false, false, false, false},Conversion.intToBinary(0x90ABCDEF, 2,new boolean[37], [EOL]         // 3,31));//rejected by assertion [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, false, true, true, false, true, true, true, true, false, true, [EOL]                 true, false, false, true, true, true, true, false, true, false, true, false, [EOL]                 true, false, false, false, false, true, false, false, true, false, false, [EOL]                 false, false}, Conversion.intToBinary(0x90ABCDEF, 2, new boolean[37], 3, 30)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#shortToBinary(short, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.shortToBinary((short)0x0000, 100, new boolean[]{}, 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{}, [EOL]             Conversion.shortToBinary((short)0x0000, 0, new boolean[]{}, 100, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[69], Conversion.shortToBinary((short)0xCDEF, 0, new boolean[69], 0, 0)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 2)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 3)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 15)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, true, false, true, true, true, true, false, true, true, [EOL]                 false, false, true, true, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 0, 16)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, false, false, false, false, false, false, false, false, [EOL]                 false, false, false, false, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 2, 1)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, true, true, true, true, false, true, true, true, true, false, [EOL]                 true, true, false, false, true, true, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 0, new boolean[21], 2, 16)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, true, false, true, true, true, true, false, true, true, false, [EOL]                 false, true, true, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 1, new boolean[21], 0, 15)); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 true, true, false, true, true, true, true, false, true, true, false, false, [EOL]                 true, true, false, false, false, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 2, new boolean[21], 0, 14)); [EOL]         // assertArrayEquals(new boolean[]{false, false, false, true, true, false, true, true, [EOL]         // true, true, false, true, true, false, false, true, false, false, false, false, [EOL]         // false},Conversion.shortToBinary((short)0xCDEF, 2,new boolean[21], [EOL]         // 3,15));//rejected by [EOL]         // assertion [EOL]         assertBinaryEquals( [EOL]             new boolean[]{ [EOL]                 false, false, false, true, true, false, true, true, true, true, false, true, [EOL]                 true, false, false, true, true, false, false, false, false}, [EOL]             Conversion.shortToBinary((short)0xCDEF, 2, new boolean[21], 3, 14)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteToBinary(byte, int, boolean[], int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayToUuid() { [EOL]         assertEquals( [EOL]             new UUID(0xFFFFFFFFFFFFFFFFL, 0xFFFFFFFFFFFFFFFFL), [EOL]             Conversion.byteArrayToUuid(new byte[]{ [EOL]                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, [EOL]                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, [EOL]                 (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff}, 0)); [EOL]         assertEquals( [EOL]             new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), [EOL]             Conversion.byteArrayToUuid(new byte[]{ [EOL]                 (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd, [EOL]                 (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33, [EOL]                 (byte)0x44, (byte)0x55, (byte)0x66, (byte)0x77}, 0)); [EOL]         assertEquals( [EOL]             new UUID(0xFFEEDDCCBBAA9988L, 0x7766554433221100L), [EOL]             Conversion.byteArrayToUuid(new byte[]{ [EOL]                 0, 0, (byte)0x88, (byte)0x99, (byte)0xaa, (byte)0xbb, (byte)0xcc, (byte)0xdd, [EOL]                 (byte)0xee, (byte)0xff, (byte)0x00, (byte)0x11, (byte)0x22, (byte)0x33, [EOL]                 (byte)0x44, (byte)0x55, (byte)0x66, (byte)0x77}, 2)); [EOL]     } [EOL] } [EOL]
lang3/SystemUtils.java
@Test [EOL]     public void testGetJavaIoTmpDir() { [EOL]         final File dir = SystemUtils.getJavaIoTmpDir(); [EOL]         Assert.assertNotNull(dir); [EOL]         Assert.assertTrue(dir.exists()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Assums no security manager exists. [EOL]      */ [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL]         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); [EOL]          [EOL]         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); [EOL]         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetUserHome() { [EOL]         final File dir = SystemUtils.getUserHome(); [EOL]         Assert.assertNotNull(dir); [EOL]         Assert.assertTrue(dir.exists()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJavaAwtHeadless() { [EOL]         final boolean atLeastJava14 = SystemUtils.isJavaVersionAtLeast(JAVA_1_4); [EOL]         final String expectedStringValue = System.getProperty("java.awt.headless"); [EOL]         final String expectedStringValueWithDefault = System.getProperty("java.awt.headless", "false"); [EOL]         assertNotNull(expectedStringValueWithDefault); [EOL]         if (atLeastJava14) { [EOL]             final boolean expectedValue = Boolean.valueOf(expectedStringValue).booleanValue(); [EOL]             if (expectedStringValue != null) { [EOL]                 assertEquals(expectedStringValue, SystemUtils.JAVA_AWT_HEADLESS); [EOL]             } [EOL]             assertEquals(expectedValue, SystemUtils.isJavaAwtHeadless()); [EOL]         } else { [EOL]             assertNull(expectedStringValue); [EOL]             assertNull(SystemUtils.JAVA_AWT_HEADLESS); [EOL]             assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]         } [EOL]         assertEquals(expectedStringValueWithDefault, "" + SystemUtils.isJavaAwtHeadless()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testJavaVersionMatches() { [EOL]         String javaVersion = null; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = ""; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.0"; [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.1"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.2"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.3.0"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.3.1"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.4.0"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.4.1"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.4.2"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.5.0"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.6.0"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = "1.7.0"; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertTrue(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testOSMatchesName() { [EOL]         String osName = null; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = ""; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "Windows 95"; [EOL]         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "Windows NT"; [EOL]         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "OS/2"; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testOSMatchesName() { [EOL]         String osName = null; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = ""; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "Windows 95"; [EOL]         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "Windows NT"; [EOL]         assertTrue(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]         osName = "OS/2"; [EOL]         assertFalse(SystemUtils.isOSNameMatch(osName, "Windows")); [EOL]     } [EOL]  [EOL]
lang3/tuple/ImmutablePair.java
@Test [EOL]     public void testHashCode() throws Exception { [EOL]         assertEquals(ImmutablePair.of(null, "foo").hashCode(), ImmutablePair.of(null, "foo").hashCode()); [EOL]     } [EOL]  [EOL]
lang3/builder/ReflectionToStringBuilder.java
@Test [EOL]     public void testReflectionHierarchy() { [EOL]         final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]         String baseStr = this.toBaseString(baseA); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]         assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]  [EOL]         final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]         baseStr = this.toBaseString(baseB); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]         assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]         assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL]     } [EOL]  [EOL]     static class ReflectionTestFixtureA { [EOL]         @SuppressWarnings("unused") [EOL]         private final char a='a'; [EOL]         @SuppressWarnings("unused") [EOL]         private transient char transientA='t'; [EOL]     } [EOL]  [EOL]     static class ReflectionTestFixtureB extends ReflectionTestFixtureA { [EOL]         @SuppressWarnings("unused") [EOL]         private final char b='b'; [EOL]         @SuppressWarnings("unused") [EOL]         private transient char transientB='t'; [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHierarchy() { [EOL]         final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]         String baseStr = this.toBaseString(baseA); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]         assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]  [EOL]         final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]         baseStr = this.toBaseString(baseB); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false)); [EOL]         assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class)); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class)); [EOL]         assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class)); [EOL]     } [EOL]  [EOL]     static class ReflectionTestFixtureA { [EOL]         @SuppressWarnings("unused") [EOL]         private final char a='a'; [EOL]         @SuppressWarnings("unused") [EOL]         private transient char transientA='t'; [EOL]     } [EOL]  [EOL]     static class ReflectionTestFixtureB extends ReflectionTestFixtureA { [EOL]         @SuppressWarnings("unused") [EOL]         private final char b='b'; [EOL]         @SuppressWarnings("unused") [EOL]         private transient char transientB='t'; [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toStringExcludeCollection() { [EOL]         final List<String> excludeList = new ArrayList<String>(); [EOL]         excludeList.add(SECRET_FIELD); [EOL]         final String toString = ReflectionToStringBuilder.toStringExclude(new TestFixture(), excludeList); [EOL]         this.validateSecretFieldAbsent(toString); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * <p>This method uses reflection to build a suitable [EOL]      * <code>toString</code> value which includes static fields.</p> [EOL]      * [EOL]      * <p>It uses <code>AccessibleObject.setAccessible</code> to gain access to private [EOL]      * fields. This means that it will throw a security exception if run [EOL]      * under a security manager, if the permissions are not set up correctly. [EOL]      * It is also not as efficient as testing explicitly. </p> [EOL]      * [EOL]      * <p>Transient fields are not output.</p> [EOL]      * [EOL]      * <p>Superclass fields will be appended up to and including the specified superclass. [EOL]      * A null superclass is treated as <code>java.lang.Object</code>.</p> [EOL]      * [EOL]      * <p>If the style is <code>null</code>, the default [EOL]      * <code>ToStringStyle</code> is used.</p> [EOL]      * [EOL]      * @param object  the Object to be output [EOL]      * @param style  the style of the <code>toString</code> to create, [EOL]      *  may be <code>null</code> [EOL]      * @param reflectUpToClass  the superclass to reflect up to (inclusive), [EOL]      *  may be <code>null</code> [EOL]      * @return the String result [EOL]      * @throws IllegalArgumentException if the Object is <code>null</code> [EOL]      */ [EOL]     public <T> String toStringWithStatics(final T object, final ToStringStyle style, final Class<? super T> reflectUpToClass) { [EOL]         return ReflectionToStringBuilder.toString(object, style, false, true, reflectUpToClass); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests ReflectionToStringBuilder setUpToClass(). [EOL]      */ [EOL]
@Test(expected=IllegalArgumentException.class) [EOL]     public void test_setUpToClass_invalid() { [EOL]         final Integer val = Integer.valueOf(5); [EOL]         final ReflectionToStringBuilder test = new ReflectionToStringBuilder(val); [EOL]         try { [EOL]             test.setUpToClass(String.class); [EOL]         } finally { [EOL]             test.toString(); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests ReflectionToStringBuilder.toString() for statics. [EOL]      */ [EOL]     class ReflectionStaticFieldsFixture { [EOL]         static final String staticString = "staticString"; [EOL]         static final int staticInt = 12345; [EOL]         static final transient String staticTransientString = "staticTransientString"; [EOL]         static final transient int staticTransientInt = 54321; [EOL]         String instanceString = "instanceString"; [EOL]         int instanceInt = 67890; [EOL]         transient String transientString = "transientString"; [EOL]         transient int transientInt = 98765; [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test fixture for ReflectionToStringBuilder.toString() for statics. [EOL]      */ [EOL]     class SimpleReflectionStaticFieldsFixture { [EOL]         static final String staticString = "staticString"; [EOL]         static final int staticInt = 12345; [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test fixture for ReflectionToStringBuilder.toString() for statics. [EOL]      */ [EOL]     class InheritedReflectionStaticFieldsFixture extends SimpleReflectionStaticFieldsFixture { [EOL]         static final String staticString2 = "staticString2"; [EOL]         static final int staticInt2 = 67890; [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
lang3/BooleanUtils.java
@Test [EOL]     public void test_negate_Boolean() { [EOL]         assertSame(null, BooleanUtils.negate(null)); [EOL]         assertSame(Boolean.TRUE, BooleanUtils.negate(Boolean.FALSE)); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.negate(Boolean.TRUE)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_isNotTrue_Boolean() { [EOL]         assertFalse(BooleanUtils.isNotTrue(Boolean.TRUE)); [EOL]         assertTrue(BooleanUtils.isNotTrue(Boolean.FALSE)); [EOL]         assertTrue(BooleanUtils.isNotTrue((Boolean) null)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_toBooleanObject_Integer() { [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(1))); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(-1))); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(0))); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject((Integer) null)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_toBoolean_Integer_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]  [EOL]         assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); [EOL]         assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); [EOL]  [EOL]         assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven)); [EOL]         assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBooleanObject_int_int_int() { [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL]     } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void test_toBooleanObject_int_int_int_noMatch() { [EOL]         BooleanUtils.toBooleanObject(9, 6, 7, 8); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_toBooleanObject_Integer_Integer_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]         final Integer eight = Integer.valueOf(8); [EOL]  [EOL]         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((Integer) null, null, seven, eight)); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((Integer) null, six, null, eight)); [EOL]         assertSame(null, BooleanUtils.toBooleanObject((Integer) null, six, seven, null)); [EOL]  [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(Integer.valueOf(6), six, seven, eight)); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(Integer.valueOf(7), six, seven, eight)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject(Integer.valueOf(8), six, seven, eight)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toIntegerObject_boolean_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]         assertEquals(six, BooleanUtils.toIntegerObject(true, six, seven)); [EOL]         assertEquals(seven, BooleanUtils.toIntegerObject(false, six, seven)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]         assertTrue(BooleanUtils.toBoolean("True")); [EOL]         assertTrue(BooleanUtils.toBoolean("on")); [EOL]         assertTrue(BooleanUtils.toBoolean("oN")); [EOL]         assertTrue(BooleanUtils.toBoolean("On")); [EOL]         assertTrue(BooleanUtils.toBoolean("ON")); [EOL]         assertTrue(BooleanUtils.toBoolean("yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("yES")); [EOL]         assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("YES")); [EOL]         assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]         assertFalse(BooleanUtils.toBoolean("tru")); [EOL]  [EOL]         assertFalse(BooleanUtils.toBoolean("no")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("yoo")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]         assertTrue(BooleanUtils.toBoolean("True")); [EOL]         assertTrue(BooleanUtils.toBoolean("on")); [EOL]         assertTrue(BooleanUtils.toBoolean("oN")); [EOL]         assertTrue(BooleanUtils.toBoolean("On")); [EOL]         assertTrue(BooleanUtils.toBoolean("ON")); [EOL]         assertTrue(BooleanUtils.toBoolean("yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("yES")); [EOL]         assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("YES")); [EOL]         assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]         assertFalse(BooleanUtils.toBoolean("tru")); [EOL]  [EOL]         assertFalse(BooleanUtils.toBoolean("no")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("yoo")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]         assertTrue(BooleanUtils.toBoolean("True")); [EOL]         assertTrue(BooleanUtils.toBoolean("on")); [EOL]         assertTrue(BooleanUtils.toBoolean("oN")); [EOL]         assertTrue(BooleanUtils.toBoolean("On")); [EOL]         assertTrue(BooleanUtils.toBoolean("ON")); [EOL]         assertTrue(BooleanUtils.toBoolean("yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("yES")); [EOL]         assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("YES")); [EOL]         assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]         assertFalse(BooleanUtils.toBoolean("tru")); [EOL]  [EOL]         assertFalse(BooleanUtils.toBoolean("no")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("yoo")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]         assertTrue(BooleanUtils.toBoolean("True")); [EOL]         assertTrue(BooleanUtils.toBoolean("on")); [EOL]         assertTrue(BooleanUtils.toBoolean("oN")); [EOL]         assertTrue(BooleanUtils.toBoolean("On")); [EOL]         assertTrue(BooleanUtils.toBoolean("ON")); [EOL]         assertTrue(BooleanUtils.toBoolean("yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("yES")); [EOL]         assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("YES")); [EOL]         assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]         assertFalse(BooleanUtils.toBoolean("tru")); [EOL]  [EOL]         assertFalse(BooleanUtils.toBoolean("no")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("yoo")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBooleanObject_String_String_String_String() { [EOL]         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]  [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBooleanObject_String_String_String_String() { [EOL]         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]  [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBooleanObject_String_String_String_String() { [EOL]         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]  [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("TrUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("TruE")); [EOL]         assertTrue(BooleanUtils.toBoolean("True")); [EOL]         assertTrue(BooleanUtils.toBoolean("on")); [EOL]         assertTrue(BooleanUtils.toBoolean("oN")); [EOL]         assertTrue(BooleanUtils.toBoolean("On")); [EOL]         assertTrue(BooleanUtils.toBoolean("ON")); [EOL]         assertTrue(BooleanUtils.toBoolean("yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("yeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("yEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("yES")); [EOL]         assertTrue(BooleanUtils.toBoolean("Yes")); [EOL]         assertTrue(BooleanUtils.toBoolean("YeS")); [EOL]         assertTrue(BooleanUtils.toBoolean("YEs")); [EOL]         assertTrue(BooleanUtils.toBoolean("YES")); [EOL]         assertFalse(BooleanUtils.toBoolean("yes?")); [EOL]         assertFalse(BooleanUtils.toBoolean("tru")); [EOL]  [EOL]         assertFalse(BooleanUtils.toBoolean("no")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("yoo")); [EOL]     } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void test_toBoolean_String_String_String_noMatch() { [EOL]         BooleanUtils.toBoolean("X", "Y", "N"); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_toStringOnOff_Boolean() { [EOL]         assertEquals(null, BooleanUtils.toStringOnOff((Boolean) null)); [EOL]         assertEquals("on", BooleanUtils.toStringOnOff(Boolean.TRUE)); [EOL]         assertEquals("off", BooleanUtils.toStringOnOff(Boolean.FALSE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_toStringTrueFalse_Boolean() { [EOL]         assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); [EOL]         assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); [EOL]         assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_toStringYesNo_boolean() { [EOL]         assertEquals("yes", BooleanUtils.toStringYesNo(true)); [EOL]         assertEquals("no", BooleanUtils.toStringYesNo(false)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAnd_primitive_validInput_2items() { [EOL]         assertTrue( [EOL]             "False result for (true, true)", [EOL]             BooleanUtils.and(new boolean[] { true, true })); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils.and(new boolean[] { false, false })); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (true, false)", [EOL]             ! BooleanUtils.and(new boolean[] { true, false })); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, true)", [EOL]             ! BooleanUtils.and(new boolean[] { false, true })); [EOL]     } [EOL]      [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testAnd_object_emptyInput() { [EOL]         BooleanUtils.and(new Boolean[] {}); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAnd_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "False result for (true, true)", [EOL]             BooleanUtils [EOL]             .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]             .booleanValue()); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils [EOL]             .and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) [EOL]             .booleanValue()); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (true, false)", [EOL]             ! BooleanUtils [EOL]             .and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }) [EOL]             .booleanValue()); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, true)", [EOL]             ! BooleanUtils [EOL]             .and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }) [EOL]             .booleanValue()); [EOL]     } [EOL]      [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testOr_primitive_emptyInput() { [EOL]         BooleanUtils.or(new boolean[] {}); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testOr_primitive_validInput_3items() { [EOL]         assertTrue( [EOL]             "False result for (false, false, true)", [EOL]             BooleanUtils.or(new boolean[] { false, false, true })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for (false, true, false)", [EOL]             BooleanUtils.or(new boolean[] { false, true, false })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for (true, false, false)", [EOL]             BooleanUtils.or(new boolean[] { true, false, false })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for (true, true, true)", [EOL]             BooleanUtils.or(new boolean[] { true, true, true })); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils.or(new boolean[] { false, false, false })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for (true, true, false)", [EOL]             BooleanUtils.or(new boolean[] { true, true, false })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for (true, false, true)", [EOL]             BooleanUtils.or(new boolean[] { true, false, true })); [EOL]          [EOL]         assertTrue( [EOL]             "False result for (false, true, true)", [EOL]             BooleanUtils.or(new boolean[] { false, true, true })); [EOL]      [EOL]     } [EOL]
@Test [EOL]     public void testXor_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "True result for (true, true)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "False result for (true, false)", [EOL]             BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "False result for (false, true)", [EOL]             BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }) [EOL]                 .booleanValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testXor_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "True result for (true, true)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "False result for (true, false)", [EOL]             BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "False result for (false, true)", [EOL]             BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }) [EOL]                 .booleanValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testXor_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "True result for (true, true)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "False result for (true, false)", [EOL]             BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.TRUE, Boolean.FALSE }) [EOL]                 .booleanValue()); [EOL]  [EOL]         assertTrue( [EOL]             "False result for (false, true)", [EOL]             BooleanUtils [EOL]                 .xor(new Boolean[] { Boolean.FALSE, Boolean.TRUE }) [EOL]                 .booleanValue()); [EOL]     } [EOL]  [EOL]
lang3/LocaleUtils.java
@Test [EOL]     public void testToLocale_3Part() { [EOL]         assertValidToLocale("us_EN_A", "us", "EN", "A"); [EOL]         // this isn't pretty, but was caused by a jdk bug it seems [EOL]         // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4210525 [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertValidToLocale("us_EN_a", "us", "EN", "a"); [EOL]             assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFsafdFDsdfF"); [EOL]         } else { [EOL]             assertValidToLocale("us_EN_a", "us", "EN", "A"); [EOL]             assertValidToLocale("us_EN_SFsafdFDsdfF", "us", "EN", "SFSAFDFDSDFF"); [EOL]         } [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("us_EN-a"); [EOL]             fail("Should fail as not underscore"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("uu_UU_"); [EOL]             fail("Must be 3, 5 or 7+ in length"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Helper method for local lookups. [EOL]      * [EOL]      * @param locale  the input locale [EOL]      * @param defaultLocale  the input default locale [EOL]      * @param expected  expected results [EOL]      */ [EOL]     private void assertLocaleLookupList(final Locale locale, final Locale defaultLocale, final Locale[] expected) { [EOL]         final List<Locale> localeList = defaultLocale == null ? [EOL]                 LocaleUtils.localeLookupList(locale) : [EOL]                 LocaleUtils.localeLookupList(locale, defaultLocale); [EOL]          [EOL]         assertEquals(expected.length, localeList.size()); [EOL]         assertEquals(Arrays.asList(expected), localeList); [EOL]         assertUnmodifiableCollection(localeList); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Test localeLookupList() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLocale("_G"); [EOL]             fail("Must be at least 3 chars if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_Gb"); [EOL]             fail("Must be uppercase if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_gB"); [EOL]             fail("Must be uppercase if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_1B"); [EOL]             fail("Must be letter if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_G1"); [EOL]             fail("Must be letter if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_GB_"); [EOL]             fail("Must be at least 5 chars if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_GBAP"); [EOL]             fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testToLocale_2Part() { [EOL]         assertValidToLocale("us_EN", "us", "EN"); [EOL]         //valid though doesnt exist [EOL]         assertValidToLocale("us_ZH", "us", "ZH"); [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("us-EN"); [EOL]             fail("Should fail as not underscore"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_En"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_en"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_eN"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("uS_EN"); [EOL]             fail("Should fail first part not lowercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_E3"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]     }         [EOL]  [EOL]     /** [EOL]      * Test toLocale() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLocale("_G"); [EOL]             fail("Must be at least 3 chars if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_Gb"); [EOL]             fail("Must be uppercase if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_gB"); [EOL]             fail("Must be uppercase if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_1B"); [EOL]             fail("Must be letter if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_G1"); [EOL]             fail("Must be letter if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_GB_"); [EOL]             fail("Must be at least 5 chars if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_GBAP"); [EOL]             fail("Must have underscore after the country if starts with underscore and is at least 5 chars"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testToLocale_1Part() { [EOL]         assertEquals(null, LocaleUtils.toLocale((String) null)); [EOL]          [EOL]         assertValidToLocale("us"); [EOL]         assertValidToLocale("fr"); [EOL]         assertValidToLocale("de"); [EOL]         assertValidToLocale("zh"); [EOL]         // Valid format but lang doesnt exist, should make instance anyway [EOL]         assertValidToLocale("qq"); [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("Us"); [EOL]             fail("Should fail if not lowercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("US"); [EOL]             fail("Should fail if not lowercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("uS"); [EOL]             fail("Should fail if not lowercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("u#"); [EOL]             fail("Should fail if not lowercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("u"); [EOL]             fail("Must be 2 chars if less than 5"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         [EOL]         try { [EOL]             LocaleUtils.toLocale("uuu"); [EOL]             fail("Must be 2 chars if less than 5"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]  [EOL]         try { [EOL]             LocaleUtils.toLocale("uu_U"); [EOL]             fail("Must be 2 chars if less than 5"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]     }         [EOL]  [EOL]     /** [EOL]      * Test toLocale() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLang328() { [EOL]         assertValidToLocale("fr__P", "fr", "", "P"); [EOL]         assertValidToLocale("fr__POSIX", "fr", "", "POSIX"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests #LANG-865, strings starting with an underscore. [EOL]      */ [EOL]
@Test [EOL]     public void testToLocale_2Part() { [EOL]         assertValidToLocale("us_EN", "us", "EN"); [EOL]         //valid though doesnt exist [EOL]         assertValidToLocale("us_ZH", "us", "ZH"); [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("us-EN"); [EOL]             fail("Should fail as not underscore"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_En"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_en"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_eN"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("uS_EN"); [EOL]             fail("Should fail first part not lowercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_E3"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]     }         [EOL]  [EOL]     /** [EOL]      * Test toLocale() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLocaleLookupList_Locale() { [EOL]         assertLocaleLookupList(null, null, new Locale[0]); [EOL]         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US, null, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US_ZZZZ, [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]     }         [EOL]  [EOL]     /** [EOL]      * Test localeLookupList() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLocaleLookupList_LocaleLocale() { [EOL]         assertLocaleLookupList(LOCALE_QQ, LOCALE_QQ,  [EOL]                 new Locale[]{LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN, LOCALE_EN,  [EOL]                 new Locale[]{LOCALE_EN}); [EOL]          [EOL]         assertLocaleLookupList(LOCALE_EN_US, LOCALE_EN_US,  [EOL]             new Locale[]{ [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN, [EOL]                 LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN_US, LOCALE_QQ_ZZ, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN, [EOL]                 LOCALE_QQ_ZZ}); [EOL]          [EOL]         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US_ZZZZ, [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_EN_US_ZZZZ, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US_ZZZZ, [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US_ZZZZ, [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN, [EOL]                 LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, LOCALE_QQ_ZZ, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US_ZZZZ, [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN, [EOL]                 LOCALE_QQ_ZZ}); [EOL]         assertLocaleLookupList(LOCALE_FR_CA, LOCALE_EN, [EOL]             new Locale[] { [EOL]                 LOCALE_FR_CA, [EOL]                 LOCALE_FR, [EOL]                 LOCALE_EN}); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Test availableLocaleList() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLanguagesByCountry() { [EOL]         assertLanguageByCountry(null, new String[0]); [EOL]         assertLanguageByCountry("GB", new String[]{"en"}); [EOL]         assertLanguageByCountry("ZZ", new String[0]); [EOL]         assertLanguageByCountry("CH", new String[]{"fr", "de", "it"}); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Make sure the country by language is correct. It checks that  [EOL]      * the LocaleUtils.countryByLanguage(language) call contains the  [EOL]      * array of countries passed in. It may contain more due to JVM  [EOL]      * variations. [EOL]      * [EOL]      * [EOL]      * @param language [EOL]      * @param countries array of countries that should be returned [EOL]      */ [EOL]     private void assertCountriesByLanguage(final String language, final String[] countries) { [EOL]         final List<Locale> list = LocaleUtils.countriesByLanguage(language); [EOL]         final List<Locale> list2 = LocaleUtils.countriesByLanguage(language); [EOL]         assertNotNull(list); [EOL]         assertSame(list, list2); [EOL]         //search through langauges [EOL]         for (final String countrie : countries) { [EOL]             final Iterator<Locale> iterator = list.iterator(); [EOL]             boolean found = false; [EOL]             // see if it was returned by the set [EOL]             while (iterator.hasNext()) { [EOL]                 final Locale locale = iterator.next(); [EOL]                 // should have an en empty variant [EOL]                 assertTrue(locale.getVariant() == null [EOL]                         || locale.getVariant().isEmpty()); [EOL]                 assertEquals(language, locale.getLanguage()); [EOL]                 if (countrie.equals(locale.getCountry())) { [EOL]                     found = true; [EOL]                     break; [EOL]                 } [EOL]             } [EOL]             if (!found) { [EOL]                 fail("Cound not find language: " + countrie [EOL]                         + " for country: " + language); [EOL]             } [EOL]         } [EOL]         assertUnmodifiableCollection(list); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test countriesByLanguage() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLanguagesByCountry() { [EOL]         assertLanguageByCountry(null, new String[0]); [EOL]         assertLanguageByCountry("GB", new String[]{"en"}); [EOL]         assertLanguageByCountry("ZZ", new String[0]); [EOL]         assertLanguageByCountry("CH", new String[]{"fr", "de", "it"}); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Make sure the country by language is correct. It checks that  [EOL]      * the LocaleUtils.countryByLanguage(language) call contains the  [EOL]      * array of countries passed in. It may contain more due to JVM  [EOL]      * variations. [EOL]      * [EOL]      * [EOL]      * @param language [EOL]      * @param countries array of countries that should be returned [EOL]      */ [EOL]     private void assertCountriesByLanguage(final String language, final String[] countries) { [EOL]         final List<Locale> list = LocaleUtils.countriesByLanguage(language); [EOL]         final List<Locale> list2 = LocaleUtils.countriesByLanguage(language); [EOL]         assertNotNull(list); [EOL]         assertSame(list, list2); [EOL]         //search through langauges [EOL]         for (final String countrie : countries) { [EOL]             final Iterator<Locale> iterator = list.iterator(); [EOL]             boolean found = false; [EOL]             // see if it was returned by the set [EOL]             while (iterator.hasNext()) { [EOL]                 final Locale locale = iterator.next(); [EOL]                 // should have an en empty variant [EOL]                 assertTrue(locale.getVariant() == null [EOL]                         || locale.getVariant().isEmpty()); [EOL]                 assertEquals(language, locale.getLanguage()); [EOL]                 if (countrie.equals(locale.getCountry())) { [EOL]                     found = true; [EOL]                     break; [EOL]                 } [EOL]             } [EOL]             if (!found) { [EOL]                 fail("Cound not find language: " + countrie [EOL]                         + " for country: " + language); [EOL]             } [EOL]         } [EOL]         assertUnmodifiableCollection(list); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test countriesByLanguage() method. [EOL]      */ [EOL]
@Test [EOL]     public void testCountriesByLanguage() { [EOL]         assertCountriesByLanguage(null, new String[0]); [EOL]         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); [EOL]         assertCountriesByLanguage("zz", new String[0]); [EOL]         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); [EOL]     } [EOL]  [EOL]     /** [EOL]      * @param coll  the collection to check [EOL]      */ [EOL]     private static void assertUnmodifiableCollection(final Collection<?> coll) { [EOL]         try { [EOL]             coll.add(null); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests #LANG-328 - only language+variant [EOL]      */ [EOL]
@Test [EOL]     public void testCountriesByLanguage() { [EOL]         assertCountriesByLanguage(null, new String[0]); [EOL]         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); [EOL]         assertCountriesByLanguage("zz", new String[0]); [EOL]         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); [EOL]     } [EOL]  [EOL]     /** [EOL]      * @param coll  the collection to check [EOL]      */ [EOL]     private static void assertUnmodifiableCollection(final Collection<?> coll) { [EOL]         try { [EOL]             coll.add(null); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests #LANG-328 - only language+variant [EOL]      */ [EOL]
@Test [EOL]     public void testCountriesByLanguage() { [EOL]         assertCountriesByLanguage(null, new String[0]); [EOL]         assertCountriesByLanguage("de", new String[]{"DE", "CH", "AT", "LU"}); [EOL]         assertCountriesByLanguage("zz", new String[0]); [EOL]         assertCountriesByLanguage("it", new String[]{"IT", "CH"}); [EOL]     } [EOL]  [EOL]     /** [EOL]      * @param coll  the collection to check [EOL]      */ [EOL]     private static void assertUnmodifiableCollection(final Collection<?> coll) { [EOL]         try { [EOL]             coll.add(null); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests #LANG-328 - only language+variant [EOL]      */ [EOL]
lang3/math/Fraction.java
@Test [EOL]     public void testAbs() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(50, 75); [EOL]         f = f.abs(); [EOL]         assertEquals(50, f.getNumerator()); [EOL]         assertEquals(75, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(-50, 75); [EOL]         f = f.abs(); [EOL]         assertEquals(50, f.getNumerator()); [EOL]         assertEquals(75, f.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.abs(); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]         f = f.abs(); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.abs(); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(2, 0, 2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(0, 1, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getFraction(1, 1, 2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // negative whole [EOL]         f = Fraction.getFraction(-1, 6, 10); [EOL]         assertEquals(-16, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -6, 10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(-1, 6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // zero denominator [EOL]         try { [EOL]             f = Fraction.getFraction(0, 1, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(1, 2, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -3, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2);  [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // very large [EOL]         f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE); [EOL]         assertEquals(-Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]  [EOL]         try { [EOL]             // negative denominators not allowed in this constructor. [EOL]             f = Fraction.getFraction(0, 4, Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = Fraction.getFraction(1, 1, Integer.MAX_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(2, 0, 2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(0, 1, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getFraction(1, 1, 2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // negative whole [EOL]         f = Fraction.getFraction(-1, 6, 10); [EOL]         assertEquals(-16, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -6, 10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(-1, 6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // zero denominator [EOL]         try { [EOL]             f = Fraction.getFraction(0, 1, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(1, 2, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -3, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2);  [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // very large [EOL]         f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE); [EOL]         assertEquals(-Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]  [EOL]         try { [EOL]             // negative denominators not allowed in this constructor. [EOL]             f = Fraction.getFraction(0, 4, Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = Fraction.getFraction(1, 1, Integer.MAX_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(2, 0, 2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(0, 1, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getFraction(1, 1, 2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // negative whole [EOL]         f = Fraction.getFraction(-1, 6, 10); [EOL]         assertEquals(-16, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -6, 10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(-1, 6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -6, -10); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // zero denominator [EOL]         try { [EOL]             f = Fraction.getFraction(0, 1, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(1, 2, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-1, -3, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(Integer.MAX_VALUE, 1, 2);  [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(-Integer.MAX_VALUE, 1, 2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // very large [EOL]         f = Fraction.getFraction(-1, 0, Integer.MAX_VALUE); [EOL]         assertEquals(-Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(Integer.MAX_VALUE, f.getDenominator()); [EOL]  [EOL]         try { [EOL]             // negative denominators not allowed in this constructor. [EOL]             f = Fraction.getFraction(0, 4, Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = Fraction.getFraction(1, 1, Integer.MAX_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = Fraction.getFraction(-1, 2, Integer.MAX_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]
@Test [EOL]     public void testReducedFactory_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getReducedFraction(0, 1); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getReducedFraction(1, 1); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 1); [EOL]         assertEquals(2, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // improper [EOL]         f = Fraction.getReducedFraction(22, 7); [EOL]         assertEquals(22, f.getNumerator()); [EOL]         assertEquals(7, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         f = Fraction.getReducedFraction(-6, 10); [EOL]         assertEquals(-3, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(6, -10); [EOL]         assertEquals(-3, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(-6, -10); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         // zero denominator [EOL]         try { [EOL]             f = Fraction.getReducedFraction(1, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getReducedFraction(2, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getReducedFraction(-3, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // reduced         [EOL]         f = Fraction.getReducedFraction(0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 4); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(15, 10); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(121, 22); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // Extreme values  [EOL]         // OK, can reduce before negating [EOL]         f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]          [EOL]         // Can't reduce, negation will throw [EOL]         try {  [EOL]             f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);   [EOL]             fail("Expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {}       [EOL]  [EOL]         // LANG-662 [EOL]         f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]         assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-1 2/4"); [EOL]         assertEquals(-6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("a 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 b/4"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(" 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(" "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-1 2/4"); [EOL]         assertEquals(-6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("a 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 b/4"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(" 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(" "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-1 2/4"); [EOL]         assertEquals(-6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("a 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 b/4"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(" 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(" "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-1 2/4"); [EOL]         assertEquals(-6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("a 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 b/4"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(" 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(" "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-1 2/4"); [EOL]         assertEquals(-6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("a 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 b/4"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(" 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(" "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-1 2/4"); [EOL]         assertEquals(-6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("a 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 b/4"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction("2 "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]  [EOL]         try { [EOL]             f = Fraction.getFraction(" 3"); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getFraction(" "); [EOL]             fail("expecting NumberFormatException"); [EOL]         } catch (final NumberFormatException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testConversions() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 7, 8); [EOL]         assertEquals(3, f.intValue()); [EOL]         assertEquals(3L, f.longValue()); [EOL]         assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]         assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testConversions() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 7, 8); [EOL]         assertEquals(3, f.intValue()); [EOL]         assertEquals(3L, f.longValue()); [EOL]         assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]         assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReduce() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(50, 75); [EOL]         Fraction result = f.reduce(); [EOL]         assertEquals(2, result.getNumerator()); [EOL]         assertEquals(3, result.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(-2, -3); [EOL]         result = f.reduce(); [EOL]         assertEquals(2, result.getNumerator()); [EOL]         assertEquals(3, result.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(2, -3); [EOL]         result = f.reduce(); [EOL]         assertEquals(-2, result.getNumerator()); [EOL]         assertEquals(3, result.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(-2, 3); [EOL]         result = f.reduce(); [EOL]         assertEquals(-2, result.getNumerator()); [EOL]         assertEquals(3, result.getDenominator()); [EOL]         assertSame(f, result); [EOL]  [EOL]         f = Fraction.getFraction(2, 3); [EOL]         result = f.reduce(); [EOL]         assertEquals(2, result.getNumerator()); [EOL]         assertEquals(3, result.getDenominator()); [EOL]         assertSame(f, result); [EOL]  [EOL]         f = Fraction.getFraction(0, 1); [EOL]         result = f.reduce(); [EOL]         assertEquals(0, result.getNumerator()); [EOL]         assertEquals(1, result.getDenominator()); [EOL]         assertSame(f, result); [EOL]  [EOL]         f = Fraction.getFraction(0, 100); [EOL]         result = f.reduce(); [EOL]         assertEquals(0, result.getNumerator()); [EOL]         assertEquals(1, result.getDenominator()); [EOL]         assertSame(result, Fraction.ZERO); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 2); [EOL]         result = f.reduce(); [EOL]         assertEquals(Integer.MIN_VALUE / 2, result.getNumerator()); [EOL]         assertEquals(1, result.getDenominator()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // check unreduced fractions stay that way. [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(f, f.pow(1)); [EOL]         assertFalse(f.pow(1).equals(Fraction.getFraction(3,5))); [EOL]  [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-1); [EOL]         assertEquals(10, f.getNumerator()); [EOL]         assertEquals(6, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // zero to any positive power is still zero. [EOL]         f = Fraction.getFraction(0, 1231); [EOL]         f = f.pow(1); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1231, f.getDenominator()); [EOL]         f = f.pow(2); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         // zero to negative powers should throw an exception [EOL]         try { [EOL]             f = f.pow(-1); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = f.pow(Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // one to any power is still one. [EOL]         f = Fraction.getFraction(1, 1); [EOL]         f = f.pow(0); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(-1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MAX_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // Numerator growing too negative during the pow operation. [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(3); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         f = Fraction.getFraction(65536, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReducedFactory_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getReducedFraction(0, 1); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getReducedFraction(1, 1); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 1); [EOL]         assertEquals(2, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // improper [EOL]         f = Fraction.getReducedFraction(22, 7); [EOL]         assertEquals(22, f.getNumerator()); [EOL]         assertEquals(7, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         f = Fraction.getReducedFraction(-6, 10); [EOL]         assertEquals(-3, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(6, -10); [EOL]         assertEquals(-3, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(-6, -10); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         // zero denominator [EOL]         try { [EOL]             f = Fraction.getReducedFraction(1, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getReducedFraction(2, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f = Fraction.getReducedFraction(-3, 0); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // reduced         [EOL]         f = Fraction.getReducedFraction(0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 4); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(15, 10); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(121, 22); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // Extreme values  [EOL]         // OK, can reduce before negating [EOL]         f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator()); [EOL]          [EOL]         // Can't reduce, negation will throw [EOL]         try {  [EOL]             f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);   [EOL]             fail("Expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {}       [EOL]  [EOL]         // LANG-662 [EOL]         f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2); [EOL]         assertEquals(Integer.MIN_VALUE / 2, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(-4, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(-1, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 8); [EOL]         f2 = Fraction.getFraction(1, 6); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13, f.getNumerator()); [EOL]         assertEquals(24, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertSame(f2, f); [EOL]         f = f2.add(f1); [EOL]         assertSame(f2, f); [EOL]          [EOL]         f1 = Fraction.getFraction(-1, 13*13*2*2); [EOL]         f2 = Fraction.getFraction(-2, 13*17*2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13*13*17*2*2, f.getDenominator()); [EOL]         assertEquals(-17 - 2*13*2, f.getNumerator()); [EOL]          [EOL]         try { [EOL]             f.add(null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         // if this fraction is added naively, it will overflow. [EOL]         // check that it doesn't. [EOL]         f1 = Fraction.getFraction(1,32768*3); [EOL]         f2 = Fraction.getFraction(1,59049); [EOL]         f = f1.add(f2); [EOL]         assertEquals(52451, f.getNumerator()); [EOL]         assertEquals(1934917632, f.getDenominator()); [EOL]  [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]         f2 = Fraction.ONE_THIRD; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MIN_VALUE+1, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = f.add(Fraction.ONE); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // denominator should not be a multiple of 2 or 3 to trigger overflow [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]         f2 = Fraction.getFraction(-1,5); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         f1 = Fraction.getFraction(3,327680); [EOL]         f2 = Fraction.getFraction(2,59049); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(-4, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(-1, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 8); [EOL]         f2 = Fraction.getFraction(1, 6); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13, f.getNumerator()); [EOL]         assertEquals(24, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertSame(f2, f); [EOL]         f = f2.add(f1); [EOL]         assertSame(f2, f); [EOL]          [EOL]         f1 = Fraction.getFraction(-1, 13*13*2*2); [EOL]         f2 = Fraction.getFraction(-2, 13*17*2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13*13*17*2*2, f.getDenominator()); [EOL]         assertEquals(-17 - 2*13*2, f.getNumerator()); [EOL]          [EOL]         try { [EOL]             f.add(null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         // if this fraction is added naively, it will overflow. [EOL]         // check that it doesn't. [EOL]         f1 = Fraction.getFraction(1,32768*3); [EOL]         f2 = Fraction.getFraction(1,59049); [EOL]         f = f1.add(f2); [EOL]         assertEquals(52451, f.getNumerator()); [EOL]         assertEquals(1934917632, f.getDenominator()); [EOL]  [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]         f2 = Fraction.ONE_THIRD; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MIN_VALUE+1, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = f.add(Fraction.ONE); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // denominator should not be a multiple of 2 or 3 to trigger overflow [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]         f2 = Fraction.getFraction(-1,5); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         f1 = Fraction.getFraction(3,327680); [EOL]         f2 = Fraction.getFraction(2,59049); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(-4, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(-1, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 8); [EOL]         f2 = Fraction.getFraction(1, 6); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13, f.getNumerator()); [EOL]         assertEquals(24, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertSame(f2, f); [EOL]         f = f2.add(f1); [EOL]         assertSame(f2, f); [EOL]          [EOL]         f1 = Fraction.getFraction(-1, 13*13*2*2); [EOL]         f2 = Fraction.getFraction(-2, 13*17*2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13*13*17*2*2, f.getDenominator()); [EOL]         assertEquals(-17 - 2*13*2, f.getNumerator()); [EOL]          [EOL]         try { [EOL]             f.add(null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         // if this fraction is added naively, it will overflow. [EOL]         // check that it doesn't. [EOL]         f1 = Fraction.getFraction(1,32768*3); [EOL]         f2 = Fraction.getFraction(1,59049); [EOL]         f = f1.add(f2); [EOL]         assertEquals(52451, f.getNumerator()); [EOL]         assertEquals(1934917632, f.getDenominator()); [EOL]  [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]         f2 = Fraction.ONE_THIRD; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MIN_VALUE+1, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = f.add(Fraction.ONE); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // denominator should not be a multiple of 2 or 3 to trigger overflow [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]         f2 = Fraction.getFraction(-1,5); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         f1 = Fraction.getFraction(3,327680); [EOL]         f2 = Fraction.getFraction(2,59049); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(-4, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(-1, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 8); [EOL]         f2 = Fraction.getFraction(1, 6); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13, f.getNumerator()); [EOL]         assertEquals(24, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertSame(f2, f); [EOL]         f = f2.add(f1); [EOL]         assertSame(f2, f); [EOL]          [EOL]         f1 = Fraction.getFraction(-1, 13*13*2*2); [EOL]         f2 = Fraction.getFraction(-2, 13*17*2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13*13*17*2*2, f.getDenominator()); [EOL]         assertEquals(-17 - 2*13*2, f.getNumerator()); [EOL]          [EOL]         try { [EOL]             f.add(null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         // if this fraction is added naively, it will overflow. [EOL]         // check that it doesn't. [EOL]         f1 = Fraction.getFraction(1,32768*3); [EOL]         f2 = Fraction.getFraction(1,59049); [EOL]         f = f1.add(f2); [EOL]         assertEquals(52451, f.getNumerator()); [EOL]         assertEquals(1934917632, f.getDenominator()); [EOL]  [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]         f2 = Fraction.ONE_THIRD; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MIN_VALUE+1, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = f.add(Fraction.ONE); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // denominator should not be a multiple of 2 or 3 to trigger overflow [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]         f2 = Fraction.getFraction(-1,5); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         f1 = Fraction.getFraction(3,327680); [EOL]         f2 = Fraction.getFraction(2,59049); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(-4, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(-1, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(11, f.getNumerator()); [EOL]         assertEquals(10, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 8); [EOL]         f2 = Fraction.getFraction(1, 6); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13, f.getNumerator()); [EOL]         assertEquals(24, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertSame(f2, f); [EOL]         f = f2.add(f1); [EOL]         assertSame(f2, f); [EOL]          [EOL]         f1 = Fraction.getFraction(-1, 13*13*2*2); [EOL]         f2 = Fraction.getFraction(-2, 13*17*2); [EOL]         f = f1.add(f2); [EOL]         assertEquals(13*13*17*2*2, f.getDenominator()); [EOL]         assertEquals(-17 - 2*13*2, f.getNumerator()); [EOL]          [EOL]         try { [EOL]             f.add(null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         // if this fraction is added naively, it will overflow. [EOL]         // check that it doesn't. [EOL]         f1 = Fraction.getFraction(1,32768*3); [EOL]         f2 = Fraction.getFraction(1,59049); [EOL]         f = f1.add(f2); [EOL]         assertEquals(52451, f.getNumerator()); [EOL]         assertEquals(1934917632, f.getDenominator()); [EOL]  [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 3); [EOL]         f2 = Fraction.ONE_THIRD; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MIN_VALUE+1, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MAX_VALUE - 1, 1); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.add(f2); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         try { [EOL]             f = f.add(Fraction.ONE); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         // denominator should not be a multiple of 2 or 3 to trigger overflow [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, 5); [EOL]         f2 = Fraction.getFraction(-1,5); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         try { [EOL]             f= Fraction.getFraction(-Integer.MAX_VALUE, 1); [EOL]             f = f.add(f); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]              [EOL]         f1 = Fraction.getFraction(3,327680); [EOL]         f2 = Fraction.getFraction(2,59049); [EOL]         try { [EOL]             f = f1.add(f2); // should overflow [EOL]             fail("expecting ArithmeticException but got: " + f.toString()); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // check unreduced fractions stay that way. [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(f, f.pow(1)); [EOL]         assertFalse(f.pow(1).equals(Fraction.getFraction(3,5))); [EOL]  [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-1); [EOL]         assertEquals(10, f.getNumerator()); [EOL]         assertEquals(6, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // zero to any positive power is still zero. [EOL]         f = Fraction.getFraction(0, 1231); [EOL]         f = f.pow(1); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1231, f.getDenominator()); [EOL]         f = f.pow(2); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         // zero to negative powers should throw an exception [EOL]         try { [EOL]             f = f.pow(-1); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = f.pow(Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // one to any power is still one. [EOL]         f = Fraction.getFraction(1, 1); [EOL]         f = f.pow(0); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(-1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MAX_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // Numerator growing too negative during the pow operation. [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(3); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         f = Fraction.getFraction(65536, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // check unreduced fractions stay that way. [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(f, f.pow(1)); [EOL]         assertFalse(f.pow(1).equals(Fraction.getFraction(3,5))); [EOL]  [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-1); [EOL]         assertEquals(10, f.getNumerator()); [EOL]         assertEquals(6, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // zero to any positive power is still zero. [EOL]         f = Fraction.getFraction(0, 1231); [EOL]         f = f.pow(1); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1231, f.getDenominator()); [EOL]         f = f.pow(2); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         // zero to negative powers should throw an exception [EOL]         try { [EOL]             f = f.pow(-1); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = f.pow(Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // one to any power is still one. [EOL]         f = Fraction.getFraction(1, 1); [EOL]         f = f.pow(0); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(-1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MAX_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // Numerator growing too negative during the pow operation. [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(3); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         f = Fraction.getFraction(65536, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testDivide() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.divideBy(f2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.ZERO; [EOL]         try { [EOL]             f = f1.divideBy(f2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(2, 7); [EOL]         f = f1.divideBy(f2); [EOL]         assertSame(Fraction.ZERO, f); [EOL]          [EOL]         f1 = Fraction.getFraction(2, 7); [EOL]         f2 = Fraction.ONE; [EOL]         f = f1.divideBy(f2); [EOL]         assertEquals(2, f.getNumerator()); [EOL]         assertEquals(7, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f1);   [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(Integer.MIN_VALUE, Integer.MAX_VALUE); [EOL]         f2 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]         f = f1.divideBy(f2); [EOL]         assertEquals(Integer.MIN_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         try { [EOL]             f.divideBy(null); [EOL]             fail("IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         try { [EOL]             f1 = Fraction.getFraction(1, Integer.MAX_VALUE); [EOL]             f = f1.divideBy(f1.invert());  // should overflow [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f1 = Fraction.getFraction(1, -Integer.MAX_VALUE); [EOL]             f = f1.divideBy(f1.invert());  // should overflow [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // check unreduced fractions stay that way. [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(f, f.pow(1)); [EOL]         assertFalse(f.pow(1).equals(Fraction.getFraction(3,5))); [EOL]  [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-1); [EOL]         assertEquals(10, f.getNumerator()); [EOL]         assertEquals(6, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // zero to any positive power is still zero. [EOL]         f = Fraction.getFraction(0, 1231); [EOL]         f = f.pow(1); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1231, f.getDenominator()); [EOL]         f = f.pow(2); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         // zero to negative powers should throw an exception [EOL]         try { [EOL]             f = f.pow(-1); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = f.pow(Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // one to any power is still one. [EOL]         f = Fraction.getFraction(1, 1); [EOL]         f = f.pow(0); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(-1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MAX_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // Numerator growing too negative during the pow operation. [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(3); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         f = Fraction.getFraction(65536, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // check unreduced fractions stay that way. [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(f, f.pow(1)); [EOL]         assertFalse(f.pow(1).equals(Fraction.getFraction(3,5))); [EOL]  [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-1); [EOL]         assertEquals(10, f.getNumerator()); [EOL]         assertEquals(6, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // zero to any positive power is still zero. [EOL]         f = Fraction.getFraction(0, 1231); [EOL]         f = f.pow(1); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1231, f.getDenominator()); [EOL]         f = f.pow(2); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         // zero to negative powers should throw an exception [EOL]         try { [EOL]             f = f.pow(-1); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = f.pow(Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // one to any power is still one. [EOL]         f = Fraction.getFraction(1, 1); [EOL]         f = f.pow(0); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(-1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MAX_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // Numerator growing too negative during the pow operation. [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(3); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         f = Fraction.getFraction(65536, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final Fraction f1 = Fraction.getFraction(3, 5); [EOL]         Fraction f2 = Fraction.getFraction(3, 5); [EOL]          [EOL]         assertTrue(f1.hashCode() == f2.hashCode()); [EOL]          [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         assertTrue(f1.hashCode() != f2.hashCode()); [EOL]          [EOL]         f2 = Fraction.getFraction(6, 10); [EOL]         assertTrue(f1.hashCode() != f2.hashCode()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(3, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // check unreduced fractions stay that way. [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         assertEquals(f, f.pow(1)); [EOL]         assertFalse(f.pow(1).equals(Fraction.getFraction(3,5))); [EOL]  [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-1); [EOL]         assertEquals(10, f.getNumerator()); [EOL]         assertEquals(6, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(6, 10); [EOL]         f = f.pow(-2); [EOL]         assertEquals(25, f.getNumerator()); [EOL]         assertEquals(9, f.getDenominator()); [EOL]          [EOL]         // zero to any positive power is still zero. [EOL]         f = Fraction.getFraction(0, 1231); [EOL]         f = f.pow(1); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1231, f.getDenominator()); [EOL]         f = f.pow(2); [EOL]         assertTrue(0==f.compareTo(Fraction.ZERO)); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         // zero to negative powers should throw an exception [EOL]         try { [EOL]             f = f.pow(-1); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         try { [EOL]             f = f.pow(Integer.MIN_VALUE); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // one to any power is still one. [EOL]         f = Fraction.getFraction(1, 1); [EOL]         f = f.pow(0); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(-1); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MAX_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]         f = f.pow(Integer.MIN_VALUE); [EOL]         assertEquals(f, Fraction.ONE); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         // Numerator growing too negative during the pow operation. [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL]         try { [EOL]             f = f.pow(3); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]  [EOL]         f = Fraction.getFraction(65536, 1); [EOL]         try { [EOL]             f = f.pow(2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCompareTo() { [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f1) == 0); [EOL]          [EOL]         try { [EOL]             f1.compareTo(null); [EOL]             fail("expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) {} [EOL]          [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(4, 5); [EOL]         assertTrue(f1.compareTo(f2) < 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(6, 10); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]  [EOL]         f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]  [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCompareTo() { [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f1) == 0); [EOL]          [EOL]         try { [EOL]             f1.compareTo(null); [EOL]             fail("expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) {} [EOL]          [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(4, 5); [EOL]         assertTrue(f1.compareTo(f2) < 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(6, 10); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]  [EOL]         f2 = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]  [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(-7, 5); [EOL]         assertEquals("-1 2/5", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 0, 1); [EOL]         assertEquals("-2147483648", f.toProperString());         [EOL]  [EOL]         f = Fraction.getFraction(-1, 1, Integer.MAX_VALUE); [EOL]         assertEquals("-1 1/2147483647", f.toProperString()); [EOL]  [EOL]         assertEquals("-1", Fraction.getFraction(-1).toProperString()); [EOL]     } [EOL] } [EOL]
lang3/text/translate/NumericEntityEscaper.java
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL]  [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL]  [EOL]     } [EOL]  [EOL] } [EOL]
lang3/text/translate/LookupTranslator.java
@Test [EOL]     public void testBasicLookup() throws IOException { [EOL]         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); [EOL]         final StringWriter out = new StringWriter(); [EOL]         final int result = lt.translate("one", 0, out); [EOL]         assertEquals("Incorrect codepoint consumption", 3, result); [EOL]         assertEquals("Incorrect value", "two", out.toString()); [EOL]     } [EOL]  [EOL]     // Tests: https://issues.apache.org/jira/browse/LANG-882 [EOL]
@Test [EOL]     public void testBasicLookup() throws IOException { [EOL]         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); [EOL]         final StringWriter out = new StringWriter(); [EOL]         final int result = lt.translate("one", 0, out); [EOL]         assertEquals("Incorrect codepoint consumption", 3, result); [EOL]         assertEquals("Incorrect value", "two", out.toString()); [EOL]     } [EOL]  [EOL]     // Tests: https://issues.apache.org/jira/browse/LANG-882 [EOL]
lang3/concurrent/AtomicInitializer.java
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]             } [EOL]         } [EOL]  [EOL]         final GetThread[] threads = new GetThread[threadCount]; [EOL]         for (int i = 0; i < threadCount; i++) { [EOL]             threads[i] = new GetThread(); [EOL]             threads[i].start(); [EOL]         } [EOL]  [EOL]         // fire all threads and wait until they are ready [EOL]         startLatch.countDown(); [EOL]         for (final Thread t : threads) { [EOL]             t.join(); [EOL]         } [EOL]  [EOL]         // check results [EOL]         final Object managedObject = initializer.get(); [EOL]         for (final GetThread t : threads) { [EOL]             assertEquals("Wrong object", managedObject, t.object); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Creates the {@link ConcurrentInitializer} object to be tested. This [EOL]      * method is called whenever the test fixture needs to be obtained. [EOL]      * [EOL]      * @return the initializer object to be tested [EOL]      */ [EOL]     protected abstract ConcurrentInitializer<Object> createInitializer(); [EOL] } [EOL]
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]             } [EOL]         } [EOL]  [EOL]         final GetThread[] threads = new GetThread[threadCount]; [EOL]         for (int i = 0; i < threadCount; i++) { [EOL]             threads[i] = new GetThread(); [EOL]             threads[i].start(); [EOL]         } [EOL]  [EOL]         // fire all threads and wait until they are ready [EOL]         startLatch.countDown(); [EOL]         for (final Thread t : threads) { [EOL]             t.join(); [EOL]         } [EOL]  [EOL]         // check results [EOL]         final Object managedObject = initializer.get(); [EOL]         for (final GetThread t : threads) { [EOL]             assertEquals("Wrong object", managedObject, t.object); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Creates the {@link ConcurrentInitializer} object to be tested. This [EOL]      * method is called whenever the test fixture needs to be obtained. [EOL]      * [EOL]      * @return the initializer object to be tested [EOL]      */ [EOL]     protected abstract ConcurrentInitializer<Object> createInitializer(); [EOL] } [EOL]
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]             } [EOL]         } [EOL]  [EOL]         final GetThread[] threads = new GetThread[threadCount]; [EOL]         for (int i = 0; i < threadCount; i++) { [EOL]             threads[i] = new GetThread(); [EOL]             threads[i].start(); [EOL]         } [EOL]  [EOL]         // fire all threads and wait until they are ready [EOL]         startLatch.countDown(); [EOL]         for (final Thread t : threads) { [EOL]             t.join(); [EOL]         } [EOL]  [EOL]         // check results [EOL]         final Object managedObject = initializer.get(); [EOL]         for (final GetThread t : threads) { [EOL]             assertEquals("Wrong object", managedObject, t.object); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Creates the {@link ConcurrentInitializer} object to be tested. This [EOL]      * method is called whenever the test fixture needs to be obtained. [EOL]      * [EOL]      * @return the initializer object to be tested [EOL]      */ [EOL]     protected abstract ConcurrentInitializer<Object> createInitializer(); [EOL] } [EOL]
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]             } [EOL]         } [EOL]  [EOL]         final GetThread[] threads = new GetThread[threadCount]; [EOL]         for (int i = 0; i < threadCount; i++) { [EOL]             threads[i] = new GetThread(); [EOL]             threads[i].start(); [EOL]         } [EOL]  [EOL]         // fire all threads and wait until they are ready [EOL]         startLatch.countDown(); [EOL]         for (final Thread t : threads) { [EOL]             t.join(); [EOL]         } [EOL]  [EOL]         // check results [EOL]         final Object managedObject = initializer.get(); [EOL]         for (final GetThread t : threads) { [EOL]             assertEquals("Wrong object", managedObject, t.object); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Creates the {@link ConcurrentInitializer} object to be tested. This [EOL]      * method is called whenever the test fixture needs to be obtained. [EOL]      * [EOL]      * @return the initializer object to be tested [EOL]      */ [EOL]     protected abstract ConcurrentInitializer<Object> createInitializer(); [EOL] } [EOL]
lang3/concurrent/BackgroundInitializer.java
@Test(expected = IllegalArgumentException.class) [EOL]     public void testAddInitializerNullName() { [EOL]         initializer.addInitializer(null, new ChildBackgroundInitializer()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests addInitializer() if a null initializer is passed in. This should [EOL]      * cause an exception. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeResultsIsSuccessfulFalse() [EOL]             throws ConcurrentException { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new Exception(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer [EOL]                 .get(); [EOL]         assertFalse("Wrong success flag", res.isSuccessful()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether MultiBackgroundInitializers can be combined in a nested [EOL]      * way. [EOL]      */ [EOL]
@Test [EOL]     public void testStartMultipleTimes() { [EOL]         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]         assertTrue("Wrong result for start()", init.start()); [EOL]         for (int i = 0; i < 10; i++) { [EOL]             assertFalse("Could start again", init.start()); [EOL]         } [EOL]         checkInitialize(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests calling get() before start(). This should cause an exception. [EOL]      */ [EOL]
lang3/EnumUtils.java
@Test [EOL]     public void test_getEnumMap() { [EOL]         final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class); [EOL]         assertEquals( "getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); [EOL]         assertEquals(3, test.size()); [EOL]         assertTrue(test.containsKey("RED")); [EOL]         assertEquals(Traffic.RED, test.get("RED")); [EOL]         assertTrue(test.containsKey("AMBER")); [EOL]         assertEquals(Traffic.AMBER, test.get("AMBER")); [EOL]         assertTrue(test.containsKey("GREEN")); [EOL]         assertEquals(Traffic.GREEN, test.get("GREEN")); [EOL]         assertFalse(test.containsKey("PURPLE")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getEnum() { [EOL]         assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]         assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]         assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]         assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); [EOL]         assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_generateBitVector() { [EOL]         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]         assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]         assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER))); [EOL]         assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN))); [EOL]         assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER))); [EOL]         assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN))); [EOL]         assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN))); [EOL]         assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_generateBitVector() { [EOL]         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]         assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]         assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER))); [EOL]         assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN))); [EOL]         assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER))); [EOL]         assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN))); [EOL]         assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN))); [EOL]         assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN))); [EOL]     } [EOL]  [EOL]
@Test(expected=IllegalArgumentException.class) [EOL]     public void test_generateBitVectors_nullElement() { [EOL]         EnumUtils.generateBitVectors(Traffic.class, Arrays.asList(Traffic.RED, null)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_generateBitVectorsFromArray() { [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L); [EOL]         //gracefully handles duplicates: [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L); [EOL]     } [EOL]  [EOL]     private void assertArrayEquals(final long[] actual, final long... expected) { [EOL]         Assert.assertArrayEquals(expected, actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_generateBitVectorsFromArray() { [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class), 0L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED), 1L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER), 2L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.GREEN), 4L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER), 3L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.GREEN), 5L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.AMBER, Traffic.GREEN), 6L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN), 7L); [EOL]         //gracefully handles duplicates: [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN), 7L); [EOL]     } [EOL]  [EOL]     private void assertArrayEquals(final long[] actual, final long... expected) { [EOL]         Assert.assertArrayEquals(expected, actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_processBitVector() { [EOL]         assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]         assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]         assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]         assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL]     } [EOL]  [EOL]
@Test(expected=NullPointerException.class) [EOL]     public void test_generateBitVector_nullIterable() { [EOL]         EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL]     } [EOL]  [EOL]
lang3/time/StopWatch.java
@Test [EOL]     public void testBadStates() { [EOL]         final StopWatch watch = new StopWatch(); [EOL]         try { [EOL]             watch.stop(); [EOL]             fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.stop(); [EOL]             fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.suspend(); [EOL]             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.split(); [EOL]             fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.unsplit(); [EOL]             fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.resume(); [EOL]             fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         watch.start(); [EOL]  [EOL]         try { [EOL]             watch.start(); [EOL]             fail("Calling start on a started StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.unsplit(); [EOL]             fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.getSplitTime(); [EOL]             fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.resume(); [EOL]             fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         watch.stop(); [EOL]  [EOL]         try { [EOL]             watch.start(); [EOL]             fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBadStates() { [EOL]         final StopWatch watch = new StopWatch(); [EOL]         try { [EOL]             watch.stop(); [EOL]             fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.stop(); [EOL]             fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.suspend(); [EOL]             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.split(); [EOL]             fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.unsplit(); [EOL]             fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.resume(); [EOL]             fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         watch.start(); [EOL]  [EOL]         try { [EOL]             watch.start(); [EOL]             fail("Calling start on a started StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.unsplit(); [EOL]             fail("Calling unsplit on an unsplit StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.getSplitTime(); [EOL]             fail("Calling getSplitTime on an unsplit StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.resume(); [EOL]             fail("Calling resume on an unsuspended StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         watch.stop(); [EOL]  [EOL]         try { [EOL]             watch.start(); [EOL]             fail("Calling start on a stopped StopWatch should throw an exception as it needs to be reset. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStopWatchSimple(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long time = watch.getTime(); [EOL]         assertEquals(time, watch.getTime()); [EOL]          [EOL]         assertTrue(time >= 500); [EOL]         assertTrue(time < 700); [EOL]          [EOL]         watch.reset(); [EOL]         assertEquals(0, watch.getTime()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testStopWatchSplit(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.split(); [EOL]         final long splitTime = watch.getSplitTime(); [EOL]         final String splitStr = watch.toSplitString(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.unsplit(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]  [EOL]         assertEquals("Formatted split string not the correct length",  [EOL]                      splitStr.length(), 11); [EOL]         assertTrue(splitTime >= 500); [EOL]         assertTrue(splitTime < 700); [EOL]         assertTrue(totalTime >= 1500); [EOL]         assertTrue(totalTime < 1900); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testStopWatchSplit(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.split(); [EOL]         final long splitTime = watch.getSplitTime(); [EOL]         final String splitStr = watch.toSplitString(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.unsplit(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]  [EOL]         assertEquals("Formatted split string not the correct length",  [EOL]                      splitStr.length(), 11); [EOL]         assertTrue(splitTime >= 500); [EOL]         assertTrue(splitTime < 700); [EOL]         assertTrue(totalTime >= 1500); [EOL]         assertTrue(totalTime < 1900); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testStopWatchSuspend(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.suspend(); [EOL]         final long suspendTime = watch.getTime(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.resume(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]          [EOL]         assertTrue(suspendTime >= 500); [EOL]         assertTrue(suspendTime < 700); [EOL]         assertTrue(totalTime >= 1000); [EOL]         assertTrue(totalTime < 1300); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStopWatchSuspend(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.suspend(); [EOL]         final long suspendTime = watch.getTime(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.resume(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]          [EOL]         assertTrue(suspendTime >= 500); [EOL]         assertTrue(suspendTime < 700); [EOL]         assertTrue(totalTime >= 1000); [EOL]         assertTrue(totalTime < 1300); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStopWatchSimpleGet(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         assertEquals(0, watch.getTime()); [EOL]         assertEquals("0:00:00.000", watch.toString()); [EOL]          [EOL]         watch.start(); [EOL]             try {Thread.sleep(500);} catch (final InterruptedException ex) {} [EOL]         assertTrue(watch.getTime() < 2000); [EOL]     } [EOL]      [EOL]
lang3/SerializationException.java
lang3/text/CompositeFormat.java
@Test [EOL]     public void testUsage() throws Exception { [EOL]         final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]         final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]         final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]         final String testString = "January 3, 2005"; [EOL]         assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]         assertEquals(testString, c.reformat("01032005")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testUsage() throws Exception { [EOL]         final Format f1 = new SimpleDateFormat("MMddyyyy", Locale.ENGLISH); [EOL]         final Format f2 = new SimpleDateFormat("MMMM d, yyyy", Locale.ENGLISH); [EOL]         final CompositeFormat c = new CompositeFormat(f1, f2); [EOL]         final String testString = "January 3, 2005"; [EOL]         assertEquals(testString, c.format(c.parseObject("01032005"))); [EOL]         assertEquals(testString, c.reformat("01032005")); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/tuple/ImmutableTriple.java
lang3/mutable/MutableByte.java
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]         assertEquals((byte) 1, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]         assertEquals((byte) 2, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(new MutableByte((byte) 3)); [EOL]         assertEquals((byte) 3, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]         assertEquals((byte) 1, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]         assertEquals((byte) 2, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(new MutableByte((byte) 3)); [EOL]         assertEquals((byte) 3, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]         assertEquals((byte) 1, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]         assertEquals((byte) 2, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(new MutableByte((byte) 3)); [EOL]         assertEquals((byte) 3, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDecrement() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIncrement() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 1); [EOL]         mutNum.increment(); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDecrement() { [EOL]         final MutableShort mutNum = new MutableShort((short) 1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIncrement() { [EOL]         final MutableInt mutNum = new MutableInt(1); [EOL]         mutNum.increment(); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableShort mutNum = new MutableShort( (short) 1 ); [EOL]          [EOL]         assertEquals( 1.0F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.0, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL]         assertEquals( (short) 1, mutNum.shortValue() ); [EOL]         assertEquals( 1, mutNum.intValue() ); [EOL]         assertEquals( 1L, mutNum.longValue() ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableLong mutNum = new MutableLong(1L); [EOL]  [EOL]         assertEquals( 1.0F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.0, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL]         assertEquals( (short) 1, mutNum.shortValue() ); [EOL]         assertEquals( 1, mutNum.intValue() ); [EOL]         assertEquals( 1L, mutNum.longValue() ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToByte() { [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte((byte) 0).toByte()); [EOL]         assertEquals(Byte.valueOf((byte) 123), new MutableByte((byte) 123).toByte()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableByte mutNumA = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumB = new MutableByte((byte) 0); [EOL]         final MutableByte mutNumC = new MutableByte((byte) 1); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Byte.valueOf((byte) 0).hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableShort mutNumA = new MutableShort((short) 0); [EOL]         final MutableShort mutNumB = new MutableShort((short) 0); [EOL]         final MutableShort mutNumC = new MutableShort((short) 1); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Short.valueOf((short) 0).hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableByte((byte) 0).toString()); [EOL]         assertEquals("10", new MutableByte((byte) 10).toString()); [EOL]         assertEquals("-123", new MutableByte((byte) -123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0.0", new MutableDouble(0d).toString()); [EOL]         assertEquals("10.0", new MutableDouble(10d).toString()); [EOL]         assertEquals("-123.0", new MutableDouble(-123d).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/JavaVersion.java
@Test [EOL]     public void testAtLeast() { [EOL]         assertFalse("1.2 at least 1.5 passed", JAVA_1_2.atLeast(JAVA_1_5)); [EOL]         assertTrue("1.5 at least 1.2 failed", JAVA_1_5.atLeast(JAVA_1_2)); [EOL]         assertFalse("1.6 at least 1.7 passed", JAVA_1_6.atLeast(JAVA_1_7)); [EOL]  [EOL]         assertTrue("0.9 at least 1.5 failed", JAVA_0_9.atLeast(JAVA_1_5)); [EOL]         assertFalse("0.9 at least 1.6 passed", JAVA_0_9.atLeast(JAVA_1_6)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetJavaVersion() { [EOL]         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]         assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetJavaVersion() { [EOL]         assertEquals("0.9 failed", JAVA_0_9, get("0.9")); [EOL]         assertEquals("1.1 failed", JAVA_1_1, get("1.1")); [EOL]         assertEquals("1.2 failed", JAVA_1_2, get("1.2")); [EOL]         assertEquals("1.3 failed", JAVA_1_3, get("1.3")); [EOL]         assertEquals("1.4 failed", JAVA_1_4, get("1.4")); [EOL]         assertEquals("1.5 failed", JAVA_1_5, get("1.5")); [EOL]         assertEquals("1.6 failed", JAVA_1_6, get("1.6")); [EOL]         assertEquals("1.7 failed", JAVA_1_7, get("1.7")); [EOL]         assertEquals("1.8 failed", JAVA_1_8, get("1.8")); [EOL]         assertNull("1.9 unexpectedly worked", get("1.9")); [EOL]         assertEquals("Wrapper method failed", get("1.5"), getJavaVersion("1.5")); [EOL]     } [EOL]  [EOL]
lang3/exception/DefaultExceptionContext.java
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormattedExceptionMessageNull() { [EOL]         exceptionContext = new DefaultExceptionContext(); [EOL]         exceptionContext.getFormattedExceptionMessage(null); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testFormattedExceptionMessageNull() { [EOL]         exceptionContext = new DefaultExceptionContext(); [EOL]         exceptionContext.getFormattedExceptionMessage(null); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
lang3/mutable/MutableLong.java
@Test [EOL]     public void testDecrement() { [EOL]         final MutableInt mutNum = new MutableInt(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.add(1); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDecrement() { [EOL]         final MutableFloat mutNum = new MutableFloat(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableDouble mutNum = new MutableDouble(1.7); [EOL]          [EOL]         assertEquals( 1.7F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.7, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL]         assertEquals( (short) 1, mutNum.shortValue() ); [EOL]         assertEquals( 1, mutNum.intValue() ); [EOL]         assertEquals( 1L, mutNum.longValue() ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableLong mutNumA = new MutableLong(0); [EOL]         final MutableLong mutNumB = new MutableLong(0); [EOL]         final MutableLong mutNumC = new MutableLong(1); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Long.valueOf(0).hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCompareTo() { [EOL]         final MutableLong mutNum = new MutableLong(0); [EOL]  [EOL]         assertEquals(0, mutNum.compareTo(new MutableLong(0))); [EOL]         assertEquals(+1, mutNum.compareTo(new MutableLong(-1))); [EOL]         assertEquals(-1, mutNum.compareTo(new MutableLong(1))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableLong(0).toString()); [EOL]         assertEquals("10", new MutableLong(10).toString()); [EOL]         assertEquals("-123", new MutableLong(-123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/reflect/ConstructorUtils.java
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) null).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE }).toString()); [EOL]  [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) null).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE }).toString()); [EOL]  [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) null).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE }).toString()); [EOL]  [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             ConstructorUtils.invokeExactConstructor(TestBean.class, [EOL]                     Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
lang3/CharUtils.java
@Test [EOL]     public void testToCharacterObject_char() { [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]         [EOL]         for (int i = 0; i < 128; i++) { [EOL]             final Character ch = CharUtils.toCharacterObject((char) i); [EOL]             final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]             assertSame(ch, ch2); [EOL]             assertEquals(i, ch.charValue()); [EOL]         } [EOL]         for (int i = 128; i < 196; i++) { [EOL]             final Character ch = CharUtils.toCharacterObject((char) i); [EOL]             final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]             assertEquals(ch, ch2); [EOL]             assertTrue(ch != ch2); [EOL]             assertEquals(i, ch.charValue()); [EOL]             assertEquals(i, ch2.charValue()); [EOL]         } [EOL]         assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToCharacterObject_String() { [EOL]         assertEquals(null, CharUtils.toCharacterObject(null)); [EOL]         assertEquals(null, CharUtils.toCharacterObject("")); [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject("a")); [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject("abc")); [EOL]         assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject("a")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToCharacterObject_char() { [EOL]         assertEquals(new Character('a'), CharUtils.toCharacterObject('a')); [EOL]         assertSame(CharUtils.toCharacterObject('a'), CharUtils.toCharacterObject('a')); [EOL]         [EOL]         for (int i = 0; i < 128; i++) { [EOL]             final Character ch = CharUtils.toCharacterObject((char) i); [EOL]             final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]             assertSame(ch, ch2); [EOL]             assertEquals(i, ch.charValue()); [EOL]         } [EOL]         for (int i = 128; i < 196; i++) { [EOL]             final Character ch = CharUtils.toCharacterObject((char) i); [EOL]             final Character ch2 = CharUtils.toCharacterObject((char) i); [EOL]             assertEquals(ch, ch2); [EOL]             assertTrue(ch != ch2); [EOL]             assertEquals(i, ch.charValue()); [EOL]             assertEquals(i, ch2.charValue()); [EOL]         } [EOL]         assertSame(CharUtils.toCharacterObject("a"), CharUtils.toCharacterObject('a')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToIntValue_Character() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]         try { [EOL]             CharUtils.toIntValue(null); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             CharUtils.toIntValue(CHARACTER_A); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToIntValue_Character_int() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]         assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]         assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToIntValue_Character_int() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'), -1)); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'), -1)); [EOL]         assertEquals(-1, CharUtils.toIntValue(new Character('A'), -1)); [EOL]         assertEquals(-1, CharUtils.toIntValue(null, -1)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsAsciiAlphaLower_char() { [EOL]         assertTrue(CharUtils.isAsciiAlphaLower('a')); [EOL]         assertFalse(CharUtils.isAsciiAlphaLower('A')); [EOL]         assertFalse(CharUtils.isAsciiAlphaLower('3')); [EOL]         assertFalse(CharUtils.isAsciiAlphaLower('-')); [EOL]         assertFalse(CharUtils.isAsciiAlphaLower('\n')); [EOL]         assertFalse(CharUtils.isAsciiAlphaLower(CHAR_COPY)); [EOL]         [EOL]         for (int i = 0; i < 196; i++) { [EOL]             if (i >= 'a' && i <= 'z') { [EOL]                 assertTrue(CharUtils.isAsciiAlphaLower((char) i)); [EOL]             } else { [EOL]                 assertFalse(CharUtils.isAsciiAlphaLower((char) i)); [EOL]             } [EOL]         } [EOL]     } [EOL]      [EOL]
lang3/tuple/Pair.java
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair); [EOL]         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origPair, deserializedPair); [EOL]         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testComparable1() throws Exception { [EOL]         final Pair<String, String> pair1 = Pair.of("A", "D"); [EOL]         final Pair<String, String> pair2 = Pair.of("B", "C"); [EOL]         assertTrue(pair1.compareTo(pair1) == 0); [EOL]         assertTrue(pair1.compareTo(pair2) < 0); [EOL]         assertTrue(pair2.compareTo(pair2) == 0); [EOL]         assertTrue(pair2.compareTo(pair1) > 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair); [EOL]         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origPair, deserializedPair); [EOL]         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testFormattable_padded() throws Exception { [EOL]         final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]         assertEquals("         (Key,Value)", String.format("%1$20s", pair)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testFormattable_padded() throws Exception { [EOL]         final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]         assertEquals("         (Key,Value)", String.format("%1$20s", pair)); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/text/translate/NumericEntityUnescaper.java
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testOutOfBounds() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]  [EOL]         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &")); [EOL]         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#")); [EOL]         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x")); [EOL]         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testUnfinishedEntity() { [EOL]         // parse it [EOL]         NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]         String input = "Test &#x30 not test"; [EOL]         String expected = "Test \u0030 not test"; [EOL]  [EOL]         String result = neu.translate(input); [EOL]         assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]  [EOL]         // ignore it [EOL]         neu = new NumericEntityUnescaper(); [EOL]         input = "Test &#x30 not test"; [EOL]         expected = input; [EOL]  [EOL]         result = neu.translate(input); [EOL]         assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]  [EOL]         // fail it [EOL]         neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]         input = "Test &#x30 not test"; [EOL]  [EOL]         try { [EOL]             result = neu.translate(input); [EOL]             fail("IllegalArgumentException expected"); [EOL]         } catch(final IllegalArgumentException iae) { [EOL]             // expected [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
lang3/concurrent/MultiBackgroundInitializer.java
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeTempExec() throws ConcurrentException { [EOL]         checkInitialize(); [EOL]         assertTrue("Executor not shutdown", initializer.getActiveExecutor() [EOL]                 .isShutdown()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests background processing if an external executor service is provided. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeResultsIsSuccessfulFalse() [EOL]             throws ConcurrentException { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new Exception(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer [EOL]                 .get(); [EOL]         assertFalse("Wrong success flag", res.isSuccessful()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether MultiBackgroundInitializers can be combined in a nested [EOL]      * way. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeNested() throws ConcurrentException { [EOL]         final String nameMulti = "multiChildInitializer"; [EOL]         initializer [EOL]                 .addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer(); [EOL]         final int count = 3; [EOL]         for (int i = 0; i < count; i++) { [EOL]             mi2 [EOL]                     .addInitializer(CHILD_INIT + i, [EOL]                             new ChildBackgroundInitializer()); [EOL]         } [EOL]         initializer.addInitializer(nameMulti, mi2); [EOL]         initializer.start(); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer [EOL]                 .get(); [EOL]         final ExecutorService exec = initializer.getActiveExecutor(); [EOL]         checkChild(res.getInitializer(CHILD_INIT), exec); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res [EOL]                 .getResultObject(nameMulti); [EOL]         assertEquals("Wrong number of initializers", count, res2 [EOL]                 .initializerNames().size()); [EOL]         for (int i = 0; i < count; i++) { [EOL]             checkChild(res2.getInitializer(CHILD_INIT + i), exec); [EOL]         } [EOL]         assertTrue("Executor not shutdown", exec.isShutdown()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * A concrete implementation of {@code BackgroundInitializer} used for [EOL]      * defining background tasks for {@code MultiBackgroundInitializer}. [EOL]      */ [EOL]     private static class ChildBackgroundInitializer extends [EOL]             BackgroundInitializer<Integer> { [EOL]         /** Stores the current executor service. */ [EOL]         volatile ExecutorService currentExecutor; [EOL]  [EOL]         /** A counter for the invocations of initialize(). */ [EOL]         volatile int initializeCalls; [EOL]  [EOL]         /** An exception to be thrown by initialize(). */ [EOL]         Exception ex; [EOL]  [EOL]         /** [EOL]          * Records this invocation. Optionally throws an exception. [EOL]          */ [EOL]         @Override [EOL]         protected Integer initialize() throws Exception { [EOL]             currentExecutor = getActiveExecutor(); [EOL]             initializeCalls++; [EOL]  [EOL]             if (ex != null) { [EOL]                 throw ex; [EOL]             } [EOL]  [EOL]             return Integer.valueOf(initializeCalls); [EOL]         } [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testInitializeNested() throws ConcurrentException { [EOL]         final String nameMulti = "multiChildInitializer"; [EOL]         initializer [EOL]                 .addInitializer(CHILD_INIT, new ChildBackgroundInitializer()); [EOL]         final MultiBackgroundInitializer mi2 = new MultiBackgroundInitializer(); [EOL]         final int count = 3; [EOL]         for (int i = 0; i < count; i++) { [EOL]             mi2 [EOL]                     .addInitializer(CHILD_INIT + i, [EOL]                             new ChildBackgroundInitializer()); [EOL]         } [EOL]         initializer.addInitializer(nameMulti, mi2); [EOL]         initializer.start(); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer [EOL]                 .get(); [EOL]         final ExecutorService exec = initializer.getActiveExecutor(); [EOL]         checkChild(res.getInitializer(CHILD_INIT), exec); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res2 = (MultiBackgroundInitializer.MultiBackgroundInitializerResults) res [EOL]                 .getResultObject(nameMulti); [EOL]         assertEquals("Wrong number of initializers", count, res2 [EOL]                 .initializerNames().size()); [EOL]         for (int i = 0; i < count; i++) { [EOL]             checkChild(res2.getInitializer(CHILD_INIT + i), exec); [EOL]         } [EOL]         assertTrue("Executor not shutdown", exec.isShutdown()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * A concrete implementation of {@code BackgroundInitializer} used for [EOL]      * defining background tasks for {@code MultiBackgroundInitializer}. [EOL]      */ [EOL]     private static class ChildBackgroundInitializer extends [EOL]             BackgroundInitializer<Integer> { [EOL]         /** Stores the current executor service. */ [EOL]         volatile ExecutorService currentExecutor; [EOL]  [EOL]         /** A counter for the invocations of initialize(). */ [EOL]         volatile int initializeCalls; [EOL]  [EOL]         /** An exception to be thrown by initialize(). */ [EOL]         Exception ex; [EOL]  [EOL]         /** [EOL]          * Records this invocation. Optionally throws an exception. [EOL]          */ [EOL]         @Override [EOL]         protected Integer initialize() throws Exception { [EOL]             currentExecutor = getActiveExecutor(); [EOL]             initializeCalls++; [EOL]  [EOL]             if (ex != null) { [EOL]                 throw ex; [EOL]             } [EOL]  [EOL]             return Integer.valueOf(initializeCalls); [EOL]         } [EOL]     } [EOL] } [EOL]
lang3/CharEncoding.java
@Test [EOL]     public void testNotSupported() { [EOL]         assertFalse(CharEncoding.isSupported(null)); [EOL]         assertFalse(CharEncoding.isSupported("")); [EOL]         assertFalse(CharEncoding.isSupported(" ")); [EOL]         assertFalse(CharEncoding.isSupported("\t\r\n")); [EOL]         assertFalse(CharEncoding.isSupported("DOESNOTEXIST")); [EOL]         assertFalse(CharEncoding.isSupported("this is not a valid encoding name")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMustBeSupportedJava1_3_1() { [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) { [EOL]             this.assertSupportedEncoding(CharEncoding.ISO_8859_1); [EOL]             this.assertSupportedEncoding(CharEncoding.US_ASCII); [EOL]             this.assertSupportedEncoding(CharEncoding.UTF_16); [EOL]             this.assertSupportedEncoding(CharEncoding.UTF_16BE); [EOL]             this.assertSupportedEncoding(CharEncoding.UTF_16LE); [EOL]             this.assertSupportedEncoding(CharEncoding.UTF_8); [EOL]         } else { [EOL]             this.warn("Java 1.3 tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]         } [EOL]     } [EOL]  [EOL]
lang3/text/translate/CharSequenceTranslator.java
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAbove() { [EOL]         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL]     } [EOL]  [EOL]     // See LANG-617 [EOL]
lang3/builder/IDKey.java
lang3/builder/ToStringStyle.java
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper("Integer@8888[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  a=hello" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testObjectArray() { [EOL]         Object[] array = new Object[] {null, base, new int[] {3, 6}}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCharArrayArray() { [EOL]         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSelfInstanceTwoVarsReflectionObjectCycle() throws Exception { [EOL]         final SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture(); [EOL]         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString()); [EOL]     } [EOL]  [EOL]  [EOL]     /** [EOL]      * Test Objects pointing to each other. [EOL]      * [EOL]      * @throws Exception [EOL]      */ [EOL]
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByte() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testByte() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPerson() { [EOL]         final Person p = new Person(); [EOL]         p.name = "Ron Paul"; [EOL]         p.age = 72; [EOL]         p.smoker = false; [EOL]         final String pBaseStr = p.getClass().getName() + "@" + Integer.toHexString(System.identityHashCode(p)); [EOL]         assertEquals(pBaseStr + "[Ron Paul,72,false]", new ToStringBuilder(p).append("name", p.name).append("age", p.age).append("smoker", p.smoker).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArray() { [EOL]         long[] array = new long[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArray() { [EOL]         long[] array = new long[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         int[] array = new int[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectArray() { [EOL]         Object[] array = new Object[] {null, base, new int[] {3, 6}}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectArray() { [EOL]         Object[] array = new Object[] {null, base, new int[] {3, 6}}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {<null>,5,{3,6}}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArray() { [EOL]         byte[] array = new byte[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] array = new char[] {'A', '2', '_', 'D'}; [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] array = new char[] {'A', '2', '_', 'D'}; [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArrayArray() { [EOL]         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayArray() { [EOL]         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayArray() { [EOL]         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", (Object) new String[0], false).toString()); [EOL]         assertEquals(baseStr + "[a={}]", new ToStringBuilder(base).append("a", (Object) new String[0], true).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSetArrayStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayStart(null); [EOL]         assertEquals("", style.getArrayStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArrayStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayStart(null); [EOL]         assertEquals("", style.getArrayStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArrayEnd() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayEnd(null); [EOL]         assertEquals("", style.getArrayEnd()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetArraySeparator() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArraySeparator(null); [EOL]         assertEquals("", style.getArraySeparator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContentStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setContentStart(null); [EOL]         assertEquals("", style.getContentStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetFieldNameValueSeparator() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setFieldNameValueSeparator(null); [EOL]         assertEquals("", style.getFieldNameValueSeparator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetNullText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setNullText(null); [EOL]         assertEquals("", style.getNullText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetNullText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setNullText(null); [EOL]         assertEquals("", style.getNullText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetSizeEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSizeEndText(null); [EOL]         assertEquals("", style.getSizeEndText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetSummaryObjectEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSummaryObjectEndText(null); [EOL]         assertEquals("", style.getSummaryObjectEndText()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * An object used to test {@link ToStringStyle}. [EOL]      *  [EOL]      */ [EOL]     static class Person { [EOL]         /** [EOL]          * Test String field. [EOL]          */ [EOL]         String name; [EOL]  [EOL]         /** [EOL]          * Test integer field. [EOL]          */ [EOL]         int age; [EOL]  [EOL]         /** [EOL]          * Test boolean field. [EOL]          */ [EOL]         boolean smoker; [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testSetSummaryObjectEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSummaryObjectEndText(null); [EOL]         assertEquals("", style.getSummaryObjectEndText()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * An object used to test {@link ToStringStyle}. [EOL]      *  [EOL]      */ [EOL]     static class Person { [EOL]         /** [EOL]          * Test String field. [EOL]          */ [EOL]         String name; [EOL]  [EOL]         /** [EOL]          * Test integer field. [EOL]          */ [EOL]         int age; [EOL]  [EOL]         /** [EOL]          * Test boolean field. [EOL]          */ [EOL]         boolean smoker; [EOL]     } [EOL] } [EOL]
lang3/concurrent/LazyInitializer.java
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
lang3/mutable/MutableFloat.java
@Test [EOL]     public void testSubtractValuePrimitive() { [EOL]         final MutableFloat mutNum = new MutableFloat(1); [EOL]         mutNum.subtract(0.9f); [EOL]          [EOL]         assertEquals(0.1f, mutNum.floatValue(), 0.01f); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDecrement() { [EOL]         final MutableFloat mutNum = new MutableFloat(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableFloat mutNumA = new MutableFloat(0f); [EOL]         final MutableFloat mutNumB = new MutableFloat(0f); [EOL]         final MutableFloat mutNumC = new MutableFloat(1f); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.equals(mutNumB)); [EOL]         assertTrue(mutNumB.equals(mutNumA)); [EOL]         assertTrue(mutNumB.equals(mutNumB)); [EOL]         assertFalse(mutNumA.equals(mutNumC)); [EOL]         assertFalse(mutNumB.equals(mutNumC)); [EOL]         assertTrue(mutNumC.equals(mutNumC)); [EOL]         assertFalse(mutNumA.equals(null)); [EOL]         assertFalse(mutNumA.equals(Float.valueOf(0f))); [EOL]         assertFalse(mutNumA.equals("0")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableFloat mutNumA = new MutableFloat(0f); [EOL]         final MutableFloat mutNumB = new MutableFloat(0f); [EOL]         final MutableFloat mutNumC = new MutableFloat(1f); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.equals(mutNumB)); [EOL]         assertTrue(mutNumB.equals(mutNumA)); [EOL]         assertTrue(mutNumB.equals(mutNumB)); [EOL]         assertFalse(mutNumA.equals(mutNumC)); [EOL]         assertFalse(mutNumB.equals(mutNumC)); [EOL]         assertTrue(mutNumC.equals(mutNumC)); [EOL]         assertFalse(mutNumA.equals(null)); [EOL]         assertFalse(mutNumA.equals(Float.valueOf(0f))); [EOL]         assertFalse(mutNumA.equals("0")); [EOL]     } [EOL]  [EOL]
lang3/text/translate/AggregateTranslator.java
@Test [EOL]     public void testUnescapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); [EOL]         assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code appendIfMissing}. [EOL]      */ [EOL]
lang3/text/StrMatcher.java
@Test [EOL]     public void testCommaMatcher() { [EOL]         final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]         assertSame(matcher, StrMatcher.commaMatcher()); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 0)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 1)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSplitMatcher() { [EOL]         final StrMatcher matcher = StrMatcher.splitMatcher(); [EOL]         assertSame(matcher, StrMatcher.splitMatcher()); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 5)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 6)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 7)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 8)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 9)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 10)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDoubleQuoteMatcher() { [EOL]         final StrMatcher matcher = StrMatcher.doubleQuoteMatcher(); [EOL]         assertSame(matcher, StrMatcher.doubleQuoteMatcher()); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 11)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 12)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCharSetMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]         assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCharSetMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]         assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testStringMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.stringMatcher("bc"); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(2, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 2)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 4)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher("")); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.stringMatcher((String) null)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
lang3/text/translate/EntityArrays.java
lang3/mutable/MutableObject.java
@Test [EOL]     public void testGetSet() { [EOL]         final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]         assertEquals(null, new MutableObject<Object>().getValue()); [EOL]          [EOL]         mutNum.setValue("HELLO"); [EOL]         assertSame("HELLO", mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(null); [EOL]         assertSame(null, mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]         final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.equals(mutNumB)); [EOL]         assertTrue(mutNumB.equals(mutNumA)); [EOL]         assertTrue(mutNumB.equals(mutNumB)); [EOL]         assertFalse(mutNumA.equals(mutNumC)); [EOL]         assertFalse(mutNumB.equals(mutNumC)); [EOL]         assertTrue(mutNumC.equals(mutNumC)); [EOL]         assertFalse(mutNumA.equals(mutNumD)); [EOL]         assertTrue(mutNumD.equals(mutNumD)); [EOL]          [EOL]         assertFalse(mutNumA.equals(null)); [EOL]         assertFalse(mutNumA.equals(new Object())); [EOL]         assertFalse(mutNumA.equals("0")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]         final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.equals(mutNumB)); [EOL]         assertTrue(mutNumB.equals(mutNumA)); [EOL]         assertTrue(mutNumB.equals(mutNumB)); [EOL]         assertFalse(mutNumA.equals(mutNumC)); [EOL]         assertFalse(mutNumB.equals(mutNumC)); [EOL]         assertTrue(mutNumC.equals(mutNumC)); [EOL]         assertFalse(mutNumA.equals(mutNumD)); [EOL]         assertTrue(mutNumD.equals(mutNumD)); [EOL]          [EOL]         assertFalse(mutNumA.equals(null)); [EOL]         assertFalse(mutNumA.equals(new Object())); [EOL]         assertFalse(mutNumA.equals("0")); [EOL]     } [EOL]  [EOL]
lang3/ArrayUtils.java
@Test [EOL]     public void testToMap() { [EOL]         Map<?, ?> map = ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"hello", "world"}}); [EOL]          [EOL]         assertEquals("bar", map.get("foo")); [EOL]         assertEquals("world", map.get("hello")); [EOL]          [EOL]         assertEquals(null, ArrayUtils.toMap(null)); [EOL]         try { [EOL]             ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"short"}}); [EOL]             fail("exception expected"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, "illegal type"}); [EOL]             fail("exception expected"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, null}); [EOL]             fail("exception expected"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         map = ArrayUtils.toMap(new Object[] {new Map.Entry<Object, Object>() { [EOL]             @Override [EOL]             public Object getKey() { [EOL]                 return "foo"; [EOL]             } [EOL]             @Override [EOL]             public Object getValue() { [EOL]                 return "bar"; [EOL]             } [EOL]             @Override [EOL]             public Object setValue(final Object value) { [EOL]                 throw new UnsupportedOperationException(); [EOL]             } [EOL]             @Override [EOL]             public boolean equals(final Object o) { [EOL]                 throw new UnsupportedOperationException(); [EOL]             } [EOL]             @Override [EOL]             public int hashCode() { [EOL]                 throw new UnsupportedOperationException(); [EOL]             } [EOL]         }}); [EOL]         assertEquals("bar", map.get("foo")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNullToEmptyInt() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]         // Test valid array handling [EOL]         final int[] original = new int[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final int[] empty = new int[]{}; [EOL]         final int[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final short[] empty = new short[]{}; [EOL]         final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final short[] empty = new short[]{}; [EOL]         final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final short[] empty = new short[]{}; [EOL]         final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyDouble() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]         // Test valid array handling [EOL]         final double[] original = new double[] {1L, 2L}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final double[] empty = new double[]{}; [EOL]         final double[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyBoolean() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]         // Test valid array handling [EOL]         final boolean[] original = new boolean[] {true, false}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final boolean[] empty = new boolean[]{}; [EOL]         final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyBoolean() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]         // Test valid array handling [EOL]         final boolean[] original = new boolean[] {true, false}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final boolean[] empty = new boolean[]{}; [EOL]         final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyShortObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Short[]) null)); [EOL]         // Test valid array handling [EOL]         @SuppressWarnings("boxing") [EOL]         final [EOL]         Short[] original = new Short[] {1, 2}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Short[] empty = new Short[]{}; [EOL]         final Short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyCharObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Character[]) null)); [EOL]         // Test valid array handling [EOL]         final Character[] original = new Character[] {'a', 'b'}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Character[] empty = new Character[]{}; [EOL]         final Character[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_CHARACTER_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyByteObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Byte[]) null)); [EOL]         // Test valid array handling [EOL]         final Byte[] original = new Byte[] {0x0F, 0x0E}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Byte[] empty = new Byte[]{}; [EOL]         final Byte[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyDoubleObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]         // Test valid array handling [EOL]         final Double[] original = new Double[] {1D, 2D}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Double[] empty = new Double[]{}; [EOL]         final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testNullToEmptyDoubleObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]         // Test valid array handling [EOL]         final Double[] original = new Double[] {1D, 2D}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Double[] empty = new Double[]{}; [EOL]         final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubarrayObject() { [EOL]         final Object[] nullArray = null; [EOL]         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; [EOL]  [EOL]         assertEquals("0 start, mid end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]         assertEquals("0 start, length end", "abcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); [EOL]         assertEquals("mid start, mid end", "bcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); [EOL]         assertEquals("mid start, length end", "bcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]         assertEquals("empty array", "", [EOL]             StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); [EOL]         assertEquals("start > end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2))); [EOL]         assertEquals("start == end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3))); [EOL]         assertEquals("start undershoot, normal end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4))); [EOL]         assertEquals("start overshoot, any end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4))); [EOL]         assertEquals("normal start, end overshoot", "cdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33))); [EOL]         assertEquals("start undershoot, end overshoot", "abcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12))); [EOL]              [EOL]         // array type tests [EOL]         final Date[] dateArray = { new java.sql.Date(new Date().getTime()), [EOL]             new Date(), new Date(), new Date(), new Date() }; [EOL]  [EOL]         assertSame("Object type", Object.class, [EOL]             ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType()); [EOL]         assertSame("java.util.Date type", java.util.Date.class, [EOL]             ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]         assertNotSame("java.sql.Date type", java.sql.Date.class, [EOL]             ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             java.sql.Date[] dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3); [EOL]             fail("Invalid downcast"); [EOL]         } catch (final ClassCastException e) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayObject() { [EOL]         final Object[] nullArray = null; [EOL]         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; [EOL]  [EOL]         assertEquals("0 start, mid end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]         assertEquals("0 start, length end", "abcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); [EOL]         assertEquals("mid start, mid end", "bcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); [EOL]         assertEquals("mid start, length end", "bcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]         assertEquals("empty array", "", [EOL]             StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); [EOL]         assertEquals("start > end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 4, 2))); [EOL]         assertEquals("start == end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 3, 3))); [EOL]         assertEquals("start undershoot, normal end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, -2, 4))); [EOL]         assertEquals("start overshoot, any end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 33, 4))); [EOL]         assertEquals("normal start, end overshoot", "cdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 2, 33))); [EOL]         assertEquals("start undershoot, end overshoot", "abcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, -2, 12))); [EOL]              [EOL]         // array type tests [EOL]         final Date[] dateArray = { new java.sql.Date(new Date().getTime()), [EOL]             new Date(), new Date(), new Date(), new Date() }; [EOL]  [EOL]         assertSame("Object type", Object.class, [EOL]             ArrayUtils.subarray(objectArray, 2, 4).getClass().getComponentType()); [EOL]         assertSame("java.util.Date type", java.util.Date.class, [EOL]             ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]         assertNotSame("java.sql.Date type", java.sql.Date.class, [EOL]             ArrayUtils.subarray(dateArray, 1, 4).getClass().getComponentType()); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             java.sql.Date[] dummy = (java.sql.Date[])ArrayUtils.subarray(dateArray, 1,3); [EOL]             fail("Invalid downcast"); [EOL]         } catch (final ClassCastException e) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayShort() { [EOL]         final short[] nullArray = null; [EOL]         final short[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final short[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final short[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final short[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_SHORT_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_SHORT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("short type", short.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; [EOL]         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("char type", char.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; [EOL]         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("char type", char.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; [EOL]         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_CHAR_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_CHAR_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("char type", char.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; [EOL]         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("double type", double.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; [EOL]         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("double type", double.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; [EOL]         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_DOUBLE_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_DOUBLE_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("double type", double.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("float type", float.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("float type", float.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("float type", float.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_FLOAT_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_FLOAT_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("float type", float.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] array = { true, true, false, true, false, true }; [EOL]         final boolean[] leftSubarray  = { true, true, false, true  }; [EOL]         final boolean[] midSubarray   = { true, false, true, false }; [EOL]         final boolean[] rightSubarray = { false, true, false, true }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, array.length))); [EOL]  [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]  [EOL]         assertEquals("empty array", ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]             ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]  [EOL]         assertEquals("start > end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]             ArrayUtils.subarray(array, 4, 2)); [EOL]  [EOL]         assertEquals("start == end", ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]             ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertTrue("start undershoot, normal end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, -2, 4))); [EOL]  [EOL]         assertEquals("start overshoot, any end", [EOL]             ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]                 ArrayUtils.subarray(array, 33, 4)); [EOL]  [EOL]         assertTrue("normal start, end overshoot", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]                 ArrayUtils.subarray(array, 2, 33))); [EOL]  [EOL]         assertTrue("start undershoot, end overshoot", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, -2, 12))); [EOL]  [EOL]         // empty-return tests [EOL]  [EOL]         assertSame("empty array, object test", [EOL]             ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]                 ArrayUtils.subarray(ArrayUtils.EMPTY_BOOLEAN_ARRAY, 1, 2)); [EOL]  [EOL]         assertSame("start > end, object test", [EOL]             ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]                 ArrayUtils.subarray(array, 4, 1)); [EOL]  [EOL]         assertSame("start == end, object test", [EOL]             ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]                 ArrayUtils.subarray(array, 3, 3)); [EOL]  [EOL]         assertSame("start overshoot, any end, object test", [EOL]             ArrayUtils.EMPTY_BOOLEAN_ARRAY, [EOL]                 ArrayUtils.subarray(array, 8733, 4)); [EOL]  [EOL]         // array type tests [EOL]  [EOL]         assertSame("boolean type", boolean.class, [EOL]             ArrayUtils.subarray(array, 2, 4).getClass().getComponentType()); [EOL]  [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSameLengthInt() { [EOL]         final int[] nullArray = null; [EOL]         final int[] emptyArray = new int[0]; [EOL]         final int[] oneArray = new int[] {4}; [EOL]         final int[] twoArray = new int[] {5, 7}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSameLengthFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] emptyArray = new float[0]; [EOL]         final float[] oneArray = new float[] {2.5f}; [EOL]         final float[] twoArray = new float[] {6.4f, 5.8f}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSameLengthBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] emptyArray = new boolean[0]; [EOL]         final boolean[] oneArray = new boolean[] {true}; [EOL]         final boolean[] twoArray = new boolean[] {true, false}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSameLengthBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] emptyArray = new boolean[0]; [EOL]         final boolean[] oneArray = new boolean[] {true}; [EOL]         final boolean[] twoArray = new boolean[] {true, false}; [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(nullArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(nullArray, twoArray)); [EOL]          [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, nullArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(emptyArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(emptyArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, emptyArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(oneArray, oneArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(oneArray, twoArray)); [EOL]          [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, nullArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, emptyArray)); [EOL]         assertFalse(ArrayUtils.isSameLength(twoArray, oneArray)); [EOL]         assertTrue(ArrayUtils.isSameLength(twoArray, twoArray)); [EOL]     } [EOL]      [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str3); [EOL]         assertEquals(array[1], str2); [EOL]         assertEquals(array[2], str1); [EOL]          [EOL]         array = new Object[] {str1, str2, str3, str4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str4); [EOL]         assertEquals(array[1], str3); [EOL]         assertEquals(array[2], str2); [EOL]         assertEquals(array[3], str1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertArrayEquals(null, array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str3); [EOL]         assertEquals(array[1], str2); [EOL]         assertEquals(array[2], str1); [EOL]          [EOL]         array = new Object[] {str1, str2, str3, str4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str4); [EOL]         assertEquals(array[1], str3); [EOL]         assertEquals(array[2], str2); [EOL]         assertEquals(array[3], str1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertArrayEquals(null, array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str3); [EOL]         assertEquals(array[1], str2); [EOL]         assertEquals(array[2], str1); [EOL]          [EOL]         array = new Object[] {str1, str2, str3, str4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str4); [EOL]         assertEquals(array[1], str3); [EOL]         assertEquals(array[2], str2); [EOL]         assertEquals(array[3], str1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertArrayEquals(null, array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverseLong() { [EOL]         long[] array = new long[] {1L, 2L, 3L}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3L); [EOL]         assertEquals(array[1], 2L); [EOL]         assertEquals(array[2], 1L); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseLong() { [EOL]         long[] array = new long[] {1L, 2L, 3L}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3L); [EOL]         assertEquals(array[1], 2L); [EOL]         assertEquals(array[2], 1L); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseInt() { [EOL]         int[] array = new int[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseInt() { [EOL]         int[] array = new int[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseShort() { [EOL]         short[] array = new short[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseChar() { [EOL]         char[] array = new char[] {'a', 'f', 'C'}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 'C'); [EOL]         assertEquals(array[1], 'f'); [EOL]         assertEquals(array[2], 'a'); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseChar() { [EOL]         char[] array = new char[] {'a', 'f', 'C'}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 'C'); [EOL]         assertEquals(array[1], 'f'); [EOL]         assertEquals(array[2], 'a'); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseByte() { [EOL]         byte[] array = new byte[] {2, 3, 4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 4); [EOL]         assertEquals(array[1], 3); [EOL]         assertEquals(array[2], 2); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseByte() { [EOL]         byte[] array = new byte[] {2, 3, 4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 4); [EOL]         assertEquals(array[1], 3); [EOL]         assertEquals(array[2], 2); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseByte() { [EOL]         byte[] array = new byte[] {2, 3, 4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 4); [EOL]         assertEquals(array[1], 3); [EOL]         assertEquals(array[2], 2); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEquals(array[2], 0.3d, 0.0d); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEquals(array[2], 0.3d, 0.0d); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEquals(array[2], 0.3d, 0.0d); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEquals(array[2], 0.3f, 0.0f); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEquals(array[2], 0.3f, 0.0f); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEquals(array[2], 0.3f, 0.0f); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEquals(array[2], 0.3f, 0.0f); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testContains() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertFalse(ArrayUtils.contains(null, null)); [EOL]         assertFalse(ArrayUtils.contains(null, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "0")); [EOL]         assertTrue(ArrayUtils.contains(array, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "2")); [EOL]         assertTrue(ArrayUtils.contains(array, "3")); [EOL]         assertTrue(ArrayUtils.contains(array, null)); [EOL]         assertFalse(ArrayUtils.contains(array, "notInArray")); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertFalse(ArrayUtils.contains(null, null)); [EOL]         assertFalse(ArrayUtils.contains(null, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "0")); [EOL]         assertTrue(ArrayUtils.contains(array, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "2")); [EOL]         assertTrue(ArrayUtils.contains(array, "3")); [EOL]         assertTrue(ArrayUtils.contains(array, null)); [EOL]         assertFalse(ArrayUtils.contains(array, "notInArray")); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfLongWithStartIndex() { [EOL]         long[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]         array = new long[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(0, ArrayUtils.lastIndexOf(array, 0, 2)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, 1, 2)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, 2, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 3, -1)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99, 4)); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 0, 88)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsLong() { [EOL]         long[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 1)); [EOL]         array = new long[] { 0, 1, 2, 3, 0 }; [EOL]         assertTrue(ArrayUtils.contains(array, 0)); [EOL]         assertTrue(ArrayUtils.contains(array, 1)); [EOL]         assertTrue(ArrayUtils.contains(array, 2)); [EOL]         assertTrue(ArrayUtils.contains(array, 3)); [EOL]         assertFalse(ArrayUtils.contains(array, 99)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfIntWithStartIndex() { [EOL]         int[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 0, 2)); [EOL]         array = new int[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.indexOf(array, 0, 2)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 1, 2)); [EOL]         assertEquals(2, ArrayUtils.indexOf(array, 2, 2)); [EOL]         assertEquals(3, ArrayUtils.indexOf(array, 3, 2)); [EOL]         assertEquals(3, ArrayUtils.indexOf(array, 3, -1)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 99, 0)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 0, 6)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfInt() { [EOL]         int[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]         array = new int[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfInt() { [EOL]         int[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 0)); [EOL]         array = new int[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfShort() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfShortWithStartIndex() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(0, ArrayUtils.lastIndexOf(array, (short) 0, 2)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1, 2)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 3, -1)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0, 88)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfShort() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsShort() { [EOL]         short[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]         assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]         assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]         assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]         assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(array, 'b')); [EOL]         assertTrue(ArrayUtils.contains(array, 'c')); [EOL]         assertTrue(ArrayUtils.contains(array, 'd')); [EOL]         assertFalse(ArrayUtils.contains(array, 'e')); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfCharWithStartIndex() { [EOL]         char[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 'a', 2)); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertEquals(4, ArrayUtils.indexOf(array, 'a', 2)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 'b', 2)); [EOL]         assertEquals(2, ArrayUtils.indexOf(array, 'c', 2)); [EOL]         assertEquals(3, ArrayUtils.indexOf(array, 'd', 2)); [EOL]         assertEquals(3, ArrayUtils.indexOf(array, 'd', -1)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 'e', 0)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, 'a', 6)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(array, 'b')); [EOL]         assertTrue(ArrayUtils.contains(array, 'c')); [EOL]         assertTrue(ArrayUtils.contains(array, 'd')); [EOL]         assertFalse(ArrayUtils.contains(array, 'e')); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOfChar() { [EOL]         char[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'a')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, 'a')); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, 'b')); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, 'c')); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, 'd')); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, 'e')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(array, 'b')); [EOL]         assertTrue(ArrayUtils.contains(array, 'c')); [EOL]         assertTrue(ArrayUtils.contains(array, 'd')); [EOL]         assertFalse(ArrayUtils.contains(array, 'e')); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2, 1}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2, 1}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2, 1}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLastIndexOfByte() { [EOL]         byte[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfByte() { [EOL]         byte[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfDoubleWithStartIndexTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 2, (double) 0)); [EOL]         array = new double[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, (double) 0, 99, (double) 0.3)); [EOL]         assertEquals(0, ArrayUtils.indexOf(array, (double) 0, 0, (double) 0.3)); [EOL]         assertEquals(4, ArrayUtils.indexOf(array, (double) 0, 3, (double) 0.3)); [EOL]         assertEquals(2, ArrayUtils.indexOf(array, (double) 2.2, 0, (double) 0.35)); [EOL]         assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, 0, (double) 2.0)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, 0, (double) 0.0001)); [EOL]         assertEquals(3, ArrayUtils.indexOf(array, (double) 4.15, -1, (double) 2.0)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, (double) 1.00001324, -300, (double) 0.0001)); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testLastIndexOfDoubleWithStartIndex() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         array = new double[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88)); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testLastIndexOfDoubleTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testLastIndexOfDoubleTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testIndexOfBooleanWithStartIndex() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_char_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Character[0], (char)0)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')},  [EOL]                 Character.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null,  [EOL]                 new Character('0')}, Character.MAX_VALUE)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_char_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Character[0], (char)0)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')},  [EOL]                 Character.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null,  [EOL]                 new Character('0')}, Character.MAX_VALUE)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_long() { [EOL]          final Long[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Long[0])); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  [EOL]                  Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_long_long() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  [EOL]                  Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  [EOL]                  null, Long.valueOf(9999999)}, Long.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]     public void testToObject_long() { [EOL]         final long[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_LONG_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new long[0])); [EOL]      [EOL]         assertTrue( [EOL]             Arrays.equals( [EOL]                 new Long[] { [EOL]                     Long.valueOf(Long.MIN_VALUE), [EOL]                     Long.valueOf(Long.MAX_VALUE), [EOL]                     Long.valueOf(9999999)}, [EOL]             ArrayUtils.toObject( [EOL]                 new long[] { Long.MIN_VALUE, Long.MAX_VALUE, 9999999 }))); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for float [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]      public void testToPrimitive_int() { [EOL]          final Integer[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_int() { [EOL]          final Integer[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_int() { [EOL]          final Integer[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.toPrimitive(new Integer[0])); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_intNull() { [EOL]         final Integer[] iArray = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(iArray, Integer.MIN_VALUE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_int_int() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)},1))); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  null, Integer.valueOf(9999999)}, Integer.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]     public void testToObject_int() { [EOL]         final int[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new int[0])); [EOL]      [EOL]         assertTrue( [EOL]             Arrays.equals( [EOL]                 new Integer[] { [EOL]                     Integer.valueOf(Integer.MIN_VALUE), [EOL]                     Integer.valueOf(Integer.MAX_VALUE), [EOL]                     Integer.valueOf(9999999)}, [EOL]             ArrayUtils.toObject( [EOL]                 new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for long [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToPrimitive_short_short() { [EOL]         final Short[] s = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(s, Short.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.toPrimitive(new Short[0],  [EOL]         Short.MIN_VALUE)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999}, [EOL]             ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE),  [EOL]                 Short.valueOf(Short.MAX_VALUE), Short.valueOf((short)9999999)}, Short.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new short[] {Short.MIN_VALUE, Short.MAX_VALUE, (short)9999999}, [EOL]             ArrayUtils.toPrimitive(new Short[] {Short.valueOf(Short.MIN_VALUE), null,  [EOL]                 Short.valueOf((short)9999999)}, Short.MAX_VALUE)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_byte_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Byte[0], (byte)1)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},  [EOL]                 Byte.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null,  [EOL]                 Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_byte_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Byte[0], (byte)1)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},  [EOL]                 Byte.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null,  [EOL]                 Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToObject_byte() { [EOL]         final byte[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_OBJECT_ARRAY,  [EOL]             ArrayUtils.toObject(new byte[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)}, [EOL]                 ArrayUtils.toObject(new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE,  [EOL]                 (byte)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     // testToPrimitive/Object for short [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToObject_double() { [EOL]         final double[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new double[0])); [EOL]      [EOL]         assertTrue( [EOL]             Arrays.equals( [EOL]                 new Double[] { [EOL]                     Double.valueOf(Double.MIN_VALUE), [EOL]                     Double.valueOf(Double.MAX_VALUE), [EOL]                     Double.valueOf(9999999)}, [EOL]             ArrayUtils.toObject( [EOL]                 new double[] { Double.MIN_VALUE, Double.MAX_VALUE, 9999999 }))); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Test for {@link ArrayUtils#isEmpty(java.lang.Object[])}. [EOL]      */ [EOL]
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  [EOL]                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  [EOL]                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_float() { [EOL]          final Float[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Float[0])); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  null, Float.valueOf(9999999)}, Float.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  null, Float.valueOf(9999999)}, Float.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  null, Float.valueOf(9999999)}, Float.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  null, Float.valueOf(9999999)}, Float.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]     public void testToObject_float() { [EOL]         final float[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new float[0])); [EOL]      [EOL]         assertTrue( [EOL]             Arrays.equals( [EOL]                 new Float[] { [EOL]                     Float.valueOf(Float.MIN_VALUE), [EOL]                     Float.valueOf(Float.MAX_VALUE), [EOL]                     Float.valueOf(9999999)}, [EOL]             ArrayUtils.toObject( [EOL]                 new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for double [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToPrimitive_boolean() { [EOL]         final Boolean[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, true}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_boolean_boolean() { [EOL]         assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, true}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false)) [EOL]         ); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, false}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false)) [EOL]         ); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, true, false}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToObject_boolean() { [EOL]         final boolean[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]         assertTrue(Arrays.equals( [EOL]             new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, [EOL]             ArrayUtils.toObject(new boolean[] {true, false, true})) [EOL]         ); [EOL]     } [EOL]  [EOL]     // testToPrimitive/Object for byte [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfBooleanWithStartIndex() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNotEmptyPrimitives() { [EOL]         final long[] emptyLongArray = new long[] {}; [EOL]         final long[] notEmptyLongArray = new long[] { 1L }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((long[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]  [EOL]         final int[] emptyIntArray = new int[] {}; [EOL]         final int[] notEmptyIntArray = new int[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((int[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]  [EOL]         final short[] emptyShortArray = new short[] {}; [EOL]         final short[] notEmptyShortArray = new short[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((short[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]  [EOL]         final char[] emptyCharArray = new char[] {}; [EOL]         final char[] notEmptyCharArray = new char[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((char[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]  [EOL]         final byte[] emptyByteArray = new byte[] {}; [EOL]         final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((byte[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]  [EOL]         final double[] emptyDoubleArray = new double[] {}; [EOL]         final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((double[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]  [EOL]         final float[] emptyFloatArray = new float[] {}; [EOL]         final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((float[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]  [EOL]         final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]         final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((boolean[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL]     } [EOL]     // ------------------------------------------------------------------------ [EOL]
@Test [EOL]     public void testIsNotEmptyPrimitives() { [EOL]         final long[] emptyLongArray = new long[] {}; [EOL]         final long[] notEmptyLongArray = new long[] { 1L }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((long[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyLongArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyLongArray)); [EOL]  [EOL]         final int[] emptyIntArray = new int[] {}; [EOL]         final int[] notEmptyIntArray = new int[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((int[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyIntArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyIntArray)); [EOL]  [EOL]         final short[] emptyShortArray = new short[] {}; [EOL]         final short[] notEmptyShortArray = new short[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((short[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyShortArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyShortArray)); [EOL]  [EOL]         final char[] emptyCharArray = new char[] {}; [EOL]         final char[] notEmptyCharArray = new char[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((char[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyCharArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyCharArray)); [EOL]  [EOL]         final byte[] emptyByteArray = new byte[] {}; [EOL]         final byte[] notEmptyByteArray = new byte[] { 1 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((byte[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyByteArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyByteArray)); [EOL]  [EOL]         final double[] emptyDoubleArray = new double[] {}; [EOL]         final double[] notEmptyDoubleArray = new double[] { 1.0 }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((double[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyDoubleArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyDoubleArray)); [EOL]  [EOL]         final float[] emptyFloatArray = new float[] {}; [EOL]         final float[] notEmptyFloatArray = new float[] { 1.0F }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((float[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyFloatArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyFloatArray)); [EOL]  [EOL]         final boolean[] emptyBooleanArray = new boolean[] {}; [EOL]         final boolean[] notEmptyBooleanArray = new boolean[] { true }; [EOL]         assertFalse(ArrayUtils.isNotEmpty((boolean[])null)); [EOL]         assertFalse(ArrayUtils.isNotEmpty(emptyBooleanArray)); [EOL]         assertTrue(ArrayUtils.isNotEmpty(notEmptyBooleanArray)); [EOL]     } [EOL]     // ------------------------------------------------------------------------ [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJira567(){ [EOL]         Number[] n; [EOL]         // Valid array construction [EOL]         n = ArrayUtils.addAll(new Number[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)}); [EOL]         assertEquals(2,n.length); [EOL]         assertEquals(Number.class,n.getClass().getComponentType()); [EOL]         try { [EOL]             // Invalid - can't store Long in Integer array [EOL]                n = ArrayUtils.addAll(new Integer[]{Integer.valueOf(1)}, new Long[]{Long.valueOf(2)}); [EOL]                fail("Should have generated IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException expected) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, (String[]) null); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(ArrayUtils.EMPTY_STRING_ARRAY, ArrayUtils.EMPTY_STRING_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_STRING_ARRAY, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArrayNull = new String []{null}; [EOL]         newArray = ArrayUtils.addAll(stringArrayNull, stringArrayNull); [EOL]         assertTrue(Arrays.equals(new String[]{null, null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         // boolean [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false, false, true }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, [EOL]             ArrayUtils.addAll( null, new boolean[] { false, true } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new boolean[] { true, false }, [EOL]             ArrayUtils.addAll( new boolean[] { true, false }, null ) ) ); [EOL]  [EOL]         // char [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b', 'c', 'd' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'd' }, [EOL]             ArrayUtils.addAll( null, new char[] { 'c', 'd' } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'b' }, [EOL]             ArrayUtils.addAll( new char[] { 'a', 'b' }, null ) ) ); [EOL]  [EOL]         // byte [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1, (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 2, (byte) 3 }, [EOL]             ArrayUtils.addAll( null, new byte[] { (byte) 2, (byte) 3 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new byte[] { (byte) 0, (byte) 1 }, [EOL]             ArrayUtils.addAll( new byte[] { (byte) 0, (byte) 1 }, null ) ) ); [EOL]  [EOL]         // short [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20, (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 30, (short) 40 }, [EOL]             ArrayUtils.addAll( null, new short[] { (short) 30, (short) 40 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new short[] { (short) 10, (short) 20 }, [EOL]             ArrayUtils.addAll( new short[] { (short) 10, (short) 20 }, null ) ) ); [EOL]  [EOL]         // int [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000, -1000, -1 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { -1000, -1 }, [EOL]             ArrayUtils.addAll( null, new int[] { -1000, -1 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new int[] { 1, 1000 }, [EOL]             ArrayUtils.addAll( new int[] { 1, 1000 }, null ) ) ); [EOL]  [EOL]         // long [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L, 1000L, -1000L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1000L, -1000L }, [EOL]             ArrayUtils.addAll( null, new long[] { 1000L, -1000L } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new long[] { 1L, -1L }, [EOL]             ArrayUtils.addAll( new long[] { 1L, -1L }, null ) ) ); [EOL]  [EOL]         // float [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f, 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 1.6f, 0.01f }, [EOL]             ArrayUtils.addAll( null, new float[] { 1.6f, 0.01f } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new float[] { 10.5f, 10.1f }, [EOL]             ArrayUtils.addAll( new float[] { 10.5f, 10.1f }, null ) ) ); [EOL]  [EOL]         // double [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI, 0, 9.99 }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { 0, 9.99 }, [EOL]             ArrayUtils.addAll( null, new double[] { 0, 9.99 } ) ) ); [EOL]  [EOL]         assertTrue( Arrays.equals( new double[] { Math.PI, -Math.PI }, [EOL]             ArrayUtils.addAll( new double[] { Math.PI, -Math.PI }, null ) ) ); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayObject() { [EOL]         Object[] newArray; [EOL]  [EOL]         //show that not casting is okay [EOL]         newArray = ArrayUtils.add((Object[])null, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         //show that not casting to Object[] is okay and will assume String based on "a" [EOL]         final String[] newStringArray = ArrayUtils.add(null, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newStringArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newStringArray)); [EOL]         assertEquals(String.class, newStringArray.getClass().getComponentType()); [EOL]  [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         newArray = ArrayUtils.add(stringArray1, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         Number[] numberArray1 = new Number[]{Integer.valueOf(1), Double.valueOf(2)}; [EOL]         newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]         assertTrue(Arrays.equals(new Number[]{Integer.valueOf(1), Double.valueOf(2), Float.valueOf(3)}, newArray)); [EOL]         assertEquals(Number.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         numberArray1 = null; [EOL]         newArray = ArrayUtils.add(numberArray1, Float.valueOf(3)); [EOL]         assertTrue(Arrays.equals(new Float[]{Float.valueOf(3)}, newArray)); [EOL]         assertEquals(Float.class, newArray.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLANG571(){ [EOL]         final String[] stringArray=null; [EOL]         final String aString=null; [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String[] sa = ArrayUtils.add(stringArray, aString); [EOL]             fail("Should have caused IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException iae){ [EOL]             //expected [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String[] sa = ArrayUtils.add(stringArray, 0, aString); [EOL]             fail("Should have caused IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException iae){ [EOL]             //expected [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayChar() { [EOL]         char[] newArray; [EOL]         newArray = ArrayUtils.add((char[])null, (char)0); [EOL]         assertTrue(Arrays.equals(new char[]{0}, newArray)); [EOL]         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((char[])null, (char)1); [EOL]         assertTrue(Arrays.equals(new char[]{1}, newArray)); [EOL]         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]         final char[] array1 = new char[]{1, 2, 3}; [EOL]         newArray = ArrayUtils.add(array1, (char)0); [EOL]         assertTrue(Arrays.equals(new char[]{1, 2, 3, 0}, newArray)); [EOL]         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(array1, (char)4); [EOL]         assertTrue(Arrays.equals(new char[]{1, 2, 3, 4}, newArray)); [EOL]         assertEquals(Character.TYPE, newArray.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayDouble() { [EOL]         double[] newArray; [EOL]         newArray = ArrayUtils.add((double[])null, 0); [EOL]         assertTrue(Arrays.equals(new double[]{0}, newArray)); [EOL]         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((double[])null, 1); [EOL]         assertTrue(Arrays.equals(new double[]{1}, newArray)); [EOL]         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]         final double[] array1 = new double[]{1, 2, 3}; [EOL]         newArray = ArrayUtils.add(array1, 0); [EOL]         assertTrue(Arrays.equals(new double[]{1, 2, 3, 0}, newArray)); [EOL]         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(array1, 4); [EOL]         assertTrue(Arrays.equals(new double[]{1, 2, 3, 4}, newArray)); [EOL]         assertEquals(Double.TYPE, newArray.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayFloat() { [EOL]         float[] newArray; [EOL]         newArray = ArrayUtils.add((float[])null, 0); [EOL]         assertTrue(Arrays.equals(new float[]{0}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((float[])null, 1); [EOL]         assertTrue(Arrays.equals(new float[]{1}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         final float[] array1 = new float[]{1, 2, 3}; [EOL]         newArray = ArrayUtils.add(array1, 0); [EOL]         assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(array1, 4); [EOL]         assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayShort() { [EOL]         short[] newArray; [EOL]         newArray = ArrayUtils.add((short[])null, (short)0); [EOL]         assertTrue(Arrays.equals(new short[]{0}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((short[])null, (short)1); [EOL]         assertTrue(Arrays.equals(new short[]{1}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         final short[] array1 = new short[]{1, 2, 3}; [EOL]         newArray = ArrayUtils.add(array1, (short)0); [EOL]         assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(array1, (short)4); [EOL]         assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, "d"); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "d"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]  [EOL]         final Object[] o = new Object[] {"1", "2", "4"}; [EOL]         final Object[] result = ArrayUtils.add(o, 2, "3"); [EOL]         final Object[] result2 = ArrayUtils.add(o, 3, "5"); [EOL]  [EOL]         assertNotNull(result); [EOL]         assertEquals(4, result.length); [EOL]         assertEquals("1", result[0]); [EOL]         assertEquals("2", result[1]); [EOL]         assertEquals("3", result[2]); [EOL]         assertEquals("4", result[3]); [EOL]         assertNotNull(result2); [EOL]         assertEquals(4, result2.length); [EOL]         assertEquals("1", result2[0]); [EOL]         assertEquals("2", result2[1]); [EOL]         assertEquals("4", result2[2]); [EOL]         assertEquals("5", result2[3]); [EOL]  [EOL]         // boolean tests [EOL]         boolean[] booleanArray = ArrayUtils.add( null, 0, true ); [EOL]         assertTrue( Arrays.equals( new boolean[] { true }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( null, -1, true ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true }, 0, false); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { false, true }, booleanArray ) ); [EOL]         booleanArray = ArrayUtils.add( new boolean[] { true, false }, 1, true); [EOL]         assertTrue( Arrays.equals( new boolean[] { true, true, false }, booleanArray ) ); [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, 4, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             booleanArray = ArrayUtils.add( new boolean[] { true, false }, -1, true); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // char tests [EOL]         char[] charArray = ArrayUtils.add( (char[]) null, 0, 'a' ); [EOL]         assertTrue( Arrays.equals( new char[] { 'a' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( (char[]) null, -1, 'a' ); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         charArray = ArrayUtils.add( new char[] { 'a' }, 0, 'b'); [EOL]         assertTrue( Arrays.equals( new char[] { 'b', 'a' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 0, 'c'); [EOL]         assertTrue( Arrays.equals( new char[] { 'c', 'a', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 1, 'k'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 'k', 'b' }, charArray ) ); [EOL]         charArray = ArrayUtils.add( new char[] { 'a', 'b', 'c' }, 1, 't'); [EOL]         assertTrue( Arrays.equals( new char[] { 'a', 't', 'b', 'c' }, charArray ) ); [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, 4, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             charArray = ArrayUtils.add( new char[] { 'a', 'b' }, -1, 'c'); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // short tests [EOL]         short[] shortArray = ArrayUtils.add( new short[] { 1 }, 0, (short) 2); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 1 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( (short[]) null, -1, (short) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 2, (short) 10); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 10 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6 }, 0, (short) -4); [EOL]         assertTrue( Arrays.equals( new short[] { -4, 2, 6 }, shortArray ) ); [EOL]         shortArray = ArrayUtils.add( new short[] { 2, 6, 3 }, 2, (short) 1); [EOL]         assertTrue( Arrays.equals( new short[] { 2, 6, 1, 3 }, shortArray ) ); [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, 4, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             shortArray = ArrayUtils.add( new short[] { 2, 6 }, -1, (short) 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // byte tests [EOL]         byte[] byteArray = ArrayUtils.add( new byte[] { 1 }, 0, (byte) 2); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 1 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( (byte[]) null, -1, (byte) 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 2, (byte) 3); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 3 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 0, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 1, 2, 6 }, byteArray ) ); [EOL]         byteArray = ArrayUtils.add( new byte[] { 2, 6, 3 }, 2, (byte) 1); [EOL]         assertTrue( Arrays.equals( new byte[] { 2, 6, 1, 3 }, byteArray ) ); [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, 4, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             byteArray = ArrayUtils.add( new byte[] { 2, 6 }, -1, (byte) 3); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // int tests [EOL]         int[] intArray = ArrayUtils.add( new int[] { 1 }, 0, 2); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 1 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( (int[]) null, -1, 2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 2, 10); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 10 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6 }, 0, -4); [EOL]         assertTrue( Arrays.equals( new int[] { -4, 2, 6 }, intArray ) ); [EOL]         intArray = ArrayUtils.add( new int[] { 2, 6, 3 }, 2, 1); [EOL]         assertTrue( Arrays.equals( new int[] { 2, 6, 1, 3 }, intArray ) ); [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, 4, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             intArray = ArrayUtils.add( new int[] { 2, 6 }, -1, 10); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // long tests [EOL]         long[] longArray = ArrayUtils.add( new long[] { 1L }, 0, 2L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 1L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( (long[]) null, -1, 2L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 2, 10L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 10L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L }, 0, -4L); [EOL]         assertTrue( Arrays.equals( new long[] { -4L, 2L, 6L }, longArray ) ); [EOL]         longArray = ArrayUtils.add( new long[] { 2L, 6L, 3L }, 2, 1L); [EOL]         assertTrue( Arrays.equals( new long[] { 2L, 6L, 1L, 3L }, longArray ) ); [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, 4, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             longArray = ArrayUtils.add( new long[] { 2L, 6L }, -1, 10L); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // float tests [EOL]         float[] floatArray = ArrayUtils.add( new float[] { 1.1f }, 0, 2.2f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.2f, 1.1f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( (float[]) null, -1, 2.2f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 2, 10.5f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.3f, 6.4f, 10.5f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.6f, 6.7f }, 0, -4.8f); [EOL]         assertTrue( Arrays.equals( new float[] { -4.8f, 2.6f, 6.7f }, floatArray ) ); [EOL]         floatArray = ArrayUtils.add( new float[] { 2.9f, 6.0f, 0.3f }, 2, 1.0f); [EOL]         assertTrue( Arrays.equals( new float[] { 2.9f, 6.0f, 1.0f, 0.3f }, floatArray ) ); [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, 4, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             floatArray = ArrayUtils.add( new float[] { 2.3f, 6.4f }, -1, 10.5f); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]  [EOL]         // double tests [EOL]         double[] doubleArray = ArrayUtils.add( new double[] { 1.1 }, 0, 2.2); [EOL]         assertTrue( Arrays.equals( new double[] { 2.2, 1.1 }, doubleArray ) ); [EOL]         try { [EOL]           doubleArray = ArrayUtils.add( (double[]) null, -1, 2.2); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 0", e.getMessage()); [EOL]         } [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 2, 10.5); [EOL]         assertTrue( Arrays.equals( new double[] { 2.3, 6.4, 10.5 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.6, 6.7 }, 0, -4.8); [EOL]         assertTrue( Arrays.equals( new double[] { -4.8, 2.6, 6.7 }, doubleArray ) ); [EOL]         doubleArray = ArrayUtils.add( new double[] { 2.9, 6.0, 0.3 }, 2, 1.0); [EOL]         assertTrue( Arrays.equals( new double[] { 2.9, 6.0, 1.0, 0.3 }, doubleArray ) ); [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, 4, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: 4, Length: 2", e.getMessage()); [EOL]         } [EOL]         try { [EOL]             doubleArray = ArrayUtils.add( new double[] { 2.3, 6.4 }, -1, 10.5); [EOL]         } catch(final IndexOutOfBoundsException e) { [EOL]             assertEquals("Index: -1, Length: 2", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testRemoveElementObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new Object[] {"a"}, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new Object[] {"a", "b"}, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] {"b"}, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new Object[] {"a", "b", "a"}, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] {"b", "a"}, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElement((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new boolean[] {true}, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new boolean[] {true, false}, true); [EOL]         assertTrue(Arrays.equals(new boolean[] {false}, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new boolean[] {true, false, true}, true); [EOL]         assertTrue(Arrays.equals(new boolean[] {false, true}, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElement((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new char[] {'a'}, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new char[] {'a', 'b'}, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] {'b'}, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new char[] {'a', 'b', 'a'}, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] {'b', 'a'}, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElement((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new float[] {1}, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new float[] {1, 2}, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] {2}, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new float[] {1, 2, 1}, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] {2, 1}, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElement((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new int[] {1}, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new int[] {1, 2}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {2}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new int[] {1, 2, 1}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {2, 1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.remove(new int[] {1}, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 0); [EOL]         assertTrue(Arrays.equals(new int[] {2}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2, 1}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1, 1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         try { [EOL]             ArrayUtils.remove(new int[] {1, 2}, -1); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]         try { [EOL]             ArrayUtils.remove(new int[] {1, 2}, 2); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]         try { [EOL]             ArrayUtils.remove((int[]) null, 0); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.remove(new int[] {1}, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 0); [EOL]         assertTrue(Arrays.equals(new int[] {2}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2, 1}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1, 1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         try { [EOL]             ArrayUtils.remove(new int[] {1, 2}, -1); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]         try { [EOL]             ArrayUtils.remove(new int[] {1, 2}, 2); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]         try { [EOL]             ArrayUtils.remove((int[]) null, 0); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]         assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]         assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a", "b"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a", "b"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a", "b"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a", "c"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "b"); [EOL]         assertTrue(Arrays.equals(new Object[] { "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a", "a", "a", "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1, (byte) 2); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1, (byte) 1, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1, (byte) 2); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 2); [EOL]         assertTrue(Arrays.equals(new byte[] { 1 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1, (byte) 1, (byte) 1, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 2); [EOL]         assertTrue(Arrays.equals(new short[] { 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1, (short) 1, (short) 1, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1, 1, 1, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a', 'b'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a', 'b'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a', 'b'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a', 'b'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'b'); [EOL]         assertTrue(Arrays.equals(new char[] { 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a', 'a', 'a', 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 2); [EOL]         assertTrue(Arrays.equals(new float[] { 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1, (float) 1, (float) 1, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1, (double) 2); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 2); [EOL]         assertTrue(Arrays.equals(new double[] { 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1, (double) 1, (double) 1, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllBooleanArrayNegativeIndex() { [EOL]         ArrayUtils.removeAll(new boolean[] { true, false }, -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true, false); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false); [EOL]         assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true, false); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false); [EOL]         assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true, false); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false); [EOL]         assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true, false); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, false); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, false); [EOL]         assertTrue(Arrays.equals(new boolean[] { true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true, true, true, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveAllIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 3 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 1, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]         assertTrue(Arrays.equals(new int[] { 1, 3, 5 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 4 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]         assertTrue(Arrays.equals(new int[] { 1, 3, 5, 7 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 4, 6 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveAllIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 3 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 1, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3 }, 0, 2); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 1, 3); [EOL]         assertTrue(Arrays.equals(new int[] { 1, 3, 5 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5 }, 0, 2, 4); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 4 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 1, 3, 5); [EOL]         assertTrue(Arrays.equals(new int[] { 1, 3, 5, 7 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 3, 4, 5, 6, 7 }, 0, 2, 4, 6); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 4, 6 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 2); [EOL]         assertTrue(Arrays.equals(new long[] { 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1, (long) 1, (long) 1, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
lang3/exception/ExceptionUtils.java
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]         assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]  [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]          [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetCause_ThrowableArray() { [EOL]         assertSame(null, ExceptionUtils.getCause(null, null)); [EOL]         assertSame(null, ExceptionUtils.getCause(null, new String[0])); [EOL]  [EOL]         // not known type, so match on supplied method names [EOL]         assertSame(nested, ExceptionUtils.getCause(withCause, null));  // default names [EOL]         assertSame(null, ExceptionUtils.getCause(withCause, new String[0])); [EOL]         assertSame(null, ExceptionUtils.getCause(withCause, new String[] {null})); [EOL]         assertSame(nested, ExceptionUtils.getCause(withCause, new String[] {"getCause"})); [EOL]          [EOL]         // not known type, so match on supplied method names [EOL]         assertSame(null, ExceptionUtils.getCause(withoutCause, null)); [EOL]         assertSame(null, ExceptionUtils.getCause(withoutCause, new String[0])); [EOL]         assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {null})); [EOL]         assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {"getCause"})); [EOL]         assertSame(null, ExceptionUtils.getCause(withoutCause, new String[] {"getTargetException"})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetThrowableList_Throwable_recursiveCause() { [EOL]         final List<?> throwables = ExceptionUtils.getThrowableList(cyclicCause); [EOL]         assertEquals(3, throwables.size()); [EOL]         assertSame(cyclicCause, throwables.get(0)); [EOL]         assertSame(cyclicCause.getCause(), throwables.get(1)); [EOL]         assertSame(((ExceptionWithCause) cyclicCause.getCause()).getCause(), throwables.get(2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]         assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]  [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]          [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOf_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]         assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]  [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(withCause, NestableException.class, 0)); [EOL]         assertEquals(2, ExceptionUtils.indexOfType(withCause, ExceptionWithoutCause.class, 0)); [EOL]  [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, -1)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 1)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 9)); [EOL]          [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, Exception.class, 0)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOf_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfThrowable(withCause, NestableException.class, 0)); [EOL]         assertEquals(2, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithoutCause.class, 0)); [EOL]  [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, -1)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 1)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 9)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, Exception.class, 0)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_Throwable() throws Exception { [EOL]         ExceptionUtils.printRootCauseStackTrace(null); [EOL]         // could pipe system.err to a known stream, but not much point as [EOL]         // internally this method calls stram method anyway [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]         stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) == -1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getRootCauseMessage_Throwable() { [EOL]         Throwable th = null; [EOL]         assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]          [EOL]         th = new IllegalArgumentException("Base"); [EOL]         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]          [EOL]         th = new ExceptionWithCause("Wrapper", th); [EOL]         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Provides a method with a well known chained/nested exception [EOL]      * name which matches the full signature (e.g. has a return value [EOL]      * of <code>Throwable</code>. [EOL]      */ [EOL]     private static class ExceptionWithCause extends Exception { [EOL]         private Throwable cause; [EOL]  [EOL]         public ExceptionWithCause(final String str, final Throwable cause) { [EOL]             super(str); [EOL]             setCause(cause); [EOL]         } [EOL]  [EOL]         public ExceptionWithCause(final Throwable cause) { [EOL]             super(); [EOL]             setCause(cause); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public Throwable getCause() { [EOL]             return cause; [EOL]         } [EOL]  [EOL]         public void setCause(final Throwable cause) { [EOL]             this.cause = cause; [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Provides a method with a well known chained/nested exception [EOL]      * name which does not match the full signature (e.g. lacks a [EOL]      * return value of <code>Throwable</code>. [EOL]      */ [EOL]     private static class ExceptionWithoutCause extends Exception { [EOL]         @SuppressWarnings("unused") [EOL]         public void getTargetException() { [EOL]         } [EOL]     } [EOL]  [EOL]     // Temporary classes to allow the nested exception code to be removed  [EOL]     // prior to a rewrite of this test class.  [EOL]     private static class NestableException extends Exception {  [EOL]         @SuppressWarnings("unused") [EOL]         public NestableException() { super(); } [EOL]         public NestableException(final Throwable t) { super(t); } [EOL]     } [EOL]  [EOL] } [EOL]
lang3/reflect/MemberUtils.java
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.BYTE_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.LONG_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.DOUBLE_ONE).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(String.class), singletonArray(String.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Object.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ParentObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ChildObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ParentObject.class), singletonArray(GrandParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ChildObject.class), singletonArray(ChildInterface.class)); [EOL]     } [EOL]  [EOL]
lang3/text/translate/JavaUnicodeEscaper.java
@Test [EOL]     public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 [EOL]     } [EOL]      [EOL]
lang3/text/StrSubstitutor.java
@Test [EOL]     public void testSubstituteDefaultProperties(){ [EOL]         final String org = "${doesnotwork}"; [EOL]         System.setProperty("doesnotwork", "It works!"); [EOL]  [EOL]         // create a new Properties object with the System.getProperties as default [EOL]         final Properties props = new Properties(System.getProperties()); [EOL]  [EOL]         assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubstituteDefaultProperties(){ [EOL]         final String org = "${doesnotwork}"; [EOL]         System.setProperty("doesnotwork", "It works!"); [EOL]  [EOL]         // create a new Properties object with the System.getProperties as default [EOL]         final Properties props = new Properties(System.getProperties()); [EOL]  [EOL]         assertEquals("It works!", StrSubstitutor.replace(org, props)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceNull() { [EOL]         doTestNoReplace(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests replace with null. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceNull() { [EOL]         doTestNoReplace(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests replace with null. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceNull() { [EOL]         doTestNoReplace(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests replace with null. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testConstructorMapPrefixSuffix() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         final StrSubstitutor sub = new StrSubstitutor(map, "<", ">"); [EOL]         assertEquals("Hi < commons", sub.replace("Hi $< <name>")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests constructor. [EOL]      */ [EOL]
@Test [EOL]     public void testConstructorMapPrefixSuffix() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         final StrSubstitutor sub = new StrSubstitutor(map, "<", ">"); [EOL]         assertEquals("Hi < commons", sub.replace("Hi $< <name>")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests constructor. [EOL]      */ [EOL]
@Test [EOL]     public void testReplaceInVariable() { [EOL]         values.put("animal.1", "fox"); [EOL]         values.put("animal.2", "mouse"); [EOL]         values.put("species", "2"); [EOL]         final StrSubstitutor sub = new StrSubstitutor(values); [EOL]         sub.setEnableSubstitutionInVariables(true); [EOL]         assertEquals( [EOL]                 "Wrong result (1)", [EOL]                 "The mouse jumps over the lazy dog.", [EOL]                 sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL]         values.put("species", "1"); [EOL]         assertEquals( [EOL]                 "Wrong result (2)", [EOL]                 "The fox jumps over the lazy dog.", [EOL]                 sub.replace("The ${animal.${species}} jumps over the ${target}.")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether substitution in variable names is disabled per default. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testConstructorNoArgs() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertEquals("Hi ${name}", sub.replace("Hi ${name}")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests constructor. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testGetSetPrefix() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         sub.setVariablePrefix('<'); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]  [EOL]         sub.setVariablePrefix("<<"); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         try { [EOL]             sub.setVariablePrefix((String) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]  [EOL]         final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]         sub.setVariablePrefixMatcher(matcher); [EOL]         assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]         try { [EOL]             sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests get set. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testGetSetPrefix() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         sub.setVariablePrefix('<'); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]  [EOL]         sub.setVariablePrefix("<<"); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         try { [EOL]             sub.setVariablePrefix((String) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]  [EOL]         final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]         sub.setVariablePrefixMatcher(matcher); [EOL]         assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]         try { [EOL]             sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests get set. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testGetSetSuffix() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         sub.setVariableSuffix('<'); [EOL]         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.CharMatcher); [EOL]  [EOL]         sub.setVariableSuffix("<<"); [EOL]         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         try { [EOL]             sub.setVariableSuffix((String) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertTrue(sub.getVariableSuffixMatcher() instanceof StrMatcher.StringMatcher); [EOL]  [EOL]         final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]         sub.setVariableSuffixMatcher(matcher); [EOL]         assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]         try { [EOL]             sub.setVariableSuffixMatcher((StrMatcher) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertSame(matcher, sub.getVariableSuffixMatcher()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
lang3/builder/CompareToBuilder.java
@Test [EOL]     public void testReflectionCompare() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]         o2.setA(5); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionCompare() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]         o2.setA(5); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]         o2.setA(5); [EOL]         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]         assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]         o2.setA(5); [EOL]         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]         assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]         o2.setA(5); [EOL]         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]         assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final int[] array3 = new int[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         final short[][] array3 = new short[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (short)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (short)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (short)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectArrayHiddenByObject() { [EOL]         final TestObject[] array1 = new TestObject[2]; [EOL]         array1[0] = new TestObject(4); [EOL]         array1[1] = new TestObject(5); [EOL]         final TestObject[] array2 = new TestObject[2]; [EOL]         array2[0] = new TestObject(4); [EOL]         array2[1] = new TestObject(5); [EOL]         final TestObject[] array3 = new TestObject[3]; [EOL]         array3[0] = new TestObject(4); [EOL]         array3[1] = new TestObject(5); [EOL]         array3[2] = new TestObject(6); [EOL]          [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = new TestObject(7); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectComparator() { [EOL]         final String o1 = "Fred"; [EOL]         String o2 = "Fred"; [EOL]         assertTrue(new CompareToBuilder().append(o1, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]         o2 = "FRED"; [EOL]         assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]         o2 = "FREDA"; [EOL]         assertTrue(new CompareToBuilder().append(o1, o2, String.CASE_INSENSITIVE_ORDER).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1, String.CASE_INSENSITIVE_ORDER).toComparison() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(o1, null, String.CASE_INSENSITIVE_ORDER).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((Object) null, (Object) null, String.CASE_INSENSITIVE_ORDER).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, o1, String.CASE_INSENSITIVE_ORDER).toComparison() < 0); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final int[] array3 = new int[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [EOL]         final boolean[] array3 = new boolean[3]; [EOL]         array3[0] = true; [EOL]         array3[1] = false; [EOL]         array3[2] = true; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = true; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]    [EOL]  } [EOL]
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [EOL]         final boolean[] array3 = new boolean[3]; [EOL]         array3[0] = true; [EOL]         array3[1] = false; [EOL]         array3[2] = true; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = true; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]    [EOL]  } [EOL]
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [EOL]         final boolean[] array3 = new boolean[3]; [EOL]         array3[0] = true; [EOL]         array3[1] = false; [EOL]         array3[2] = true; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = true; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]    [EOL]  } [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArray() { [EOL]         final long[] obj1 = new long[2]; [EOL]         obj1[0] = 5L; [EOL]         obj1[1] = 6L; [EOL]         final long[] obj2 = new long[2]; [EOL]         obj2[0] = 5L; [EOL]         obj2[1] = 6L; [EOL]         final long[] obj3 = new long[3]; [EOL]         obj3[0] = 5L; [EOL]         obj3[1] = 6L; [EOL]         obj3[2] = 7L; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((long[]) null, (long[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         final int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final int[] obj3 = new int[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((int[]) null, (int[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final int[] array3 = new int[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final int[] array3 = new int[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final int[] array3 = new int[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         final short[] obj1 = new short[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final short[] obj2 = new short[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final short[] obj3 = new short[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         final short[] obj1 = new short[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final short[] obj2 = new short[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final short[] obj3 = new short[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((short[]) null, (short[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         final char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final char[] obj3 = new char[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((char[]) null, (char[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(array3, array1).toComparison() > 0); [EOL]         array1[1][1] = 200; [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(array2, array1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArray() { [EOL]         final byte[] obj1 = new byte[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final byte[] obj2 = new byte[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final byte[] obj3 = new byte[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((byte[]) null, (byte[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         final float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final float[] obj3 = new float[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((float[]) null, (float[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArrayHiddenByObject() { [EOL]         final float[] array1 = new float[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final float[] array2 = new float[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final float[] array3 = new float[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArray() { [EOL]         final boolean[] obj1 = new boolean[2]; [EOL]         obj1[0] = true; [EOL]         obj1[1] = false; [EOL]         final boolean[] obj2 = new boolean[2]; [EOL]         obj2[0] = true; [EOL]         obj2[1] = false; [EOL]         final boolean[] obj3 = new boolean[3]; [EOL]         obj3[0] = true; [EOL]         obj3[1] = false; [EOL]         obj3[2] = true; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = true; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append((boolean[]) null, (boolean[]) null).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(null, obj1).toComparison() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [EOL]         final boolean[] array3 = new boolean[3]; [EOL]         array3[0] = true; [EOL]         array3[1] = false; [EOL]         array3[2] = true; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = true; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]     } [EOL]    [EOL]  } [EOL]
lang3/SerializationUtils.java
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertTrue(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]         assertEquals(iString, testMap.get("FOO")); [EOL]         assertTrue(iString != testMap.get("FOO")); [EOL]         assertEquals(iInteger, testMap.get("BAR")); [EOL]         assertTrue(iInteger != testMap.get("BAR")); [EOL]         assertEquals(iMap, testMap); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertTrue(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]         assertEquals(iString, testMap.get("FOO")); [EOL]         assertTrue(iString != testMap.get("FOO")); [EOL]         assertEquals(iInteger, testMap.get("BAR")); [EOL]         assertTrue(iInteger != testMap.get("BAR")); [EOL]         assertEquals(iMap, testMap); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]             return; [EOL]         } [EOL]         fail(); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]             return; [EOL]         } [EOL]         fail(); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]             return; [EOL]         } [EOL]         fail(); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeserializeStreamClassNotFound() throws Exception { [EOL]         final ByteArrayOutputStream streamReal = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream oos = new ObjectOutputStream(streamReal); [EOL]         oos.writeObject(new ClassNotFoundSerialization()); [EOL]         oos.flush(); [EOL]         oos.close(); [EOL]  [EOL]         final ByteArrayInputStream inTest = new ByteArrayInputStream(streamReal.toByteArray()); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             Object test = SerializationUtils.deserialize(inTest); [EOL]         } catch(final SerializationException se) { [EOL]             assertEquals("java.lang.ClassNotFoundException: " + CLASS_NOT_FOUND_MESSAGE, se.getMessage()); [EOL]         } [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]  [EOL]
@Test [EOL]     public void testClone() throws Exception { [EOL]         final Object test = SerializationUtils.clone(iMap); [EOL]         assertNotNull(test); [EOL]         assertTrue(test instanceof HashMap<?,?>); [EOL]         assertTrue(test != iMap); [EOL]         final HashMap<?, ?> testMap = (HashMap<?, ?>) test; [EOL]         assertEquals(iString, testMap.get("FOO")); [EOL]         assertTrue(iString != testMap.get("FOO")); [EOL]         assertEquals(iInteger, testMap.get("BAR")); [EOL]         assertTrue(iInteger != testMap.get("BAR")); [EOL]         assertEquals(iMap, testMap); [EOL]     } [EOL]  [EOL]
lang3/time/DateFormatUtils.java
@Test [EOL]     public void testSMTP(){ [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2003,5,8,10,11,12); [EOL]         String text = DateFormatUtils.format(cal.getTime(),  [EOL]                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, [EOL]                         DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]         assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime(),  [EOL]                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), timeZone, [EOL]                         DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]         assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]         text = DateFormatUtils.SMTP_DATETIME_FORMAT.format(cal); [EOL]         assertEquals("Sun, 08 Jun 2003 10:11:12 -0300", text); [EOL]          [EOL]         // format UTC [EOL]         text = DateFormatUtils.formatUTC(cal.getTime().getTime(),  [EOL]                         DateFormatUtils.SMTP_DATETIME_FORMAT.getPattern(), [EOL]                         DateFormatUtils.SMTP_DATETIME_FORMAT.getLocale()); [EOL]         assertEquals("Sun, 08 Jun 2003 13:11:12 +0000", text); [EOL]     } [EOL]  [EOL]     /* [EOL]     public void testLang312() { [EOL]         String pattern = "dd/MM/yyyy"; [EOL]         String expected = "19/04/1948"; [EOL]         TimeZone timeZone = TimeZone.getTimeZone("CET"); [EOL]         Locale locale = Locale.GERMANY; [EOL]  [EOL]         // show Calendar is good [EOL]         Calendar cal = Calendar.getInstance(timeZone, locale); [EOL]         cal.set(1948, 3, 19); [EOL]         assertEquals(expected, DateFormatUtils.format( cal.getTime(), pattern, timeZone, locale ) ); [EOL]  [EOL]         Date date = new Date(48, 3, 19); [EOL]  [EOL]         // test JDK [EOL]         java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(pattern, locale); [EOL]         sdf.setTimeZone(timeZone); [EOL] // There's nothing we can do if the JDK fails, so just going to pring a warning in this case [EOL] //        assertEquals(expected, sdf.format( date ) ); [EOL]         if( ! expected.equals( sdf.format( date ) ) ) { [EOL]             System.out.println("WARNING: JDK test failed - testLang312()"); [EOL]         } [EOL]  [EOL]         // test Commons [EOL]         assertEquals(expected, DateFormatUtils.format( date, pattern, timeZone, locale ) ); [EOL]     } [EOL]     */ [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testFormatCalendar() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [EOL]         final int month = c.get(Calendar.MONTH) + 1; [EOL]         final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]         final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]         buffer.append (year); [EOL]         buffer.append(month); [EOL]         buffer.append(day); [EOL]         buffer.append(hour); [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeISO(){ [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002,1,23,10,11,12); [EOL]         String text = DateFormatUtils.format(cal.getTime(),  [EOL]                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime(),  [EOL]                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12", text); [EOL]         text = DateFormatUtils.ISO_TIME_FORMAT.format(cal); [EOL]         assertEquals("T10:11:12", text); [EOL]          [EOL]         text = DateFormatUtils.format(cal.getTime(),  [EOL]                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime(),  [EOL]                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]         text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [EOL]         final int month = c.get(Calendar.MONTH) + 1; [EOL]         final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]         final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]         buffer.append (year); [EOL]         buffer.append(month); [EOL]         buffer.append(day); [EOL]         buffer.append(hour); [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH", Locale.US)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testFormatCalendar() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [EOL]         final int month = c.get(Calendar.MONTH) + 1; [EOL]         final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]         final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]         buffer.append (year); [EOL]         buffer.append(month); [EOL]         buffer.append(day); [EOL]         buffer.append(hour); [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c, "yyyyMdH", Locale.US)); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeISO(){ [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002,1,23,10,11,12); [EOL]         String text = DateFormatUtils.format(cal.getTime(),  [EOL]                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime(),  [EOL]                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12", text); [EOL]         text = DateFormatUtils.ISO_TIME_FORMAT.format(cal); [EOL]         assertEquals("T10:11:12", text); [EOL]          [EOL]         text = DateFormatUtils.format(cal.getTime(),  [EOL]                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime(),  [EOL]                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]         text = DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.format(cal); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]     } [EOL]  [EOL]
lang3/text/translate/CodePointTranslator.java
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL]  [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL]  [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL]  [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSupplementary() { [EOL]         final NumericEntityEscaper nee = new NumericEntityEscaper(); [EOL]         final String input = "\uD803\uDC22"; [EOL]         final String expected = "&#68642;"; [EOL]  [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities supplementary characters", expected, result); [EOL]  [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAbove() { [EOL]         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL]     } [EOL]  [EOL]     // See LANG-617 [EOL]
lang3/concurrent/ConcurrentRuntimeException.java
lang3/time/DateUtils.java
@Test [EOL]     public void testIsSameDay_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]         try { [EOL]             DateUtils.isSameDay((Date) null, (Date) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsSameInstant_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]         try { [EOL]             DateUtils.isSameInstant((Date) null, (Date) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsSameInstant_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameInstant(date1, date2)); [EOL]         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameInstant(date1, date2)); [EOL]         try { [EOL]             DateUtils.isSameInstant((Date) null, (Date) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsSameLocalTime_Cal() { [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]         cal1.set(2004, 6, 9, 13, 45, 0); [EOL]         cal1.set(Calendar.MILLISECOND, 0); [EOL]         cal2.set(2004, 6, 9, 13, 45, 0); [EOL]         cal2.set(Calendar.MILLISECOND, 0); [EOL]         assertTrue(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]  [EOL]         final Calendar cal3 = Calendar.getInstance(); [EOL]         final Calendar cal4 = Calendar.getInstance(); [EOL]         cal3.set(2004, 6, 9, 4,  0, 0); [EOL]         cal4.set(2004, 6, 9, 16, 0, 0); [EOL]         cal3.set(Calendar.MILLISECOND, 0); [EOL]         cal4.set(Calendar.MILLISECOND, 0); [EOL]         assertFalse("LANG-677", DateUtils.isSameLocalTime(cal3, cal4)); [EOL]          [EOL]         cal2.set(2004, 6, 9, 11, 45, 0); [EOL]         assertFalse(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]         try { [EOL]             DateUtils.isSameLocalTime((Calendar) null, (Calendar) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsSameLocalTime_Cal() { [EOL]         final GregorianCalendar cal1 = new GregorianCalendar(TimeZone.getTimeZone("GMT+1")); [EOL]         final GregorianCalendar cal2 = new GregorianCalendar(TimeZone.getTimeZone("GMT-1")); [EOL]         cal1.set(2004, 6, 9, 13, 45, 0); [EOL]         cal1.set(Calendar.MILLISECOND, 0); [EOL]         cal2.set(2004, 6, 9, 13, 45, 0); [EOL]         cal2.set(Calendar.MILLISECOND, 0); [EOL]         assertTrue(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]  [EOL]         final Calendar cal3 = Calendar.getInstance(); [EOL]         final Calendar cal4 = Calendar.getInstance(); [EOL]         cal3.set(2004, 6, 9, 4,  0, 0); [EOL]         cal4.set(2004, 6, 9, 16, 0, 0); [EOL]         cal3.set(Calendar.MILLISECOND, 0); [EOL]         cal4.set(Calendar.MILLISECOND, 0); [EOL]         assertFalse("LANG-677", DateUtils.isSameLocalTime(cal3, cal4)); [EOL]          [EOL]         cal2.set(2004, 6, 9, 11, 45, 0); [EOL]         assertFalse(DateUtils.isSameLocalTime(cal1, cal2)); [EOL]         try { [EOL]             DateUtils.isSameLocalTime((Calendar) null, (Calendar) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testParseDateWithLeniency() throws Exception { [EOL]         final GregorianCalendar cal = new GregorianCalendar(1998, 6, 30); [EOL]         final String dateStr = "02 942, 1996"; [EOL]         final String[] parsers = new String[] {"MM DDD, yyyy"}; [EOL]          [EOL]         Date date = DateUtils.parseDate(dateStr, parsers); [EOL]         assertEquals(cal.getTime(), date); [EOL]          [EOL]         try { [EOL]             date = DateUtils.parseDateStrictly(dateStr, parsers); [EOL]             fail(); [EOL]         } catch (final ParseException ex) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testParseDateWithLeniency() throws Exception { [EOL]         final GregorianCalendar cal = new GregorianCalendar(1998, 6, 30); [EOL]         final String dateStr = "02 942, 1996"; [EOL]         final String[] parsers = new String[] {"MM DDD, yyyy"}; [EOL]          [EOL]         Date date = DateUtils.parseDate(dateStr, parsers); [EOL]         assertEquals(cal.getTime(), date); [EOL]          [EOL]         try { [EOL]             date = DateUtils.parseDateStrictly(dateStr, parsers); [EOL]             fail(); [EOL]         } catch (final ParseException ex) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test [EOL]     public void testAddYears() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addYears(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addYears(base, 1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2001, 6, 5, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addYears(base, -1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 1999, 6, 5, 4, 3, 2, 1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAddDays() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addDays(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addDays(base, 1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 6, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addDays(base, -1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 4, 4, 3, 2, 1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAddHours() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addHours(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addHours(base, 1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 5, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addHours(base, -1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 3, 3, 2, 1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAddMinutes() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addMinutes(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addMinutes(base, 1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 4, 2, 1); [EOL]          [EOL]         result = DateUtils.addMinutes(base, -1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 2, 2, 1); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]  [EOL]         //month with 29 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 30 days [EOL]         roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("April 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 31 days [EOL]         roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("May 16, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //round to January 1 [EOL]         minDate = dateTimeParser.parse("December 17, 2007 00:00:00.000"); [EOL]         maxDate = dateTimeParser.parse("January 16, 2008 23:59:59.999"); [EOL]         roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH [EOL]      * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half  [EOL]      * Includes rounding to January 1 [EOL]      *       [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]  [EOL]         //month with 29 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 30 days [EOL]         roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("April 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 31 days [EOL]         roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("May 16, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //round to January 1 [EOL]         minDate = dateTimeParser.parse("December 17, 2007 00:00:00.000"); [EOL]         maxDate = dateTimeParser.parse("January 16, 2008 23:59:59.999"); [EOL]         roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH [EOL]      * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half  [EOL]      * Includes rounding to January 1 [EOL]      *       [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]  [EOL]         //month with 29 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 30 days [EOL]         roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("April 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 31 days [EOL]         roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("May 16, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //round to January 1 [EOL]         minDate = dateTimeParser.parse("December 17, 2007 00:00:00.000"); [EOL]         maxDate = dateTimeParser.parse("January 16, 2008 23:59:59.999"); [EOL]         roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH [EOL]      * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half  [EOL]      * Includes rounding to January 1 [EOL]      *       [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]  [EOL]         //month with 29 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 30 days [EOL]         roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("April 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("April 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 31 days [EOL]         roundedUpDate = dateTimeParser.parse("June 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("May 16, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //round to January 1 [EOL]         minDate = dateTimeParser.parse("December 17, 2007 00:00:00.000"); [EOL]         maxDate = dateTimeParser.parse("January 16, 2008 23:59:59.999"); [EOL]         roundToJanuaryFirst(minDate, maxDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests DateUtils.round()-method with DateUtils.SEMI_MONTH [EOL]      * Includes rounding months with 28, 29, 30 and 31 days, each with first and second half  [EOL]      * Includes rounding to January 1 [EOL]      *       [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncate() throws Exception { [EOL]         // tests public static Date truncate(Date date, int field) [EOL]         assertEquals("truncate year-1 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.truncate(date1, Calendar.YEAR)); [EOL]         assertEquals("truncate year-2 failed", [EOL]                 dateParser.parse("January 1, 2001"), [EOL]                 DateUtils.truncate(date2, Calendar.YEAR)); [EOL]         assertEquals("truncate month-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate(date1, Calendar.MONTH)); [EOL]         assertEquals("truncate month-2 failed", [EOL]                 dateParser.parse("November 1, 2001"), [EOL]                 DateUtils.truncate(date2, Calendar.MONTH)); [EOL]         assertEquals("truncate semimonth-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate semimonth-2 failed", [EOL]                 dateParser.parse("November 16, 2001"), [EOL]                 DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate date-1 failed", [EOL]                 dateParser.parse("February 12, 2002"), [EOL]                 DateUtils.truncate(date1, Calendar.DATE)); [EOL]         assertEquals("truncate date-2 failed", [EOL]                 dateParser.parse("November 18, 2001"), [EOL]                 DateUtils.truncate(date2, Calendar.DATE)); [EOL]         assertEquals("truncate hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate(date1, Calendar.HOUR)); [EOL]         assertEquals("truncate hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:00:00.000"), [EOL]                 DateUtils.truncate(date2, Calendar.HOUR)); [EOL]         assertEquals("truncate minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:00.000"), [EOL]                 DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]         assertEquals("truncate minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:00.000"), [EOL]                 DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]         assertEquals("truncate second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:56.000"), [EOL]                 DateUtils.truncate(date1, Calendar.SECOND)); [EOL]         assertEquals("truncate second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:11.000"), [EOL]                 DateUtils.truncate(date2, Calendar.SECOND)); [EOL]         assertEquals("truncate ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-3 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-4 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]  [EOL]         // tests public static Date truncate(Object date, int field) [EOL]         assertEquals("truncate year-1 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]         assertEquals("truncate year-2 failed", [EOL]                 dateParser.parse("January 1, 2001"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]         assertEquals("truncate month-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]         assertEquals("truncate month-2 failed", [EOL]                 dateParser.parse("November 1, 2001"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]         assertEquals("truncate semimonth-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate semimonth-2 failed", [EOL]                 dateParser.parse("November 16, 2001"), [EOL]                 DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate date-1 failed", [EOL]                 dateParser.parse("February 12, 2002"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]         assertEquals("truncate date-2 failed", [EOL]                 dateParser.parse("November 18, 2001"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]         assertEquals("truncate hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]         assertEquals("truncate hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:00:00.000"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]         assertEquals("truncate minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:00.000"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]         assertEquals("truncate minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:00.000"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]         assertEquals("truncate second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:56.000"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]         assertEquals("truncate second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:11.000"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]         assertEquals("truncate ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-3 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-4 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         assertEquals("truncate calendar second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:56.000"), [EOL]                 DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]         assertEquals("truncate calendar second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:11.000"), [EOL]                 DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]          [EOL]         assertEquals("truncate ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-3 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-4 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         try { [EOL]             DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.truncate("", Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]  [EOL]         // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 [EOL]         // Test truncate across beginning of daylight saving time [EOL]         TimeZone.setDefault(zone); [EOL]         dateTimeParser.setTimeZone(zone); [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate(date3, Calendar.DATE)); [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]         // Test truncate across end of daylight saving time [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("October 26, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate(date8, Calendar.DATE)); [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("October 26, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]         TimeZone.setDefault(defaultZone); [EOL]         dateTimeParser.setTimeZone(defaultZone); [EOL]          [EOL]         // Bug 31395, large dates [EOL]         final Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis [EOL]         final GregorianCalendar endCal = new GregorianCalendar(); [EOL]         endCal.setTime(endOfTime); [EOL]         try { [EOL]             DateUtils.truncate(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000001); [EOL]         try { [EOL]             DateUtils.truncate(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000000); [EOL]         final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]         assertEquals(0, cal.get(Calendar.HOUR)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests for LANG-59 [EOL]      * [EOL]      * see http://issues.apache.org/jira/browse/LANG-59 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.HOUR)); [EOL]         assertEquals("ceiling javadoc-2 failed", [EOL]                 dateTimeParser.parse("April 1, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.MONTH)); [EOL]  [EOL]         // tests public static Date ceiling(Date date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]      // tests public static Date ceiling(Object date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         assertEquals("ceiling calendar second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]         assertEquals("ceiling calendar second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]          [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]  [EOL]         try { [EOL]             DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling("", Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling(date1, -9999); [EOL]             fail(); [EOL]         } catch(final IllegalArgumentException ex) {} [EOL]  [EOL]          [EOL]         // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 [EOL]         // Test ceiling across the beginning of daylight saving time [EOL]         TimeZone.setDefault(zone); [EOL]         dateTimeParser.setTimeZone(zone); [EOL]  [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date7, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]          [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]         } else { [EOL]             this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]         } [EOL]         TimeZone.setDefault(defaultZone); [EOL]         dateTimeParser.setTimeZone(defaultZone); [EOL]          [EOL]      // Bug 31395, large dates [EOL]         final Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis [EOL]         final GregorianCalendar endCal = new GregorianCalendar(); [EOL]         endCal.setTime(endOfTime); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000001); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000000); [EOL]         final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         assertEquals(0, cal.get(Calendar.HOUR)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the iterator exceptions [EOL]      */ [EOL]
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.HOUR)); [EOL]         assertEquals("ceiling javadoc-2 failed", [EOL]                 dateTimeParser.parse("April 1, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.MONTH)); [EOL]  [EOL]         // tests public static Date ceiling(Date date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]      // tests public static Date ceiling(Object date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         assertEquals("ceiling calendar second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]         assertEquals("ceiling calendar second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]          [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]  [EOL]         try { [EOL]             DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling("", Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling(date1, -9999); [EOL]             fail(); [EOL]         } catch(final IllegalArgumentException ex) {} [EOL]  [EOL]          [EOL]         // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 [EOL]         // Test ceiling across the beginning of daylight saving time [EOL]         TimeZone.setDefault(zone); [EOL]         dateTimeParser.setTimeZone(zone); [EOL]  [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date7, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]          [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]         } else { [EOL]             this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]         } [EOL]         TimeZone.setDefault(defaultZone); [EOL]         dateTimeParser.setTimeZone(defaultZone); [EOL]          [EOL]      // Bug 31395, large dates [EOL]         final Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis [EOL]         final GregorianCalendar endCal = new GregorianCalendar(); [EOL]         endCal.setTime(endOfTime); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000001); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000000); [EOL]         final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         assertEquals(0, cal.get(Calendar.HOUR)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the iterator exceptions [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.HOUR)); [EOL]         assertEquals("ceiling javadoc-2 failed", [EOL]                 dateTimeParser.parse("April 1, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.MONTH)); [EOL]  [EOL]         // tests public static Date ceiling(Date date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]      // tests public static Date ceiling(Object date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         assertEquals("ceiling calendar second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]         assertEquals("ceiling calendar second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]          [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]  [EOL]         try { [EOL]             DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling("", Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling(date1, -9999); [EOL]             fail(); [EOL]         } catch(final IllegalArgumentException ex) {} [EOL]  [EOL]          [EOL]         // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 [EOL]         // Test ceiling across the beginning of daylight saving time [EOL]         TimeZone.setDefault(zone); [EOL]         dateTimeParser.setTimeZone(zone); [EOL]  [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date7, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]          [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]         } else { [EOL]             this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]         } [EOL]         TimeZone.setDefault(defaultZone); [EOL]         dateTimeParser.setTimeZone(defaultZone); [EOL]          [EOL]      // Bug 31395, large dates [EOL]         final Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis [EOL]         final GregorianCalendar endCal = new GregorianCalendar(); [EOL]         endCal.setTime(endOfTime); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000001); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000000); [EOL]         final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         assertEquals(0, cal.get(Calendar.HOUR)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the iterator exceptions [EOL]      */ [EOL]
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.HOUR)); [EOL]         assertEquals("ceiling javadoc-2 failed", [EOL]                 dateTimeParser.parse("April 1, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.MONTH)); [EOL]  [EOL]         // tests public static Date ceiling(Date date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling(date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling(date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling(date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling(date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling(date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling(date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling(date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling(dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]      // tests public static Date ceiling(Object date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.YEAR)); [EOL]         assertEquals("ceiling month-1 failed", [EOL]                 dateParser.parse("March 1, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MONTH)); [EOL]         assertEquals("ceiling month-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MONTH)); [EOL]         assertEquals("ceiling semimonth-1 failed", [EOL]                 dateParser.parse("February 16, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling semimonth-2 failed", [EOL]                 dateParser.parse("December 1, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("ceiling date-1 failed", [EOL]                 dateParser.parse("February 13, 2002"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.DATE)); [EOL]         assertEquals("ceiling date-2 failed", [EOL]                 dateParser.parse("November 19, 2001"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.DATE)); [EOL]         assertEquals("ceiling hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 13:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.HOUR)); [EOL]         assertEquals("ceiling hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 2:00:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.HOUR)); [EOL]         assertEquals("ceiling minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:35:00.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.MINUTE)); [EOL]         assertEquals("ceiling minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:24:00.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.MINUTE)); [EOL]         assertEquals("ceiling second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) date1, Calendar.SECOND)); [EOL]         assertEquals("ceiling second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) date2, Calendar.SECOND)); [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         assertEquals("ceiling calendar second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:57.000"), [EOL]                 DateUtils.ceiling((Object) cal1, Calendar.SECOND)); [EOL]         assertEquals("ceiling calendar second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:12.000"), [EOL]                 DateUtils.ceiling((Object) cal2, Calendar.SECOND)); [EOL]          [EOL]         assertEquals("ceiling ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-3 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("ceiling ampm-4 failed", [EOL]                 dateTimeParser.parse("February 4, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) calAmPm4, Calendar.AM_PM)); [EOL]  [EOL]         try { [EOL]             DateUtils.ceiling((Date) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Calendar) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling((Object) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling("", Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]         try { [EOL]             DateUtils.ceiling(date1, -9999); [EOL]             fail(); [EOL]         } catch(final IllegalArgumentException ex) {} [EOL]  [EOL]          [EOL]         // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 [EOL]         // Test ceiling across the beginning of daylight saving time [EOL]         TimeZone.setDefault(zone); [EOL]         dateTimeParser.setTimeZone(zone); [EOL]  [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal5, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal6, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling(date7, Calendar.DATE)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 31, 2003 00:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal7, Calendar.DATE)); [EOL]          [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling(date4, Calendar.HOUR_OF_DAY)); [EOL]         assertEquals("ceiling MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                 DateUtils.ceiling((Object) cal4, Calendar.HOUR_OF_DAY)); [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling(date5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 03:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal5, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal6, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling(date7, Calendar.HOUR_OF_DAY)); [EOL]             assertEquals("ceiling MET date across DST change-over", [EOL]                     dateTimeParser.parse("March 30, 2003 04:00:00.000"), [EOL]                     DateUtils.ceiling((Object) cal7, Calendar.HOUR_OF_DAY)); [EOL]         } else { [EOL]             this.warn("WARNING: Some date ceiling tests not run since the current version is " + SystemUtils.JAVA_SPECIFICATION_VERSION); [EOL]         } [EOL]         TimeZone.setDefault(defaultZone); [EOL]         dateTimeParser.setTimeZone(defaultZone); [EOL]          [EOL]      // Bug 31395, large dates [EOL]         final Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis [EOL]         final GregorianCalendar endCal = new GregorianCalendar(); [EOL]         endCal.setTime(endOfTime); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000001); [EOL]         try { [EOL]             DateUtils.ceiling(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000000); [EOL]         final Calendar cal = DateUtils.ceiling(endCal, Calendar.DATE); [EOL]         assertEquals(0, cal.get(Calendar.HOUR)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the iterator exceptions [EOL]      */ [EOL]
@Test [EOL]     public void testTruncate() throws Exception { [EOL]         // tests public static Date truncate(Date date, int field) [EOL]         assertEquals("truncate year-1 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.truncate(date1, Calendar.YEAR)); [EOL]         assertEquals("truncate year-2 failed", [EOL]                 dateParser.parse("January 1, 2001"), [EOL]                 DateUtils.truncate(date2, Calendar.YEAR)); [EOL]         assertEquals("truncate month-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate(date1, Calendar.MONTH)); [EOL]         assertEquals("truncate month-2 failed", [EOL]                 dateParser.parse("November 1, 2001"), [EOL]                 DateUtils.truncate(date2, Calendar.MONTH)); [EOL]         assertEquals("truncate semimonth-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate(date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate semimonth-2 failed", [EOL]                 dateParser.parse("November 16, 2001"), [EOL]                 DateUtils.truncate(date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate date-1 failed", [EOL]                 dateParser.parse("February 12, 2002"), [EOL]                 DateUtils.truncate(date1, Calendar.DATE)); [EOL]         assertEquals("truncate date-2 failed", [EOL]                 dateParser.parse("November 18, 2001"), [EOL]                 DateUtils.truncate(date2, Calendar.DATE)); [EOL]         assertEquals("truncate hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate(date1, Calendar.HOUR)); [EOL]         assertEquals("truncate hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:00:00.000"), [EOL]                 DateUtils.truncate(date2, Calendar.HOUR)); [EOL]         assertEquals("truncate minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:00.000"), [EOL]                 DateUtils.truncate(date1, Calendar.MINUTE)); [EOL]         assertEquals("truncate minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:00.000"), [EOL]                 DateUtils.truncate(date2, Calendar.MINUTE)); [EOL]         assertEquals("truncate second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:56.000"), [EOL]                 DateUtils.truncate(date1, Calendar.SECOND)); [EOL]         assertEquals("truncate second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:11.000"), [EOL]                 DateUtils.truncate(date2, Calendar.SECOND)); [EOL]         assertEquals("truncate ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-3 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-4 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate(dateAmPm4, Calendar.AM_PM)); [EOL]  [EOL]         // tests public static Date truncate(Object date, int field) [EOL]         assertEquals("truncate year-1 failed", [EOL]                 dateParser.parse("January 1, 2002"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.YEAR)); [EOL]         assertEquals("truncate year-2 failed", [EOL]                 dateParser.parse("January 1, 2001"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.YEAR)); [EOL]         assertEquals("truncate month-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.MONTH)); [EOL]         assertEquals("truncate month-2 failed", [EOL]                 dateParser.parse("November 1, 2001"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.MONTH)); [EOL]         assertEquals("truncate semimonth-1 failed", [EOL]                 dateParser.parse("February 1, 2002"), [EOL]                 DateUtils.truncate((Object) date1, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate semimonth-2 failed", [EOL]                 dateParser.parse("November 16, 2001"), [EOL]                 DateUtils.truncate((Object) date2, DateUtils.SEMI_MONTH)); [EOL]         assertEquals("truncate date-1 failed", [EOL]                 dateParser.parse("February 12, 2002"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.DATE)); [EOL]         assertEquals("truncate date-2 failed", [EOL]                 dateParser.parse("November 18, 2001"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.DATE)); [EOL]         assertEquals("truncate hour-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.HOUR)); [EOL]         assertEquals("truncate hour-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:00:00.000"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.HOUR)); [EOL]         assertEquals("truncate minute-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:00.000"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.MINUTE)); [EOL]         assertEquals("truncate minute-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:00.000"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.MINUTE)); [EOL]         assertEquals("truncate second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:56.000"), [EOL]                 DateUtils.truncate((Object) date1, Calendar.SECOND)); [EOL]         assertEquals("truncate second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:11.000"), [EOL]                 DateUtils.truncate((Object) date2, Calendar.SECOND)); [EOL]         assertEquals("truncate ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-3 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-4 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) dateAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         assertEquals("truncate calendar second-1 failed", [EOL]                 dateTimeParser.parse("February 12, 2002 12:34:56.000"), [EOL]                 DateUtils.truncate((Object) cal1, Calendar.SECOND)); [EOL]         assertEquals("truncate calendar second-2 failed", [EOL]                 dateTimeParser.parse("November 18, 2001 1:23:11.000"), [EOL]                 DateUtils.truncate((Object) cal2, Calendar.SECOND)); [EOL]          [EOL]         assertEquals("truncate ampm-1 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm1, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-2 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm2, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-3 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm3, Calendar.AM_PM)); [EOL]         assertEquals("truncate ampm-4 failed", [EOL]                 dateTimeParser.parse("February 3, 2002 12:00:00.000"), [EOL]                 DateUtils.truncate((Object) calAmPm4, Calendar.AM_PM)); [EOL]          [EOL]         try { [EOL]             DateUtils.truncate((Date) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.truncate((Calendar) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.truncate((Object) null, Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.truncate("", Calendar.SECOND); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]  [EOL]         // Fix for http://issues.apache.org/bugzilla/show_bug.cgi?id=25560 [EOL]         // Test truncate across beginning of daylight saving time [EOL]         TimeZone.setDefault(zone); [EOL]         dateTimeParser.setTimeZone(zone); [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate(date3, Calendar.DATE)); [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("March 30, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) cal3, Calendar.DATE)); [EOL]         // Test truncate across end of daylight saving time [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("October 26, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate(date8, Calendar.DATE)); [EOL]         assertEquals("truncate MET date across DST change-over", [EOL]                 dateTimeParser.parse("October 26, 2003 00:00:00.000"), [EOL]                 DateUtils.truncate((Object) cal8, Calendar.DATE)); [EOL]         TimeZone.setDefault(defaultZone); [EOL]         dateTimeParser.setTimeZone(defaultZone); [EOL]          [EOL]         // Bug 31395, large dates [EOL]         final Date endOfTime = new Date(Long.MAX_VALUE); // fyi: Sun Aug 17 07:12:55 CET 292278994 -- 807 millis [EOL]         final GregorianCalendar endCal = new GregorianCalendar(); [EOL]         endCal.setTime(endOfTime); [EOL]         try { [EOL]             DateUtils.truncate(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000001); [EOL]         try { [EOL]             DateUtils.truncate(endCal, Calendar.DATE); [EOL]             fail(); [EOL]         } catch (final ArithmeticException ex) {} [EOL]         endCal.set(Calendar.YEAR, 280000000); [EOL]         final Calendar cal = DateUtils.truncate(endCal, Calendar.DATE); [EOL]         assertEquals(0, cal.get(Calendar.HOUR)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests for LANG-59 [EOL]      * [EOL]      * see http://issues.apache.org/jira/browse/LANG-59 [EOL]      */ [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]             Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]             assertWeekIterator(it, sunday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]             assertWeekIterator(it, monday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]             assertWeekIterator(it, today); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]              [EOL]             it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             try { [EOL]                 it.next(); [EOL]                 fail(); [EOL]             } catch (final NoSuchElementException ex) {} [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             it.next(); [EOL]             try { [EOL]                 it.remove(); [EOL]             } catch( final UnsupportedOperationException ex) {} [EOL]              [EOL]             now.add(Calendar.DATE,1); [EOL]         } [EOL]     } [EOL]              [EOL]     /** [EOL]      * Tests the calendar iterator for month-based ranges [EOL]      */ [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]             Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]             assertWeekIterator(it, sunday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]             assertWeekIterator(it, monday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]             assertWeekIterator(it, today); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]              [EOL]             it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             try { [EOL]                 it.next(); [EOL]                 fail(); [EOL]             } catch (final NoSuchElementException ex) {} [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             it.next(); [EOL]             try { [EOL]                 it.remove(); [EOL]             } catch( final UnsupportedOperationException ex) {} [EOL]              [EOL]             now.add(Calendar.DATE,1); [EOL]         } [EOL]     } [EOL]              [EOL]     /** [EOL]      * Tests the calendar iterator for month-based ranges [EOL]      */ [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]             Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]             assertWeekIterator(it, sunday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]             assertWeekIterator(it, monday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]             assertWeekIterator(it, today); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]              [EOL]             it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             try { [EOL]                 it.next(); [EOL]                 fail(); [EOL]             } catch (final NoSuchElementException ex) {} [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             it.next(); [EOL]             try { [EOL]                 it.remove(); [EOL]             } catch( final UnsupportedOperationException ex) {} [EOL]              [EOL]             now.add(Calendar.DATE,1); [EOL]         } [EOL]     } [EOL]              [EOL]     /** [EOL]      * Tests the calendar iterator for month-based ranges [EOL]      */ [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]             Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]             assertWeekIterator(it, sunday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]             assertWeekIterator(it, monday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]             assertWeekIterator(it, today); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]              [EOL]             it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             try { [EOL]                 it.next(); [EOL]                 fail(); [EOL]             } catch (final NoSuchElementException ex) {} [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             it.next(); [EOL]             try { [EOL]                 it.remove(); [EOL]             } catch( final UnsupportedOperationException ex) {} [EOL]              [EOL]             now.add(Calendar.DATE,1); [EOL]         } [EOL]     } [EOL]              [EOL]     /** [EOL]      * Tests the calendar iterator for month-based ranges [EOL]      */ [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIteratorEx() throws Exception { [EOL]         try { [EOL]             DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the calendar iterator for week ranges [EOL]      */ [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDateFragmentInLargerUnitWithCalendar() { [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE)); [EOL]     } [EOL]  [EOL]     //Calendar.SECOND as useful fragment [EOL]      [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinutesOfMonthWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInMinutes(aCalendar, Calendar.MONTH); [EOL]         assertEquals( minutes  +((hours * DateUtils.MILLIS_PER_HOUR) + (days * DateUtils.MILLIS_PER_DAY)) [EOL]                         / DateUtils.MILLIS_PER_MINUTE, [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDateFragmentInLargerUnitWithCalendar() { [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE)); [EOL]     } [EOL]  [EOL]     //Calendar.SECOND as useful fragment [EOL]      [EOL]
@Test [EOL]     public void testDateFragmentInLargerUnitWithCalendar() { [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aCalendar, Calendar.DATE)); [EOL]     } [EOL]  [EOL]     //Calendar.SECOND as useful fragment [EOL]      [EOL]
@Test [EOL]     public void testSecondsofHourWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY); [EOL]         assertEquals( [EOL]                 seconds [EOL]                         + (minutes [EOL]                                 * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSecondsofHourWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY); [EOL]         assertEquals( [EOL]                 seconds [EOL]                         + (minutes [EOL]                                 * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSecondsofHourWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY); [EOL]         assertEquals( [EOL]                 seconds [EOL]                         + (minutes [EOL]                                 * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSecondsofHourWithCalendar() { [EOL]         final long testResult = DateUtils.getFragmentInSeconds(aCalendar, Calendar.HOUR_OF_DAY); [EOL]         assertEquals( [EOL]                 seconds [EOL]                         + (minutes [EOL]                                 * DateUtils.MILLIS_PER_MINUTE / DateUtils.MILLIS_PER_SECOND), [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2, 2001")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]             Iterator<?> it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_SUNDAY); [EOL]             assertWeekIterator(it, sunday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_MONDAY); [EOL]             assertWeekIterator(it, monday); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_RELATIVE); [EOL]             assertWeekIterator(it, today); [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]              [EOL]             it = DateUtils.iterator((Object) now, DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             it = DateUtils.iterator((Object) now.getTime(), DateUtils.RANGE_WEEK_CENTER); [EOL]             assertWeekIterator(it, centered); [EOL]             try { [EOL]                 it.next(); [EOL]                 fail(); [EOL]             } catch (final NoSuchElementException ex) {} [EOL]             it = DateUtils.iterator(now, DateUtils.RANGE_WEEK_CENTER); [EOL]             it.next(); [EOL]             try { [EOL]                 it.remove(); [EOL]             } catch( final UnsupportedOperationException ex) {} [EOL]              [EOL]             now.add(Calendar.DATE,1); [EOL]         } [EOL]     } [EOL]              [EOL]     /** [EOL]      * Tests the calendar iterator for month-based ranges [EOL]      */ [EOL]
lang3/time/DurationFormatUtils.java
@Test [EOL]     public void testFormatDurationHMS() { [EOL]         long time = 0; [EOL]         assertEquals("0:00:00.000", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 1; [EOL]         assertEquals("0:00:00.001", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 15; [EOL]         assertEquals("0:00:00.015", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 165; [EOL]         assertEquals("0:00:00.165", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 1675; [EOL]         assertEquals("0:00:01.675", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 13465; [EOL]         assertEquals("0:00:13.465", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 72789; [EOL]         assertEquals("0:01:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 12789 + 32 * 60000; [EOL]         assertEquals("0:32:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]  [EOL]         time = 12789 + 62 * 60000; [EOL]         assertEquals("1:02:12.789", DurationFormatUtils.formatDurationHMS(time)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatDurationISO() { [EOL]         assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); [EOL]         assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, true); [EOL]         assertEquals("2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, true); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, true); [EOL]         assertEquals("1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, true); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, true); [EOL]         assertEquals("0 days 1 hour 12 minutes", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, false, true); [EOL]         assertEquals("1 day", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 0 minutes 50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, false, false); [EOL]         assertEquals("0 days 0 hours 2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, false, false); [EOL]         assertEquals("0 days 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("1 day 1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(2 * 24 * 60 * 60 * 1000 + 72 * 60 * 1000, false, false); [EOL]         assertEquals("2 days 1 hour 12 minutes 0 seconds", text); [EOL]         for (int i = 2; i < 31; i++) { [EOL]             text = DurationFormatUtils.formatDurationWords(i * 24 * 60 * 60 * 1000L, false, false); [EOL]             // assertEquals(i + " days 0 hours 0 minutes 0 seconds", text); [EOL]             //             [EOL]             // junit.framework.ComparisonFailure: expected:<25 days 0 hours 0 minutes 0...> but was:<-24 days -17 hours [EOL]             // -2 minutes -47...> [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:81) [EOL]             // at junit.framework.Assert.assertEquals(Assert.java:87) [EOL]             // at [EOL]             // org.apache.commons.lang.time.DurationFormatUtilsTest.testFormatDurationWords(DurationFormatUtilsTest.java:124) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) [EOL]             // at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) [EOL]             // at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) [EOL]             // at java.lang.reflect.Method.invoke(Method.java:324) [EOL]             // at junit.framework.TestCase.runTest(TestCase.java:154) [EOL]             // at junit.framework.TestCase.runBare(TestCase.java:127) [EOL]             // at junit.framework.TestResult$1.protect(TestResult.java:106) [EOL]             // at junit.framework.TestResult.runProtected(TestResult.java:124) [EOL]             // at junit.framework.TestResult.run(TestResult.java:109) [EOL]             // at junit.framework.TestCase.run(TestCase.java:118) [EOL]             // at junit.framework.TestSuite.runTest(TestSuite.java:208) [EOL]             // at junit.framework.TestSuite.run(TestSuite.java:203) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:478) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:344) [EOL]             // at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:196) [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that "1 <unit>s" gets converted to "1 <unit>" but that "11 <unit>s" is left alone. [EOL]      */ [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testDurationsByBruteForce() { [EOL]         bruteForce(2006, 0, 1, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(2006, 0, 2, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(2007, 1, 2, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(2004, 1, 29, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(1996, 1, 29, "d", Calendar.DAY_OF_MONTH); [EOL]  [EOL]         bruteForce(1969, 1, 28, "M", Calendar.MONTH);  // tests for 48 years [EOL]         //bruteForce(1996, 1, 29, "M", Calendar.MONTH);  // this will fail [EOL]     } [EOL]      [EOL]     private static final int FOUR_YEARS = 365 * 3 + 366; [EOL]      [EOL]     // Takes a minute to run, so generally turned off [EOL] //    public void testBrutally() { [EOL] //        Calendar c = Calendar.getInstance(); [EOL] //        c.set(2004, 0, 1, 0, 0, 0); [EOL] //        for (int i=0; i < FOUR_YEARS; i++) { [EOL] //            bruteForce(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), "d", Calendar.DAY_OF_MONTH ); [EOL] //            c.add(Calendar.DAY_OF_MONTH, 1); [EOL] //        } [EOL] //    }         [EOL]      [EOL]     private void bruteForce(final int year, final int month, final int day, final String format, final int calendarType) { [EOL]         final String msg = year + "-" + month + "-" + day + " to "; [EOL]         final Calendar c = Calendar.getInstance(); [EOL]         c.set(year, month, day, 0, 0, 0); [EOL]         final int[] array1 = new int[] { year, month, day, 0, 0, 0 }; [EOL]         final int[] array2 = new int[] { year, month, day, 0, 0, 0 }; [EOL]         for (int i=0; i < FOUR_YEARS; i++) { [EOL]             array2[0] = c.get(Calendar.YEAR); [EOL]             array2[1] = c.get(Calendar.MONTH); [EOL]             array2[2] = c.get(Calendar.DAY_OF_MONTH); [EOL]             final String tmpMsg = msg + array2[0] + "-" + array2[1] + "-" + array2[2] + " at "; [EOL]             assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format ); [EOL]             c.add(calendarType, 1); [EOL]         } [EOL]     } [EOL]  [EOL]     private void assertEqualDuration(final String expected, final int[] start, final int[] end, final String format) { [EOL]         assertEqualDuration(null, expected, start, end, format); [EOL]     } [EOL]     private void assertEqualDuration(final String message, final String expected, final int[] start, final int[] end, final String format) { [EOL]         final Calendar cal1 = Calendar.getInstance(); [EOL]         cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]); [EOL]         cal1.set(Calendar.MILLISECOND, 0); [EOL]         final Calendar cal2 = Calendar.getInstance(); [EOL]         cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]); [EOL]         cal2.set(Calendar.MILLISECOND, 0); [EOL]         final long milli1 = cal1.getTime().getTime(); [EOL]         final long milli2 = cal2.getTime().getTime(); [EOL]         final String result = DurationFormatUtils.formatPeriod(milli1, milli2, format); [EOL]         if (message == null) { [EOL]             assertEquals(expected, result); [EOL]         } else { [EOL]             assertEquals(message, expected, result); [EOL]         } [EOL]     } [EOL]  [EOL]     private void assertArrayEquals(final DurationFormatUtils.Token[] obj1, final DurationFormatUtils.Token[] obj2) { [EOL]         assertEquals("Arrays are unequal length. ", obj1.length, obj2.length); [EOL]         for (int i = 0; i < obj1.length; i++) { [EOL]             assertTrue("Index " + i + " not equal, " + obj1[i] + " vs " + obj2[i], obj1[i].equals(obj2[i])); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testDurationsByBruteForce() { [EOL]         bruteForce(2006, 0, 1, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(2006, 0, 2, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(2007, 1, 2, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(2004, 1, 29, "d", Calendar.DAY_OF_MONTH); [EOL]         bruteForce(1996, 1, 29, "d", Calendar.DAY_OF_MONTH); [EOL]  [EOL]         bruteForce(1969, 1, 28, "M", Calendar.MONTH);  // tests for 48 years [EOL]         //bruteForce(1996, 1, 29, "M", Calendar.MONTH);  // this will fail [EOL]     } [EOL]      [EOL]     private static final int FOUR_YEARS = 365 * 3 + 366; [EOL]      [EOL]     // Takes a minute to run, so generally turned off [EOL] //    public void testBrutally() { [EOL] //        Calendar c = Calendar.getInstance(); [EOL] //        c.set(2004, 0, 1, 0, 0, 0); [EOL] //        for (int i=0; i < FOUR_YEARS; i++) { [EOL] //            bruteForce(c.get(Calendar.YEAR), c.get(Calendar.MONTH), c.get(Calendar.DAY_OF_MONTH), "d", Calendar.DAY_OF_MONTH ); [EOL] //            c.add(Calendar.DAY_OF_MONTH, 1); [EOL] //        } [EOL] //    }         [EOL]      [EOL]     private void bruteForce(final int year, final int month, final int day, final String format, final int calendarType) { [EOL]         final String msg = year + "-" + month + "-" + day + " to "; [EOL]         final Calendar c = Calendar.getInstance(); [EOL]         c.set(year, month, day, 0, 0, 0); [EOL]         final int[] array1 = new int[] { year, month, day, 0, 0, 0 }; [EOL]         final int[] array2 = new int[] { year, month, day, 0, 0, 0 }; [EOL]         for (int i=0; i < FOUR_YEARS; i++) { [EOL]             array2[0] = c.get(Calendar.YEAR); [EOL]             array2[1] = c.get(Calendar.MONTH); [EOL]             array2[2] = c.get(Calendar.DAY_OF_MONTH); [EOL]             final String tmpMsg = msg + array2[0] + "-" + array2[1] + "-" + array2[2] + " at "; [EOL]             assertEqualDuration( tmpMsg + i, Integer.toString(i), array1, array2, format ); [EOL]             c.add(calendarType, 1); [EOL]         } [EOL]     } [EOL]  [EOL]     private void assertEqualDuration(final String expected, final int[] start, final int[] end, final String format) { [EOL]         assertEqualDuration(null, expected, start, end, format); [EOL]     } [EOL]     private void assertEqualDuration(final String message, final String expected, final int[] start, final int[] end, final String format) { [EOL]         final Calendar cal1 = Calendar.getInstance(); [EOL]         cal1.set(start[0], start[1], start[2], start[3], start[4], start[5]); [EOL]         cal1.set(Calendar.MILLISECOND, 0); [EOL]         final Calendar cal2 = Calendar.getInstance(); [EOL]         cal2.set(end[0], end[1], end[2], end[3], end[4], end[5]); [EOL]         cal2.set(Calendar.MILLISECOND, 0); [EOL]         final long milli1 = cal1.getTime().getTime(); [EOL]         final long milli2 = cal2.getTime().getTime(); [EOL]         final String result = DurationFormatUtils.formatPeriod(milli1, milli2, format); [EOL]         if (message == null) { [EOL]             assertEquals(expected, result); [EOL]         } else { [EOL]             assertEquals(message, expected, result); [EOL]         } [EOL]     } [EOL]  [EOL]     private void assertArrayEquals(final DurationFormatUtils.Token[] obj1, final DurationFormatUtils.Token[] obj2) { [EOL]         assertEquals("Arrays are unequal length. ", obj1.length, obj2.length); [EOL]         for (int i = 0; i < obj1.length; i++) { [EOL]             assertTrue("Index " + i + " not equal, " + obj1[i] + " vs " + obj2[i], obj1[i].equals(obj2[i])); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testFormatPeriodISO() { [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar base = Calendar.getInstance(timeZone); [EOL]         base.set(1970, 0, 1, 0, 0, 0); [EOL]         base.set(Calendar.MILLISECOND, 0); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002, 1, 23, 9, 11, 12); [EOL]         cal.set(Calendar.MILLISECOND, 1); [EOL]         String text; [EOL]         // repeat a test from testDateTimeISO to compare extended and not extended. [EOL]         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]         assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]         // test fixture is the same as above, but now with extended format. [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]         // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration [EOL]         cal.set(1971, 1, 3, 10, 30, 0); [EOL]         cal.set(Calendar.MILLISECOND, 0); [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL]         // want a way to say 'don't print the seconds in format()' or other fields for that matter: [EOL]         // assertEquals("P1Y2M3DT10H30M", text); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatPeriodISO() { [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar base = Calendar.getInstance(timeZone); [EOL]         base.set(1970, 0, 1, 0, 0, 0); [EOL]         base.set(Calendar.MILLISECOND, 0); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002, 1, 23, 9, 11, 12); [EOL]         cal.set(Calendar.MILLISECOND, 1); [EOL]         String text; [EOL]         // repeat a test from testDateTimeISO to compare extended and not extended. [EOL]         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]         assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]         // test fixture is the same as above, but now with extended format. [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]         // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration [EOL]         cal.set(1971, 1, 3, 10, 30, 0); [EOL]         cal.set(Calendar.MILLISECOND, 0); [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL]         // want a way to say 'don't print the seconds in format()' or other fields for that matter: [EOL]         // assertEquals("P1Y2M3DT10H30M", text); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatPeriodISO() { [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar base = Calendar.getInstance(timeZone); [EOL]         base.set(1970, 0, 1, 0, 0, 0); [EOL]         base.set(Calendar.MILLISECOND, 0); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002, 1, 23, 9, 11, 12); [EOL]         cal.set(Calendar.MILLISECOND, 1); [EOL]         String text; [EOL]         // repeat a test from testDateTimeISO to compare extended and not extended. [EOL]         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]         assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]         // test fixture is the same as above, but now with extended format. [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]         // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration [EOL]         cal.set(1971, 1, 3, 10, 30, 0); [EOL]         cal.set(Calendar.MILLISECOND, 0); [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL]         // want a way to say 'don't print the seconds in format()' or other fields for that matter: [EOL]         // assertEquals("P1Y2M3DT10H30M", text); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatPeriodISO() { [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar base = Calendar.getInstance(timeZone); [EOL]         base.set(1970, 0, 1, 0, 0, 0); [EOL]         base.set(Calendar.MILLISECOND, 0); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002, 1, 23, 9, 11, 12); [EOL]         cal.set(Calendar.MILLISECOND, 1); [EOL]         String text; [EOL]         // repeat a test from testDateTimeISO to compare extended and not extended. [EOL]         text = DateFormatUtils.ISO_DATETIME_TIME_ZONE_FORMAT.format(cal); [EOL]         assertEquals("2002-02-23T09:11:12-03:00", text); [EOL]         // test fixture is the same as above, but now with extended format. [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P32Y1M22DT9H11M12.001S", text); [EOL]         // test fixture from example in http://www.w3.org/TR/xmlschema-2/#duration [EOL]         cal.set(1971, 1, 3, 10, 30, 0); [EOL]         cal.set(Calendar.MILLISECOND, 0); [EOL]         text = DurationFormatUtils.formatPeriod(base.getTime().getTime(), cal.getTime().getTime(), [EOL]                 DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN, false, timeZone); [EOL]         assertEquals("P1Y1M2DT10H30M0.000S", text); [EOL]         // want a way to say 'don't print the seconds in format()' or other fields for that matter: [EOL]         // assertEquals("P1Y2M3DT10H30M", text); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); [EOL]  [EOL]         // tests the ISO8601-like [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]  [EOL]         // test the iso extended format [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(new StringBuilder("P"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 4), [EOL]             new DurationFormatUtils.Token(new StringBuilder("Y"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("DT"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("H"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("S"), 1)}, DurationFormatUtils [EOL]                 .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]  [EOL]         // test failures in equals [EOL]         final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]         assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]         assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token( [EOL]                 new Object()))); [EOL]         assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token( [EOL]                 DurationFormatUtils.y, 1))); [EOL]         final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]         assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL]     } [EOL]  [EOL]  [EOL]     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401 [EOL]
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); [EOL]  [EOL]         // tests the ISO8601-like [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]  [EOL]         // test the iso extended format [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(new StringBuilder("P"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 4), [EOL]             new DurationFormatUtils.Token(new StringBuilder("Y"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("DT"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("H"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("S"), 1)}, DurationFormatUtils [EOL]                 .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]  [EOL]         // test failures in equals [EOL]         final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]         assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]         assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token( [EOL]                 new Object()))); [EOL]         assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token( [EOL]                 DurationFormatUtils.y, 1))); [EOL]         final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]         assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL]     } [EOL]  [EOL]  [EOL]     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401 [EOL]
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); [EOL]  [EOL]         // tests the ISO8601-like [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]  [EOL]         // test the iso extended format [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(new StringBuilder("P"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 4), [EOL]             new DurationFormatUtils.Token(new StringBuilder("Y"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("DT"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("H"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("S"), 1)}, DurationFormatUtils [EOL]                 .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]  [EOL]         // test failures in equals [EOL]         final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]         assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]         assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token( [EOL]                 new Object()))); [EOL]         assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token( [EOL]                 DurationFormatUtils.y, 1))); [EOL]         final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]         assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL]     } [EOL]  [EOL]  [EOL]     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401 [EOL]
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); [EOL]  [EOL]         // tests the ISO8601-like [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 3)}, DurationFormatUtils.lexx("H:mm:ss.SSS")); [EOL]  [EOL]         // test the iso extended format [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(new StringBuilder("P"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 4), [EOL]             new DurationFormatUtils.Token(new StringBuilder("Y"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("DT"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("H"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("M"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("."), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder("S"), 1)}, DurationFormatUtils [EOL]                 .lexx(DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN)); [EOL]  [EOL]         // test failures in equals [EOL]         final DurationFormatUtils.Token token = new DurationFormatUtils.Token(DurationFormatUtils.y, 4); [EOL]         assertFalse("Token equal to non-Token class. ", token.equals(new Object())); [EOL]         assertFalse("Token equal to Token with wrong value class. ", token.equals(new DurationFormatUtils.Token( [EOL]                 new Object()))); [EOL]         assertFalse("Token equal to Token with different count. ", token.equals(new DurationFormatUtils.Token( [EOL]                 DurationFormatUtils.y, 1))); [EOL]         final DurationFormatUtils.Token numToken = new DurationFormatUtils.Token(Integer.valueOf(1), 4); [EOL]         assertTrue("Token with Number value not equal to itself. ", numToken.equals(numToken)); [EOL]     } [EOL]  [EOL]  [EOL]     // http://issues.apache.org/bugzilla/show_bug.cgi?id=38401 [EOL]
lang3/text/WordUtils.java
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]  [EOL]         // unusual newline char [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of<br />text that is going<br />to be wrapped after<br />20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "<br />", true)); [EOL]  [EOL]         // short line length [EOL]         input = "Here is one line"; [EOL]         expected = "Here\nis one\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 6, "\n", false)); [EOL]         expected = "Here\nis\none\nline"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 2, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, -1, "\n", false)); [EOL]  [EOL]         // system newline char [EOL]         final String systemNewLine = System.getProperty("line.separator"); [EOL]         input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line of" + systemNewLine + "text that is going" + systemNewLine  [EOL]             + "to be wrapped after" + systemNewLine + "20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, null, true)); [EOL]  [EOL]         // with extra spaces [EOL]         input = " Here:  is  one  line  of  text  that  is  going  to  be  wrapped  after  20  columns."; [EOL]         expected = "Here:  is  one  line\nof  text  that  is \ngoing  to  be \nwrapped  after  20 \ncolumns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab [EOL]         input = "Here is\tone line of text that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is\tone line of\ntext that is going\nto be wrapped after\n20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // with tab at wrapColumn [EOL]         input = "Here is one line of\ttext that is going to be wrapped after 20 columns."; [EOL]         expected = "Here is one line\nof\ttext that is\ngoing to be wrapped\nafter 20 columns."; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word [EOL]         input = "Click here to jump to the jakarta website - http://jakarta.apache.org"; [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apache.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here to jump\nto the jakarta\nwebsite -\nhttp://jakarta.apach\ne.org"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL]          [EOL]         // difference because of long word in middle [EOL]         input = "Click here, http://jakarta.apache.org, to jump to the jakarta website"; [EOL]         expected = "Click here,\nhttp://jakarta.apache.org,\nto jump to the\njakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", false)); [EOL]         expected = "Click here,\nhttp://jakarta.apach\ne.org, to jump to\nthe jakarta website"; [EOL]         assertEquals(expected, WordUtils.wrap(input, 20, "\n", true)); [EOL] //        System.err.println(expected); [EOL] //        System.err.println(WordUtils.wrap(input, 20, "\n", false)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("I") ); [EOL]         assertEquals("I", WordUtils.capitalizeFully("i") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") ); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("I") ); [EOL]         assertEquals("I", WordUtils.capitalizeFully("i") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") ); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("I") ); [EOL]         assertEquals("I", WordUtils.capitalizeFully("i") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") ); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testUncapitalize_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null)); [EOL]         assertEquals("", WordUtils.uncapitalize("")); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.uncapitalize("I") ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i") ); [EOL]         assertEquals("i am here 123", WordUtils.uncapitalize("i am here 123") ); [EOL]         assertEquals("i am here 123", WordUtils.uncapitalize("I Am Here 123") ); [EOL]         assertEquals("i am hERE 123", WordUtils.uncapitalize("i am HERE 123") ); [EOL]         assertEquals("i aM hERE 123", WordUtils.uncapitalize("I AM HERE 123") ); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, WordUtils.swapCase(null)); [EOL]         assertEquals("", WordUtils.swapCase("")); [EOL]         assertEquals("  ", WordUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [EOL]         assertEquals("I", WordUtils.swapCase("i") ); [EOL]         assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") ); [EOL]         assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") ); [EOL]         assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") ); [EOL]         assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") ); [EOL]  [EOL]         final String test = "This String contains a TitleCase character: \u01C8"; [EOL]         final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]         assertEquals(expect, WordUtils.swapCase(test)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, WordUtils.swapCase(null)); [EOL]         assertEquals("", WordUtils.swapCase("")); [EOL]         assertEquals("  ", WordUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [EOL]         assertEquals("I", WordUtils.swapCase("i") ); [EOL]         assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") ); [EOL]         assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") ); [EOL]         assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") ); [EOL]         assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") ); [EOL]  [EOL]         final String test = "This String contains a TitleCase character: \u01C8"; [EOL]         final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]         assertEquals(expect, WordUtils.swapCase(test)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("i", WordUtils.initials("i")); [EOL]         assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]         assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("i", WordUtils.initials("i")); [EOL]         assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]         assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("i", WordUtils.initials("i")); [EOL]         assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]         assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
lang3/text/translate/UnicodeEscaper.java
@Test [EOL]     public void testAbove() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testAbove() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [EOL]  [EOL]
lang3/text/StrTokenizer.java
@Test [EOL]     public void testCSVSimple() { [EOL]         this.testCSV(CSV_SIMPLE_FIXTURE); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("A", tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(3, tokenizer.size()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSV() { [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSV() { [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSV() { [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCSVSimple() { [EOL]         this.testCSV(CSV_SIMPLE_FIXTURE); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("A", tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(3, tokenizer.size()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("A", tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(3, tokenizer.size()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReset_String() { [EOL]         final StrTokenizer tok = new StrTokenizer("x x x"); [EOL]         tok.reset("d e"); [EOL]         assertEquals("d", tok.next()); [EOL]         assertEquals("e", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok.reset((String) null); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCSVSimple() { [EOL]         this.testCSV(CSV_SIMPLE_FIXTURE); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("A", tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(3, tokenizer.size()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("a", tkn.next()); [EOL]         try { [EOL]             tkn.remove(); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.set("x"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.add("y"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("b", tkn.next()); [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("c", tkn.next()); [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertFalse(tkn.hasNext()); [EOL]          [EOL]         try { [EOL]             tkn.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertFalse(tkn.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("a", tkn.next()); [EOL]         try { [EOL]             tkn.remove(); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.set("x"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.add("y"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("b", tkn.next()); [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("c", tkn.next()); [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertFalse(tkn.hasNext()); [EOL]          [EOL]         try { [EOL]             tkn.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertFalse(tkn.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("a", tkn.next()); [EOL]         try { [EOL]             tkn.remove(); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.set("x"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.add("y"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("b", tkn.next()); [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("c", tkn.next()); [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertFalse(tkn.hasNext()); [EOL]          [EOL]         try { [EOL]             tkn.next(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertFalse(tkn.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testBasic2() { [EOL]         final String input = "a \nb\fc"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertEquals("c", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testBasicTrimmed2() { [EOL]         final String input = "a:  b  :"; [EOL]         final StrTokenizer tok = new StrTokenizer(input, ':'); [EOL]         tok.setTrimmerMatcher(StrMatcher.stringMatcher("  ")); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertEquals(null, tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testChaining() { [EOL]         final StrTokenizer tok = new StrTokenizer(); [EOL]         assertEquals(tok, tok.reset()); [EOL]         assertEquals(tok, tok.reset("")); [EOL]         assertEquals(tok, tok.reset(new char[0])); [EOL]         assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]         assertEquals(tok, tok.setDelimiterString(" ")); [EOL]         assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]         assertEquals(tok, tok.setQuoteChar(' ')); [EOL]         assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]         assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]         assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]         assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]         assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]         assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns [EOL]      * <code>null</code>. [EOL]      */ [EOL]
@Test [EOL]     public void testChaining() { [EOL]         final StrTokenizer tok = new StrTokenizer(); [EOL]         assertEquals(tok, tok.reset()); [EOL]         assertEquals(tok, tok.reset("")); [EOL]         assertEquals(tok, tok.reset(new char[0])); [EOL]         assertEquals(tok, tok.setDelimiterChar(' ')); [EOL]         assertEquals(tok, tok.setDelimiterString(" ")); [EOL]         assertEquals(tok, tok.setDelimiterMatcher(null)); [EOL]         assertEquals(tok, tok.setQuoteChar(' ')); [EOL]         assertEquals(tok, tok.setQuoteMatcher(null)); [EOL]         assertEquals(tok, tok.setIgnoredChar(' ')); [EOL]         assertEquals(tok, tok.setIgnoredMatcher(null)); [EOL]         assertEquals(tok, tok.setTrimmerMatcher(null)); [EOL]         assertEquals(tok, tok.setEmptyTokenAsNull(false)); [EOL]         assertEquals(tok, tok.setIgnoreEmptyTokens(false)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that the {@link StrTokenizer#clone()} clone method catches {@link CloneNotSupportedException} and returns [EOL]      * <code>null</code>. [EOL]      */ [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
lang3/builder/EqualsBuilder.java
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCyclicalObjectReferences() { [EOL]         final TestObjectReference refX1 = new TestObjectReference(1); [EOL]         final TestObjectReference x1 = new TestObjectReference(1); [EOL]         x1.setObjectReference(refX1); [EOL]         refX1.setObjectReference(x1); [EOL]  [EOL]         final TestObjectReference refX2 = new TestObjectReference(1); [EOL]         final TestObjectReference x2 = new TestObjectReference(1); [EOL]         x2.setObjectReference(refX2); [EOL]         refX2.setObjectReference(x2); [EOL]  [EOL]         final TestObjectReference refX3 = new TestObjectReference(2); [EOL]         final TestObjectReference x3 = new TestObjectReference(2); [EOL]         x3.setObjectReference(refX3); [EOL]         refX3.setObjectReference(x3); [EOL]  [EOL]         assertTrue(x1.equals(x2)); [EOL]         assertNull(EqualsBuilder.getRegistry()); [EOL]         assertFalse(x1.equals(x3)); [EOL]         assertNull(EqualsBuilder.getRegistry()); [EOL]         assertFalse(x2.equals(x3)); [EOL]         assertNull(EqualsBuilder.getRegistry()); [EOL]     } [EOL]  [EOL]     static class TestObjectReference { [EOL]         @SuppressWarnings("unused") [EOL]         private TestObjectReference reference; [EOL]         @SuppressWarnings("unused") [EOL]         private final TestObject one; [EOL]  [EOL]         public TestObjectReference(final int one) { [EOL]             this.one = new TestObject(one); [EOL]         } [EOL]  [EOL]         public void setObjectReference(final TestObjectReference reference) { [EOL]             this.reference = reference; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public boolean equals(final Object obj) { [EOL]             return EqualsBuilder.reflectionEquals(this, obj); [EOL]         } [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testReflectionEquals() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); [EOL]         o2.setA(4); [EOL]         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); [EOL]  [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); [EOL]  [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); [EOL]         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiBooleanArray() { [EOL]         final boolean[][] array1 = new boolean[2][2]; [EOL]         final boolean[][] array2 = new boolean[2][2]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             for (int j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i == 1 || j == 1; [EOL]                 array2[i][j] = i == 1 || j == 1; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = false; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]          [EOL]         // compare 1 dim to 2. [EOL]         final boolean[] array3 = new boolean[]{true, true}; [EOL]         assertFalse(new EqualsBuilder().append(array1, array3).isEquals()); [EOL]         assertFalse(new EqualsBuilder().append(array3, array1).isEquals()); [EOL]         assertFalse(new EqualsBuilder().append(array2, array3).isEquals()); [EOL]         assertFalse(new EqualsBuilder().append(array3, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDouble() { [EOL]         final double o1 = 1; [EOL]         final double o2 = 2; [EOL]         assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]         assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectArray() { [EOL]         TestObject[] obj1 = new TestObject[3]; [EOL]         obj1[0] = new TestObject(4); [EOL]         obj1[1] = new TestObject(5); [EOL]         obj1[2] = null; [EOL]         TestObject[] obj2 = new TestObject[3]; [EOL]         obj2[0] = new TestObject(4); [EOL]         obj2[1] = new TestObject(5); [EOL]         obj2[2] = null; [EOL]          [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj2, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1].setA(6); [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1].setA(5); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[2] = obj1[1]; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[2] = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]                         [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArray() { [EOL]         long[] obj1 = new long[2]; [EOL]         obj1[0] = 5L; [EOL]         obj1[1] = 6L; [EOL]         long[] obj2 = new long[2]; [EOL]         obj2[0] = 5L; [EOL]         obj2[1] = 6L; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArray() { [EOL]         byte[] obj1 = new byte[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         byte[] obj2 = new byte[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] obj1 = new boolean[2]; [EOL]         obj1[0] = true; [EOL]         obj1[1] = false; [EOL]         boolean[] obj2 = new boolean[2]; [EOL]         obj2[0] = true; [EOL]         obj2[1] = false; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = true; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiBooleanArray() { [EOL]         final boolean[][] array1 = new boolean[2][2]; [EOL]         final boolean[][] array2 = new boolean[2][2]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             for (int j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i == 1 || j == 1; [EOL]                 array2[i][j] = i == 1 || j == 1; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = false; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]          [EOL]         // compare 1 dim to 2. [EOL]         final boolean[] array3 = new boolean[]{true, true}; [EOL]         assertFalse(new EqualsBuilder().append(array1, array3).isEquals()); [EOL]         assertFalse(new EqualsBuilder().append(array3, array1).isEquals()); [EOL]         assertFalse(new EqualsBuilder().append(array2, array3).isEquals()); [EOL]         assertFalse(new EqualsBuilder().append(array3, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
lang3/mutable/MutableShort.java
@Test [EOL]     public void testAddValueObject() { [EOL]         final MutableShort mutNum = new MutableShort((short) 1); [EOL]         mutNum.add(Short.valueOf((short) 1)); [EOL]          [EOL]         assertEquals((short) 2, mutNum.shortValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableShort mutNum = new MutableShort((short) 1); [EOL]         mutNum.subtract(Short.valueOf((short) 1)); [EOL]          [EOL]         assertEquals((short) 0, mutNum.shortValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToShort() { [EOL]         assertEquals(Short.valueOf((short) 0), new MutableShort((short) 0).toShort()); [EOL]         assertEquals(Short.valueOf((short) 123), new MutableShort((short) 123).toShort()); [EOL]     } [EOL]  [EOL]
lang3/StringUtils.java
@Test [EOL]     public void testDefaultIfBlank_StringBuffers() { [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]         assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), null)); [EOL]         // Tests compatibility for the API return type [EOL]         final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]         assertEquals("abc", s.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNotBlank() { [EOL]         assertFalse(StringUtils.isNotBlank(null)); [EOL]         assertFalse(StringUtils.isNotBlank("")); [EOL]         assertFalse(StringUtils.isNotBlank(StringUtilsTest.WHITESPACE)); [EOL]         assertTrue(StringUtils.isNotBlank("foo")); [EOL]         assertTrue(StringUtils.isNotBlank("  foo  ")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTrim() { [EOL]         assertEquals(FOO, StringUtils.trim(FOO + "  ")); [EOL]         assertEquals(FOO, StringUtils.trim(" " + FOO + "  ")); [EOL]         assertEquals(FOO, StringUtils.trim(" " + FOO)); [EOL]         assertEquals(FOO, StringUtils.trim(FOO + "")); [EOL]         assertEquals("", StringUtils.trim(" \t\r\n\b ")); [EOL]         assertEquals("", StringUtils.trim(StringUtilsTest.TRIMMABLE)); [EOL]         assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trim(StringUtilsTest.NON_TRIMMABLE)); [EOL]         assertEquals("", StringUtils.trim("")); [EOL]         assertEquals(null, StringUtils.trim(null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStripToEmpty_String() { [EOL]         assertEquals("", StringUtils.stripToEmpty(null)); [EOL]         assertEquals("", StringUtils.stripToEmpty("")); [EOL]         assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]         assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]         assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]         assertEquals(StringUtilsTest.NON_WHITESPACE,  [EOL]             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testStripEnd_StringString() { [EOL]         // null stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, null)); [EOL]         assertEquals("", StringUtils.stripEnd("", null)); [EOL]         assertEquals("", StringUtils.stripEnd("        ", null)); [EOL]         assertEquals("  abc", StringUtils.stripEnd("  abc  ", null)); [EOL]         assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,  [EOL]             StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]  [EOL]         // "" stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, "")); [EOL]         assertEquals("", StringUtils.stripEnd("", "")); [EOL]         assertEquals("        ", StringUtils.stripEnd("        ", "")); [EOL]         assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "")); [EOL]         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); [EOL]          [EOL]         // " " stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, " ")); [EOL]         assertEquals("", StringUtils.stripEnd("", " ")); [EOL]         assertEquals("", StringUtils.stripEnd("        ", " ")); [EOL]         assertEquals("  abc", StringUtils.stripEnd("  abc  ", " ")); [EOL]          [EOL]         // "ab" stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, "ab")); [EOL]         assertEquals("", StringUtils.stripEnd("", "ab")); [EOL]         assertEquals("        ", StringUtils.stripEnd("        ", "ab")); [EOL]         assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "ab")); [EOL]         assertEquals("abc", StringUtils.stripEnd("abcabab", "ab")); [EOL]         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLANG666() { [EOL]         assertEquals("12",StringUtils.stripEnd("120.00", ".0")); [EOL]         assertEquals("121",StringUtils.stripEnd("121.00", ".0")); [EOL]     } [EOL]  [EOL]     // Methods on StringUtils that are immutable in spirit (i.e. calculate the length)  [EOL]     // should take a CharSequence parameter. Methods that are mutable in spirit (i.e. capitalize)  [EOL]     // should take a String or String[] parameter and return String or String[]. [EOL]     // This test enforces that this is done. [EOL]
@Test [EOL]     public void testStripAll() { [EOL]         // test stripAll method, merely an array version of the above strip [EOL]         final String[] empty = new String[0]; [EOL]         final String[] fooSpace = new String[] { "  "+FOO+"  ", "  "+FOO, FOO+"  " }; [EOL]         final String[] fooDots = new String[] { ".."+FOO+"..", ".."+FOO, FOO+".." }; [EOL]         final String[] foo = new String[] { FOO, FOO, FOO }; [EOL]  [EOL]         assertNull(StringUtils.stripAll((String[]) null)); [EOL]         // Additional varargs tests [EOL]         assertArrayEquals(empty, StringUtils.stripAll()); // empty array [EOL]         assertArrayEquals(new String[]{null}, StringUtils.stripAll((String) null)); // == new String[]{null} [EOL]  [EOL]         assertArrayEquals(empty, StringUtils.stripAll(empty)); [EOL]         assertArrayEquals(foo, StringUtils.stripAll(fooSpace)); [EOL]          [EOL]         assertNull(StringUtils.stripAll(null, null)); [EOL]         assertArrayEquals(foo, StringUtils.stripAll(fooSpace, null)); [EOL]         assertArrayEquals(foo, StringUtils.stripAll(fooDots, ".")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.indexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.indexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.indexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.indexOf("", ' ', -1)); [EOL]         assertEquals(0, StringUtils.indexOf("aabaabaa", 'a', 0)); [EOL]         assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', 0)); [EOL]         assertEquals(5, StringUtils.indexOf("aabaabaa", 'b', 3)); [EOL]         assertEquals(-1, StringUtils.indexOf("aabaabaa", 'b', 9)); [EOL]         assertEquals(2, StringUtils.indexOf("aabaabaa", 'b', -1)); [EOL]  [EOL]         assertEquals(5, StringUtils.indexOf(new StringBuilder("aabaabaa"), 'b', 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOf_String() { [EOL]         assertEquals(-1, StringUtils.indexOf(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOf("", null)); [EOL]         assertEquals(0, StringUtils.indexOf("", "")); [EOL]         assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); [EOL]         assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); [EOL]         assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); [EOL]         assertEquals(0, StringUtils.indexOf("aabaabaa", "")); [EOL]  [EOL]         assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testOrdinalIndexOf() { [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]         assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]         assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]         assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]         assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]         assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]         assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]         assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]         assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]         assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]         assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]         assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]         assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]         assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testOrdinalIndexOf() { [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", -1)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 0)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", 0)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, 1)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("", "", 1)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "a", 1)); [EOL]         assertEquals(2, StringUtils.ordinalIndexOf("aabaabaa", "b", 1)); [EOL]         assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "ab", 1)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 1)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, 2)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, 2)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("", "", 2)); [EOL]         assertEquals(1, StringUtils.ordinalIndexOf("aabaabaa", "a", 2)); [EOL]         assertEquals(5, StringUtils.ordinalIndexOf("aabaabaa", "b", 2)); [EOL]         assertEquals(4, StringUtils.ordinalIndexOf("aabaabaa", "ab", 2)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", 2)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MAX_VALUE)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("", "", Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MAX_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MAX_VALUE)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MAX_VALUE)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 0)); [EOL]         assertEquals(0, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 1)); [EOL]         assertEquals(1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 2)); [EOL]         assertEquals(2, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 3)); [EOL]         assertEquals(3, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 4)); [EOL]         assertEquals(4, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 5)); [EOL]         assertEquals(5, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 6)); [EOL]         assertEquals(6, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 7)); [EOL]         assertEquals(7, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 8)); [EOL]         assertEquals(8, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 9)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aaaaaaaaa", "a", 10)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testIndexOfIgnoreCase_StringInt() { [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", -1)); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 0)); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 1)); [EOL]         assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 2)); [EOL]         assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 3)); [EOL]         assertEquals(4, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 4)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 5)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 6)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 7)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB", 8)); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aab", "AB", 1)); [EOL]         assertEquals(5, StringUtils.indexOfIgnoreCase("aabaabaa", "", 5)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("ab", "AAB", 0)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("aab", "AAB", 1)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_char() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]  [EOL]         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_char() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]  [EOL]         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_StringInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, "", -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", null, -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("", "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", "", -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("", "", 9)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("abc", "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("abc", "", -1)); [EOL]         assertEquals(3, StringUtils.lastIndexOf("abc", "", 9)); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", "a", 8)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 8)); [EOL]         assertEquals(4, StringUtils.lastIndexOf("aabaabaa", "ab", 8)); [EOL]         assertEquals(2, StringUtils.lastIndexOf("aabaabaa", "b", 3)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", "b", 9)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", "b", 0)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("aabaabaa", "a", 0)); [EOL]  [EOL]         assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), "b", 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]         assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]         assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aab", "AAB")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfIgnoreCase_StringInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1)); [EOL]         assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9)); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 8)); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB", 8)); [EOL]         assertEquals(2, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 3)); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 9)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B", 0)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 0)); [EOL]         assertEquals(1, StringUtils.lastIndexOfIgnoreCase("aab", "AB", 1)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains_Char() { [EOL]         assertFalse(StringUtils.contains(null, ' ')); [EOL]         assertFalse(StringUtils.contains("", ' ')); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertTrue(StringUtils.contains("abc", 'a')); [EOL]         assertTrue(StringUtils.contains("abc", 'b')); [EOL]         assertTrue(StringUtils.contains("abc", 'c')); [EOL]         assertFalse(StringUtils.contains("abc", 'z')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001)); [EOL]         assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001)); [EOL]         assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow)); [EOL]         assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + "a", "a")); [EOL]         assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + "a", "a")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testContains_Char() { [EOL]         assertFalse(StringUtils.contains(null, ' ')); [EOL]         assertFalse(StringUtils.contains("", ' ')); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertTrue(StringUtils.contains("abc", 'a')); [EOL]         assertTrue(StringUtils.contains("abc", 'b')); [EOL]         assertTrue(StringUtils.contains("abc", 'c')); [EOL]         assertFalse(StringUtils.contains("abc", 'z')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertFalse(StringUtils.contains(CharUSuppCharHigh, CharU20001)); [EOL]         assertFalse(StringUtils.contains(CharUSuppCharLow, CharU20001)); [EOL]         assertFalse(StringUtils.contains(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertTrue(StringUtils.contains(CharU20001, CharUSuppCharLow)); [EOL]         assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharLow + "a", "a")); [EOL]         assertTrue(StringUtils.contains(CharU20001 + CharUSuppCharHigh + "a", "a")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testContainsIgnoreCase_StringString() { [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]  [EOL]         // Null tests [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]  [EOL]         assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]         assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]         assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]  [EOL]         // Match len = 0 [EOL]         assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]  [EOL]         // Match len = 1 [EOL]         assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]         assertFalse(StringUtils.containsIgnoreCase("", "A")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("a", "A")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("abc", "A")); [EOL]  [EOL]         // Match len > 1 [EOL]         assertFalse(StringUtils.containsIgnoreCase("", "abc")); [EOL]         assertFalse(StringUtils.containsIgnoreCase("a", "abc")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("xabcz", "abc")); [EOL]         assertFalse(StringUtils.containsIgnoreCase("", "ABC")); [EOL]         assertFalse(StringUtils.containsIgnoreCase("a", "ABC")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("xabcz", "ABC")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAny_StringString() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, "ab")); [EOL]  [EOL]         assertEquals(-1, StringUtils.indexOfAny("", (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", "")); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", "ab")); [EOL]  [EOL]         assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny("zzabyycdxx", "")); [EOL]         assertEquals(0, StringUtils.indexOfAny("zzabyycdxx", "za")); [EOL]         assertEquals(3, StringUtils.indexOfAny("zzabyycdxx", "by")); [EOL]         assertEquals(-1, StringUtils.indexOfAny("ab", "z")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsAny_StringCharArrayWithSupplementaryChars() { [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertTrue(StringUtils.containsAny("a" + CharU20000 + CharU20001, "a".toCharArray())); [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + "a" + CharU20001, "a".toCharArray())); [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001 + "a", "a".toCharArray())); [EOL]         assertTrue(StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertTrue(StringUtils.containsAny(CharU20000, CharU20000.toCharArray())); [EOL]         // Sanity check: [EOL]         assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]         // Test: [EOL]         assertFalse(StringUtils.containsAny(CharU20000, CharU20001.toCharArray())); [EOL]         assertFalse(StringUtils.containsAny(CharU20001, CharU20000.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsAny_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertFalse(StringUtils.containsAny(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertFalse(StringUtils.containsAny(CharUSuppCharLow, CharU20001)); [EOL]         assertFalse(StringUtils.containsAny(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertTrue(StringUtils.containsAny(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringString() { [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab")); [EOL]  [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("", "")); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("", "ab")); [EOL]  [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", "")); [EOL]         assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za")); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by")); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut("ab", "z")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringString() { [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(null, (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(null, "ab")); [EOL]  [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("", (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("", "")); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("", "ab")); [EOL]  [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", (String) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut("zzabyycdxx", "")); [EOL]         assertEquals(3, StringUtils.indexOfAnyBut("zzabyycdxx", "za")); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut("zzabyycdxx", "by")); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut("ab", "z")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testContainsNone_CharArrayWithSupplementaryChars() { [EOL]         assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertFalse(StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertFalse(StringUtils.containsNone(CharU20000, CharU20000.toCharArray())); [EOL]         // Sanity check: [EOL]         assertEquals(-1, CharU20000.indexOf(CharU20001)); [EOL]         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0))); [EOL]         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1))); [EOL]         // Test: [EOL]         assertTrue(StringUtils.containsNone(CharU20000, CharU20001.toCharArray())); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharU20000.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.indexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null})); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.indexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null})); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, new String[] {null})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg [EOL]         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg [EOL]         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg [EOL]         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(6, StringUtils.lastIndexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.lastIndexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {null})); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[] {null})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubstring_StringIntInt() { [EOL]         assertEquals(null, StringUtils.substring(null, 0, 0)); [EOL]         assertEquals(null, StringUtils.substring(null, 1, 2)); [EOL]         assertEquals("", StringUtils.substring("", 0, 0)); [EOL]         assertEquals("", StringUtils.substring("", 1, 2)); [EOL]         assertEquals("", StringUtils.substring("", -2, -1)); [EOL]          [EOL]         assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); [EOL]         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); [EOL]         assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); [EOL]         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8)); [EOL]         assertEquals("o", StringUtils.substring(SENTENCE, -9, -8)); [EOL]         assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80)); [EOL]         assertEquals("", StringUtils.substring(SENTENCE, 2, 2)); [EOL]         assertEquals("b",StringUtils.substring("abc", -2, -1)); [EOL]     } [EOL]             [EOL]
@Test [EOL]     public void testSubstring_StringIntInt() { [EOL]         assertEquals(null, StringUtils.substring(null, 0, 0)); [EOL]         assertEquals(null, StringUtils.substring(null, 1, 2)); [EOL]         assertEquals("", StringUtils.substring("", 0, 0)); [EOL]         assertEquals("", StringUtils.substring("", 1, 2)); [EOL]         assertEquals("", StringUtils.substring("", -2, -1)); [EOL]          [EOL]         assertEquals("", StringUtils.substring(SENTENCE, 8, 6)); [EOL]         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, 3)); [EOL]         assertEquals("o", StringUtils.substring(SENTENCE, -9, 3)); [EOL]         assertEquals(FOO, StringUtils.substring(SENTENCE, 0, -8)); [EOL]         assertEquals("o", StringUtils.substring(SENTENCE, -9, -8)); [EOL]         assertEquals(SENTENCE, StringUtils.substring(SENTENCE, 0, 80)); [EOL]         assertEquals("", StringUtils.substring(SENTENCE, 2, 2)); [EOL]         assertEquals("b",StringUtils.substring("abc", -2, -1)); [EOL]     } [EOL]             [EOL]
@Test [EOL]     public void testLeft_String() { [EOL]         assertSame(null, StringUtils.left(null, -1)); [EOL]         assertSame(null, StringUtils.left(null, 0)); [EOL]         assertSame(null, StringUtils.left(null, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.left("", -1)); [EOL]         assertEquals("", StringUtils.left("", 0)); [EOL]         assertEquals("", StringUtils.left("", 2)); [EOL]          [EOL]         assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]         assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]         assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]         assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRight_String() { [EOL]         assertSame(null, StringUtils.right(null, -1)); [EOL]         assertSame(null, StringUtils.right(null, 0)); [EOL]         assertSame(null, StringUtils.right(null, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.right("", -1)); [EOL]         assertEquals("", StringUtils.right("", 0)); [EOL]         assertEquals("", StringUtils.right("", 2)); [EOL]          [EOL]         assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]         assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]         assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]         assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid("", 0, -1)); [EOL]         assertEquals("", StringUtils.mid("", 0, 0)); [EOL]         assertEquals("", StringUtils.mid("", 0, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]         assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]         assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid("", 0, -1)); [EOL]         assertEquals("", StringUtils.mid("", 0, 0)); [EOL]         assertEquals("", StringUtils.mid("", 0, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]         assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]         assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid("", 0, -1)); [EOL]         assertEquals("", StringUtils.mid("", 0, 0)); [EOL]         assertEquals("", StringUtils.mid("", 0, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]         assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]         assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 9, 3)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, -1, 3)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBefore("", null)); [EOL]         assertEquals("", StringUtils.substringBefore("", "")); [EOL]         assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]          [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]         assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]         assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]         assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBefore("", null)); [EOL]         assertEquals("", StringUtils.substringBefore("", "")); [EOL]         assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]          [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]         assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]         assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]         assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBefore("", null)); [EOL]         assertEquals("", StringUtils.substringBefore("", "")); [EOL]         assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]          [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]         assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]         assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]         assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfter("", null)); [EOL]         assertEquals("", StringUtils.substringAfter("", "")); [EOL]         assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]          [EOL]         assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]         assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]         assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]         assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfter("", null)); [EOL]         assertEquals("", StringUtils.substringAfter("", "")); [EOL]         assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]          [EOL]         assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]         assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]         assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]         assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfter("", null)); [EOL]         assertEquals("", StringUtils.substringAfter("", "")); [EOL]         assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]          [EOL]         assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]         assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]         assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]         assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfter("", null)); [EOL]         assertEquals("", StringUtils.substringAfter("", "")); [EOL]         assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]          [EOL]         assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]         assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]         assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]         assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubstringBeforeLast_StringString() { [EOL]         assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, null)); [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, "")); [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBeforeLast("", null)); [EOL]         assertEquals("", StringUtils.substringBeforeLast("", "")); [EOL]         assertEquals("", StringUtils.substringBeforeLast("", "XX")); [EOL]  [EOL]         assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBeforeLast("foo", "b")); [EOL]         assertEquals("fo", StringUtils.substringBeforeLast("foo", "o")); [EOL]         assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d")); [EOL]         assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d")); [EOL]         assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d")); [EOL]         assertEquals("a", StringUtils.substringBeforeLast("abc", "b")); [EOL]         assertEquals("abc ", StringUtils.substringBeforeLast("abc \n", "\n")); [EOL]         assertEquals("a", StringUtils.substringBeforeLast("a", null)); [EOL]         assertEquals("a", StringUtils.substringBeforeLast("a", "")); [EOL]         assertEquals("", StringUtils.substringBeforeLast("a", "a")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubstringAfterLast_StringString() { [EOL]         assertEquals("baz", StringUtils.substringAfterLast("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringAfterLast(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfterLast(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfterLast(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfterLast("", null)); [EOL]         assertEquals("", StringUtils.substringAfterLast("", "")); [EOL]         assertEquals("", StringUtils.substringAfterLast("", "a")); [EOL]  [EOL]         assertEquals("", StringUtils.substringAfterLast("foo", null)); [EOL]         assertEquals("", StringUtils.substringAfterLast("foo", "b")); [EOL]         assertEquals("t", StringUtils.substringAfterLast("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfterLast("abc", "a")); [EOL]         assertEquals("a", StringUtils.substringAfterLast("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfterLast("abc", "c")); [EOL]         assertEquals("", StringUtils.substringAfterLast("", "d")); [EOL]         assertEquals("", StringUtils.substringAfterLast("abc", "")); [EOL]     }         [EOL]          [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringBetween_StringStringString() { [EOL]         assertEquals(null, StringUtils.substringBetween(null, "", "")); [EOL]         assertEquals(null, StringUtils.substringBetween("", null, "")); [EOL]         assertEquals(null, StringUtils.substringBetween("", "", null)); [EOL]         assertEquals("", StringUtils.substringBetween("", "", "")); [EOL]         assertEquals("", StringUtils.substringBetween("foo", "", "")); [EOL]         assertEquals(null, StringUtils.substringBetween("foo", "", "]")); [EOL]         assertEquals(null, StringUtils.substringBetween("foo", "[", "]")); [EOL]         assertEquals("", StringUtils.substringBetween("    ", " ", "  ")); [EOL]         assertEquals("bar", StringUtils.substringBetween("<foo>bar</foo>", "<foo>", "</foo>") ); [EOL]     } [EOL]  [EOL]    /** [EOL]      * Tests the substringsBetween method that returns an String Array of substrings. [EOL]      */ [EOL]
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("three", results[0]); [EOL]  [EOL]         // 'ab hello ba' will match, but 'ab non ba' won't [EOL]         // this is because the 'a' is shared between the two and can't be matched twice [EOL]         results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("hello", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween(null, "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("", "[", "]"); [EOL]         assertEquals(0, results.length); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("three", results[0]); [EOL]  [EOL]         // 'ab hello ba' will match, but 'ab non ba' won't [EOL]         // this is because the 'a' is shared between the two and can't be matched twice [EOL]         results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("hello", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween(null, "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("", "[", "]"); [EOL]         assertEquals(0, results.length); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("three", results[0]); [EOL]  [EOL]         // 'ab hello ba' will match, but 'ab non ba' won't [EOL]         // this is because the 'a' is shared between the two and can't be matched twice [EOL]         results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("hello", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween(null, "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("", "[", "]"); [EOL]         assertEquals(0, results.length); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("three", results[0]); [EOL]  [EOL]         // 'ab hello ba' will match, but 'ab non ba' won't [EOL]         // this is because the 'a' is shared between the two and can't be matched twice [EOL]         results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("hello", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween(null, "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("", "[", "]"); [EOL]         assertEquals(0, results.length); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("three", results[0]); [EOL]  [EOL]         // 'ab hello ba' will match, but 'ab non ba' won't [EOL]         // this is because the 'a' is shared between the two and can't be matched twice [EOL]         results = StringUtils.substringsBetween("aabhellobabnonba", "ab", "ba"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("hello", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one, two, three", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("one, two, three]", "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "[", null); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", null, "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], [three]", "", ""); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween(null, "[", "]"); [EOL]         assertNull(results); [EOL]  [EOL]         results = StringUtils.substringsBetween("", "[", "]"); [EOL]         assertEquals(0, results.length); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSplit_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.split(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.split(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.split("", ".").length); [EOL]         assertEquals(0, StringUtils.split("", ".", 3).length); [EOL]          [EOL]         innerTestSplit('.', ".", ' '); [EOL]         innerTestSplit('.', ".", ','); [EOL]         innerTestSplit('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplit(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplit(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]          [EOL]         String[] results; [EOL]         final String[] expectedResults = {"ab", "de fg"}; [EOL]         results = StringUtils.split("ab   de fg", null, 2); [EOL]         assertEquals(expectedResults.length, results.length); [EOL]         for (int i = 0; i < expectedResults.length; i++) { [EOL]             assertEquals(expectedResults[i], results[i]); [EOL]         } [EOL]          [EOL]         final String[] expectedResults2 = {"ab", "cd:ef"}; [EOL]         results = StringUtils.split("ab:cd:ef",":", 2); [EOL]         assertEquals(expectedResults2.length, results.length); [EOL]         for (int i = 0; i < expectedResults2.length; i++) { [EOL]             assertEquals(expectedResults2[i], results[i]); [EOL]         } [EOL]     } [EOL]      [EOL]     private void innerTestSplit(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.split(str, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, noMatch + "c", res[2]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.split(str2, sepStr); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]  [EOL]         res = StringUtils.split(str, sepStr, -1); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, noMatch + "c", res[2]); [EOL]          [EOL]         res = StringUtils.split(str, sepStr, 0); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, noMatch + "c", res[2]); [EOL]          [EOL]         res = StringUtils.split(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.split(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals(" c", res[2]); [EOL]              [EOL]         str = "a.b.. c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals(" c", res[3]); [EOL]  [EOL]         str = ".a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         [EOL]         str = ".a.."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]          [EOL]         str = "a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]  [EOL]         str = "a  b  c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]          [EOL]         str = " a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("c", res[3]); [EOL]  [EOL]         str = "  a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("b", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]  [EOL]         str = "a b c "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         str = "a b c  "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         // Match example in javadoc [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"a", "", "b", "c"}; [EOL]           results = StringUtils.splitPreserveAllTokens("a..b.c",'.'); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals(" c", res[2]); [EOL]              [EOL]         str = "a.b.. c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals(" c", res[3]); [EOL]  [EOL]         str = ".a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         [EOL]         str = ".a.."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]          [EOL]         str = "a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]  [EOL]         str = "a  b  c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]          [EOL]         str = " a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("c", res[3]); [EOL]  [EOL]         str = "  a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("b", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]  [EOL]         str = "a b c "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         str = "a b c  "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         // Match example in javadoc [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"a", "", "b", "c"}; [EOL]           results = StringUtils.splitPreserveAllTokens("a..b.c",'.'); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals(" c", res[2]); [EOL]              [EOL]         str = "a.b.. c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals(" c", res[3]); [EOL]  [EOL]         str = ".a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         [EOL]         str = ".a.."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]          [EOL]         str = "a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]  [EOL]         str = "a  b  c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]          [EOL]         str = " a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("c", res[3]); [EOL]  [EOL]         str = "  a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("b", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]  [EOL]         str = "a b c "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         str = "a b c  "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         // Match example in javadoc [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"a", "", "b", "c"}; [EOL]           results = StringUtils.splitPreserveAllTokens("a..b.c",'.'); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringChar() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, '.')); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", '.').length); [EOL]  [EOL]         String str = "a.b. c"; [EOL]         String[] res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals(" c", res[2]); [EOL]              [EOL]         str = "a.b.. c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals(" c", res[3]); [EOL]  [EOL]         str = ".a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         [EOL]         str = ".a.."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a."; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("", res[3]); [EOL]          [EOL]         str = "..a"; [EOL]         res = StringUtils.splitPreserveAllTokens(str, '.'); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]          [EOL]         str = "a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(3, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]  [EOL]         str = "a  b  c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]          [EOL]         str = " a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("a", res[1]); [EOL]         assertEquals("b", res[2]); [EOL]         assertEquals("c", res[3]); [EOL]  [EOL]         str = "  a b c"; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("", res[0]); [EOL]         assertEquals("", res[1]); [EOL]         assertEquals("a", res[2]); [EOL]         assertEquals("b", res[3]); [EOL]         assertEquals("c", res[4]); [EOL]  [EOL]         str = "a b c "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(4, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         str = "a b c  "; [EOL]         res = StringUtils.splitPreserveAllTokens(str,' '); [EOL]         assertEquals(5, res.length); [EOL]         assertEquals("a", res[0]); [EOL]         assertEquals("b", res[1]); [EOL]         assertEquals("c", res[2]); [EOL]         assertEquals("", res[3]); [EOL]         assertEquals("", res[3]); [EOL]  [EOL]         // Match example in javadoc [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"a", "", "b", "c"}; [EOL]           results = StringUtils.splitPreserveAllTokens("a..b.c",'.'); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter multichar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "2", ":3", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, "::", -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter char with max [EOL]         input = "1::2::3:4"; [EOL]         expected = new String[] { "1", "", "2", ":3:4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", 4 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "  de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "::de:fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::de:fg", ":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", " de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "de fg"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab   de fg", null, 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           final String[] expectedResults = {"ab", "cd:ef"}; [EOL]           String[] results; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab::cd:ef",":", 2); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", ":cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 3); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("ab:::cd:ef",":", 4); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]  [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens(":ab:::cd:ef",":", 5); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]         { [EOL]           String[] results; [EOL]           final String[] expectedResults = {"", "", "ab", "", "", "cd:ef"}; [EOL]           results = StringUtils.splitPreserveAllTokens("::ab:::cd:ef",":", 6); [EOL]           assertEquals(expectedResults.length, results.length); [EOL]           for (int i = 0; i < expectedResults.length; i++) { [EOL]               assertEquals(expectedResults[i], results[i]); [EOL]           } [EOL]         } [EOL]          [EOL]     } [EOL]      [EOL]     private void innerTestSplitPreserveAllTokens(final char separator, final String sepStr, final char noMatch) { [EOL]         final String msg = "Failed on separator hex(" + Integer.toHexString(separator) + [EOL]             "), noMatch hex(" + Integer.toHexString(noMatch) + "), sepStr(" + sepStr + ")"; [EOL]          [EOL]         final String str = "a" + separator + "b" + separator + separator + noMatch + "c"; [EOL]         String[] res; [EOL]         // (str, sepStr) [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         final String str2 = separator + "a" + separator; [EOL]         res = StringUtils.splitPreserveAllTokens(str2, sepStr); [EOL]         assertEquals(msg, 3, res.length); [EOL]         assertEquals(msg, "", res[0]); [EOL]         assertEquals(msg, "a", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]  [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, -1); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 0); [EOL]         assertEquals(msg, 4, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, "b", res[1]); [EOL]         assertEquals(msg, "", res[2]); [EOL]         assertEquals(msg, noMatch + "c", res[3]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 1); [EOL]         assertEquals(msg, 1, res.length); [EOL]         assertEquals(msg, str, res[0]); [EOL]          [EOL]         res = StringUtils.splitPreserveAllTokens(str, sepStr, 2); [EOL]         assertEquals(msg, 2, res.length); [EOL]         assertEquals(msg, "a", res[0]); [EOL]         assertEquals(msg, str.substring(2), res[1]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("fooBar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "200", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo200Bar"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ASF", "Rules" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("ASFRules"))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_ArrayOfLongs() { [EOL]         assertEquals(null, StringUtils.join((long[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(LONG_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfChars() { [EOL]         assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseDelimited_StringChar() { [EOL]         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); [EOL]         assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReverseDelimited_StringChar() { [EOL]         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); [EOL]         assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfShorts() { [EOL]         assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfShorts() { [EOL]         assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfChars() { [EOL]         assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfDoubles() { [EOL]         assertEquals(null, StringUtils.join((double[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(DOUBLE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfFloats() { [EOL]         assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfFloats() { [EOL]         assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_Objectarray() { [EOL] //        assertEquals(null, StringUtils.join(null)); // generates warning [EOL]         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast [EOL]         // test additional varargs calls [EOL]         assertEquals("", StringUtils.join()); // empty array [EOL]         assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null} [EOL]  [EOL]         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]         assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]         assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"})); [EOL]         assertEquals("a", StringUtils.join(new String[] {null, "a", ""})); [EOL]         assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]         assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteWhitespace_String() { [EOL]         assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]         assertEquals("", StringUtils.deleteWhitespace("")); [EOL]         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]         assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]         assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]         // Note: u-2007 and u-000A both cause problems in the source code [EOL]         // it should ignore 2007 but delete 000A [EOL]         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]         assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteWhitespace_String() { [EOL]         assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]         assertEquals("", StringUtils.deleteWhitespace("")); [EOL]         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]         assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]         assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]         // Note: u-2007 and u-000A both cause problems in the source code [EOL]         // it should ignore 2007 but delete 000A [EOL]         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]         assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveStartIgnoreCase() { [EOL]         // StringUtils.removeStart("", *)        = "" [EOL]         assertNull("removeStartIgnoreCase(null, null)", StringUtils.removeStartIgnoreCase(null, null)); [EOL]         assertNull("removeStartIgnoreCase(null, \"\")", StringUtils.removeStartIgnoreCase(null, "")); [EOL]         assertNull("removeStartIgnoreCase(null, \"a\")", StringUtils.removeStartIgnoreCase(null, "a")); [EOL]          [EOL]         // StringUtils.removeStart(*, null)      = * [EOL]         assertEquals("removeStartIgnoreCase(\"\", null)", StringUtils.removeStartIgnoreCase("", null), ""); [EOL]         assertEquals("removeStartIgnoreCase(\"\", \"\")", StringUtils.removeStartIgnoreCase("", ""), ""); [EOL]         assertEquals("removeStartIgnoreCase(\"\", \"a\")", StringUtils.removeStartIgnoreCase("", "a"), ""); [EOL]          [EOL]         // All others: [EOL]         assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "www."), "domain.com"); [EOL]         assertEquals("removeStartIgnoreCase(\"domain.com\", \"www.\")", StringUtils.removeStartIgnoreCase("domain.com", "www."), "domain.com"); [EOL]         assertEquals("removeStartIgnoreCase(\"domain.com\", \"\")", StringUtils.removeStartIgnoreCase("domain.com", ""), "domain.com");         [EOL]         assertEquals("removeStartIgnoreCase(\"domain.com\", null)", StringUtils.removeStartIgnoreCase("domain.com", null), "domain.com");         [EOL]          [EOL]         // Case insensitive: [EOL]         assertEquals("removeStartIgnoreCase(\"www.domain.com\", \"WWW.\")", StringUtils.removeStartIgnoreCase("www.domain.com", "WWW."), "domain.com"); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]         assertEquals("", StringUtils.repeat("", "", 2)); [EOL]  [EOL]         assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]  [EOL]         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveEndIgnoreCase() { [EOL]         // StringUtils.removeEndIgnoreCase("", *)        = "" [EOL]         assertNull("removeEndIgnoreCase(null, null)", StringUtils.removeEndIgnoreCase(null, null)); [EOL]         assertNull("removeEndIgnoreCase(null, \"\")", StringUtils.removeEndIgnoreCase(null, "")); [EOL]         assertNull("removeEndIgnoreCase(null, \"a\")", StringUtils.removeEndIgnoreCase(null, "a")); [EOL]          [EOL]         // StringUtils.removeEnd(*, null)      = * [EOL]         assertEquals("removeEndIgnoreCase(\"\", null)", StringUtils.removeEndIgnoreCase("", null), ""); [EOL]         assertEquals("removeEndIgnoreCase(\"\", \"\")", StringUtils.removeEndIgnoreCase("", ""), ""); [EOL]         assertEquals("removeEndIgnoreCase(\"\", \"a\")", StringUtils.removeEndIgnoreCase("", "a"), ""); [EOL]          [EOL]         // All others: [EOL]         assertEquals("removeEndIgnoreCase(\"www.domain.com.\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com.", ".com"), "www.domain.com."); [EOL]         assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".com"), "www.domain"); [EOL]         assertEquals("removeEndIgnoreCase(\"www.domain\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain", ".com"), "www.domain"); [EOL]         assertEquals("removeEndIgnoreCase(\"domain.com\", \"\")", StringUtils.removeEndIgnoreCase("domain.com", ""), "domain.com");    [EOL]         assertEquals("removeEndIgnoreCase(\"domain.com\", null)", StringUtils.removeEndIgnoreCase("domain.com", null), "domain.com");    [EOL]  [EOL]         // Case insensitive: [EOL]         assertEquals("removeEndIgnoreCase(\"www.domain.com\", \".COM\")", StringUtils.removeEndIgnoreCase("www.domain.com", ".COM"), "www.domain"); [EOL]         assertEquals("removeEndIgnoreCase(\"www.domain.COM\", \".com\")", StringUtils.removeEndIgnoreCase("www.domain.COM", ".com"), "www.domain"); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReplace_StringStringStringInt() { [EOL]         assertEquals(null, StringUtils.replace(null, null, null, 2)); [EOL]         assertEquals(null, StringUtils.replace(null, null, "any", 2)); [EOL]         assertEquals(null, StringUtils.replace(null, "any", null, 2)); [EOL]         assertEquals(null, StringUtils.replace(null, "any", "any", 2)); [EOL]  [EOL]         assertEquals("", StringUtils.replace("", null, null, 2)); [EOL]         assertEquals("", StringUtils.replace("", null, "any", 2)); [EOL]         assertEquals("", StringUtils.replace("", "any", null, 2)); [EOL]         assertEquals("", StringUtils.replace("", "any", "any", 2)); [EOL]          [EOL]         final String str = new String(new char[] {'o', 'o', 'f', 'o', 'o'}); [EOL]         assertSame(str, StringUtils.replace(str, "x", "", -1)); [EOL]          [EOL]         assertEquals("f", StringUtils.replace("oofoo", "o", "", -1)); [EOL]         assertEquals("oofoo", StringUtils.replace("oofoo", "o", "", 0)); [EOL]         assertEquals("ofoo", StringUtils.replace("oofoo", "o", "", 1)); [EOL]         assertEquals("foo", StringUtils.replace("oofoo", "o", "", 2)); [EOL]         assertEquals("fo", StringUtils.replace("oofoo", "o", "", 3)); [EOL]         assertEquals("f", StringUtils.replace("oofoo", "o", "", 4)); [EOL]          [EOL]         assertEquals("f", StringUtils.replace("oofoo", "o", "", -5)); [EOL]         assertEquals("f", StringUtils.replace("oofoo", "o", "", 1000)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("a", StringUtils.remove("a", "")); [EOL]          [EOL]         // StringUtils.remove("queued", "ue") = "qd" [EOL]         assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]          [EOL]         // StringUtils.remove("queued", "zz") = "queued" [EOL]         assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("a", StringUtils.remove("a", "")); [EOL]          [EOL]         // StringUtils.remove("queued", "ue") = "qd" [EOL]         assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]          [EOL]         // StringUtils.remove("queued", "zz") = "queued" [EOL]         assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("a", StringUtils.remove("a", "")); [EOL]          [EOL]         // StringUtils.remove("queued", "ue") = "qd" [EOL]         assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]          [EOL]         // StringUtils.remove("queued", "zz") = "queued" [EOL]         assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("a", StringUtils.remove("a", "")); [EOL]          [EOL]         // StringUtils.remove("queued", "ue") = "qd" [EOL]         assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]          [EOL]         // StringUtils.remove("queued", "zz") = "queued" [EOL]         assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("a", StringUtils.remove("a", "")); [EOL]          [EOL]         // StringUtils.remove("queued", "ue") = "qd" [EOL]         assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]          [EOL]         // StringUtils.remove("queued", "zz") = "queued" [EOL]         assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("a", StringUtils.remove("a", "")); [EOL]          [EOL]         // StringUtils.remove("queued", "ue") = "qd" [EOL]         assertEquals("qd", StringUtils.remove("queued", "ue")); [EOL]          [EOL]         // StringUtils.remove("queued", "zz") = "queued" [EOL]         assertEquals("queued", StringUtils.remove("queued", "zz")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b"}, new String[]{"b", "c"})); [EOL]         assertEquals("q651.506bera", StringUtils.replaceEach("d216.102oren", [EOL]             new String[]{"a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n",  [EOL]                 "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "A", "B", "C", "D",  [EOL]                 "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T",  [EOL]                 "U", "V", "W", "X", "Y", "Z", "1", "2", "3", "4", "5", "6", "7", "8", "9"}, [EOL]             new String[]{"n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "a",  [EOL]                 "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "N", "O", "P", "Q",  [EOL]                 "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "A", "B", "C", "D", "E", "F", "G",  [EOL]                 "H", "I", "J", "K", "L", "M", "5", "6", "7", "8", "9", "1", "2", "3", "4"})); [EOL]  [EOL]         // Test null safety inside arrays - LANG-552 [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{null}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a", "b"}, new String[]{"c", null}),"cbc"); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test method for 'StringUtils.replaceEachRepeatedly(String, String[], String[])' [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArrayBoolean() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEachRepeatedly(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[0], null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"tcte"); [EOL]  [EOL]         try { [EOL]             StringUtils.replaceEachRepeatedly("abcde", new String[]{"ab", "d"}, new String[]{"d", "ab"}); [EOL]             fail("Should be a circular reference"); [EOL]         } catch (final IllegalStateException e) {} [EOL]  [EOL]         //JAVADOC TESTS END [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]          [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]         assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]          [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]         assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]          [EOL]         // Javadoc examples: [EOL]         assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 [EOL]         assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]         assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", [EOL]             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", [EOL]             "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]          [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]         assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]          [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]         assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]          [EOL]         // Javadoc examples: [EOL]         assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 [EOL]         assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]         assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", [EOL]             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", [EOL]             "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]          [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]         assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]          [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]         assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]          [EOL]         // Javadoc examples: [EOL]         assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 [EOL]         assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]         assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", [EOL]             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", [EOL]             "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]          [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]         assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]          [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]         assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]          [EOL]         // Javadoc examples: [EOL]         assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 [EOL]         assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]         assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", [EOL]             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", [EOL]             "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]          [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]         assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]          [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]         assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]          [EOL]         // Javadoc examples: [EOL]         assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 [EOL]         assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]         assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", [EOL]             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", [EOL]             "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", "", "x")); [EOL]          [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", null)); [EOL]         assertEquals("ac", StringUtils.replaceChars("abc", "b", "")); [EOL]         assertEquals("axc", StringUtils.replaceChars("abc", "b", "x")); [EOL]          [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         assertEquals("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]         assertSame("abcba", StringUtils.replaceChars("abcba", "z", "w")); [EOL]          [EOL]         // Javadoc examples: [EOL]         assertEquals("jelly", StringUtils.replaceChars("hello", "ho", "jy")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yz")); [EOL]         assertEquals("ayya", StringUtils.replaceChars("abcba", "bc", "y")); [EOL]         assertEquals("ayzya", StringUtils.replaceChars("abcba", "bc", "yzx")); [EOL]          [EOL]         // From http://issues.apache.org/bugzilla/show_bug.cgi?id=25454 [EOL]         assertEquals("bcc", StringUtils.replaceChars("abc", "ab", "bc")); [EOL]         assertEquals("q651.506bera", StringUtils.replaceChars("d216.102oren", [EOL]             "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ123456789", [EOL]             "nopqrstuvwxyzabcdefghijklmNOPQRSTUVWXYZABCDEFGHIJKLM567891234")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testOverlay_StringStringIntInt() { [EOL]         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]          [EOL]         assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]         assertEquals("", StringUtils.overlay("", "", 0, 0)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); [EOL]          [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); [EOL]         assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); [EOL]         assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); [EOL]          [EOL]         assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); [EOL]         assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); [EOL]         assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); [EOL]         assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); [EOL]         assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); [EOL]         assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); [EOL]         assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); [EOL]         assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testOverlay_StringStringIntInt() { [EOL]         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]          [EOL]         assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]         assertEquals("", StringUtils.overlay("", "", 0, 0)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); [EOL]          [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); [EOL]         assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); [EOL]         assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 4, 2)); [EOL]          [EOL]         assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", -1, 4)); [EOL]         assertEquals("zzzzef", StringUtils.overlay("abcdef", "zzzz", 4, -1)); [EOL]         assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -2, -1)); [EOL]         assertEquals("zzzzabcdef", StringUtils.overlay("abcdef", "zzzz", -1, -2)); [EOL]         assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 4, 10)); [EOL]         assertEquals("abcdzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 4)); [EOL]         assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 8, 10)); [EOL]         assertEquals("abcdefzzzz", StringUtils.overlay("abcdef", "zzzz", 10, 8)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, [EOL]             { FOO_UNCAP, FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"}, [EOL]             { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, [EOL]             { "foo\nfoo", "foo\nfoo" }, [EOL]             { "foo\n\rfoo", "foo\n\rfoo" }, [EOL]             { "\n", "" }, [EOL]             { "\r", "" }, [EOL]             { "a", "a" }, [EOL]             { "\r\n", "" }, [EOL]             { "", "" }, [EOL]             { null, null }, [EOL]             { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n"} [EOL]         }; [EOL]         for (final String[] chompCase : chompCases) { [EOL]             final String original = chompCase[0]; [EOL]             final String expectedResult = chompCase[1]; [EOL]             assertEquals("chomp(String) failed", [EOL]                     expectedResult, StringUtils.chomp(original)); [EOL]         } [EOL]  [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo", StringUtils.chomp("foobar", "bar")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", "baz")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo", StringUtils.chomp("foo", "foooo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("foo", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 " ", StringUtils.chomp(" foo", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo ", StringUtils.chomp("foo ", "foo")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, [EOL]             { FOO_UNCAP, FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"}, [EOL]             { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, [EOL]             { "foo\nfoo", "foo\nfoo" }, [EOL]             { "foo\n\rfoo", "foo\n\rfoo" }, [EOL]             { "\n", "" }, [EOL]             { "\r", "" }, [EOL]             { "a", "a" }, [EOL]             { "\r\n", "" }, [EOL]             { "", "" }, [EOL]             { null, null }, [EOL]             { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n"} [EOL]         }; [EOL]         for (final String[] chompCase : chompCases) { [EOL]             final String original = chompCase[0]; [EOL]             final String expectedResult = chompCase[1]; [EOL]             assertEquals("chomp(String) failed", [EOL]                     expectedResult, StringUtils.chomp(original)); [EOL]         } [EOL]  [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo", StringUtils.chomp("foobar", "bar")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", "baz")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo", StringUtils.chomp("foo", "foooo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("foo", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 " ", StringUtils.chomp(" foo", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo ", StringUtils.chomp("foo ", "foo")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, [EOL]             { FOO_UNCAP, FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"}, [EOL]             { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, [EOL]             { "foo\nfoo", "foo\nfoo" }, [EOL]             { "foo\n\rfoo", "foo\n\rfoo" }, [EOL]             { "\n", "" }, [EOL]             { "\r", "" }, [EOL]             { "a", "a" }, [EOL]             { "\r\n", "" }, [EOL]             { "", "" }, [EOL]             { null, null }, [EOL]             { FOO_UNCAP + "\n\r", FOO_UNCAP + "\n"} [EOL]         }; [EOL]         for (final String[] chompCase : chompCases) { [EOL]             final String original = chompCase[0]; [EOL]             final String expectedResult = chompCase[1]; [EOL]             assertEquals("chomp(String) failed", [EOL]                     expectedResult, StringUtils.chomp(original)); [EOL]         } [EOL]  [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo", StringUtils.chomp("foobar", "bar")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", "baz")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo", StringUtils.chomp("foo", "foooo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foobar", StringUtils.chomp("foobar", null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("", "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, null)); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 null, StringUtils.chomp(null, "")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "", StringUtils.chomp("foo", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 " ", StringUtils.chomp(" foo", "foo")); [EOL]         assertEquals("chomp(String, String) failed", [EOL]                 "foo ", StringUtils.chomp("foo ", "foo")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testChop() { [EOL]  [EOL]         final String[][] chopCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, [EOL]             { "foo", "fo"}, [EOL]             { "foo\nfoo", "foo\nfo" }, [EOL]             { "\n", "" }, [EOL]             { "\r", "" }, [EOL]             { "\r\n", "" }, [EOL]             { null, null }, [EOL]             { "", "" }, [EOL]             { "a", "" }, [EOL]         }; [EOL]         for (final String[] chopCase : chopCases) { [EOL]             final String original = chopCase[0]; [EOL]             final String expectedResult = chopCase[1]; [EOL]             assertEquals("chop(String) failed", [EOL]                     expectedResult, StringUtils.chop(original)); [EOL]         } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("deprecation") // intentional test of deprecated method [EOL]
@Test [EOL]     public void testChop() { [EOL]  [EOL]         final String[][] chopCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP } , [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, [EOL]             { "foo", "fo"}, [EOL]             { "foo\nfoo", "foo\nfo" }, [EOL]             { "\n", "" }, [EOL]             { "\r", "" }, [EOL]             { "\r\n", "" }, [EOL]             { null, null }, [EOL]             { "", "" }, [EOL]             { "a", "" }, [EOL]         }; [EOL]         for (final String[] chopCase : chopCases) { [EOL]             final String original = chopCase[0]; [EOL]             final String expectedResult = chopCase[1]; [EOL]             assertEquals("chop(String) failed", [EOL]                     expectedResult, StringUtils.chop(original)); [EOL]         } [EOL]     } [EOL]  [EOL]     @SuppressWarnings("deprecation") // intentional test of deprecated method [EOL]
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]         assertEquals("", StringUtils.repeat("", "", 2)); [EOL]  [EOL]         assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]  [EOL]         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRepeat_StringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, 2)); [EOL]         assertEquals("", StringUtils.repeat("ab", 0)); [EOL]         assertEquals("", StringUtils.repeat("", 3)); [EOL]         assertEquals("aaa", StringUtils.repeat("a", 3)); [EOL]         assertEquals("ababab", StringUtils.repeat("ab", 3)); [EOL]         assertEquals("abcabcabc", StringUtils.repeat("abc", 3)); [EOL]         final String str = StringUtils.repeat("a", 10000);  // bigger than pad limit [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]         assertEquals("", StringUtils.repeat("", "", 2)); [EOL]  [EOL]         assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]  [EOL]         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testRightPad_StringInt() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5)); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2)); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals("ab", StringUtils.center("ab", -1)); [EOL]         assertEquals("ab", StringUtils.center("ab", 1)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]         assertEquals("  a  ", StringUtils.center("a", 5)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRightPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, "-+")); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, " ")); [EOL]         assertEquals(null, StringUtils.rightPad(null, 8, null)); [EOL]         assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); [EOL]         assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); [EOL]         assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, null)); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, "")); [EOL]     } [EOL]          [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testRightPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, "-+")); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, " ")); [EOL]         assertEquals(null, StringUtils.rightPad(null, 8, null)); [EOL]         assertEquals("abc-+-+", StringUtils.rightPad("abc", 7, "-+")); [EOL]         assertEquals("abc-+~", StringUtils.rightPad("abc", 6, "-+~")); [EOL]         assertEquals("abc-+", StringUtils.rightPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, " ")); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, null)); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, "")); [EOL]     } [EOL]          [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]         assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]         assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals("ab", StringUtils.center("ab", -1)); [EOL]         assertEquals("ab", StringUtils.center("ab", 1)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]         assertEquals("  a  ", StringUtils.center("a", 5)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals("ab", StringUtils.center("ab", -1)); [EOL]         assertEquals("ab", StringUtils.center("ab", 1)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]         assertEquals("  a  ", StringUtils.center("a", 5)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]         assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]         assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]         assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]         assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]         assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]         assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, "")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]                 "x", StringUtils.uncapitalize("X") ); [EOL]                       [EOL]         // reflection type of tests: Sentences. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) ); [EOL]  [EOL]         // reflection type of tests: One word. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) ); [EOL]  [EOL]         assertEquals("upperCase(String) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING") ); [EOL]         assertEquals("upperCase(empty-string) failed", [EOL]                      "", StringUtils.upperCase("") ); [EOL]         assertEquals("lowerCase(String) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING") ); [EOL]         assertEquals("lowerCase(empty-string) failed", [EOL]                      "", StringUtils.lowerCase("") ); [EOL]  [EOL]         assertEquals("upperCase(String, Locale) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("upperCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.upperCase("", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(String, Locale) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.lowerCase("", Locale.ENGLISH) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]                 "x", StringUtils.uncapitalize("X") ); [EOL]                       [EOL]         // reflection type of tests: Sentences. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) ); [EOL]  [EOL]         // reflection type of tests: One word. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) ); [EOL]  [EOL]         assertEquals("upperCase(String) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING") ); [EOL]         assertEquals("upperCase(empty-string) failed", [EOL]                      "", StringUtils.upperCase("") ); [EOL]         assertEquals("lowerCase(String) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING") ); [EOL]         assertEquals("lowerCase(empty-string) failed", [EOL]                      "", StringUtils.lowerCase("") ); [EOL]  [EOL]         assertEquals("upperCase(String, Locale) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("upperCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.upperCase("", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(String, Locale) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.lowerCase("", Locale.ENGLISH) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]                 "x", StringUtils.uncapitalize("X") ); [EOL]                       [EOL]         // reflection type of tests: Sentences. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) ); [EOL]  [EOL]         // reflection type of tests: One word. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) ); [EOL]  [EOL]         assertEquals("upperCase(String) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING") ); [EOL]         assertEquals("upperCase(empty-string) failed", [EOL]                      "", StringUtils.upperCase("") ); [EOL]         assertEquals("lowerCase(String) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING") ); [EOL]         assertEquals("lowerCase(empty-string) failed", [EOL]                      "", StringUtils.lowerCase("") ); [EOL]  [EOL]         assertEquals("upperCase(String, Locale) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("upperCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.upperCase("", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(String, Locale) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.lowerCase("", Locale.ENGLISH) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]                 "x", StringUtils.uncapitalize("X") ); [EOL]                       [EOL]         // reflection type of tests: Sentences. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) ); [EOL]  [EOL]         // reflection type of tests: One word. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) ); [EOL]  [EOL]         assertEquals("upperCase(String) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING") ); [EOL]         assertEquals("upperCase(empty-string) failed", [EOL]                      "", StringUtils.upperCase("") ); [EOL]         assertEquals("lowerCase(String) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING") ); [EOL]         assertEquals("lowerCase(empty-string) failed", [EOL]                      "", StringUtils.lowerCase("") ); [EOL]  [EOL]         assertEquals("upperCase(String, Locale) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("upperCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.upperCase("", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(String, Locale) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.lowerCase("", Locale.ENGLISH) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]                 "x", StringUtils.uncapitalize("X") ); [EOL]                       [EOL]         // reflection type of tests: Sentences. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      SENTENCE_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(SENTENCE_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      SENTENCE_CAP, StringUtils.capitalize(StringUtils.uncapitalize(SENTENCE_CAP)) ); [EOL]  [EOL]         // reflection type of tests: One word. [EOL]         assertEquals("uncapitalize(capitalize(String)) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(StringUtils.capitalize(FOO_UNCAP)) ); [EOL]         assertEquals("capitalize(uncapitalize(String)) failed", [EOL]                      FOO_CAP, StringUtils.capitalize(StringUtils.uncapitalize(FOO_CAP)) ); [EOL]  [EOL]         assertEquals("upperCase(String) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING") ); [EOL]         assertEquals("upperCase(empty-string) failed", [EOL]                      "", StringUtils.upperCase("") ); [EOL]         assertEquals("lowerCase(String) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING") ); [EOL]         assertEquals("lowerCase(empty-string) failed", [EOL]                      "", StringUtils.lowerCase("") ); [EOL]  [EOL]         assertEquals("upperCase(String, Locale) failed", [EOL]                      "FOO TEST THING", StringUtils.upperCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("upperCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.upperCase("", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(String, Locale) failed", [EOL]                      "foo test thing", StringUtils.lowerCase("fOo test THING", Locale.ENGLISH) ); [EOL]         assertEquals("lowerCase(empty-string, Locale) failed", [EOL]                      "", StringUtils.lowerCase("", Locale.ENGLISH) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, StringUtils.swapCase(null)); [EOL]         assertEquals("", StringUtils.swapCase("")); [EOL]         assertEquals("  ", StringUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [EOL]         assertEquals("I", WordUtils.swapCase("i") ); [EOL]         assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") ); [EOL]         assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") ); [EOL]         assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") ); [EOL]         assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") ); [EOL]          [EOL]         final String test = "This String contains a TitleCase character: \u01C8"; [EOL]         final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]         assertEquals(expect, WordUtils.swapCase(test)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, StringUtils.swapCase(null)); [EOL]         assertEquals("", StringUtils.swapCase("")); [EOL]         assertEquals("  ", StringUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [EOL]         assertEquals("I", WordUtils.swapCase("i") ); [EOL]         assertEquals("I AM HERE 123", StringUtils.swapCase("i am here 123") ); [EOL]         assertEquals("i aM hERE 123", StringUtils.swapCase("I Am Here 123") ); [EOL]         assertEquals("I AM here 123", StringUtils.swapCase("i am HERE 123") ); [EOL]         assertEquals("i am here 123", StringUtils.swapCase("I AM HERE 123") ); [EOL]          [EOL]         final String test = "This String contains a TitleCase character: \u01C8"; [EOL]         final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]         assertEquals(expect, WordUtils.swapCase(test)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsAlpha() { [EOL]         assertFalse(StringUtils.isAlpha(null)); [EOL]         assertFalse(StringUtils.isAlpha("")); [EOL]         assertFalse(StringUtils.isAlpha(" ")); [EOL]         assertTrue(StringUtils.isAlpha("a")); [EOL]         assertTrue(StringUtils.isAlpha("A")); [EOL]         assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isAlpha("ham kso")); [EOL]         assertFalse(StringUtils.isAlpha("1")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlpha("_")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAlpha() { [EOL]         assertFalse(StringUtils.isAlpha(null)); [EOL]         assertFalse(StringUtils.isAlpha("")); [EOL]         assertFalse(StringUtils.isAlpha(" ")); [EOL]         assertTrue(StringUtils.isAlpha("a")); [EOL]         assertTrue(StringUtils.isAlpha("A")); [EOL]         assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isAlpha("ham kso")); [EOL]         assertFalse(StringUtils.isAlpha("1")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlpha("_")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAlphaspace() { [EOL]         assertFalse(StringUtils.isAlphaSpace(null)); [EOL]         assertTrue(StringUtils.isAlphaSpace("")); [EOL]         assertTrue(StringUtils.isAlphaSpace(" ")); [EOL]         assertTrue(StringUtils.isAlphaSpace("a")); [EOL]         assertTrue(StringUtils.isAlphaSpace("A")); [EOL]         assertTrue(StringUtils.isAlphaSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertTrue(StringUtils.isAlphaSpace("ham kso")); [EOL]         assertFalse(StringUtils.isAlphaSpace("1")); [EOL]         assertFalse(StringUtils.isAlphaSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlphaSpace("_")); [EOL]         assertFalse(StringUtils.isAlphaSpace("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAlphanumericSpace() { [EOL]         assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]         assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAlphanumericSpace() { [EOL]         assertFalse(StringUtils.isAlphanumericSpace(null)); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace(" ")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("a")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("A")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("ham kso")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("1")); [EOL]         assertTrue(StringUtils.isAlphanumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlphanumericSpace("_")); [EOL]         assertFalse(StringUtils.isAlphanumericSpace("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAsciiPrintable_String() { [EOL]         assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]         assertTrue(StringUtils.isAsciiPrintable("")); [EOL]         assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]         assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,kug")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("\u0020")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("\u0021")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("\u007e")); [EOL]         assertFalse(StringUtils.isAsciiPrintable("\u007f")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("G?lc?")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("=?iso-8859-1?Q?G=FClc=FC?=")); [EOL]         assertFalse(StringUtils.isAsciiPrintable("G\u00fclc\u00fc")); [EOL]     } [EOL]    [EOL]
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL]         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumeric("ham kso")); [EOL]         assertTrue(StringUtils.isNumeric("1")); [EOL]         assertTrue(StringUtils.isNumeric("1000")); [EOL]         assertFalse(StringUtils.isNumeric("2.3")); [EOL]         assertFalse(StringUtils.isNumeric("10 00")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumeric("_")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]         assertFalse(StringUtils.isNumeric("+123")); [EOL]         assertFalse(StringUtils.isNumeric("-123")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL]         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumeric("ham kso")); [EOL]         assertTrue(StringUtils.isNumeric("1")); [EOL]         assertTrue(StringUtils.isNumeric("1000")); [EOL]         assertFalse(StringUtils.isNumeric("2.3")); [EOL]         assertFalse(StringUtils.isNumeric("10 00")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumeric("_")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]         assertFalse(StringUtils.isNumeric("+123")); [EOL]         assertFalse(StringUtils.isNumeric("-123")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL]         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumeric("ham kso")); [EOL]         assertTrue(StringUtils.isNumeric("1")); [EOL]         assertTrue(StringUtils.isNumeric("1000")); [EOL]         assertFalse(StringUtils.isNumeric("2.3")); [EOL]         assertFalse(StringUtils.isNumeric("10 00")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumeric("_")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]         assertFalse(StringUtils.isNumeric("+123")); [EOL]         assertFalse(StringUtils.isNumeric("-123")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumericSpace() { [EOL]         assertFalse(StringUtils.isNumericSpace(null)); [EOL]         assertTrue(StringUtils.isNumericSpace("")); [EOL]         assertTrue(StringUtils.isNumericSpace(" ")); [EOL]         assertFalse(StringUtils.isNumericSpace("a")); [EOL]         assertFalse(StringUtils.isNumericSpace("A")); [EOL]         assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumericSpace("ham kso")); [EOL]         assertTrue(StringUtils.isNumericSpace("1")); [EOL]         assertTrue(StringUtils.isNumericSpace("1000")); [EOL]         assertFalse(StringUtils.isNumericSpace("2.3")); [EOL]         assertTrue(StringUtils.isNumericSpace("10 00")); [EOL]         assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumericSpace("_")); [EOL]         assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testIsWhitespace() { [EOL]         assertFalse(StringUtils.isWhitespace(null)); [EOL]         assertTrue(StringUtils.isWhitespace("")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]         assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertFalse(StringUtils.isWhitespace(" a ")); [EOL]         assertFalse(StringUtils.isWhitespace("a  ")); [EOL]         assertFalse(StringUtils.isWhitespace("  a")); [EOL]         assertFalse(StringUtils.isWhitespace("aba")); [EOL]         assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]         assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsWhitespace() { [EOL]         assertFalse(StringUtils.isWhitespace(null)); [EOL]         assertTrue(StringUtils.isWhitespace("")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]         assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertFalse(StringUtils.isWhitespace(" a ")); [EOL]         assertFalse(StringUtils.isWhitespace("a  ")); [EOL]         assertFalse(StringUtils.isWhitespace("  a")); [EOL]         assertFalse(StringUtils.isWhitespace("aba")); [EOL]         assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]         assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAllLowerCase() { [EOL]         assertFalse(StringUtils.isAllLowerCase(null)); [EOL]         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abC")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link StringUtils#isAllUpperCase(CharSequence)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIsAllLowerCase() { [EOL]         assertFalse(StringUtils.isAllLowerCase(null)); [EOL]         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abC")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link StringUtils#isAllUpperCase(CharSequence)}. [EOL]      */ [EOL]
@Test [EOL]     public void testIsAllUpperCase() { [EOL]         assertFalse(StringUtils.isAllUpperCase(null)); [EOL]         assertFalse(StringUtils.isAllUpperCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllUpperCase("ABC")); [EOL]         assertFalse(StringUtils.isAllUpperCase("ABC ")); [EOL]         assertFalse(StringUtils.isAllUpperCase("aBC")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDefault_String() { [EOL]         assertEquals("", StringUtils.defaultString(null)); [EOL]         assertEquals("", StringUtils.defaultString("")); [EOL]         assertEquals("abc", StringUtils.defaultString("abc")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); [EOL]  [EOL]         final String raspberry = "raspberry peach"; [EOL]         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); [EOL]         assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); [EOL]         assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); [EOL]         assertEquals("", StringUtils.abbreviate("", 4)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abc", 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }               [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); [EOL]  [EOL]         final String raspberry = "raspberry peach"; [EOL]         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); [EOL]         assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); [EOL]         assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); [EOL]         assertEquals("", StringUtils.abbreviate("", 4)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abc", 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }               [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); [EOL]  [EOL]         final String raspberry = "raspberry peach"; [EOL]         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); [EOL]         assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); [EOL]         assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); [EOL]         assertEquals("", StringUtils.abbreviate("", 4)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abc", 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }               [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAbbreviate_StringIntInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]         assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }       [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }       [EOL]          [EOL]  [EOL]         final String raspberry = "raspberry peach"; [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate(raspberry, 11, 15)); [EOL]  [EOL]         assertEquals(null, StringUtils.abbreviate(null, 7, 14)); [EOL]         assertAbbreviateWithOffset("abcdefg...", -1, 10); [EOL]         assertAbbreviateWithOffset("abcdefg...", 0, 10); [EOL]         assertAbbreviateWithOffset("abcdefg...", 1, 10); [EOL]         assertAbbreviateWithOffset("abcdefg...", 2, 10); [EOL]         assertAbbreviateWithOffset("abcdefg...", 3, 10); [EOL]         assertAbbreviateWithOffset("abcdefg...", 4, 10); [EOL]         assertAbbreviateWithOffset("...fghi...", 5, 10); [EOL]         assertAbbreviateWithOffset("...ghij...", 6, 10); [EOL]         assertAbbreviateWithOffset("...hijk...", 7, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 8, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 9, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 10, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 11, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 12, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 13, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 14, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 15, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", 16, 10); [EOL]         assertAbbreviateWithOffset("...ijklmno", Integer.MAX_VALUE, 10); [EOL]     } [EOL]  [EOL]     private void assertAbbreviateWithOffset(final String expected, final int offset, final int maxWidth) { [EOL]         final String abcdefghijklmno = "abcdefghijklmno"; [EOL]         final String message = "abbreviate(String,int,int) failed"; [EOL]         final String actual = StringUtils.abbreviate(abcdefghijklmno, offset, maxWidth); [EOL]         if (offset >= 0 && offset < abcdefghijklmno.length()) { [EOL]             assertTrue(message + " -- should contain offset character", [EOL]                     actual.indexOf((char)('a'+offset)) != -1); [EOL]         } [EOL]         assertTrue(message + " -- should not be greater than maxWidth", [EOL]                 actual.length() <= maxWidth); [EOL]         assertEquals(message, expected, actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); [EOL]  [EOL]         final String raspberry = "raspberry peach"; [EOL]         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); [EOL]         assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); [EOL]         assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); [EOL]         assertEquals("", StringUtils.abbreviate("", 4)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abc", 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }               [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAbbreviateMiddle() { [EOL]         // javadoc examples [EOL]         assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 3) ); [EOL]         assertEquals( "ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4) ); [EOL]  [EOL]         // JIRA issue (LANG-405) example (slightly different than actual expected result) [EOL]         assertEquals(  [EOL]             "A very long text with un...f the text is complete.", [EOL]             StringUtils.abbreviateMiddle( [EOL]                 "A very long text with unimportant stuff in the middle but interesting start and " + [EOL]                 "end to see if the text is complete.", "...", 50) ); [EOL]  [EOL]         // Test a much longer text :) [EOL]         final String longText = "Start text" + StringUtils.repeat("x", 10000) + "Close text"; [EOL]         assertEquals(  [EOL]             "Start text->Close text", [EOL]             StringUtils.abbreviateMiddle( longText, "->", 22 ) ); [EOL]  [EOL]         // Test negative length [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); [EOL]  [EOL]         // Test boundaries [EOL]         // Fails to change anything as method ensures first and last char are kept [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); [EOL]  [EOL]         // Test length of n=1 [EOL]         assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); [EOL]  [EOL]         // Test smallest length that can lead to success [EOL]         assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); [EOL]  [EOL]         // More from LANG-405 [EOL]         assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); [EOL]         assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAbbreviateMiddle() { [EOL]         // javadoc examples [EOL]         assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 3) ); [EOL]         assertEquals( "ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4) ); [EOL]  [EOL]         // JIRA issue (LANG-405) example (slightly different than actual expected result) [EOL]         assertEquals(  [EOL]             "A very long text with un...f the text is complete.", [EOL]             StringUtils.abbreviateMiddle( [EOL]                 "A very long text with unimportant stuff in the middle but interesting start and " + [EOL]                 "end to see if the text is complete.", "...", 50) ); [EOL]  [EOL]         // Test a much longer text :) [EOL]         final String longText = "Start text" + StringUtils.repeat("x", 10000) + "Close text"; [EOL]         assertEquals(  [EOL]             "Start text->Close text", [EOL]             StringUtils.abbreviateMiddle( longText, "->", 22 ) ); [EOL]  [EOL]         // Test negative length [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); [EOL]  [EOL]         // Test boundaries [EOL]         // Fails to change anything as method ensures first and last char are kept [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); [EOL]  [EOL]         // Test length of n=1 [EOL]         assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); [EOL]  [EOL]         // Test smallest length that can lead to success [EOL]         assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); [EOL]  [EOL]         // More from LANG-405 [EOL]         assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); [EOL]         assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAbbreviateMiddle() { [EOL]         // javadoc examples [EOL]         assertNull( StringUtils.abbreviateMiddle(null, null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", null, 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 0) ); [EOL]         assertEquals( "abc", StringUtils.abbreviateMiddle("abc", ".", 3) ); [EOL]         assertEquals( "ab.f", StringUtils.abbreviateMiddle("abcdef", ".", 4) ); [EOL]  [EOL]         // JIRA issue (LANG-405) example (slightly different than actual expected result) [EOL]         assertEquals(  [EOL]             "A very long text with un...f the text is complete.", [EOL]             StringUtils.abbreviateMiddle( [EOL]                 "A very long text with unimportant stuff in the middle but interesting start and " + [EOL]                 "end to see if the text is complete.", "...", 50) ); [EOL]  [EOL]         // Test a much longer text :) [EOL]         final String longText = "Start text" + StringUtils.repeat("x", 10000) + "Close text"; [EOL]         assertEquals(  [EOL]             "Start text->Close text", [EOL]             StringUtils.abbreviateMiddle( longText, "->", 22 ) ); [EOL]  [EOL]         // Test negative length [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", -1)); [EOL]  [EOL]         // Test boundaries [EOL]         // Fails to change anything as method ensures first and last char are kept [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 1)); [EOL]         assertEquals("abc", StringUtils.abbreviateMiddle("abc", ".", 2)); [EOL]  [EOL]         // Test length of n=1 [EOL]         assertEquals("a", StringUtils.abbreviateMiddle("a", ".", 1)); [EOL]  [EOL]         // Test smallest length that can lead to success [EOL]         assertEquals("a.d", StringUtils.abbreviateMiddle("abcd", ".", 3)); [EOL]  [EOL]         // More from LANG-405 [EOL]         assertEquals("a..f", StringUtils.abbreviateMiddle("abcdef", "..", 4)); [EOL]         assertEquals("ab.ef", StringUtils.abbreviateMiddle("abcdef", ".", 5)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDifference_StringString() { [EOL]         assertEquals(null, StringUtils.difference(null, null)); [EOL]         assertEquals("", StringUtils.difference("", "")); [EOL]         assertEquals("abc", StringUtils.difference("", "abc")); [EOL]         assertEquals("", StringUtils.difference("abc", "")); [EOL]         assertEquals("i am a robot", StringUtils.difference(null, "i am a robot")); [EOL]         assertEquals("i am a machine", StringUtils.difference("i am a machine", null)); [EOL]         assertEquals("robot", StringUtils.difference("i am a machine", "i am a robot")); [EOL]         assertEquals("", StringUtils.difference("abc", "abc")); [EOL]         assertEquals("you are a robot", StringUtils.difference("i am a robot", "you are a robot")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDifferenceAt_StringString() { [EOL]         assertEquals(-1, StringUtils.indexOfDifference(null, null)); [EOL]         assertEquals(0, StringUtils.indexOfDifference(null, "i am a robot")); [EOL]         assertEquals(-1, StringUtils.indexOfDifference("", "")); [EOL]         assertEquals(0, StringUtils.indexOfDifference("", "abc")); [EOL]         assertEquals(0, StringUtils.indexOfDifference("abc", "")); [EOL]         assertEquals(0, StringUtils.indexOfDifference("i am a machine", null)); [EOL]         assertEquals(7, StringUtils.indexOfDifference("i am a machine", "i am a robot")); [EOL]         assertEquals(-1, StringUtils.indexOfDifference("foo", "foo")); [EOL]         assertEquals(0, StringUtils.indexOfDifference("i am a robot", "you are a robot")); [EOL]         //System.out.println("indexOfDiff: " + StringUtils.indexOfDifference("i am a robot", "not machine")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("xyz", "abcde")); [EOL]         assertEquals("i am a ", StringUtils.getCommonPrefix("i am a machine", "i am a robot")); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a"); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]         assertEquals(6, StringUtils.getLevenshteinDistance("aaaaaa", "b", 10)); [EOL]  [EOL]         // distance less than threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 8)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 4)); [EOL]      [EOL]         // distance equal to threshold [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "b", 7)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("a", "bbb", 3)); [EOL]  [EOL]         // distance greater than threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 2)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "b", 6)); [EOL]  [EOL]         // stripe runs off array, strings not similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "bbb", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("bbb", "a", 1)); [EOL]  [EOL]         // stripe runs off array, strings are similar [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("12345", "1234567", 1)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("1234567", "12345", 1)); [EOL]  [EOL]         // old getLevenshteinDistance test cases [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog",1) ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant",3) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("elephant", "hippo",6) ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant",7) ); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("hippo", "elephant",6) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz",8) ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo",8) ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo",1) ); [EOL]  [EOL]         // exceptions [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null, 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance(null, "a", 0); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]  [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", "a", -1); [EOL]             fail("expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // empty [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * A sanity check for {@link StringUtils#EMPTY}. [EOL]      */ [EOL]
@Test [EOL]     public void testPrependIfMissing() { [EOL]         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); [EOL]         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); [EOL]         assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc","xyz")); [EOL]         assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz")); [EOL]         assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz")); [EOL]  [EOL]         assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null,null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("","xyz",(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,xyz,{null})","xyzabc", StringUtils.prependIfMissing("abc","xyz",new CharSequence[]{null})); [EOL]         assertEquals("prependIfMissing(abc,xyz,\"\")","abc", StringUtils.prependIfMissing("abc","xyz","")); [EOL]         assertEquals("prependIfMissing(abc,xyz,mno)","xyzabc", StringUtils.prependIfMissing("abc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc","xyz","mno")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code prependIfMissingIgnoreCase}. [EOL]      */ [EOL]
@Test [EOL]     public void testEndsWithIgnoreCase() { [EOL]         assertTrue("endsWithIgnoreCase(null, null)",    StringUtils.endsWithIgnoreCase(null, (String)null)); [EOL]         assertFalse("endsWithIgnoreCase(FOOBAR, null)", StringUtils.endsWithIgnoreCase(FOOBAR, (String)null)); [EOL]         assertFalse("endsWithIgnoreCase(null, FOO)",    StringUtils.endsWithIgnoreCase(null, FOO)); [EOL]         assertTrue("endsWithIgnoreCase(FOOBAR, \"\")",  StringUtils.endsWithIgnoreCase(FOOBAR, "")); [EOL]  [EOL]         assertFalse("endsWithIgnoreCase(foobar, foo)", StringUtils.endsWithIgnoreCase(foobar, foo)); [EOL]         assertFalse("endsWithIgnoreCase(FOOBAR, FOO)", StringUtils.endsWithIgnoreCase(FOOBAR, FOO)); [EOL]         assertFalse("endsWithIgnoreCase(foobar, FOO)", StringUtils.endsWithIgnoreCase(foobar, FOO)); [EOL]         assertFalse("endsWithIgnoreCase(FOOBAR, foo)", StringUtils.endsWithIgnoreCase(FOOBAR, foo)); [EOL]  [EOL]         assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(foo, foobar)); [EOL]         assertFalse("endsWithIgnoreCase(foo, foobar)", StringUtils.endsWithIgnoreCase(bar, foobar)); [EOL]  [EOL]         assertTrue("endsWithIgnoreCase(foobar, bar)", StringUtils.endsWithIgnoreCase(foobar, bar)); [EOL]         assertTrue("endsWithIgnoreCase(FOOBAR, BAR)", StringUtils.endsWithIgnoreCase(FOOBAR, BAR)); [EOL]         assertTrue("endsWithIgnoreCase(foobar, BAR)", StringUtils.endsWithIgnoreCase(foobar, BAR)); [EOL]         assertTrue("endsWithIgnoreCase(FOOBAR, bar)", StringUtils.endsWithIgnoreCase(FOOBAR, bar)); [EOL]  [EOL]         // javadoc [EOL]         assertTrue(StringUtils.endsWithIgnoreCase("abcdef", "def")); [EOL]         assertTrue(StringUtils.endsWithIgnoreCase("ABCDEF", "def")); [EOL]         assertFalse(StringUtils.endsWithIgnoreCase("ABCDEF", "cde")); [EOL]  [EOL]         // "alpha,beta,gamma,delta".endsWith("DELTA") [EOL]         assertTrue("endsWith(\u03B1\u03B2\u03B3\u03B4, \u0394)", [EOL]                 StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0394")); [EOL]         // "alpha,beta,gamma,delta".endsWith("GAMMA") [EOL]         assertFalse("endsWith(\u03B1\u03B2\u03B3\u03B4, \u0393)", [EOL]                 StringUtils.endsWithIgnoreCase("\u03B1\u03B2\u03B3\u03B4", "\u0393")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNormalizeSpace() { [EOL]         assertEquals(null, StringUtils.normalizeSpace(null)); [EOL]         assertEquals("", StringUtils.normalizeSpace("")); [EOL]         assertEquals("", StringUtils.normalizeSpace(" ")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\t")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\n"));         [EOL]         assertEquals("", StringUtils.normalizeSpace("\u0009")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\u000B")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\u000C")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\u001C")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\u001D")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\u001E")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\u001F")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\f")); [EOL]         assertEquals("", StringUtils.normalizeSpace("\r")); [EOL]         assertEquals("a", StringUtils.normalizeSpace("  a  ")); [EOL]         assertEquals("a b c", StringUtils.normalizeSpace("  a  b   c  ")); [EOL]         assertEquals("a b c", StringUtils.normalizeSpace("a\t\f\r  b\u000B   c\n")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEndsWithAny() { [EOL]         assertFalse("StringUtils.endsWithAny(null, null)", StringUtils.endsWithAny(null, (String)null)); [EOL]         assertFalse("StringUtils.endsWithAny(null, new String[] {abc})", StringUtils.endsWithAny(null, new String[] {"abc"})); [EOL]         assertFalse("StringUtils.endsWithAny(abcxyz, null)", StringUtils.endsWithAny("abcxyz", (String)null)); [EOL]         assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {\"\"})", StringUtils.endsWithAny("abcxyz", new String[] {""})); [EOL]         assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {xyz})", StringUtils.endsWithAny("abcxyz", new String[] {"xyz"})); [EOL]         assertTrue("StringUtils.endsWithAny(abcxyz, new String[] {null, xyz, abc})", StringUtils.endsWithAny("abcxyz", new String[] {null, "xyz", "abc"})); [EOL]         assertFalse("StringUtils.endsWithAny(defg, new String[] {null, xyz, abc})", StringUtils.endsWithAny("defg", new String[] {null, "xyz", "abc"})); [EOL]  [EOL]         assertTrue("StringUtils.endsWithAny(abcxyz, StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny("abcxyz", new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]         assertTrue("StringUtils.endsWithAny( StrBuilder(abcxyz), StringBuilder(abc), StringBuffer(xyz))", StringUtils.endsWithAny( new StrBuilder("abcxyz"), new StringBuilder("abc"), new StringBuffer("xyz"))); [EOL]     } [EOL]  [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testAppendIfMissingIgnoreCase() { [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz")); [EOL]  [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null,(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz",(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz",new CharSequence[]{null})); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc","xyz","")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz","mno")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz","mno"));        [EOL]         assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno","xyz","mno"));        [EOL]         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz","mno")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO","xyz","mno")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code prependIfMissing}. [EOL]      */ [EOL]
@Test [EOL]     public void testAppendIfMissingIgnoreCase() { [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz")); [EOL]  [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null,(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz",(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz,{null})", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz",new CharSequence[]{null})); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz,\"\")", "abc", StringUtils.appendIfMissingIgnoreCase("abc","xyz","")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz","mno")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz,mno)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz","mno"));        [EOL]         assertEquals("appendIfMissingIgnoreCase(abcmno,xyz,mno)", "abcmno", StringUtils.appendIfMissingIgnoreCase("abcmno","xyz","mno"));        [EOL]         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz,mno)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz","mno")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcMNO,xyz,mno)", "abcMNO", StringUtils.appendIfMissingIgnoreCase("abcMNO","xyz","mno")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code prependIfMissing}. [EOL]      */ [EOL]
@Test [EOL]     public void testPrependIfMissing() { [EOL]         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); [EOL]         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); [EOL]         assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc","xyz")); [EOL]         assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz")); [EOL]         assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz")); [EOL]  [EOL]         assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null,null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("","xyz",(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,xyz,{null})","xyzabc", StringUtils.prependIfMissing("abc","xyz",new CharSequence[]{null})); [EOL]         assertEquals("prependIfMissing(abc,xyz,\"\")","abc", StringUtils.prependIfMissing("abc","xyz","")); [EOL]         assertEquals("prependIfMissing(abc,xyz,mno)","xyzabc", StringUtils.prependIfMissing("abc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(xyzabc,xyz,mno)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(mnoabc,xyz,mno)", "mnoabc", StringUtils.prependIfMissing("mnoabc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(XYZabc,xyz,mno)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz","mno")); [EOL]         assertEquals("prependIfMissing(MNOabc,xyz,mno)", "xyzMNOabc", StringUtils.prependIfMissing("MNOabc","xyz","mno")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code prependIfMissingIgnoreCase}. [EOL]      */ [EOL]
lang3/concurrent/AtomicSafeInitializer.java
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]             } [EOL]         } [EOL]  [EOL]         final GetThread[] threads = new GetThread[threadCount]; [EOL]         for (int i = 0; i < threadCount; i++) { [EOL]             threads[i] = new GetThread(); [EOL]             threads[i].start(); [EOL]         } [EOL]  [EOL]         // fire all threads and wait until they are ready [EOL]         startLatch.countDown(); [EOL]         for (final Thread t : threads) { [EOL]             t.join(); [EOL]         } [EOL]  [EOL]         // check results [EOL]         final Object managedObject = initializer.get(); [EOL]         for (final GetThread t : threads) { [EOL]             assertEquals("Wrong object", managedObject, t.object); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Creates the {@link ConcurrentInitializer} object to be tested. This [EOL]      * method is called whenever the test fixture needs to be obtained. [EOL]      * [EOL]      * @return the initializer object to be tested [EOL]      */ [EOL]     protected abstract ConcurrentInitializer<Object> createInitializer(); [EOL] } [EOL]
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]             } [EOL]         } [EOL]  [EOL]         final GetThread[] threads = new GetThread[threadCount]; [EOL]         for (int i = 0; i < threadCount; i++) { [EOL]             threads[i] = new GetThread(); [EOL]             threads[i].start(); [EOL]         } [EOL]  [EOL]         // fire all threads and wait until they are ready [EOL]         startLatch.countDown(); [EOL]         for (final Thread t : threads) { [EOL]             t.join(); [EOL]         } [EOL]  [EOL]         // check results [EOL]         final Object managedObject = initializer.get(); [EOL]         for (final GetThread t : threads) { [EOL]             assertEquals("Wrong object", managedObject, t.object); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Creates the {@link ConcurrentInitializer} object to be tested. This [EOL]      * method is called whenever the test fixture needs to be obtained. [EOL]      * [EOL]      * @return the initializer object to be tested [EOL]      */ [EOL]     protected abstract ConcurrentInitializer<Object> createInitializer(); [EOL] } [EOL]
lang3/mutable/MutableInt.java
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableInt mutNum = new MutableInt(1); [EOL]         mutNum.subtract(Integer.valueOf(1)); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test(expected=NullPointerException.class) [EOL]     public void testCompareToNull() { [EOL]         final MutableInt mutNum = new MutableInt(0); [EOL]         mutNum.compareTo(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableInt(0).toString()); [EOL]         assertEquals("10", new MutableInt(10).toString()); [EOL]         assertEquals("-123", new MutableInt(-123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
lang3/time/FastDateFormat.java
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable [EOL]  [EOL]                         @Override [EOL]                         public Object parseObject(final String formattedDate) throws ParseException { [EOL]                             synchronized(this) { [EOL]                                 return super.parse(formattedDate); [EOL]                             } [EOL]                         } [EOL]         }); [EOL]          [EOL]         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]          [EOL]         final String times= ">>FastDateFormatTest: FastDateParser:"+fdfTime+"  SimpleDateFormat:"+sdfTime; [EOL]         System.out.println(times); [EOL]     } [EOL]  [EOL]     final static private int NTHREADS= 10; [EOL]     final static private int NROUNDS= 10000; [EOL]      [EOL]     private long measureTime(final Format formatter, final Format parser) throws InterruptedException { [EOL]         final ExecutorService pool = Executors.newFixedThreadPool(NTHREADS); [EOL]         final AtomicInteger failures= new AtomicInteger(0); [EOL]         final AtomicLong totalElapsed= new AtomicLong(0); [EOL]          [EOL]         for(int i= 0; i<NTHREADS; ++i) { [EOL]             pool.submit(new Runnable() { [EOL]                 @Override [EOL]                 public void run() { [EOL]                     for(int i= 0; i<NROUNDS; ++i) { [EOL]                         try { [EOL]                             final Date date= new Date(); [EOL]                             final String formattedDate= formatter.format(date); [EOL]                             final long start= System.currentTimeMillis();         [EOL]                             final Object pd= parser.parseObject(formattedDate); [EOL]                             totalElapsed.addAndGet(System.currentTimeMillis()-start); [EOL]                             if(!date.equals(pd)) { [EOL]                                 failures.incrementAndGet(); [EOL]                             } [EOL]                         } catch (final Exception e) { [EOL]                             failures.incrementAndGet(); [EOL]                             e.printStackTrace(); [EOL]                         } [EOL]                     } [EOL]                 }                 [EOL]             }); [EOL]         } [EOL]         pool.shutdown();                         [EOL]         if(!pool.awaitTermination(20, TimeUnit.SECONDS)) { [EOL]             pool.shutdownNow(); [EOL]             fail("did not complete tasks"); [EOL]         } [EOL]         assertEquals(0, failures.get()); [EOL]         return totalElapsed.get(); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void test_getInstance_String_TimeZone() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]  [EOL]             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getTimeZone("Atlantic/Reykjavik")); [EOL]             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy"); [EOL]             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]             final FastDateFormat format4 = FastDateFormat.getInstance("MM/DD/yyyy", TimeZone.getDefault()); [EOL]             final FastDateFormat format5 = FastDateFormat.getInstance("MM-DD-yyyy", TimeZone.getDefault()); [EOL]             final FastDateFormat format6 = FastDateFormat.getInstance("MM-DD-yyyy"); [EOL]  [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]             assertSame(format3, format4); [EOL]             assertTrue(format3 != format5); // -- junit 3.8 version -- assertFalse(format3 == format5); [EOL]             assertTrue(format4 != format6); // -- junit 3.8 version -- assertFalse(format3 == format5); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]  [EOL]             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getDefault(), Locale.GERMANY); [EOL]  [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); [EOL]             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]             assertEquals(TimeZone.getDefault(), format3.getTimeZone()); [EOL]             assertEquals(Locale.GERMANY, format1.getLocale()); [EOL]             assertEquals(Locale.GERMANY, format2.getLocale()); [EOL]             assertEquals(Locale.GERMANY, format3.getLocale()); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     }        [EOL]  [EOL]
@Test [EOL]     public void testCheckDifferingStyles() { [EOL]         final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]         final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US); [EOL]          [EOL]         assertFalse(shortShort.equals(shortLong)); [EOL]         assertFalse(shortShort.equals(longShort)); [EOL]         assertFalse(shortShort.equals(longLong));       [EOL]         assertFalse(shortLong.equals(longShort)); [EOL]         assertFalse(shortLong.equals(longLong)); [EOL]         assertFalse(longShort.equals(longLong)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeDateDefaults() { [EOL]         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, Locale.CANADA), [EOL]                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York")), [EOL]                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]  [EOL]         assertEquals(FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM), [EOL]                 FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.MEDIUM, TimeZone.getDefault(), Locale.getDefault())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTruncateDate() throws Exception { [EOL]         final int calendarField = Calendar.DATE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]         baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testTruncateDate() throws Exception { [EOL]         final int calendarField = Calendar.DATE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 23:59:59.999"); [EOL]         baseTruncateTest(targetDateDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.DAY_OF_MONTH [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testLANG_831() throws Exception { [EOL]         testSdfAndFdp("M E","3  Tue", true); [EOL]     } [EOL]  [EOL]     private void testSdfAndFdp(final String format, final String date, final boolean shouldFail) [EOL]             throws Exception { [EOL]         final boolean debug = false; [EOL]         Date dfdp = null; [EOL]         Date dsdf = null; [EOL]         Throwable f = null; [EOL]         Throwable s = null; [EOL]  [EOL]         try { [EOL]             final SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US); [EOL]             sdf.setTimeZone(NEW_YORK); [EOL]             dsdf = sdf.parse(date); [EOL]             if (shouldFail) { [EOL]                 Assert.fail("Expected SDF failure, but got " + dsdf + " for ["+format+","+date+"]"); [EOL]             } [EOL]         } catch (final Exception e) { [EOL]             s = e; [EOL]             if (!shouldFail) { [EOL]                 throw e; [EOL]             } [EOL]             if (debug) { [EOL]                 System.out.println("sdf:"+format+"/"+date+"=>"+e); [EOL]             } [EOL]         } [EOL]  [EOL]         try { [EOL]             final DateParser fdp = getInstance(format, NEW_YORK, Locale.US); [EOL]             dfdp = fdp.parse(date); [EOL]             if (shouldFail) { [EOL]                 Assert.fail("Expected FDF failure, but got " + dfdp + " for ["+format+","+date+"] using "+((FastDateParser)fdp).getParsePattern()); [EOL]             } [EOL]         } catch (final Exception e) { [EOL]             f = e; [EOL]             if (!shouldFail) { [EOL]                 throw e; [EOL]             } [EOL]             if (debug) { [EOL]                 System.out.println("fdf:"+format+"/"+date+"=>"+e); [EOL]             } [EOL]         } [EOL]         // SDF and FDF should produce equivalent results [EOL]         assertTrue("Should both or neither throw Exceptions", (f==null)==(s==null)); [EOL]         assertEquals("Parsed dates should be equal", dsdf, dfdp); [EOL]         if (debug) { [EOL]             System.out.println(format + "," + date + " => " + dsdf); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLANG_831() throws Exception { [EOL]         testSdfAndFdp("M E","3  Tue", true); [EOL]     } [EOL]  [EOL]     private void testSdfAndFdp(final String format, final String date, final boolean shouldFail) [EOL]             throws Exception { [EOL]         final boolean debug = false; [EOL]         Date dfdp = null; [EOL]         Date dsdf = null; [EOL]         Throwable f = null; [EOL]         Throwable s = null; [EOL]  [EOL]         try { [EOL]             final SimpleDateFormat sdf = new SimpleDateFormat(format, Locale.US); [EOL]             sdf.setTimeZone(NEW_YORK); [EOL]             dsdf = sdf.parse(date); [EOL]             if (shouldFail) { [EOL]                 Assert.fail("Expected SDF failure, but got " + dsdf + " for ["+format+","+date+"]"); [EOL]             } [EOL]         } catch (final Exception e) { [EOL]             s = e; [EOL]             if (!shouldFail) { [EOL]                 throw e; [EOL]             } [EOL]             if (debug) { [EOL]                 System.out.println("sdf:"+format+"/"+date+"=>"+e); [EOL]             } [EOL]         } [EOL]  [EOL]         try { [EOL]             final DateParser fdp = getInstance(format, NEW_YORK, Locale.US); [EOL]             dfdp = fdp.parse(date); [EOL]             if (shouldFail) { [EOL]                 Assert.fail("Expected FDF failure, but got " + dfdp + " for ["+format+","+date+"] using "+((FastDateParser)fdp).getParsePattern()); [EOL]             } [EOL]         } catch (final Exception e) { [EOL]             f = e; [EOL]             if (!shouldFail) { [EOL]                 throw e; [EOL]             } [EOL]             if (debug) { [EOL]                 System.out.println("fdf:"+format+"/"+date+"=>"+e); [EOL]             } [EOL]         } [EOL]         // SDF and FDF should produce equivalent results [EOL]         assertTrue("Should both or neither throw Exceptions", (f==null)==(s==null)); [EOL]         assertEquals("Parsed dates should be equal", dsdf, dfdp); [EOL]         if (debug) { [EOL]             System.out.println(format + "," + date + " => " + dsdf); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable [EOL]  [EOL]                         @Override [EOL]                         public Object parseObject(final String formattedDate) throws ParseException { [EOL]                             synchronized(this) { [EOL]                                 return super.parse(formattedDate); [EOL]                             } [EOL]                         } [EOL]         }); [EOL]          [EOL]         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]          [EOL]         final String times= ">>FastDateFormatTest: FastDateParser:"+fdfTime+"  SimpleDateFormat:"+sdfTime; [EOL]         System.out.println(times); [EOL]     } [EOL]  [EOL]     final static private int NTHREADS= 10; [EOL]     final static private int NROUNDS= 10000; [EOL]      [EOL]     private long measureTime(final Format formatter, final Format parser) throws InterruptedException { [EOL]         final ExecutorService pool = Executors.newFixedThreadPool(NTHREADS); [EOL]         final AtomicInteger failures= new AtomicInteger(0); [EOL]         final AtomicLong totalElapsed= new AtomicLong(0); [EOL]          [EOL]         for(int i= 0; i<NTHREADS; ++i) { [EOL]             pool.submit(new Runnable() { [EOL]                 @Override [EOL]                 public void run() { [EOL]                     for(int i= 0; i<NROUNDS; ++i) { [EOL]                         try { [EOL]                             final Date date= new Date(); [EOL]                             final String formattedDate= formatter.format(date); [EOL]                             final long start= System.currentTimeMillis();         [EOL]                             final Object pd= parser.parseObject(formattedDate); [EOL]                             totalElapsed.addAndGet(System.currentTimeMillis()-start); [EOL]                             if(!date.equals(pd)) { [EOL]                                 failures.incrementAndGet(); [EOL]                             } [EOL]                         } catch (final Exception e) { [EOL]                             failures.incrementAndGet(); [EOL]                             e.printStackTrace(); [EOL]                         } [EOL]                     } [EOL]                 }                 [EOL]             }); [EOL]         } [EOL]         pool.shutdown();                         [EOL]         if(!pool.awaitTermination(20, TimeUnit.SECONDS)) { [EOL]             pool.shutdownNow(); [EOL]             fail("did not complete tasks"); [EOL]         } [EOL]         assertEquals(0, failures.get()); [EOL]         return totalElapsed.get(); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testCheckDifferingStyles() { [EOL]         final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]         final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US); [EOL]          [EOL]         assertFalse(shortShort.equals(shortLong)); [EOL]         assertFalse(shortShort.equals(longShort)); [EOL]         assertFalse(shortShort.equals(longLong));       [EOL]         assertFalse(shortLong.equals(longShort)); [EOL]         assertFalse(shortLong.equals(longLong)); [EOL]         assertFalse(longShort.equals(longLong)); [EOL]     } [EOL]  [EOL]
lang3/time/FormatCache.java
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeDefaults() { [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]  [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
lang3/ObjectUtils.java
@Test [EOL]     public void testNotEqual() { [EOL]         assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); [EOL]         assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); [EOL]         assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR)); [EOL]         assertTrue("ObjectUtils.notEqual(\"foo\", \"bar\") returned true", ObjectUtils.notEqual(FOO, BAR)); [EOL]         assertFalse("ObjectUtils.notEqual(\"foo\", \"foo\") returned false", ObjectUtils.notEqual(FOO, FOO)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIdentityToString() { [EOL]         assertEquals(null, ObjectUtils.identityToString(null)); [EOL]         assertEquals( [EOL]             "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), [EOL]             ObjectUtils.identityToString(FOO)); [EOL]         final Integer i = Integer.valueOf(90); [EOL]         final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]         assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]         final StringBuffer buffer = new StringBuffer(); [EOL]         ObjectUtils.identityToString(buffer, i); [EOL]         assertEquals(expected, buffer.toString()); [EOL]  [EOL]         try { [EOL]             ObjectUtils.identityToString(null, "tmp"); [EOL]             fail("NullPointerException expected"); [EOL]         } catch(final NullPointerException npe) { [EOL]         } [EOL]         try { [EOL]             ObjectUtils.identityToString(new StringBuffer(), null); [EOL]             fail("NullPointerException expected"); [EOL]         } catch(final NullPointerException npe) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIdentityToString() { [EOL]         assertEquals(null, ObjectUtils.identityToString(null)); [EOL]         assertEquals( [EOL]             "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), [EOL]             ObjectUtils.identityToString(FOO)); [EOL]         final Integer i = Integer.valueOf(90); [EOL]         final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]         assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]         final StringBuffer buffer = new StringBuffer(); [EOL]         ObjectUtils.identityToString(buffer, i); [EOL]         assertEquals(expected, buffer.toString()); [EOL]  [EOL]         try { [EOL]             ObjectUtils.identityToString(null, "tmp"); [EOL]             fail("NullPointerException expected"); [EOL]         } catch(final NullPointerException npe) { [EOL]         } [EOL]         try { [EOL]             ObjectUtils.identityToString(new StringBuffer(), null); [EOL]             fail("NullPointerException expected"); [EOL]         } catch(final NullPointerException npe) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString_ObjectString() { [EOL]         assertEquals(BAR, ObjectUtils.toString((Object) null, BAR) ); [EOL]         assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE, BAR) ); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // 1 OK, because we are checking for code change [EOL]
@Test [EOL]     public void testMax() { [EOL]         final Calendar calendar = Calendar.getInstance(); [EOL]         final Date nonNullComparable1 = calendar.getTime(); [EOL]         final Date nonNullComparable2 = calendar.getTime(); [EOL]         final String[] nullAray = null; [EOL]          [EOL]         calendar.set( Calendar.YEAR, calendar.get( Calendar.YEAR ) -1 ); [EOL]         final Date minComparable = calendar.getTime(); [EOL]          [EOL]         assertNotSame( nonNullComparable1, nonNullComparable2 ); [EOL]          [EOL]         assertNull(ObjectUtils.max( (String) null ) ); [EOL]         assertNull(ObjectUtils.max( nullAray ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1 ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, null ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( null, nonNullComparable1, null ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, nonNullComparable2 ) ); [EOL]         assertSame( nonNullComparable2, ObjectUtils.max( nonNullComparable2, nonNullComparable1 ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( nonNullComparable1, minComparable ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( minComparable, nonNullComparable1 ) ); [EOL]         assertSame( nonNullComparable1, ObjectUtils.max( null, minComparable, null, nonNullComparable1 ) ); [EOL]  [EOL]         assertNull( ObjectUtils.max((String)null, (String)null) ); [EOL]     } [EOL]  [EOL]
@Test(expected = NullPointerException.class) [EOL]     public void testComparatorMedian_nullComparator() { [EOL]         ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence("foo")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMode() { [EOL]         assertNull(ObjectUtils.mode((Object[]) null)); [EOL]         assertNull(ObjectUtils.mode()); [EOL]         assertNull(ObjectUtils.mode("foo", "bar", "baz")); [EOL]         assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); [EOL]         assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); [EOL]         assertEquals(Integer.valueOf(9), [EOL]             ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testCloneOfPrimitiveArray() { [EOL]         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testCloneOfStringArray() { [EOL]         assertTrue(Arrays.deepEquals( [EOL]             new String[]{"string"}, ObjectUtils.clone(new String[]{"string"}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with an array of primitives. [EOL]      */ [EOL]
@Test [EOL]     public void testCloneOfPrimitiveArray() { [EOL]         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test(expected = NoSuchMethodException.class) [EOL]     public void testCloneOfUncloneable() throws Throwable { [EOL]         final UncloneableString string = new UncloneableString("apache"); [EOL]         try { [EOL]             ObjectUtils.clone(string); [EOL]             fail("Thrown " + CloneFailedException.class.getName() + " expected"); [EOL]         } catch (final CloneFailedException e) { [EOL]             throw e.getCause(); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with an object array. [EOL]      */ [EOL]
@Test [EOL]     public void testPossibleCloneOfNotCloneable() { [EOL]         final String string = new String("apache"); [EOL]         assertSame(string, ObjectUtils.cloneIfPossible(string)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]         assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]         assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]         assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]  [EOL]         // Make sure documentation examples from Javadoc all work [EOL]         // (this fixed a lot of my bugs when I these!) [EOL]         // [EOL]         // My bugs should be in a software engineering textbook [EOL]         // for "Can you screw this up?"  The answer is, yes, [EOL]         // you can even screw this up.  (When you == Julius) [EOL]         // . [EOL]         final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]         final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]         final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]         final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]         final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]         final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]         final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]         final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]         final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]         final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]         final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]         final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]  [EOL]         assertTrue(MAGIC_FLAG); [EOL]         assertEquals(127, MAGIC_BYTE1); [EOL]         assertEquals(127, MAGIC_BYTE2); [EOL]         assertEquals('a', MAGIC_CHAR); [EOL]         assertEquals(123, MAGIC_SHORT1); [EOL]         assertEquals(127, MAGIC_SHORT2); [EOL]         assertEquals(123, MAGIC_INT); [EOL]         assertEquals(123, MAGIC_LONG1); [EOL]         assertEquals(3, MAGIC_LONG2); [EOL]         assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]         assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]         assertEquals("abc", MAGIC_STRING); [EOL]  [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(-129); [EOL]             fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(128); [EOL]             fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_SHORT(-32769); [EOL]             fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(32768); [EOL]             fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is cloneable. [EOL]      */ [EOL]     static final class CloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         CloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CloneableString clone() throws CloneNotSupportedException { [EOL]             return (CloneableString)super.clone(); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is not cloneable. [EOL]      */ [EOL]     static final class UncloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         UncloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]     } [EOL]  [EOL]     static final class NonComparableCharSequence implements CharSequence { [EOL]         final String value; [EOL]  [EOL]         /** [EOL]          * Create a new NonComparableCharSequence instance. [EOL]          * [EOL]          * @param value [EOL]          */ [EOL]         public NonComparableCharSequence(final String value) { [EOL]             super(); [EOL]             Validate.notNull(value); [EOL]             this.value = value; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public char charAt(final int arg0) { [EOL]             return value.charAt(arg0); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int length() { [EOL]             return value.length(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CharSequence subSequence(final int arg0, final int arg1) { [EOL]             return value.subSequence(arg0, arg1); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public String toString() { [EOL]             return value; [EOL]         } [EOL]     } [EOL]  [EOL]     static final class CharSequenceComparator implements Comparator<CharSequence> { [EOL]  [EOL]         @Override [EOL]         public int compare(final CharSequence o1, final CharSequence o2) { [EOL]             return o1.toString().compareTo(o2.toString()); [EOL]         } [EOL]  [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]         assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]         assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]         assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]  [EOL]         // Make sure documentation examples from Javadoc all work [EOL]         // (this fixed a lot of my bugs when I these!) [EOL]         // [EOL]         // My bugs should be in a software engineering textbook [EOL]         // for "Can you screw this up?"  The answer is, yes, [EOL]         // you can even screw this up.  (When you == Julius) [EOL]         // . [EOL]         final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]         final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]         final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]         final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]         final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]         final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]         final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]         final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]         final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]         final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]         final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]         final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]  [EOL]         assertTrue(MAGIC_FLAG); [EOL]         assertEquals(127, MAGIC_BYTE1); [EOL]         assertEquals(127, MAGIC_BYTE2); [EOL]         assertEquals('a', MAGIC_CHAR); [EOL]         assertEquals(123, MAGIC_SHORT1); [EOL]         assertEquals(127, MAGIC_SHORT2); [EOL]         assertEquals(123, MAGIC_INT); [EOL]         assertEquals(123, MAGIC_LONG1); [EOL]         assertEquals(3, MAGIC_LONG2); [EOL]         assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]         assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]         assertEquals("abc", MAGIC_STRING); [EOL]  [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(-129); [EOL]             fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(128); [EOL]             fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_SHORT(-32769); [EOL]             fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(32768); [EOL]             fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is cloneable. [EOL]      */ [EOL]     static final class CloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         CloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CloneableString clone() throws CloneNotSupportedException { [EOL]             return (CloneableString)super.clone(); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is not cloneable. [EOL]      */ [EOL]     static final class UncloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         UncloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]     } [EOL]  [EOL]     static final class NonComparableCharSequence implements CharSequence { [EOL]         final String value; [EOL]  [EOL]         /** [EOL]          * Create a new NonComparableCharSequence instance. [EOL]          * [EOL]          * @param value [EOL]          */ [EOL]         public NonComparableCharSequence(final String value) { [EOL]             super(); [EOL]             Validate.notNull(value); [EOL]             this.value = value; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public char charAt(final int arg0) { [EOL]             return value.charAt(arg0); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int length() { [EOL]             return value.length(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CharSequence subSequence(final int arg0, final int arg1) { [EOL]             return value.subSequence(arg0, arg1); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public String toString() { [EOL]             return value; [EOL]         } [EOL]     } [EOL]  [EOL]     static final class CharSequenceComparator implements Comparator<CharSequence> { [EOL]  [EOL]         @Override [EOL]         public int compare(final CharSequence o1, final CharSequence o2) { [EOL]             return o1.toString().compareTo(o2.toString()); [EOL]         } [EOL]  [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]         assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]         assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]         assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]  [EOL]         // Make sure documentation examples from Javadoc all work [EOL]         // (this fixed a lot of my bugs when I these!) [EOL]         // [EOL]         // My bugs should be in a software engineering textbook [EOL]         // for "Can you screw this up?"  The answer is, yes, [EOL]         // you can even screw this up.  (When you == Julius) [EOL]         // . [EOL]         final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]         final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]         final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]         final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]         final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]         final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]         final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]         final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]         final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]         final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]         final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]         final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]  [EOL]         assertTrue(MAGIC_FLAG); [EOL]         assertEquals(127, MAGIC_BYTE1); [EOL]         assertEquals(127, MAGIC_BYTE2); [EOL]         assertEquals('a', MAGIC_CHAR); [EOL]         assertEquals(123, MAGIC_SHORT1); [EOL]         assertEquals(127, MAGIC_SHORT2); [EOL]         assertEquals(123, MAGIC_INT); [EOL]         assertEquals(123, MAGIC_LONG1); [EOL]         assertEquals(3, MAGIC_LONG2); [EOL]         assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]         assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]         assertEquals("abc", MAGIC_STRING); [EOL]  [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(-129); [EOL]             fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(128); [EOL]             fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_SHORT(-32769); [EOL]             fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(32768); [EOL]             fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is cloneable. [EOL]      */ [EOL]     static final class CloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         CloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CloneableString clone() throws CloneNotSupportedException { [EOL]             return (CloneableString)super.clone(); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is not cloneable. [EOL]      */ [EOL]     static final class UncloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         UncloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]     } [EOL]  [EOL]     static final class NonComparableCharSequence implements CharSequence { [EOL]         final String value; [EOL]  [EOL]         /** [EOL]          * Create a new NonComparableCharSequence instance. [EOL]          * [EOL]          * @param value [EOL]          */ [EOL]         public NonComparableCharSequence(final String value) { [EOL]             super(); [EOL]             Validate.notNull(value); [EOL]             this.value = value; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public char charAt(final int arg0) { [EOL]             return value.charAt(arg0); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int length() { [EOL]             return value.length(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CharSequence subSequence(final int arg0, final int arg1) { [EOL]             return value.subSequence(arg0, arg1); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public String toString() { [EOL]             return value; [EOL]         } [EOL]     } [EOL]  [EOL]     static final class CharSequenceComparator implements Comparator<CharSequence> { [EOL]  [EOL]         @Override [EOL]         public int compare(final CharSequence o1, final CharSequence o2) { [EOL]             return o1.toString().compareTo(o2.toString()); [EOL]         } [EOL]  [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]         assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]         assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]         assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]  [EOL]         // Make sure documentation examples from Javadoc all work [EOL]         // (this fixed a lot of my bugs when I these!) [EOL]         // [EOL]         // My bugs should be in a software engineering textbook [EOL]         // for "Can you screw this up?"  The answer is, yes, [EOL]         // you can even screw this up.  (When you == Julius) [EOL]         // . [EOL]         final boolean MAGIC_FLAG = ObjectUtils.CONST(true); [EOL]         final byte MAGIC_BYTE1 = ObjectUtils.CONST((byte) 127); [EOL]         final byte MAGIC_BYTE2 = ObjectUtils.CONST_BYTE(127); [EOL]         final char MAGIC_CHAR = ObjectUtils.CONST('a'); [EOL]         final short MAGIC_SHORT1 = ObjectUtils.CONST((short) 123); [EOL]         final short MAGIC_SHORT2 = ObjectUtils.CONST_SHORT(127); [EOL]         final int MAGIC_INT = ObjectUtils.CONST(123); [EOL]         final long MAGIC_LONG1 = ObjectUtils.CONST(123L); [EOL]         final long MAGIC_LONG2 = ObjectUtils.CONST(3); [EOL]         final float MAGIC_FLOAT = ObjectUtils.CONST(1.0f); [EOL]         final double MAGIC_DOUBLE = ObjectUtils.CONST(1.0); [EOL]         final String MAGIC_STRING = ObjectUtils.CONST("abc"); [EOL]  [EOL]         assertTrue(MAGIC_FLAG); [EOL]         assertEquals(127, MAGIC_BYTE1); [EOL]         assertEquals(127, MAGIC_BYTE2); [EOL]         assertEquals('a', MAGIC_CHAR); [EOL]         assertEquals(123, MAGIC_SHORT1); [EOL]         assertEquals(127, MAGIC_SHORT2); [EOL]         assertEquals(123, MAGIC_INT); [EOL]         assertEquals(123, MAGIC_LONG1); [EOL]         assertEquals(3, MAGIC_LONG2); [EOL]         assertEquals(1.0f, MAGIC_FLOAT, 0.0f); [EOL]         assertEquals(1.0, MAGIC_DOUBLE, 0.0); [EOL]         assertEquals("abc", MAGIC_STRING); [EOL]  [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(-129); [EOL]             fail("CONST_BYTE(-129): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(128); [EOL]             fail("CONST_BYTE(128): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_SHORT(-32769); [EOL]             fail("CONST_SHORT(-32769): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]         try { [EOL]             ObjectUtils.CONST_BYTE(32768); [EOL]             fail("CONST_SHORT(32768): IllegalArgumentException should have been thrown."); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]  [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is cloneable. [EOL]      */ [EOL]     static final class CloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         CloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CloneableString clone() throws CloneNotSupportedException { [EOL]             return (CloneableString)super.clone(); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * String that is not cloneable. [EOL]      */ [EOL]     static final class UncloneableString extends MutableObject<String> implements Cloneable { [EOL]         private static final long serialVersionUID = 1L; [EOL]         UncloneableString(final String s) { [EOL]             super(s); [EOL]         } [EOL]     } [EOL]  [EOL]     static final class NonComparableCharSequence implements CharSequence { [EOL]         final String value; [EOL]  [EOL]         /** [EOL]          * Create a new NonComparableCharSequence instance. [EOL]          * [EOL]          * @param value [EOL]          */ [EOL]         public NonComparableCharSequence(final String value) { [EOL]             super(); [EOL]             Validate.notNull(value); [EOL]             this.value = value; [EOL]         } [EOL]  [EOL]         @Override [EOL]         public char charAt(final int arg0) { [EOL]             return value.charAt(arg0); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public int length() { [EOL]             return value.length(); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public CharSequence subSequence(final int arg0, final int arg1) { [EOL]             return value.subSequence(arg0, arg1); [EOL]         } [EOL]  [EOL]         @Override [EOL]         public String toString() { [EOL]             return value; [EOL]         } [EOL]     } [EOL]  [EOL]     static final class CharSequenceComparator implements Comparator<CharSequence> { [EOL]  [EOL]         @Override [EOL]         public int compare(final CharSequence o1, final CharSequence o2) { [EOL]             return o1.toString().compareTo(o2.toString()); [EOL]         } [EOL]  [EOL]     } [EOL] } [EOL]
lang3/CharSet.java
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("b^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("db^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(4, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("^b^a"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(2, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]          [EOL]         set = CharSet.getInstance("b^a-c^z"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('z'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructor_String_oddDash() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("-"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(1, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]          [EOL]         set = CharSet.getInstance("--"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(1, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]          [EOL]         set = CharSet.getInstance("---"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(1, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]          [EOL]         set = CharSet.getInstance("----"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(1, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]          [EOL]         set = CharSet.getInstance("-a"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(2, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]          [EOL]         set = CharSet.getInstance("a-"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(2, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('-'))); [EOL]          [EOL]         set = CharSet.getInstance("a--"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(1, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isIn('a', '-'))); [EOL]          [EOL]         set = CharSet.getInstance("--a"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(1, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isIn('-', 'a'))); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("b^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("db^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(4, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("^b^a"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(2, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]          [EOL]         set = CharSet.getInstance("b^a-c^z"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('z'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("", "")); [EOL]         assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]         assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("b^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("db^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(4, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('d'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("^b^a"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(2, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]          [EOL]         set = CharSet.getInstance("b^a-c^z"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNotIn('a', 'c'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('z'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals_Object() { [EOL]         final CharSet abc = CharSet.getInstance("abc"); [EOL]         final CharSet abc2 = CharSet.getInstance("abc"); [EOL]         final CharSet atoc = CharSet.getInstance("a-c"); [EOL]         final CharSet atoc2 = CharSet.getInstance("a-c"); [EOL]         final CharSet notatoc = CharSet.getInstance("^a-c"); [EOL]         final CharSet notatoc2 = CharSet.getInstance("^a-c"); [EOL]          [EOL]         assertFalse(abc.equals(null)); [EOL]          [EOL]         assertTrue(abc.equals(abc)); [EOL]         assertTrue(abc.equals(abc2)); [EOL]         assertFalse(abc.equals(atoc)); [EOL]         assertFalse(abc.equals(notatoc)); [EOL]          [EOL]         assertFalse(atoc.equals(abc)); [EOL]         assertTrue(atoc.equals(atoc)); [EOL]         assertTrue(atoc.equals(atoc2)); [EOL]         assertFalse(atoc.equals(notatoc)); [EOL]          [EOL]         assertFalse(notatoc.equals(abc)); [EOL]         assertFalse(notatoc.equals(atoc)); [EOL]         assertTrue(notatoc.equals(notatoc)); [EOL]         assertTrue(notatoc.equals(notatoc2)); [EOL]     } [EOL]              [EOL]
lang3/CharSequenceUtils.java
@Test [EOL]     public void testSubSequence() { [EOL]         // [EOL]         // null input [EOL]         // [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(null, -1)); [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 0)); [EOL]         Assert.assertEquals(null, CharSequenceUtils.subSequence(null, 1)); [EOL]         // [EOL]         // non-null input [EOL]         // [EOL]         Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence(StringUtils.EMPTY, 0)); [EOL]         Assert.assertEquals("012", CharSequenceUtils.subSequence("012", 0)); [EOL]         Assert.assertEquals("12", CharSequenceUtils.subSequence("012", 1)); [EOL]         Assert.assertEquals("2", CharSequenceUtils.subSequence("012", 2)); [EOL]         Assert.assertEquals(StringUtils.EMPTY, CharSequenceUtils.subSequence("012", 3)); [EOL]         // [EOL]         // Exception expected [EOL]         // [EOL]         try { [EOL]             Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, -1)); [EOL]             Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // Expected [EOL]         } [EOL]         try { [EOL]             Assert.assertEquals(null, CharSequenceUtils.subSequence(StringUtils.EMPTY, 1)); [EOL]             Assert.fail("Expected " + IndexOutOfBoundsException.class.getName()); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // Expected [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLastIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]         assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]  [EOL]         assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]         assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]  [EOL]         assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]         assertTrue(StringUtils.equals(null, null)); [EOL]         assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]         assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]         assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]         assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]         assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]         assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]         assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]         assertFalse(StringUtils.equals(fooCs, null)); [EOL]         assertFalse(StringUtils.equals(null, fooCs)); [EOL]         assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]         assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR; [EOL]         assertTrue(StringUtils.equals(null, null)); [EOL]         assertTrue(StringUtils.equals(fooCs, fooCs)); [EOL]         assertTrue(StringUtils.equals(fooCs, new StringBuilder(FOO))); [EOL]         assertTrue(StringUtils.equals(fooCs, new String(new char[] { 'f', 'o', 'o' }))); [EOL]         assertTrue(StringUtils.equals(fooCs, new CustomCharSequence(FOO))); [EOL]         assertTrue(StringUtils.equals(new CustomCharSequence(FOO), fooCs)); [EOL]         assertFalse(StringUtils.equals(fooCs, new String(new char[] { 'f', 'O', 'O' }))); [EOL]         assertFalse(StringUtils.equals(fooCs, barCs)); [EOL]         assertFalse(StringUtils.equals(fooCs, null)); [EOL]         assertFalse(StringUtils.equals(null, fooCs)); [EOL]         assertFalse(StringUtils.equals(fooCs, foobarCs)); [EOL]         assertFalse(StringUtils.equals(foobarCs, fooCs)); [EOL]     } [EOL]  [EOL]
lang3/exception/CloneFailedException.java
lang3/exception/ContextedRuntimeException.java
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertEquals(6, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetContextEntries() { [EOL]         assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]          [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         final List<Pair<String, Object>> entries = exceptionContext.getContextEntries(); [EOL]         assertEquals(6, entries.size()); [EOL]         assertEquals("test1", entries.get(0).getKey()); [EOL]         assertEquals("test2", entries.get(1).getKey()); [EOL]         assertEquals("test Date", entries.get(2).getKey()); [EOL]         assertEquals("test Nbr", entries.get(3).getKey()); [EOL]         assertEquals("test Poorly written obj", entries.get(4).getKey()); [EOL]         assertEquals("test2", entries.get(5).getKey()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAddContextValue() { [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test1") >= 0); [EOL]         assertTrue(message.indexOf("test2") >= 0); [EOL]         assertTrue(message.indexOf("test Date") >= 0); [EOL]         assertTrue(message.indexOf("test Nbr") >= 0); [EOL]         assertTrue(message.indexOf("some value") >= 0); [EOL]         assertTrue(message.indexOf("5") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test1") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("some value")); [EOL]  [EOL]         assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test1")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Date")); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Nbr")); [EOL]  [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         assertEquals(5, exceptionContext.getContextLabels().size()); [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test2")); [EOL]  [EOL]         final String contextMessage = exceptionContext.getFormattedExceptionMessage(null); [EOL]         assertTrue(contextMessage.indexOf(TEST_MESSAGE) == -1); [EOL]     } [EOL]  [EOL]
lang3/math/IEEE754rUtils.java
@Test [EOL]     public void testEnforceExceptions() { [EOL]         try { [EOL]             IEEE754rUtils.min( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min( (double[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min(new double[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max( (double[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max(new double[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEnforceExceptions() { [EOL]         try { [EOL]             IEEE754rUtils.min( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min( (double[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min(new double[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max( (double[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max(new double[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(b), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(b), 0.01); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(aF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(aF), 0.01); [EOL]  [EOL]         final float[] bF = new float[] { Float.NaN, 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertEquals(1.2f, IEEE754rUtils.min(bF), 0.01); [EOL]         assertEquals(42.0f, IEEE754rUtils.max(bF), 0.01); [EOL]     } [EOL]  [EOL]
lang3/concurrent/CallableBackgroundInitializer.java
lang3/CharSetUtils.java
@Test [EOL]     public void testSqueeze_StringString() { [EOL]         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]         assertEquals("", CharSetUtils.squeeze("", "")); [EOL]         assertEquals("", CharSetUtils.squeeze("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); [EOL]         assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); [EOL]         assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSqueeze_StringString() { [EOL]         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]         assertEquals("", CharSetUtils.squeeze("", "")); [EOL]         assertEquals("", CharSetUtils.squeeze("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); [EOL]         assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); [EOL]         assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testContainsAny_StringStringarray() { [EOL]         assertFalse(CharSetUtils.containsAny(null, (String[]) null)); [EOL]         assertFalse(CharSetUtils.containsAny(null, new String[0])); [EOL]         assertFalse(CharSetUtils.containsAny(null, new String[] {null})); [EOL]         assertFalse(CharSetUtils.containsAny(null, new String[] {"a-e"})); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("", (String[]) null)); [EOL]         assertFalse(CharSetUtils.containsAny("", new String[0])); [EOL]         assertFalse(CharSetUtils.containsAny("", new String[] {null})); [EOL]         assertFalse(CharSetUtils.containsAny("", new String[] {"a-e"})); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("hello", (String[]) null)); [EOL]         assertFalse(CharSetUtils.containsAny("hello", new String[0])); [EOL]         assertFalse(CharSetUtils.containsAny("hello", new String[] {null})); [EOL]         assertTrue(CharSetUtils.containsAny("hello", new String[] {"a-e"})); [EOL]          [EOL]         assertTrue(CharSetUtils.containsAny("hello", new String[] { "el" })); [EOL]         assertFalse(CharSetUtils.containsAny("hello", new String[] { "x" })); [EOL]         assertTrue(CharSetUtils.containsAny("hello", new String[] { "e-i" })); [EOL]         assertTrue(CharSetUtils.containsAny("hello", new String[] { "a-z" })); [EOL]         assertFalse(CharSetUtils.containsAny("hello", new String[] { "" })); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testContainsAny_StringString() { [EOL]         assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny(null, "")); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny("", "")); [EOL]         assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]         assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]         assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCount_StringString() { [EOL]         assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]         assertEquals(0, CharSetUtils.count(null, "")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("", "")); [EOL]         assertEquals(0, CharSetUtils.count("", "a-e")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("hello", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("hello", "")); [EOL]         assertEquals(1, CharSetUtils.count("hello", "a-e")); [EOL]         assertEquals(3, CharSetUtils.count("hello", "l-p")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCount_StringString() { [EOL]         assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]         assertEquals(0, CharSetUtils.count(null, "")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("", "")); [EOL]         assertEquals(0, CharSetUtils.count("", "a-e")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("hello", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("hello", "")); [EOL]         assertEquals(1, CharSetUtils.count("hello", "a-e")); [EOL]         assertEquals(3, CharSetUtils.count("hello", "l-p")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testKeep_StringString() { [EOL]         assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.keep(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("", "")); [EOL]         assertEquals("", CharSetUtils.keep("", "a-e")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("hello", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("hello", "")); [EOL]         assertEquals("", CharSetUtils.keep("hello", "xyz")); [EOL]         assertEquals("hello", CharSetUtils.keep("hello", "a-z")); [EOL]         assertEquals("hello", CharSetUtils.keep("hello", "oleh")); [EOL]         assertEquals("ell", CharSetUtils.keep("hello", "el")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testKeep_StringString() { [EOL]         assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.keep(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("", "")); [EOL]         assertEquals("", CharSetUtils.keep("", "a-e")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("hello", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("hello", "")); [EOL]         assertEquals("", CharSetUtils.keep("hello", "xyz")); [EOL]         assertEquals("hello", CharSetUtils.keep("hello", "a-z")); [EOL]         assertEquals("hello", CharSetUtils.keep("hello", "oleh")); [EOL]         assertEquals("ell", CharSetUtils.keep("hello", "el")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("", "")); [EOL]         assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]         assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("", "")); [EOL]         assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]         assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("", "")); [EOL]         assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]         assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL]     } [EOL]      [EOL]
lang3/tuple/Triple.java
@Test [EOL]     public void testComparable4() throws Exception { [EOL]         final Triple<String, String, String> triple1 = Triple.of("B", "A", "C"); [EOL]         final Triple<String, String, String> triple2 = Triple.of("B", "A", "D"); [EOL]         assertTrue(triple1.compareTo(triple1) == 0); [EOL]         assertTrue(triple1.compareTo(triple2) < 0); [EOL]         assertTrue(triple2.compareTo(triple2) == 0); [EOL]         assertTrue(triple2.compareTo(triple1) > 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testComparable4() throws Exception { [EOL]         final Triple<String, String, String> triple1 = Triple.of("B", "A", "C"); [EOL]         final Triple<String, String, String> triple2 = Triple.of("B", "A", "D"); [EOL]         assertTrue(triple1.compareTo(triple1) == 0); [EOL]         assertTrue(triple1.compareTo(triple2) < 0); [EOL]         assertTrue(triple2.compareTo(triple2) == 0); [EOL]         assertTrue(triple2.compareTo(triple1) > 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() throws Exception { [EOL]         assertEquals(ImmutableTriple.of(null, "foo", 42), ImmutableTriple.of(null, "foo", 42)); [EOL]         assertFalse(ImmutableTriple.of("foo", 0, Boolean.TRUE).equals(ImmutableTriple.of("foo", null, null))); [EOL]         assertFalse(ImmutableTriple.of("foo", "bar", "baz").equals(ImmutableTriple.of("xyz", "bar", "blo"))); [EOL]  [EOL]         final ImmutableTriple<String, String, String> p = ImmutableTriple.of("foo", "bar", "baz"); [EOL]         assertTrue(p.equals(p)); [EOL]         assertFalse(p.equals(new Object())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origTriple); [EOL]         final ImmutableTriple<Integer, String, Boolean> deserializedTriple = (ImmutableTriple<Integer, String, Boolean>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origTriple, deserializedTriple); [EOL]         assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origTriple); [EOL]         final ImmutableTriple<Integer, String, Boolean> deserializedTriple = (ImmutableTriple<Integer, String, Boolean>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origTriple, deserializedTriple); [EOL]         assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); [EOL]     } [EOL] } [EOL]  [EOL]
lang3/text/translate/UnicodeUnescaper.java
@Test [EOL]     public void testUuuuu() { [EOL]         final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]  [EOL]         final String input = "\\uuuuuuuu0047"; [EOL]         final String result = uu.translate(input); [EOL]         assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL]     } [EOL]  [EOL]
lang3/concurrent/TimedSemaphore.java
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]         final CountDownLatch latch = new CountDownLatch(count); [EOL]         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]         t.start(); [EOL]         latch.await(); [EOL]         semaphore.shutdown(); [EOL]         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the methods for statistics. [EOL]      */ [EOL]
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]         final CountDownLatch latch = new CountDownLatch(count); [EOL]         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]         t.start(); [EOL]         latch.await(); [EOL]         semaphore.shutdown(); [EOL]         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the methods for statistics. [EOL]      */ [EOL]
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]         final CountDownLatch latch = new CountDownLatch(count); [EOL]         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]         t.start(); [EOL]         latch.await(); [EOL]         semaphore.shutdown(); [EOL]         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the methods for statistics. [EOL]      */ [EOL]
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]         final CountDownLatch latch = new CountDownLatch(count); [EOL]         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]         t.start(); [EOL]         latch.await(); [EOL]         semaphore.shutdown(); [EOL]         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the methods for statistics. [EOL]      */ [EOL]
lang3/tuple/MutablePair.java
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair); [EOL]         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origPair, deserializedPair); [EOL]         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testCompatibilityBetweenPairs() throws Exception { [EOL]         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); [EOL]         assertEquals(pair, pair2); [EOL]         assertEquals(pair.hashCode(), pair2.hashCode()); [EOL]         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); [EOL]         set.add(pair); [EOL]         assertTrue(set.contains(pair2)); [EOL]  [EOL]         pair2.setValue("bar"); [EOL]         assertFalse(pair.equals(pair2)); [EOL]         assertFalse(pair.hashCode() == pair2.hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCompatibilityBetweenPairs() throws Exception { [EOL]         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); [EOL]         assertEquals(pair, pair2); [EOL]         assertEquals(pair.hashCode(), pair2.hashCode()); [EOL]         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); [EOL]         set.add(pair); [EOL]         assertTrue(set.contains(pair2)); [EOL]  [EOL]         pair2.setValue("bar"); [EOL]         assertFalse(pair.equals(pair2)); [EOL]         assertFalse(pair.hashCode() == pair2.hashCode()); [EOL]     } [EOL]  [EOL]
lang3/builder/StandardToStringStyle.java
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[%NULL%]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[%NULL%,a=hello]", new ToStringBuilder(base).appendSuper("Integer@8888[%NULL%]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[a=hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
lang3/time/FastDatePrinter.java
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAmPm() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]  [EOL]         final DateParser h = getInstance("yyyy-MM-dd hh a mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser K = getInstance("yyyy-MM-dd KK a mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser k = getInstance("yyyy-MM-dd kk:mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser H = getInstance("yyyy-MM-dd HH:mm:ss", NEW_YORK, Locale.US); [EOL]  [EOL]         cal.set(2010, 7, 1, 0, 33, 20); [EOL]         assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20")); [EOL]         assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20")); [EOL]         assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20")); [EOL]         assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20")); [EOL]  [EOL]         cal.set(2010, 7, 1, 3, 33, 20); [EOL]         assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20")); [EOL]         assertEquals(cal.getTime(), K.parse("2010-08-01 3 AM 33:20")); [EOL]         assertEquals(cal.getTime(), k.parse("2010-08-01 03:33:20")); [EOL]         assertEquals(cal.getTime(), H.parse("2010-08-01 03:33:20")); [EOL]  [EOL]         cal.set(2010, 7, 1, 15, 33, 20); [EOL]         assertEquals(cal.getTime(), h.parse("2010-08-01 3 PM 33:20")); [EOL]         assertEquals(cal.getTime(), K.parse("2010-08-01 3 PM 33:20")); [EOL]         assertEquals(cal.getTime(), k.parse("2010-08-01 15:33:20")); [EOL]         assertEquals(cal.getTime(), H.parse("2010-08-01 15:33:20")); [EOL]  [EOL]         cal.set(2010, 7, 1, 12, 33, 20); [EOL]         assertEquals(cal.getTime(), h.parse("2010-08-01 12 PM 33:20")); [EOL]         assertEquals(cal.getTime(), K.parse("2010-08-01 0 PM 33:20")); [EOL]         assertEquals(cal.getTime(), k.parse("2010-08-01 12:33:20")); [EOL]         assertEquals(cal.getTime(), H.parse("2010-08-01 12:33:20")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testCheckDifferingStyles() { [EOL]         final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]         final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US); [EOL]          [EOL]         assertFalse(shortShort.equals(shortLong)); [EOL]         assertFalse(shortShort.equals(longShort)); [EOL]         assertFalse(shortShort.equals(longLong));       [EOL]         assertFalse(shortLong.equals(longShort)); [EOL]         assertFalse(shortLong.equals(longLong)); [EOL]         assertFalse(longShort.equals(longLong)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("Z"); [EOL]             assertEquals("-0500", fdf.format(date1)); [EOL]             assertEquals("-0500", fdf.format(cal1)); [EOL]             assertEquals("-0500", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-0400", fdf.format(date2)); [EOL]             assertEquals("-0400", fdf.format(cal2)); [EOL]             assertEquals("-0400", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("ZZ"); [EOL]             assertEquals("-05:00", fdf.format(date1)); [EOL]             assertEquals("-05:00", fdf.format(cal1)); [EOL]             assertEquals("-05:00", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-04:00", fdf.format(date2)); [EOL]             assertEquals("-04:00", fdf.format(cal2)); [EOL]             assertEquals("-04:00", fdf.format(millis2)); [EOL]  [EOL]             final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + [EOL]                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]             fdf = getInstance(pattern); [EOL]             sdf = new SimpleDateFormat(pattern); [EOL]             // SDF bug fix starting with Java 7 [EOL]             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      */ [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("Z"); [EOL]             assertEquals("-0500", fdf.format(date1)); [EOL]             assertEquals("-0500", fdf.format(cal1)); [EOL]             assertEquals("-0500", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-0400", fdf.format(date2)); [EOL]             assertEquals("-0400", fdf.format(cal2)); [EOL]             assertEquals("-0400", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("ZZ"); [EOL]             assertEquals("-05:00", fdf.format(date1)); [EOL]             assertEquals("-05:00", fdf.format(cal1)); [EOL]             assertEquals("-05:00", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-04:00", fdf.format(date2)); [EOL]             assertEquals("-04:00", fdf.format(cal2)); [EOL]             assertEquals("-04:00", fdf.format(millis2)); [EOL]  [EOL]             final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + [EOL]                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]             fdf = getInstance(pattern); [EOL]             sdf = new SimpleDateFormat(pattern); [EOL]             // SDF bug fix starting with Java 7 [EOL]             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      */ [EOL]
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable [EOL]  [EOL]                         @Override [EOL]                         public Object parseObject(final String formattedDate) throws ParseException { [EOL]                             synchronized(this) { [EOL]                                 return super.parse(formattedDate); [EOL]                             } [EOL]                         } [EOL]         }); [EOL]          [EOL]         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]          [EOL]         final String times= ">>FastDateFormatTest: FastDateParser:"+fdfTime+"  SimpleDateFormat:"+sdfTime; [EOL]         System.out.println(times); [EOL]     } [EOL]  [EOL]     final static private int NTHREADS= 10; [EOL]     final static private int NROUNDS= 10000; [EOL]      [EOL]     private long measureTime(final Format formatter, final Format parser) throws InterruptedException { [EOL]         final ExecutorService pool = Executors.newFixedThreadPool(NTHREADS); [EOL]         final AtomicInteger failures= new AtomicInteger(0); [EOL]         final AtomicLong totalElapsed= new AtomicLong(0); [EOL]          [EOL]         for(int i= 0; i<NTHREADS; ++i) { [EOL]             pool.submit(new Runnable() { [EOL]                 @Override [EOL]                 public void run() { [EOL]                     for(int i= 0; i<NROUNDS; ++i) { [EOL]                         try { [EOL]                             final Date date= new Date(); [EOL]                             final String formattedDate= formatter.format(date); [EOL]                             final long start= System.currentTimeMillis();         [EOL]                             final Object pd= parser.parseObject(formattedDate); [EOL]                             totalElapsed.addAndGet(System.currentTimeMillis()-start); [EOL]                             if(!date.equals(pd)) { [EOL]                                 failures.incrementAndGet(); [EOL]                             } [EOL]                         } catch (final Exception e) { [EOL]                             failures.incrementAndGet(); [EOL]                             e.printStackTrace(); [EOL]                         } [EOL]                     } [EOL]                 }                 [EOL]             }); [EOL]         } [EOL]         pool.shutdown();                         [EOL]         if(!pool.awaitTermination(20, TimeUnit.SECONDS)) { [EOL]             pool.shutdownNow(); [EOL]             fail("did not complete tasks"); [EOL]         } [EOL]         assertEquals(0, failures.get()); [EOL]         return totalElapsed.get(); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLocaleMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, SWEDEN); [EOL]         assertEquals(SWEDEN, printer.getLocale()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL]         assertFalse(printer1.equals(new Object())); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL]         assertFalse(printer1.equals(new Object())); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToStringContainsName() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD); [EOL]         assertTrue(printer.toString().startsWith("FastDate")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToStringContainsName() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD); [EOL]         assertTrue(printer.toString().startsWith("FastDate")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testCheckDifferingStyles() { [EOL]         final FastDateFormat shortShort = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat shortLong = FastDateFormat.getDateTimeInstance(FastDateFormat.SHORT, FastDateFormat.LONG, Locale.US); [EOL]         final FastDateFormat longShort = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.SHORT, Locale.US); [EOL]         final FastDateFormat longLong = FastDateFormat.getDateTimeInstance(FastDateFormat.LONG, FastDateFormat.LONG, Locale.US); [EOL]          [EOL]         assertFalse(shortShort.equals(shortLong)); [EOL]         assertFalse(shortShort.equals(longShort)); [EOL]         assertFalse(shortShort.equals(longLong));       [EOL]         assertFalse(shortLong.equals(longShort)); [EOL]         assertFalse(shortLong.equals(longLong)); [EOL]         assertFalse(longShort.equals(longLong)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("Z"); [EOL]             assertEquals("-0500", fdf.format(date1)); [EOL]             assertEquals("-0500", fdf.format(cal1)); [EOL]             assertEquals("-0500", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-0400", fdf.format(date2)); [EOL]             assertEquals("-0400", fdf.format(cal2)); [EOL]             assertEquals("-0400", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("ZZ"); [EOL]             assertEquals("-05:00", fdf.format(date1)); [EOL]             assertEquals("-05:00", fdf.format(cal1)); [EOL]             assertEquals("-05:00", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-04:00", fdf.format(date2)); [EOL]             assertEquals("-04:00", fdf.format(cal2)); [EOL]             assertEquals("-04:00", fdf.format(millis2)); [EOL]  [EOL]             final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + [EOL]                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]             fdf = getInstance(pattern); [EOL]             sdf = new SimpleDateFormat(pattern); [EOL]             // SDF bug fix starting with Java 7 [EOL]             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      */ [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("Z"); [EOL]             assertEquals("-0500", fdf.format(date1)); [EOL]             assertEquals("-0500", fdf.format(cal1)); [EOL]             assertEquals("-0500", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-0400", fdf.format(date2)); [EOL]             assertEquals("-0400", fdf.format(cal2)); [EOL]             assertEquals("-0400", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("ZZ"); [EOL]             assertEquals("-05:00", fdf.format(date1)); [EOL]             assertEquals("-05:00", fdf.format(cal1)); [EOL]             assertEquals("-05:00", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-04:00", fdf.format(date2)); [EOL]             assertEquals("-04:00", fdf.format(cal2)); [EOL]             assertEquals("-04:00", fdf.format(millis2)); [EOL]  [EOL]             final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + [EOL]                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]             fdf = getInstance(pattern); [EOL]             sdf = new SimpleDateFormat(pattern); [EOL]             // SDF bug fix starting with Java 7 [EOL]             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      */ [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("Z"); [EOL]             assertEquals("-0500", fdf.format(date1)); [EOL]             assertEquals("-0500", fdf.format(cal1)); [EOL]             assertEquals("-0500", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-0400", fdf.format(date2)); [EOL]             assertEquals("-0400", fdf.format(cal2)); [EOL]             assertEquals("-0400", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("ZZ"); [EOL]             assertEquals("-05:00", fdf.format(date1)); [EOL]             assertEquals("-05:00", fdf.format(cal1)); [EOL]             assertEquals("-05:00", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-04:00", fdf.format(date2)); [EOL]             assertEquals("-04:00", fdf.format(cal2)); [EOL]             assertEquals("-04:00", fdf.format(millis2)); [EOL]  [EOL]             final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + [EOL]                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]             fdf = getInstance(pattern); [EOL]             sdf = new SimpleDateFormat(pattern); [EOL]             // SDF bug fix starting with Java 7 [EOL]             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      */ [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(cal1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(millis1)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(date2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(cal2)); [EOL]             assertEquals("2003-07-10T09:00:00", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("Z"); [EOL]             assertEquals("-0500", fdf.format(date1)); [EOL]             assertEquals("-0500", fdf.format(cal1)); [EOL]             assertEquals("-0500", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-0400", fdf.format(date2)); [EOL]             assertEquals("-0400", fdf.format(cal2)); [EOL]             assertEquals("-0400", fdf.format(millis2)); [EOL]  [EOL]             fdf = getInstance("ZZ"); [EOL]             assertEquals("-05:00", fdf.format(date1)); [EOL]             assertEquals("-05:00", fdf.format(cal1)); [EOL]             assertEquals("-05:00", fdf.format(millis1)); [EOL]  [EOL]             assertEquals("-04:00", fdf.format(date2)); [EOL]             assertEquals("-04:00", fdf.format(cal2)); [EOL]             assertEquals("-04:00", fdf.format(millis2)); [EOL]  [EOL]             final String pattern = "GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M" + [EOL]                 " dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z"; [EOL]             fdf = getInstance(pattern); [EOL]             sdf = new SimpleDateFormat(pattern); [EOL]             // SDF bug fix starting with Java 7 [EOL]             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1)); [EOL]             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2)); [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]             TimeZone.setDefault(realDefaultZone); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      */ [EOL]
lang3/concurrent/ConcurrentException.java
lang3/text/StrLookup.java
@Test [EOL]     public void testNoneLookup() { [EOL]         assertEquals(null, StrLookup.noneLookup().lookup(null)); [EOL]         assertEquals(null, StrLookup.noneLookup().lookup("")); [EOL]         assertEquals(null, StrLookup.noneLookup().lookup("any")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSystemProperiesLookup() { [EOL]         assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); [EOL]         try { [EOL]             StrLookup.systemPropertiesLookup().lookup(null); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) { [EOL]             // expected [EOL]         } [EOL]     } [EOL]  [EOL]
lang3/reflect/MethodUtils.java
@Test [EOL]     public void testInvokeExactMethod() throws Exception { [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                 (Object[]) null)); [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",  [EOL]                 (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", "")); [EOL]         assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", new Object())); [EOL]         assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE })); [EOL]  [EOL]         try { [EOL]             MethodUtils [EOL]                     .invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils [EOL]                     .invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactMethod() throws Exception { [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo", [EOL]                 (Object[]) null)); [EOL]         assertEquals("foo()", MethodUtils.invokeExactMethod(testBean, "foo",  [EOL]                 (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("foo(String)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", "")); [EOL]         assertEquals("foo(Object)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", new Object())); [EOL]         assertEquals("foo(Integer)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("foo(double)", MethodUtils.invokeExactMethod(testBean, [EOL]                 "foo", new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE })); [EOL]  [EOL]         try { [EOL]             MethodUtils [EOL]                     .invokeExactMethod(testBean, "foo", NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils [EOL]                     .invokeExactMethod(testBean, "foo", NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils.invokeExactMethod(testBean, "foo", Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE })); [EOL]  [EOL]         try { [EOL]             MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", [EOL]                     NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", [EOL]                     NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", [EOL]                     Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", Boolean.TRUE)); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", NumberUtils.BYTE_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]          [EOL]         try { [EOL]             MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", Boolean.TRUE)); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(int)", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", NumberUtils.BYTE_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.LONG_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.DOUBLE_ONE)); [EOL]          [EOL]         try { [EOL]             MethodUtils.invokeStaticMethod(TestBean.class, "does_not_exist"); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE })); [EOL]  [EOL]         try { [EOL]             MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", [EOL]                     NumberUtils.BYTE_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", [EOL]                     NumberUtils.LONG_ONE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]         try { [EOL]             MethodUtils.invokeExactStaticMethod(TestBean.class, "bar", [EOL]                     Boolean.TRUE); [EOL]             fail("should throw NoSuchMethodException"); [EOL]         } catch (final NoSuchMethodException e) { [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetAccessibleMethodInaccessible() throws Exception { [EOL]         final Method expected = TestBean.class.getDeclaredMethod("privateStuff"); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(expected); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetAccessibleInterfaceMethodFromDescription() [EOL]             throws Exception { [EOL]         final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; [EOL]         for (final Class<?>[] element : p) { [EOL]             final Method accessibleMethod = MethodUtils.getAccessibleMethod( [EOL]                     TestMutable.class, "getValue", element); [EOL]             assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(String.class), singletonArray(String.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Object.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ParentObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ChildObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ParentObject.class), singletonArray(GrandParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ChildObject.class), singletonArray(ChildInterface.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(String.class), singletonArray(String.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Object.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ParentObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ChildObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ParentObject.class), singletonArray(GrandParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ChildObject.class), singletonArray(ChildInterface.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(String.class), singletonArray(String.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Object.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Short.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Character.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.class), singletonArray(Integer.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Integer.TYPE), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Long.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Float.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.class), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Double.TYPE), singletonArray(Double.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ParentObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testOne", [EOL]                 singletonArray(ChildObject.class), singletonArray(ParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ParentObject.class), singletonArray(GrandParentObject.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(InheritanceBean.class, "testTwo", [EOL]                 singletonArray(ChildObject.class), singletonArray(ChildInterface.class)); [EOL]     } [EOL]  [EOL]
lang3/event/EventListenerSupport.java
@Test(expected=NullPointerException.class) [EOL]     public void testAddNullListener() [EOL]     { [EOL]         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]         listenerSupport.addListener(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEventDispatchOrder() throws PropertyVetoException [EOL]     { [EOL]         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]         final List<VetoableChangeListener> calledListeners = new ArrayList<VetoableChangeListener>(); [EOL]  [EOL]         final VetoableChangeListener listener1 = createListener(calledListeners); [EOL]         final VetoableChangeListener listener2 = createListener(calledListeners); [EOL]         listenerSupport.addListener(listener1); [EOL]         listenerSupport.addListener(listener2); [EOL]         listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]         assertEquals(calledListeners.size(), 2); [EOL]         assertSame(calledListeners.get(0), listener1); [EOL]         assertSame(calledListeners.get(1), listener2); [EOL]     } [EOL]  [EOL]
lang3/mutable/MutableDouble.java
@Test(expected=NullPointerException.class) [EOL]     public void testSetNull() { [EOL]         final MutableDouble mutNum = new MutableDouble(0d); [EOL]         mutNum.setValue(null); [EOL]     } [EOL]  [EOL]
@Test(expected=NullPointerException.class) [EOL]     public void testSetNull() { [EOL]         final MutableDouble mutNum = new MutableDouble(0d); [EOL]         mutNum.setValue(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.add(1.1d); [EOL]          [EOL]         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.subtract(Double.valueOf(0.9d)); [EOL]          [EOL]         assertEquals(0.1d, mutNum.doubleValue(), 0.01d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableDouble mutNum = new MutableDouble(1.7); [EOL]          [EOL]         assertEquals( 1.7F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.7, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL]         assertEquals( (short) 1, mutNum.shortValue() ); [EOL]         assertEquals( 1, mutNum.intValue() ); [EOL]         assertEquals( 1L, mutNum.longValue() ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrimitiveValues() { [EOL]         final MutableDouble mutNum = new MutableDouble(1.7); [EOL]          [EOL]         assertEquals( 1.7F, mutNum.floatValue(), 0 ); [EOL]         assertEquals( 1.7, mutNum.doubleValue(), 0 ); [EOL]         assertEquals( (byte) 1, mutNum.byteValue() ); [EOL]         assertEquals( (short) 1, mutNum.shortValue() ); [EOL]         assertEquals( 1, mutNum.intValue() ); [EOL]         assertEquals( 1L, mutNum.longValue() ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.equals(mutNumB)); [EOL]         assertTrue(mutNumB.equals(mutNumA)); [EOL]         assertTrue(mutNumB.equals(mutNumB)); [EOL]         assertFalse(mutNumA.equals(mutNumC)); [EOL]         assertFalse(mutNumB.equals(mutNumC)); [EOL]         assertTrue(mutNumC.equals(mutNumC)); [EOL]         assertFalse(mutNumA.equals(null)); [EOL]         assertFalse(mutNumA.equals(Double.valueOf(0d))); [EOL]         assertFalse(mutNumA.equals("0")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableDouble mutNumA = new MutableDouble(0d); [EOL]         final MutableDouble mutNumB = new MutableDouble(0d); [EOL]         final MutableDouble mutNumC = new MutableDouble(1d); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Double.valueOf(0d).hashCode()); [EOL]     } [EOL]  [EOL]
lang3/text/StrBuilder.java
@Test [EOL]     public void testGetSetNewLineText() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(null, sb.getNewLineText()); [EOL]  [EOL]         sb.setNewLineText("#"); [EOL]         assertEquals("#", sb.getNewLineText()); [EOL]  [EOL]         sb.setNewLineText(""); [EOL]         assertEquals("", sb.getNewLineText()); [EOL]  [EOL]         sb.setNewLineText((String) null); [EOL]         assertEquals(null, sb.getNewLineText()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"), 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 1, -1); [EOL]             fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 1, 3); [EOL]             fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), -1, 3); [EOL]             fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 4, 0); [EOL]             fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.append(new StringBuffer("bar"), 3, 0); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(0, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.ensureCapacity(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("foo"); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(3, sb.length()); [EOL]         assertEquals(3, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.clear(); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("123456789012345678901234567890123"); [EOL]         assertTrue(sb.capacity() > 32); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.ensureCapacity(16); [EOL]         assertTrue(sb.capacity() > 16); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(33, sb.capacity()); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         try { [EOL]             sb.setLength(-1); [EOL]             fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.setLength(33); [EOL]         assertEquals(33, sb.capacity()); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(16); [EOL]         assertTrue(sb.capacity() >= 16); [EOL]         assertEquals(16, sb.length()); [EOL]         assertEquals(16, sb.size()); [EOL]         assertEquals("1234567890123456", sb.toString()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(32, sb.length()); [EOL]         assertEquals(32, sb.size()); [EOL]         assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(0); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(0, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.ensureCapacity(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("foo"); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(3, sb.length()); [EOL]         assertEquals(3, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.clear(); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("123456789012345678901234567890123"); [EOL]         assertTrue(sb.capacity() > 32); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.ensureCapacity(16); [EOL]         assertTrue(sb.capacity() > 16); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(33, sb.capacity()); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         try { [EOL]             sb.setLength(-1); [EOL]             fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.setLength(33); [EOL]         assertEquals(33, sb.capacity()); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(16); [EOL]         assertTrue(sb.capacity() >= 16); [EOL]         assertEquals(16, sb.length()); [EOL]         assertEquals(16, sb.size()); [EOL]         assertEquals("1234567890123456", sb.toString()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(32, sb.length()); [EOL]         assertEquals(32, sb.size()); [EOL]         assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(0); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(0, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.ensureCapacity(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("foo"); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(3, sb.length()); [EOL]         assertEquals(3, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.clear(); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("123456789012345678901234567890123"); [EOL]         assertTrue(sb.capacity() > 32); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.ensureCapacity(16); [EOL]         assertTrue(sb.capacity() > 16); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(33, sb.capacity()); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         try { [EOL]             sb.setLength(-1); [EOL]             fail("setLength(-1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.setLength(33); [EOL]         assertEquals(33, sb.capacity()); [EOL]         assertEquals(33, sb.length()); [EOL]         assertEquals(33, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(16); [EOL]         assertTrue(sb.capacity() >= 16); [EOL]         assertEquals(16, sb.length()); [EOL]         assertEquals(16, sb.size()); [EOL]         assertEquals("1234567890123456", sb.toString()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(32, sb.length()); [EOL]         assertEquals(32, sb.size()); [EOL]         assertEquals("1234567890123456\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", sb.toString()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.setLength(0); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToCharArray() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); [EOL]  [EOL]         char[] a = sb.toCharArray(); [EOL]         assertNotNull("toCharArray() result is null", a); [EOL]         assertEquals("toCharArray() result is too large", 0, a.length); [EOL]  [EOL]         sb.append("junit"); [EOL]         a = sb.toCharArray(); [EOL]         assertEquals("toCharArray() result incorrect length", 5, a.length); [EOL]         assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetChars ( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]          [EOL]         char[] input = new char[10]; [EOL]         char[] a = sb.getChars(input); [EOL]         assertSame (input, a); [EOL]         assertTrue(Arrays.equals(new char[10], a)); [EOL]          [EOL]         sb.append("junit"); [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a)); [EOL]          [EOL]         a = sb.getChars(null); [EOL]         assertNotSame(input,a); [EOL]         assertEquals(5,a.length); [EOL]         assertTrue(Arrays.equals("junit".toCharArray(),a)); [EOL]          [EOL]         input = new char[5]; [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]          [EOL]         input = new char[4]; [EOL]         a = sb.getChars(input); [EOL]         assertNotSame(input, a); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetChars ( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]          [EOL]         char[] input = new char[10]; [EOL]         char[] a = sb.getChars(input); [EOL]         assertSame (input, a); [EOL]         assertTrue(Arrays.equals(new char[10], a)); [EOL]          [EOL]         sb.append("junit"); [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a)); [EOL]          [EOL]         a = sb.getChars(null); [EOL]         assertNotSame(input,a); [EOL]         assertEquals(5,a.length); [EOL]         assertTrue(Arrays.equals("junit".toCharArray(),a)); [EOL]          [EOL]         input = new char[5]; [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]          [EOL]         input = new char[4]; [EOL]         a = sb.getChars(input); [EOL]         assertNotSame(input, a); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetCharsIntIntCharArrayInt( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]                 [EOL]         sb.append("junit"); [EOL]         char[] a = new char[5]; [EOL]         sb.getChars(0,5,a,0); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a)); [EOL]          [EOL]         a = new char[5]; [EOL]         sb.getChars(0,2,a,3); [EOL]         assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a)); [EOL]          [EOL]         try { [EOL]             sb.getChars(-1,0,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(0,-1,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(0,20,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(4,2,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetCharsIntIntCharArrayInt( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]                 [EOL]         sb.append("junit"); [EOL]         char[] a = new char[5]; [EOL]         sb.getChars(0,5,a,0); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a)); [EOL]          [EOL]         a = new char[5]; [EOL]         sb.getChars(0,2,a,3); [EOL]         assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a)); [EOL]          [EOL]         try { [EOL]             sb.getChars(-1,0,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(0,-1,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(0,20,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(4,2,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendNewLine() { [EOL]         StrBuilder sb = new StrBuilder("---"); [EOL]         sb.appendNewLine().append("+++"); [EOL]         assertEquals("---" + SEP + "+++", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("---"); [EOL]         sb.setNewLineText("#").appendNewLine().setNewLineText(null).appendNewLine(); [EOL]         assertEquals("---#" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEnsureCapacity() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.ensureCapacity(2); [EOL]         assertTrue(sb.capacity() >= 2); [EOL]          [EOL]         sb.ensureCapacity(-1); [EOL]         assertTrue(sb.capacity() >= 0); [EOL]          [EOL]         sb.append("HelloWorld"); [EOL]         sb.ensureCapacity(40); [EOL]         assertTrue(sb.capacity() >= 40); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppend_String_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((String) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append("foo", 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append("bar", -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append("bar", 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append("bar", 1, -1); [EOL]             fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append("bar", 1, 3); [EOL]             fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append("bar", -1, 3); [EOL]             fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append("bar", 4, 0); [EOL]             fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.append("bar", 3, 0); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append("abcbardef", 3, 3); [EOL]         assertEquals("foobar", sb.toString()); [EOL]  [EOL]         sb.append( (CharSequence)"abcbardef", 4, 3); [EOL]         assertEquals("foobarard", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_String_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo", 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_FormattedString() { [EOL]         StrBuilder sb; [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append("Hi", (Object[]) null); [EOL]         assertEquals("Hi", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append("Hi", "Alice"); [EOL]         assertEquals("Hi", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append("Hi %s", "Alice"); [EOL]         assertEquals("Hi Alice", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append("Hi %s %,d", "Alice", 5000); [EOL]         assertEquals("Hi Alice 5,000", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"), 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 1, -1); [EOL]             fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 1, 3); [EOL]             fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), -1, 3); [EOL]             fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 4, 0); [EOL]             fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.append(new StringBuffer("bar"), 3, 0); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("abcbardef"), 3, 3); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_StringBuilder_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_StrBuilder() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("bar")); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_StrBuilder() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("bar")); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_StrBuilder_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo"), 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 1, -1); [EOL]             fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 1, 3); [EOL]             fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), -1, 3); [EOL]             fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 4, 0); [EOL]             fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.append(new StrBuilder("bar"), 3, 0); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_StrBuilder_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo"), 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 1, -1); [EOL]             fail("append(char[],, -1) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 1, 3); [EOL]             fail("append(char[], 1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), -1, 3); [EOL]             fail("append(char[], -1, 3) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 4, 0); [EOL]             fail("append(char[], 4, 0) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.append(new StrBuilder("bar"), 3, 0); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("abcbardef"), 3, 3); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppend_CharArray() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((char[]) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new char[0]); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foo", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]         assertEquals("false" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]         assertEquals("false" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]         assertEquals("false" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]         assertEquals("false" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]         assertEquals(2, tokens1.length); [EOL]         assertEquals("a", tokens1[0]); [EOL]         assertEquals("b", tokens1[1]); [EOL]         assertEquals(2, t.size()); [EOL]          [EOL]         b.append("c d "); [EOL]         final String[] tokens2 = t.getTokenArray(); [EOL]         assertEquals(2, tokens2.length); [EOL]         assertEquals("a", tokens2[0]); [EOL]         assertEquals("b", tokens2[1]); [EOL]         assertEquals(2, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]          [EOL]         t.reset(); [EOL]         final String[] tokens3 = t.getTokenArray(); [EOL]         assertEquals(4, tokens3.length); [EOL]         assertEquals("a", tokens3[0]); [EOL]         assertEquals("b", tokens3[1]); [EOL]         assertEquals("c", tokens3[2]); [EOL]         assertEquals("d", tokens3[3]); [EOL]         assertEquals(4, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]         assertEquals("c", t.next()); [EOL]         assertEquals("d", t.next()); [EOL]          [EOL]         assertEquals("a b c d ", t.getContent()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL]         assertEquals("1" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(2.3f); [EOL]         assertEquals("2.3" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(4.5d); [EOL]         assertEquals("4.5" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL]         assertEquals("1" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(2.3f); [EOL]         assertEquals("2.3" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(4.5d); [EOL]         assertEquals("4.5" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_Boolean() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(true); [EOL]         assertEquals("true" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(false); [EOL]         assertEquals("false" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL]         assertEquals("1" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(2.3f); [EOL]         assertEquals("2.3" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(4.5d); [EOL]         assertEquals("4.5" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendAll_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendAll((Object[]) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(new Object[0]); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(new Object[]{"foo", "bar", "baz"}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll("foo", "bar", "baz"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendAll_Iterator() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendAll((Iterator<?>) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(Collections.EMPTY_LIST.iterator()); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator()); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendWithSeparators_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Object[]) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[0], ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", null, "baz"}, ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendWithSeparators_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Object[]) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[0], ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", null, "baz"}, ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendWithSeparators_Collection() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Collection<?>) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Collections.EMPTY_LIST, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}), ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendWithSeparators_Iterator() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}).iterator(), ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendSeparator_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendSeparator(',');  // no effect [EOL]         assertEquals("", sb.toString()); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]         sb.appendSeparator(','); [EOL]         assertEquals("foo,", sb.toString()); [EOL]     } [EOL]
@Test [EOL]     public void testAppendSeparator_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendSeparator(',');  // no effect [EOL]         assertEquals("", sb.toString()); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]         sb.appendSeparator(','); [EOL]         assertEquals("foo,", sb.toString()); [EOL]     } [EOL]
@Test [EOL]     public void testAppendSeparator_char_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         final char startSeparator = ':'; [EOL]         final char standardSeparator = ','; [EOL]         final String foo = "foo"; [EOL]         sb.appendSeparator(standardSeparator, startSeparator);  // no effect [EOL]         assertEquals(String.valueOf(startSeparator), sb.toString()); [EOL]         sb.append(foo); [EOL]         assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); [EOL]         sb.appendSeparator(standardSeparator, startSeparator); [EOL]         assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendPadding() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(-1, '-'); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(0, '-'); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(1, '-'); [EOL]         assertEquals("foo-", sb.toString()); [EOL]  [EOL]         sb.appendPadding(16, '-'); [EOL]         assertEquals(20, sb.length()); [EOL]         //            12345678901234567890 [EOL]         assertEquals("foo-----------------", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendPadding() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(-1, '-'); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(0, '-'); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.appendPadding(1, '-'); [EOL]         assertEquals("foo-", sb.toString()); [EOL]  [EOL]         sb.appendPadding(16, '-'); [EOL]         assertEquals(20, sb.length()); [EOL]         //            12345678901234567890 [EOL]         assertEquals("foo-----------------", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendFixedWidthPadLeft_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]         assertEquals("3", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]         assertEquals("23", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]         assertEquals("123", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]         assertEquals("-123", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 10, '-'); [EOL]         assertEquals(10, sb.length()); [EOL]         //            1234567890 [EOL]         assertEquals("-------123", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang299() { [EOL]         final StrBuilder sb = new StrBuilder(1); [EOL]         sb.appendFixedWidthPadRight("foo", 1, '-'); [EOL]         assertEquals("f", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, "foo"); [EOL]             fail("insert(-1, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, "foo"); [EOL]             fail("insert(7, String) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (String) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, "foo"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(-1, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'f', 'o', 'o'}); [EOL]             fail("insert(7, char[]) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0]); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'f', 'o', 'o'}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(-1, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]             fail("insert(7, char[], 3, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (char[]) null, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[0], 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, -1, 3); [EOL]             fail("insert(0, char[], -1, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 10, 3); [EOL]             fail("insert(0, char[], 10, 3) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, -1); [EOL]             fail("insert(0, char[], 0, -1) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 10); [EOL]             fail("insert(0, char[], 0, 10) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 0, 0); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, new char[]{'a', 'b', 'c', 'f', 'o', 'o', 'd', 'e', 'f'}, 3, 3); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, true); [EOL]             fail("insert(-1, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, true); [EOL]             fail("insert(7, boolean) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, true); [EOL]         assertEquals("truebarbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, false); [EOL]         assertEquals("falsetruebarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, '!'); [EOL]             fail("insert(-1, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, '!'); [EOL]             fail("insert(7, char) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '!'); [EOL]         assertEquals("!barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 0); [EOL]             fail("insert(-1, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 0); [EOL]             fail("insert(7, int) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, '0'); [EOL]         assertEquals("0barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 1L); [EOL]             fail("insert(-1, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 1L); [EOL]             fail("insert(7, long) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 1L); [EOL]         assertEquals("1barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 2.3F); [EOL]             fail("insert(-1, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 2.3F); [EOL]             fail("insert(7, float) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 2.3F); [EOL]         assertEquals("2.3barbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, 4.5D); [EOL]             fail("insert(-1, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, 4.5D); [EOL]             fail("insert(7, double) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, 4.5D); [EOL]         assertEquals("4.5barbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteAll_char() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteAll('X'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteAll('a'); [EOL]         assertEquals("bcbccb", sb.toString()); [EOL]         sb.deleteAll('c'); [EOL]         assertEquals("bbb", sb.toString()); [EOL]         sb.deleteAll('b'); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteAll('b'); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_char() { [EOL]         StrBuilder sb = new StrBuilder("abcba"); [EOL]         sb.deleteFirst('X'); [EOL]         assertEquals("abcba", sb.toString()); [EOL]         sb.deleteFirst('a'); [EOL]         assertEquals("bcba", sb.toString()); [EOL]         sb.deleteFirst('c'); [EOL]         assertEquals("bba", sb.toString()); [EOL]         sb.deleteFirst('b'); [EOL]         assertEquals("ba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst('b'); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteAll_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteAll((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteAll(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]          [EOL]         sb.deleteAll("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteAll("a"); [EOL]         assertEquals("bcbccb", sb.toString()); [EOL]         sb.deleteAll("c"); [EOL]         assertEquals("bbb", sb.toString()); [EOL]         sb.deleteAll("b"); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteAll("bc"); [EOL]         assertEquals("acba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteAll("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL]         sb.deleteFirst("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst("a"); [EOL]         assertEquals("bcbccba", sb.toString()); [EOL]         sb.deleteFirst("c"); [EOL]         assertEquals("bbccba", sb.toString()); [EOL]         sb.deleteFirst("b"); [EOL]         assertEquals("bccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("abccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL]         sb.deleteFirst("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst("a"); [EOL]         assertEquals("bcbccba", sb.toString()); [EOL]         sb.deleteFirst("c"); [EOL]         assertEquals("bbccba", sb.toString()); [EOL]         sb.deleteFirst("b"); [EOL]         assertEquals("bccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("abccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReplace_int_int_String() { [EOL]         StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.replace(0, 1, "d"); [EOL]         assertEquals("dbc", sb.toString()); [EOL]         sb.replace(0, 1, "aaa"); [EOL]         assertEquals("aaabc", sb.toString()); [EOL]         sb.replace(0, 3, ""); [EOL]         assertEquals("bc", sb.toString()); [EOL]         sb.replace(1, 2, (String) null); [EOL]         assertEquals("b", sb.toString()); [EOL]         sb.replace(1, 1000, "text"); [EOL]         assertEquals("btext", sb.toString()); [EOL]         sb.replace(0, 1000, "text"); [EOL]         assertEquals("text", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("atext"); [EOL]         sb.replace(1, 1, "ny"); [EOL]         assertEquals("anytext", sb.toString()); [EOL]         try { [EOL]             sb.replace(2, 1, "anything"); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         sb = new StrBuilder(); [EOL]         try { [EOL]             sb.replace(1, 2, "anything"); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]         try { [EOL]             sb.replace(-1, 1, "anything"); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReplaceFirst_char_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceFirst('x', 'y'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceFirst('a', 'd'); [EOL]         assertEquals("dbcbccba", sb.toString()); [EOL]         sb.replaceFirst('b', 'e'); [EOL]         assertEquals("decbccba", sb.toString()); [EOL]         sb.replaceFirst('c', 'f'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]         sb.replaceFirst('d', 'd'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReplaceFirst_char_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceFirst('x', 'y'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceFirst('a', 'd'); [EOL]         assertEquals("dbcbccba", sb.toString()); [EOL]         sb.replaceFirst('b', 'e'); [EOL]         assertEquals("decbccba", sb.toString()); [EOL]         sb.replaceFirst('c', 'f'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]         sb.replaceFirst('d', 'd'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReplaceAll_String_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceAll((String) null, null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceAll((String) null, "anything"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceAll("", null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceAll("", "anything"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]          [EOL]         sb.replaceAll("x", "y"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceAll("a", "d"); [EOL]         assertEquals("dbcbccbd", sb.toString()); [EOL]         sb.replaceAll("d", null); [EOL]         assertEquals("bcbccb", sb.toString()); [EOL]         sb.replaceAll("cb", "-"); [EOL]         assertEquals("b-c-", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("abcba"); [EOL]         sb.replaceAll("b", "xbx"); [EOL]         assertEquals("axbxcxbxa", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("bb"); [EOL]         sb.replaceAll("b", "xbx"); [EOL]         assertEquals("xbxxbx", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReverse() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(true); [EOL]         assertEquals("eurt", sb.reverse().toString()); [EOL]         assertEquals("true", sb.reverse().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testStartsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.startsWith("a")); [EOL]         assertFalse(sb.startsWith(null)); [EOL]         assertTrue(sb.startsWith("")); [EOL]         sb.append("abc"); [EOL]         assertTrue(sb.startsWith("a")); [EOL]         assertTrue(sb.startsWith("ab")); [EOL]         assertTrue(sb.startsWith("abc")); [EOL]         assertFalse(sb.startsWith("cba")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEndsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.endsWith("a")); [EOL]         assertFalse(sb.endsWith("c")); [EOL]         assertTrue(sb.endsWith("")); [EOL]         assertFalse(sb.endsWith(null)); [EOL]         sb.append("abc"); [EOL]         assertTrue(sb.endsWith("c")); [EOL]         assertTrue(sb.endsWith("bc")); [EOL]         assertTrue(sb.endsWith("abc")); [EOL]         assertFalse(sb.endsWith("cba")); [EOL]         assertFalse(sb.endsWith("abcd")); [EOL]         assertFalse(sb.endsWith(" abc")); [EOL]         assertFalse(sb.endsWith("abc ")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEndsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.endsWith("a")); [EOL]         assertFalse(sb.endsWith("c")); [EOL]         assertTrue(sb.endsWith("")); [EOL]         assertFalse(sb.endsWith(null)); [EOL]         sb.append("abc"); [EOL]         assertTrue(sb.endsWith("c")); [EOL]         assertTrue(sb.endsWith("bc")); [EOL]         assertTrue(sb.endsWith("abc")); [EOL]         assertFalse(sb.endsWith("cba")); [EOL]         assertFalse(sb.endsWith("abcd")); [EOL]         assertFalse(sb.endsWith(" abc")); [EOL]         assertFalse(sb.endsWith("abc ")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index is negative [EOL]        try { [EOL]             sb.subSequence(2, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index greater than length() [EOL]         try { [EOL]             sb.subSequence(2, sb.length() + 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Start index greater then end index [EOL]         try { [EOL]             sb.subSequence(3, 2); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Normal cases [EOL]         assertEquals ("hello", sb.subSequence(0, 5)); [EOL]         assertEquals ("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]         assertEquals ("goodbye", sb.subSequence(6, 13)); [EOL]         assertEquals ("hello goodbye".subSequence(6,13), sb.subSequence(6, 13)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index is negative [EOL]        try { [EOL]             sb.subSequence(2, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index greater than length() [EOL]         try { [EOL]             sb.subSequence(2, sb.length() + 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Start index greater then end index [EOL]         try { [EOL]             sb.subSequence(3, 2); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Normal cases [EOL]         assertEquals ("hello", sb.subSequence(0, 5)); [EOL]         assertEquals ("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]         assertEquals ("goodbye", sb.subSequence(6, 13)); [EOL]         assertEquals ("hello goodbye".subSequence(6,13), sb.subSequence(6, 13)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index is negative [EOL]        try { [EOL]             sb.subSequence(2, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index greater than length() [EOL]         try { [EOL]             sb.subSequence(2, sb.length() + 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Start index greater then end index [EOL]         try { [EOL]             sb.subSequence(3, 2); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Normal cases [EOL]         assertEquals ("hello", sb.subSequence(0, 5)); [EOL]         assertEquals ("hello goodbye".subSequence(0, 6), sb.subSequence(0, 6)); [EOL]         assertEquals ("goodbye", sb.subSequence(6, 13)); [EOL]         assertEquals ("hello goodbye".subSequence(6,13), sb.subSequence(6, 13)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testRightString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("right", sb.rightString(5)); [EOL]         assertEquals("", sb.rightString(0)); [EOL]         assertEquals("", sb.rightString(-5)); [EOL]         assertEquals("left right", sb.rightString(15)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRightString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("right", sb.rightString(5)); [EOL]         assertEquals("", sb.rightString(0)); [EOL]         assertEquals("", sb.rightString(-5)); [EOL]         assertEquals("left right", sb.rightString(15)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMidString() { [EOL]         final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]         assertEquals("goodbye", sb.midString(6, 7)); [EOL]         assertEquals("hello", sb.midString(0, 5)); [EOL]         assertEquals("hello", sb.midString(-5, 5)); [EOL]         assertEquals("", sb.midString(0, -1)); [EOL]         assertEquals("", sb.midString(20, 2)); [EOL]         assertEquals("hello", sb.midString(14, 22)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMidString() { [EOL]         final StrBuilder sb = new StrBuilder("hello goodbye hello"); [EOL]         assertEquals("goodbye", sb.midString(6, 7)); [EOL]         assertEquals("hello", sb.midString(0, 5)); [EOL]         assertEquals("hello", sb.midString(-5, 5)); [EOL]         assertEquals("", sb.midString(0, -1)); [EOL]         assertEquals("", sb.midString(20, 2)); [EOL]         assertEquals("hello", sb.midString(14, 22)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]         assertTrue(sb.contains('a')); [EOL]         assertTrue(sb.contains('o')); [EOL]         assertTrue(sb.contains('z')); [EOL]         assertFalse(sb.contains('1')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL]         sb.deleteFirst("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst("a"); [EOL]         assertEquals("bcbccba", sb.toString()); [EOL]         sb.deleteFirst("c"); [EOL]         assertEquals("bbccba", sb.toString()); [EOL]         sb.deleteFirst("b"); [EOL]         assertEquals("bccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("abccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL]         sb.deleteFirst("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst("a"); [EOL]         assertEquals("bcbccba", sb.toString()); [EOL]         sb.deleteFirst("c"); [EOL]         assertEquals("bbccba", sb.toString()); [EOL]         sb.deleteFirst("b"); [EOL]         assertEquals("bccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("abccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL]         sb.deleteFirst("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst("a"); [EOL]         assertEquals("bcbccba", sb.toString()); [EOL]         sb.deleteFirst("c"); [EOL]         assertEquals("bbccba", sb.toString()); [EOL]         sb.deleteFirst("b"); [EOL]         assertEquals("bccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("abccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOf_StrMatcher() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]         assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); [EOL]         assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); [EOL]         assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]          [EOL]         sb.append(" A1 junction"); [EOL]         assertEquals(6, sb.indexOf(A_NUMBER_MATCHER)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOf_StrMatcher() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]         assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); [EOL]         assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); [EOL]         assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]          [EOL]         sb.append(" A1 junction"); [EOL]         assertEquals(6, sb.indexOf(A_NUMBER_MATCHER)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]          [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]          [EOL]         assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]          [EOL]         assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]         assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]          [EOL]         assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]         assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]          [EOL]         sb = new StrBuilder("xyzabc"); [EOL]         assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]         assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]          [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]          [EOL]         assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]          [EOL]         assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]         assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]          [EOL]         assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]         assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]          [EOL]         sb = new StrBuilder("xyzabc"); [EOL]         assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]         assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]          [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]          [EOL]         assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("ab", 1), sb.lastIndexOf("ab", 1)); [EOL]          [EOL]         assertEquals(1, sb.lastIndexOf("b", 2)); [EOL]         assertEquals("abab".lastIndexOf("b", 2), sb.lastIndexOf("b", 2)); [EOL]          [EOL]         assertEquals(1, sb.lastIndexOf("ba", 2)); [EOL]         assertEquals("abab".lastIndexOf("ba", 2), sb.lastIndexOf("ba", 2)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("z", 2)); [EOL]          [EOL]         sb = new StrBuilder("xyzabc"); [EOL]         assertEquals(2, sb.lastIndexOf("za", sb.length())); [EOL]         assertEquals(-1, sb.lastIndexOf("za", 1)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf((String) null, 2)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOf_StrMatcher_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0)); [EOL]         assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1)); [EOL]         assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0)); [EOL]         assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2)); [EOL]         assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4)); [EOL]         assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0)); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0)); [EOL]          [EOL]         sb.append(" A1 junction with A2"); [EOL]         assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5)); [EOL]         assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds [EOL]         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7)); [EOL]         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22)); [EOL]         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds [EOL]         assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24)); [EOL]     } [EOL]  [EOL]     static final StrMatcher A_NUMBER_MATCHER = new StrMatcher() { [EOL]         @Override [EOL]         public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) { [EOL]             if (buffer[pos] == 'A') { [EOL]                 pos++; [EOL]                 if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') { [EOL]                     return 2; [EOL]                 } [EOL]             } [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOf_StrMatcher_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0)); [EOL]         assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1)); [EOL]         assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 2)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 3)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 4)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 5)); [EOL]         assertEquals(3, sb.lastIndexOf(StrMatcher.charMatcher('b'), 6)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), -2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.spaceMatcher(), 0)); [EOL]         assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 2)); [EOL]         assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 4)); [EOL]         assertEquals(2, sb.lastIndexOf(StrMatcher.spaceMatcher(), 20)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.noneMatcher(), 0)); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 0)); [EOL]          [EOL]         sb.append(" A1 junction with A2"); [EOL]         assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 5)); [EOL]         assertEquals(-1, sb.lastIndexOf(A_NUMBER_MATCHER, 6)); // A matches, 1 is outside bounds [EOL]         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 7)); [EOL]         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 22)); [EOL]         assertEquals(6, sb.lastIndexOf(A_NUMBER_MATCHER, 23)); // A matches, 2 is outside bounds [EOL]         assertEquals(23, sb.lastIndexOf(A_NUMBER_MATCHER, 24)); [EOL]     } [EOL]  [EOL]     static final StrMatcher A_NUMBER_MATCHER = new StrMatcher() { [EOL]         @Override [EOL]         public int isMatch(final char[] buffer, int pos, final int bufferStart, final int bufferEnd) { [EOL]             if (buffer[pos] == 'A') { [EOL]                 pos++; [EOL]                 if (pos < bufferEnd && buffer[pos] >= '0' && buffer[pos] <= '9') { [EOL]                     return 2; [EOL]                 } [EOL]             } [EOL]             return 0; [EOL]         } [EOL]     }; [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEqualsIgnoreCase() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]         assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb1.append("abc"); [EOL]         assertFalse(sb1.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb2.append("ABC"); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb2.clear().append("abc"); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]         assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb2.clear().append("aBc"); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEqualsIgnoreCase() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]         assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb1.append("abc"); [EOL]         assertFalse(sb1.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb2.append("ABC"); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb2.clear().append("abc"); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb1)); [EOL]         assertTrue(sb2.equalsIgnoreCase(sb2)); [EOL]          [EOL]         sb2.clear().append("aBc"); [EOL]         assertTrue(sb1.equalsIgnoreCase(sb2)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals(sb1)); [EOL]         assertTrue(sb2.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb1.append("abc"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.append("ABC"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.clear().append("abc"); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]         assertFalse(sb1.equals("abc")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals(sb1)); [EOL]         assertTrue(sb2.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb1.append("abc"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.append("ABC"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.clear().append("abc"); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]         assertFalse(sb1.equals("abc")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         final int hc1a = sb.hashCode(); [EOL]         final int hc1b = sb.hashCode(); [EOL]         assertEquals(0, hc1a); [EOL]         assertEquals(hc1a, hc1b); [EOL]          [EOL]         sb.append("abc"); [EOL]         final int hc2a = sb.hashCode(); [EOL]         final int hc2b = sb.hashCode(); [EOL]         assertTrue(hc2a != 0); [EOL]         assertEquals(hc2a, hc2b); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToStringBuffer() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(new StringBuffer().toString(), sb.toStringBuffer().toString()); [EOL]          [EOL]         sb.append("junit"); [EOL]         assertEquals(new StringBuffer("junit").toString(), sb.toStringBuffer().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsBuilder() { [EOL]         final StrBuilder sb = new StrBuilder().appendAll("Lorem", " ", "ipsum", " ", "dolor"); [EOL]         assertEquals(sb.toString(), sb.build()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]         assertEquals(2, tokens1.length); [EOL]         assertEquals("a", tokens1[0]); [EOL]         assertEquals("b", tokens1[1]); [EOL]         assertEquals(2, t.size()); [EOL]          [EOL]         b.append("c d "); [EOL]         final String[] tokens2 = t.getTokenArray(); [EOL]         assertEquals(2, tokens2.length); [EOL]         assertEquals("a", tokens2[0]); [EOL]         assertEquals("b", tokens2[1]); [EOL]         assertEquals(2, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]          [EOL]         t.reset(); [EOL]         final String[] tokens3 = t.getTokenArray(); [EOL]         assertEquals(4, tokens3.length); [EOL]         assertEquals("a", tokens3[0]); [EOL]         assertEquals("b", tokens3[1]); [EOL]         assertEquals("c", tokens3[2]); [EOL]         assertEquals("d", tokens3[3]); [EOL]         assertEquals(4, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]         assertEquals("c", t.next()); [EOL]         assertEquals("d", t.next()); [EOL]          [EOL]         assertEquals("a b c d ", t.getContent()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]         assertEquals(2, tokens1.length); [EOL]         assertEquals("a", tokens1[0]); [EOL]         assertEquals("b", tokens1[1]); [EOL]         assertEquals(2, t.size()); [EOL]          [EOL]         b.append("c d "); [EOL]         final String[] tokens2 = t.getTokenArray(); [EOL]         assertEquals(2, tokens2.length); [EOL]         assertEquals("a", tokens2[0]); [EOL]         assertEquals("b", tokens2[1]); [EOL]         assertEquals(2, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]          [EOL]         t.reset(); [EOL]         final String[] tokens3 = t.getTokenArray(); [EOL]         assertEquals(4, tokens3.length); [EOL]         assertEquals("a", tokens3[0]); [EOL]         assertEquals("b", tokens3[1]); [EOL]         assertEquals("c", tokens3[2]); [EOL]         assertEquals("d", tokens3[3]); [EOL]         assertEquals(4, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]         assertEquals("c", t.next()); [EOL]         assertEquals("d", t.next()); [EOL]          [EOL]         assertEquals("a b c d ", t.getContent()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]         assertEquals(2, tokens1.length); [EOL]         assertEquals("a", tokens1[0]); [EOL]         assertEquals("b", tokens1[1]); [EOL]         assertEquals(2, t.size()); [EOL]          [EOL]         b.append("c d "); [EOL]         final String[] tokens2 = t.getTokenArray(); [EOL]         assertEquals(2, tokens2.length); [EOL]         assertEquals("a", tokens2[0]); [EOL]         assertEquals("b", tokens2[1]); [EOL]         assertEquals(2, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]          [EOL]         t.reset(); [EOL]         final String[] tokens3 = t.getTokenArray(); [EOL]         assertEquals(4, tokens3.length); [EOL]         assertEquals("a", tokens3[0]); [EOL]         assertEquals("b", tokens3[1]); [EOL]         assertEquals("c", tokens3[2]); [EOL]         assertEquals("d", tokens3[3]); [EOL]         assertEquals(4, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]         assertEquals("c", t.next()); [EOL]         assertEquals("d", t.next()); [EOL]          [EOL]         assertEquals("a b c d ", t.getContent()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text", new String(buf, 0, 9)); [EOL]          [EOL]         assertEquals(-1, reader.read()); [EOL]         assertFalse(reader.ready()); [EOL]         assertEquals(0, reader.skip(2)); [EOL]         assertEquals(0, reader.skip(-1)); [EOL]          [EOL]         assertTrue(reader.markSupported()); [EOL]         reader = sb.asReader(); [EOL]         assertEquals('s', reader.read()); [EOL]         reader.mark(-1); [EOL]         char[] array = new char[3]; [EOL]         assertEquals(3, reader.read(array, 0, 3)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('m', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         reader.reset(); [EOL]         assertEquals(1, reader.read(array, 1, 1)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('o', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         assertEquals(2, reader.skip(2)); [EOL]         assertEquals(' ', reader.read()); [EOL]          [EOL]         assertTrue(reader.ready()); [EOL]         reader.close(); [EOL]         assertTrue(reader.ready()); [EOL]          [EOL]         reader = sb.asReader(); [EOL]         array = new char[3]; [EOL]         try { [EOL]             reader.read(array, -1, 0); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 100, 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, 100); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]          [EOL]         assertEquals(0, reader.read(array, 0, 0)); [EOL]         assertEquals(0, array[0]); [EOL]         assertEquals(0, array[1]); [EOL]         assertEquals(0, array[2]); [EOL]          [EOL]         reader.skip(9); [EOL]         assertEquals(-1, reader.read(array, 0, 1)); [EOL]          [EOL]         reader.reset(); [EOL]         array = new char[30]; [EOL]         assertEquals(9, reader.read(array, 0, 30)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text", new String(buf, 0, 9)); [EOL]          [EOL]         assertEquals(-1, reader.read()); [EOL]         assertFalse(reader.ready()); [EOL]         assertEquals(0, reader.skip(2)); [EOL]         assertEquals(0, reader.skip(-1)); [EOL]          [EOL]         assertTrue(reader.markSupported()); [EOL]         reader = sb.asReader(); [EOL]         assertEquals('s', reader.read()); [EOL]         reader.mark(-1); [EOL]         char[] array = new char[3]; [EOL]         assertEquals(3, reader.read(array, 0, 3)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('m', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         reader.reset(); [EOL]         assertEquals(1, reader.read(array, 1, 1)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('o', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         assertEquals(2, reader.skip(2)); [EOL]         assertEquals(' ', reader.read()); [EOL]          [EOL]         assertTrue(reader.ready()); [EOL]         reader.close(); [EOL]         assertTrue(reader.ready()); [EOL]          [EOL]         reader = sb.asReader(); [EOL]         array = new char[3]; [EOL]         try { [EOL]             reader.read(array, -1, 0); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 100, 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, 100); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]          [EOL]         assertEquals(0, reader.read(array, 0, 0)); [EOL]         assertEquals(0, array[0]); [EOL]         assertEquals(0, array[1]); [EOL]         assertEquals(0, array[2]); [EOL]          [EOL]         reader.skip(9); [EOL]         assertEquals(-1, reader.read(array, 0, 1)); [EOL]          [EOL]         reader.reset(); [EOL]         array = new char[30]; [EOL]         assertEquals(9, reader.read(array, 0, 30)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text", new String(buf, 0, 9)); [EOL]          [EOL]         assertEquals(-1, reader.read()); [EOL]         assertFalse(reader.ready()); [EOL]         assertEquals(0, reader.skip(2)); [EOL]         assertEquals(0, reader.skip(-1)); [EOL]          [EOL]         assertTrue(reader.markSupported()); [EOL]         reader = sb.asReader(); [EOL]         assertEquals('s', reader.read()); [EOL]         reader.mark(-1); [EOL]         char[] array = new char[3]; [EOL]         assertEquals(3, reader.read(array, 0, 3)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('m', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         reader.reset(); [EOL]         assertEquals(1, reader.read(array, 1, 1)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('o', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         assertEquals(2, reader.skip(2)); [EOL]         assertEquals(' ', reader.read()); [EOL]          [EOL]         assertTrue(reader.ready()); [EOL]         reader.close(); [EOL]         assertTrue(reader.ready()); [EOL]          [EOL]         reader = sb.asReader(); [EOL]         array = new char[3]; [EOL]         try { [EOL]             reader.read(array, -1, 0); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 100, 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, 100); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]          [EOL]         assertEquals(0, reader.read(array, 0, 0)); [EOL]         assertEquals(0, array[0]); [EOL]         assertEquals(0, array[1]); [EOL]         assertEquals(0, array[2]); [EOL]          [EOL]         reader.skip(9); [EOL]         assertEquals(-1, reader.read(array, 0, 1)); [EOL]          [EOL]         reader.reset(); [EOL]         array = new char[30]; [EOL]         assertEquals(9, reader.read(array, 0, 30)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text", new String(buf, 0, 9)); [EOL]          [EOL]         assertEquals(-1, reader.read()); [EOL]         assertFalse(reader.ready()); [EOL]         assertEquals(0, reader.skip(2)); [EOL]         assertEquals(0, reader.skip(-1)); [EOL]          [EOL]         assertTrue(reader.markSupported()); [EOL]         reader = sb.asReader(); [EOL]         assertEquals('s', reader.read()); [EOL]         reader.mark(-1); [EOL]         char[] array = new char[3]; [EOL]         assertEquals(3, reader.read(array, 0, 3)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('m', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         reader.reset(); [EOL]         assertEquals(1, reader.read(array, 1, 1)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('o', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         assertEquals(2, reader.skip(2)); [EOL]         assertEquals(' ', reader.read()); [EOL]          [EOL]         assertTrue(reader.ready()); [EOL]         reader.close(); [EOL]         assertTrue(reader.ready()); [EOL]          [EOL]         reader = sb.asReader(); [EOL]         array = new char[3]; [EOL]         try { [EOL]             reader.read(array, -1, 0); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 100, 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, 0, 100); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]         try { [EOL]             reader.read(array, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException ex) {} [EOL]          [EOL]         assertEquals(0, reader.read(array, 0, 0)); [EOL]         assertEquals(0, array[0]); [EOL]         assertEquals(0, array[1]); [EOL]         assertEquals(0, array[2]); [EOL]          [EOL]         reader.skip(9); [EOL]         assertEquals(-1, reader.read(array, 0, 1)); [EOL]          [EOL]         reader.reset(); [EOL]         array = new char[30]; [EOL]         assertEquals(9, reader.read(array, 0, 30)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsWriter() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("base"); [EOL]         final Writer writer = sb.asWriter(); [EOL]          [EOL]         writer.write('l'); [EOL]         assertEquals("basel", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'i', 'n'}); [EOL]         assertEquals("baselin", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'n', 'e', 'r'}, 1, 2); [EOL]         assertEquals("baseliner", sb.toString()); [EOL]          [EOL]         writer.write(" rout"); [EOL]         assertEquals("baseliner rout", sb.toString()); [EOL]          [EOL]         writer.write("ping that server", 1, 3); [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.flush();  // no effect [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.close();  // no effect [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.write(" hi");  // works after close [EOL]         assertEquals("baseliner routing hi", sb.toString()); [EOL]          [EOL]         sb.setLength(4);  // mix and match [EOL]         writer.write('d'); [EOL]         assertEquals("based", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsWriter() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("base"); [EOL]         final Writer writer = sb.asWriter(); [EOL]          [EOL]         writer.write('l'); [EOL]         assertEquals("basel", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'i', 'n'}); [EOL]         assertEquals("baselin", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'n', 'e', 'r'}, 1, 2); [EOL]         assertEquals("baseliner", sb.toString()); [EOL]          [EOL]         writer.write(" rout"); [EOL]         assertEquals("baseliner rout", sb.toString()); [EOL]          [EOL]         writer.write("ping that server", 1, 3); [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.flush();  // no effect [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.close();  // no effect [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.write(" hi");  // works after close [EOL]         assertEquals("baseliner routing hi", sb.toString()); [EOL]          [EOL]         sb.setLength(4);  // mix and match [EOL]         writer.write('d'); [EOL]         assertEquals("based", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
lang3/Range.java
@Test [EOL]     public void testIsWithCompare(){ [EOL]         final Comparator<Integer> c = new Comparator<Integer>(){ [EOL]             @Override [EOL]             public int compare(final Integer o1, final Integer o2) { [EOL]                 return 0; // all integers are equal [EOL]             } [EOL]         }; [EOL]         Range<Integer> ri = Range.is(10); [EOL]         assertFalse("should not contain null",ri.contains(null)); [EOL]         assertTrue("should contain 10",ri.contains(10)); [EOL]         assertFalse("should not contain 11",ri.contains(11)); [EOL]         ri = Range.is(10,c); [EOL]         assertFalse("should not contain null",ri.contains(null)); [EOL]         assertTrue("should contain 10",ri.contains(10)); [EOL]         assertTrue("should contain 11",ri.contains(11)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsWithCompare(){ [EOL]         final Comparator<Integer> c = new Comparator<Integer>(){ [EOL]             @Override [EOL]             public int compare(final Integer o1, final Integer o2) { [EOL]                 return 0; // all integers are equal [EOL]             } [EOL]         }; [EOL]         Range<Integer> ri = Range.is(10); [EOL]         assertFalse("should not contain null",ri.contains(null)); [EOL]         assertTrue("should contain 10",ri.contains(10)); [EOL]         assertFalse("should not contain 11",ri.contains(11)); [EOL]         ri = Range.is(10,c); [EOL]         assertFalse("should not contain null",ri.contains(null)); [EOL]         assertTrue("should contain 10",ri.contains(10)); [EOL]         assertTrue("should contain 11",ri.contains(11)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetMinimum() { [EOL]         assertEquals(10, (int) intRange.getMinimum()); [EOL]         assertEquals(10L, (long) longRange.getMinimum()); [EOL]         assertEquals(10f, floatRange.getMinimum(), 0.00001f); [EOL]         assertEquals(10d, doubleRange.getMinimum(), 0.00001d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testComparableConstructors() { [EOL]         final Comparable c =  [EOL]             new Comparable() {  [EOL]                 @Override [EOL]                 public int compareTo(final Object other) { [EOL]                     return 1; [EOL]                 } [EOL]             }; [EOL]         final Range r1 = Range.is(c); [EOL]         final Range r2 = Range.between(c, c); [EOL]         assertEquals(true, r1.isNaturalOrdering()); [EOL]         assertEquals(true, r2.isNaturalOrdering()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsWithCompare(){ [EOL]         final Comparator<Integer> c = new Comparator<Integer>(){ [EOL]             @Override [EOL]             public int compare(final Integer o1, final Integer o2) { [EOL]                 return 0; // all integers are equal [EOL]             } [EOL]         }; [EOL]         Range<Integer> ri = Range.is(10); [EOL]         assertFalse("should not contain null",ri.contains(null)); [EOL]         assertTrue("should contain 10",ri.contains(10)); [EOL]         assertFalse("should not contain 11",ri.contains(11)); [EOL]         ri = Range.is(10,c); [EOL]         assertFalse("should not contain null",ri.contains(null)); [EOL]         assertTrue("should contain 10",ri.contains(10)); [EOL]         assertTrue("should contain 11",ri.contains(11)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAfter() { [EOL]         assertFalse(intRange.isAfter(null)); [EOL]          [EOL]         assertTrue(intRange.isAfter(5)); [EOL]         assertFalse(intRange.isAfter(10)); [EOL]         assertFalse(intRange.isAfter(15)); [EOL]         assertFalse(intRange.isAfter(20)); [EOL]         assertFalse(intRange.isAfter(25)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAfter() { [EOL]         assertFalse(intRange.isAfter(null)); [EOL]          [EOL]         assertTrue(intRange.isAfter(5)); [EOL]         assertFalse(intRange.isAfter(10)); [EOL]         assertFalse(intRange.isAfter(15)); [EOL]         assertFalse(intRange.isAfter(20)); [EOL]         assertFalse(intRange.isAfter(25)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testElementCompareTo() { [EOL]         try { [EOL]             intRange.elementCompareTo(null); [EOL]             fail("NullPointerException should have been thrown"); [EOL]         } catch(final NullPointerException npe) { [EOL]             // expected [EOL]         } [EOL]          [EOL]         assertEquals(-1, intRange.elementCompareTo(5)); [EOL]         assertEquals(0, intRange.elementCompareTo(10)); [EOL]         assertEquals(0, intRange.elementCompareTo(15)); [EOL]         assertEquals(0, intRange.elementCompareTo(20)); [EOL]         assertEquals(1, intRange.elementCompareTo(25)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testElementCompareTo() { [EOL]         try { [EOL]             intRange.elementCompareTo(null); [EOL]             fail("NullPointerException should have been thrown"); [EOL]         } catch(final NullPointerException npe) { [EOL]             // expected [EOL]         } [EOL]          [EOL]         assertEquals(-1, intRange.elementCompareTo(5)); [EOL]         assertEquals(0, intRange.elementCompareTo(10)); [EOL]         assertEquals(0, intRange.elementCompareTo(15)); [EOL]         assertEquals(0, intRange.elementCompareTo(20)); [EOL]         assertEquals(1, intRange.elementCompareTo(25)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsAfterRange() { [EOL]         assertFalse(intRange.isAfterRange(null)); [EOL]          [EOL]         assertTrue(intRange.isAfterRange(Range.between(5, 9))); [EOL]          [EOL]         assertFalse(intRange.isAfterRange(Range.between(5, 10))); [EOL]         assertFalse(intRange.isAfterRange(Range.between(5, 20))); [EOL]         assertFalse(intRange.isAfterRange(Range.between(5, 25))); [EOL]         assertFalse(intRange.isAfterRange(Range.between(15, 25))); [EOL]          [EOL]         assertFalse(intRange.isAfterRange(Range.between(21, 25))); [EOL]          [EOL]         assertFalse(intRange.isAfterRange(Range.between(10, 20))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]  [EOL]         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsOverlappedBy() { [EOL]  [EOL]         // null handling [EOL]         assertFalse(intRange.isOverlappedBy(null)); [EOL]  [EOL]         // easy inside range [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(12, 18))); [EOL]  [EOL]         // outside range on each side [EOL]         assertFalse(intRange.isOverlappedBy(Range.between(32, 45))); [EOL]         assertFalse(intRange.isOverlappedBy(Range.between(2, 8))); [EOL]  [EOL]         // equals range [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(10, 20))); [EOL]  [EOL]         // overlaps [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(9, 14))); [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(16, 21))); [EOL]  [EOL]         // touches lower boundary [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(10, 19))); [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(10, 21))); [EOL]  [EOL]         // touches upper boundary [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(11, 20))); [EOL]         assertTrue(intRange.isOverlappedBy(Range.between(9, 20))); [EOL]          [EOL]         // negative [EOL]         assertFalse(intRange.isOverlappedBy(Range.between(-11, -18))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]  [EOL]         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); [EOL]         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); [EOL]          [EOL]         assertEquals(intRange.hashCode(), intRange.hashCode()); [EOL]         assertTrue(intRange.hashCode() != 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertNotNull(byteRange.toString()); [EOL]          [EOL]         final String str = intRange.toString(); [EOL]         assertEquals("[10..20]", str); [EOL]         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertNotNull(byteRange.toString()); [EOL]          [EOL]         final String str = intRange.toString(); [EOL]         assertEquals("[10..20]", str); [EOL]         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertNotNull(byteRange.toString()); [EOL]          [EOL]         final String str = intRange.toString(); [EOL]         assertEquals("[10..20]", str); [EOL]         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL]     } [EOL]  [EOL]
lang3/time/FastDateParser.java
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPatternMatches() { [EOL]         final DateParser parser= getInstance(yMdHmsSZ); [EOL]         assertEquals(yMdHmsSZ, parser.getPattern()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocaleMatches() { [EOL]         final DateParser parser= getInstance(yMdHmsSZ, SWEDEN); [EOL]         assertEquals(SWEDEN, parser.getLocale()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DateParser parser1= getInstance(YMD_SLASH); [EOL]         final DateParser parser2= getInstance(YMD_SLASH); [EOL]  [EOL]         assertEquals(parser1, parser2); [EOL]         assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]  [EOL]         assertFalse(parser1.equals(new Object())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DateParser parser1= getInstance(YMD_SLASH); [EOL]         final DateParser parser2= getInstance(YMD_SLASH); [EOL]  [EOL]         assertEquals(parser1, parser2); [EOL]         assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]  [EOL]         assertFalse(parser1.equals(new Object())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToStringContainsName() { [EOL]         final DateParser parser= getInstance(YMD_SLASH); [EOL]         assertTrue(parser.toString().startsWith("FastDate")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSpecialCharacters() throws Exception { [EOL]         testSdfAndFdp("q" ,"", true); // bad pattern character (at present) [EOL]         testSdfAndFdp("Q" ,"", true); // bad pattern character [EOL]         testSdfAndFdp("$" ,"$", false); // OK [EOL]         testSdfAndFdp("?.d" ,"?.12", false); // OK [EOL]         testSdfAndFdp("''yyyyMMdd'A''B'HHmmssSSS''", "'20030210A'B153320989'", false); // OK [EOL]         testSdfAndFdp("''''yyyyMMdd'A''B'HHmmssSSS''", "''20030210A'B153320989'", false); // OK [EOL]         testSdfAndFdp("'$\\Ed'" ,"$\\Ed", false); // OK [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDayOf() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10); [EOL]  [EOL]         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      * @throws ParseException [EOL]      */ [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDayOf() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10); [EOL]  [EOL]         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      * @throws ParseException [EOL]      */ [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDayOf() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10); [EOL]  [EOL]         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      * @throws ParseException [EOL]      */ [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_Short_AD() throws Exception { [EOL]         testLocales(SHORT_FORMAT, false); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
lang3/text/ExtendedMessageFormat.java
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]  [EOL]         ExtendedMessageFormat other = null; [EOL]  [EOL]         // Same object [EOL]         assertTrue("same, equals()",   emf.equals(emf)); [EOL]         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]  [EOL]         // Equal Object [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertTrue("equal, equals()",   emf.equals(other)); [EOL]         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Class [EOL]         other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertFalse("class, equals()",  emf.equals(other)); [EOL]         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode [EOL]          [EOL]         // Different pattern [EOL]         other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]         assertFalse("pattern, equals()",   emf.equals(other)); [EOL]         assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different registry [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]         assertFalse("registry, equals()",   emf.equals(other)); [EOL]         assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Locale [EOL]         other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]         assertFalse("locale, equals()",  emf.equals(other)); [EOL]         assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test a built in format for the specified Locales, plus <code>null</code> Locale. [EOL]      * @param pattern MessageFormat pattern [EOL]      * @param args MessageFormat arguments [EOL]      * @param locales to test [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Object[] args, final Locale[] locales) { [EOL]         checkBuiltInFormat(pattern, null, args, locales); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test a built in format for the specified Locales, plus <code>null</code> Locale. [EOL]      * @param pattern MessageFormat pattern [EOL]      * @param registry FormatFactory registry to use [EOL]      * @param args MessageFormat arguments [EOL]      * @param locales to test [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Map<String, ?> registry, final Object[] args, final Locale[] locales) { [EOL]         checkBuiltInFormat(pattern, registry, args, (Locale) null); [EOL]         for (final Locale locale : locales) { [EOL]             checkBuiltInFormat(pattern, registry, args, locale); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Create an ExtendedMessageFormat for the specified pattern and locale and check the [EOL]      * formated output matches the expected result for the parameters. [EOL]      * @param pattern string [EOL]      * @param registry map [EOL]      * @param args Object[] [EOL]      * @param locale Locale [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Map<String, ?> registry, final Object[] args, final Locale locale) { [EOL]         final StringBuilder buffer = new StringBuilder(); [EOL]         buffer.append("Pattern=["); [EOL]         buffer.append(pattern); [EOL]         buffer.append("], locale=["); [EOL]         buffer.append(locale); [EOL]         buffer.append("]"); [EOL]         final MessageFormat mf = createMessageFormat(pattern, locale); [EOL]         // System.out.println(buffer + ", result=[" + mf.format(args) +"]"); [EOL]         ExtendedMessageFormat emf = null; [EOL]         if (locale == null) { [EOL]             emf = new ExtendedMessageFormat(pattern); [EOL]         } else { [EOL]             emf = new ExtendedMessageFormat(pattern, locale); [EOL]         } [EOL]         assertEquals("format "    + buffer.toString(), mf.format(args), emf.format(args)); [EOL]         assertPatternsEqual("toPattern " + buffer.toString(), mf.toPattern(),  emf.toPattern()); [EOL]     } [EOL]  [EOL]     //can't trust what MessageFormat does with toPattern() pre 1.4: [EOL]     private void assertPatternsEqual(final String message, final String expected, final String actual) { [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals(message, expected, actual); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4). [EOL]      * @param pattern string [EOL]      * @param locale Locale [EOL]      * @return MessageFormat [EOL]      */ [EOL]     private MessageFormat createMessageFormat(final String pattern, final Locale locale) { [EOL]         final MessageFormat result = new MessageFormat(pattern); [EOL]         if (locale != null) { [EOL]             result.setLocale(locale); [EOL]             result.applyPattern(pattern); [EOL]         } [EOL]         return result; [EOL]     } [EOL]  [EOL]     // ------------------------ Test Formats ------------------------ [EOL]  [EOL]     /** [EOL]      * {@link Format} implementation which converts to lower case. [EOL]      */ [EOL]     private static class LowerCaseFormat extends Format { [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return toAppendTo.append(((String)obj).toLowerCase()); [EOL]         } [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) {throw new UnsupportedOperationException();} [EOL]     } [EOL]  [EOL]     /** [EOL]      * {@link Format} implementation which converts to upper case. [EOL]      */ [EOL]     private static class UpperCaseFormat extends Format { [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return toAppendTo.append(((String)obj).toUpperCase()); [EOL]         } [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) {throw new UnsupportedOperationException();} [EOL]     } [EOL]  [EOL]  [EOL]     // ------------------------ Test Format Factories --------------- [EOL]     /** [EOL]      * {@link FormatFactory} implementation for lower case format. [EOL]      */ [EOL]     private static class LowerCaseFormatFactory implements FormatFactory { [EOL]         private static final Format LOWER_INSTANCE = new LowerCaseFormat(); [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return LOWER_INSTANCE; [EOL]         } [EOL]     } [EOL]     /** [EOL]      * {@link FormatFactory} implementation for upper case format. [EOL]      */ [EOL]     private static class UpperCaseFormatFactory implements FormatFactory { [EOL]         private static final Format UPPER_INSTANCE = new UpperCaseFormat(); [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return UPPER_INSTANCE; [EOL]         } [EOL]     } [EOL]     /** [EOL]      * {@link FormatFactory} implementation to override date format "short" to "default". [EOL]      */ [EOL]     private static class OverrideShortDateFormatFactory implements FormatFactory { [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return !"short".equals(arguments) ? null [EOL]                     : locale == null ? DateFormat [EOL]                             .getDateInstance(DateFormat.DEFAULT) : DateFormat [EOL]                             .getDateInstance(DateFormat.DEFAULT, locale); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Alternative ExtendedMessageFormat impl. [EOL]      */ [EOL]     private static class OtherExtendedMessageFormat extends ExtendedMessageFormat { [EOL]         public OtherExtendedMessageFormat(final String pattern, final Locale locale, [EOL]                 final Map<String, ? extends FormatFactory> registry) { [EOL]             super(pattern, locale, registry); [EOL]         } [EOL]          [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]  [EOL]         ExtendedMessageFormat other = null; [EOL]  [EOL]         // Same object [EOL]         assertTrue("same, equals()",   emf.equals(emf)); [EOL]         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]  [EOL]         // Equal Object [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertTrue("equal, equals()",   emf.equals(other)); [EOL]         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Class [EOL]         other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertFalse("class, equals()",  emf.equals(other)); [EOL]         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode [EOL]          [EOL]         // Different pattern [EOL]         other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]         assertFalse("pattern, equals()",   emf.equals(other)); [EOL]         assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different registry [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]         assertFalse("registry, equals()",   emf.equals(other)); [EOL]         assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Locale [EOL]         other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]         assertFalse("locale, equals()",  emf.equals(other)); [EOL]         assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test a built in format for the specified Locales, plus <code>null</code> Locale. [EOL]      * @param pattern MessageFormat pattern [EOL]      * @param args MessageFormat arguments [EOL]      * @param locales to test [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Object[] args, final Locale[] locales) { [EOL]         checkBuiltInFormat(pattern, null, args, locales); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test a built in format for the specified Locales, plus <code>null</code> Locale. [EOL]      * @param pattern MessageFormat pattern [EOL]      * @param registry FormatFactory registry to use [EOL]      * @param args MessageFormat arguments [EOL]      * @param locales to test [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Map<String, ?> registry, final Object[] args, final Locale[] locales) { [EOL]         checkBuiltInFormat(pattern, registry, args, (Locale) null); [EOL]         for (final Locale locale : locales) { [EOL]             checkBuiltInFormat(pattern, registry, args, locale); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Create an ExtendedMessageFormat for the specified pattern and locale and check the [EOL]      * formated output matches the expected result for the parameters. [EOL]      * @param pattern string [EOL]      * @param registry map [EOL]      * @param args Object[] [EOL]      * @param locale Locale [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Map<String, ?> registry, final Object[] args, final Locale locale) { [EOL]         final StringBuilder buffer = new StringBuilder(); [EOL]         buffer.append("Pattern=["); [EOL]         buffer.append(pattern); [EOL]         buffer.append("], locale=["); [EOL]         buffer.append(locale); [EOL]         buffer.append("]"); [EOL]         final MessageFormat mf = createMessageFormat(pattern, locale); [EOL]         // System.out.println(buffer + ", result=[" + mf.format(args) +"]"); [EOL]         ExtendedMessageFormat emf = null; [EOL]         if (locale == null) { [EOL]             emf = new ExtendedMessageFormat(pattern); [EOL]         } else { [EOL]             emf = new ExtendedMessageFormat(pattern, locale); [EOL]         } [EOL]         assertEquals("format "    + buffer.toString(), mf.format(args), emf.format(args)); [EOL]         assertPatternsEqual("toPattern " + buffer.toString(), mf.toPattern(),  emf.toPattern()); [EOL]     } [EOL]  [EOL]     //can't trust what MessageFormat does with toPattern() pre 1.4: [EOL]     private void assertPatternsEqual(final String message, final String expected, final String actual) { [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals(message, expected, actual); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4). [EOL]      * @param pattern string [EOL]      * @param locale Locale [EOL]      * @return MessageFormat [EOL]      */ [EOL]     private MessageFormat createMessageFormat(final String pattern, final Locale locale) { [EOL]         final MessageFormat result = new MessageFormat(pattern); [EOL]         if (locale != null) { [EOL]             result.setLocale(locale); [EOL]             result.applyPattern(pattern); [EOL]         } [EOL]         return result; [EOL]     } [EOL]  [EOL]     // ------------------------ Test Formats ------------------------ [EOL]  [EOL]     /** [EOL]      * {@link Format} implementation which converts to lower case. [EOL]      */ [EOL]     private static class LowerCaseFormat extends Format { [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return toAppendTo.append(((String)obj).toLowerCase()); [EOL]         } [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) {throw new UnsupportedOperationException();} [EOL]     } [EOL]  [EOL]     /** [EOL]      * {@link Format} implementation which converts to upper case. [EOL]      */ [EOL]     private static class UpperCaseFormat extends Format { [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return toAppendTo.append(((String)obj).toUpperCase()); [EOL]         } [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) {throw new UnsupportedOperationException();} [EOL]     } [EOL]  [EOL]  [EOL]     // ------------------------ Test Format Factories --------------- [EOL]     /** [EOL]      * {@link FormatFactory} implementation for lower case format. [EOL]      */ [EOL]     private static class LowerCaseFormatFactory implements FormatFactory { [EOL]         private static final Format LOWER_INSTANCE = new LowerCaseFormat(); [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return LOWER_INSTANCE; [EOL]         } [EOL]     } [EOL]     /** [EOL]      * {@link FormatFactory} implementation for upper case format. [EOL]      */ [EOL]     private static class UpperCaseFormatFactory implements FormatFactory { [EOL]         private static final Format UPPER_INSTANCE = new UpperCaseFormat(); [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return UPPER_INSTANCE; [EOL]         } [EOL]     } [EOL]     /** [EOL]      * {@link FormatFactory} implementation to override date format "short" to "default". [EOL]      */ [EOL]     private static class OverrideShortDateFormatFactory implements FormatFactory { [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return !"short".equals(arguments) ? null [EOL]                     : locale == null ? DateFormat [EOL]                             .getDateInstance(DateFormat.DEFAULT) : DateFormat [EOL]                             .getDateInstance(DateFormat.DEFAULT, locale); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Alternative ExtendedMessageFormat impl. [EOL]      */ [EOL]     private static class OtherExtendedMessageFormat extends ExtendedMessageFormat { [EOL]         public OtherExtendedMessageFormat(final String pattern, final Locale locale, [EOL]                 final Map<String, ? extends FormatFactory> registry) { [EOL]             super(pattern, locale, registry); [EOL]         } [EOL]          [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]  [EOL]         ExtendedMessageFormat other = null; [EOL]  [EOL]         // Same object [EOL]         assertTrue("same, equals()",   emf.equals(emf)); [EOL]         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]  [EOL]         // Equal Object [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertTrue("equal, equals()",   emf.equals(other)); [EOL]         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Class [EOL]         other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertFalse("class, equals()",  emf.equals(other)); [EOL]         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode [EOL]          [EOL]         // Different pattern [EOL]         other = new ExtendedMessageFormat("X" + pattern, Locale.US, registry); [EOL]         assertFalse("pattern, equals()",   emf.equals(other)); [EOL]         assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different registry [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, otherRegitry); [EOL]         assertFalse("registry, equals()",   emf.equals(other)); [EOL]         assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Locale [EOL]         other = new ExtendedMessageFormat(pattern, Locale.FRANCE, registry); [EOL]         assertFalse("locale, equals()",  emf.equals(other)); [EOL]         assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test a built in format for the specified Locales, plus <code>null</code> Locale. [EOL]      * @param pattern MessageFormat pattern [EOL]      * @param args MessageFormat arguments [EOL]      * @param locales to test [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Object[] args, final Locale[] locales) { [EOL]         checkBuiltInFormat(pattern, null, args, locales); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test a built in format for the specified Locales, plus <code>null</code> Locale. [EOL]      * @param pattern MessageFormat pattern [EOL]      * @param registry FormatFactory registry to use [EOL]      * @param args MessageFormat arguments [EOL]      * @param locales to test [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Map<String, ?> registry, final Object[] args, final Locale[] locales) { [EOL]         checkBuiltInFormat(pattern, registry, args, (Locale) null); [EOL]         for (final Locale locale : locales) { [EOL]             checkBuiltInFormat(pattern, registry, args, locale); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Create an ExtendedMessageFormat for the specified pattern and locale and check the [EOL]      * formated output matches the expected result for the parameters. [EOL]      * @param pattern string [EOL]      * @param registry map [EOL]      * @param args Object[] [EOL]      * @param locale Locale [EOL]      */ [EOL]     private void checkBuiltInFormat(final String pattern, final Map<String, ?> registry, final Object[] args, final Locale locale) { [EOL]         final StringBuilder buffer = new StringBuilder(); [EOL]         buffer.append("Pattern=["); [EOL]         buffer.append(pattern); [EOL]         buffer.append("], locale=["); [EOL]         buffer.append(locale); [EOL]         buffer.append("]"); [EOL]         final MessageFormat mf = createMessageFormat(pattern, locale); [EOL]         // System.out.println(buffer + ", result=[" + mf.format(args) +"]"); [EOL]         ExtendedMessageFormat emf = null; [EOL]         if (locale == null) { [EOL]             emf = new ExtendedMessageFormat(pattern); [EOL]         } else { [EOL]             emf = new ExtendedMessageFormat(pattern, locale); [EOL]         } [EOL]         assertEquals("format "    + buffer.toString(), mf.format(args), emf.format(args)); [EOL]         assertPatternsEqual("toPattern " + buffer.toString(), mf.toPattern(),  emf.toPattern()); [EOL]     } [EOL]  [EOL]     //can't trust what MessageFormat does with toPattern() pre 1.4: [EOL]     private void assertPatternsEqual(final String message, final String expected, final String actual) { [EOL]         if (SystemUtils.isJavaVersionAtLeast(JAVA_1_4)) { [EOL]             assertEquals(message, expected, actual); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Replace MessageFormat(String, Locale) constructor (not available until JDK 1.4). [EOL]      * @param pattern string [EOL]      * @param locale Locale [EOL]      * @return MessageFormat [EOL]      */ [EOL]     private MessageFormat createMessageFormat(final String pattern, final Locale locale) { [EOL]         final MessageFormat result = new MessageFormat(pattern); [EOL]         if (locale != null) { [EOL]             result.setLocale(locale); [EOL]             result.applyPattern(pattern); [EOL]         } [EOL]         return result; [EOL]     } [EOL]  [EOL]     // ------------------------ Test Formats ------------------------ [EOL]  [EOL]     /** [EOL]      * {@link Format} implementation which converts to lower case. [EOL]      */ [EOL]     private static class LowerCaseFormat extends Format { [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return toAppendTo.append(((String)obj).toLowerCase()); [EOL]         } [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) {throw new UnsupportedOperationException();} [EOL]     } [EOL]  [EOL]     /** [EOL]      * {@link Format} implementation which converts to upper case. [EOL]      */ [EOL]     private static class UpperCaseFormat extends Format { [EOL]         @Override [EOL]         public StringBuffer format(final Object obj, final StringBuffer toAppendTo, final FieldPosition pos) { [EOL]             return toAppendTo.append(((String)obj).toUpperCase()); [EOL]         } [EOL]         @Override [EOL]         public Object parseObject(final String source, final ParsePosition pos) {throw new UnsupportedOperationException();} [EOL]     } [EOL]  [EOL]  [EOL]     // ------------------------ Test Format Factories --------------- [EOL]     /** [EOL]      * {@link FormatFactory} implementation for lower case format. [EOL]      */ [EOL]     private static class LowerCaseFormatFactory implements FormatFactory { [EOL]         private static final Format LOWER_INSTANCE = new LowerCaseFormat(); [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return LOWER_INSTANCE; [EOL]         } [EOL]     } [EOL]     /** [EOL]      * {@link FormatFactory} implementation for upper case format. [EOL]      */ [EOL]     private static class UpperCaseFormatFactory implements FormatFactory { [EOL]         private static final Format UPPER_INSTANCE = new UpperCaseFormat(); [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return UPPER_INSTANCE; [EOL]         } [EOL]     } [EOL]     /** [EOL]      * {@link FormatFactory} implementation to override date format "short" to "default". [EOL]      */ [EOL]     private static class OverrideShortDateFormatFactory implements FormatFactory { [EOL]         @Override [EOL]         public Format getFormat(final String name, final String arguments, final Locale locale) { [EOL]             return !"short".equals(arguments) ? null [EOL]                     : locale == null ? DateFormat [EOL]                             .getDateInstance(DateFormat.DEFAULT) : DateFormat [EOL]                             .getDateInstance(DateFormat.DEFAULT, locale); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Alternative ExtendedMessageFormat impl. [EOL]      */ [EOL]     private static class OtherExtendedMessageFormat extends ExtendedMessageFormat { [EOL]         public OtherExtendedMessageFormat(final String pattern, final Locale locale, [EOL]                 final Map<String, ? extends FormatFactory> registry) { [EOL]             super(pattern, locale, registry); [EOL]         } [EOL]          [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]             if (locale == null) { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT); [EOL]                 nf = NumberFormat.getCurrencyInstance(); [EOL]                 emf = new ExtendedMessageFormat(pattern, registry); [EOL]             } else { [EOL]                 df = DateFormat.getDateInstance(DateFormat.SHORT, locale); [EOL]                 nf = NumberFormat.getCurrencyInstance(locale); [EOL]                 emf = new ExtendedMessageFormat(pattern, locale, registry); [EOL]             } [EOL]             final StringBuilder expected = new StringBuilder(); [EOL]             expected.append("Name: "); [EOL]             expected.append(args[0].toString().toUpperCase()); [EOL]             expected.append(" DOB: "); [EOL]             expected.append(df.format(args[1])); [EOL]             expected.append(" Salary: "); [EOL]             expected.append(nf.format(args[2])); [EOL]             assertPatternsEqual("pattern comparison for locale " + locale, expectedPattern, emf.toPattern()); [EOL]             assertEquals(String.valueOf(locale), expected.toString(), emf.format(args)); [EOL]         } [EOL]     } [EOL]  [EOL] //    /** [EOL] //     * Test extended formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{1,lower}|2.0#{1,upper}}"; [EOL] //        ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL] //        assertPatterns(null, pattern, emf.toPattern()); [EOL] //        try { [EOL] //            assertEquals("one", emf.format(new Object[] {Integer.valueOf(1), "ONE"})); [EOL] //            assertEquals("TWO", emf.format(new Object[] {Integer.valueOf(2), "two"})); [EOL] //        } catch (IllegalArgumentException e) { [EOL] //            // currently sub-formats not supported [EOL] //        } [EOL] //    } [EOL]  [EOL] //    /** [EOL] //     * Test mixed extended and built-in formats with choice format. [EOL] //     * [EOL] //     * NOTE: FAILING - currently sub-formats not supported [EOL] //     */ [EOL] //    public void testExtendedAndBuiltInWithChoiceFormat() { [EOL] //        String pattern = "Choice: {0,choice,1.0#{0} {1,lower} {2,number}|2.0#{0} {1,upper} {2,number,currency}}"; [EOL] //        Object[] lowArgs  = new Object[] {Integer.valueOf(1), "Low",  Double.valueOf("1234.56")}; [EOL] //        Object[] highArgs = new Object[] {Integer.valueOf(2), "High", Double.valueOf("9876.54")}; [EOL] //        Locale[] availableLocales = ChoiceFormat.getAvailableLocales(); [EOL] //        Locale[] testLocales = new Locale[availableLocales.length + 1]; [EOL] //        testLocales[0] = null; [EOL] //        System.arraycopy(availableLocales, 0, testLocales, 1, availableLocales.length); [EOL] //        for (int i = 0; i < testLocales.length; i++) { [EOL] //            NumberFormat nf = null; [EOL] //            NumberFormat cf = null; [EOL] //            ExtendedMessageFormat emf = null; [EOL] //            if (testLocales[i] == null) { [EOL] //                nf = NumberFormat.getNumberInstance(); [EOL] //                cf = NumberFormat.getCurrencyInstance(); [EOL] //                emf = new ExtendedMessageFormat(pattern, registry); [EOL] //            } else { [EOL] //                nf = NumberFormat.getNumberInstance(testLocales[i]); [EOL] //                cf = NumberFormat.getCurrencyInstance(testLocales[i]); [EOL] //                emf = new ExtendedMessageFormat(pattern, testLocales[i], registry); [EOL] //            } [EOL] //            assertPatterns(null, pattern, emf.toPattern()); [EOL] //            try { [EOL] //                String lowExpected = lowArgs[0] + " low "    + nf.format(lowArgs[2]); [EOL] //                String highExpected = highArgs[0] + " HIGH "  + cf.format(highArgs[2]); [EOL] //                assertEquals(lowExpected,  emf.format(lowArgs)); [EOL] //                assertEquals(highExpected, emf.format(highArgs)); [EOL] //            } catch (IllegalArgumentException e) { [EOL] //                // currently sub-formats not supported [EOL] //            } [EOL] //        } [EOL] //    } [EOL]  [EOL]     /** [EOL]      * Test the built in choice format. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
lang3/StringEscapeUtils.java
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]         assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests LANG-858. [EOL]      *  [EOL]      * @throws Exception [EOL]      */ [EOL]
@Test [EOL]     public void testUnescapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); [EOL]         assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code appendIfMissing}. [EOL]      */ [EOL]
@Test [EOL]     public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 [EOL]     } [EOL]      [EOL]
lang3/concurrent/ConstantInitializer.java
@Test [EOL]     public void testEqualsTrue() { [EOL]         checkEquals(init, true); [EOL]         ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>( [EOL]                 Integer.valueOf(VALUE.intValue())); [EOL]         checkEquals(init2, true); [EOL]         init = new ConstantInitializer<Integer>(null); [EOL]         init2 = new ConstantInitializer<Integer>(null); [EOL]         checkEquals(init2, true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests equals() if the expected result is false. [EOL]      */ [EOL]
@Test [EOL]     public void testEqualsWithOtherObjects() { [EOL]         checkEquals(null, false); [EOL]         checkEquals(this, false); [EOL]         checkEquals(new ConstantInitializer<String>("Test"), false); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the string representation. [EOL]      */ [EOL]
@Test [EOL]     public void testEqualsTrue() { [EOL]         checkEquals(init, true); [EOL]         ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>( [EOL]                 Integer.valueOf(VALUE.intValue())); [EOL]         checkEquals(init2, true); [EOL]         init = new ConstantInitializer<Integer>(null); [EOL]         init2 = new ConstantInitializer<Integer>(null); [EOL]         checkEquals(init2, true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests equals() if the expected result is false. [EOL]      */ [EOL]
@Test [EOL]     public void testToStringNull() { [EOL]         final String s = new ConstantInitializer<Object>(null).toString(); [EOL]         assertTrue("Object not found: " + s, s.indexOf("object = null") > 0); [EOL]     } [EOL] } [EOL]
