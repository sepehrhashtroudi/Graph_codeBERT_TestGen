Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.add((byte[]) null, (-929), (byte) (-82));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -929, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      float[] floatArray0 = new float[1];	      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[8];	      doubleArray0[7] = (-136.279203);	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[8];	      byteArray0[0] = (byte)124;	      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)6, 3377);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      char[] charArray0 = new char[7];	      charArray0[2] = 'e';	      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', 36);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      char[] charArray0 = new char[9];	      charArray0[0] = 'R';	      boolean boolean0 = ArrayUtils.contains(charArray0, ')');	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      short[] shortArray0 = new short[5];	      int int0 = ArrayUtils.indexOf(shortArray0, (short)3, Integer.MAX_VALUE);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[9];	      ArrayUtils.reverse(booleanArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      float[] floatArray0 = new float[7];	      ArrayUtils.reverse(floatArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      ArrayUtils.reverse(doubleArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      ArrayUtils.reverse(byteArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      char[] charArray0 = new char[6];	      ArrayUtils.reverse(charArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      short[] shortArray0 = new short[1];	      ArrayUtils.reverse(shortArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      int[] intArray0 = new int[7];	      ArrayUtils.reverse(intArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      char[] charArray0 = new char[9];	      char[] charArray1 = new char[2];	      boolean boolean0 = ArrayUtils.isSameLength(charArray1, charArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      long[] longArray0 = new long[9];	      long[] longArray1 = new long[8];	      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-3115));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      float[] floatArray0 = new float[1];	      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-1803), 0);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.subarray(floatArray0, 2, 99);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)3966, (int) (short)0);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      short[] shortArray0 = new short[1];	      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 0);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      int[] intArray0 = new int[4];	      int[] intArray1 = ArrayUtils.subarray(intArray0, (-3250), 0);	  }
@Test(timeout = 4000)	  public void testtoArray()  throws Throwable  {	      Integer[] integerArray0 = ArrayUtils.toArray((Integer[]) null);	  }
@Test(timeout = 4000)	  public void testtoArray()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      Float[] floatArray1 = ArrayUtils.toArray(floatArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      boolean[] booleanArray2 = ArrayUtils.removeElement(booleanArray1, true);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)6739);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)6739);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Object[] objectArray0 = new Object[1];	      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[0]);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Object[] objectArray0 = new Object[1];	      Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[0]);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = new long[1];	      longArray0[0] = 1467L;	      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1467L);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      long[] longArray0 = new long[1];	      longArray0[0] = 1467L;	      long[] longArray1 = ArrayUtils.removeElement(longArray0, 1467L);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-575));	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      int[] intArray0 = ArrayUtils.removeElement((int[]) null, (-575));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.3F);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.removeElement((float[]) null, 1.3F);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)105);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)105);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = new long[8];	      int[] intArray0 = new int[8];	      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      long[] longArray0 = new long[8];	      int[] intArray0 = new int[8];	      long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_INT_ARRAY);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[1];	      int[] intArray0 = new int[1];	      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      char[] charArray0 = new char[1];	      int[] intArray0 = new int[1];	      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[7];	      boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[2];	      short[] shortArray1 = ArrayUtils.remove(shortArray0, 0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[3];	      Boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 2);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[8];	      int[] intArray1 = ArrayUtils.remove(intArray0, 7);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[8];	      float[] floatArray1 = ArrayUtils.remove(floatArray0, 6);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[7];	      char[] charArray1 = ArrayUtils.remove(charArray0, 1);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      short[] shortArray0 = new short[2];	      shortArray0[1] = (short)45;	      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      short[] shortArray0 = new short[6];	      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      long[] longArray0 = new long[3];	      longArray0[1] = (-4363L);	      longArray0[2] = (-1L);	      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int[] intArray0 = new int[1];	      intArray0[0] = 2140;	      int int0 = ArrayUtils.lastIndexOf(intArray0, 2140, 1324);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int[] intArray0 = new int[2];	      intArray0[1] = (-667);	      int int0 = ArrayUtils.lastIndexOf(intArray0, 0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      float[] floatArray0 = new float[2];	      floatArray0[1] = 1.0F;	      int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      doubleArray0[0] = 1720.31034937;	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1720.31034937, 17, (double) 17);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[7];	      doubleArray0[6] = (-657.78872673);	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-657.78872673), 1993);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      char[] charArray0 = new char[7];	      charArray0[1] = 'O';	      int int0 = ArrayUtils.lastIndexOf(charArray0, 'O', 36);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      char[] charArray0 = new char[5];	      charArray0[0] = '3';	      int int0 = ArrayUtils.lastIndexOf(charArray0, '3');	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      char[] charArray0 = new char[9];	      charArray0[2] = 'C';	      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C');	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[2];	      byteArray0[1] = (byte) (-115);	      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-115), 2145326153);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[8];	      byteArray0[4] = (byte)64;	      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)64);	  }
@Test(timeout = 4000)	  public void testisSameType()  throws Throwable  {	      Short short0 = new Short((short)4689);	      boolean boolean0 = ArrayUtils.isSameType(short0, short0);	  }
@Test(timeout = 4000)	  public void testisEquals()  throws Throwable  {	      Short short0 = new Short((short) (-2022));	      boolean boolean0 = ArrayUtils.isEquals(short0, short0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      booleanArray0[0] = true;	      int int0 = ArrayUtils.indexOf(booleanArray0, false);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      short[] shortArray0 = new short[3];	      shortArray0[2] = (short)1085;	      int int0 = ArrayUtils.indexOf(shortArray0, (short)1085, (int) (short)0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      short[] shortArray0 = new short[8];	      shortArray0[1] = (short)374;	      int int0 = ArrayUtils.indexOf(shortArray0, (short)374);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      short[] shortArray0 = new short[5];	      int int0 = ArrayUtils.indexOf(shortArray0, (short) (-2217));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[3];	      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-230));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[9];	      objectArray0[0] = (Object) 0.0F;	      objectArray0[5] = (Object) 0.0F;	      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5]);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[4];	      Object object0 = new Object();	      objectArray0[2] = object0;	      int int0 = ArrayUtils.indexOf(objectArray0, object0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      long[] longArray0 = new long[8];	      longArray0[0] = (long) 'w';	      int int0 = ArrayUtils.indexOf(longArray0, 119L);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      long[] longArray0 = new long[4];	      longArray0[0] = (-1L);	      int int0 = ArrayUtils.indexOf(longArray0, 0L);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[6];	      intArray0[5] = 564;	      int int0 = ArrayUtils.indexOf(intArray0, 564, (-310));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[9];	      intArray0[0] = Integer.MAX_VALUE;	      int int0 = ArrayUtils.indexOf(intArray0, 0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[0];	      int int0 = ArrayUtils.indexOf(intArray0, 1);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[7];	      floatArray0[0] = (float) (-1);	      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[8];	      floatArray0[6] = (-828.707F);	      int int0 = ArrayUtils.indexOf(floatArray0, (-828.707F));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[8];	      int int0 = ArrayUtils.indexOf(floatArray0, (-2893.445F));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Short[] shortArray0 = new Short[6];	      Short short0 = new Short((short) (-1106));	      shortArray0[0] = short0;	      double[] doubleArray0 = new double[3];	      doubleArray0[2] = (double) (short)shortArray0[0];	      int int0 = ArrayUtils.indexOf(doubleArray0, (double) shortArray0[0], (-862));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      doubleArray0[0] = 1.5;	      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      doubleArray0[3] = 1.5;	      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      char[] charArray0 = new char[6];	      charArray0[0] = 'L';	      int int0 = ArrayUtils.indexOf(charArray0, 'L');	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      char[] charArray0 = new char[2];	      charArray0[1] = 't';	      int int0 = ArrayUtils.indexOf(charArray0, 't');	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[0];	      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      short[] shortArray0 = new short[9];	      short[] shortArray1 = ArrayUtils.clone(shortArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_LONG_ARRAY);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.clone(intArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      char[] charArray0 = new char[0];	      char[] charArray1 = ArrayUtils.clone(charArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.clone(byteArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      Object[] objectArray1 = ArrayUtils.addAll(objectArray0, objectArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      long[] longArray0 = new long[0];	      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      long[] longArray0 = new long[0];	      long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      int[] intArray0 = new int[6];	      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      int[] intArray0 = new int[6];	      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      float[] floatArray0 = new float[2];	      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      float[] floatArray0 = new float[2];	      float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      char[] charArray0 = new char[0];	      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      char[] charArray0 = new char[0];	      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      short[] shortArray0 = new short[3];	      short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      String[] stringArray0 = new String[7];	      String[] stringArray1 = ArrayUtils.add(stringArray0, 2, "b</I90UV'e");	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Float[] floatArray0 = new Float[8];	      // Undeclared exception!	      try { 	        ArrayUtils.toPrimitive(floatArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      int[] intArray0 = new int[9];	      intArray0[0] = (int) (byte) (-1);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(booleanArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      int[] intArray0 = new int[9];	      intArray0[0] = (int) (byte) (-1);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(booleanArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[2];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(shortArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      short[] shortArray0 = new short[2];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(shortArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[6];	      int[] intArray0 = new int[6];	      intArray0[0] = (int) (short) (-1);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(shortArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      short[] shortArray0 = new short[6];	      int[] intArray0 = new int[6];	      intArray0[0] = (int) (short) (-1);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(shortArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      MutableInt[] mutableIntArray0 = new MutableInt[3];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(mutableIntArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      MutableInt[] mutableIntArray0 = new MutableInt[3];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(mutableIntArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      int[] intArray0 = new int[5];	      intArray0[1] = (int) (short)2027;	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object[]) doubleArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 2027, Length: 1	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      int[] intArray0 = new int[5];	      intArray0[1] = (int) (short)2027;	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object[]) doubleArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 2027, Length: 1	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[5];	      intArray0[1] = (int) (byte) (-22);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(intArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -22, Length: 5	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      int[] intArray0 = new int[5];	      intArray0[1] = (int) (byte) (-22);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(intArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -22, Length: 5	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[1];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(floatArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      float[] floatArray0 = new float[1];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(floatArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[9];	      int[] intArray0 = new int[1];	      intArray0[0] = 1035;	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(floatArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 1035, Length: 9	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      float[] floatArray0 = new float[9];	      int[] intArray0 = new int[1];	      intArray0[0] = 1035;	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(floatArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 1035, Length: 9	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[5];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((double[]) null, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      int[] intArray0 = new int[5];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((double[]) null, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[2];	      int[] intArray0 = new int[3];	      intArray0[0] = (int) '@';	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(charArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 64, Length: 2	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      char[] charArray0 = new char[2];	      int[] intArray0 = new int[3];	      intArray0[0] = (int) '@';	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(charArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 64, Length: 2	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(byteArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(byteArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[5];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((byte[]) null, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      int[] intArray0 = new int[5];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((byte[]) null, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Float float0 = new Float(103.0);	      int[] intArray0 = new int[7];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) float0, intArray0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Argument is not an array	         //	         verifyException("java.lang.reflect.Array", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      Float float0 = new Float(103.0);	      int[] intArray0 = new int[7];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) float0, intArray0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Argument is not an array	         //	         verifyException("java.lang.reflect.Array", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) null, (BitSet) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) null, (BitSet) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      BitSet bitSet0 = new BitSet();	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) doubleArray0[0], bitSet0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Argument is not an array	         //	         verifyException("java.lang.reflect.Array", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      BitSet bitSet0 = new BitSet();	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) doubleArray0[0], bitSet0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Argument is not an array	         //	         verifyException("java.lang.reflect.Array", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      Short[] shortArray0 = new Short[6];	      Integer integer0 = new Integer(998);	      // Undeclared exception!	      try { 	        ArrayUtils.add((Object[]) shortArray0, (Object) integer0);	        fail("Expecting exception: ArrayStoreException");	      	      } catch(ArrayStoreException e) {	         //	         // java.lang.Integer	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      long[] longArray0 = new long[0];	      // Undeclared exception!	      try { 	        ArrayUtils.add(longArray0, 3, 742L);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 3, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      int[] intArray0 = new int[1];	      // Undeclared exception!	      try { 	        ArrayUtils.add(intArray0, (-438), (-2551));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -438, Length: 1	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      float[] floatArray0 = new float[5];	      // Undeclared exception!	      try { 	        ArrayUtils.add(floatArray0, (-3568), (-1.0F));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -3568, Length: 5	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      // Undeclared exception!	      try { 	        ArrayUtils.add(doubleArray0, (-1), 3138.0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[7];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) null, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      int[] intArray0 = new int[7];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) null, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[0];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) null, intArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      int[] intArray0 = new int[0];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) null, intArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      int[] intArray0 = new int[8];	      boolean boolean0 = ArrayUtils.isNotEmpty(intArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isNotEmpty((int[]) null);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[3];	      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[0];	      boolean boolean0 = ArrayUtils.isEmpty(booleanArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      float[] floatArray0 = new float[0];	      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isEmpty((float[]) null);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      float[] floatArray0 = new float[2];	      boolean boolean0 = ArrayUtils.isEmpty(floatArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      double[] doubleArray0 = new double[8];	      boolean boolean0 = ArrayUtils.isEmpty(doubleArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      boolean boolean0 = ArrayUtils.isEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      char[] charArray0 = new char[8];	      boolean boolean0 = ArrayUtils.isEmpty(charArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      short[] shortArray0 = new short[9];	      boolean boolean0 = ArrayUtils.isEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      int[] intArray0 = new int[0];	      boolean boolean0 = ArrayUtils.isEmpty(intArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      int[] intArray0 = new int[1];	      boolean boolean0 = ArrayUtils.isEmpty(intArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isEmpty((long[]) null);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      long[] longArray0 = new long[3];	      boolean boolean0 = ArrayUtils.isEmpty(longArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isEmpty((Object[]) null);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      Float[] floatArray0 = new Float[8];	      boolean boolean0 = ArrayUtils.isEmpty((Object[]) floatArray0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[3];	      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 116);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[9];	      booleanArray0[0] = true;	      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2637));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[2];	      int int0 = ArrayUtils.indexOf(booleanArray0, true, 17);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[0];	      int int0 = ArrayUtils.indexOf(booleanArray0, false, (-2016));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      float[] floatArray0 = new float[1];	      int int0 = ArrayUtils.lastIndexOf(floatArray0, (-1.0F), 1835);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      float[] floatArray0 = new float[0];	      int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 628, (-1));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[7];	      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[8];	      int int0 = ArrayUtils.indexOf(floatArray0, 119.71462F, 514);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((float[]) null, (-2004.5336F), (-1246));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      doubleArray0[0] = (double) (short)4689;	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1404.456956827277, (int) (short)4689, 1.5);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      doubleArray0[0] = (-2690.0);	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2690.0), 2536);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[3];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217), (int) (byte)10);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      int int0 = ArrayUtils.indexOf(doubleArray0, 0.0, 0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[3];	      int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), 7);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      byteArray0[2] = (byte)124;	      int int0 = ArrayUtils.indexOf(byteArray0, (byte)124, (int) (byte) (-7));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[7];	      int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-127), (int) (byte)67);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      char[] charArray0 = new char[2];	      int int0 = ArrayUtils.indexOf(charArray0, 'd', 513);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((char[]) null, '7', 134);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)64, 3132);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int[] intArray0 = new int[7];	      intArray0[3] = (-426);	      int int0 = ArrayUtils.lastIndexOf(intArray0, (-426), 102);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int[] intArray0 = new int[7];	      int int0 = ArrayUtils.lastIndexOf(intArray0, (-426), 102);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[6];	      int int0 = ArrayUtils.indexOf(intArray0, 564, (-310));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[4];	      int int0 = ArrayUtils.indexOf(intArray0, (-2709), 3183);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      long[] longArray0 = new long[0];	      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (byte) (-1), 1);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      long[] longArray0 = new long[9];	      int int0 = ArrayUtils.indexOf(longArray0, (-2892L), 0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      long[] longArray0 = new long[9];	      int int0 = ArrayUtils.indexOf(longArray0, (-1L), 1342);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      Boolean boolean0 = new Boolean("Array and element cannot both be null");	      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) boolean0, 2);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[6];	      objectArray0[5] = (Object) 42L;	      int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[5], (-1));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      Byte byte0 = new Byte((byte)81);	      int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, (int) (byte)81);	  }
@Test(timeout = 4000)	  public void testgetLength()  throws Throwable  {	      int int0 = ArrayUtils.getLength((Object) null);	  }
@Test(timeout = 4000)	  public void testgetLength()  throws Throwable  {	      Character character0 = Character.valueOf('m');	      // Undeclared exception!	      try { 	        ArrayUtils.getLength(character0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Argument is not an array	         //	         verifyException("java.lang.reflect.Array", e);	      }	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      float[] floatArray0 = new float[1];	      float[] floatArray1 = ArrayUtils.clone(floatArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      double[] doubleArray1 = ArrayUtils.clone(doubleArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      char[] charArray0 = new char[7];	      char[] charArray1 = ArrayUtils.clone(charArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.clone(shortArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      int[] intArray0 = new int[7];	      int[] intArray1 = ArrayUtils.clone(intArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      int[] intArray0 = ArrayUtils.clone((int[]) null);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      long[] longArray0 = new long[5];	      long[] longArray1 = ArrayUtils.clone(longArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[2];	      Object[] objectArray0 = ArrayUtils.clone((Object[]) booleanArray0);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      Character[] characterArray0 = ArrayUtils.clone((Character[]) null);	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      MutableInt mutableInt0 = new MutableInt((-1));	      String string0 = ArrayUtils.toString((Object) mutableInt0, "The Array must not be null");	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[6];	      int int0 = ArrayUtils.indexOf(floatArray0, 0.0F);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      char[] charArray0 = new char[6];	      int int0 = ArrayUtils.indexOf(charArray0, 'L');	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(byteArray0, (-1875));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1875, Length: 1	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[6];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(charArray0, (-3121));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -3121, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[5];	      int int0 = ArrayUtils.indexOf(booleanArray0, false);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      // Undeclared exception!	      try { 	        ArrayUtils.remove(arrayUtils0.EMPTY_LONG_ARRAY, (-1));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.remove((int[]) null, Integer.MAX_VALUE);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 2147483647, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(doubleArray0, 1754);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 1754, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      long[] longArray0 = new long[1];	      int int0 = ArrayUtils.indexOf(longArray0, 1480L);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[1];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(shortArray0, (-1));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 1	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[5];	      int int0 = ArrayUtils.indexOf(intArray0, (int) (byte)0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      int int0 = ArrayUtils.indexOf(doubleArray0, 1.5);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      short[] shortArray0 = new short[9];	      int int0 = ArrayUtils.indexOf(shortArray0, (short)0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Float[] floatArray0 = new Float[9];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(floatArray0, (int) 467);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 467, Length: 9	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = new double[2];	      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = new double[2];	      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = new double[2];	      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = new long[8];	      int[] intArray0 = new int[8];	      intArray0[1] = (-1);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(longArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 8	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      long[] longArray0 = new long[8];	      int[] intArray0 = new int[8];	      intArray0[1] = (-1);	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(longArray0, intArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1, Length: 8	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[5];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[5];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[5];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	      int[] intArray0 = new int[0];	      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	      int[] intArray0 = new int[0];	      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	      int[] intArray0 = new int[0];	      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0);	      int[] intArray0 = new int[0];	      boolean[] booleanArray2 = ArrayUtils.removeAll(booleanArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      doubleArray0[0] = (double) 103L;	      doubleArray0[1] = (double) 'y';	      doubleArray0[2] = (double) (short)3072;	      doubleArray0[3] = (double) (short) (-4363);	      doubleArray0[4] = (double) 'r';	      double[] doubleArray1 = new double[2];	      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      doubleArray0[0] = (double) 103L;	      doubleArray0[1] = (double) 'y';	      doubleArray0[2] = (double) (short)3072;	      doubleArray0[3] = (double) (short) (-4363);	      doubleArray0[4] = (double) 'r';	      double[] doubleArray1 = new double[2];	      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      doubleArray0[0] = (double) 103L;	      doubleArray0[1] = (double) 'y';	      doubleArray0[2] = (double) (short)3072;	      doubleArray0[3] = (double) (short) (-4363);	      doubleArray0[4] = (double) 'r';	      double[] doubleArray1 = new double[2];	      double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[1];	      float[] floatArray1 = new float[3];	      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = new float[1];	      float[] floatArray1 = new float[3];	      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      float[] floatArray0 = new float[1];	      float[] floatArray1 = new float[3];	      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;	      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;	      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY;	      float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[8];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(booleanArray0, (-1229));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1229, Length: 8	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 67L);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      long[] longArray0 = ArrayUtils.removeElement((long[]) null, 67L);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[2];	      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = new float[2];	      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)15);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)15);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      char[] charArray0 = new char[0];	      char[] charArray1 = ArrayUtils.add(charArray0, 0, 'A');	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.add((boolean[]) null, 1891, true);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 1891, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      int[] intArray0 = ArrayUtils.add((int[]) null, 0, 0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      Integer[] integerArray0 = new Integer[18];	      // Undeclared exception!	      try { 	        ArrayUtils.add((Object[]) integerArray0, (-2079), (Object) integerArray0[1]);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -2079, Length: 18	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      Object[] objectArray0 = new Object[5];	      Short short0 = new Short((short) (-1362));	      Object[] objectArray1 = ArrayUtils.add(objectArray0, (Object) short0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Double[] doubleArray0 = new Double[6];	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);	      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      Double[] doubleArray0 = new Double[6];	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);	      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      Double[] doubleArray0 = new Double[6];	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);	      double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      float[] floatArray0 = new float[0];	      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      float[] floatArray0 = new float[0];	      float[] floatArray1 = ArrayUtils.addAll((float[]) null, floatArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      long[] longArray0 = new long[6];	      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      long[] longArray0 = new long[6];	      long[] longArray1 = ArrayUtils.addAll(longArray0, (long[]) null);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      short[] shortArray0 = new short[9];	      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      short[] shortArray0 = new short[9];	      short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      byte[] byteArray0 = new byte[2];	      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      byte[] byteArray0 = new byte[2];	      byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      char[] charArray0 = new char[9];	      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      char[] charArray0 = new char[9];	      char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.addAll((boolean[]) null, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[3];	      boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      float[] floatArray0 = new float[0];	      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      float[] floatArray0 = new float[4];	      boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      char[] charArray0 = new char[0];	      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      char[] charArray0 = new char[5];	      boolean boolean0 = ArrayUtils.isNotEmpty(charArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      short[] shortArray0 = new short[2];	      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      short[] shortArray0 = new short[0];	      boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      long[] longArray0 = new long[7];	      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      long[] longArray0 = new long[0];	      boolean boolean0 = ArrayUtils.isNotEmpty(longArray0);	  }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      Byte[] byteArray0 = new Byte[1];	      boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      char[] charArray0 = new char[0];	      boolean boolean0 = ArrayUtils.isEmpty(charArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[9];	      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      char[] charArray0 = new char[9];	      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      char[] charArray0 = new char[9];	      char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[3];	      char[] charArray1 = ArrayUtils.removeElements((char[]) null, charArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      char[] charArray0 = new char[3];	      char[] charArray1 = ArrayUtils.removeElements((char[]) null, charArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      char[] charArray0 = new char[3];	      char[] charArray1 = ArrayUtils.removeElements((char[]) null, charArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.removeElements((short[]) null, (short[]) null);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = new int[2];	      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = new int[2];	      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = new int[2];	      int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[18];	      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      int[] intArray0 = new int[18];	      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      int[] intArray0 = new int[18];	      int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isEmpty((int[]) null);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = new long[2];	      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      long[] longArray0 = new long[2];	      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      long[] longArray0 = new long[2];	      long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Byte[] byteArray0 = new Byte[8];	      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Byte[] byteArray0 = new Byte[8];	      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      Byte[] byteArray0 = new Byte[8];	      Byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[2];	      booleanArray0[1] = true;	      Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      Boolean[] booleanArray2 = ArrayUtils.toObject(booleanArray1);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[2];	      Boolean boolean0 = new Boolean("3~z(b{OLC|Bc#k~");	      boolean boolean1 = true;	      booleanArray0[0] = boolean0;	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, boolean1);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null, true);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[2];	      Boolean boolean0 = Boolean.FALSE;	      booleanArray0[0] = boolean0;	      booleanArray0[1] = boolean0;	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[1];	      // Undeclared exception!	      try { 	        ArrayUtils.toPrimitive(booleanArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      float[] floatArray0 = new float[0];	      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.toObject((float[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Float[] floatArray0 = new Float[8];	      Float float0 = new Float((-1444.746F));	      floatArray0[0] = float0;	      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1484.0985F));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-233.7698F));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (-1419.0571F));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      float[] floatArray0 = new float[4];	      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);	      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      float[] floatArray0 = new float[4];	      Float[] floatArray1 = ArrayUtils.toObject(floatArray0);	      float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      double[] doubleArray0 = new double[7];	      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);	      Double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testaddAll()  throws Throwable  {	      double[] doubleArray0 = new double[7];	      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);	      Double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      double[] doubleArray0 = new double[7];	      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);	      Double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Double[] doubleArray0 = new Double[6];	      Double double0 = new Double(0.0);	      doubleArray0[0] = double0;	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      Double double0 = new Double(3291.15);	      doubleArray0[0] = double0;	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Double[] doubleArray0 = new Double[0];	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Double[] doubleArray0 = new Double[9];	      // Undeclared exception!	      try { 	        ArrayUtils.toPrimitive(doubleArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      byte[] byteArray0 = new byte[4];	      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      Byte[] byteArray1 = ArrayUtils.toObject(byteArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Byte[] byteArray0 = new Byte[1];	      byte byte0 = (byte)49;	      Byte byte1 = new Byte((byte)49);	      byteArray0[0] = byte1;	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-27));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, (byte) (-27));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Byte[] byteArray0 = new Byte[1];	      Byte byte0 = new Byte((byte)0);	      byteArray0[0] = byte0;	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      Short[] shortArray0 = ArrayUtils.toObject(arrayUtils0.EMPTY_SHORT_ARRAY);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Short[] shortArray0 = ArrayUtils.toObject((short[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Short[] shortArray0 = new Short[2];	      Short short0 = new Short((short) (-2833));	      shortArray0[0] = short0;	      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0, (short) (-2833));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Short[] shortArray0 = new Short[2];	      Short short0 = new Short((short)20);	      shortArray0[0] = short0;	      shortArray0[1] = shortArray0[0];	      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Short[] shortArray0 = new Short[0];	      short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Short[] shortArray0 = new Short[1];	      // Undeclared exception!	      try { 	        ArrayUtils.toPrimitive(shortArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      int[] intArray0 = new int[8];	      Integer[] integerArray0 = ArrayUtils.toObject(intArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, (-1));	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Integer[] integerArray0 = new Integer[18];	      integerArray0[0] = (Integer) (-388);	      int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, (int) integerArray0[0]);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      int[] intArray0 = new int[4];	      Integer[] integerArray0 = new Integer[7];	      integerArray0[0] = (Integer) intArray0[0];	      integerArray0[1] = (Integer) 4;	      integerArray0[2] = (Integer) 2;	      integerArray0[3] = (Integer) 2;	      integerArray0[4] = (Integer) (-1502);	      integerArray0[5] = (Integer) 4;	      integerArray0[6] = (Integer) (-1502);	      int[] intArray1 = ArrayUtils.toPrimitive(integerArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Integer[] integerArray0 = new Integer[7];	      // Undeclared exception!	      try { 	        ArrayUtils.toPrimitive(integerArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      long[] longArray0 = new long[2];	      Long[] longArray1 = ArrayUtils.toObject(longArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Long[] longArray0 = ArrayUtils.toObject((long[]) null);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      long[] longArray0 = new long[0];	      Long[] longArray1 = ArrayUtils.toObject(longArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      char[] charArray0 = new char[6];	      Long[] longArray0 = new Long[1];	      Long long0 = new Long(0L);	      longArray0[0] = long0;	      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) charArray0[2]);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      char[] charArray0 = new char[6];	      Long[] longArray0 = new Long[1];	      long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) charArray0[4]);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Long[] longArray0 = new Long[5];	      Long long0 = new Long(2953L);	      longArray0[0] = long0;	      longArray0[1] = longArray0[0];	      longArray0[2] = long0;	      longArray0[3] = long0;	      longArray0[4] = longArray0[1];	      long[] longArray1 = ArrayUtils.toPrimitive(longArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      char[] charArray0 = new char[2];	      Character[] characterArray0 = ArrayUtils.toObject(charArray0);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      Character[] characterArray0 = ArrayUtils.toObject((char[]) null);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      char[] charArray0 = new char[0];	      Character[] characterArray0 = ArrayUtils.toObject(charArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Character[] characterArray0 = new Character[4];	      char char0 = '\\';	      Character character0 = new Character('\\');	      characterArray0[0] = character0;	      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      char[] charArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_CHARACTER_OBJECT_ARRAY, 'G');	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Character[] characterArray0 = new Character[2];	      Character character0 = Character.valueOf('4');	      characterArray0[0] = character0;	      characterArray0[1] = characterArray0[0];	      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Character[] characterArray0 = new Character[0];	      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      booleanArray0[0] = true;	      boolean boolean0 = ArrayUtils.contains(booleanArray0, true);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[5];	      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (short)2);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[7];	      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, (-1));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[0];	      int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, 4);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[9];	      int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2637));	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      boolean boolean0 = ArrayUtils.contains((boolean[]) null, false);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      float[] floatArray0 = new float[3];	      floatArray0[0] = 1.8F;	      boolean boolean0 = ArrayUtils.contains(floatArray0, 1.8F);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      boolean boolean0 = ArrayUtils.contains((float[]) null, 3099.1526F);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      float[] floatArray0 = new float[8];	      floatArray0[0] = 2807.559F;	      int int0 = ArrayUtils.lastIndexOf(floatArray0, 2807.559F, 2);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((float[]) null, (-4405.2466F));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      float[] floatArray0 = new float[4];	      float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      doubleArray0[0] = (double) (byte)6;	      boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      double[] doubleArray0 = new double[7];	      doubleArray0[0] = (double) (-3286);	      doubleArray0[1] = (double) (-257);	      doubleArray0[2] = (double) (-3286);	      doubleArray0[3] = (double) (-3286);	      doubleArray0[4] = (double) (-3286);	      doubleArray0[5] = (double) (-3286);	      doubleArray0[6] = (double) (-3286);	      boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[8];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 1356, 0.0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 1340.93130869, 0, 85.96953);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[8];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, (-2437), 0.0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 0, (int) (short)0, 3341.661861);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[3];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217), (int) (byte)0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1502), (-127));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1502), (-127));	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      doubleArray0[0] = 7301.0;	      boolean boolean0 = ArrayUtils.contains(doubleArray0, 688.97053, (double) (byte)7);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      int int0 = ArrayUtils.indexOf(doubleArray0, 5489.276752532, (-2526), 654.0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Double[] doubleArray0 = new Double[6];	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);	      	      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0L, 827, 0.0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Double[] doubleArray0 = new Double[6];	      double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0);	      	      int int0 = ArrayUtils.indexOf(doubleArray1, (double) 0L, 827, 0.0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((double[]) null, (double) (byte)0, 0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      byteArray0[0] = (byte) (-1);	      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-70), (int) (byte) (-70));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)96, 7);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((byte[]) null, (byte) (-1));	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      char[] charArray0 = new char[3];	      charArray0[2] = '!';	      boolean boolean0 = ArrayUtils.contains(charArray0, '!');	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      Character[] characterArray0 = new Character[4];	      char char0 = '\\';	      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);	      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Character[] characterArray0 = new Character[4];	      char char0 = '\\';	      char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0);	      int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      char[] charArray0 = new char[7];	      int int0 = ArrayUtils.lastIndexOf(charArray0, '>', (-65));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      char[] charArray0 = new char[2];	      int int0 = ArrayUtils.indexOf(charArray0, 'J', (int) (short) (-1));	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      short[] shortArray0 = new short[4];	      shortArray0[1] = (short)1732;	      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)1732);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      short[] shortArray0 = new short[2];	      boolean boolean0 = ArrayUtils.contains(shortArray0, (short)6);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      short[] shortArray0 = new short[5];	      shortArray0[3] = (short)3058;	      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)3058, (int) (short)3058);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      short[] shortArray0 = new short[6];	      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-2015), (int) (short)2);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      short[] shortArray0 = new short[8];	      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1464), (-1063));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((short[]) null, (short) (-1709));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)154);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)154);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      short[] shortArray0 = new short[6];	      int int0 = ArrayUtils.indexOf(shortArray0, (short)0, (-1276869767));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((short[]) null, (short)2027, 2108);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      int[] intArray0 = new int[8];	      intArray0[1] = (-1);	      boolean boolean0 = ArrayUtils.contains(intArray0, (-1));	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      int[] intArray0 = new int[0];	      boolean boolean0 = ArrayUtils.contains(intArray0, 3082);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int[] intArray0 = new int[2];	      intArray0[1] = 10;	      int int0 = ArrayUtils.lastIndexOf(intArray0, 10);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int[] intArray0 = new int[1];	      int int0 = ArrayUtils.lastIndexOf(intArray0, (-388), (-44));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((int[]) null, 0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[1];	      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-3));	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      int[] intArray0 = new int[1];	      int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-3));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int[] intArray0 = new int[5];	      int int0 = ArrayUtils.indexOf(intArray0, 0, (-1));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((int[]) null, (-3070), (-3070));	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      long[] longArray0 = new long[5];	      longArray0[2] = 1106L;	      boolean boolean0 = ArrayUtils.contains(longArray0, 1106L);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      long[] longArray0 = new long[3];	      int int0 = ArrayUtils.lastIndexOf(longArray0, 0L);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      long[] longArray0 = new long[7];	      int int0 = ArrayUtils.lastIndexOf(longArray0, (-471L), 2);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      long[] longArray0 = new long[9];	      int int0 = ArrayUtils.lastIndexOf(longArray0, (-1408L), (-1));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      long[] longArray0 = new long[6];	      int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 'r');	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((long[]) null, (-1L), 2);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      Object[] objectArray0 = new Object[1];	      Character character0 = new Character('R');	      boolean boolean0 = ArrayUtils.contains(objectArray0, (Object) character0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[1];	      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      Long long0 = new Long(1177L);	      int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) long0, (-45));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      Object object0 = new Object();	      int int0 = ArrayUtils.lastIndexOf((Object[]) null, object0, 1359);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[8];	      Boolean boolean0 = Boolean.TRUE;	      booleanArray0[3] = boolean0;	      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[8];	      Boolean boolean0 = Boolean.TRUE;	      booleanArray0[3] = boolean0;	      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;	      Double double0 = new Double((-355.081269));	      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) double0, (-2849));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[8];	      Boolean boolean0 = Boolean.TRUE;	      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[8];	      Boolean boolean0 = Boolean.TRUE;	      Boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, (Object) boolean0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;	      Double[] doubleArray0 = new Double[9];	      int int0 = ArrayUtils.indexOf((Object[]) floatArray0, (Object) doubleArray0[1], (-2849));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[8];	      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) floatArray0[4]);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((boolean[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      ArrayUtils.reverse(booleanArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((float[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      float[] floatArray0 = new float[8];	      ArrayUtils.reverse(floatArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      ArrayUtils.reverse(doubleArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((byte[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      ArrayUtils.reverse(byteArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((char[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      char[] charArray0 = new char[5];	      ArrayUtils.reverse(charArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((short[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      short[] shortArray0 = new short[8];	      ArrayUtils.reverse(shortArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((int[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      int[] intArray0 = new int[4];	      ArrayUtils.reverse(intArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      long[] longArray0 = new long[3];	      ArrayUtils.reverse(longArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((long[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      long[] longArray0 = new long[0];	      ArrayUtils.reverse(longArray0);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      ArrayUtils.reverse((Object[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      short[] shortArray0 = new short[3];	      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);	      	      ArrayUtils.reverse((Object[]) shortArray1);	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      short[] shortArray0 = new short[3];	      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);	      	      ArrayUtils.reverse((Object[]) shortArray1);	  }
@Test(timeout = 4000)	  public void testisSameType()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.isSameType("|H", (Object) null);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The Array must not be null	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testisSameType()  throws Throwable  {	      Float[] floatArray0 = new Float[8];	      Float float0 = new Float((-1444.746F));	      floatArray0[0] = float0;	      Byte byte0 = new Byte((byte)7);	      boolean boolean0 = ArrayUtils.isSameType(floatArray0[0], byte0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[4];	      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);	      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[4];	      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, false);	      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      	      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0);	      	      boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[8];	      boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      float[] floatArray0 = new float[2];	      boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      double[] doubleArray0 = new double[3];	      boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      char[] charArray0 = new char[5];	      char[] charArray1 = new char[1];	      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray1);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      char[] charArray0 = new char[1];	      boolean boolean0 = ArrayUtils.isSameLength(charArray0, (char[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      char[] charArray0 = new char[5];	      boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      short[] shortArray0 = new short[0];	      boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      int[] intArray0 = new int[2];	      boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      long[] longArray0 = new long[3];	      long[] longArray1 = new long[5];	      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((long[]) null, (long[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      long[] longArray0 = new long[3];	      boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null);	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      Byte[] byteArray0 = new Byte[0];	      boolean boolean0 = ArrayUtils.isSameLength((Object[]) byteArray0, (Object[]) byteArray0);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[7];	      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, (-8), 220);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-207), 2701);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, (-1));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      float[] floatArray0 = new float[6];	      float[] floatArray1 = ArrayUtils.subarray(floatArray0, (int) (short)0, (-1487));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      double[] doubleArray0 = new double[9];	      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 3);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 81, 81);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);	      	      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (short) (-1974), (int) (short)0, 654.0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, 0, 0);	      	      int int0 = ArrayUtils.indexOf(doubleArray1, (double) (short) (-1974), (int) (short)0, 654.0);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-938), (-938));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, 0, 64);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      byte[] byteArray0 = new byte[2];	      byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (-2026), (int) (short) (-683));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      char[] charArray0 = new char[2];	      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte)0, 2);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      char[] charArray0 = new char[0];	      char[] charArray1 = ArrayUtils.subarray(charArray0, (int) (byte) (-11), (int) (byte) (-84));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      char[] charArray0 = new char[1];	      char[] charArray1 = ArrayUtils.subarray(charArray0, 1547, 1547);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      short[] shortArray0 = new short[3];	      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 377);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      short[] shortArray0 = new short[5];	      short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short) (-1652), (-3814));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.subarray((short[]) null, 7, (-1));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      int[] intArray0 = new int[4];	      int[] intArray1 = ArrayUtils.subarray(intArray0, (-127), 7);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      int[] intArray0 = new int[4];	      int[] intArray1 = ArrayUtils.subarray(intArray0, 0, 4);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      long[] longArray0 = new long[8];	      long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (-1022));	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[5];	      Object[] objectArray0 = ArrayUtils.subarray((Object[]) booleanArray0, (-2992), 4);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      Float[] floatArray0 = new Float[8];	      Object[] objectArray0 = ArrayUtils.subarray((Object[]) floatArray0, 9, 3140);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[4];	      Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Float[] floatArray0 = new Float[5];	      Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Byte[] byteArray0 = new Byte[0];	      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Byte[] byteArray0 = new Byte[2];	      Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Byte[] byteArray0 = ArrayUtils.nullToEmpty((Byte[]) null);	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Character[] characterArray0 = new Character[0];	      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Character[] characterArray0 = new Character[1];	      Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Short[] shortArray0 = new Short[8];	      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Short[] shortArray0 = new Short[0];	      Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Integer[] integerArray0 = new Integer[0];	      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Integer[] integerArray0 = new Integer[4];	      Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Long[] longArray0 = new Long[4];	      Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[5];	      boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);	      	      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0);	      	      float[] floatArray2 = ArrayUtils.nullToEmpty(floatArray1);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      float[] floatArray0 = new float[3];	      float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      double[] doubleArray0 = new double[0];	      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      byte[] byteArray0 = new byte[6];	      byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      char[] charArray0 = new char[7];	      char[] charArray1 = ArrayUtils.nullToEmpty(charArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);	      int[] intArray2 = ArrayUtils.subarray(intArray1, 9, 0);	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      int[] intArray0 = new int[0];	      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);	      int[] intArray2 = ArrayUtils.subarray(intArray1, 9, 0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      int[] intArray0 = new int[9];	      int[] intArray1 = ArrayUtils.nullToEmpty(intArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      int[] intArray0 = ArrayUtils.nullToEmpty((int[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      long[] longArray0 = new long[4];	      long[] longArray1 = ArrayUtils.nullToEmpty(longArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      String[] stringArray0 = new String[9];	      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      String[] stringArray0 = new String[0];	      String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      String[] stringArray0 = ArrayUtils.nullToEmpty((String[]) null);	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Object[] objectArray0 = new Object[1];	      Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.removeElements((boolean[]) null, (boolean[]) null);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.clone(booleanArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      double[] doubleArray0 = ArrayUtils.clone((double[]) null);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.clone((byte[]) null);	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      Byte[] byteArray0 = new Byte[1];	      byte byte0 = (byte)49;	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);	      byte[] byteArray2 = ArrayUtils.clone(byteArray1);	  }
@Test(timeout = 4000)	  public void testtoPrimitive()  throws Throwable  {	      Byte[] byteArray0 = new Byte[1];	      byte byte0 = (byte)49;	      byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0, byte0);	      byte[] byteArray2 = ArrayUtils.clone(byteArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '`');	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      char[] charArray0 = ArrayUtils.removeElement((char[]) null, '`');	  }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      short[] shortArray0 = ArrayUtils.clone((short[]) null);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      short[] shortArray0 = new short[0];	      short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((int[]) null, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((int[]) null, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.removeElements(arrayUtils0.EMPTY_LONG_ARRAY, arrayUtils0.EMPTY_LONG_ARRAY);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.removeElements((Float[]) null, (Float[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.removeElements((Float[]) null, (Float[]) null);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.removeElements((Float[]) null, (Float[]) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	      ArrayUtils.reverse((Object[]) floatArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	      ArrayUtils.reverse((Object[]) floatArray1);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	      ArrayUtils.reverse((Object[]) floatArray1);	  }
@Test(timeout = 4000)	  public void testremoveElements()  throws Throwable  {	      Float[] floatArray0 = new Float[0];	      Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0);	      ArrayUtils.reverse((Object[]) floatArray1);	  }
@Test(timeout = 4000)	  public void testtoMap()  throws Throwable  {	      short[] shortArray0 = new short[4];	      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);	      // Undeclared exception!	      try { 	        ArrayUtils.toMap(shortArray1);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Array element 0, '0', is neither of type Map.Entry nor an Array	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      short[] shortArray0 = new short[4];	      Short[] shortArray1 = ArrayUtils.toObject(shortArray0);	      // Undeclared exception!	      try { 	        ArrayUtils.toMap(shortArray1);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Array element 0, '0', is neither of type Map.Entry nor an Array	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoMap()  throws Throwable  {	      Object[] objectArray0 = new Object[0];	      Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0);	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      String string0 = ArrayUtils.toString((Object) null, ", '");	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byteArray0[6] = (byte)64;	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byteArray0[6] = (byte)64;	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)64);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      int[] intArray0 = new int[2];	      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      double[] doubleArray0 = new double[5];	      int[] intArray0 = new int[2];	      double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      char[] charArray0 = new char[8];	      // Undeclared exception!	      try { 	        ArrayUtils.add(charArray0, (-617), 'U');	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -617, Length: 8	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[10];	      intArray0[3] = (-3286);	      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3286));	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      int[] intArray0 = new int[10];	      intArray0[3] = (-3286);	      int[] intArray1 = ArrayUtils.removeElement(intArray0, (-3286));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      long[] longArray0 = new long[6];	      longArray0[3] = (-1438L);	      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1438L));	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      long[] longArray0 = new long[6];	      longArray0[3] = (-1438L);	      long[] longArray1 = ArrayUtils.removeElement(longArray0, (-1438L));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testtoArray()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[3];	      Boolean[] booleanArray1 = ArrayUtils.toArray(booleanArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[7];	      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[7];	      boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      long[] longArray0 = ArrayUtils.add(arrayUtils0.EMPTY_LONG_ARRAY, (-597L));	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      float[] floatArray0 = new float[7];	      float[] floatArray1 = ArrayUtils.add(floatArray0, 0, 1.2F);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      byte[] byteArray0 = ArrayUtils.add((byte[]) null, (byte)124);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[9];	      int[] intArray0 = new int[1];	      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      float[] floatArray0 = new float[9];	      int[] intArray0 = new int[1];	      float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      double[] doubleArray0 = new double[3];	      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) (short)532);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[1];	      charArray0[0] = 'd';	      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      char[] charArray0 = new char[1];	      charArray0[0] = 'd';	      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      long[] longArray0 = new long[0];	      boolean boolean0 = ArrayUtils.contains(longArray0, (long) 0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      int[] intArray0 = new int[5];	      Object[] objectArray0 = ArrayUtils.removeAll((Object[]) doubleArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      int[] intArray0 = new int[5];	      Object[] objectArray0 = ArrayUtils.removeAll((Object[]) doubleArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      byte[] byteArray0 = new byte[3];	      boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-17));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      float[] floatArray0 = new float[0];	      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.3F);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      float[] floatArray0 = new float[0];	      float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 1.3F);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      char[] charArray0 = new char[9];	      int int0 = ArrayUtils.lastIndexOf(charArray0, 'C');	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((double[]) null, 644.32225, (-3286.0));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[8];	      int[] intArray0 = new int[0];	      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      short[] shortArray0 = new short[8];	      int[] intArray0 = new int[0];	      short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      short[] shortArray0 = new short[6];	      // Undeclared exception!	      try { 	        ArrayUtils.add(shortArray0, (int) (short)8, (short)0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 8, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      ArrayUtils arrayUtils0 = new ArrayUtils();	      // Undeclared exception!	      try { 	        ArrayUtils.remove(arrayUtils0.EMPTY_FLOAT_ARRAY, 0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 0, Length: 0	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      double[] doubleArray0 = new double[4];	      double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0.0);	  }
@Test(timeout = 4000)	  public void testisEquals()  throws Throwable  {	      Boolean boolean0 = new Boolean(true);	      boolean boolean1 = ArrayUtils.isEquals("", boolean0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      short[] shortArray0 = new short[7];	      short[] shortArray1 = ArrayUtils.add(shortArray0, (short)103);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      int[] intArray0 = new int[0];	      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      int[] intArray0 = new int[0];	      boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testhashCode()  throws Throwable  {	      Integer integer0 = new Integer((-2415));	      ArrayUtils.hashCode((Object) integer0);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[8];	      int int0 = ArrayUtils.lastIndexOf(booleanArray0, false);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[1];	      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      char[] charArray0 = new char[1];	      char[] charArray1 = ArrayUtils.removeElement(charArray0, 'd');	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      byte[] byteArray0 = new byte[8];	      int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)41);	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      Long long0 = new Long(1786L);	      String string0 = ArrayUtils.toString((Object) long0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      int[] intArray0 = new int[2];	      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      int[] intArray0 = new int[2];	      byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = ArrayUtils.lastIndexOf((long[]) null, (-4278L));	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1856.653), (-883.2121627171));	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      int[] intArray0 = new int[1];	      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      int[] intArray0 = new int[1];	      int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      Double[] doubleArray0 = new Double[9];	      boolean boolean0 = ArrayUtils.contains((Object[]) doubleArray0, (Object) doubleArray0[1]);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      char[] charArray0 = new char[2];	      int[] intArray0 = new int[3];	      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      char[] charArray0 = new char[2];	      int[] intArray0 = new int[3];	      char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      short[] shortArray0 = new short[5];	      shortArray0[2] = (short)2;	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = new short[5];	      shortArray0[2] = (short)2;	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)2);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      int[] intArray0 = new int[2];	      int[] intArray1 = ArrayUtils.add(intArray0, 55);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1056.13976);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      double[] doubleArray0 = new double[6];	      double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, 1056.13976);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      long[] longArray0 = new long[9];	      long[] longArray1 = ArrayUtils.add(longArray0, (int) (short)0, (-1566L));	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      char[] charArray0 = new char[1];	      char[] charArray1 = ArrayUtils.add(charArray0, 'P');	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      float[] floatArray0 = ArrayUtils.add((float[]) null, (-3000.0F));	  }	}
