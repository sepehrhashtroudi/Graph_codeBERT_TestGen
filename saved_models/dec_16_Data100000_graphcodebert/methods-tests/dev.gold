@Test    public void getTasks() {        snakerEngineFacets.initFlows();        List<Process> allProcess = snakerEngineFacets.getAllProcess();        if (!CollectionUtils.isEmpty(allProcess)) {            Process process = allProcess.get(0);            Order dm = snakerEngineFacets.startAndExecute(process.getId(), "apply.operator", null);            List<Task> tasks = snakerEngineFacets.getTasks(dm.getId());            Assert.assertNotNull(tasks);        }    }
@Test    public void testPathToString() {        List<String> list = new ArrayList<String>();        list.add("a");        list.add("b");        String result = "a" + File.pathSeparator + "b";        assertEquals(result, writer.pathToString(list));    }
@Test    public void testDelete() throws VetoException {        final AttributeCol52 column = new AttributeCol52();        column.setAttribute(Attribute.SALIENCE.getAttributeName());        modelSynchronizer.appendColumn(column);        assertEquals(1,                     model.getAttributeCols().size());        assertEquals(4,                     uiModel.getColumns().size());        modelSynchronizer.deleteColumn(column);        assertEquals(0,                     model.getAttributeCols().size());        assertEquals(3,                     uiModel.getColumns().size());    }
@Test  public void testSerializeFloatRoundDown() throws IOException {    JsonGenerator generator = mock(JsonGenerator.class);    RoundingFloatSerializer serializer = new RoundingFloatSerializer();    serializer.serialize(0.444f, generator, null);    verify(generator, times(1)).writeNumber(eq(0.44f));  }
@Test  public void testResolveNull() {    assertNull(resolver.apply(null));  }
@Test    public void testEmpty() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        Assert.assertEquals(store.size(), 0);    }
@Test public void testImmediate() {		// Arrange:    	final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		// Act + Assert:		assertThat(request.immediate(true).immediate(), is(true));		assertThat(request.hasFlag(FragmentRequest.IMMEDIATE), is(true));		assertThat(request.immediate(false).immediate(), is(false));		assertThat(request.hasFlag(FragmentRequest.IMMEDIATE), is(false));	}
@Test	public void testGetItemSelectorReturnTypeClassNameWithoutResolver()		throws Exception {		String itemSelectorReturnTypeClassName =			ItemSelectorRepositoryEntryBrowserUtil.				getItemSelectorReturnTypeClassName(					null, new TestItemSelectorReturnType());		Class<TestItemSelectorReturnType> testItemSelectorReturnTypeClass =			TestItemSelectorReturnType.class;		Assert.assertEquals(			testItemSelectorReturnTypeClass.getName(),			itemSelectorReturnTypeClassName);	}
@Test    public void payload_and_one_option() {        Assert.assertEquals(PAYLOAD_AND_ONE_OPTION,                decoder.decode(ByteBufferDumper.fromHexString(PAYLOAD_AND_ONE_OPTION_HEX), null));    }
@Test	public void shouldStartOnlyOnce() {		given(this.mockLeaderProperties.getUpdatePeriod()).willReturn(Duration.ofMillis(10000L));		this.leaderInitiator.start();		this.leaderInitiator.start();		verify(this.mockLeaderRecordWatcher).start();	}
@Test    public void testInfoToPath() throws Exception {        assertEquals(PATH_BUNDLES + "/org/jahia/modules/article/2.0.0/article-2.0.0.jar",                getJcrPath(new PersistentBundle("org.jahia.modules", "article", "2.0.0")));        assertEquals(                PATH_BUNDLES                        + "/org/jahia/modules/advanced-visibility/2.0.1-SNAPSHOT/advanced-visibility-2.0.1-SNAPSHOT.jar",                getJcrPath(new PersistentBundle("org.jahia.modules", "advanced-visibility", "2.0.1-SNAPSHOT")));        assertEquals(PATH_BUNDLES + "/info/shyrkov/modules/myTest-module/1.0/myTest-module-1.0.jar",                getJcrPath(new PersistentBundle("info.shyrkov.modules", "myTest-module", "1.0")));        assertEquals(PATH_BUNDLES + "/myTest-module/2.1/myTest-module-2.1.jar",                getJcrPath(new PersistentBundle(null, "myTest-module", "2.1")));    }
@Test  public void testAudioVideo() throws Exception {    operationInstance.setConfiguration("source-tags", "");    operationInstance.setConfiguration("source-flavor", "*/video-audio");    operationInstance.setConfiguration("source-flavors", "");    operationInstance.setConfiguration("target-flavor", "*/normalized");    operationInstance.setConfiguration("target-tags", "norm");    operationInstance.setConfiguration("force-transcode", "false");    operationInstance.setConfiguration("target-decibel", "-30");    WorkflowOperationResult result = operationHandler.start(instance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 4, result.getMediaPackage()            .getElements().length);    Track[] tracks = result.getMediaPackage().getTracks(new MediaPackageElementFlavor("presentation", "normalized"));    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 1, tracks.length);    Assert.assertTrue(tracks[0].containsTag("norm"));    TrackImpl audioVideo = (TrackImpl) tracks[0];    Assert.assertEquals(-30f, audioVideo.getAudio().get(0).getRmsLevDb().floatValue(), 0.001d);    tracks = result.getMediaPackage().getTracks(new MediaPackageElementFlavor("presentation", "video-audio"));    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 1, tracks.length);    audioVideo = (TrackImpl) tracks[0];    Assert.assertNull(audioVideo.getAudio().get(0).getRmsLevDb());  }
@Test  public void testIntRangeE1() {    assertFalse(intRangeE(0, 0).hasNext());    assertTrue(intRangeE(0, 1).hasNext());    assertEquals(10, toList(intRangeE(0, 10)).size());  }
@Test    public void dictsToTrie_empty_dicts_should_return_null() throws Exception {        List<PinyinDict> dicts = new ArrayList<PinyinDict>();        dicts.add(new PinyinMapDict() {            @Override            public Map<String, String[]> mapping() {                return null;            }        });        assertThat(Utils.dictsToTrie(dicts), nullValue());    }
@Test  public void testConvertFactIsRetracted() {    FactRecord record = createRecord().addFlag(FactRecord.Flag.RetractedHint);    when(factRetractionHandler.isRetracted(record)).thenReturn(true);    Fact model = converter.apply(record);    assertEquals(SetUtils.set(Fact.Flag.Retracted), model.getFlags());    verify(factRetractionHandler).isRetracted(record);  }
@Test  public void testFromEntityWithFullObject() {    ObjectEntity entity = new ObjectEntity()            .setId(UUID.randomUUID())            .setTypeID(UUID.randomUUID())            .setValue("value");    ObjectRecord record = converter.fromEntity(entity);    assertNotNull(record);    assertEquals(entity.getId(), record.getId());    assertEquals(entity.getTypeID(), record.getTypeID());    assertEquals(entity.getValue(), record.getValue());  }
@Test	public void testGetValuesByDefaultValueWithSelectField() {		ExtendedObjectClassDefinition extendedObjectClassDefinition = mock(			ExtendedObjectClassDefinition.class);		ExtendedAttributeDefinition extendedAttributeDefinition = mock(			ExtendedAttributeDefinition.class);		whenGetAttributeDefinitions(			extendedObjectClassDefinition,			new ExtendedAttributeDefinition[] {extendedAttributeDefinition});		whenGetCardinality(extendedAttributeDefinition, 0);		whenGetDefaultValue(			extendedAttributeDefinition, new String[] {"REQUEST_HEADER"});		whenGetID(extendedAttributeDefinition, "Select");		whenGetOptionLabels(			extendedAttributeDefinition,			new String[] {"COOKIE", "REQUEST_HEADER"});		whenGetOptionValues(			extendedAttributeDefinition,			new String[] {"COOKIE", "REQUEST_HEADER"});		ConfigurationModel configurationModel = new ConfigurationModel(			null, null, null, extendedObjectClassDefinition, false);		DDMFormValues ddmFormValues = getDDMFormValues(			configurationModel, getDDMForm(configurationModel));		List<DDMFormFieldValue> ddmFormFieldValues =			ddmFormValues.getDDMFormFieldValues();		Assert.assertEquals(			ddmFormFieldValues.toString(), 1, ddmFormFieldValues.size());		Assert.assertEquals(			"[\"REQUEST_HEADER\"]", getValueString(ddmFormFieldValues.get(0)));	}
@Test(description = "testing build context method")    public void testBuildContext() {        Assert.assertNull(mqttNotificationStrategy.buildContext(), "not null buildContext received");    }
@Test    public void testTableWithUnequalColumns() {        Table t = new Table(2, 2, 0);        t.set(0, 0, "0x0xxxx");        t.set(0, 1, "0x1");        t.set(1, 0, "1x0");        t.set(1, 1, "1x1yyyyyyyyyyyyyyyyyyy");        assertEquals("" + "┌───────┬──────────────────────┐\n" + "│0x0xxxx│0x1                   │\n" + "├───────┼──────────────────────┤\n" + "│1x0    │1x1yyyyyyyyyyyyyyyyyyy│\n" + "└───────┴──────────────────────┘\n" + "", t.toString());    }
@Test	public void testFloat() throws Exception {		CSSRTLConverter cssRTLConverter = new CSSRTLConverter();		Assert.assertEquals(			"p{float:left}", cssRTLConverter.process("p{float:right}"));		Assert.assertEquals(			"p{float:right}", cssRTLConverter.process("p{float:left}"));	}
@Test  public void testHasPermissionAcrossMultipleOrganizations() throws Exception {    String content = "" +            "subject.1.name = subject\n" +            "organization.1.name = organization1\n" +            "organization.2.name = organization2\n" +            "subject.1.permission.1 = function1\n" +            "subject.1.permission.2 = function2" +            "";    setup(content);    assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function1")));    assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function2")));    assertTrue(accessController.hasPermission(createCredentials(1), () -> "function1"));    assertTrue(accessController.hasPermission(createCredentials(1), () -> "function2"));  }
@Test	public void testGetMultiple1() {		String fieldName = "field";		DDMFormField ddmFormField = new DDMFormField(fieldName, "select");		ddmFormField.setProperty("multiple", "true");		DDMFormFieldRenderingContext ddmFormFieldRenderingContext =			new DDMFormFieldRenderingContext();		ddmFormFieldRenderingContext.setProperty("changedProperties", null);		Assert.assertEquals(			true,			_selectDDMFormFieldTemplateContextContributor.getMultiple(				ddmFormField, ddmFormFieldRenderingContext));	}
@Test  public void testParsingUserWithoutPassword() {    uri = "mysql://user@localhost";    actualParsedResult = parse(uri);    expectedParsedResult = new JsonObject()      .put("user", "user")      .put("host", "localhost");    assertEquals(expectedParsedResult, actualParsedResult);  }
@Test  public void testNonExistingObjectTypeThrowsException(){    InvalidArgumentException ex = assertThrows(InvalidArgumentException.class, () -> handler.assertObjectTypeExists("someObjectType", "type"));    assertEquals(set("object.type.not.exist"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));  }
@Test	public void testInclude() throws IOException {		ScopedCSSVariablesTopHeadDynamicInclude			scopedCSSVariablesTopHeadDynamicInclude =				new ScopedCSSVariablesTopHeadDynamicInclude();		ScopedCSSVariablesProvider scopedCSSVariablesProvider = Mockito.mock(			ScopedCSSVariablesProvider.class);		Collection<ScopedCSSVariables> scopedCSSVariables = Arrays.asList(			new ScopedCSSVariables() {				@Override				public Map<String, String> getCSSVariables() {					return Collections.singletonMap("color", "red");				}				@Override				public String getScope() {					return ":root";				}			});		Mockito.when(			scopedCSSVariablesProvider.getScopedCSSVariablesCollection(				Mockito.any(HttpServletRequest.class))		).thenReturn(			scopedCSSVariables		);		scopedCSSVariablesTopHeadDynamicInclude.setScopedCSSVariablesProviders(			Arrays.asList(scopedCSSVariablesProvider));		HttpServletRequest httpServletRequest = Mockito.mock(			HttpServletRequest.class);		HttpServletResponse httpServletResponse = Mockito.mock(			HttpServletResponse.class);		BufferCacheServletResponse bufferCacheServletResponse =			new BufferCacheServletResponse(httpServletResponse);		scopedCSSVariablesTopHeadDynamicInclude.include(			httpServletRequest, bufferCacheServletResponse,			"/html/common/themes/top_head.jsp#post");		Assert.assertEquals(			_read("liferay_css_variables_1.html", true),			bufferCacheServletResponse.getString());	}
@Test	public void shouldIgnoreCloseWithoutCause() {		this.watcher.onClose(null);		verify(this.mockWithNameResource, times(0)).watch(this.watcher);	}
@Test    public void checkAddCallMethodOnGetsAllBindings() {        popup.addCallMethodOn(false);        verify(model).getAllLHSVariables();        verify(model).getRHSBoundFacts();    }
@Test  public void testSendFailure() throws Exception {    Destination corruptDestination = new TestDestination();    Mutation<?> firstMutation = mock(Mutation.class);    Mutation<?> secondMutation = mock(Mutation.class);    when(keyProvider.get(firstMutation)).thenReturn("0");    when(keyProvider.get(secondMutation)).thenReturn("1");    Destination.Listener listener = mock(Destination.Listener.class);    DestinationPool pool =        new DestinationPool(            keyProvider, Arrays.asList(mock(Destination.class), corruptDestination));    pool.addListener(listener);    pool.send(ImmutableList.of(firstMutation, secondMutation));    verify(listener, times(1)).onError(any(RuntimeException.class));  }
@Test(timeout = 30000)    public void testClipperJvmCrash()                            throws Exception {        BufferedImage img = new BufferedImage( 100, 100, TYPE_INT_ARGB );        Graphics2D g = img.createGraphics();        GeometryFactory geomFac = new GeometryFactory();        double cen0 = 642800d;        double cen1 = 5600049000d;        Java2DRenderer r = new Java2DRenderer( g, img.getWidth(), img.getHeight(),                                               geomFac.createEnvelope( new double[] { 0, 0 }, new double[] { 50d, 50d },                                                                       mapcs ) );        Point p1 = geomFac.createPoint( "testP1", 0, 0, null );        Point p2 = geomFac.createPoint( "testP1", cen0, cen1, null );        Points points = new PointsArray( p1, p2 );        LineString lineString = geomFac.createLineString( "testLineString", null, points );        LineStyling styling = new LineStyling();        styling.stroke.color = red;        styling.stroke.width = 3;        styling.stroke.dasharray = new double[] { 10.0d, 10.0d };        r.render( styling, lineString );        g.dispose();    }
@Test    public void testStringToJCRSearchExp() {        String term = "foo bar";        assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo -bar";        assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo \\-bar";        assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo \"bar";        assertEquals(getFinalTerm("foo \\\"bar"), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo \"bar baz\"";        assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo \"bar -baz\"";        assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo \"bar baz\"   boo\"";        assertEquals(getFinalTerm("foo \"bar baz\"   boo\\\""), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo \"bar baz\" \"fu boo\"";        assertEquals(getFinalTerm("foo \"bar baz\" \"fu boo\""), JCRContentUtils.stringToJCRSearchExp(term));        term = "    foo \"bar baz\"   boo    bu  ";        assertEquals(getFinalTerm("foo \"bar baz\"   boo    bu"), JCRContentUtils.stringToJCRSearchExp(term));        term = "\"foo";        assertEquals(getFinalTerm("\\\"foo"), JCRContentUtils.stringToJCRSearchExp(term));        term = "foo\"";        assertEquals(getFinalTerm("foo\\\""), JCRContentUtils.stringToJCRSearchExp(term));        term = "\"";        assertEquals(getFinalTerm("\\\""), JCRContentUtils.stringToJCRSearchExp(term));        term = "";        assertEquals(getFinalTerm(""), JCRContentUtils.stringToJCRSearchExp(term));    }
@Test    public void testSetHideColumn() throws Exception {        final boolean hideColumn = false;        plugin.setHideColumn(hideColumn);        verify(editingCol).setHideColumn(hideColumn);    }
@Test    public void onStartup() {        abstractScenarioSimulationEditorKogitoScreenSpy.onStartup(placeRequestMock);        verify(scenarioSimulationEditorKogitoWrapperMock, times(1)).onStartup(eq(placeRequestMock));    }
@Test    public void test06() {        List<String> expectedResult = new ArrayList<String>();        expectedResult.add("13");        expectedResult.add("14");        expectedResult.add("19");        expectedResult.add("23");        expectedResult.add("24");        expectedResult.add("29");        final List<String> result = new ArrayList<>();        new RangeExpressionParser("[1..2][3..4,9]").visit(new RangeExpressionItemVisitor() {            @Override            public void visit(Object val) {                result.add((String) val);                // System.out.println(val);            }        });        Assert.equals(result, expectedResult);    }
@Test  public void testUpdateOriginCallsConverter() throws Exception {    OriginEntity entity = new OriginEntity()            .setId(UUID.randomUUID());    when(originResolver.apply(entity.getId())).thenReturn(entity);    when(originManager.saveOrigin(entity)).thenReturn(entity);    delegate.handle(new UpdateOriginRequest().setId(entity.getId()));    verify(originManager).saveOrigin(entity);    verify(originResponseConverter).apply(entity);  }
@Test    public void testSetOperator() {        final String operator = "operator";        page.setOperator(operator);        verify(plugin).setOperator(operator);    }
@Test public void testOnBackPressWithoutWebView() {		// Arrange:		final WebFragment fragment = new WebFragment();		// Act + Assert:		assertThat(fragment.onBackPress(), is(false));	}
@Test    public void headersNoPaddingNoPriority() {        Http2Frame frame = TestMessages.HEADERS_NO_PADDING_NO_PRIORITY_FRAME;        assertArrayEquals(TestMessages.HEADERS_NO_PADDING_NO_PRIORITY_BUFFER,  toByteArray(encoder.encode(frame, null)));    }
@Test    public void updateRadar() {        presenter.updateRadar();        verify(updateRadarEvent,               times(1)).fire(any(RadarMenuBuilder.UpdateRadarEvent.class));    }
@Test   public void testCenturiesAgo() throws Exception   {      PrettyTime t = new PrettyTime(new Date(3155692597470L * 3L));      Assert.assertEquals("3 centuries ago", t.format(new Date(0)));   }
@Test    public void testClone() throws Exception {        final ActionWorkItemInsertFactCol52 column = new ActionWorkItemInsertFactCol52();        column.setFactField("factField");        column.setBoundName("boundName");        column.setValueList("valueList");        column.setHeader("header");        column.setInsertLogical(false);        column.setDefaultValue(new DTCellValue52("defaultValue"));        column.setFactType("factType");        column.setHideColumn(false);        column.setType("type");        column.setParameterClassName("parameterClassName");        column.setWorkItemName("workItemName");        column.setWorkItemResultParameterName("workItemResultParameterName");        final ActionWorkItemInsertWrapper wrapper = new ActionWorkItemInsertWrapper(plugin,                                                                                    column);        final ActionWorkItemInsertFactCol52 clone = wrapper.getActionCol52();        assertEquals("factField",                     column.getFactField());        assertEquals("boundName",                     column.getBoundName());        assertEquals("valueList",                     column.getValueList());        assertEquals("header",                     column.getHeader());        assertEquals(false,                     column.isInsertLogical());        assertEquals(new DTCellValue52("defaultValue"),                     column.getDefaultValue());        assertEquals("factType",                     column.getFactType());        assertEquals(false,                     column.isHideColumn());        assertEquals("type",                     column.getType());        assertEquals("parameterClassName",                     column.getParameterClassName());        assertEquals("workItemName",                     column.getWorkItemName());        assertEquals("workItemResultParameterName",                     column.getWorkItemResultParameterName());        assertNotSame(column,                      clone);    }
@Test    public void duplicateRow() {        abstractScesimGridModelSpy.duplicateRow(ROW_INDEX, gridRowMock);        verify(abstractScesimGridModelSpy, atLeast(1)).checkSimulation();        verify(simulationMock, times(1)).cloneData(eq(ROW_INDEX), eq(ROW_INDEX + 1));        verify(abstractScesimGridModelSpy, times(1)).insertRowGridOnly(eq(ROW_INDEX + 1), eq(gridRowMock), isA(Scenario.class));        verify(abstractScesimGridModelSpy, never()).insertRow(eq(ROW_INDEX), eq(gridRowMock));    }
@Test(description = "This method tests the inviteToEnrollDevice method of UserManagementService",            dependsOnMethods = "testGetUsers")    public void testInviteToEnrollDevice() {        URL resourceUrl = ClassLoader.getSystemResource("testng.xml");        System.setProperty("carbon.home", resourceUrl.getPath());        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getUserStoreManager"))                .toReturn(this.userStoreManager);        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getAuthenticatedUser")).toReturn(TEST_USERNAME);        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getDeviceManagementService"))                .toReturn(this.deviceManagementProviderService);        EnrollmentInvitation enrollmentInvitation = new EnrollmentInvitation();        List<String> recipients = new ArrayList<>();        recipients.add(TEST_USERNAME);        enrollmentInvitation.setDeviceType("android");        enrollmentInvitation.setRecipients(recipients);        Response response = userManagementService.inviteToEnrollDevice(enrollmentInvitation);        Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode(),                "Inviting users to enroll device failed");    }
@Test  public void test() throws IOException, InterruptedException {    assertNull(fileChanged);    assertEquals(0, numChanged);    Thread.sleep(1000);    // create new file    File file1 = new File(tmpDir, "test1");    file1.createNewFile();    File file2 = new File(tmpDir, "test2");    file2.createNewFile();    watcher.watch(file1);    Thread.sleep(1000);    FileOutputStream out1 = new FileOutputStream(file1);    out1.write(1);    out1.close();    FileOutputStream out2 = new FileOutputStream(file2);    out2.write(1);    out2.close();    synchronized (this) {      wait(30*1000);    }    assertNotNull(fileChanged);    assertEquals(1, numChanged);  }
@Test  public void testGetQueueTime() throws Exception {    assertEquals((Long) 100L, job.getQueueTime());  }
@Test	public void testSendUnicastMessage() {		ClusterLinkImpl clusterLinkImpl = getClusterLinkImpl(1);		List<Serializable> multicastMessages =			TestClusterChannel.getMulticastMessages();		List<ObjectValuePair<Serializable, Address>> unicastMessages =			TestClusterChannel.getUnicastMessages();		Assert.assertTrue(			multicastMessages.toString(), multicastMessages.isEmpty());		Assert.assertTrue(			unicastMessages.toString(), unicastMessages.isEmpty());		Message message = new Message();		Address address = new TestAddress(-1);		clusterLinkImpl.sendUnicastMessage(address, message, Priority.LEVEL1);		Assert.assertTrue(			multicastMessages.toString(), multicastMessages.isEmpty());		Assert.assertEquals(			unicastMessages.toString(), 1, unicastMessages.size());		ObjectValuePair<Serializable, Address> unicastMessage =			unicastMessages.get(0);		Assert.assertSame(message, unicastMessage.getKey());		Assert.assertSame(address, unicastMessage.getValue());	}
@Test	public void testToContentDashboardItemTypeOptionalByClassNameAndClassPK()		throws PortalException {		ContentDashboardItemType contentDashboardItemType =			_getContentDashboardItemType();		ContentDashboardItemTypeFactory contentDashboardItemTypeFactory =			_getContentDashboardItemTypeFactory(contentDashboardItemType);		ContentDashboardItemTypeFactoryTracker			contentDashboardItemTypeFactoryTracker =				_getContentDashboardItemTypeFactoryTracker(					contentDashboardItemType, contentDashboardItemTypeFactory);		Optional<ContentDashboardItemType> contentDashboardItemTypeOptional =			ContentDashboardItemTypeUtil.toContentDashboardItemTypeOptional(				contentDashboardItemTypeFactoryTracker,				contentDashboardItemType.getInfoItemReference());		Assert.assertEquals(			contentDashboardItemType, contentDashboardItemTypeOptional.get());	}
@Test(expectedExceptions = IllegalArgumentException.class)    public void testAddOtherStore() {        NodeStore nodeStore = new NodeStore();        NodeImpl node = new NodeImpl("0");        nodeStore.add(node);        NodeStore nodeStore2 = new NodeStore();        nodeStore2.add(node);    }
@Test    public void columnResizingListenerSetup_ActionInsertFactColumn() {        final ActionInsertFactCol52 column = new ActionInsertFactCol52();        column.setFactType("MyFact");        column.setFactField("MyField");        column.setHeader("MyColumn");        when(oracle.getFieldType("MyFact",                                 "MyField")).thenReturn(DataType.TYPE_STRING);        final GridColumn<?> uiColumn = factory.convertColumn(column,                                                             access,                                                             gridWidget);        assertTrue(uiColumn instanceof BaseUiColumn);        assertEquals((int) uiColumn.getWidth(),                     column.getWidth());        uiColumn.setWidth(200.0);        assertEquals(200,                     column.getWidth());    }
@Test    public void testFormat() throws Exception {        ITextFormatter formatter = new StripTagsTextFormatter();        String result = formatter.format(testVerses);        Assert.assertFalse(result.contains("<I>"));        Assert.assertFalse(result.contains("</I>"));        Assert.assertFalse(result.contains("<p>"));        Assert.assertFalse(result.contains("</p>"));    }
@Test	public void testGetInfoItemReference() {		InfoItemIdentifier infoItemIdentifier = new InfoItemIdentifier() {			@Override			public Optional<String> getVersionOptional() {				return Optional.empty();			}			@Override			public void setVersion(String version) {			}		};		InfoItemReference infoItemReference = new InfoItemReference(			"className", infoItemIdentifier);		Assert.assertEquals(			infoItemIdentifier, infoItemReference.getInfoItemIdentifier());	}
@Test    public void setContent() {        abstractScenarioSimulationEditorKogitoScreenSpy.setContent("fullPath", "content");        verify(scenarioSimulationEditorKogitoWrapperMock, times(1)).setContent(eq("fullPath"),                                                                                                    eq("content"));    }
@Test    public void testMakeMenuBar() {        doReturn(Optional.of(mock(WorkspaceProject.class))).when(workbenchContext).getActiveWorkspaceProject();        doReturn(promises.resolve(true)).when(projectController).canUpdateProject(any());        presenter.makeMenuBar();        verify(fileMenuBuilder).addCopy(any(Path.class),                                        any(AssetUpdateValidator.class));        verify(fileMenuBuilder).addRename(any(Path.class),                                          any(AssetUpdateValidator.class));        verify(fileMenuBuilder).addDelete(any(Path.class),                                          any(AssetUpdateValidator.class));        verify(fileMenuBuilder).addNewTopLevelMenu(alertsButtonMenuItem);        verify(presenter).addDownloadMenuItem(fileMenuBuilder);    }
@Test	public void testGetSSHDServiceStatus() throws Exception {		List<ComponentService> services = new LinkedList();		ComponentService cs = new ComponentService(PROCESS_NAME, SSHD, PORT);		List<Parameter> parameters = new ArrayList<Parameter>();		parameters.add(new Parameter(PORT, PORT_22));		parameters.add(new Parameter(PROCESS_NAME, SSHD));		cs.setParams(parameters);		services.add(cs);		Map<String, Boolean> result = fixture.getServiceStatus(services);		assertNotNull(result);		assertEquals(1, result.size());		assertNotNull(result.get(SSHD));	}
@Test  public void testURI() throws Exception {    AccessURI uri = (AccessURI)DBModelAuthorizables.from("UrI=hdfs://uri1:8200/blah");    assertEquals("hdfs://uri1:8200/blah", uri.getName());  }
@Test    public void testSetTaxonomyUri() {        String taxonomyUri = "uri";        instance.setTaxonomyUri(taxonomyUri);        assertEquals(instance.getTaxonomyUri(), taxonomyUri);    }
@Test    public void testSetName() {        String name = "name";        instance.setName(name);        assertEquals(instance.getName(),name);    }
@Test  public void testWithAclNullFact() {    assertNull(withAcl(null, UUID.randomUUID(), list(UUID.randomUUID())));  }
@Test    public void unknownColumnTypeDoesNotTriggerBuilder() {        final BaseColumn column = new RowNumberCol52();        builder.generateDefinition( dtPresenter,                                    column,                                    ( String definition ) -> {                                        fail( "RowNumberCol52 should not be handled by ConditionCol52DefinitionBuilder" );                                    } );    }
@Test    public void testWrapByteBuffer() throws Exception {        //given        final ByteBuffer byteBuffer = allocateDirect(5);        byteBuffer.put(new byte[]{                1, 1, 2, 3, 5        });        //when        final Pointer<Void> voidPointer = wrap(byteBuffer);        //then        final long address = voidPointer.address;        assertThat(address).isNotEqualTo(0L);    }
@Test  public void testGetObjectTypeWithUnknownNameReturnsNull() {    assertNull(getObjectManager().getObjectType((String) null));    assertNull(getObjectManager().getObjectType(""));    assertNull(getObjectManager().getObjectType("Unknown"));  }
@Test(expected = IllegalStateException.class)	public void testFindFragmentByFactoryIdWhenDestroyed() {		// Arrange + Act:		createDestroyedController().findFragmentByFactoryId(TestFactory.FRAGMENT_1);	}
@Test    public void testIsCompleteWhenItIsCompleted() throws Exception {        when(plugin.constraintValue()).thenReturn(BaseSingleFieldConstraint.TYPE_LITERAL);        page.isComplete(Assert::assertTrue);    }
@Test    public void simpleAction() {        final AtomicBoolean calledBack = new AtomicBoolean( false );        final LimitedEntryActionRetractFactCol52 arf = new LimitedEntryActionRetractFactCol52();        arf.setValue( new DTCellValue52( "$a" ) );        model.getActionCols().add( arf );        builder.generateDefinition( dtPresenter,                                    arf,                                    ( String definition ) -> {                                        calledBack.set( true );                                        assertEquals( "retract( $a );",                                                      definition );                                    } );        assertTrue( calledBack.get() );    }
@Test	public void testCompileFileClayCss() throws Exception {		try (SassCompiler sassCompiler = new JSassCompiler()) {			File clayCssDir = new File(				"../sass-compiler-jni/test-classes/unit/com/liferay/sass" +					"/compiler/jni/internal/dependencies/clay-css");			for (File inputFile : clayCssDir.listFiles()) {				if (inputFile.isDirectory()) {					continue;				}				String fileName = inputFile.getName();				if (fileName.startsWith("_") || !fileName.endsWith("scss")) {					continue;				}				String actualOutput = sassCompiler.compileFile(					inputFile.getCanonicalPath(), "", true);				Assert.assertNotNull("Testing: " + fileName, actualOutput);				String expectedOutputFileName =					"expected" + File.separator +						fileName.replace("scss", "css");				File expectedOutputFile = new File(					clayCssDir, expectedOutputFileName);				if (expectedOutputFile.exists()) {					String expectedOutput = read(expectedOutputFile.toPath());					Assert.assertEquals(						"Testing: " + fileName, stripNewLines(expectedOutput),						stripNewLines(actualOutput));				}			}		}	}
@Test    public void testGetCustomCollectionInheritsSimpleCustomDMNTypes() {        // tPeople[string]        // tMen[tPeople] isCollection        final JSITItemDefinition tPeople = mock(JSITItemDefinition.class);        final JSITItemDefinition tMen = mock(JSITItemDefinition.class);        final String tPeopleType = "tPeopleType";        final String tMenType = "tMenType";        when(tMen.getName()).thenReturn(tMenType);        when(tMen.getTypeRef()).thenReturn(tPeopleType);        when(tMen.getIsCollection()).thenReturn(true);        when(tPeople.getName()).thenReturn(tPeopleType);        when(tPeople.getTypeRef()).thenReturn(BuiltInType.STRING.getName());        final List<JSITItemDefinition> definitions = Arrays.asList(tPeople, tMen);        final Map<String, ClientDMNType> dmnTypesMap = abstractKogitoDMNServiceSpy.getDMNDataTypesMap(definitions, "namespace");        assertTrue(dmnTypesMap.containsKey(tPeopleType));        final ClientDMNType dmnPeopleType = dmnTypesMap.get(tPeopleType);        assertTrue(dmnPeopleType.getFields().isEmpty());        assertEquals(BuiltInType.STRING, dmnPeopleType.getFeelType());        assertFalse(dmnPeopleType.isCollection());        assertFalse(dmnPeopleType.isComposite());        final ClientDMNType dmnMenType = dmnTypesMap.get(tMenType);        assertTrue(dmnMenType.getFields().isEmpty());        assertEquals(BuiltInType.STRING, dmnMenType.getFeelType());        assertTrue(dmnMenType.isCollection());        assertFalse(dmnMenType.isComposite());        // It must contains all elements defined in BuiltInType ENUM        assertTrue(dmnTypesMap.size() == 16);        for (BuiltInType builtInType : BuiltInType.values()) {            Arrays.stream(builtInType.getNames()).forEach(name -> assertNotNull(dmnTypesMap.get(name)));        }    }
@Test    public void writeMandatory()                            throws XMLStreamException {        final String frame = null;        final String calendarEraName = null;        final IndeterminateValue indeterminatePosition = null;        final String value = null;        final TimePosition timePosition = new TimePosition( frame, calendarEraName, indeterminatePosition, value );        final MemoryXmlStreamWriter xmlWriter = new MemoryXmlStreamWriter();        xmlWriter.writeEmptyElement( "TimePosition" );        gmlTimePositionTypeWriter.write( timePosition, xmlWriter );        xmlWriter.close();        assertEquals( "<TimePosition/>", xmlWriter.getOutput() );    }
@Test    public void addToScenarioMultipleNested() {        FactMapping factMappingMock = mock(FactMapping.class);        KogitoScenarioSimulationBuilder.FactMappingExtractor factMappingExtractorMock = mock(KogitoScenarioSimulationBuilder.FactMappingExtractor.class);        when(factMappingExtractorMock.getFactMapping(any(), anyString(), any(), anyString())).thenReturn(factMappingMock);        Map<String, FactModelTree> hiddenFacts = new HashMap<>();        FactModelTree factModelTree = new FactModelTree("myFact", "", new HashMap<>(), Collections.emptyMap());        factModelTree.addExpandableProperty("nestedProperty", "tNested");        factModelTree.addExpandableProperty("nestedProperty2", "tNested2");        FactModelTree nested1 = new FactModelTree("tNested1", "", new HashMap<>(), Collections.emptyMap());        FactModelTree nested2 = new FactModelTree("tNested2", "", new HashMap<>(), Collections.emptyMap());        String propertyType = String.class.getCanonicalName();        String propertyName = "stingProperty";        nested1.addSimpleProperty(propertyName, new FactModelTree.PropertyTypeName(propertyType));        String propertyType2 = Boolean.class.getCanonicalName();        String propertyName2 = "booleanProperty";        nested2.addSimpleProperty(propertyName2, new FactModelTree.PropertyTypeName(propertyType2));        hiddenFacts.put("tNested", nested1);        hiddenFacts.put("tNested2", nested2);        kogitoScenarioSimulationBuilderSpy.addFactMapping(factMappingExtractorMock,                                                          factModelTree,                                                          new ArrayList<>(),                                                          hiddenFacts);        verify(factMappingExtractorMock, times(1))                .getFactMapping(                        eq(nested1),                        eq(propertyName),                        eq(Arrays.asList("myFact", "nestedProperty")),                        eq(propertyType));        verify(factMappingExtractorMock, times(1))                .getFactMapping(                        eq(nested2),                        eq(propertyName2),                        eq(Arrays.asList("myFact", "nestedProperty2")),                        eq(propertyType2));        verify(factMappingExtractorMock, times(2))                .getFactMapping(                        any(),                        any(),                        any(),                        any());    }
@Test    public void testAddUseRowNumberCheckBox() throws Exception {        view.addUseRowNumberCheckBox(attributeColumn, true, null);        verify(view).add(widgetCaptor.capture());        assertTrue(widgetCaptor.getValue() instanceof CheckBox);    }
@Test  public void testSearchFactsWithoutSearchResult() {    FactSearchCriteria criteria = createFactSearchCriteria();    when(factSearchManager.searchFacts(criteria)).thenReturn(ScrollingSearchResult.<FactDocument>builder().build());    ResultContainer<FactRecord> container = dao.searchFacts(criteria);    assertEquals(0, container.getCount());    assertFalse(container.hasNext());    verify(factSearchManager).searchFacts(criteria);    verifyNoInteractions(factManager);  }
@Test  public void testFlush() throws IOException {    out.write("hello\nworld");    assertEquals("hello\n", new String(out.toByteArray()));    assertEquals(1, numAppendEvent);    assertEquals(1, numUpdateEvent);    out.flush();    assertEquals("hello\nworld", new String(out.toByteArray()));    assertEquals(2, numAppendEvent);    assertEquals(1, numUpdateEvent);    out.clear();    out.write("%html div");    assertEquals("", new String(out.toByteArray()));    assertEquals(InterpreterResult.Type.TEXT, out.getType());    out.flush();    out.write("%html div");    assertEquals("div", new String(out.toByteArray()));    assertEquals(InterpreterResult.Type.HTML, out.getType());  }
@Test  public void testHTTPPostJSON() throws Exception {    // create a dummy mediapackage    MediaPackageBuilderFactory factory = MediaPackageBuilderFactory.newInstance();    MediaPackageBuilder builder = factory.newMediaPackageBuilder();    MediaPackage mp = builder.createNew(new IdImpl("xyz"));    mp.setTitle("test");    mp.addContributor("lkiesow");    mp.addContributor("lkiesow");    /* Sending stuff to port 9 shound never return anything as the Discard     * Protocol uses port 9 */    InstanceAndHandler tuple = createWorkflow("http://127.0.0.1:9", "json");    tuple.workflowInstance.setMediaPackage(mp);    try {      tuple.workflowHandler.start(tuple.workflowInstance, null);      /* This should raise an exception. Something is wrong if not. */      Assert.fail();    } catch (WorkflowOperationException e) {      logger.info(e.toString());    }  }
@Test    public void testSetCurrent() throws Exception {        mDay.setCurrent(false);        assertFalse(mDay.isCurrent());    }
@Test    public void parseOperatorFilter()                            throws XMLStreamException, FactoryConfigurationError, IOException {        Filter filter = parse( "testfilter_110_operator.xml" );        Assert.assertNotNull( filter );        Assert.assertEquals( Filter.Type.OPERATOR_FILTER, filter.getType() );        OperatorFilter operatorFilter = (OperatorFilter) filter;        Assert.assertEquals( Operator.Type.LOGICAL, operatorFilter.getOperator().getType() );        LogicalOperator logicalOperator = (LogicalOperator) operatorFilter.getOperator();        Assert.assertEquals( LogicalOperator.SubType.AND, logicalOperator.getSubType() );        And and = (And) logicalOperator;        Assert.assertEquals( 2, and.getSize() );        Assert.assertEquals( Operator.Type.COMPARISON, and.getParameter( 0 ).getType() );        ComparisonOperator param1Oper = (ComparisonOperator) and.getParameter( 0 );        Assert.assertEquals( ComparisonOperator.SubType.PROPERTY_IS_GREATER_THAN, param1Oper.getSubType() );        Assert.assertEquals( Operator.Type.COMPARISON, and.getParameter( 1 ).getType() );        ComparisonOperator param2Oper = (ComparisonOperator) and.getParameter( 1 );        Assert.assertEquals( ComparisonOperator.SubType.PROPERTY_IS_EQUAL_TO, param2Oper.getSubType() );    }
@Test	public void testStreamNotModifiedWhenNotAPNG() throws Exception {		InputStream inputStream = _createInputStream(_NOT_PNG_CONTENT_BYTES);		byte[] bytes = new byte[_NOT_PNG_CONTENT_BYTES.length];		inputStream.read(bytes);		Assert.assertArrayEquals(_NOT_PNG_CONTENT_BYTES, bytes);	}
@Test  public void testIterateVerticesWithUuidIdSupportUsingReferenceVertex() {    Vertex vertex1 = createVertex();    Vertex vertex2 = getActGraph().vertices(ReferenceFactory.detach(vertex1)).next();    assertEquals(vertex1.id(), vertex2.id());    assertFalse(vertex2 instanceof ReferenceVertex);  }
@Test    public void testExportSchema()                    throws Exception {        String schemaURL = this.getClass().getResource( "../cite/schema/cite-gmlsf0.xsd" ).toURI().toString();        GMLSchemaInfoSet gmlSchemaInfoSet = new GMLSchemaInfoSet( null, schemaURL );        GMLAppSchemaReader adapter = new GMLAppSchemaReader( GMLVersion.GML_31, null, schemaURL );        AppSchema schema = adapter.extractAppSchema();        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();        outputFactory.setProperty( XMLOutputFactory.IS_REPAIRING_NAMESPACES, true );        ByteArrayOutputStream os = new ByteArrayOutputStream();        XMLStreamWriter writer = new IndentingXMLStreamWriter( outputFactory.createXMLStreamWriter( os ) );        GMLAppSchemaWriter encoder = new GMLAppSchemaWriter( GMLVersion.GML_31, "http://cite.opengeospatial.org/gmlsf",                                                             null, schema.getNamespaceBindings() );        encoder.export( writer, gmlSchemaInfoSet, "http://cite.opengeospatial.org/gmlsf", uri -> uri );        writer.close();        System.out.println( os.toString() );    }
@Test(expected = DDMFormFieldValueValidationException.class)	public void testValidationWithInvalidColumnValue() throws Exception {		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		DDMFormField ddmFormField = DDMFormTestUtil.createDDMFormField(			"Grid", "Grid", "grid", "string", false, false, false);		DDMFormFieldOptions ddmFormFieldRows = new DDMFormFieldOptions();		ddmFormFieldRows.addOptionLabel(			"rowValue 1", LocaleUtil.US, "rowLabel 1");		ddmFormFieldRows.addOptionLabel(			"rowValue 2", LocaleUtil.US, "rowLabel 2");		ddmFormField.setProperty("rows", ddmFormFieldRows);		DDMFormFieldOptions ddmFormFieldColumns = new DDMFormFieldOptions();		ddmFormFieldColumns.addOptionLabel(			"columnValue 1", LocaleUtil.US, "columnLabel 1");		ddmFormFieldColumns.addOptionLabel(			"columnValue 2", LocaleUtil.US, "columnLabel 2");		ddmFormField.setProperty("columns", ddmFormFieldColumns);		ddmForm.addDDMFormField(ddmFormField);		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"Grid",				new UnlocalizedValue("{\"rowValue 1\":\"columnValue 4\"}"));		_gridDDMFormFieldValueValidator.validate(			ddmFormField, ddmFormFieldValue.getValue());	}
@Test    public void testColumnManagementGroupTitleWorkItemAction() throws Exception {        final ActionWorkItemCol52 column = mock(ActionWorkItemCol52.class);        assertEquals(GuidedDecisionTableConstants.INSTANCE.ExecuteWorkItemActions(),                     DecisionTableColumnViewUtils.getColumnManagementGroupTitle(column));    }
@Test    public void enterPinnedMode() {        final GuidedDecisionTableView.Presenter dtPresenter = makeDecisionTable();        final Command command = mock(Command.class);        presenter.enterPinnedMode(dtPresenter.getView(),                                  command);        verify(gridLayer,               times(1)).enterPinnedMode(eq(dtPresenter.getView()),                                         eq(command));        verify(columnHeaderPopOver,               times(1)).hide();    }
@Test	public void testRestrictedMethodNames() throws Exception {		RestrictedLiferayObjectWrapper restrictedLiferayObjectWrapper =			new RestrictedLiferayObjectWrapper(				null, null,				new String[] {					TestLiferayMethodObject.class.getName() + "#getName"				});		TemplateModel templateModel = restrictedLiferayObjectWrapper.wrap(			new TestLiferayMethodObject("test"));		Assert.assertThat(			templateModel,			CoreMatchers.instanceOf(LiferayFreeMarkerStringModel.class));		LiferayFreeMarkerStringModel liferayFreeMarkerStringModel =			(LiferayFreeMarkerStringModel)templateModel;		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "name");		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "Name");		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "getName");		_testRestrictedMethodNames(liferayFreeMarkerStringModel, "getname");		SimpleMethodModel simpleMethodModel =			(SimpleMethodModel)liferayFreeMarkerStringModel.get("generate");		TemplateModel resultTemplateModel =			(TemplateModel)simpleMethodModel.exec(				Collections.singletonList(new SimpleScalar("generate")));		Assert.assertEquals("test-generate", resultTemplateModel.toString());	}
@Test  public void testSearchObjectFactsByNonExistingTypeValue() throws Exception {    SearchObjectFactsRequest request = new SearchObjectFactsRequest().setObjectType("type").setObjectValue("value");    doThrow(AccessDeniedException.class).when(securityContext).checkReadPermission((ObjectRecord) isNull());    try {      delegate.handle(request);      fail();    } catch (AccessDeniedException ignored) {      verify(objectTypeHandler).assertObjectTypeExists(request.getObjectType(), "objectType");      verify(objectFactDao).getObject(request.getObjectType(), request.getObjectValue());    }  }
@Test    public void testHide() {        presenter.hide();        verify(view).hide();    }
@Test  public void testGetPeriodsWeekly() {    for (int i = 0; i < repetitions; i++) {      final Instant a = randomInstant();      final Instant b = randomInstant();      final Instant from = Ordering.natural().min(a, b);      final Instant to = Ordering.natural().max(a, b);      logger.info("from {} to {} {}", from, to, DataResolution.WEEKLY.name());      final List<Tuple<Instant, Instant>> periods = InfluxStatisticsProvider.getPeriods(from, to, DataResolution.WEEKLY,          ZoneId.of("Z"));      assertEquals(1, periods.size());      assertEquals(from, periods.get(0).getA());      assertEquals(to, periods.get(0).getB());    }  }
@Test  public void testReturnEmptyPropertyIfKeyNonExistent() {    Edge edge = createEdge();    Property property = edge.property("something");    assertEquals(Property.empty(), property);  }
@Test  public void testGetVersion() throws Exception {    assertEquals(0L, job.getVersion());  }
@Test    public void setRuleSettings() {        settingsPresenterSpy.setRuleSettings(settingsSpy);        verify(dmnSettingsStyleMock, times(1)).setDisplay(eq(Style.Display.NONE));        verify(ruleSettingsStyleMock, times(1)).setDisplay(eq(Style.Display.INLINE));        verify(dmoSessionMock, times(1)).setValue(eq(DMO_SESSION));        verify(ruleFlowGroupMock, times(1)).setValue(eq(RULE_FLOW_GROUP));        verify(statelessMock, times(1)).setChecked(eq(settingsSpy.isStateless()));    }
@Test  public void tolerateEmptyFiles() throws Exception {    createSourceFiles("com/hello/", "com/hello/package-info.java");    Path file = writeFile(workspace.resolve("com/hello/package-info.java"), "package com.hello;");    JavaSourceFileParser parser = createParser(file);    assertThatGraphsEqual(parser.getClassToClass(), newGraph());  }
@Test    public void should_fail_when_executing_a_removed_prepared_statement() throws Exception {        //Given        String prepare_first = "@prepare[to_be_removed]=INSERT INTO zeppelin.users(login,deceased) VALUES(?,?)";        interpreter.interpret(prepare_first, intrContext);        String remove_prepared = "@remove_prepare[to_be_removed]\n" +                "@bind[to_be_removed]='bind_bool'";        //When        final InterpreterResult actual = interpreter.interpret(remove_prepared, intrContext);        //Then        assertThat(actual.code()).isEqualTo(Code.ERROR);        assertThat(actual.message()).isEqualTo("The statement 'to_be_removed' can not be bound to values. " +                "Are you sure you did prepare it with @prepare[to_be_removed] ?");    }
@Test  public void testSplit() {    assertEquals(null, XsltHelper.split(null, 50, 1, false));    assertEquals(TEXT1, XsltHelper.split(TEXT1, 0, 1, false));    assertEquals(null, XsltHelper.split(TEXT1, 50, 0, false));    assertEquals(SHORT_TEXT, XsltHelper.split(SHORT_TEXT, 50, 1, false));    assertEquals(null, XsltHelper.split(SHORT_TEXT, 50, 2, false));    assertEquals("Multiscale Climatic, Topographic, and Biotic", XsltHelper.split(TEXT1, 50, 1, false));    assertEquals("Controls of Tree Invasion in a Sub-Alpine Parkland", XsltHelper.split(TEXT1, 50, 2, false));    assertEquals("Landscape, Jefferson Park, Oregon Cascades, USA", XsltHelper.split(TEXT1, 50, 3, false));    assertEquals("The Ancient Ancestors of these Indians here:", XsltHelper.split(TEXT2, 44, 1, false));    assertEquals("The Ancient Ancestors of these Indians", XsltHelper.split(TEXT2, 43, 1, false));    assertEquals("Dies ist ein", XsltHelper.split(TEXT3, 15, 1, false));    assertEquals("\"Klassiker\" zur", XsltHelper.split(TEXT3, 15, 2, false));    assertEquals("Dies ist ein", XsltHelper.split(TEXT3, 23, 1, false));    assertEquals("\"Klassiker\" zur", XsltHelper.split(TEXT3, 23, 2, false));    assertEquals("Dies ist ein \"Klassiker\"", XsltHelper.split(TEXT3, 24, 1, false));    assertEquals("zur Gesprächsführung:", XsltHelper.split(TEXT3, 24, 2, false));    assertEquals("Angehrn Tobias, Biedermann", XsltHelper.split(TEXT4, 31, 1, false));    assertEquals("Angehrn Tobias, Biedermann Anja,", XsltHelper.split(TEXT4, 32, 1, false));  }
@Test  public void testEdgesWithDirectionBiDirectional() {    UUID objectID = mockObjectWithFact(Direction.BiDirectional);    Vertex vertex = new ObjectVertex(getActGraph(), objectID);    assertTrue(vertex.edges(BOTH).hasNext());    assertTrue(vertex.edges(IN).hasNext());    assertTrue(vertex.edges(OUT).hasNext());  }
@Test	public void testBorder() throws Exception {		CSSRTLConverter cssRTLConverter = new CSSRTLConverter();		Assert.assertEquals(			"p{border-right:1px}",			cssRTLConverter.process("p{border-left:1px}"));		Assert.assertEquals(			"p{border-left:1px}",			cssRTLConverter.process("p{border-right:1px}"));		Assert.assertEquals(			"p{border-left:1px solid #000}",			cssRTLConverter.process("p{border-right:1px solid #000}"));		Assert.assertEquals(			"p{border-style:solid}",			cssRTLConverter.process("p{border-style:solid}"));		Assert.assertEquals(			"p{border-style:none solid}",			cssRTLConverter.process("p{border-style:none solid}"));		Assert.assertEquals(			"p{border-style:none solid dashed}",			cssRTLConverter.process("p{border-style:none solid dashed}"));		Assert.assertEquals(			"p{border-style:none double dashed solid}",			cssRTLConverter.process(				"p{border-style:none solid dashed double}"));		Assert.assertEquals(			"p{border-color:#fff}",			cssRTLConverter.process("p{border-color:#fff}"));		Assert.assertEquals(			"p{border-color:#fff #000}",			cssRTLConverter.process("p{border-color:#fff #000}"));		Assert.assertEquals(			"p{border-color:#000 #111 #222}",			cssRTLConverter.process("p{border-color:#000 #111 #222}"));		Assert.assertEquals(			"p{border-color:#000 #333 #222 #111}",			cssRTLConverter.process("p{border-color:#000 #111 #222 #333}"));		Assert.assertEquals(			"p{border-right-color:#fff}",			cssRTLConverter.process("p{border-left-color:#fff}"));		Assert.assertEquals(			"p{border-left-color:#fff}",			cssRTLConverter.process("p{border-right-color:#fff}"));		Assert.assertEquals(			"p{border-width:0}", cssRTLConverter.process("p{border-width:0}"));		Assert.assertEquals(			"p{border-width:0 1px}",			cssRTLConverter.process("p{border-width:0 1px}"));		Assert.assertEquals(			"p{border-width:0 1px 2px}",			cssRTLConverter.process("p{border-width:0 1px 2px}"));		Assert.assertEquals(			"p{border-width:0 3px 2px 1px}",			cssRTLConverter.process("p{border-width:0 1px 2px 3px}"));	}
@Test    public void populateDecisionTable() {        final GuidedDecisionTable52 dtable = new GuidedDecisionTable52();        final ArrayList<DTCellValue52> row = new ArrayList<>();        final DTCellValue52 rowNumber = new DTCellValue52(1);        final DTCellValue52 description = new DTCellValue52("");        row.add(rowNumber);        row.add(description);        ruleNameBuilder.addCellValue(0, 0, "");        dtable.getData().add(row);        ruleNameBuilder.populateDecisionTable(dtable,                                              1);        assertEquals(3, row.size());        assertEquals(rowNumber, row.get(GuidedDecisionTable52.RULE_NUMBER_INDEX));        assertEquals(description, row.get(GuidedDecisionTable52.RULE_DESCRIPTION_INDEX));    }
@Test  public void testHasPermissionForOrganizationWithoutAccessToFunction() throws Exception {    String content = "" +            "subject.1.name = subject\n" +            "organization.1.name = organization\n" +            "subject.1.permission.1 = function" +            "";    setup(content);    assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("no_access"), createOrganizationIdentifier(1)));    assertFalse(accessController.hasPermission(createCredentials(1), () -> "no_access", createOrganizationIdentifier(1)));  }
@Test	public void testGetDDMFormInstanceRecordWriterDefaultUpperCaseExtension() {		DDMFormInstanceRecordWriterTrackerImpl			ddmFormInstanceRecordWriterTrackerImpl =				new DDMFormInstanceRecordWriterTrackerImpl();		addDDMFormInstanceRecordXMLWriter(			ddmFormInstanceRecordWriterTrackerImpl);		Map<String, String> ddmFormInstanceRecordWriterExtensions =			ddmFormInstanceRecordWriterTrackerImpl.				getDDMFormInstanceRecordWriterExtensions();		Assert.assertEquals(			"XML", ddmFormInstanceRecordWriterExtensions.get("xml"));	}
@Test  public void testSetterInt() throws Exception  {    int intVal = innerObj.intVal;    PojoUtils.createSetterInt(fqcn, "innerObj.intVal").set(testObj, ++intVal);    assertEquals(intVal, innerObj.intVal);    createSetterInt(innerObjClass, "intVal").set(innerObj, ++intVal);    assertEquals(intVal, innerObj.intVal);    createSetterInt(innerObjClass, "protectedIntVal").set(innerObj, ++intVal);    assertEquals(intVal, innerObj.protectedIntVal);    createSetterInt(innerObjClass, "privateIntVal").set(innerObj, ++intVal);    assertEquals(intVal, innerObj.getPrivateIntVal());  }
@Test	public void testProcessSimplePortletFileEntryURL() throws Exception {		DocumentHTMLProcessor documentHTMLProcessor =			new DocumentHTMLProcessor();		String originalHTML = StringBundler.concat(			"<html><head><title>test-title</title></head><body><img src=\"",			"/documents/portlet_file_entry/10766/test-title/f17b2a6b-ae6e-61cf",			"\"/></body></html>");		InputStream originalInputStream = new ByteArrayInputStream(			originalHTML.getBytes());		InputStream processedInputStream = documentHTMLProcessor.process(			originalInputStream);		String processedHTML = IOUtils.toString(processedInputStream, "UTF-8");		String expectedHTML = StringBundler.concat(			"<html><head><title>test-title</title></head><body><img src=\"",			"/documents/portlet_file_entry/10766/test-title/f17b2a6b-ae6e-61cf",			"?auth_token=authtoken\"/></body></html>");		Assert.assertEquals(expectedHTML, processedHTML);	}
@Test    public void testParseNull() {        Boolean[] a1 = ArraysParser.parseArray(Boolean[].class, "[false, null, false]");        String[] a2 = ArraysParser.parseArray(String[].class, "[\"null\", null, 'null', value]");        Assert.assertEquals(new Boolean[] { false, null, false }, a1);        Assert.assertEquals(new String[] { "null", null, "null", "value" }, a2);    }
@Test  public void testBasicIntp() {    assertEquals(InterpreterResult.Code.SUCCESS,        repl.interpret("val a = 1\nval b = 2", context).code());    // when interpret incomplete expression    InterpreterResult incomplete = repl.interpret("val a = \"\"\"", context);    assertEquals(InterpreterResult.Code.INCOMPLETE, incomplete.code());    assertTrue(incomplete.message().length() > 0); // expecting some error                                                   // message    /*     * assertEquals(1, repl.getValue("a")); assertEquals(2, repl.getValue("b"));     * repl.interpret("val ver = sc.version");     * assertNotNull(repl.getValue("ver")); assertEquals("HELLO\n",     * repl.interpret("println(\"HELLO\")").message());     */  }
@Test    public void testHasColumn() {        ColumnStore<Node> columnStore = generateEmptyNodeStore();        IndexImpl<Node> index = columnStore.indexStore.mainIndex;        ColumnImpl col1 = new ColumnImpl("foo", String.class, "foo", null, Origin.DATA, true, false);        ColumnImpl col2 = new ColumnImpl("bar", String.class, "bar", null, Origin.DATA, false, false);        col1.setStoreId(0);        col2.setStoreId(1);        Assert.assertFalse(index.hasColumn(col1));        index.addColumn(col1);        index.addColumn(col2);        Assert.assertTrue(index.hasColumn(col1));        Assert.assertFalse(index.hasColumn(col2));    }
@Test(expected = InvalidCredentialsException.class)  public void testValidateWithCredentialsOfWrongType() throws Exception {    setup("subject.1.name = subject");    accessController.validate(new Credentials() {});  }
@Test	public void testGetTaglibURIsWithComments() throws Exception {		JspAnalyzerPlugin jspAnalyzerPlugin = new JspAnalyzerPlugin();		URL url = getResource("dependencies/imports_with_comments.jsp");		InputStream inputStream = url.openStream();		String content = IO.collect(inputStream);		Set<String> taglibURIs = jspAnalyzerPlugin.getTaglibURIs(content);		Assert.assertNotNull(taglibURIs);		int size = taglibURIs.size();		Assert.assertEquals(3, size);	}
@Test	public void testGetRadioValue() {		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"Radio", new UnlocalizedValue("value 1"));		RadioDDMFormFieldValueAccessor radioDDMFormFieldValueAccessor =			new RadioDDMFormFieldValueAccessor();		Assert.assertEquals(			"value 1",			radioDDMFormFieldValueAccessor.getValue(				ddmFormFieldValue, LocaleUtil.US));	}
@Test  public void testNextLineComments() {    assertEquals(InterpreterResult.Code.SUCCESS, flink.interpret("\"123\"\n/*comment here\n*/.toInt", context).code());  }
@Test    public void localhost() throws Exception {        assumeTrue( InetAddress.getByName( "127.0.0.1" ).isReachable( 5000 ) );        assertEquals( "127.0.0.1", converter.convert( "localhost" ).getHostAddress() );    }
@Test        public void tcBoolean2String_false()        {            String actual = "false";            String expected = "false";            actual = OKW_Helper.Boolean2String(false);            assertEquals( expected, actual);        }
@Test    public void test_lte() {        Assertions.assertTrue(DecimalUtils.lte(BigDecimal.valueOf(100), BigDecimal.valueOf(123)));        Assertions.assertTrue(DecimalUtils.lte(BigDecimal.valueOf(100), BigDecimal.valueOf(100)));        Assertions.assertFalse(DecimalUtils.lte(BigDecimal.valueOf(123), BigDecimal.valueOf(100)));    }
@Test  public void equalsAndHashCodeTest()  {    DimensionsDescriptor ddA = new DimensionsDescriptor(new CustomTimeBucket(TimeBucket.MINUTE, 5L),        new Fields(Sets.newHashSet("a", "b")));    DimensionsDescriptor ddB = new DimensionsDescriptor(new CustomTimeBucket(TimeBucket.MINUTE, 5L),        new Fields(Sets.newHashSet("a", "b")));    Assert.assertTrue(ddB.equals(ddA));  }
@Test    public void testDeleteMetaDataColumnAnchor() {        final DeleteColumnManagementAnchorWidget expectedWidget = mock(DeleteColumnManagementAnchorWidget.class);        final String columnHeader = "columnHeader";        final Command command = mock(Command.class);        doReturn(columnHeader).when(metadataColumn).getMetadata();        doReturn(expectedWidget).when(deleteColumnManagementAnchorWidgets).get();        doReturn(command).when(presenter).deleteMetadataCommand(modeller, metadataColumn);        final DeleteColumnManagementAnchorWidget actualWidget = presenter.deleteMetaDataColumnAnchor(modeller, metadataColumn);        verify(actualWidget).init(columnHeader, command);        assertEquals(expectedWidget, actualWidget);    }
@Test  public void testPropertiesWithAllProperties() {    Vertex vertex = createVertex();    assertTrue(vertex.properties().hasNext());  }
@Test(expectedExceptions = UnsupportedOperationException.class)    public void testMinValueNoNumber() {        IndexImpl<Node> index = generateEmptyIndex();        index.getMinValue(index.columnStore.getColumn("foo"));    }
@Test	public void testCompileFileSassSpec() throws Exception {		try (SassCompiler sassCompiler = new RubySassCompiler()) {			File sassSpecDir = new File(				"../sass-compiler-jni/test-classes/unit/com/liferay/sass" +					"/compiler/jni/internal/dependencies/sass-spec");			for (File testDir : sassSpecDir.listFiles()) {				File inputFile = new File(testDir, "input.scss");				String dirName = testDir.getName();				if (!inputFile.exists() || dirName.endsWith("-4.0")) {					continue;				}				String actualOutput = sassCompiler.compileFile(					inputFile.getCanonicalPath(), "", false);				Assert.assertNotNull("Testing: " + dirName, actualOutput);				File expectedOutputFile = new File(					testDir, "expected_output.css");				String expectedOutput = read(expectedOutputFile.toPath());				Assert.assertEquals(					"Testing: " + dirName, stripNewLines(expectedOutput),					stripNewLines(actualOutput));			}		}	}
@Test	public void testEmptyArray() {		MaxFunction maxFunction = new MaxFunction();		BigDecimal result = maxFunction.apply(new BigDecimal[0]);		Assert.assertEquals(BigDecimal.ZERO, result);	}
@Test    public void priorityNoExclusive() {        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.PRIORITY_NO_EXCLUSIVE_MODE_BUFFER);        Http2PriorityFrame frame = (Http2PriorityFrame) decoder.decode(buffer, context);        assertNotNull(frame);        assertEquals(5, frame.getLength());        assertEquals(2, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(32, frame.getStreamID());        assertEquals(256, frame.getStreamDependencyID());        assertFalse(frame.getExclusiveMode());        assertEquals(2, frame.getWeight());    }
@Test  public void testQueryStringParsing() {    String policyValue = "{policy:'value'}";    String signatureValue = "randomString";    String queryString = "?" + ResourceRequest.POLICY_KEY + "=" + policyValue + "&" + ResourceRequest.SIGNATURE_KEY            + "=" + signatureValue + "&" + ResourceRequest.ENCRYPTION_ID_KEY + "=" + keyId;    List<NameValuePair> parameters = ResourceRequestUtil.parseQueryString(queryString);    boolean foundOrg = false;    boolean foundPolicy = false;    boolean foundSignature = false;    for (NameValuePair nameValuePair : parameters) {      if (ResourceRequest.ENCRYPTION_ID_KEY.equals(nameValuePair.getName())) {        assertEquals(keyId, nameValuePair.getValue());        foundOrg = true;      }      if (ResourceRequest.POLICY_KEY.equals(nameValuePair.getName())) {        assertEquals(policyValue, nameValuePair.getValue());        foundPolicy = true;      }      if (ResourceRequest.SIGNATURE_KEY.equals(nameValuePair.getName())) {        assertEquals(signatureValue, nameValuePair.getValue());        foundSignature = true;      }    }    assertTrue("Didn't find the organization value.", foundOrg);    assertTrue("Didn't find the policy value.", foundPolicy);    assertTrue("Didn't find the signature value.", foundSignature);  }
@Test public void testStartActionMode() {		// Arrange:		final ActionBarFragment fragment = new TestFragment();		final ActivityDelegate mockActivityDelegate = mock(ActivityDelegate.class);		final ActionMode mockActionMode = mock(ActionMode.class);		when(mockActivityDelegate.startActionMode(any(ActionMode.Callback.class))).thenReturn(mockActionMode);		fragment.activityDelegate = mockActivityDelegate;		// Act + Assert:		assertThat(fragment.startActionMode(), is(true));		assertThat(fragment.isInActionMode(), is(true));		assertThat(fragment.getActionMode(), is(mockActionMode));	}
@Test    public void oneCM() {        Assert.assertEquals(RxComprehensions.doConcatMap(zero(1), one(true)).blockingFirst(), true);    }
@Test    public void testGetConventionallyNamedBean() {        final AbstractSpringResourceBuilder<ContentBean> builder = new AbstractSpringResourceBuilder<ContentBean>(                                                                                                                   workspace,                                                                                                                   "test" ) {            @Override            public ContentBean build() {                return getBean( ContentBean.class, null, "contentBean" );            }        };        final ContentBean bean = builder.build();        assertNotNull( bean );        assertEquals( "contentBean", bean.getContent() );    }
@Test(expected = IllegalArgumentException.class)    public void testInvalid() throws Exception {        BundleInfo.fromKey("article");    }
@Test(description = "This test case tests adding new profile features to a non existent profile",          dependsOnMethods = "testAddProfileFeatures",          expectedExceptions = {FeatureManagementException.class})    public void testAddProfileFeaturesThrowingFeatureManagementException() throws Exception {        Profile profile = ProfileCreator.getProfile(FeatureCreator.getFeatureList(), DEVICE_TYPE_D);        int nonExistentProfileId = 9999;        //Adding profile        featureManager.addProfileFeatures(profile.getProfileFeaturesList(), nonExistentProfileId);    }
@Test(expected = RuntimeException.class)  public void testIfThenError() {    some("200a").map(ifThen("none", "-1")).bind(Strings.toInt).orError(new RuntimeException());  }
@Test  public void testSetMaxMetrics() {    taskMonitor.setMaxMetrics(TaskMonitor.AVG_GPU_FB_MEMORY_USAGE_INDEX, 0.1);    taskMonitor.numRefreshes++;    taskMonitor.setMaxMetrics(TaskMonitor.AVG_GPU_FB_MEMORY_USAGE_INDEX, 0.4);    taskMonitor.numRefreshes++;    taskMonitor.setMaxMetrics(TaskMonitor.AVG_GPU_FB_MEMORY_USAGE_INDEX, 0.2);    MetricsWritable metrics = taskMonitor.getMetrics();    Assert.assertEquals(metrics.getMetric(TaskMonitor.AVG_GPU_FB_MEMORY_USAGE_INDEX).getValue(), 0.4);  }
@Test    public void asWidget() {        ((ScenarioSimulationDropdown) assetsDropdown).asWidget();        verify(((ScenarioSimulationDropdownView) viewMock), times(1)).asWidget();    }
@Test(description = "This test case tests handling ProfileManagerDAOException when deleting a profile",          dependsOnMethods = "testGetProfilesOfDeviceTypeThrowingIllegalTransactionStateException")    public void testDeleteProfileThrowingProfileManagerDAOException() throws Exception {        ProfileDAO profileDAO = mock(ProfileDAOImpl.class);        when(profileDAO.deleteProfile(any(Profile.class))).thenThrow(new ProfileManagerDAOException());        testThrowingException(profileManager, profile1, p -> profileManager.deleteProfile(profile1), "profileDAO",                              profileDAO,                              ProfileManagerDAOException.class);    }
@Test	public void testRuleConditionWithNestedFunctions() throws Exception {		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		ddmForm.addDDMFormField(			createDDMFormField("field0", "numeric", FieldConstants.DOUBLE));		ddmForm.addDDMFormField(			createDDMFormField("field1", "numeric", FieldConstants.DOUBLE));		ddmForm.addDDMFormRule(			new DDMFormRule(				"equals(sum(getValue('field0'), 10), 28)",				"setValue('field1', getValue('field0'))"));		DDMFormValues ddmFormValues = DDMFormValuesTestUtil.createDDMFormValues(			ddmForm);		ddmFormValues.addDDMFormFieldValue(			DDMFormValuesTestUtil.createDDMFormFieldValue(				"field0_instanceId", "field0", new UnlocalizedValue("18")));		ddmFormValues.addDDMFormFieldValue(			DDMFormValuesTestUtil.createDDMFormFieldValue(				"field1_instanceId", "field1", new UnlocalizedValue("")));		DDMFormEvaluatorEvaluateResponse ddmFormEvaluatorEvaluateResponse =			doEvaluate(ddmForm, ddmFormValues);		Map<DDMFormEvaluatorFieldContextKey, Map<String, Object>>			ddmFormFieldsPropertyChanges =				ddmFormEvaluatorEvaluateResponse.					getDDMFormFieldsPropertyChanges();		Map<String, Object> ddmFormFieldPropertyChanges =			ddmFormFieldsPropertyChanges.get(				new DDMFormEvaluatorFieldContextKey(					"field1", "field1_instanceId"));		Assert.assertEquals(			new BigDecimal(18), ddmFormFieldPropertyChanges.get("value"));	}
@Test	public void testLessThanOrEquals2() throws Exception {		DDMExpressionImpl<Boolean> ddmExpressionImpl = createDDMExpression(			"1.9 <= 1.89");		Assert.assertFalse(ddmExpressionImpl.evaluate());	}
@Test(expected = RuntimeException.class)  public void testCreateTiServiceEventWithoutEvent() {    TiServiceEvent.forEvent(null)            .setOrganization(UUID.randomUUID())            .setAccessMode(no.mnemonic.act.platform.api.model.v1.AccessMode.Public)            .build();  }
@Test	public void testMatchMatchesWholeChunksOnly() throws Exception {		ScopeMatcherFactory chunkScopeMatcherFactory =			new ChunkScopeMatcherFactory();		ScopeMatcher scopeMatcher = chunkScopeMatcherFactory.create(			"everything");		Assert.assertFalse(scopeMatcher.match("everything2.readonly"));		Assert.assertFalse(scopeMatcher.match("everything2"));	}
@Test    public void generateMnemonicShouldGenerateExpectedMnemonicWords() {        String actualMnemonic = MnemonicUtils.generateMnemonic(initialEntropy);        assertEquals(mnemonic, actualMnemonic);    }
@Test    void testEmptyManifestSize() {        CentralizedManifest manifest = new CentralizedManifest();        Assertions.assertEquals(0, manifest.size());    }
@Test	public void testGetPort() throws MalformedURLException {		OASURLParser oasURLParser = new OASURLParser(OPEN_API_URL);		Assert.assertEquals("8080", oasURLParser.getPort());	}
@Test	public void testFormExtraction() {		// input form		String script = "${input_form=}";		Map<String, Input> forms = Input.extractSimpleQueryParam(script);		assertEquals(1, forms.size());		Input form = forms.get("input_form");		assertEquals("input_form", form.name);		assertNull(form.displayName);		assertEquals("", form.defaultValue);		assertNull(form.options);		// input form with display name & default value		script = "${input_form(Input Form)=xxx}";		forms = Input.extractSimpleQueryParam(script);		form = forms.get("input_form");		assertEquals("xxx", form.defaultValue);		// selection form		script = "${select_form(Selection Form)=op1,op1|op2(Option 2)|op3}";		form = Input.extractSimpleQueryParam(script).get("select_form");		assertEquals("select_form", form.name);		assertEquals("op1", form.defaultValue);		assertArrayEquals(new ParamOption[]{new ParamOption("op1", null),				new ParamOption("op2", "Option 2"), new ParamOption("op3", null)}, form.options);		// checkbox form		script = "${checkbox:checkbox_form=op1,op1|op2|op3}";		form = Input.extractSimpleQueryParam(script).get("checkbox_form");		assertEquals("checkbox_form", form.name);		assertEquals("checkbox", form.type);		assertArrayEquals(new Object[]{"op1"}, (Object[]) form.defaultValue);		assertArrayEquals(new ParamOption[]{new ParamOption("op1", null),				new ParamOption("op2", null), new ParamOption("op3", null)}, form.options);		// checkbox form with multiple default checks		script = "${checkbox:checkbox_form(Checkbox Form)=op1|op3,op1(Option 1)|op2|op3}";		form = Input.extractSimpleQueryParam(script).get("checkbox_form");		assertEquals("checkbox_form", form.name);		assertEquals("Checkbox Form", form.displayName);		assertEquals("checkbox", form.type);		assertArrayEquals(new Object[]{"op1", "op3"}, (Object[]) form.defaultValue);		assertArrayEquals(new ParamOption[]{new ParamOption("op1", "Option 1"),				new ParamOption("op2", null), new ParamOption("op3", null)}, form.options);		// checkbox form with no default check		script = "${checkbox:checkbox_form(Checkbox Form)=,op1(Option 1)|op2(Option 2)|op3(Option 3)}";		form = Input.extractSimpleQueryParam(script).get("checkbox_form");		assertEquals("checkbox_form", form.name);		assertEquals("Checkbox Form", form.displayName);		assertEquals("checkbox", form.type);		assertArrayEquals(new Object[]{}, (Object[]) form.defaultValue);		assertArrayEquals(new ParamOption[]{new ParamOption("op1", "Option 1"),				new ParamOption("op2", "Option 2"), new ParamOption("op3", "Option 3")}, form.options);	}
@Test    public void commonUndoRedoPreexecutionDifferentGridSIMULATION() {        when(backgroundGridWidgetSpy.isSelected()).thenReturn(true);        when(scenarioGridWidgetSpy.isSelected()).thenReturn(false);        commandSpy.gridWidget = GridWidget.SIMULATION;        final Optional<CommandResult<ScenarioSimulationViolation>> retrieved = commandSpy.commonUndoRedoPreexecution(scenarioSimulationContextLocal);        assertTrue(retrieved.isPresent());        assertEquals(CommandResult.Type.INFO, retrieved.get().getType());        verify(scenarioGridPanelMock, times(1)).onResize();        verify(scenarioGridPanelMock, times(1)).select();    }
@Test  public void getDifficultyTargetTest() {    final byte[] min = new byte[] { 0x1D & 0xFF, 0x00 & 0xFF, (byte) (0xFF & 0xFF), (byte) (0xFF & 0xFF)};    final byte[] spec = new byte[] { 0x1B & 0xFF, 0x04 & 0xFF, (byte) (0x04 & 0xFF), (byte) (0xCB & 0xFF)};    final byte[] dev = new byte[] { 0x18 & 0xFF, 0x1B & 0xFF, (byte) (0xC3 & 0xFF), (byte) (0x30 & 0xFF)};    final byte[] minDiff = BlockUtil.getDifficultyTarget(min);    final byte[] specDiff = BlockUtil.getDifficultyTarget(spec);    final byte[] devDiff = BlockUtil.getDifficultyTarget(dev);    Assert.assertEquals(0x00 & 0xFF, minDiff[0] & 0xFF);    Assert.assertEquals(0xFF & 0xFF, minDiff[1] & 0xFF);    Assert.assertEquals(0xFF & 0xFF, minDiff[2] & 0xFF);    Assert.assertEquals(0x00 & 0xFF, minDiff[0] & 0xFF);    Assert.assertEquals(min[0] & 0xFF, minDiff.length);    Assert.assertEquals(spec[0] & 0xFF, specDiff.length);    Assert.assertEquals(dev[0] & 0xFF, devDiff.length);  }
@Test    public void selectBackgroundTab() {        presenterSpy.selectBackgroundTab();        verify(scenarioSimulationEditorWrapperMock, times(1)).selectBackgroundTab();    }
@Test    public void checkConstantMapping() throws Exception {        ElasticsearchQuery esQuery = new ElasticsearchQuery(null, null, null);        Map<String, Object> source = new HashMap<>();        String value = esQuery.getField(source, "test");        assertTrue(value.isEmpty());        value = esQuery.getField(source, "'value'");        assertEquals("value", value);        value = esQuery.getField(source, "test|'value'");        assertEquals("value", value);        source.put("test", "newvalue");        value = esQuery.getField(source, "test|'value'");        assertEquals("newvalue", value);        Map<String, Object> test = new HashMap<>();        test.put("propA", "valueA");        test.put("propB", "valueB");        source.put("test", test);        value = esQuery.getField(source, "test|'value'");        assertEquals("value", value);        value = esQuery.getField(source, "|'value'");        assertEquals("value", value);        value = esQuery.getField(source, "test.propA|'value'");        assertEquals("valueA", value);        value = esQuery.getField(source, "test.propB|'value'");        assertEquals("valueB", value);    }
@Test    public void test_V110_EXAMPLE_1()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE_1 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        List<Query> queries = getFeature.getQueries();        assertEquals( ( (FilterQuery) queries.get( 0 ) ).getTypeNames()[0].getFeatureTypeName(),                      new QName( "InWaterA_1M" ) );    }
@Test	public void testOnDeactivationClearsJournalCache() throws Exception {		_amJournalTransformerListener.deactivate();		Mockito.verify(			_journalContent, Mockito.times(1)		).clearCache();	}
@Test    public void shouldAddExpenseIfConversionInformationIsConsistent() throws Exception {        final Nobt nobt = aNobt()                .withCurrency(new CurrencyKey("EUR"))                .build();        final ExpenseDraft expenseDraft = anExpenseDraft()                .withConversionInformation(new ConversionInformation(new CurrencyKey("USD"), BigDecimal.TEN))                .build();        nobt.createExpenseFrom(expenseDraft);    }
@Test  public void locationNotExistTest() throws IOException {    InterpreterResult output = alluxioInterpreter.interpret("location /NotExistFile", null);    Assert.assertEquals(ExceptionMessage.PATH_DOES_NOT_EXIST.getMessage("/NotExistFile") + "\n",            output.message());    Assert.assertEquals(Code.ERROR, output.code());  }
@Test	public void testDistinctOutput() {		Assert.assertEquals(			"hello world",			CSSClassNames.builder(				"hello", "hello", "world", "world"			).build());		Assert.assertEquals(			"hello world",			CSSClassNames.builder(				"hello"			).add(				"hello"			).add(				"world"			).add(				"world"			).build());	}
@Test    public void evaluatePeriodInstant() {        assertFalse( after.evaluate( period( "2014-01-01T00:00:01", "2014-01-01T00:00:01" ),                                     instant( "2014-01-01T00:00:01" ) ) );        assertFalse( after.evaluate( period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ),                                     instant( "2014-01-01T00:00:01" ) ) );        assertFalse( after.evaluate( period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ),                                     instant( "2014-01-01T00:00:02" ) ) );        assertFalse( after.evaluate( period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ),                                     instant( "2014-01-01T00:00:03" ) ) );        assertFalse( after.evaluate( period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ),                                     instant( "2014-01-01T00:00:04" ) ) );        assertTrue( after.evaluate( period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ),                                    instant( "2014-01-01T00:00:00" ) ) );    }
@Test	public void testDoGetDataServiceUnavailable() throws Exception {		DDMDataProviderInstanceService ddmDataProviderInstanceService = mock(			DDMDataProviderInstanceService.class);		_ddmRESTDataProvider.ddmDataProviderInstanceService =			ddmDataProviderInstanceService;		when(			ddmDataProviderInstanceService.fetchDataProviderInstanceByUuid("id")		).thenReturn(			null		);		DDMDataProviderRequest.Builder builder =			DDMDataProviderRequest.Builder.newBuilder();		DDMDataProviderRequest ddmDataProviderRequest =			builder.withDDMDataProviderId(				"id"			).build();		DDMDataProviderResponse ddmDataProviderResponse =			_ddmRESTDataProvider.doGetData(ddmDataProviderRequest);		Assert.assertEquals(			DDMDataProviderResponseStatus.SERVICE_UNAVAILABLE,			ddmDataProviderResponse.getStatus());	}
@Test(expected = ClassCastException.class)	public void testObtainHandlerOfDifferentType() {		// Arrange:		AnnotationHandlers.obtainHandler(Handler.class, AnnotatedComponent.class);		// Act:		AnnotationHandlers.obtainHandler(SecondHandler.class, AnnotatedComponent.class);	}
@Test    public void testSessionInfoOnSave() {        service.save( path,                      inputstream,                      sessionId,                      comment );        final CommentedOption commentedOption = commentedOptionArgumentCaptor.getValue();        assertNotNull( commentedOption );        assertEquals( "user",                      commentedOption.getName() );        assertEquals( "123",                      commentedOption.getSessionId() );    }
@Test    public void testGetFirstDayOfCurrentMonthNotIn() throws Exception {        assertNull(mMonth.getFirstDateOfCurrentMonth(LocalDate.parse("2014-09-30")));    }
@Test  public void testToEntityWithFullRecord() {    UUID factID = UUID.randomUUID();    FactCommentRecord record = new FactCommentRecord()            .setId(UUID.randomUUID())            .setReplyToID(UUID.randomUUID())            .setOriginID(UUID.randomUUID())            .setComment("Hello World!")            .setTimestamp(123456789L);    FactCommentEntity entity = converter.toEntity(record, factID);    assertNotNull(entity);    assertEquals(factID, entity.getFactID());    assertEquals(record.getId(), entity.getId());    assertEquals(record.getReplyToID(), entity.getReplyToID());    assertEquals(record.getOriginID(), entity.getOriginID());    assertEquals(record.getComment(), entity.getComment());    assertEquals(record.getTimestamp(), entity.getTimestamp());  }
@Test    public void checkOnSourceTabSelected() {        final String source = "source";        final ObservablePath path = mock(ObservablePath.class);        final PlaceRequest placeRequest = mock(PlaceRequest.class);        final GuidedDecisionTableEditorContent content = makeDecisionTableContent();        final GuidedDecisionTableView.Presenter dtPresenter = makeDecisionTable(path,                                                                                path,                                                                                placeRequest,                                                                                content);        when(dtService.toSource(eq(path),                                any(GuidedDecisionTable52.class))).thenReturn(source);        presenter.onSourceTabSelected(dtPresenter);        final ArgumentCaptor<GuidedDecisionTable52> modelCaptor = ArgumentCaptor.forClass(GuidedDecisionTable52.class);        verify(dtService,               times(1)).toSource(eq(path),                                  modelCaptor.capture());        assertNotNull(modelCaptor.getValue());        assertEquals(dtPresenter.getModel(),                     modelCaptor.getValue());        verify(presenter,               times(1)).updateSource(eq(source));    }
@Test    public void testSetPropertyInt() {        final DataSourceMock ds = new DataSourceMock();        final Property property = new Property();        property.setName( "intProperty" );        property.setValue( "4711" );        initializer.setProperty( ds, property );        Assert.assertEquals( 4711, ds.getIntProperty() );    }
@Test	public void testApplyFalse() {		ContainsFunction containsFunction = new ContainsFunction();		Boolean result = containsFunction.apply("liferay", "forms");		Assert.assertFalse(result);	}
@Test	public void testContainsNullEmailAddress() {		Assert.assertFalse(			InternetAddressUtil.contains(_internetAddresses, null));	}
@Test	public void testValidCreateUser(){				assertEquals(user, userService.createUser(user));	}
@Test(description = "This test case tests the getDevcie method of the DeviceTypeManager", dependsOnMethods =            {"testEnrollDevice"})    public void testGetDevice() throws DeviceManagementException {        DeviceIdentifier existingDeviceIdntifier = new DeviceIdentifier(sampleDevice2.getDeviceIdentifier(),                androidDeviceType);        Assert.assertNull(androidDeviceTypeManager.getDevice(nonExistingDeviceIdentifier),                "Non existing sampleDevice was retrieved");        Assert.assertNotNull(androidDeviceTypeManager.getDevice(existingDeviceIdntifier),                "Existing sampleDevice was not retrieved");        Device customDevice1 = customDeviceTypeManager                .getDevice(new DeviceIdentifier(customDeviceType, customDeviceType));        Assert.assertEquals(customDevice1.getProperties().size(), 2,                "GetDevice call" + " failed in custom deviceTypeManager");    }
@Test    public void testSetupAccordionWidget() {        final VerticalPanel defaultPanel = mock(VerticalPanel.class);        final GuidedDecisionTableAccordionItem.Type accordionType = METADATA;        final Consumer<VerticalPanel> setWidget = (panel) -> assertEquals(panel, defaultPanel);        doReturn(defaultPanel).when(presenter).makeDefaultPanel();        presenter.setupAccordionWidget(accordionType, setWidget);        verify(accordion).addItem(accordionType, defaultPanel);    }
@Test	public void testApply() {		SetPropertyFunction<Boolean> setPropertyFunction =			new SetMultipleFunction();		DefaultDDMExpressionObserver defaultDDMExpressionObserver =			new DefaultDDMExpressionObserver();		DefaultDDMExpressionObserver spy = spy(defaultDDMExpressionObserver);		setPropertyFunction.setDDMExpressionObserver(spy);		Boolean result = setPropertyFunction.apply("field", true);		ArgumentCaptor<UpdateFieldPropertyRequest> argumentCaptor =			ArgumentCaptor.forClass(UpdateFieldPropertyRequest.class);		Mockito.verify(			spy, Mockito.times(1)		).updateFieldProperty(			argumentCaptor.capture()		);		Assert.assertTrue(result);		UpdateFieldPropertyRequest updateFieldPropertyRequest =			argumentCaptor.getValue();		Map<String, Object> properties =			updateFieldPropertyRequest.getProperties();		Assert.assertEquals("field", updateFieldPropertyRequest.getField());		Assert.assertTrue(properties.containsKey("multiple"));		Assert.assertTrue((boolean)properties.get("multiple"));	}
@Test(dataProvider = "wiggleArray")    public void test(int[] wiggles, int len) {        assertEquals(new WiggleSubsequence().wiggleMaxLength(wiggles), len);    }
@Test    public void testNameOverrideSystemProperty() throws IOException, ServletException {        System.setProperty(SegmentNamingStrategy.NAME_OVERRIDE_SYSTEM_PROPERTY_KEY, "pass");        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter("fail");        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(false);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mock(FilterChain.class);        servletFilter.doFilter(request, response, chain);        ArgumentCaptor<Segment> emittedSegment = ArgumentCaptor.forClass(Segment.class);        verify(AWSXRay.getGlobalRecorder().getEmitter(), Mockito.times(1)).sendSegment(emittedSegment.capture());        Assert.assertEquals("pass", emittedSegment.getValue().getName());    }
@Test    public void getDownloadUrl() {        final Path path = mock(Path.class);        when(path.toURI()).thenReturn("default://master@MySpace/Mortgages/src/main/resources/a & b.drl");        final String downloadUrl = URLHelper.getDownloadUrl(path, "clientId");        assertEquals("dtablexls/file?clientId=clientId&attachmentPath=default%3A%2F%2Fmaster%40MySpace%2FMortgages%2Fsrc%2Fmain%2Fresources%2Fa+%26+b.drl", downloadUrl);    }
@Test    public void onRuleClick() {        ruleButtonMock.checked = true;        scenarioSimulationCreationPopupViewSpy.onRuleClick(clickEventMock);        verify(dmnAssetsDivElementMock, times(1)).setAttribute(eq(ConstantHolder.HIDDEN), eq(""));        verify(okButtonMock, times(1)).setEnabled(eq(true));        assertEquals(ScenarioSimulationModel.Type.RULE, scenarioSimulationCreationPopupViewSpy.getSelectedType());    }
@Test  public void testMatchesDirectionUniDir() {    ObjectRecord objectA = new ObjectRecord().setId(UUID.randomUUID());    ObjectRecord objectB = new ObjectRecord().setId(UUID.randomUUID());    // objectA -- fact --> objectB    FactRecord aToBFact = new FactRecord()            .setId(UUID.randomUUID())            .setSourceObject(objectA)            .setDestinationObject(objectB);    assertTrue(ObjectVertex.matchesDirection(aToBFact, objectA, OUT));    assertFalse(ObjectVertex.matchesDirection(aToBFact, objectA, IN));    assertTrue(ObjectVertex.matchesDirection(aToBFact, objectA, BOTH));    // objectA <-- fact -- objectB    FactRecord bToAFact = new FactRecord()            .setId(UUID.randomUUID())            .setSourceObject(objectB)            .setDestinationObject(objectA);    assertFalse(ObjectVertex.matchesDirection(bToAFact, objectA, OUT));    assertTrue(ObjectVertex.matchesDirection(bToAFact, objectA, IN));    assertTrue(ObjectVertex.matchesDirection(bToAFact, objectA, BOTH));  }
@Test  public void testfootprints() throws Exception {    FootprintList list = getFootprintList("mp", null, 1);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    list = getFootprintList("mp", "me", 1);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    //Create the initial viewer/user event    createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session123", "mp", "me", "127.0.0.1", 10, 20);    //Sanity checks    Assert.assertEquals(1, service.getViews("mp"));    Assert.assertEquals(0, service.getViews("other"));    //Assert that the correct things are in the correct places.    list = getFootprintList("mp", null, 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 20, 0);    list = getFootprintList("mp", "someone else", 1);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    list = getFootprintList("mp", "me", 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 20, 0);    //Create a different viewer/user event    createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session456", "mp", "someone else", "127.0.01", 560, 720);    //Sanity checks    Assert.assertEquals(2, service.getViews("mp"));    Assert.assertEquals(0, service.getViews("other"));    //Assert that the correct things are in the correct places.    list = getFootprintList("mp", null, 5);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 20, 0);    verifyFootprintViewsAndPositions(list, 3, 560, 1);    verifyFootprintViewsAndPositions(list, 4, 720, 0);    list = getFootprintList("mp", "someone else", 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 560, 1);    verifyFootprintViewsAndPositions(list, 2, 720, 0);    list = getFootprintList("mp", "me", 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 20, 0);    //Update the first viewer/user event    createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session123", "mp", "me", "127.0.0.1", 20, 30);    //Sanity checks    Assert.assertEquals(2, service.getViews("mp"));    Assert.assertEquals(0, service.getViews("other"));    //Assert that the correct things are in the correct places.    list = getFootprintList("mp", null, 5);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 30, 0);    verifyFootprintViewsAndPositions(list, 3, 560, 1);    verifyFootprintViewsAndPositions(list, 4, 720, 0);    list = getFootprintList("mp", "someone else", 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 560, 1);    verifyFootprintViewsAndPositions(list, 2, 720, 0);    list = getFootprintList("mp", "me", 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 30, 0);    //Skip the second viewer to a new point in the video    createAndVerifyUserAction(UserTrackingServiceImpl.FOOTPRINT_KEY, "session456", "mp", "someone else", "127.0.01", 950, 960);    //Sanity checks    Assert.assertEquals(2, service.getViews("mp"));    Assert.assertEquals(0, service.getViews("other"));    //Assert that the correct things are in the correct places.    list = getFootprintList("mp", null, 7);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 30, 0);    verifyFootprintViewsAndPositions(list, 3, 560, 1);    verifyFootprintViewsAndPositions(list, 4, 720, 0);    verifyFootprintViewsAndPositions(list, 5, 950, 1);    verifyFootprintViewsAndPositions(list, 6, 960, 0);    list = getFootprintList("mp", "someone else", 5);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 560, 1);    verifyFootprintViewsAndPositions(list, 2, 720, 0);    verifyFootprintViewsAndPositions(list, 3, 950, 1);    verifyFootprintViewsAndPositions(list, 4, 960, 0);    list = getFootprintList("mp", "me", 3);    verifyFootprintViewsAndPositions(list, 0, 0, 0);    verifyFootprintViewsAndPositions(list, 1, 10, 1);    verifyFootprintViewsAndPositions(list, 2, 30, 0);  }
@Test  public void testGetReturnsRegexValidator() {    DefaultValidatorFactory factory = new DefaultValidatorFactory();    assertTrue(factory.get("RegexValidator", "pattern") instanceof RegexValidator);  }
@Test	public void testToDDMFormWithNullDataDefinition() {		Assert.assertEquals(			new DDMForm(),			DataDefinitionUtil.toDDMForm(				null, _ddmFormFieldTypeServicesTracker));	}
@Test    public void getExtension() throws Exception {        assertNull(FilenameUtils.getExtension(null));        assertNull(FilenameUtils.getExtension(""));        assertNull(FilenameUtils.getExtension("/b/c"));        assertNull(FilenameUtils.getExtension("/b.rtl/c"));        assertEquals("gif", FilenameUtils.getExtension("/b.rtl/c.gif"));    }
@Test    public void settings() {        Http2Frame frame = TestMessages.SETTINGS_DEFAULT_FRAME;        assertArrayEquals(TestMessages.SETTINGS_DEFAULT_BUFFER, toByteArray(encoder.encode(frame, null)));    }
@Test	public void testAutosaveWithNondefaultUser3() throws Exception {		RenderRequest renderRequest =			mockRenderRequestAutosaveWithNondefaultUser();		DDMFormInstanceSettings ddmFormInstanceSettings =			mockDDMFormInstanceSettingsAutosaveWithNondefaultUser();		when(			ddmFormInstanceSettings.autosaveEnabled()		).thenReturn(			Boolean.TRUE		);		when(			_ddmFormWebConfiguration.autosaveInterval()		).thenReturn(			0		);		DDMFormDisplayContext ddmFormDisplayContext =			createDDMFormDisplayContext(renderRequest);		Assert.assertEquals(false, ddmFormDisplayContext.isAutosaveEnabled());	}
@Test  public void testHigherLimitThanSources() {    smartIterator = new SmartIterator(10, 0);    Map<String, Object> unfilteredList = createMap(5);    Map<String, Object> filteredList = smartIterator.applyLimitAndOffset(unfilteredList);    assertMapContainsOnly(filteredList, 0, 1, 2, 3, 4);  }
@Test	public void testHashCodeWithDifferentClassName() {		InfoItemReference infoItemReference1 = new InfoItemReference(			"className1", 12354L);		InfoItemReference infoItemReference2 = new InfoItemReference(			"className2", 12354L);		Assert.assertNotEquals(			infoItemReference1.hashCode(), infoItemReference2.hashCode());	}
@Test    public void testGetDirectedGraph() {        GraphStore graphStore = GraphGenerator.generateSmallGraphStore();        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view = store.createView();        DirectedSubgraph directedSubgraph = store.getDirectedGraph(view);        Assert.assertNotNull(directedSubgraph);        Assert.assertSame(view, directedSubgraph.getView());        UndirectedSubgraph undirectedSubgraph = store.getUndirectedGraph(view);        Assert.assertNotNull(undirectedSubgraph);        Assert.assertSame(view, undirectedSubgraph.getView());    }
@Test    public void testDeepHashCode() {        TableImpl<Node> table1 = new TableImpl<Node>(Node.class, false);        table1.addColumn("Id", Integer.class);        TableImpl<Node> table2 = new TableImpl<Node>(Node.class, false);        table2.addColumn("Id", Integer.class);        Assert.assertEquals(table1.deepHashCode(), table2.deepHashCode());    }
@Test	public void testCloseWithTwoExceptions() throws IOException {		IOException ioException1 = new IOException();		IOException ioException2 = new IOException();		UnsyncFilterOutputStream unsyncFilterOutputStream =			new UnsyncFilterOutputStream(				new TestOutputStream() {					@Override					public void close() throws IOException {						throw ioException2;					}					@Override					public void flush() throws IOException {						throw ioException1;					}				});		try {			unsyncFilterOutputStream.close();			Assert.fail();		}		catch (IOException ioException3) {			Assert.assertSame(ioException1, ioException3);			Throwable[] throwables = ioException1.getSuppressed();			Assert.assertEquals(				Arrays.toString(throwables), 1, throwables.length);			Assert.assertSame(ioException2, throwables[0]);		}	}
@Test	public void testReadInvalidRow() throws Exception {		try (JSONLBatchEngineImportTaskItemReader				jsonlBatchEngineImportTaskItemReader =					_getJSONLBatchEngineImportTaskItemReader(						_FIELD_NAMES,						new Object[][] {							{								null, "\"sample description\"", 1,								"{\"en\": \"sample name\", \"hr\": \"naziv\"}",								"\"unknown column\""							}						})) {			try {				validate(					createDateString, "sample description", null,					Collections.emptyMap(),					jsonlBatchEngineImportTaskItemReader.read(),					HashMapBuilder.put(						"en", "sample name"					).put(						"hr", "naziv"					).build());				Assert.fail();			}			catch (NoSuchFieldException noSuchFieldException) {			}		}	}
@Test    public void testWMSCapabilitiesHasLayerUnknown()                            throws XMLStreamException {        WMSCapabilitiesAdapter capabilities = createCapabilities();        assertFalse( capabilities.hasLayer( "Unknown Layer" ) );    }
@Test  public void catTest() throws IOException {    FileSystemTestUtils.createByteFile(fs, "/testFile", WriteType.MUST_CACHE,            10, 10);    InterpreterResult output = alluxioInterpreter.interpret("cat /testFile", null);    byte[] expected = BufferUtils.getIncreasingByteArray(10);    Assert.assertEquals(Code.SUCCESS, output.code());    Assert.assertArrayEquals(expected,            output.message().substring(0, output.message().length() - 1).getBytes());  }
@Test	public void testValidateConfigurationInvalidColorPaletteFieldDefaultValueCssClassMissing()		throws Exception {		expectedException.expect(FragmentEntryConfigurationException.class);		expectedException.expectMessage(			new StringContains(				"/fieldSets/0/fields/0/defaultValue: required key [cssClass] " +					"not found"));		_fragmentEntryValidatorImpl.validateConfiguration(			_read(				"configuration_invalid_field_colorpalette_defaultvalue_" +					"cssclass_missing.json"));	}
@Test(description = "This test case tests IsEnrolled method of the DeviceTypeManager",            dependsOnMethods = {"testEnrollDevice"})    public void testIsEnrolled() throws DeviceManagementException {        DeviceIdentifier deviceIdentifier = new DeviceIdentifier(sampleDevice2.getDeviceIdentifier(),                sampleDevice2.getType());        DeviceIdentifier nonExistingCustomDeviceIdentifier = new DeviceIdentifier(sampleDevice2.getDeviceIdentifier(),                customDevice.getType());        Assert.assertFalse(androidDeviceTypeManager.isEnrolled(nonExistingDeviceIdentifier),                "Device with NON-Existing ID is not enrolled, but this shows as enrolled");        Assert.assertTrue(androidDeviceTypeManager.isEnrolled(deviceIdentifier),                "Enrolled device is shown as un-enrolled");        Assert.assertFalse(customDeviceTypeManager.isEnrolled(nonExistingCustomDeviceIdentifier),                "Custom device type manager returns an non-existing device as enrolled");        Assert.assertTrue(customDeviceTypeManager.isEnrolled(new DeviceIdentifier(customDeviceType, customDeviceType))                , "Enrolled device is shown as un-enrolled in custom device type manager");    }
@Test    public void testStatementsAreReadOnlyModeAware() throws SQLException {        final ReadOnlyModeAwareConnection cnx = new ReadOnlyModeAwareConnection(mockedConnection, readOnlyModeStatus);        assertIsReadOnlyModeAware(cnx.createStatement());        assertIsReadOnlyModeAware(cnx.createStatement(0, 0));        assertIsReadOnlyModeAware(cnx.createStatement(0, 0, 0));    }
@Test  public void testSearchMetaFactsCallsDelegate() throws Exception {    FactSearchMetaDelegate delegate = mock(FactSearchMetaDelegate.class);    when(delegateProvider.get(FactSearchMetaDelegate.class)).thenReturn(delegate);    SearchMetaFactsRequest request = new SearchMetaFactsRequest();    service.searchMetaFacts(RequestHeader.builder().build(), request);    verify(delegate).handle(request);  }
@Test	public void testValidateConfigurationInvalidFieldColorPaletteDefaultValueExtraProperties()		throws Exception {		expectedException.expect(FragmentEntryConfigurationException.class);		expectedException.expectMessage(			new StringContains(				"/fieldSets/0/fields/0/defaultValue: extraneous key [extra] " +					"is not permitted"));		_fragmentEntryValidatorImpl.validateConfiguration(			_read(				"configuration_invalid_field_colorpalette_defaultvalue_extra_" +					"properties.json"));	}
@Test(expected = AccessDeniedException.class)  public void testCheckReadPermissionWithAccessModeRoleBasedNoAccess() throws Exception {    FactEntity fact = new FactEntity()            .setOrganizationID(UUID.randomUUID())            .setAccessMode(AccessMode.RoleBased);    when(accessController.hasPermission(credentials, viewThreatIntelFact, organization)).thenReturn(false);    context.checkReadPermission(fact);  }
@Test    public void testWorkitemDefinitions() throws Exception {        ConfigGroup group = workbenchConfigurationHelper.getWorkItemElementDefinitions();        assertEquals(ConfigType.EDITOR, group.getType());        assertEquals(WorkItemsEditorService.WORK_ITEMS_EDITOR_SETTINGS, group.getName());        assertEquals("", group.getDescription());        assertEquals(7, group.getItems().size());        assertEquals("\"customEditor\" : \"true\"", group.getConfigItemValue(WorkItemsEditorService.WORK_ITEMS_EDITOR_SETTINGS_CUSTOM_EDITOR));        assertEquals("\"parameterValues\" : [\n" +                "   \"MyFirstParam\" : \"A,B,C\",   \n" +                "   \"MySecondParam\" : \"X,Y,Z\"\n" +                "]", group.getConfigItemValue(WorkItemsEditorService.WORK_ITEMS_EDITOR_SETTINGS_PARAMETER_VALUES));        assertEquals(group.getConfigItemValue(WorkItemsEditorService.WORK_ITEMS_EDITOR_SETTINGS_DEFAULT_HANDLER), "\"defaultHandler\" : \"mvel: new DefaultHandler()\"");    }
@Test  public void testInvalidPrice() throws JSONException  {    String tuple = "{" + "\"id\": 2," + "\"name\": \"An ice sculpture\"," + "\"price\": -1,"        + "\"tags\": [\"cold\", \"ice\"]," + "\"dimensions\": {" + "\"length\": 7.0," + "\"width\" : 8.0,"        + "\"height\": 9.5" + "}," + "\"warehouseLocation\": {" + "\"latitude\": -78.75," + "\"longitude\": 20.4"        + "}," + "\"dateOfManufacture\": \"2013/09/29\"," + "\"dateOfExpiry\": \"2013\"" + "}";    parser.beginWindow(0);    parser.in.process(tuple.getBytes());    parser.endWindow();    Assert.assertEquals(0, objectPort.collectedTuples.size());    Assert.assertEquals(0, pojoPort.collectedTuples.size());    Assert.assertEquals(1, error.collectedTuples.size());    KeyValPair<String, String> errorKeyValPair = (KeyValPair<String, String>)error.collectedTuples.get(0);    Assert.assertEquals(tuple, errorKeyValPair.getKey());    Assert.assertEquals("\"/price\":\"number is lower than the required minimum\"", errorKeyValPair.getValue());  }
@Test    public void testOnDecisionTableSelectedEventWithNonOtherwiseColumnSelectedAndItHasEditableColumnsAndItHasEditableColumns() {        model.getMetadataCols().add(new MetadataCol52());        model.getData().add(makeDTCellValue52());        uiModel.selectCell(0, 3);        builder.onDecisionTableSelectedEvent(new DecisionTableSelectedEvent(dtPresenter));        assertTrue(builder.miCut.getMenuItem().isEnabled());        assertTrue(builder.miCopy.getMenuItem().isEnabled());        assertFalse(builder.miPaste.getMenuItem().isEnabled());        assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled());        assertTrue(builder.miDeleteSelectedColumns.getMenuItem().isEnabled());        assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled());        assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled());        verify(builder.miOtherwiseCell.getMenuItemView(), times(1)).setIconType(eq(null));    }
@Test	public void testGetFieldValueNameJSONObjectWithNonexistingSegmentsFieldCustomizer() {		String entityName = RandomTestUtil.randomString();		String fieldName = RandomTestUtil.randomString();		Mockito.doReturn(			Optional.empty()		).when(			_segmentsFieldCustomizerRegistry		).getSegmentsFieldCustomizerOptional(			entityName, fieldName		);		JSONObject jsonObject =			_getSegmentsFieldValueNameMVCResourceCommand.				getFieldValueNameJSONObject(					entityName, fieldName, RandomTestUtil.randomString(),					LocaleUtil.getDefault());		Assert.assertEquals("{}", jsonObject.toJSONString());	}
@Test	public void testResolveAllowedPortalClass() throws Exception {		_updateProperties("com.liferay.portal.kernel.model.User", null);		_liferayTemplateClassResolver.resolve(			"com.liferay.portal.kernel.model.User", null, null);	}
@Test(expected = PortalException.class)	public void testValidateContentFailsWhenHTMLExportImportContentProcessorFails()		throws Exception {		String content = RandomTestUtil.randomString();		Mockito.doThrow(			PortalException.class		).when(			_htmlExportImportContentProcessor		).validateContentReferences(			Mockito.anyLong(), Mockito.anyString()		);		_amJournalArticleExportImportContentProcessor.validateContentReferences(			RandomTestUtil.randomLong(), content);	}
@Test	public void testIsReadable() {		Assert.assertTrue(provider.isReadable(CSVTable.class, null, null, MediaType.valueOf("text/csv;header=present"))); //$NON-NLS-1$		Assert.assertTrue(provider.isReadable(CSVTable.class, null, null, MediaType.valueOf("text/csv;charset=iso-8859-1"))); //$NON-NLS-1$		Assert.assertTrue(provider.isReadable(CSVTable.class, null, null, MediaType.valueOf("text/csv;header=present;charset=iso-8859-1"))); //$NON-NLS-1$		Assert.assertTrue(provider.isReadable(CSVTable.class, null, null, MediaType.valueOf("text/csv"))); //$NON-NLS-1$		Assert.assertTrue(provider.isReadable(CSVTable.class, null, null, MediaType.valueOf("text/*"))); //$NON-NLS-1$		Assert.assertTrue(provider.isReadable(CSVTable.class, null, null, MediaType.WILDCARD_TYPE));		Assert.assertFalse(provider.isReadable(CSVTable.class, null, null, MediaType.APPLICATION_ATOM_XML_TYPE));		Assert.assertFalse(provider.isReadable(CSVTable.class, null, null, MediaType.APPLICATION_JSON_TYPE));	}
@Test  public void testGetFactCommentsFilterByBefore() throws Exception {    GetFactCommentsRequest request = new GetFactCommentsRequest().setFact(UUID.randomUUID()).setBefore(150L);    List<FactCommentRecord> comments = createComments();    when(factRequestResolver.resolveFact(request.getFact())).thenReturn(new FactRecord().setComments(comments));    assertEquals(1, delegate.handle(request).getCount());    verify(factCommentResponseConverter).apply(comments.get(0));    verifyNoMoreInteractions(factCommentResponseConverter);  }
@Test  public void testToDocumentWithDestinationObject() {    ObjectRecord objectRecord = createObjectRecord();    FactRecord factRecord = new FactRecord().setDestinationObject(objectRecord);    FactDocument factDocument = converter.toDocument(factRecord);    assertEquals(1, factDocument.getObjects().size());    assertObjectDocument(objectRecord, factDocument.getObjects().iterator().next(), ObjectDocument.Direction.FactIsSource);  }
@Test  public void trackNeedsTobeEncodedToStandardInputMp4ReturnsFalse() throws URISyntaxException {    Track track = EasyMock.createMock(Track.class);    EasyMock.expect(track.getURI())            .andReturn(                    new URI(                            "http://mh-allinone.localdomain/files/mediapackage/4631bade-04ae-4369-a38f-63a9a0f2e5bf/9404c35b-9463-4932-ad88-0f7030c2448e/audio.mp4"))            .anyTimes();    EasyMock.replay(track);    boolean result = PartialImportWorkflowOperationHandler.trackNeedsTobeEncodedToStandard(track, defaultExtensions);    assertFalse(result);  }
@Test    public void testGenerateColumnWhenColumnIsNotNewAndVetoed() throws Exception {        doReturn(false).when(plugin).isNewColumn();        doThrow(VetoException.class).when(presenter).updateColumn(any(ActionCol52.class),                                                                  any(ActionCol52.class));        assertFalse(plugin.generateColumn());        verify(wizard).showGenericVetoError();    }
@Test(dataProvider = "addOneDP")    public void test(int[] input, int[] expected) {        assertEquals(AddOne.addOne(input), expected);    }
@Test    public void testDirectoryExisting() throws Exception {        Path path = Files.createTempDirectory( "prefix" );        path.toFile().deleteOnExit();        String pathName = path.toString();        assertTrue( Files.isDirectory( new PathConverter( DIRECTORY_EXISTING ).convert( pathName ) ) );    }
@Test	public void testWriteBlank() throws IOException {		Assert.assertEquals(			"\"\"", ConfigurationHandler.write(StringPool.BLANK));	}
@Test  public void testConvertCachedSubject() {    UUID id = UUID.randomUUID();    Subject model = Subject.builder().build();    responseCache.put(id, model);    assertSame(model, converter.apply(id));    verifyNoInteractions(subjectResolver);  }
@Test	public void testEndpointsWithoutTargetRefsAllNamespaces() {		EndpointsList endpoints = createSingleEndpointEndpointListByPodName("api-pod");		endpoints.getItems().get(0).getSubsets().get(0).getAddresses().get(0).setTargetRef(null);		when(this.endpointsOperation.list()).thenReturn(endpoints);		when(this.kubernetesClient.endpoints()).thenReturn(this.endpointsOperation);		when(this.kubernetesClient.endpoints().inAnyNamespace()).thenReturn(this.endpointsOperation);		when(this.kubernetesClient.endpoints().inAnyNamespace().withLabels(anyMap()))				.thenReturn(this.endpointsOperation);		this.underTest.catalogServicesWatch();		// second execution on shuffleServices		this.underTest.catalogServicesWatch();		verify(this.applicationEventPublisher).publishEvent(any(HeartbeatEvent.class));	}
@Test  public void testConvertFactNoAccessToInReferenceToFact() {    FactRecord record = createRecord().setInReferenceToID(UUID.randomUUID());    FactRecord inReferenceTo = new FactRecord().setId(record.getInReferenceToID());    when(objectFactDao.getFact(record.getInReferenceToID())).thenReturn(inReferenceTo);    when(securityContext.hasReadPermission(inReferenceTo)).thenReturn(false);    Fact model = converter.apply(record);    assertNull(model.getInReferenceTo());    verify(securityContext).hasReadPermission(inReferenceTo);  }
@Test  public void testConstructor() throws Exception {    assertEquals(        BinlogFilePos.fromString("mysql-bin-changelog.000218:14:6"),        new BinlogFilePos("mysql-bin-changelog.000218", 14, 6));    assertEquals(new BinlogFilePos(80887L), new BinlogFilePos("mysql-bin-changelog.080887"));    assertEquals(new BinlogFilePos(1080887L), new BinlogFilePos("mysql-bin-changelog.1080887"));  }
@Test  public void testRetryStrategyHold() throws Exception {    WorkflowDefinitionImpl def = new WorkflowDefinitionImpl();    def.setId("workflow-definition-1");    def.setTitle("workflow-definition-1");    def.setDescription("workflow-definition-1");    WorkflowOperationDefinitionImpl opDef = new WorkflowOperationDefinitionImpl("failOneTime", "fails once", null, true);    opDef.setRetryStrategy(RetryStrategy.HOLD);    opDef.setMaxAttempts(2);    def.add(opDef);    MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder().createNew();    WorkflowInstance workflow = startAndWait(def, mp, WorkflowState.PAUSED);    WorkflowOperationInstance errorResolutionOperation = service.getWorkflowById(workflow.getId()).getOperations()            .get(0);    WorkflowOperationInstance failOneTimeOperation = service.getWorkflowById(workflow.getId()).getOperations().get(1);    Assert.assertTrue(errorResolutionOperation.getTemplate().equals(WorkflowServiceImpl.ERROR_RESOLUTION_HANDLER_ID));    Assert.assertTrue(errorResolutionOperation.getState() == OperationState.PAUSED);    Assert.assertTrue(errorResolutionOperation.getFailedAttempts() == 0);    Assert.assertTrue(failOneTimeOperation.getState() == OperationState.RETRY);    Assert.assertTrue(failOneTimeOperation.getMaxAttempts() == 2);    Assert.assertTrue(failOneTimeOperation.getFailedAttempts() == 1);  }
@Test  public void testLazyMapIndex() {    List<Integer> eval = mlazy(asList(1, 2, 3, 4, 5)).mapIndex(new Function2<Integer, Integer, Integer>() {      @Override      public Integer apply(Integer n, Integer i) {        return n + i;      }    }).eval();    assertArrayEquals(new Integer[]{1, 3, 5, 7, 9}, eval.toArray(new Integer[]{}));  }
@Test  public void testDeserializeString() throws IOException {    when(parser.hasToken(eq(JsonToken.VALUE_STRING))).thenReturn(true);    when(parser.getText()).thenReturn("2016-11-30T15:47:00Z");    assertEquals(1480520820000L, (long) deserializer.deserialize(parser, context));  }
@Test  public void testToString() {    assertEquals("name:ASC", orderByNameAsc.toString());    assertEquals("date:DESC", orderByDateDesc.toString());  }
@Test  public void testDuplicateGroupCreation() {    Response response = endpoint.createGroup("Test 1", "Test group", "ROLE_ASTRO_101_SPRING_2011_STUDENT", "admin");    assertEquals(HttpStatus.SC_CREATED, response.getStatus());    response = endpoint.createGroup("Test 1", "Test group 2", "ROLE_ASTRO_101_SPRING_2011_STUDENT", "admin");    assertEquals(HttpStatus.SC_CONFLICT, response.getStatus());  }
@Test    public void init() {        verify(styleMock, times(1)).setWidth(100, Style.Unit.PCT);        verify(styleMock, times(1)).setHeight(100, Style.Unit.PCT);        verify(styleMock, times(1)).setFontSize(12, Style.Unit.PX);        verify(styleMock, times(1)).setProperty("resize", "none");        verify(simplePanelMock, times(1)).setWidget(eq(textAreaMock));    }
@Test  public void testStart() throws Exception {    EasyMock.expect(instance.getConfiguration("source-flavor")).andReturn("*/source").anyTimes();    EasyMock.replay(instance);    Assert.assertTrue(handler.start(workflow, null).allowsContinue());  }
@Test	public void testNewLine() throws Exception {		StringWriter stringWriter = new StringWriter();		UnsyncBufferedWriter unsyncBufferedWriter = new UnsyncBufferedWriter(			stringWriter, 10);		unsyncBufferedWriter.newLine();		String lineSeparator = System.getProperty("line.separator");		Assert.assertEquals(			lineSeparator.length(), _countField.getInt(unsyncBufferedWriter));		unsyncBufferedWriter.write('a');		Assert.assertEquals(			lineSeparator.length() + 1,			_countField.getInt(unsyncBufferedWriter));		unsyncBufferedWriter.newLine();		Assert.assertEquals(			(lineSeparator.length() * 2) + 1,			_countField.getInt(unsyncBufferedWriter));		unsyncBufferedWriter.flush();		Assert.assertEquals(			lineSeparator + "a" + lineSeparator, stringWriter.toString());	}
@Test(expected = IllegalArgumentException.class)  public void testToInternalIdLeastSignificantBitsNegativeThrowsException() {    IdMapper.toInternalID(new UUID(0, -1));  }
@Test    public void getItemsProperties() {        Map<String, Map<String, String>> itemsProperties = elementPresenter.getSimpleItemsProperties();        assertNotNull(itemsProperties);    }
@Test(expected = PortalException.class)	public void testGetTrafficSourcesWithAsahFaroBackendError()		throws Exception {		AnalyticsReportsDataProvider analyticsReportsDataProvider =			new AnalyticsReportsDataProvider(_getHttp(new IOException()));		analyticsReportsDataProvider.getTrafficSources(			RandomTestUtil.randomLong(), RandomTestUtil.randomString());	}
@Test(expected = AccessDeniedException.class)  public void testFetchObjectTypeWithoutPermission() throws Exception {    doThrow(AccessDeniedException.class).when(securityContext).checkPermission(TiFunctionConstants.viewThreatIntelType);    delegate.handle(new GetObjectTypeByIdRequest());  }
@Test	public void testValidateConfigurationValidFieldColorPaletteRequired()		throws Exception {		_fragmentEntryValidatorImpl.validateConfiguration(			_read("configuration_valid_field_colorpalette_required.json"));	}
@Test    public void testParseIntervalMapShort() {        IntervalShortMap expected = new IntervalShortMap();        expected.put(new Interval(1, 2), (short) 1);        expected.put(new Interval(3, 5), (short) 2);        expected.put(new Interval(5, 6), (short) 3);        expected.put(new Interval(6, 7), (short) 4);        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(Short.class, "[1, 2, 1.1]; [3, 5, 2]; [5, 6, '3']; [6, 7, \"4\"]"));// Decimals                                                                                                                                               // are                                                                                                                                               // ignored        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(short.class, "[1, 2, 1.1]; [3, 5, 2]; [5, 6, '3']; [6, 7, \"4\"]"));// Decimals                                                                                                                                               // are                                                                                                                                               // ignored    }
@Test(expected=IllegalArgumentException.class)    public void testSelect_Illegal() {        List<Integer> cards = IntStream.range(1,10+1).boxed().collect(toList());        Hand hand = new Hand(cards);        // test        Hand result = hand.select(18);    }
@Test	public void testAddFiles_1() throws Exception {		String jarDir = System.getProperty("user.home");		ClassPathHack.addFiles(jarDir);	}
@Test	public void testProcessFileVersion() throws Exception {		Mockito.when(			_amImageValidator.isProcessingSupported(_fileVersion)		).thenReturn(			true		);		AMImageConfigurationEntry amImageConfigurationEntry =			new AMImageConfigurationEntryImpl(				RandomTestUtil.randomString(), RandomTestUtil.randomString(),				Collections.emptyMap());		Mockito.when(			_amImageConfigurationHelper.getAMImageConfigurationEntries(				Mockito.anyLong())		).thenReturn(			Collections.singleton(amImageConfigurationEntry)		);		Mockito.when(			_amImageConfigurationHelper.getAMImageConfigurationEntry(				Mockito.anyLong(), Mockito.anyString())		).thenReturn(			Optional.of(amImageConfigurationEntry)		);		Mockito.when(			_amImageScalerTracker.getAMImageScaler(Mockito.anyString())		).thenReturn(			_amImageScaler		);		Mockito.when(			_amImageScaler.scaleImage(_fileVersion, amImageConfigurationEntry)		).thenReturn(			new AMImageScaledImageImpl(new byte[100], 150, 200)		);		_amImageProcessorImpl.process(_fileVersion);		Mockito.verify(			_amImageScaler		).scaleImage(			_fileVersion, amImageConfigurationEntry		);		Mockito.verify(			_amImageEntryLocalService		).addAMImageEntry(			Mockito.any(AMImageConfigurationEntry.class),			Mockito.any(FileVersion.class), Mockito.eq(150), Mockito.eq(200),			Mockito.any(InputStream.class), Mockito.eq(100L)		);	}
@Test  public void testIterateEdgesWithUuidIdSupportUsingDetachedEdge() {    Edge edge1 = createEdge();    Edge edge2 = getActGraph().edges(DetachedFactory.detach(edge1, true)).next();    assertEquals(edge1.id(), edge2.id());    assertFalse(edge2 instanceof DetachedEdge);  }
@Test	public void testHDMediaQueryNotAppliesWhenHeightHas2PXMoreThanExpected()		throws Exception {		_addConfigs(			_createAMImageConfigurationEntry(				"uuid", 450, 800, "http://small.adaptive.com"),			_createAMImageConfigurationEntry(				"uuid", 902, 1600, "http://small.hd.adaptive.com"));		List<MediaQuery> mediaQueries = _mediaQueryProviderImpl.getMediaQueries(			_fileEntry);		Assert.assertEquals(mediaQueries.toString(), 2, mediaQueries.size());		MediaQuery mediaQuery1 = mediaQueries.get(0);		Assert.assertEquals("http://small.adaptive.com", mediaQuery1.getSrc());		List<Condition> conditions1 = mediaQuery1.getConditions();		Assert.assertEquals(conditions1.toString(), 1, conditions1.size());		_assertCondition(conditions1.get(0), "max-width", "800px");		MediaQuery mediaQuery2 = mediaQueries.get(1);		Assert.assertEquals(			"http://small.hd.adaptive.com", mediaQuery2.getSrc());		List<Condition> conditions2 = mediaQuery2.getConditions();		Assert.assertEquals(conditions2.toString(), 2, conditions2.size());		_assertCondition(conditions2.get(0), "max-width", "1600px");		_assertCondition(conditions2.get(1), "min-width", "800px");	}
@Test    public void testGetAsTextOrNull() {        assertNull(underTest.getAsTextOrNull(null));        JsonNode mockNode = mock(JsonNode.class);        String returnValue = "test";        when(mockNode.asText()).thenReturn(returnValue);        assertEquals(returnValue, underTest.getAsTextOrNull(mockNode));    }
@Test    public void testCite100GeometryFeatureCollection()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaURL = this.getClass().getResource( "../cite/schema/all.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaURL );        AppSchema schema = adapter.extractAppSchema();        FeatureCollectionType ft = (FeatureCollectionType) schema.getFeatureType( QName.valueOf( "{http://www.opengis.net/gml}_FeatureCollection" ) );        ft = (FeatureCollectionType) schema.getFeatureType( QName.valueOf( "{http://www.opengis.net/cite/geometry}GeometryFeatureCollection" ) );        List<PropertyType> newPropertyDecls = schema.getNewPropertyDecls( ft );    }
@Test    public void select_single_hit() throws Exception {        List<Emit> list = new ArrayList<Emit>();        list.add(new Emit(0, 4, null));        List<Emit> result = mSelector.select(list);        assertThat(result.size(), is(1));        assertThat(result.get(0).getStart(), is(0));        assertThat(result.get(0).getEnd(), is(4));    }
@Test   public void testFormatDuration() throws Exception   {      long tenMinMillis = java.util.concurrent.TimeUnit.MINUTES.toMillis(10);      Date tenMinAgo = new Date(System.currentTimeMillis() - tenMinMillis);      PrettyTime t = new PrettyTime();      String result = t.formatDuration(tenMinAgo);      Assert.assertTrue(result.equals("10 minutes"));   }
@Test    public void testToStringHex() throws Exception {        ObjectReference or = this.getObjectReference("Foo");        Map<String, Object> options = formatter.getDefaultOptions();        options.put(NUMERIC_FORMAT_OPTION, NumericFormatEnum.HEX);        assertEquals("Failed to format an object.", String.format("MockType@%#x", or.uniqueID()),            formatter.toString(or, options));    }
@Test    public void testIsConditionHeaderNotBlankWhenHeaderIsValid() throws Exception {        final Validator validator = new Validator();        final ConditionCol52 col52 = fakeConditionCol52("my header");        assertTrue(validator.isConditionHeaderNotBlank(col52));    }
@Test    public void moduleInstallShouldFailInReadOnlyMode() {        verifyFailureInReadOnlyMode(() -> moduleManager.install((Collection<Resource>) null, null, false));    }
@Test    public void testGetMentionMatrix_withNulls() {        List<EmojiEntity> mentions = Lists.newArrayListWithCapacity(16);        // throw in some null rooms and users        mentions.add(new EmojiEntity(null, "r2", DateTime.now().plus(1), "a", 1, false));        mentions.add(new EmojiEntity("u1", null, DateTime.now().plus(2), "a", 1, false));        LabeledMTJMatrix<String> result =                GraphPartition.getMentionMatrix(mentions,                                                mention -> mention.getRoomName(),                                                mention -> mention.getUsername());        // there's three rooms so we expect the size of the matrix to be 3x3 with 3 labels        assertEquals(1, result.getMatrix().numRows());        assertEquals(1, result.getMatrix().numColumns());        assertEquals(1, result.getLabels().stream().distinct().count());    }
@Test	public void testRewordRenameTable() throws Exception {		Assert.assertEquals(			"alter table a to b;\n", buildSQL(RENAME_TABLE_QUERY));	}
@Test  public void testGetHumanReadableTimeStringInputMinutesExpectsOnlyMinutes() {    assertEquals("2 minutes", Log.getHumanReadableTimeString(120));  }
@Test public void testOnCreateWebChromeClient() {		// Arrange:		final WebFragment fragment = new WebFragment();		// Act + Assert:		assertThat(fragment.onCreateWebChromeClient(), is(notNullValue()));	}
@Test  public void testGetter() throws Exception {    MessageReceiverImpl messageReceiverImpl = new MessageReceiverImpl();    assertNotNull(messageReceiverImpl.receiveSerializable("", DestinationType.Queue));    assertNull(messageReceiverImpl.getSession());    assertNull(messageReceiverImpl.getMessageProducer());  }
@Test	public void testChord() {		assertEquals(toAtomList("1 2 3"), toAtomList(p.parse("[1 2 3]")));		assertEquals(toAtomList("1 2 3"), toAtomList(p.parse(" [ 1 2 3   ]")));	}
@Test    public void toggleEditItemButtonStatusToDisableFalse() {        elementPresenter.toggleEditingStatus(false);        elementViewListLocal.forEach(elementViewMock -> {            verify(elementViewMock, times(1)).getEditItemButton();            verify(elementViewMock, times(1)).getDeleteItemButton();        });        verify(editItemButtonMock, times(2)).setDisabled(false);        verify(deleteItemButtonMock, times(2)).setDisabled(false);    }
@Test public void testI() {		// Arrange:		final Logger mockLogger = mock(Logger.class);		FragmentsLogging.setLogger(mockLogger);		// Act:		FragmentsLogging.i(LOG_TAG, "message.info");		FragmentsLogging.i(LOG_TAG, "message.info", null);		// Assert:		verify(mockLogger).i(LOG_TAG, "message.info");		verify(mockLogger).i(LOG_TAG, "message.info", null);		verifyNoMoreInteractions(mockLogger);	}
@Test  public void testConvertRequestFilterOnOrigin() throws Exception {    UUID id = UUID.randomUUID();    UUID idForName = UUID.randomUUID();    when(byNameResolver.resolveOrigin(notNull())).thenReturn(SetUtils.set(id, idForName));    FactSearchCriteria criteria = converter.apply(new SearchObjectRequest()            .addOrigin(id.toString())            .addOrigin("name")    );    assertEquals(SetUtils.set(id, idForName), criteria.getOriginID());    verify(byNameResolver).resolveOrigin(SetUtils.set(id.toString(), "name"));  }
@Test(expected=IllegalArgumentException.class)  public void testEmptyValue() throws Exception {    System.out.println(SqoopModelAuthorizables.from("SERVER="));  }
@Test    public void testPolygonStylingPerpendicularOffset()                            throws Exception {        BufferedImage img = new BufferedImage( 100, 100, TYPE_INT_ARGB );        long time = currentTimeMillis();        Graphics2D g = img.createGraphics();        GeometryFactory geomFac = new GeometryFactory();        Java2DRenderer r = new Java2DRenderer( g, img.getWidth(), img.getHeight(),                                               geomFac.createEnvelope( new double[] { 0, 0 },                                                                       new double[] { 100d, 100d }, mapcs ) );        PolygonStyling styling = new PolygonStyling();        styling.stroke = new Stroke();        styling.stroke.strokeGap = 7;        styling.stroke.width = 1;        styling.stroke.stroke = new Graphic();        styling.stroke.stroke.size = 5;        styling.stroke.stroke.mark.fill.color = red;        styling.stroke.stroke.mark.wellKnown = SimpleMark.TRIANGLE;        styling.stroke.stroke.mark.stroke.color = red;        styling.stroke.stroke.mark.stroke.width = 0;        styling.fill = new Fill();        styling.fill.color = white;        styling.perpendicularOffset = -4;        Envelope envelope = geomFac.createEnvelope( 10, 10, 300, 300, null );        r.render( styling, envelope );        g.dispose();        long time2 = currentTimeMillis();        List<String> texts = new LinkedList<String>();        texts.add( "polygon: white rectangle with red triangle stroke and perpendicular offest of -4. Expected: triangles points to the INSIDE of the geometry!" );        validateImage( img, time2 - time, "polygonstylingperpendicularoffset" );    }
@Test	public void testAvailableLocales() {		Set<Locale> expectedAvailableLocales = SetUtil.fromArray(			new Locale[] {LocaleUtil.BRAZIL});		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		DefaultDDMFormValuesFactory defaultDDMFormValuesFactory =			new DefaultDDMFormValuesFactory(ddmForm, LocaleUtil.BRAZIL);		DDMFormValues ddmFormValues = defaultDDMFormValuesFactory.create();		Assert.assertEquals(			expectedAvailableLocales, ddmFormValues.getAvailableLocales());	}
@Test	public void testItemSelectorURLWithAudioItemSelectorCriterion()		throws Exception {		when(			_itemSelector.getItemSelectorCriteria(				"audioItemSelectorCriterionFileEntryItemSelectorReturnType")		).thenReturn(			_getAudioItemSelectorCriterionFileEntryItemSelectorReturnType()		);		JSONObject originalJSONObject = JSONUtil.put(			"filebrowserImageBrowseLinkUrl",			"audioItemSelectorCriterionFileEntryItemSelectorReturnType");		JSONObject jsonObject = JSONFactoryUtil.createJSONObject(			originalJSONObject.toJSONString());		AMBlogsEditorConfigContributor amBlogsEditorConfigContributor =			new AMBlogsEditorConfigContributor();		ReflectionTestUtil.setFieldValue(			amBlogsEditorConfigContributor, "_itemSelector", _itemSelector);		amBlogsEditorConfigContributor.populateConfigJSONObject(			jsonObject, _inputEditorTaglibAttributes, _themeDisplay,			_requestBackedPortletURLFactory);		Mockito.verify(			_itemSelector, Mockito.never()		).getItemSelectorURL(			Mockito.any(RequestBackedPortletURLFactory.class),			Mockito.anyString(), Mockito.any(ItemSelectorCriterion.class)		);		JSONObject expectedJSONObject = JSONFactoryUtil.createJSONObject(			originalJSONObject.toJSONString());		JSONAssert.assertEquals(			expectedJSONObject.toJSONString(), jsonObject.toJSONString(), true);	}
@Test    public void testEdgeIncident() {        EdgeStore edgeStore = new EdgeStore();        EdgeImpl[] edges = GraphGenerator.generateSmallEdgeList();        for (EdgeImpl e : edges) {            for (EdgeImpl f : edges) {                boolean isIncident = edgeStore.isIncident(e, f);                boolean should = e.source == f.source || e.target == f.target || e.source == f.target || e.target == f.source;                Assert.assertEquals(isIncident, should);            }        }    }
@Test    public void evaluatePeriodPeriod() {        assertThat( compareEndWithBegin( period( "2014-01-01T00:00:01", "2014-01-01T00:00:01" ),                                         period( "2014-01-01T00:00:01", "2014-01-01T00:00:01" ) ), is( 0 ) );        assertThat( compareEndWithBegin( period( "2014-01-01T00:00:00", "2014-01-01T00:00:01" ),                                         period( "2014-01-01T00:00:01", "2014-01-01T00:00:02" ) ), is( 0 ) );        assertThat( compareEndWithBegin( period( "2014-01-01T00:00:02", "2014-01-01T00:00:03" ),                                         period( "2014-01-01T00:00:00", "2014-01-01T00:00:01" ) ), is( 1 ) );        assertThat( compareEndWithBegin( period( "2014-01-01T00:00:02", "2014-01-01T00:00:03" ),                                         period( "2014-01-01T00:00:01", "2014-01-01T00:00:02" ) ), is( 1 ) );        assertThat( compareEndWithBegin( period( "2014-01-01T00:00:02", "2014-01-01T00:00:03" ),                                         period( "2014-01-01T00:00:02", "2014-01-01T00:00:03" ) ), is( 1 ) );        assertThat( compareEndWithBegin( period( "2014-01-01T00:00:01", "2014-01-01T00:00:02" ),                                         period( "2014-01-01T00:00:03", "2014-01-01T00:00:04" ) ), is( -1 ) );    }
@Test    public void testSetEditingColStringValue() throws Exception {        final DTCellValue52 cellValue52 = mock(DTCellValue52.class);        final String pattern = "pattern";        doReturn(cellValue52).when(limitedEntryActionRetractFactCol52).getValue();        doReturn(limitedEntryActionRetractFactCol52).when(plugin).editingCol();        plugin.setEditingColStringValue(pattern);        verify(cellValue52).setStringValue(pattern);    }
@Test	public void testGetInline() {		DDMFormField ddmFormField = createDDMFormField();		DDMFormFieldRenderingContext ddmFormFieldRenderingContext =			new DDMFormFieldRenderingContext();		ddmFormField.setProperty("inline", true);		ddmFormField.setProperty("dataSourceType", "data-provider");		Map<String, Object> parameters =			_radioDDMFormFieldTemplateContextContributor.getParameters(				ddmFormField, ddmFormFieldRenderingContext);		Assert.assertEquals(true, parameters.get("inline"));	}
@Test(expected = AccessDeniedException.class)  public void testUpdateFactTypeWithoutPermission() throws Exception {    doThrow(AccessDeniedException.class).when(securityContext).checkPermission(TiFunctionConstants.updateThreatIntelType);    delegate.handle(new UpdateFactTypeRequest());  }
@Test	public void classMapTest1() throws Exception {		Mapper mapper = new Mapper("global-pro.xml");		Book book = new Book();		InnerBook innerBook = new InnerBook();		innerBook.setName("123");		book.setDate(new Date());		book.setAge(23);		book.setExclude("summary");		book.setInnerBook(innerBook);		Book targetBook = new Book();		targetBook.setAge(100);		InnerBook targetInnerBook = new InnerBook();		targetInnerBook.setName("999");		targetBook.setInnerBook(targetInnerBook);		targetBook = mapper.map(book, targetBook);		Assert.assertEquals(23, targetBook.getAge().intValue());		Assert.assertEquals("123", targetBook.getInnerBook().getName());		Assert.assertEquals("summary", targetBook.getExclude());	}
@Test	public void testDefaultIndices() throws Exception {		createIndices();		assertMappings(Field.COMPANY_ID, Field.ENTRY_CLASS_NAME);	}
@Test	public void testGetGridValue() {		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"Grid", new UnlocalizedValue("{\"RowValue\":\"ColumnValue\"}"));		Assert.assertEquals(			"{\"RowValue\":\"ColumnValue\"}",			String.valueOf(				_gridDDMFormFieldValueAccessor.getValue(					ddmFormFieldValue, LocaleUtil.US)));	}
@Test public void testCreateFragmentTagUtilityWithEmptyName() {		// Act + Assert:		assertThat(BaseFragmentFactory.createFragmentTag(TestFactory.class, ""), is(nullValue()));	}
@Test  public void testOrderOfFieldsInputFieldOrderZeroExpectsAtFront() {    DublinCoreMetadataCollection collection = new DublinCoreMetadataCollection(Arrays      .asList(unorderedOne, unorderedTwo, unorderedThree, first));    assertEquals(4, collection.getFields().size());    assertEquals("A field with an order value of 0 should be first in the list of fields", first, collection            .getFields().get(0));    collection = new DublinCoreMetadataCollection(Arrays.asList(first, unorderedOne, unorderedTwo, unorderedThree));    assertEquals(4, collection.getFields().size());    assertEquals("A field with an order value of 0 should be first in the list of fields", first, collection            .getFields().get(0));    collection = new DublinCoreMetadataCollection(Arrays.asList(unorderedOne, first, unorderedTwo, unorderedThree));    assertEquals(4, collection.getFields().size());    assertEquals("A field with an order value of 0 should be first in the list of fields", first, collection            .getFields().get(0));  }
@Test	public void testGetSettings() throws Exception {		when(			_ddmDataProviderTracker.getDDMDataProvider(Matchers.anyString())		).thenReturn(			_ddmDataProvider		);		when(			_ddmDataProvider.getSettings()		).thenReturn(			(Class)TestDataProviderInstanceSettings.class		);		DDMFormValues ddmFormValues = _createDDMFormValues();		DDMFormValuesDeserializerDeserializeResponse			ddmFormValuesDeserializerDeserializeResponse =				DDMFormValuesDeserializerDeserializeResponse.Builder.newBuilder(					ddmFormValues				).build();		when(			_ddmFormValuesDeserializer.deserialize(Mockito.any())		).thenReturn(			ddmFormValuesDeserializerDeserializeResponse		);		TestDataProviderInstanceSettings testDataProviderInstanceSettings =			_ddmDataProviderInstanceSettingsImpl.getSettings(				_ddmDataProviderInstance,				TestDataProviderInstanceSettings.class);		Assert.assertEquals(			"string value", testDataProviderInstanceSettings.prop1());		Assert.assertEquals(			Integer.valueOf(1), testDataProviderInstanceSettings.prop2());		Assert.assertEquals(true, testDataProviderInstanceSettings.prop3());	}
@Test    public void testGenerateFullWalletFile() throws Exception {        String fileName = WalletUtils.generateWalletFile(PASSWORD, KEY_PAIR, tempDir, true);        testGenerateWalletFile(fileName);    }
@Test    public void rstStreamExtraPayload() {        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.RST_STREAM_EXTRA_PAYLOAD_BUFFER);        Http2RstStreamFrame frame = (Http2RstStreamFrame) decoder.decode(buffer, context);        assertNotNull(frame);        assertEquals(6, frame.getLength());        assertEquals(3, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(32, frame.getStreamID());        assertEquals(256, frame.getErrorCode());    }
@Test(expected = IllegalArgumentException.class)  public void testSaveFactWithNonExistingFactType() {    getFactManager().saveFact(createFact());  }
@Test    public void parseCompositeSolid()                            throws XMLStreamException, FactoryConfigurationError, IOException, UnknownCRSException {        GMLStreamReader gmlReader = getParser( "CompositeSolid.gml" );        XMLStreamReader xmlReader = gmlReader.getXMLReader();        Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "CompositeSolid" ), xmlReader.getName() );        CompositeSolid compositeSolid = (CompositeSolid) gmlReader.readGeometry();        Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "CompositeSolid" ), xmlReader.getName() );        Assert.assertEquals( SolidType.CompositeSolid, compositeSolid.getSolidType() );        Solid solid = compositeSolid.get( 0 );        Assert.assertEquals( SolidType.Solid, solid.getSolidType() );        Assert.assertEquals( CRSManager.lookup( "EPSG:31466" ), solid.getCoordinateSystem() );        Assert.assertEquals( 8, solid.getExteriorSurface().getPatches().size() );        Assert.assertEquals( 2568786.096,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getStartPoint().get0(),                             DELTA );        Assert.assertEquals( 5662881.386,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getStartPoint().get1(),                             DELTA );        Assert.assertEquals( 60.3842642785516,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getStartPoint().get2(),                             DELTA );        Assert.assertEquals( 2568786.096,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getEndPoint().get0(),                             DELTA );        Assert.assertEquals( 5662881.386,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getEndPoint().get1(),                             DELTA );        Assert.assertEquals( 60.3842642785516,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getEndPoint().get2(),                             DELTA );    }
@Test    public void testDeclareOutputFields() {        OutputFieldsDeclarer fields = mock(OutputFieldsDeclarer.class);        underTest.declareOutputFields(fields);        verify(fields).declare(any(Fields.class));    }
@Test	public void testVisitBinaryExpressionOperationWithGreaterOperationAndNullValue() {		Map<String, EntityField> entityFieldsMap =			_entityModel.getEntityFieldsMap();		AbstractThrowableAssert exception = Assertions.assertThatThrownBy(			() -> _expressionVisitorImpl.visitBinaryExpressionOperation(				BinaryExpression.Operation.GT, entityFieldsMap.get("title"),				null)		).isInstanceOf(			UnsupportedOperationException.class		);		exception.hasMessage(			"Unsupported method _getGTFilter with null values");	}
@Test	public void testInvalidURL() {		IsURLFunction isURLFunction = new IsURLFunction();		Boolean result = isURLFunction.apply("invalid URL");		Assert.assertFalse(result);	}
@Test  public void testConvertRequestFilterOnFactType() throws Exception {    UUID id = UUID.randomUUID();    UUID idForName = UUID.randomUUID();    when(byNameResolver.resolveFactType(notNull())).thenReturn(SetUtils.set(id, idForName));    FactSearchCriteria criteria = converter.apply(new SearchObjectFactsRequest()            .addFactType(id.toString())            .addFactType("name")    );    assertEquals(SetUtils.set(id, idForName), criteria.getFactTypeID());    verify(byNameResolver).resolveFactType(SetUtils.set(id.toString(), "name"));  }
@Test  public void packageNameIsReturned() {    String source = joiner.join("package com.company;", "class Bla { }");    ReferencedClassesParser parser = parse(source);    assertThat(parser.packageName).isEqualTo("com.company");    assertThat(ReferencedClassesParser.getPackageOfJavaFile(source)).isEqualTo("com.company");  }
@Test  public void testStartDontSkipFlavor() throws Exception {    operation.setConfiguration(GoogleSpeechStartTranscriptionOperationHandler.SOURCE_TAG, "transcript");    // Make sure operation will NOT be skipped if media package does NOT contain the flavor passed    operation.setConfiguration(GoogleSpeechStartTranscriptionOperationHandler.SKIP_IF_FLAVOR_EXISTS, "captions/timedtext");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals("audioTrack1", capturedTrack.getValue().getIdentifier());  }
@Test    public void testCollectAndSortFeatureTypesToExport_EmptyFeatureTypeList() {        List<FeatureType> featureTypes = Collections.emptyList();        StoredQueryHandler storedQueryHandler = new StoredQueryHandler( mockWFS( featureTypes ), new ArrayList<URL>(),                                                                        managedStoredQueries );        List<QName> configuredFeatureTypeNames = Collections.emptyList();        List<QName> featureTypeNamesToExport = storedQueryHandler.collectAndSortFeatureTypesToExport( configuredFeatureTypeNames );        assertThat( featureTypeNamesToExport.size(), is( 0 ) );    }
@Test    public void getDOMElementFactory_Expression() {        BaseSingletonDOMElementFactory factory = abstractScesimGridModelSpy.getDOMElementFactory("com.Test", ScenarioSimulationModel.Type.DMN, FactMappingValueType.EXPRESSION);        assertSame(scenarioCellTextAreaSingletonDOMElementFactorySpy, factory);        factory = abstractScesimGridModelSpy.getDOMElementFactory("com.Test", ScenarioSimulationModel.Type.RULE, FactMappingValueType.EXPRESSION);        assertSame(scenarioExpressionCellTextAreaSingletonDOMElementFactorySpy, factory);    }
@Test	public void testAddreview() {		assertEquals(review, service.addReview(review));	}
@Test  public void testObject()  {    ResultFormatter adf = new ResultFormatter();    final String testString = "Hello World";    Assert.assertEquals(testString, adf.format(testString));  }
@Test  public void testIndex() {    InterpreterResult res = interpreter.interpret("index /logs { \"date\": \"" + new Date() + "\", \"method\": \"PUT\", \"status\": \"500\" }", null);    assertEquals(Code.ERROR, res.code());    res = interpreter.interpret("index /logs/http { \"date\": \"2015-12-06T14:54:23.368Z\", \"method\": \"PUT\", \"status\": \"500\" }", null);    assertEquals(Code.SUCCESS, res.code());  }
@Test(expected = IOException.class)	public void testMapToResultsThrowsIOException() throws Exception {		_individualSegmentJSONObjectMapper.mapToResults("invalid json");	}
@Test    public void showColumnServiceInvocation() {        final Pattern52 p = new Pattern52();        p.getChildColumns().add( new ConditionCol52() );        this.model.getConditions().add( p );        final BaseGridColumn<String> uiColumn3 = new BaseGridColumn<>( new BaseHeaderMetaData( "condition" ),                                                                       columnRenderer,                                                                       100.0 );        uiModel.appendColumn( uiColumn3 );        when( transform.getScaleX() ).thenReturn( 1.0 );        when( transform.getScaleY() ).thenReturn( 1.0 );        popOver.show( modellerView,                      dtPresenter,                      3 );        verify( view,                times( 1 ) ).show( contentProviderArgumentCaptor.capture() );        popOver.show( modellerView,                      dtPresenter,                      3 );        verify( view,                times( 2 ) ).show( contentProviderArgumentCaptor.capture() );        //Emulate Timer execution        final PopOverView.ContentProvider contentProvider = contentProviderArgumentCaptor.getValue();        contentProvider.getContent( ( PopOverView.Content content ) -> {                                        assertEquals( "source",                                                      content.getContent() );                                    }                                  );        verify( service,                times( 1 ) ).toSource( any( Path.class ),                                       any( GuidedDecisionTable52.class ) );    }
@Test    public void testVanityUrl() throws HttpException {        assertEquals("Expected URL value for input '" + input + "' should be '" + expectedResult + "'", expectedResult,                new VanityUrl(input, null, null).getUrl());    }
@Test	public void testTruncateToSizeSingleWordEqualToMax() {		int size = _randomSize();		String text = RandomTestUtil.randomString(size);		Assert.assertEquals(			text, GCloudNaturalLanguageUtil.truncateToSize(text, size));	}
@Test	public void testBelongsToCondition() throws Exception {		DDMForm ddmForm = new DDMForm();		DDMFormField ddmFormField0 = createDDMFormField(			"field0", "text", FieldConstants.STRING);		ddmForm.addDDMFormField(ddmFormField0);		ddmForm.addDDMFormRule(			new DDMFormRule(				Arrays.asList("setEnabled(\"field0\", false)"),				"belongsTo([\"Role1\"])"));		DDMFormValues ddmFormValues = DDMFormValuesTestUtil.createDDMFormValues(			ddmForm);		ddmFormValues.addDDMFormFieldValue(			DDMFormValuesTestUtil.createDDMFormFieldValue(				"field0_instanceId", "field0", new UnlocalizedValue("")));		Mockito.when(			_roleLocalService.fetchRole(				Matchers.anyLong(), Matchers.anyString())		).thenReturn(			_role		);		Mockito.when(			_role.getType()		).thenReturn(			RoleConstants.TYPE_REGULAR		);		Mockito.when(			_userLocalService.hasRoleUser(				Matchers.anyLong(), Matchers.eq("Role1"), Matchers.anyLong(),				Matchers.eq(true))		).thenReturn(			true		);		DDMFormEvaluatorEvaluateResponse ddmFormEvaluatorEvaluateResponse =			doEvaluate(ddmForm, ddmFormValues);		Map<DDMFormEvaluatorFieldContextKey, Map<String, Object>>			ddmFormFieldsPropertyChanges =				ddmFormEvaluatorEvaluateResponse.					getDDMFormFieldsPropertyChanges();		Assert.assertEquals(			ddmFormFieldsPropertyChanges.toString(), 1,			ddmFormFieldsPropertyChanges.size());		Map<String, Object> ddmFormFieldPropertyChanges =			ddmFormFieldsPropertyChanges.get(				new DDMFormEvaluatorFieldContextKey(					"field0", "field0_instanceId"));		Assert.assertTrue((boolean)ddmFormFieldPropertyChanges.get("readOnly"));	}
@Test(dataProvider = "dataProvider", invocationCount = 10)  public void topWordCountTest(SystemConfig.Acking acking) throws InterruptedException {    try (final LocalRuntime runtime = new LocalRuntime.Builder().maxElementsInGraph(2)            .millisBetweenCommits(500)            .acking(acking)            .build()) {      try (final FlameRuntime.Flame flame = runtime.run(new TopWordCountGraph().get())) {        final int lineSize = 20;        final int streamSize = 10;        final Queue<String> input = Stream.generate(() -> {          final String[] words = {"repka", "dedka", "babka", "zhuchka", "vnuchka"};          return new Random().ints(lineSize, 0, words.length).mapToObj(i -> words[i])                  .collect(joining(" "));        }).limit(streamSize).collect(Collectors.toCollection(ConcurrentLinkedQueue::new));        final Pattern pattern = Pattern.compile("\\s");        final Map<String, Integer> wordCounts = input.stream()                .map(pattern::split)                .flatMap(Arrays::stream)                .collect(toMap(Function.identity(), o -> 1, Integer::sum));        final AwaitResultConsumer<WordsTop> awaitConsumer = new AwaitResultConsumer<>(                lineSize * streamSize        );        flame.attachRear("wordCountRear", new AkkaRearType<>(runtime.system(), WordsTop.class))                .forEach(r -> r.addListener(awaitConsumer));        final List<AkkaFront.FrontHandle<String>> handles = flame                .attachFront("wordCountFront", new AkkaFrontType<String>(runtime.system()))                .collect(Collectors.toList());        applyDataToAllHandlesAsync(input, handles);        awaitConsumer.await(200, TimeUnit.SECONDS);        //noinspection ConstantConditions        final WordsTop actualWordsTop = awaitConsumer.result().skip(lineSize * streamSize - 1).findFirst().get();        final Stream<Map.Entry<String, Integer>> entryStream = wordCounts.entrySet()                .stream()                .filter(entry -> actualWordsTop.wordCounters().containsKey(entry.getKey()));        Assert.assertEquals(                actualWordsTop.wordCounters(),                entryStream                        .collect(toMap(Map.Entry::getKey, Map.Entry::getValue))        );        Assert.assertEquals(                dewordifiedTop(actualWordsTop.wordCounters()),                dewordifiedTop(wordCounts).stream().limit(2).collect(Collectors.toList())        );        Assert.assertEquals(actualWordsTop.wordCounters().size(), 2);      }    }  }
@Test    public void writeThemeMinimal()                            throws Exception {        final ByteArrayOutputStream bos = new ByteArrayOutputStream();        final XMLStreamWriter writer = newInstance().createXMLStreamWriter( bos );        writer.writeStartElement( "Layer" );        writer.writeNamespace( "", WMSNS );        writer.writeNamespace( "xlink", XLNNS );        XMLAdapter.writeElement( writer, "Title", "Container" );        final LayerMetadata layerMetadata = createLayerMetadataMinimal();        layerMetadata.setQueryable( false );        final DatasetMetadata datasetMetadata = createDatasetMetadataMinimal();        final DoublePair scaleDenominators = new DoublePair( 0.0, 999999.9 );        final Map<String, String> authorityNameToUrl = emptyMap();        themeWriter.writeTheme( writer, layerMetadata, datasetMetadata, authorityNameToUrl, scaleDenominators, null );        writer.writeEndElement();        writer.flush();        bos.close();        final InputStream is = WmsCapabilities130ThemeWriterTest.class.getResourceAsStream( "wms130_layer_minimal.xml" );        final byte[] expected = IOUtils.readBytesAndClose( is, -1 );        assertValidity( new ByteArrayInputStream( bos.toByteArray() ), SCHEMA_URL );        assertArrayEquals( expected, bos.toByteArray() );    }
@Test    public void onDeleteItem() {        elementPresenter.onDeleteItem(elementView1Mock);        verify(propertyPresenterMock, times(1)).deleteProperties(eq(ELEMENT1_ID + "#key"));        verify(propertyPresenterMock, times(1)).deleteProperties(eq(ELEMENT1_ID + "#value"));        verify(itemContainerMock, times(1)).removeFromParent();        assertFalse(elementViewListLocal.contains(elementView1Mock));        verify(collectionPresenterMock, times(1)).toggleEditingStatus(eq(false));    }
@Test(expected = InvalidArgumentException.class)  public void testUpdateObjectTypeWithExistingName() throws Exception {    UpdateObjectTypeRequest request = createRequest();    when(objectManager.getObjectType(request.getId())).thenReturn(new ObjectTypeEntity());    doThrow(InvalidArgumentException.class).when(objectTypeHandler).assertObjectTypeNotExists(request.getName());    delegate.handle(request);  }
@Test  public void testEquals() {    assertTrue(orderByNameAsc.equals(new SortCriterionImpl("name", Order.Ascending)));  }
@Test	public void testExec_3() throws Exception {		String command = "sl";		int result = 0;		try {			result = CommandExecutor.exec(command);		} catch (Exception e) {			e.printStackTrace();			result = 1;		}		assertNotSame(0, result);	}
@Test	public void testParseNonexistingField() {		String filterString = "(nonExistingField eq 'value')";		AbstractThrowableAssert exception = Assertions.assertThatThrownBy(			() -> _filterParserImpl.parse(filterString)		).isInstanceOf(			ExpressionVisitException.class		);		exception.hasMessage(			"A property used in the filter criteria is not supported: %s",			filterString);	}
@Test  public void testDistribute() throws Exception {    setUpMultiTenant();    expect(securityService.getOrganization()).andReturn(org1).anyTimes();    replay(securityService);    streamingService.activate(bundleContext, map);    MediaPackage mp = MediaPackageParser.getFromXml(            IOUtils.toString(getClass().getResourceAsStream("/mediapackage.xml"), "UTF-8"));    Job job = streamingService.distribute("channel", mp, "blah");    JobBarrier jobBarrier = new JobBarrier(null, serviceRegistry, 500, job);    jobBarrier.waitForJobs();  }
@Test    public void testEnableParameters() {        page.enableParameters();        assertTrue(page.isParametersEnabled());    }
@Test  public void testPlayerUrl() throws WorkflowOperationException, URISyntaxException {    URI engageURI = new URI("http://engage.org");    String mpId = "mp-id";    MediaPackage mp = EasyMock.createNiceMock(MediaPackage.class);    Id id = new IdImpl(mpId);    EasyMock.expect(mp.getIdentifier()).andStubReturn(id);    MediaPackageElement element = EasyMock.createNiceMock(MediaPackageElement.class);    EasyMock.replay(element, mp);    // Test configured organization player path    PublishEngageWorkflowOperationHandler publishEngagePublish = new PublishEngageWorkflowOperationHandler();    URI result = publishEngagePublish.createEngageUri(engageURI, mp);    assertEquals(engageURI.toString() + "/play/" + mpId, result.toString());  }
@Test  public void testEquivalence() throws Exception {    final List<Incident> incidents = Arrays.asList(mkIncident(1), mkIncident(2));    final List<IncidentTree> subTrees = Collections.singletonList(new IncidentTreeImpl(            Arrays.asList(mkIncident(3), mkIncident(4)),            Collections.emptyList()));    final JaxbIncidentTree dto = new JaxbIncidentTree(new IncidentTreeImpl(incidents, subTrees));    final IncidentTree tree = dto.toIncidentTree();    run(IncidentTree.class, new IncidentTree() {      @Override public List<Incident> getIncidents() {        assertEquals("incidents transferred", incidents, tree.getIncidents());        return null;      }      @Override public List<IncidentTree> getDescendants() {        assertEquals("childIncidents transferred", subTrees, tree.getDescendants());        return null;      }    });  }
@Test  public void testGetSha1Url() throws Exception {    assertThat(Resolver.getSha1Url("http://example.com/foo.pom", "jar"))        .isEqualTo("http://example.com/foo.jar.sha1");    assertThat(Resolver.getSha1Url("http://example.com/foo.pom", "aar"))        .isEqualTo("http://example.com/foo.aar.sha1");  }
@Test	public void testGetMBMessageCategoryIdReturnsMessageCategoryId() {		long categoryId = RandomTestUtil.randomInt();		MBMessage message = Mockito.mock(MBMessage.class);		Mockito.when(			message.getCategoryId()		).thenReturn(			categoryId		);		Assert.assertEquals(			categoryId,			MBUtil.getCategoryId(				Mockito.mock(HttpServletRequest.class), message));	}
@Test	public void testIncompleteTag() {		String expected = "<strong>text</strong>";		String actual = _htmlBBCodeTranslatorImpl.parse("[b]text");		Assert.assertEquals(expected, actual);	}
@Test	public void testSortDifferentMediaByMultipleAttributesInverse() {		AdaptiveMedia<AMImageProcessor> adaptiveMedia1 = _createAdaptiveMedia(			AMAttribute.getContentLengthAMAttribute(), 10L,			AMAttribute.getFileNameAMAttribute(), "zzz");		AdaptiveMedia<AMImageProcessor> adaptiveMedia2 = _createAdaptiveMedia(			AMAttribute.getContentLengthAMAttribute(), 10L,			AMAttribute.getFileNameAMAttribute(), "aaa");		long result = _multiAMAttributeDistanceComparator.compare(			adaptiveMedia2, adaptiveMedia1);		Assert.assertEquals(25, result);	}
@Test    public void writeThemeFull()                            throws Exception {        final ByteArrayOutputStream bos = new ByteArrayOutputStream();        final XMLStreamWriter writer = newInstance().createXMLStreamWriter( bos );        writer.writeStartElement( "Layer" );        XMLAdapter.writeElement( writer, "Title", "Container" );        final LayerMetadata layerMetadata = createLayerMetadata();        final DatasetMetadata datasetMetadata = createDatasetMetadataFull();        final DoublePair scaleDenominators = new DoublePair( 0.0, 999999.9 );        final Map<String, String> authorityNameToUrl = createAuthorityNameToUrlMap();        themeWriter.writeTheme( writer, layerMetadata, datasetMetadata, authorityNameToUrl, scaleDenominators, null );        writer.writeEndElement();        writer.flush();        bos.close();        final InputStream is = WmsCapabilities111ThemeWriterTest.class.getResourceAsStream( "wms111_layer_full.xml" );        final byte[] expected = IOUtils.readBytesAndClose( is, -1 );        assertArrayEquals( expected, bos.toByteArray() );    }
@Test  public void testChangeSeries() throws Exception {    WorkflowInstanceImpl instance = new WorkflowInstanceImpl();    List<WorkflowOperationInstance> ops = new ArrayList<WorkflowOperationInstance>();    WorkflowOperationInstanceImpl operation = new WorkflowOperationInstanceImpl("test", OperationState.INSTANTIATED);    ops.add(operation);    instance.setOperations(ops);    instance.setMediaPackage(mp);    MediaPackage clone = (MediaPackage) mp.clone();    operation.setConfiguration(SeriesWorkflowOperationHandler.SERIES_PROPERTY, "series1");    operation.setConfiguration(SeriesWorkflowOperationHandler.ATTACH_PROPERTY, "*");    operation.setConfiguration(SeriesWorkflowOperationHandler.APPLY_ACL_PROPERTY, "false");    WorkflowOperationResult result = operationHandler.start(instance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    MediaPackage resultingMediapackage = result.getMediaPackage();    Assert.assertEquals("series1", resultingMediapackage.getSeries());    Assert.assertEquals("Series 1", resultingMediapackage.getSeriesTitle());    Assert.assertEquals(clone.getElements().length + 1, resultingMediapackage.getElements().length);  }
@Test	public void testGetExplicitRestHighLevelClientWithRemoteModeDisabledAndDifferentConnectionId() {		setRemoteConnectionId(_REMOTE_1_CONNECTION_ID);		Assert.assertEquals(			_remoteElasticsearchConnection2.getRestHighLevelClient(),			_elasticsearchConnectionManager.getRestHighLevelClient(				_REMOTE_2_CONNECTION_ID));	}
@Test    public void testCastpp() throws Exception {        //given        final byte b0 = (byte) 0x8F;        final byte b1 = 0x7F;        final byte b2 = (byte) 0xF7;        final byte b3 = 0x00;        final byte b4 = 0x01;        final long pointer = byteArrayAsPointer(b0,                                                b1,                                                b2,                                                b3,                                                b4);        final long pointerOfPointer        = pointerOfPointer(pointer);        final long pointerOfPointerPointer = pointerOfPointer(pointerOfPointer);        //when        try (final Pointer<Pointer<Pointer<Byte>>> bytePointerPointer = wrap(Byte.class,                                                                             pointerOfPointerPointer).castpp()                                                                                                     .castpp();             final Pointer<Pointer> pointerPointer = wrap(Pointer.class,                                                          pointerOfPointer)) {            //then            assertThat(bytePointerPointer.get()                                         .get()                                         .get(4)).isEqualTo(b4);            //throws error complaining about incomplete type            this.expectedException.expect(IllegalStateException.class);            this.expectedException.expectMessage("Can not dereference void pointer.");            pointerPointer.get()                          .get();        }    }
@Test    public void testGetProcess()                            throws OWSExceptionReport, IOException {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        WPSClient wpsClient = new WPSClient( new URL( demoWPSURL ) );        org.deegree.protocol.wps.client.process.Process p1 = wpsClient.getProcess( "Buffer", null );        Assert.assertNotNull( p1 );        org.deegree.protocol.wps.client.process.Process p2 = wpsClient.getProcess( "ParameterDemoProcess", null );        Assert.assertNotNull( p2 );    }
@Test  public void badInputUnzipStrStr() throws Exception {    File destFile = new File(destDir, "badInputStrStr");    try {      // Null input filename, correct destination filename      try {        ZipUtil.unzip((String) null, destFile.getCanonicalPath());        logger.error("Unzip should fail when input filename is null");        Assert.fail("Unzip should fail when input filename is null");      } catch (IllegalArgumentException e) {        logger.debug("Detecting null input filename (String, String): OK");      }      // Empty input filename, correct destination filename      try {        ZipUtil.unzip("", destFile.getCanonicalPath());        logger.error("Unzip should fail when input filename is empty");        Assert.fail("Unzip should fail when input filename is empty");      } catch (IllegalArgumentException e) {        logger.debug("Detecting empty input filename (String, String): OK");      }      // Correct input filename, null destination filename      try {        ZipUtil.unzip(sampleZip.getCanonicalPath(), (String) null);        logger.error("Unzip should fail when destination filename is null");        Assert.fail("Unzip should fail when destination filename is null");      } catch (IllegalArgumentException e) {        logger.debug("Detecting null destination filename (String, String): OK");      }      // Correct input filename, empty destination filename      try {        ZipUtil.unzip(sampleZip.getCanonicalPath(), "");        logger.error("Unzip should fail when destination filename is empty");        Assert.fail("Unzip should fail when destination filename is empty");      } catch (IllegalArgumentException e) {        logger.debug("Detecting empty destination filename (String, String): OK");      }      // Non-existing input filename, correct destination filename      try {        ZipUtil.unzip(dummieFile.getCanonicalPath(), destFile.getCanonicalPath());        logger.error("Unzip should fail when the input filename doesn't exists");        Assert.fail("Unzip should fail when the input filename doesn't exists");      } catch (FileNotFoundException e) {        logger.debug("Detecting existing input filename (String, String): OK");      }      // Invalid input filename (using a regular file as input), correct destination filename      try {        ZipUtil.unzip(srcFile.getCanonicalPath(), destFile.getCanonicalPath());        logger.error("Unzip should fail when the input filename does not represent a zip file");        Assert.fail("Unzip should fail when the input filename does not represent a zip file");      } catch (IllegalArgumentException e) {        logger.debug("Detecting input filename not representing a valid zip file (String, String): OK");      }      // Correct input filename, invalid destination filename (some existing regular file rather than a dir)      try {        ZipUtil.unzip(sampleZip.getCanonicalPath(), srcFile.getCanonicalPath());        logger.error("Unzip should fail when the destination filename does not represent a directory");        Assert.fail("Unzip should fail when the destination filename does not represent a directory");      } catch (IllegalArgumentException e) {        logger.debug("Detecting destination filename not representing a directory (String, String): OK");      }    } catch (Exception e) {      logger.error("Another exception was expected, but got {} instead: {}", e.getClass().getName(), e.getMessage());      Assert.fail("Another exception was expected, but got " + e.getClass().getName() + "instead: " + e.getMessage());    }  }
@Test(description = "test method for setResourceAuthTypes")    public void testSetResourceAuthTypes() throws UserStoreException {        ServletContext servletContext = new MockServletContext();        APIResourceConfiguration apiDef = new APIResourceConfiguration();        List<APIResource> resources = new ArrayList<>();        apiDef.setResources(resources);        APIConfig apiConfig = buildApiConfig(servletContext, apiDef);        apiConfig.setContext("/*");        TestUtils util = new TestUtils();        util.setAPIURITemplates(apiConfig, "/*");        Assert.assertNotNull(apiConfig, "API configuration is null.");        setResourceAuthTypes(servletContext, apiConfig);        Set<ApiUriTemplate> templates = apiConfig.getUriTemplates();        Assert.assertEquals(templates.iterator().next().getAuthType(), AUTH_TYPE_NON_SECURED, "Resource " +                "auth type is not properly set");    }
@Test  public void testGetSegmentStop() {    assertNotNull(segments);    for (MediaSegment segment : segments) {      assertNotNull(segment);      if (segment.getSegmentStop() != 10              || segment.getSegmentStop() != 50              || segment.getSegmentStop() != 120) {        fail("MediaSegment returned invalid stop position!");      }    }  }
@Test  public void testAssertObjectTypesToBindExistWithoutSourceAndDestination() {    List<FactObjectBindingDefinition> definitions = ListUtils.list(new FactObjectBindingDefinition());    try {      helper.assertObjectTypesToBindExist(definitions, "property");      fail();    } catch (InvalidArgumentException ignored) {    }    verifyZeroInteractions(objectManager);  }
@Test    public void testZoom169() throws Exception {        // zooming 16x9 assumes that the content is 16x9 letterbox, so we need a smaller        // 16x9 rectangle inside the larger one.        // this is done by picking a 4/3 rectangle, and then finding the 16x9 rectangle        // and then scaling that rectangle around the original 16x9 rectangle        // the result is a 16x9 super rectangle scaled so that the middle 16x9 rectangle        // matches the video size you want        RectangleF r169 = new RectangleF(0,0,1920,1080);        Rectangle test = AspectHelper.zoom(r169, AspectHelper.ar_16_9).asIntRect();        assertEquals(-320, test.x);        assertEquals(-180, test.y);        assertEquals(2560, test.width);        assertEquals(1440, test.height);        // prove that doing the same thing with smaller rectangle can then be translated to other coordinate system        r169 = new RectangleF(0,0,1280,720);        RectangleF rtrans = AspectHelper.zoom(r169, AspectHelper.ar_16_9).translateImmutable(r169, new RectangleF(0,0,1920,1080));        System.out.println(rtrans);        test= rtrans.asIntRect();        assertEquals(-320, test.x);        assertEquals(-180, test.y);        assertEquals(2560, test.width);        assertEquals(1440, test.height);    }
@Test    public void testOperationResponseParameters() throws Exception {        AWSServiceHandlerManifest serviceManifest = mapper.readValue(testParameterWhitelist, AWSServiceHandlerManifest.class);        AWSOperationHandlerManifest operationManifest = serviceManifest.getOperationHandlerManifest("DynamoDb");        AWSOperationHandler operationHandler = operationManifest.getOperationHandler("DeleteItem");        HashSet<String> parameters = operationHandler.getResponseParameters();        Assert.assertEquals(true, parameters.contains("ConsumedCapacity"));        Assert.assertEquals(true, parameters.contains("ItemCollectionMetrics"));    }
@Test public void testToString() {    assertEquals(      "killmap.runners.communication.WorkOrderTest$DummyTestCase#testThatPasses,3,100",      (new WorkOrder(passingTest, 3, (long)100)).toString());  }
@Test  public void testAssertObjectTypesToBindExistFailsOnSource() {    UUID sourceObjectType = UUID.randomUUID();    List<FactObjectBindingDefinition> definitions = ListUtils.list(new FactObjectBindingDefinition()            .setSourceObjectType(sourceObjectType)    );    try {      helper.assertObjectTypesToBindExist(definitions, "property");      fail();    } catch (InvalidArgumentException ignored) {    }    verify(objectManager).getObjectType(sourceObjectType);  }
@Test	public void testWriteConfValue_1() throws Exception {		String propertyName = "a";		String propertyValue = "b";		String filePath = "abcdef.xml";		boolean result = xmlManipulator.writeConfValue(filePath, propertyName,				propertyValue);		assertEquals(false, result);	}
@Test(description = "This method tests the removeUser method of UserManagementService", dependsOnMethods =            "testInviteToEnrollDevice")    public void testRemoveUser() throws DeviceManagementException, UserStoreException {        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getUserStoreManager"))                .toReturn(this.userStoreManager);        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getDeviceManagementService"))                .toReturn(this.deviceManagementProviderService);        Mockito.doReturn(true).when(deviceManagementProviderService).setStatus(Mockito.anyString(), Mockito.any());        Mockito.doNothing().when(userStoreManager).deleteUser(Mockito.anyString());        Response response = userManagementService.removeUser(TEST_USERNAME, null);        Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode(),                "Cannot remove user, the request failed");        response = userManagementService.removeUser(TEST2_USERNAME, null);        Assert.assertEquals(response.getStatus(), Response.Status.NOT_FOUND.getStatusCode(),                "Successfully removed non-existing user");    }
@Test  public void testWorkflowDispatcherJobInProgressTooLongWithMaxAttempts() throws Exception {    props.put(IBMWatsonTranscriptionService.MAX_ATTEMPTS_CONFIG, 2);    props.put(IBMWatsonTranscriptionService.RETRY_WORKLFOW_CONFIG, RETRY_WORKFLOW);    service.activate(cc);    InputStream stream = IBMWatsonTranscriptionServiceTest.class.getResourceAsStream("/" + IN_PROGRESS_JOB);    HttpEntity httpEntity = EasyMock.createNiceMock(HttpEntity.class);    EasyMock.expect(httpEntity.getContent()).andReturn(stream);    CloseableHttpResponse response = EasyMock.createNiceMock(CloseableHttpResponse.class);    StatusLine status = EasyMock.createNiceMock(StatusLine.class);    EasyMock.expect(response.getStatusLine()).andReturn(status).anyTimes();    EasyMock.expect(response.getEntity()).andReturn(httpEntity).anyTimes();    EasyMock.expect(status.getStatusCode()).andReturn(HttpStatus.SC_OK).anyTimes();    EasyMock.replay(httpEntity, response, status);    Capture<HttpGet> capturedGet = Capture.newInstance();    EasyMock.expect(httpClient.execute(EasyMock.capture(capturedGet))).andReturn(response).anyTimes();    EasyMock.replay(httpClient);    database.storeJobControl(MP_ID, TRACK_ID, JOB_ID, TranscriptionJobControl.Status.InProgress.name(), 0, DATE_EXPECTED, PROVIDER);    Capture<Set<String>> capturedMpIds = mockAssetManagerAndWorkflow(RETRY_WORKFLOW, true);    EasyMock.replay(workspace);    WorkflowDispatcher dispatcher = service.new WorkflowDispatcher();    dispatcher.run();    // Check if it called the external service to get the results    Assert.assertEquals(WATSON_URL + "/v1/recognitions/" + JOB_ID, capturedGet.getValue().getURI().toString());    // Check if the job status was updated and email was sent    TranscriptionJobControl j = database.findByJob(JOB_ID);    Assert.assertNotNull(j);    Assert.assertEquals(TranscriptionJobControl.Status.Error.toString(), j.getStatus());  }
@Test  public void test_provider_for_allowAllStrategy() {    assertThat(strategyFor(AllowedToAllObject.class)).isSameAs(allowAllStrategy);  }
@Test  public void testParsingUserInfoContainExclamationMark(){      uri = "mysql://user!name:dd!dd@127.0.0.1:3306/dbname";      actualParsedResult = parse(uri);  }
@Test    public void optionsAndDescriptionsWithinOverallWidth() {        Rows rows = new Rows( 40, 2 );        rows.add( "left one", "right one" );        rows.add( "another left one", "another right one" );        assertRows( rows,                "left one          right one        ",                "another left one  another right one" );    }
@Test	public void testSerializeSetRequired() {		DefaultDDMFormRuleAction defaultDDMFormRuleAction =			new DefaultDDMFormRuleAction("require", "field0");		DefaultDDMFormRuleActionSerializer defaultDDMFormRuleActionSerializer =			new DefaultDDMFormRuleActionSerializer(defaultDDMFormRuleAction);		String result = defaultDDMFormRuleActionSerializer.serialize(			_spiDDMFormRuleSerializerContext);		Assert.assertEquals("setRequired('field0', true)", result);	}
@Test	public void testGetRelatedQueriesSuggestions() {		List<SuggestionDisplayContext> suggestionDisplayContexts =			buildRelatedQueriesSuggestions(Arrays.asList("alpha"));		assertSuggestion(			"[alpha] | q=X(q<<alpha)", suggestionDisplayContexts.get(0));	}
@Test    public void testRDRLFile() {        final Path pathSource = mock(Path.class);        final Path pathDestination = mock(Path.class);        when(pathSource.toURI()).thenReturn("file://p0/src/main/resources/MyFile.rdrl");        when(pathDestination.toURI()).thenReturn("file://p0/src/main/resources/MyNewFile.rdrl");        when(pathDestination.getFileName()).thenReturn("MyNewFile.rdrl");        when(ioService.readAllString(any(org.uberfire.java.nio.file.Path.class))).thenReturn(drl);        helper.postProcess(pathSource,                           pathDestination);        final ArgumentCaptor<String> drlArgumentCaptor = ArgumentCaptor.forClass(String.class);        verify(ioService,               times(1)).write(any(org.uberfire.java.nio.file.Path.class),                               drlArgumentCaptor.capture(),                               any(CommentedOption.class));        final String newDrl = drlArgumentCaptor.getValue();        assertNotNull(newDrl);        assertTrue(newDrl.contains("MyNewFile"));    }
@Test  public void testClearParagraphOutput() throws IOException, SchedulerException{    Note note = notebook.createNote(null);    Paragraph p1 = note.addParagraph();    Map config = p1.getConfig();    config.put("enabled", true);    p1.setConfig(config);    p1.setText("hello world");    note.run(p1.getId());    while(p1.isTerminated()==false || p1.getResult()==null) Thread.yield();    assertEquals("repl1: hello world", p1.getResult().message());    // clear paragraph output/result    note.clearParagraphOutput(p1.getId());    assertNull(p1.getResult());  }
@Test  public void testIterateVerticesWithUuidIdSupportUsingDetachedVertex() {    Vertex vertex1 = createVertex();    Vertex vertex2 = getActGraph().vertices(DetachedFactory.detach(vertex1, true)).next();    assertEquals(vertex1.id(), vertex2.id());    assertFalse(vertex2 instanceof DetachedVertex);  }
@Test    public void checkConstructContentPopulateProjectCollectionTypes() {        final Path path = mock(Path.class);        final Overview overview = mock(Overview.class);        final PackageDataModelOracle oracle = mock(PackageDataModelOracle.class);        when(path.toURI()).thenReturn("file://project/src/main/resources/mypackage/rule.template");        when(dataModelService.getDataModel(any())).thenReturn(oracle);        when(oracle.getPackageGlobals()).thenReturn(new HashMap<String, String>() {{            put("number",                "java.lang.Number");            put("collection",                "java.util.Collection");        }});        when(oracle.getModuleCollectionTypes()).thenReturn(new HashMap<String, Boolean>() {{            put("java.util.List",                true);            put("java.util.Set",                true);            put("java.util.Collection",                true);            put("java.util.UnknownCollection",                false);        }});        final GuidedTemplateEditorContent content = service.constructContent(path,                                                                             overview);        assertEquals(3,                     content.getDataModel().getCollectionTypes().size());        assertTrue(content.getDataModel().getCollectionTypes().containsKey("java.util.Collection"));        assertTrue(content.getDataModel().getCollectionTypes().containsKey("java.util.List"));        assertTrue(content.getDataModel().getCollectionTypes().containsKey("java.util.Set"));    }
@Test  public void testFetchOrigin() throws Exception {    OriginEntity origin = new OriginEntity()            .setId(UUID.randomUUID())            .setOrganizationID(UUID.randomUUID());    when(originResolver.apply(origin.getId())).thenReturn(origin);    delegate.handle(new GetOriginByIdRequest().setId(origin.getId()));    verify(originResolver).apply(origin.getId());    verify(originResponseConverter).apply(origin);    verify(securityContext).checkPermission(TiFunctionConstants.viewThreatIntelOrigin);    verify(securityContext).checkReadPermission(origin);  }
@Test  public void mkdirComplexPathTest() throws IOException, AlluxioException {    InterpreterResult output = alluxioInterpreter.interpret(            "mkdir /Complex!@#$%^&*()-_=+[]{};\"'<>,.?/File", null);    boolean existsDir = fs.exists(new AlluxioURI("/Complex!@#$%^&*()-_=+[]{};\"'<>,.?/File"));    Assert.assertEquals(            "Successfully created directory /Complex!@#$%^&*()-_=+[]{};\"'<>,.?/File\n\n",            output.message());    Assert.assertTrue(existsDir);  }
@Test  public void validDeserializeTest() throws Exception  {    final Map<String, Type> fieldToType = Maps.newHashMap();    final String tboolean = "tboolean";    final Boolean tbooleanv = true;    final String tchar = "tchar";    final Character tcharv = 'A';    final String tstring = "tstring";    final String tstringv = "hello";    final String tfloat = "tfloat";    final Float tfloatv = 1.0f;    final String tdouble = "tdouble";    final Double tdoublev = 2.0;    final String tbyte = "tbyte";    final Byte tbytev = 50;    final String tshort = "tshort";    final Short tshortv = 1000;    final String tinteger = "tinteger";    final Integer tintegerv = 100000;    final String tlong = "tlong";    final Long tlongv = 10000000000L;    fieldToType.put(tboolean, Type.BOOLEAN);    fieldToType.put(tchar, Type.CHAR);    fieldToType.put(tstring, Type.STRING);    fieldToType.put(tfloat, Type.FLOAT);    fieldToType.put(tdouble, Type.DOUBLE);    fieldToType.put(tbyte, Type.BYTE);    fieldToType.put(tshort, Type.SHORT);    fieldToType.put(tinteger, Type.INTEGER);    fieldToType.put(tlong, Type.LONG);    JSONObject jo = new JSONObject();    jo.put(tboolean, tbooleanv);    jo.put(tchar, tcharv);    jo.put(tstring, tstringv);    jo.put(tfloat, tfloatv);    jo.put(tdouble, tdoublev);    jo.put(tbyte, tbytev);    jo.put(tshort, tshortv);    jo.put(tinteger, tintegerv);    jo.put(tlong, tlongv);    String json = jo.toString(2);    logger.debug("Input json: {}", json);    GPOMutable gpom = GPOUtils.deserialize(new FieldsDescriptor(fieldToType), jo);    Assert.assertEquals("Results must equal", tbooleanv, gpom.getField(tboolean));    Assert.assertEquals("Results must equal", tcharv, gpom.getField(tchar));    Assert.assertEquals("Results must equal", tfloatv, gpom.getField(tfloat));    Assert.assertEquals("Results must equal", tdoublev, gpom.getField(tdouble));    Assert.assertEquals("Results must equal", tbytev, gpom.getField(tbyte));    Assert.assertEquals("Results must equal", tshortv, gpom.getField(tshort));    Assert.assertEquals("Results must equal", tintegerv, gpom.getField(tinteger));    Assert.assertEquals("Results must equal", tlongv, gpom.getField(tlong));  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testCreateViewIndexMainView() {        GraphStore graphStore = new GraphStore();        graphStore.nodeTable.store.indexStore.createViewIndex(graphStore);    }
@Test(expected = IllegalArgumentException.class)    public void checkUniquePropertyHeaderTitle_AssignedLabel() {        abstractScesimGridModelSpy.checkUniquePropertyHeaderTitle(GRID_PROPERTY_TITLE, COLUMN_INDEX);    }
@Test	public void testGetDDMFormFromDDMStructureVersion1() {		DDMForm ddmForm = _ddmStructureVersion.getDDMForm();		Assert.assertTrue(			ddmForm.equals(				_ddmFormTaglibUtil.getDDMForm(					0, _ddmStructureVersion.getStructureId())));	}
@Test    public void getParametricFieldType() {        kogitoDMODataManagementStrategySpy.getParametricFieldType(FACT_NAME, "propertyName");        verify(oracleMock, times(1)).getParametricFieldType(eq(FACT_NAME), eq("propertyName"));    }
@Test    public void testFeedImpl() {        try {            Content title = new PlainTextContent("Test Feed");            Content description = new HtmlContent("generated by <b>unit test</b>", Mode.Escaped);            FeedImpl feed = new FeedImpl(Type.RSS, "http://localhost:8080/feeds/rss/2.0/test", title, description,                    "http://localhost:8080/feeds/rss/2.0/test");            feed.addAuthor(new PersonImpl("Test User", "testuser@example.com", "http://www.example.com/testuser"));            feed.addContributor(new PersonImpl("test university"));            FeedEntry entry = new FeedEntryImpl(feed, "test entry", new LinkImpl(                    "http://localhost:8080/feeds/rss/2.0/test/testentry"),                    "http://localhost:8080/feeds/rss/2.0/test/testentry");            entry.addEnclosure(new EnclosureImpl("http://www.example.com/video.mp4", "video/mp4", "presenter/delivery", 12));            feed.addEntry(entry);            ITunesFeedExtension itunesmodule = new ITunesFeedExtension();            itunesmodule.addKeyword("test");            List<String> categories = new LinkedList<String>();            categories.add("Higher Education");            itunesmodule.setCategories(categories);            feed.addModule(itunesmodule);            DublinCoreExtension dcModule = new DublinCoreExtension();            feed.addModule(dcModule);            Assert.assertEquals(feed.getAuthors().get(0).getName(), "Test User");            Assert.assertEquals(feed.getAuthors().get(0).getEmail(), "testuser@example.com");            Assert.assertEquals(feed.getContributors().get(0).getName(), "test university");            Assert.assertEquals(feed.getTitle().getValue(), "Test Feed");            Assert.assertEquals(feed.getDescription().getType(), "text/html");            Assert.assertEquals(feed.getType(), Type.RSS);            Assert.assertEquals(feed.getLink(), "http://localhost:8080/feeds/rss/2.0/test");        } catch (Exception e) {            Assert.fail();        }        // Todo test Services... but this cannot be done outside OSGI and the servlet Container, so this has to be done by        // an integration test.    }
@Test  public void testCreateTable() {    String sql = "CREATE TABLE table123 (uid INT)";    QueryEvent event = new QueryEvent(1L, TIMESTAMP, BINLOG_FILE_POS, "db1", sql);    List<MysqlColumn> newTableColumns =        Collections.singletonList(new MysqlColumn("uid", "int", "int", false));    when(schemaDatabase.getColumnsForAllTables("db1"))        .thenReturn(            ImmutableMap.of(                "table1", TABLE1_COLUMNS, "table2", TABLE2_COLUMNS, "table123", newTableColumns));    schemaManager.processDDL(event, GTID);    verify(schemaDatabase).applyDDL(sql, "db1");    verify(schemaStore)        .put(            new MysqlTableSchema(                0,                "db1",                "table123",                BINLOG_FILE_POS,                GTID,                sql,                TIMESTAMP,                newTableColumns,                Collections.emptyMap()));  }
@Test	public void testReturnsBlankForBlankContent() throws Exception {		Assert.assertEquals(			StringPool.BLANK, _contentTransformer.transform(StringPool.BLANK));	}
@Test	public void testNoMediaFoundWithException() throws Exception {		Mockito.when(			_httpServletRequest.getPathInfo()		).thenReturn(			RandomTestUtil.randomString()		);		Mockito.when(			(AMRequestHandler<Object>)_amRequestHandlerLocator.locateForPattern(				Mockito.anyString())		).thenReturn(			(AMRequestHandler<Object>)_amRequestHandler		);		Mockito.when(			_amRequestHandler.handleRequest(_httpServletRequest)		).thenThrow(			AMException.AMNotFound.class		);		_amServlet.doGet(_httpServletRequest, _httpServletResponse);		Mockito.verify(			_httpServletResponse		).sendError(			Mockito.eq(HttpServletResponse.SC_NOT_FOUND), Mockito.anyString()		);	}
@Test public void testContract() {		// Act + Assert:		assertThat(FragmentAnnotations.isEnabled(), is(true));	}
@Test(expected = ApiMediaTypeException.class)  public void testParseJsonWithInvalidVersion() throws Exception {    ApiMediaType.parse("application/v0.0.0+json");  }
@Test	public void testHashCode() {		AtomicInteger longLivedNextHasCode = ReflectionTestUtil.getFieldValue(			CentralizedThreadLocal.class, "_longLivedNextHasCode");		AtomicInteger shortLivedNextHasCode = ReflectionTestUtil.getFieldValue(			CentralizedThreadLocal.class, "_shortLivedNextHasCode");		Random random = new Random();		int longLivedHashCode = random.nextInt();		int shortLivedHashCode = random.nextInt();		longLivedNextHasCode.set(longLivedHashCode);		shortLivedNextHasCode.set(shortLivedHashCode);		CentralizedThreadLocal<?> longLivedCentralizedThreadLocal =			new CentralizedThreadLocal<>(false);		CentralizedThreadLocal<?> shortLivedCentralizedThreadLocal =			new CentralizedThreadLocal<>(true);		Assert.assertEquals(			longLivedHashCode, longLivedCentralizedThreadLocal.hashCode());		Assert.assertEquals(			shortLivedHashCode, shortLivedCentralizedThreadLocal.hashCode());		longLivedCentralizedThreadLocal = new CentralizedThreadLocal<>(false);		shortLivedCentralizedThreadLocal = new CentralizedThreadLocal<>(true);		int hashIncrement = ReflectionTestUtil.getFieldValue(			CentralizedThreadLocal.class, "_HASH_INCREMENT");		Assert.assertEquals(			longLivedHashCode + hashIncrement,			longLivedCentralizedThreadLocal.hashCode());		Assert.assertEquals(			shortLivedHashCode + hashIncrement,			shortLivedCentralizedThreadLocal.hashCode());		Assert.assertEquals(			longLivedHashCode + (hashIncrement * 2),			longLivedNextHasCode.get());		Assert.assertEquals(			shortLivedHashCode + (hashIncrement * 2),			shortLivedNextHasCode.get());	}
@Test  public void testValidateIdEquality() {    Vertex vertex1 = createVertex();    Vertex vertex2 = createVertex();    assertEquals(vertex1.id(), vertex1.id());    assertEquals(vertex2.id(), vertex2.id());    assertNotEquals(vertex1.id(), vertex2.id());  }
@Test	public void testNamedRange() {		Calendar calendar = new GregorianCalendar(			2018, Calendar.MARCH, 1, 16, 30, 42);		Assert.assertEquals(			"[20180301153042 TO 20180301163042]",			_dateRangeFactory.getRangeString("past-hour", calendar));		Assert.assertEquals(			"[20180228163042 TO 20180301163042]",			_dateRangeFactory.getRangeString("past-24-hours", calendar));	}
@Test    public void testContainsAll() {        EdgeStore edgeStore = new EdgeStore();        EdgeImpl[] edges = GraphGenerator.generateEdgeList(3);        edgeStore.addAll(Arrays.asList(edges));        Assert.assertTrue(edgeStore.containsAll(Arrays.asList(edges)));    }
@Test    public void testEnumHasPriorityButSimpleOperatorInteger() throws Exception {        testEnumAndOperator(DataType.TYPE_NUMERIC_INTEGER, "==");        verify(testedFactory).decoratedGridCellValueAdaptor(puddCaptor.capture());        assertTrue(puddCaptor.getValue() instanceof ProxyPopupNumericIntegerDropDownEditCell);    }
@Test  public void testEncode() throws Exception {    Response response = restService.encode(generateVideoTrack(), profileId);    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());    Assert.assertEquals(new JaxbJob(job), response.getEntity());  }
@Test  public void testSearchFactsWithLimitAboveMaxLimit() throws Exception {    mockSearch(1);    doThrow(AccessDeniedException.class).when(securityContext).checkPermission(TiFunctionConstants.unlimitedThreatIntelSearch);    FactSearchCriteria criteria = createFactSearchCriteria(b -> b.setLimit(10001));    ResultSet<Fact> result = handler.search(criteria, null);    assertEquals(10000, result.getLimit());    assertEquals(1, result.getCount());    assertEquals(1, ListUtils.list(result.iterator()).size());  }
@Test    public void columnShown() {        presenter.setShowRuleName(true);        verify(view).setShowRuleName(true);    }
@Test    public void checkHandlesMoveColumnsToWithEmptyMetadata() throws VetoException {        final LimitedEntryBRLActionColumnSynchronizer synchronizer = new LimitedEntryBRLActionColumnSynchronizer();        assertFalse(synchronizer.handlesMoveColumnsTo(Collections.emptyList()));    }
@Test    public void testGetDatasetMetadata()                            throws Exception {        DefaultOWSMetadataProvider metadataProvider = createProvider();        List<DatasetMetadata> datasetMetadata = metadataProvider.getDatasetMetadata();        assertThat( datasetMetadata.size(), is( 3 ) );    }
@Test	public void testSystemCompanyIndexIsReplicatedAndMigrated()		throws Exception {		long companyId = RandomTestUtil.randomLong();		setUpCompanyLocalService(companyId);		ElasticsearchClientResolver elasticsearchClientResolver1 = createNode(			1);		IndexCreator indexCreator1 = new IndexCreator() {			{				setElasticsearchClientResolver(elasticsearchClientResolver1);			}		};		indexCreator1.createIndex(getTestIndexName(CompanyConstants.SYSTEM));		ElasticsearchClientResolver elasticsearchClientResolver2 = createNode(			2);		assert1PrimaryShardAnd2Nodes(elasticsearchClientResolver1);		IndexCreator indexCreator2 = new IndexCreator() {			{				setElasticsearchClientResolver(elasticsearchClientResolver2);			}		};		indexCreator2.createIndex(getTestIndexName(companyId));		assert2PrimaryShardsAnd2Nodes(elasticsearchClientResolver2);		RestHighLevelClient restHighLevelClient =			elasticsearchClientResolver1.getRestHighLevelClient();		ReplicasManager replicasManager = new ReplicasManagerImpl(			restHighLevelClient.indices());		replicasManager.updateNumberOfReplicas(			1, _replicasClusterContext.getTargetIndexNames());		assert2PrimaryShards1ReplicaAnd2Nodes(elasticsearchClientResolver1);		createNode(3);		createNode(4);		_testCluster.destroyNode(1);		waitForShardReroute();		assert2PrimaryShards1ReplicaAnd3Nodes(elasticsearchClientResolver2);	}
@Test	public void testGetPartialMatchExecutor() {		Assert.assertEquals("/", _executorPathResolver.getExecutorPath("/xyz"));		Assert.assertEquals(			"/server/log",			_executorPathResolver.getExecutorPath("/server/log/xyz"));		Assert.assertEquals(			"/plugins", _executorPathResolver.getExecutorPath("/plugins/xyz"));	}
@Test    public void testEnableDrag_Pinned_DifferentModeller() {        builder.onDecisionTablePinnedEvent(new DecisionTablePinnedEvent(mock(GuidedDecisionTableModellerView.Presenter.class),                                                                        true));        verify(view,               never()).enableDrag(any(Boolean.class));    }
@Test	public void testPrintf() {		StringWriter stringWriter = new StringWriter();		UnsyncPrintWriter unsyncPrintWriter = new UnsyncPrintWriter(			stringWriter);		unsyncPrintWriter.printf("%2$2d %1$2s", "a", 1);		Assert.assertEquals(" 1  a", stringWriter.toString());		StringBuffer stringBuffer = stringWriter.getBuffer();		stringBuffer.setLength(0);		unsyncPrintWriter.printf("%1$s", "reuse formatter");		Assert.assertEquals("reuse formatter", stringWriter.toString());		stringBuffer.setLength(0);		unsyncPrintWriter.printf(Locale.CANADA, "%1$s", "replace formatter");		Assert.assertEquals("replace formatter", stringWriter.toString());		unsyncPrintWriter.close();		unsyncPrintWriter.printf(Locale.getDefault(), null);		Assert.assertTrue(unsyncPrintWriter.checkError());	}
@Test  public void testMap() throws Exception {    Mapper<Object, Integer> mapper =        ClassBasedMapper.<Object, Integer>builder()            .addMapper(Float.class, Math::round)            .addMapper(String.class, Integer::parseInt)            .build();    assertEquals(new Integer(1), mapper.map(new Float(1.2)));    assertEquals(new Integer(3), mapper.map("3"));  }
@Test	public void testReplaceAliasPastWeek() {		Calendar calendar = new GregorianCalendar(			2018, Calendar.MAY, 15, 23, 59, 59);		Assert.assertEquals(			"[20180508235959 TO 20180514235959]",			_dateRangeFactory.replaceAliases(				"[past-week TO past-24-hours]", calendar));	}
@Test    public void setCell() {        abstractScesimGridModelSpy.setCell(ROW_INDEX, COLUMN_INDEX, gridCellSupplier);        verify(abstractScesimGridModelSpy, times(1)).setCell(eq(ROW_INDEX), eq(COLUMN_INDEX), eq(gridCellSupplier));    }
@Test public void testOnCreateOptionsMenuWhenAnnotationsAreDisabled() {		// Arrange:		FragmentAnnotations.setEnabled(false);		final ActionBarFragment fragment = new TestFragment();		final Menu mockMenu = mock(Menu.class);		final MenuInflater mockMenuInflater = mock(MenuInflater.class);		// Act:		fragment.onCreateOptionsMenu(mockMenu, mockMenuInflater);		// Assert:		verifyZeroInteractions(mockMenu, mockMenuInflater);	}
@Test(expectedExceptions = IllegalArgumentException.class)    public void testDefaultValueWrongType() {        TableImpl<Node> table = new TableImpl<Node>(Node.class, false);        Float defaultValue = 25f;        table.addColumn("Id", null, Integer.class, Origin.DATA, defaultValue, false);    }
@Test(expected = SegmentNotFoundException.class)    public void testBeginSubsegmentOnEmptyThreadThrowsExceptionByDefault() {        AWSXRay.beginSubsegment("test");    }
@Config(sdk = Build.VERSION_CODES.LOLLIPOP)	@Test public void testInflateTransitionOnLollipopApiLevel() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final BaseFragment fragment = new TestFragment();		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		// Act + Assert:		assertThat(				fragment.inflateTransition(android.R.transition.fade),				is(Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP ? notNullValue() : nullValue())		);	}
@Test    public void test04() {        SpelShardRouteRule strRule = new SpelShardRouteRule("{scName}_{format('%02d', sdValue.hashCode() % 4)}",                                                            "{tbName}_{format('%04d', sdValue.hashCode() % 16)}");        Map<ShardRouteInfo, List<RangeShardValue>> map = strRule.groupSdValuesByRouteInfo("db", "user",                                                                                          new RangeShardValue(0L, 31L));        Map<ShardRouteInfo, List<RangeShardValue>> r = new LinkedHashMap<>();        r.put(new ShardRouteInfo("db_00", "user_0000"),              Arrays.asList(new RangeShardValue(0L, 0L), new RangeShardValue(16L, 16L)));        r.put(new ShardRouteInfo("db_01", "user_0001"),              Arrays.asList(new RangeShardValue(1L, 1L), new RangeShardValue(17L, 17L)));        r.put(new ShardRouteInfo("db_02", "user_0002"),              Arrays.asList(new RangeShardValue(2L, 2L), new RangeShardValue(18L, 18L)));        r.put(new ShardRouteInfo("db_03", "user_0003"),              Arrays.asList(new RangeShardValue(3L, 3L), new RangeShardValue(19L, 19L)));        r.put(new ShardRouteInfo("db_00", "user_0004"),              Arrays.asList(new RangeShardValue(4L, 4L), new RangeShardValue(20L, 20L)));        r.put(new ShardRouteInfo("db_01", "user_0005"),              Arrays.asList(new RangeShardValue(5L, 5L), new RangeShardValue(21L, 21L)));        r.put(new ShardRouteInfo("db_02", "user_0006"),              Arrays.asList(new RangeShardValue(6L, 6L), new RangeShardValue(22L, 22L)));        r.put(new ShardRouteInfo("db_03", "user_0007"),              Arrays.asList(new RangeShardValue(7L, 7L), new RangeShardValue(23L, 23L)));        r.put(new ShardRouteInfo("db_00", "user_0008"),              Arrays.asList(new RangeShardValue(8L, 8L), new RangeShardValue(24L, 24L)));        r.put(new ShardRouteInfo("db_01", "user_0009"),              Arrays.asList(new RangeShardValue(9L, 9L), new RangeShardValue(25L, 25L)));        r.put(new ShardRouteInfo("db_02", "user_0010"),              Arrays.asList(new RangeShardValue(10L, 10L), new RangeShardValue(26L, 26L)));        r.put(new ShardRouteInfo("db_03", "user_0011"),              Arrays.asList(new RangeShardValue(11L, 11L), new RangeShardValue(27L, 27L)));        r.put(new ShardRouteInfo("db_00", "user_0012"),              Arrays.asList(new RangeShardValue(12L, 12L), new RangeShardValue(28L, 28L)));        r.put(new ShardRouteInfo("db_01", "user_0013"),              Arrays.asList(new RangeShardValue(13L, 13L), new RangeShardValue(29L, 29L)));        r.put(new ShardRouteInfo("db_02", "user_0014"),              Arrays.asList(new RangeShardValue(14L, 14L), new RangeShardValue(30L, 30L)));        r.put(new ShardRouteInfo("db_03", "user_0015"),              Arrays.asList(new RangeShardValue(15L, 15L), new RangeShardValue(31L, 31L)));        Assert.equals(map, r);    }
@Test    public void testSetEditingPattern() {        final ActionWrapper actionWrapper = mock(ActionWrapper.class);        final PatternWrapper patternWrapper = mock(PatternWrapper.class);        when(plugin.editingWrapper()).thenReturn(actionWrapper);        when(patternWrapper.getFactType()).thenReturn("factType");        when(patternWrapper.getBoundName()).thenReturn("boundName");        plugin.setEditingPattern(patternWrapper);        verify(actionWrapper).setFactField("");        verify(actionWrapper).setFactType("factType");        verify(actionWrapper).setBoundName("boundName");        verify(actionWrapper).setType("");        verify(plugin).fireChangeEvent(patternPage);        verify(plugin).fireChangeEvent(fieldPage);        verify(plugin).fireChangeEvent(additionalInfoPage);    }
@Test    public void conditionIsPartOfAPattern() {        final AtomicBoolean calledBack = new AtomicBoolean( false );        setupLimitedEntryPatternAndCondition();        builder.generateDefinition( dtPresenter,                                    model.getExpandedColumns().get( 3 ),                                    ( String definition ) -> {                                        calledBack.set( true );                                        assertEquals( "$p : Person( name == \"Michael\" )",                                                      definition );                                    } );        assertTrue( calledBack.get() );    }
@Test(description = "This method tests whether the bundle activator does not throw any exceptions, even under "            + "possible exception scenarios")    public void testActivateWithException() {        WebappAuthenticatorFrameworkServiceComponent webappAuthenticatorFrameworkServiceComponent = new                WebappAuthenticatorFrameworkServiceComponent();        webappAuthenticatorFrameworkServiceComponent.activate(null);    }
@Test  public void testCreateFactType() throws Exception {    CreateFactTypeRequest request = createFactTypeRequest();    FactTypeEntity newEntity = new FactTypeEntity();    when(factManager.saveFactType(any())).thenReturn(newEntity);    delegate.handle(request);    verify(factTypeHelper).assertFactTypeNotExists(request.getName());    verify(factTypeHelper).assertObjectTypesToBindExist(request.getRelevantObjectBindings(), "relevantObjectBindings");    verify(factTypeHelper).convertFactObjectBindingDefinitions(request.getRelevantObjectBindings());    verify(factTypeResponseConverter).apply(newEntity);    verify(factManager).saveFactType(argThat(entity -> {      assertCommonEntity(request, entity);      assertEquals(1, entity.getRelevantObjectBindings().size());      return true;    }));  }
@Test    public void checkPerformanceWithSelectedCell() {        uiModel.selectCell(1,                           2);        handler.perform(gridWidget,                        true,                        true);        verify(dtPresenter,               times(1)).onDeleteSelectedCells();        verify(gridWidget,               times(1)).startEditingCell(eq(1),                                          eq(2));    }
@Test  public void testHasPermissionForOrganizationWithPermissionsInheritedFromOrganizationGroup() throws Exception {    String content = "" +            "subject.1.name = subject\n" +            "organization.1.name = organization1\n" +            "organization.2.name = organization2\n" +            "organization.2.type = group\n" +            "organization.2.members = 1\n" +            "organization.3.name = organization3\n" +            "organization.3.type = group\n" +            "organization.3.members = 2\n" +            "subject.1.permission.3 = function" +            "";    setup(content);    assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("function"), createOrganizationIdentifier(1)));    assertTrue(accessController.hasPermission(createCredentials(1), () -> "function", createOrganizationIdentifier(1)));  }
@Test  public void testGetZeppelinHubWsEndpoint() {    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, testAddr);    ZeppelinConfiguration config = new ZeppelinConfiguration();    ZeppelinHubRepo repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("ws://zeppelinhub.ltd:80/async");    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, "https://zeppelinhub.ltd");    config = new ZeppelinConfiguration();    repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("wss://zeppelinhub.ltd:443/async");    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, "yolow");    config = new ZeppelinConfiguration();    repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("wss://www.zeppelinhub.com:443/async");    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, "http://zeppelinhub.ltd:4242");    config = new ZeppelinConfiguration();    repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("ws://zeppelinhub.ltd:4242/async");    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, "https://www.zeppelinhub.com");    config = new ZeppelinConfiguration();    repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("wss://www.zeppelinhub.com:443/async");    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, "http://www.zeppelinhub.com");    config = new ZeppelinConfiguration();    repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("ws://www.zeppelinhub.com:80/async");    System.setProperty(ZeppelinHubRepo.ZEPPELIN_CONF_PROP_NAME_SERVER, "https://www.zeppelinhub.com:4242");    config = new ZeppelinConfiguration();    repository = new ZeppelinHubRepo(config);    assertThat(repository.getZeppelinhubWebsocketUri(config)).isEqualTo("wss://www.zeppelinhub.com:4242/async");  }
@Test	public void testAdapt() {		Assert.assertEquals(			ModelAdapterUtil.adapt(TestInterface.class, new TestClass(1)),			new TestClass(1));		Assert.assertEquals(			ModelAdapterUtil.adapt(TestInterface.class, new TestClass(1)),			ModelAdapterUtil.adapt(TestInterface.class, new TestClass(1)));		TestInterface proxyObject = ModelAdapterUtil.adapt(			TestInterface.class, new TestClass(1));		Assert.assertEquals(0, proxyObject.compareTo(new TestClass(1)));		Assert.assertEquals(-1, proxyObject.compareTo(new TestClass(2)));		Assert.assertEquals(1, proxyObject.compareTo(new TestClass(0)));		Assert.assertEquals(			0,			proxyObject.compareTo(				ModelAdapterUtil.adapt(TestInterface.class, new TestClass(1))));		Assert.assertEquals(			-1,			proxyObject.compareTo(				ModelAdapterUtil.adapt(TestInterface.class, new TestClass(2))));		Assert.assertEquals(			1,			proxyObject.compareTo(				ModelAdapterUtil.adapt(TestInterface.class, new TestClass(0))));	}
@Test	public void testFontSize() {		String expected = "<span style=\"font-size: 18px;\">text</span>";		String actual = _htmlBBCodeTranslatorImpl.parse("[size=5]text[/size]");		Assert.assertEquals(expected, actual);	}
@Test(expected = AccessDeniedException.class)  public void testCreateFactWithoutAddPermission() throws Exception {    mockFetchingOrganization();    mockFetchingFactType();    doThrow(AccessDeniedException.class).when(securityContext).checkPermission(TiFunctionConstants.addThreatIntelFact, organization.getId());    delegate.handle(createRequest());  }
@Test  public void testClean() {    String test = "+-!(){}[]^\"~*?:&&||&|";    String expected = "\\+\\-\\!\\(\\)\\{\\}\\[\\]\\^\\\"\\~\\*\\?\\:\\&\\&\\|\\|&|";    assertEquals(expected, IndexUtils.clean(test));  }
@Test(expected=NumberFormatException.class)    public void checkFromHexStringInvalidStringReturnsException() {        ByteBuffer buffer = ByteBufferDumper.fromHexString("non-hexastring");        assertEquals(1, buffer.remaining());        assertEquals(-1, buffer.get());    }
@Test    public void checkColumnType() {        assertEquals( ActionRetractFactCol52.class,                      builder.getSupportedColumnType() );    }
@Test  public void testACLEquality5() {    AccessControlList a = new AccessControlList(            new AccessControlEntry("a", Permissions.Action.WRITE.toString(), false),            new AccessControlEntry("a", Permissions.Action.WRITE.toString(), false));    AccessControlList b = new AccessControlList(            new AccessControlEntry("a", Permissions.Action.WRITE.toString(), false),            new AccessControlEntry("b", Permissions.Action.READ.toString(), false));    assertFalse(AccessControlUtil.equals(a, b));  }
@Test    public void shouldRemoveExpenseById() throws Exception {        final Nobt nobt = aNobt()                .withExpenses(anExpense().withId(1L))                .build();        nobt.deleteExpense(1L);        assertThat(nobt, allOf(                hasExpenses(iterableWithSize(0)),                hasDeletedExpenses(iterableWithSize(1))        ));    }
@Test    public void testHandleAttributeAddition_LockRHS() {        popup.handleAttributeAddition(RuleAttributeWidget.LOCK_RHS);        assertThat(model.attributes).isEmpty();        assertThat(model.metadataList).containsExactly(new RuleMetadata(RuleAttributeWidget.LOCK_RHS, "true"));        verify(refreshCommand).execute();    }
@Test    public void testDeepEquals() {        ColumnStore<Node> store1 = new ColumnStore<Node>(Node.class, false);        ColumnImpl col1 = new ColumnImpl("0", Integer.class, null, null, Origin.DATA, false, false);        store1.addColumn(col1);        ColumnStore<Node> store2 = new ColumnStore<Node>(Node.class, false);        ColumnImpl col2 = new ColumnImpl("0", Integer.class, null, null, Origin.DATA, false, false);        store2.addColumn(col2);        Assert.assertTrue(store1.deepEquals(store2));        ColumnStore<Node> store3 = new ColumnStore<Node>(Node.class, false);        ColumnImpl col3 = new ColumnImpl("0", String.class, null, null, Origin.DATA, false, false);        store3.addColumn(col3);        Assert.assertFalse(store1.deepEquals(store3));    }
@Test  public void isValidAnonymous() throws UnknownHostException {    boolean ok = container.isValid("anonymous", "anonymous");    assertTrue(ok);  }
@Test    public void readMinimalExample()                            throws Exception {        final GMLStreamReader reader = getGmlStreamReader( "time_position_minimal.gml" );        final XMLStreamReader xmlStream = reader.getXMLReader();        final TimePosition timePosition = new GmlTimePositionTypeReader().read( xmlStream );        assertNotNull( timePosition );        assertNull( timePosition.getFrame() );        assertNull( timePosition.getCalendarEraName() );        assertNull( timePosition.getIndeterminatePosition() );        assertEquals( "2001-05-23", timePosition.getValue() );        assertOnEndElement( xmlStream );    }
@Test(expected = DDMExpressionException.InvalidSyntax.class)	public void testInvalidSyntax2() throws Exception {		DDMExpressionImpl<BigDecimal> ddmExpressionImpl = createDDMExpression(			"(1 * 2");		ddmExpressionImpl.evaluate();	}
@Test	public void testContentReviewerWithoutAssetViewPermissionHasPermissionOnPendingTask() {		long[] permissionCheckerRoleIds = randomPermissionCheckerRoleIds();		Assert.assertTrue(			_workflowTaskPermissionChecker.hasPermission(				RandomTestUtil.randomLong(),				mockWorkflowTask(					Role.class.getName(), permissionCheckerRoleIds[0]),				mockPermissionChecker(					RandomTestUtil.randomLong(), permissionCheckerRoleIds,					false, false, false)));	}
@Test        public void tcMatchStr_SM_CaseSensitve()        {            Boolean actual = false;            Boolean expected = false;            actual = OKW_Helper.matchString("*Hase, bär", "Fux, Hase, Bär");            assertEquals(expected, actual);        }
@Test	public void testLoadPutandSaveMultiline() throws IOException {		String line =			"testKey = [\\\n\t\"testValue1\",\\\n\t\"testValue2\"\\\n]";		TypedProperties typedProperties = _createTypedProperties(line);		typedProperties.put(			"testKey", new String[] {"testValue1", "testValue2"});		_assertSave(typedProperties, line);	}
@Test  public void testUpdateMutation() throws Exception {    Serializable[] old = new Serializable[4];    old[0] = 12131L;    old[1] = "test_user";    old[2] = 25;    old[3] = 0;    Serializable[] current = new Serializable[4];    current[0] = old[0];    current[1] = old[1];    current[2] = 26;    current[3] = old[3];    Serializable[] old2 = new Serializable[4];    old2[0] = 12334L;    old2[1] = "test_user2";    old2[2] = 30;    old2[3] = 1;    Serializable[] current2 = new Serializable[4];    current2[0] = old2[0];    current2[1] = old2[1];    current2[2] = 31;    current2[3] = old2[3];    Map.Entry<Serializable[], Serializable[]> change = new AbstractMap.SimpleEntry<>(old, current);    Map.Entry<Serializable[], Serializable[]> change2 =        new AbstractMap.SimpleEntry<>(old2, current2);    BinlogEvent event =        new UpdateEvent(            TABLE_ID, SERVER_ID, TIMESTAMP, BINLOG_FILE_POS, ImmutableList.of(change, change2));    List<? extends Mutation> mutations = eventMapper.map(event);    assertEquals(2, mutations.size());    assertTrue(mutations.get(0) instanceof MysqlUpdateMutation);    MysqlUpdateMutation mutation = (MysqlUpdateMutation) mutations.get(0);    validateMetadata(mutation, 0);    Row oldRow = mutation.getPreviousRow();    Row newRow = mutation.getRow();    assertEquals(12131L, oldRow.getColumns().get("id").getValue());    assertEquals("test_user", oldRow.getColumns().get("name").getValue());    assertEquals(25, oldRow.getColumns().get("age").getValue());    assertEquals(0, oldRow.getColumns().get("sex").getValue());    assertEquals(12131L, newRow.getColumns().get("id").getValue());    assertEquals("test_user", newRow.getColumns().get("name").getValue());    assertEquals(26, newRow.getColumns().get("age").getValue());    assertEquals(0, newRow.getColumns().get("sex").getValue());    assertTrue(mutations.get(1) instanceof MysqlUpdateMutation);    mutation = (MysqlUpdateMutation) mutations.get(1);    validateMetadata(mutation, 1);    oldRow = mutation.getPreviousRow();    newRow = mutation.getRow();    assertEquals(12334L, oldRow.getColumns().get("id").getValue());    assertEquals("test_user2", oldRow.getColumns().get("name").getValue());    assertEquals(30, oldRow.getColumns().get("age").getValue());    assertEquals(1, oldRow.getColumns().get("sex").getValue());    assertEquals(12334L, newRow.getColumns().get("id").getValue());    assertEquals("test_user2", newRow.getColumns().get("name").getValue());    assertEquals(31, newRow.getColumns().get("age").getValue());    assertEquals(1, newRow.getColumns().get("sex").getValue());  }
@Test	public void wildcardTest1() throws Exception {		Mapper mapper = new Mapper("global-dev.xml");		Book book = new Book();		InnerBook innerBook = new InnerBook();		innerBook.setName("123");		book.setDate(new Date());		book.setAge(23);		book.setExclude("summary");		book.setInnerBook(innerBook);		book = (Book) mapper.map("testTypeRule1", book, null);		Assert.assertEquals(23, book.getAge().intValue());		Assert.assertEquals("123", book.getInnerBook().getName());	}
@Test    public void givenString$reportScreenChange_whenQuery_thenShouldCallNativeApiWithString() throws Exception {        // given        PowerMockito.mockStatic(Instabug.class);        rnModule.reportScreenChange("screen");        // then        PowerMockito.verifyPrivate(Instabug.class, VerificationModeFactory.times(1)).invoke("reportScreenChange", null,"screen");    }
@Test	public void testGetSegmentsEntryIds() {		String userId = RandomTestUtil.randomString();		long[] segmentsEntryIds = {			RandomTestUtil.randomLong(), RandomTestUtil.randomLong()		};		String cacheKey = _generateCacheKey(userId);		Mockito.when(			_portalCache.get(cacheKey)		).thenReturn(			segmentsEntryIds		);		Assert.assertArrayEquals(			segmentsEntryIds,			_asahSegmentsEntryCache.getSegmentsEntryIds(userId));		Mockito.verify(			_portalCache, Mockito.times(1)		).get(			Mockito.eq(cacheKey)		);	}
@Test  public void testCountJobs() throws Exception {    replayAll();    assertEquals(2, jobProducer.countJobs(Status.DISPATCHING));    assertEquals(3, jobProducer.countJobs(Status.RUNNING));  }
@Test    public void testCanSetupDefaultValueWhenTableFormatIsNotExtendedEntry() throws Exception {        when(editingCol.getFactField()).thenReturn("factField");        when(plugin.doesOperatorNeedValue()).thenReturn(true);        when(model.getTableFormat()).thenReturn(GuidedDecisionTable52.TableFormat.LIMITED_ENTRY);        assertFalse(page.canSetupDefaultValue());    }
@Test    public void test_parseLong_bytes() {        String str = "12345";        long result = NumberUtils.parseLong(str.getBytes(), 0L);        Assertions.assertEquals(12345L, result);    }
@Test	public void testGetClassPK() {		ClassPKInfoItemIdentifier classPKInfoItemIdentifier =			new ClassPKInfoItemIdentifier(12345L);		Assert.assertEquals(12345L, classPKInfoItemIdentifier.getClassPK());	}
@Test    public void given$getAppToken_whenQuery_thenShouldCallNativeApiAndReturnValue() {        // given        PowerMockito.mockStatic(Instabug.class);        PowerMockito.when(Instabug.getAppToken()).thenReturn("APP_TOKEN");        // when        String appToken = rnModule.getAppToken();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Instabug.getAppToken();        Assert.assertEquals("APP_TOKEN", appToken);    }
@Test	public void testSerialize() throws Exception {		FileUtil.copyResource("org/encog/data/img/a.png", IMG_A);		FileUtil.copyResource("org/encog/data/img/b.png", IMG_B);		FileUtil.copyResource("org/encog/data/img/c.png", IMG_C);						Downsample downsampler = new SimpleIntensityDownsample();		ImageMLDataSet training = new ImageMLDataSet(downsampler, false, 1, -1);				ImageMLData inputImage1 = new ImageMLData(ImageIO.read(IMG_A));		ImageMLData inputImage2 = new ImageMLData(ImageIO.read(IMG_B));		ImageMLData inputImage3 = new ImageMLData(ImageIO.read(IMG_C));				BasicMLData idealImage1 = new BasicMLData(new double[]{1.0,0.0,0.0});		BasicMLData idealImage2 = new BasicMLData(new double[]{0.0,1.0,0.0});		BasicMLData idealImage3 = new BasicMLData(new double[]{0.0,0.0,1.0});				training.add(inputImage1,idealImage1);		training.add(inputImage2,idealImage2);		training.add(inputImage3,idealImage3);				training.downsample(10, 10);				EncogUtility.saveCSV(FILE_CSV, CSVFormat.DECIMAL_POINT, training );	}
@Test    public void testAdd() {        NodeStore nodeStore = new NodeStore();        NodeImpl node = new NodeImpl("0");        boolean a = nodeStore.add(node);        boolean b = nodeStore.add(node);        Assert.assertEquals(a, true);        Assert.assertEquals(b, false);        Assert.assertEquals(nodeStore.isEmpty(), false);        Assert.assertEquals(nodeStore.size(), 1);        Assert.assertTrue(nodeStore.contains(node));        Assert.assertNotSame(node.getStoreId(), NodeStore.NULL_ID);    }
@Test  public void testRemove() throws Exception {    WorkflowInstance wi1 = startAndWait(workingDefinition, mediapackage1, WorkflowState.SUCCEEDED);    WorkflowInstance wi2 = startAndWait(workingDefinition, mediapackage2, WorkflowState.SUCCEEDED);    WorkflowInstance wi3 = startAndWait(pausingWorkflowDefinition, mediapackage1, WorkflowState.PAUSED);    // reload instances, because operations have no id before    wi1 = service.getWorkflowById(wi1.getId());    wi2 = service.getWorkflowById(wi2.getId());    service.remove(wi1.getId());    assertEquals(2, service.getWorkflowInstances(new WorkflowQuery()).size());    for (WorkflowOperationInstance op : wi1.getOperations()) {      assertEquals(0, serviceRegistry.getChildJobs(op.getId()).size());    }    service.remove(wi2.getId(), false);    assertEquals(1, service.getWorkflowInstances(new WorkflowQuery()).size());    try {      service.remove(wi3.getId(), false);      Assert.fail("A paused workflow shouldn't be removed without using force");    } catch (WorkflowStateException e) {      assertEquals(1, service.getWorkflowInstances(new WorkflowQuery()).size());    }    try {      service.remove(wi3.getId(), true);      assertEquals(0, service.getWorkflowInstances(new WorkflowQuery()).size());    } catch (WorkflowStateException e) {      Assert.fail(e.getMessage());    }  }
@Test    public void addHandlers() {        scenarioGridPanelSpy.addHandlers(clickHandlerMock, scenarioSimulationGridPanelMouseMoveHandlerMock);        assertEquals(clickHandlerMock, scenarioGridPanelSpy.clickHandler);        assertEquals(scenarioSimulationGridPanelMouseMoveHandlerMock, scenarioGridPanelSpy.mouseMoveHandler);        verify(scenarioGridPanelSpy, times(1)).unregister();        verify(domElementContainerMock, times(1)).addDomHandler(eq(clickHandlerMock), eq(ClickEvent.getType()));        verify(domElementContainerMock, times(1)).addDomHandler(eq(clickHandlerMock), eq(ContextMenuEvent.getType()));        verify(scenarioGridLayerMock, times(1)).addNodeMouseOutHandler(eq(scenarioGridPanelSpy));        verify(scenarioGridLayerMock, times(1)).addNodeMouseMoveHandler(eq(scenarioSimulationGridPanelMouseMoveHandlerMock));        verify(scenarioGridLayerMock, times(1)).addNodeMouseWheelHandler(eq(scenarioGridPanelSpy));        verify(scrollPanelMock, times(1)).addDomHandler(eq(scenarioGridPanelSpy), eq(ScrollEvent.getType()));    }
@Test    @SuppressWarnings("unchecked")    public void checkSave() {        final Path path = mock(Path.class);        final GuidedDecisionTableEditorGraphModel model = new GuidedDecisionTableEditorGraphModel();        final Metadata metadata = mock(Metadata.class);        final String comment = "comment";        when(path.toURI()).thenReturn("file://project/src/main/resources/mypackage/dtable." + dtGraphResourceType.getSuffix());        service.save(path,                     model,                     metadata,                     comment);        verify(ioService,               times(1)).write(any(org.uberfire.java.nio.file.Path.class),                               any(String.class),                               any(Map.class),                               any(CommentedOption.class));    }
@Test  public void testResolveEventComment() throws Exception {    String eventString = IOUtils.toString(getClass().getResource("/eventCommentResolved.json"));    given().pathParam("eventId", "notExists").pathParam("commentId", 33).expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().post(rt.host("{eventId}/comment/{commentId}"));    String result = given().pathParam("eventId", "asdasd").pathParam("commentId", 33).expect()            .statusCode(HttpStatus.SC_OK).when().post(rt.host("{eventId}/comment/{commentId}")).asString();    assertThat(eventString, SameJSONAs.sameJSONAs(result));  }
@Test    public void unregister() {        scenarioGridWidget.unregister();        verify(scenarioGridPanelMock, times(1)).unregister();    }
@Test  public void testFetchNonExistingObjectByTypeValue() throws Exception {    GetObjectByTypeValueRequest request = new GetObjectByTypeValueRequest().setType("type").setValue("value");    doThrow(AccessDeniedException.class).when(securityContext).checkReadPermission((ObjectRecord) isNull());    try {      delegate.handle(request);      fail();    } catch (AccessDeniedException ignored) {      verify(objectFactDao).getObject(request.getType(), request.getValue());      verifyNoMoreInteractions(objectFactDao);    }  }
@Test  public void testSearchOriginFiltersNonAccessibleOrigins() throws Exception {    when(securityContext.hasReadPermission(isA(OriginEntity.class))).thenReturn(false);    ResultSet<Origin> result = delegate.handle(new SearchOriginRequest());    assertEquals(0, result.getCount());    assertEquals(0, ListUtils.list(result.iterator()).size());    verify(securityContext, times(2)).hasReadPermission(isA(OriginEntity.class));    verify(originResponseConverter, never()).apply(any());  }
@Test public void testNotifyLoadingStartedWithoutRegisteredListener() {		// Arrange:		final WebFragment fragment = new WebFragment();		// Act:		// Only ensure that calling this method without registered listener does not cause any troubles.		fragment.notifyLoadingStarted("test_url");	}
@Test    public void generateOverallStatsHeaderDMN() throws IOException {        StringBuilder stringBuilder = new StringBuilder();        CSVPrinter printer = getCSVPrinter(stringBuilder);        scenarioCsvDownloadReport.generateOverallStatsHeader(printer, DMN);        String retrieved = stringBuilder.toString();        commonCheckHeader(DMN_OVERALL_STATS_HEADER, retrieved);    }
@Test	public void testGetChannel() {		ClusterLinkImpl clusterLinkImpl = getClusterLinkImpl(2);		ClusterChannel clusterChannel1 = clusterLinkImpl.getChannel(			Priority.LEVEL1);		Assert.assertSame(			clusterChannel1, clusterLinkImpl.getChannel(Priority.LEVEL2));		Assert.assertSame(			clusterChannel1, clusterLinkImpl.getChannel(Priority.LEVEL3));		Assert.assertSame(			clusterChannel1, clusterLinkImpl.getChannel(Priority.LEVEL4));		Assert.assertSame(			clusterChannel1, clusterLinkImpl.getChannel(Priority.LEVEL5));		ClusterChannel clusterChannel2 = clusterLinkImpl.getChannel(			Priority.LEVEL6);		Assert.assertSame(			clusterChannel2, clusterLinkImpl.getChannel(Priority.LEVEL7));		Assert.assertSame(			clusterChannel2, clusterLinkImpl.getChannel(Priority.LEVEL8));		Assert.assertSame(			clusterChannel2, clusterLinkImpl.getChannel(Priority.LEVEL9));		Assert.assertSame(			clusterChannel2, clusterLinkImpl.getChannel(Priority.LEVEL10));		List<TestClusterChannel> clusterChannels =			TestClusterChannel.getClusterChannels();		Assert.assertEquals(			clusterChannels.toString(), 2, clusterChannels.size());		Assert.assertNotEquals(clusterChannel1, clusterChannel2);		Assert.assertTrue(			clusterChannels.toString(),			clusterChannels.contains(clusterChannel1));		Assert.assertTrue(			clusterChannels.toString(),			clusterChannels.contains(clusterChannel2));	}
@Test    public void fourSM() {        Assert.assertEquals(RxComprehensions                        .doSwitchMap(zero(4), one(true), two("result"), three("other"), four("other".length())).toBlocking().first(),                new Long("other".length()));    }
@Test  public void testGetFactCallsDelegate() throws Exception {    FactGetByIdDelegate delegate = mock(FactGetByIdDelegate.class);    when(delegateProvider.get(FactGetByIdDelegate.class)).thenReturn(delegate);    GetFactByIdRequest request = new GetFactByIdRequest();    service.getFact(RequestHeader.builder().build(), request);    verify(delegate).handle(request);  }
@Test    public void testWfs200SpecExample1()                            throws Exception {        LockFeatureXMLAdapter parser = new LockFeatureXMLAdapter();        parser.load( LockFeatureXMLAdapterTest.class.getResource( "wfs200/example1.xml" ) );        LockFeature request = parser.parse();        assertEquals( VERSION_200, request.getVersion() );        assertFalse( request.getLockAll() );        assertEquals( 1, request.getQueries().size() );        assertNull( request.getExistingLockId() );        assertNull( request.getExpiryInSeconds() );        assertNull( request.getHandle() );    }
@Test    public void testGetAssociationTypeShouldBeParsedFromXml() {        String actualAssociationType = association.getAssociationType();        assertEquals( "urn:x-ogc:specification:csw-ebrim:AssociationType:EO:AcquiredBy", actualAssociationType );    }
@Test(expected = ConstructorException.class)    public void testReadYamlFromResource_badResource() {        YamlUtils.readChatAlyticsConfig("config/bad-config.yaml");    }
@Test    public void testWriteGraph() throws IOException {        String[] edges = {"A,B"};        writeToGraph(edges);        lines = Files.readAllLines(path, charset);        assertTrue(lines.contains("A B"));        assertEquals(1, lines.size());    }
@Test    public void test200Example1()                            throws IOException {        Map<String, String> kvpParams = readFileIntoMap( this.getClass().getResource( "wfs200/example1.kvp" ) );        DescribeFeatureType dft = parse( kvpParams );        assertEquals( VERSION_200, dft.getVersion() );        assertEquals( null, dft.getHandle() );        assertEquals( null, dft.getOutputFormat() );        assertEquals( 1, dft.getTypeNames().length );        assertEquals( valueOf( "{http://www.myserver.com/myns}TreesA_1M" ), dft.getTypeNames()[0] );    }
@Test    public void getSafeHtml_ActionInsert() {        //hide, insert, value list, default value, field, header        ActionInsertFactCol52 originalColumn = new ActionInsertFactCol52();        originalColumn.setFactField("field1");        originalColumn.setInsertLogical(false);        originalColumn.setValueList("q,w,e");        originalColumn.setHeader("action1");        originalColumn.setHideColumn(false);        originalColumn.setDefaultValue(new DTCellValue52("def1"));        ActionInsertFactCol52 newColumn = new ActionInsertFactCol52();        newColumn.setFactField("field2");        newColumn.setInsertLogical(true);        newColumn.setValueList("a,s,d");        newColumn.setHeader("action2");        newColumn.setHideColumn(true);        newColumn.setDefaultValue(new DTCellValue52("def2"));        List<BaseColumnFieldDiff> diffs = originalColumn.diff(newColumn);        SafeHtml result = helper.getSafeHtml(new UpdateColumnAuditLogEntry("mock user", originalColumn, newColumn, diffs));        assertEquals(getActionHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());    }
@Test    public void testGetUsersForRoom() throws Exception {        // channels.info        WebResource mockChanInfoResrc = mock(WebResource.class);        when(mockResource.path("channels.info")).thenReturn(mockChanInfoResrc);        when(mockChanInfoResrc.queryParam(anyString(), anyString())).thenReturn(mockChanInfoResrc);        URI chanInfoURI = Resources.getResource("slack_api_responses/channels.info.txt").toURI();        Path channelsInfoPath = Paths.get(chanInfoURI);        String chanInfoResponseStr = new String(Files.readAllBytes(channelsInfoPath));        doReturn(chanInfoResponseStr).when(underTest).getJsonResultWithRetries(mockChanInfoResrc,                                                                               apiRetries);        // users.info        WebResource mockUserInfoResource = mock(WebResource.class);        when(mockResource.path("users.info")).thenReturn(mockUserInfoResource);        // user 1        WebResource user1InfoResource = mock(WebResource.class);        when(mockUserInfoResource.queryParam("user", "U023BECGF")).thenReturn(user1InfoResource);        URI userInfoURI = Resources.getResource("slack_api_responses/users.info.1.txt").toURI();        Path usersInfoPath = Paths.get(userInfoURI);        String userInfoResponseStr = new String(Files.readAllBytes(usersInfoPath));        doReturn(userInfoResponseStr).when(underTest).getJsonResultWithRetries(user1InfoResource,                                                                               apiRetries);        // user 2        WebResource user2InfoResource = mock(WebResource.class);        when(mockUserInfoResource.queryParam("user", "U023TY454")).thenReturn(user2InfoResource);        userInfoURI = Resources.getResource("slack_api_responses/users.info.2.txt").toURI();        usersInfoPath = Paths.get(userInfoURI);        userInfoResponseStr = new String(Files.readAllBytes(usersInfoPath));        doReturn(userInfoResponseStr).when(underTest).getJsonResultWithRetries(user2InfoResource,                                                                               apiRetries);        Room mockRoom = mock(Room.class);        when(mockRoom.getRoomId()).thenReturn("C0SDFG423");        Map<String, User> usersForRoom = underTest.getUsersForRoom(mockRoom);        assertEquals(2, usersForRoom.size());        for (User user : usersForRoom.values()) {            assertNotNull(user);        }    }
@Test(expected = UnexpectedAuthenticationFailedException.class)  public void testGetCurrentUserIdThrowsUnexpectedAuthenticationFailedException() throws Exception {    when(accessController.validate(credentials)).thenThrow(InvalidCredentialsException.class);    context.getCurrentUserID();  }
@Test    public void testReadExampleDictionary()                            throws XMLStreamException, FactoryConfigurationError, IOException {        URL url = GMLDictionaryReaderTest.class.getResource( "../misc/dictionary/example_dictionary.gml" );        XMLStreamReader xmlStream = XMLInputFactory.newInstance().createXMLStreamReader( url.toString(),                                                                                         url.openStream() );        // skip START_DOCUMENT event        xmlStream.nextTag();        GMLDictionaryReader dictReader = new GMLDictionaryReader( GML_30, xmlStream, new GmlDocumentIdContext( GML_30 ) );        Dictionary dict = (Dictionary) dictReader.read();        assertEquals( "CodeLists", dict.getId() );        assertEquals( 2, dict.size() );        assertEquals( "XP_HorizontaleAusrichtung", dict.get( 0 ).getId() );        assertEquals( "XP_BedeutungenBereich", dict.get( 1 ).getId() );    }
@Test public void testAreAnimationsEnabled() {		// Act + Assert:		assertThat(FragmentUtils.areAnimationsEnabled(context), is(true));	}
@Test    public void testSetInsertLogical() throws Exception {        final boolean isInsertLogical = false;        plugin.setInsertLogical(isInsertLogical);        verify(editingWrapper).setInsertLogical(isInsertLogical);    }
@Test  public void testCalculateChecksum() throws Exception {    String extendedFlavorType = "extended";    DublinCoreCatalog dc = SchedulerServiceImplTest.generateExtendedEvent(Opt.<String> none(), extendedFlavorType);    FileUtils.writeStringToFile(workspaceFile, dc.toXmlString(), "UTF-8");    List<MediaPackageElementFlavor> catalogAdapterFlavors = new ArrayList<>();    catalogAdapterFlavors.add(new MediaPackageElementFlavor(extendedFlavorType, "episode"));    AccessControlList acl = new AccessControlList(new AccessControlEntry("ROLE_ADMIN", "write", true));    Date start = new Date(DateTimeSupport.fromUTC("2008-03-16T14:00:00Z"));    Date end = new Date(DateTimeSupport.fromUTC("2008-03-16T15:00:00Z"));    String captureDeviceID = "demo";    String seriesId = "series1";    Set<String> userIds = new HashSet<>();    userIds.add("user2");    userIds.add("user1");    MediaPackage mp = SchedulerServiceImplTest.generateEvent(Opt.<String> none());    mp.setSeries(seriesId);    DublinCoreCatalog event = SchedulerServiceImplTest.generateEvent(captureDeviceID, start, end);    event.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(start, Precision.Minute));    String catalogId = UUID.randomUUID().toString();    MediaPackageElement catalog = mp.add(new URI("location" + catalogId), Type.Catalog, event.getFlavor());    catalog.setIdentifier(catalogId);    String extendedCatalogId = UUID.randomUUID().toString();    MediaPackageElement extendedCatalog = mp.add(new URI("location" + extendedCatalogId), Type.Catalog, dc.getFlavor());    extendedCatalog.setIdentifier(extendedCatalogId);    Map<String, String> caProperties = SchedulerServiceImplTest.generateCaptureAgentMetadata("demo");    Map<String, String> wfProperties = new HashMap<String, String>();    wfProperties.put("test", "true");    wfProperties.put("clear", "all");    String expectedChecksum = "2d5398c961f0784a13eaad323ebc43f3";    String checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID,            userIds, mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertEquals(expectedChecksum, checksum);    // change start date    start = new Date();    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change end date    start = new Date(DateTimeSupport.fromUTC("2008-03-16T14:00:00Z"));    end = new Date();    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change device    end = new Date(DateTimeSupport.fromUTC("2008-03-16T15:00:00Z"));    captureDeviceID = "demo1";    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change users    captureDeviceID = "demo";    userIds.add("test");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change episode dublincore    userIds.remove("test");    catalog.setChecksum(null);    event.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(end, Precision.Minute));    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change extended dublincore    catalog.setChecksum(null);    event.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(start, Precision.Minute));    extendedCatalog.setChecksum(null);    dc.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(start, Precision.Minute));    FileUtils.writeStringToFile(workspaceFile, dc.toXmlString(), "UTF-8");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change wf properties    extendedCatalog.setChecksum(null);    dc.remove(PROPERTY_CREATED);    FileUtils.writeStringToFile(workspaceFile, dc.toXmlString(), "UTF-8");    wfProperties.put("change", "change");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change ca properties    wfProperties.remove("change");    caProperties.put("change", "change");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change access control list    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties,            new AccessControlList(new AccessControlEntry("ROLE_ADMIN", "write", false)));    Assert.assertNotEquals(expectedChecksum, checksum);  }
@Test	public void testGetDistinctFields() throws Exception {		DDMFormInstanceRecordExporterImpl ddmFormInstanceRecordExporterImpl =			mock(DDMFormInstanceRecordExporterImpl.class);		DDMStructureVersion ddmStructureVersion = mock(			DDMStructureVersion.class);		when(			ddmFormInstanceRecordExporterImpl.getStructureVersions(1L)		).thenReturn(			ListUtil.fromArray(ddmStructureVersion)		);		DDMFormField ddmFormField1 = new DDMFormField("field1", "text");		DDMFormField ddmFormField2 = new DDMFormField("field2", "text");		when(			ddmFormInstanceRecordExporterImpl.getNontransientDDMFormFieldsMap(				ddmStructureVersion)		).thenReturn(			LinkedHashMapBuilder.<String, DDMFormField>put(				"field1", ddmFormField1			).put(				"field2", ddmFormField2			).build()		);		when(			ddmFormInstanceRecordExporterImpl.getDistinctFields(1L)		).thenCallRealMethod();		Map<String, DDMFormField> distinctFields =			ddmFormInstanceRecordExporterImpl.getDistinctFields(1);		Assert.assertEquals(ddmFormField1, distinctFields.get("field1"));		Assert.assertEquals(ddmFormField2, distinctFields.get("field2"));		InOrder inOrder = Mockito.inOrder(ddmFormInstanceRecordExporterImpl);		inOrder.verify(			ddmFormInstanceRecordExporterImpl, Mockito.times(1)		).getStructureVersions(			1		);		inOrder.verify(			ddmFormInstanceRecordExporterImpl, Mockito.times(1)		).getNontransientDDMFormFieldsMap(			ddmStructureVersion		);	}
@Test  public void testCreateEdgeWithoutGraph() {    assertThrows(RuntimeException.class, () -> {      FactEdge.builder()              .setFactRecord(new FactRecord())              .setFactType(FactTypeStruct.builder().build())              .setInVertex(mock(Vertex.class))              .setOutVertex(mock(Vertex.class))              .build();    });  }
@Test  public void testEdgesWithDirectionFactIsDestination() {    UUID objectID = mockObjectWithFact(Direction.FactIsDestination);    Vertex vertex = new ObjectVertex(getActGraph(), objectID);    assertTrue(vertex.edges(BOTH).hasNext());    assertFalse(vertex.edges(IN).hasNext());    assertTrue(vertex.edges(OUT).hasNext());  }
@Test	public void testValidationWithNonrequiredFieldAndEmptyValue()		throws Exception {		DDMFormField ddmFormField = DDMFormTestUtil.createDDMFormField(			"integer", "integer", "numeric", "integer", true, false, false);		LocalizedValue localizedValue = new LocalizedValue(LocaleUtil.US);		localizedValue.addString(LocaleUtil.US, "");		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"integer", localizedValue);		_numericDDMFormFieldValueValidator.validate(			ddmFormField, ddmFormFieldValue.getValue());	}
@Test    public void getDMNContentErrorCallback() {        ErrorCallback<Object> remoteCallback = kogitoDMNDataManagementStrategySpy.getDMNContentErrorCallback("dmnpath/");        Assert.assertNotNull(remoteCallback);        remoteCallback.error("message", new Exception());        verify(eventBusMock, times(1)).fireEvent(isA(ScenarioNotificationEvent.class));    }
@Test    public void createTopLevelFactModelTreeCompositeNoCollection() {        // Single property retrieve        ClientDMNType compositePerson = getSingleCompositeWithSimpleCollection();        FactModelTree retrieved = abstractKogitoDMNServiceSpy.createTopLevelFactModelTree("testPath", compositePerson, new TreeMap<>(), FactModelTree.Type.INPUT);        Assert.assertNotNull(retrieved);        assertEquals("testPath", retrieved.getFactName());        assertEquals(2, retrieved.getSimpleProperties().size());        assertTrue(retrieved.getSimpleProperties().containsKey("friends"));        assertEquals("java.util.List", retrieved.getSimpleProperties().get("friends").getTypeName());        assertFalse(retrieved.getSimpleProperties().get("friends").getBaseTypeName().isPresent());        assertEquals("java.util.List", retrieved.getSimpleProperties().get("friends").getPropertyTypeNameToVisualize());        assertTrue(retrieved.getSimpleProperties().containsKey("name"));        assertEquals(TYPE_NAME, retrieved.getSimpleProperties().get("name").getTypeName());        assertFalse(retrieved.getSimpleProperties().get("name").getBaseTypeName().isPresent());        assertEquals(TYPE_NAME, retrieved.getSimpleProperties().get("name").getPropertyTypeNameToVisualize());        //        assertEquals(1, retrieved.getGenericTypesMap().size());        assertTrue(retrieved.getGenericTypesMap().containsKey("friends"));        assertEquals(compositePerson.getFields().get("friends").getName(), retrieved.getGenericTypesMap().get("friends").get(0));        //        assertEquals(2, retrieved.getExpandableProperties().size());        assertTrue(retrieved.getExpandableProperties().containsKey("EXPANDABLE_PROPERTY_PHONENUMBERS"));        assertEquals("tPhoneNumber", retrieved.getExpandableProperties().get("EXPANDABLE_PROPERTY_PHONENUMBERS"));        assertTrue(retrieved.getExpandableProperties().containsKey("EXPANDABLE_PROPERTY_DETAILS"));        assertEquals("tDetails", retrieved.getExpandableProperties().get("EXPANDABLE_PROPERTY_DETAILS"));    }
@Test  public void testStoreObjectWithNull() {    assertNull(dao.storeObject(null));  }
@Test  public void testRequestValidationFailsOnEmpty() {    Set<ConstraintViolation<CreateOriginRequest>> violations = getValidator().validate(new CreateOriginRequest()            .setName("")    );    assertEquals(1, violations.size());    assertPropertyInvalid(violations, "name");  }
@Test(expected = IllegalArgumentException.class)    public void afterPropertiesSet_test() {        CertFileResourcesTrustAnchorsProvider trustAnchorProvider = new CertFileResourcesTrustAnchorsProvider();        trustAnchorProvider.afterPropertiesSet();    }
@Test  public void testListSentryPrivilegesForProvider() throws Exception {    String roleName1 = "list-privs-r1", roleName2 = "list-privs-r2";    String groupName1 = "list-privs-g1", groupName2 = "list-privs-g2";    String grantor = "g1";    long seqId = sentryStore.createSentryRole(roleName1).getSequenceId();    assertEquals(seqId + 1, sentryStore.createSentryRole(roleName2).getSequenceId());    TSentryPrivilege privilege1 = new TSentryPrivilege();    privilege1.setPrivilegeScope("TABLE");    privilege1.setServerName("server1");    privilege1.setDbName("db1");    privilege1.setTableName("tbl1");    privilege1.setAction("SELECT");    privilege1.setCreateTime(System.currentTimeMillis());    assertEquals(seqId + 2, sentryStore.alterSentryRoleGrantPrivilege(grantor, roleName1, privilege1)        .getSequenceId());    assertEquals(seqId + 3, sentryStore.alterSentryRoleGrantPrivilege(grantor, roleName2, privilege1)        .getSequenceId());    TSentryPrivilege privilege2 = new TSentryPrivilege();    privilege2.setPrivilegeScope("SERVER");    privilege2.setServerName("server1");    privilege2.setCreateTime(System.currentTimeMillis());    assertEquals(seqId + 4, sentryStore.alterSentryRoleGrantPrivilege(grantor, roleName2, privilege2)        .getSequenceId());    Set<TSentryGroup> groups = Sets.newHashSet();    TSentryGroup group = new TSentryGroup();    group.setGroupName(groupName1);    groups.add(group);    assertEquals(seqId + 5, sentryStore.alterSentryRoleAddGroups(grantor,        roleName1, groups).getSequenceId());    groups.clear();    group = new TSentryGroup();    group.setGroupName(groupName2);    groups.add(group);    // group 2 has both roles 1 and 2    assertEquals(seqId + 6, sentryStore.alterSentryRoleAddGroups(grantor,        roleName1, groups).getSequenceId());    assertEquals(seqId + 7, sentryStore.alterSentryRoleAddGroups(grantor,        roleName2, groups).getSequenceId());    // group1 all roles    assertEquals(Sets.newHashSet("server=server1->db=db1->table=tbl1->action=select"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName1),            new TSentryActiveRoleSet(true, new HashSet<String>()))));    // one active role    assertEquals(Sets.newHashSet("server=server1->db=db1->table=tbl1->action=select"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName1),            new TSentryActiveRoleSet(false, Sets.newHashSet(roleName1)))));    // unknown active role    assertEquals(Sets.newHashSet(),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName1),            new TSentryActiveRoleSet(false, Sets.newHashSet("not a role")))));    // no active roles    assertEquals(Sets.newHashSet(),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName1),            new TSentryActiveRoleSet(false, new HashSet<String>()))));    // group2 all roles    assertEquals(Sets.newHashSet("server=server1->db=db1->table=tbl1->action=select", "server=server1"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName2),            new TSentryActiveRoleSet(true, new HashSet<String>()))));    // one active role    assertEquals(Sets.newHashSet("server=server1->db=db1->table=tbl1->action=select"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName2),            new TSentryActiveRoleSet(false, Sets.newHashSet(roleName1)))));    assertEquals(Sets.newHashSet(        "server=server1->db=db1->table=tbl1->action=select", "server=server1"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName2),            new TSentryActiveRoleSet(false, Sets.newHashSet(roleName2)))));    // unknown active role    assertEquals(Sets.newHashSet(),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName2),            new TSentryActiveRoleSet(false, Sets.newHashSet("not a role")))));    // no active roles    assertEquals(Sets.newHashSet(),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.newHashSet(groupName2),            new TSentryActiveRoleSet(false, new HashSet<String>()))));    // both groups, all active roles    assertEquals(Sets.newHashSet("server=server1->db=db1->table=tbl1->action=select", "server=server1"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.            newHashSet(groupName1, groupName2),            new TSentryActiveRoleSet(true, new HashSet<String>()))));    // one active role    assertEquals(Sets.newHashSet("server=server1->db=db1->table=tbl1->action=select"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.            newHashSet(groupName1, groupName2),            new TSentryActiveRoleSet(false, Sets.newHashSet(roleName1)))));    assertEquals(Sets.newHashSet(        "server=server1->db=db1->table=tbl1->action=select", "server=server1"),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.            newHashSet(groupName1, groupName2),            new TSentryActiveRoleSet(false, Sets.newHashSet(roleName2)))));    // unknown active role    assertEquals(Sets.newHashSet(),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.            newHashSet(groupName1, groupName2),            new TSentryActiveRoleSet(false, Sets.newHashSet("not a role")))));    // no active roles    assertEquals(Sets.newHashSet(),        SentryStore.toTrimedLower(sentryStore.listAllSentryPrivilegesForProvider(Sets.            newHashSet(groupName1, groupName2),            new TSentryActiveRoleSet(false, new HashSet<String>()))));  }
@Test (expected = RuntimeException.class)  public void testPrivateFieldExpression()  {    final Class<?> testPojoClass = TestPojo.class;    createExpression(testPojoClass, "privateIntField", int.class);  }
@Test    public void testSetupHideColumnWhenItIsNotEnabled() throws Exception {        page.setupHideColumn();        verify(view,               never()).showHideColumn(any(Boolean.class));    }
@Test    public void testDownloads() {        presenter.makeMenuBar();        presenter.makeMenuBar();        verify(downloadMenuItemBuilder).build(any());    }
@Test  public void testCountEvents() throws Exception {    final long oneHourMillis = 3600_000;    final long nowMillis = new Date().getTime();    final String mpId = "mpId";    final String agentId = "agent1";    final String orgId = new DefaultOrganization().getId();    final Date[] eventStartDates = {        new Date(nowMillis - 4 * oneHourMillis),        new Date(nowMillis - oneHourMillis),        new Date(nowMillis + oneHourMillis),        new Date(nowMillis + 5 * oneHourMillis),    };    for (int i = 0; i < 4; i++) {      final Date start = eventStartDates[i];      final Date end = new Date(start.getTime() + 2 * oneHourMillis);      schedulerDatabase.storeEvent(          mpId + i,          orgId,          Opt.some(agentId),          Opt.some(start),          Opt.some(end),          Opt.none(),          Opt.none(),          Opt.none(),          Opt.none(),          Opt.none(),          Opt.none(),          Opt.none(),          Opt.none()      );    }    int count = schedulerDatabase.countEvents();    Assert.assertEquals(4, count);  }
@Test    public void testOnChangeCallbackRegisteredForActionValueEditor() throws Exception {        final ActionFieldValue value = new ActionFieldValue();        value.setNature(FieldNatureType.TYPE_LITERAL);        value.setField("a");        final ActionValueEditor editor = mock(ActionValueEditor.class);        doReturn(editor).when(testedWidget).actionValueEditor(any(),                                                              eq(value),                                                              any(),                                                              anyBoolean());        final ActionFieldValue valueTwo = new ActionFieldValue();        valueTwo.setNature(FieldNatureType.TYPE_LITERAL);        valueTwo.setField("b");        final ActionValueEditor editorTwo = mock(ActionValueEditor.class);        doReturn(editorTwo).when(testedWidget).actionValueEditor(any(),                                                                 eq(valueTwo),                                                                 any(),                                                                 anyBoolean());        testedWidget.valueEditor(value);        testedWidget.valueEditor(valueTwo);        verify(editor).setOnChangeCommand(commandCaptor.capture());        commandCaptor.getValue().execute();        verify(testedWidget).setModified(true);        verify(editorTwo).refresh();    }
@Test    public void show() {        int x = 10;        int y = 20;        baseMenu.show(x, y);        verify(baseMenu, times(1)).hide();        verify(styleMock, times(1)).setLeft(x, Style.Unit.PX);        verify(styleMock, times(1)).setTop(y, Style.Unit.PX);        verify(styleMock, times(1)).setDisplay(Style.Display.BLOCK);    }
@Test	public void testReplacesImageTagsWithSingleQuotes() throws Exception {		Assert.assertEquals(			_CONTENT_PREFIX + "[REPLACED]" + _CONTENT_SUFFIX,			_contentTransformer.transform(				_CONTENT_WITH_IMAGE_AND_SINGLE_QUOTES));	}
@SuppressWarnings({ "rawtypes", "unchecked" })  @Test  public void testNodeProcessing() throws Exception  {    RoundRobinHashMap oper = new RoundRobinHashMap();    CollectorTestSink mapSink = new CollectorTestSink();    String[] keys = new String[3];    keys[0] = "a";    keys[1] = "b";    keys[2] = "c";    oper.setKeys(keys);    oper.map.setSink(mapSink);    oper.beginWindow(0);    HashMap<String, Integer> t1 = new HashMap<String, Integer>();    t1.put("a", 0);    t1.put("b", 1);    t1.put("c", 2);    HashMap<String, Integer> t2 = new HashMap<String, Integer>();    t2.put("a", 3);    t2.put("b", 4);    t2.put("c", 5);    HashMap<String, Integer> t3 = new HashMap<String, Integer>();    t3.put("a", 6);    t3.put("b", 7);    t3.put("c", 8);    HashMap<String, Integer> t4 = new HashMap<String, Integer>();    t4.put("a", 9);    t4.put("b", 10);    t4.put("c", 11);    // Same input object can be used as the oper is just pass through    int numtuples = 12;    for (int i = 0; i < numtuples; i++) {      oper.data.process(i);    }    oper.endWindow();    Assert.assertEquals("number emitted tuples", numtuples / 3,        mapSink.collectedTuples.size());    log.debug(mapSink.collectedTuples.toString());    Assert.assertEquals("tuple 1", t1, mapSink.collectedTuples.get(0));    Assert.assertEquals("tuple 2", t2, mapSink.collectedTuples.get(1));    Assert.assertEquals("tuple 3", t3, mapSink.collectedTuples.get(2));    Assert.assertEquals("tuple 4", t4, mapSink.collectedTuples.get(3));  }
@Test    public void testSetOpen() throws Exception {        final boolean isOpen = false;        item.setOpen(isOpen);        verify(view).setOpen(isOpen);    }
@Test  public void testGetCatalogAdapters() throws Exception {    given().expect().statusCode(HttpStatus.SC_OK).when().get(rt.host("catalogAdapters")).then()            .body("title", hasItems("name 1", "name 2")).contentType(ContentType.JSON).body("", hasSize(2));  }
@Test    public void testOriginResolutionWithAllPlugins() {        //given        EC2Plugin ec2Plugin = Mockito.mock(EC2Plugin.class);        ECSPlugin ecsPlugin = Mockito.mock(ECSPlugin.class);        ElasticBeanstalkPlugin ebPlugin = Mockito.mock(ElasticBeanstalkPlugin.class);        EKSPlugin eksPlugin = Mockito.mock(EKSPlugin.class);        List<Plugin> plugins = new ArrayList<>();        plugins.add(ec2Plugin);        plugins.add(ecsPlugin);        plugins.add(ebPlugin);        plugins.add(eksPlugin);        List<String> origins = new ArrayList<>();        origins.add(EC2Plugin.ORIGIN);        origins.add(ECSPlugin.ORIGIN);        origins.add(ElasticBeanstalkPlugin.ORIGIN);        origins.add(EKSPlugin.ORIGIN);        Map<String, Object> runtimeContext = new HashMap<>();        runtimeContext.put("key", "value");        for (int i = 0; i < 4; i++) {            Mockito.doReturn(true).when(plugins.get(i)).isEnabled();            Mockito.doReturn(runtimeContext).when(plugins.get(i)).getRuntimeContext();            Mockito.doReturn("serviceName").when(plugins.get(i)).getServiceName();            Mockito.doReturn(origins.get(i)).when(plugins.get(i)).getOrigin();        }        AWSXRayRecorder recorder = AWSXRayRecorderBuilder.standard()                                                         .withPlugin(ec2Plugin)                                                         .withPlugin(ecsPlugin)                                                         .withPlugin(ebPlugin)                                                         .withPlugin(eksPlugin)                                                         .build();        // when        Assert.assertEquals(ElasticBeanstalkPlugin.ORIGIN, recorder.getOrigin());    }
@Test  public void testLoad() throws Exception {    // basic load    resolver.load("com.databricks:spark-csv_2.10:1.3.0", testCopyPath);    assertEquals(new File(home + "/" + testCopyPath).list().length, 4);    FileUtils.cleanDirectory(new File(home + "/" + testCopyPath));    // load with exclusions parameter    resolver.load("com.databricks:spark-csv_2.10:1.3.0",        Collections.singletonList("org.scala-lang:scala-library"), testCopyPath);    assertEquals(new File(home + "/" + testCopyPath).list().length, 3);    FileUtils.cleanDirectory(new File(home + "/" + testCopyPath));    // load from added repository    resolver.addRepo("sonatype", "https://oss.sonatype.org/content/repositories/agimatec-releases/", false);    resolver.load("com.agimatec:agimatec-validation:0.9.3", testCopyPath);    assertEquals(new File(home + "/" + testCopyPath).list().length, 8);    // load invalid artifact    resolver.delRepo("sonatype");    exception.expect(RepositoryException.class);    resolver.load("com.agimatec:agimatec-validation:0.9.3", testCopyPath);  }
@Test    public void parseCurve()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        GMLStreamReader gmlReader = getParser( "Curve.gml" );        XMLStreamReader xmlReader = gmlReader.getXMLReader();        Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Curve" ), xmlReader.getName() );        Curve curve = (Curve) gmlReader.readGeometry();        Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Curve" ), xmlReader.getName() );        Assert.assertEquals( 2, curve.getCurveSegments().size() );        Assert.assertEquals( ARC, curve.getCurveSegments().get( 0 ).getSegmentType() );        Assert.assertEquals( LINE_STRING_SEGMENT, curve.getCurveSegments().get( 1 ).getSegmentType() );    }
@Test	public void test4(){		transactions.stream()				.map((t) -> t.getTrader().getName())				.sorted()				.forEach(System.out::println);		System.out.println("------------------------------------");		String str = transactions.stream()				.map((t) -> t.getTrader().getName())				.sorted()				.reduce("", String::concat);		System.out.println(str);		System.out.println("------------------------------------");		transactions.stream()				.map((t) -> t.getTrader().getName())				.flatMap(TestTransaction::filterCharacter)				.sorted((s1, s2) -> s1.compareToIgnoreCase(s2))				.forEach(System.out::print);	}
@Test    public void should_bind_null_value() throws Exception {        //Given        String queries = "@prepare[bind_null]=INSERT INTO zeppelin.users(login,firstname,lastname) VALUES(?,?,?)\n" +                "@bind[bind_null]='bind_null',null,'NULL'\n" +                "SELECT firstname,lastname FROM zeppelin.users WHERE login='bind_null';";        //When        final InterpreterResult actual = interpreter.interpret(queries, intrContext);        //Then        assertThat(actual.code()).isEqualTo(Code.SUCCESS);        assertThat(actual.message()).isEqualTo("firstname\tlastname\n" +                "null\tNULL\n");    }
@Test  public void testGetGeneratedTranscriptionNoJobId() throws Exception {    database.storeJobControl(MP_ID, TRACK_ID, JOB_ID, TranscriptionJobControl.Status.InProgress.name(), TRACK_DURATION, DATE_EXPECTED, PROVIDER);    database.storeJobControl(MP_ID, "audioTrack2", "jobId2", TranscriptionJobControl.Status.InProgress.name(),            TRACK_DURATION, DATE_EXPECTED, PROVIDER);    database.updateJobControl(JOB_ID, TranscriptionJobControl.Status.TranscriptionComplete.name());    URI uri = new URI("http://ADMIN_SERVER/collection/" + GoogleSpeechTranscriptionService.TRANSCRIPT_COLLECTION + "/"            + JOB_ID + ".json");    EasyMock.expect(workspace.getCollectionURI(GoogleSpeechTranscriptionService.TRANSCRIPT_COLLECTION, JOB_ID + ".json"))            .andReturn(uri);    EasyMock.expect(workspace.get(uri)).andReturn(null); // Doesn't matter what is returned    EasyMock.replay(workspace);    MediaPackageElement mpe = service.getGeneratedTranscription(MP_ID, null);    Assert.assertEquals("captions", mpe.getFlavor().getType());    Assert.assertEquals("google-speech-json", mpe.getFlavor().getSubtype());    Assert.assertEquals(uri.toString(), mpe.getURI().toString());  }
@Test public void testAllowReturnTransitionOverlap() {		// Arrange:		final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		// Act + Assert:		assertThat(request.allowReturnTransitionOverlap(false), is(request));		assertThat(request.allowReturnTransitionOverlap(), is(false));		assertThat(request.allowReturnTransitionOverlap(true), is(request));		assertThat(request.allowReturnTransitionOverlap(), is(true));    }
@Test(description = "This test case tests handling PolicyComplianceException when checking policy compliance",          dependsOnMethods = "testCheckPolicyComplianceThrowingProfileManagerDAOException",          expectedExceptions = PolicyComplianceException.class)    public void testAddProfileThrowingPolicyComplianceException() throws Exception {        Pair<Connection, Pair<DataSource, DataSource>> pair = mockConnection();        PowerMockito.doAnswer(new Answer<Connection>() {            int callCounter = 0;            @Override            public Connection answer(InvocationOnMock invocationOnMock) throws Throwable {                if(callCounter > 0){                    Field currentConnectionField = PolicyManagementDAOFactory.class.getDeclaredField("currentConnection");                    currentConnectionField.setAccessible(true);                    ThreadLocal<Connection> threadLocal = new ThreadLocal<>();                    threadLocal.set(pair.first());                    currentConnectionField.set(null, threadLocal);                    throw new SQLException();                }                callCounter++;                return pair.second().first().getConnection();            }        }).when(pair.second().second()).getConnection();        DeviceIdentifier deviceIdentifier = new DeviceIdentifier();        deviceIdentifier.setType(DEVICE_TYPE_E);        deviceIdentifier.setId(String.valueOf(device5.getDeviceIdentifier()));        try {            monitoringManager.checkPolicyCompliance(deviceIdentifier, new ArrayList<ComplianceFeature>());        } finally {            PolicyManagementDAOFactory.init(pair.second().first());        }    }
@Test    public void queryEventsByCategory() throws Exception {        int numTenants = 1;        int numTriggers = 5;        int numEvents = 5;        createTestEvents(numTenants, numTriggers, numEvents);        Set<String> tenantIds = new HashSet<>();        tenantIds.add("tenant0");        EventsCriteria criteria = new EventsCriteria();        criteria.setCategory("category0");        List<Event> category0Events = alerts.getEvents(tenantIds, criteria, null);        assertEquals(15, category0Events.size());        criteria.setCategories(Arrays.asList("category0", "category1"));        List<Event> category01Events = alerts.getEvents(tenantIds, criteria, null);        assertEquals(5 * 5, category01Events.size());        deleteTestEvents(numTenants);    }
@Test    public void testActionValueEditorRefreshPredicateNotRefreshed() throws Exception {        final ActionFieldValue valueOne = mock(ActionFieldValue.class);        final ActionFieldValue valueTwo = mock(ActionFieldValue.class);        final ActionValueEditor editorOne = mock(ActionValueEditor.class);        final ActionValueEditor editorTwo = mock(ActionValueEditor.class);        final Map<ActionFieldValue, ActionValueEditor> editors = new HashMap<>();        editors.put(valueOne, editorOne);        editors.put(valueTwo, editorTwo);        doReturn(FieldNatureType.TYPE_LITERAL).when(valueOne).getNature();        doReturn(FieldNatureType.TYPE_PREDICATE).when(valueTwo).getNature();        RefreshUtil.refreshActionValueEditorsDropDownData(editors, mock(ActionFieldValue.class));        verify(editorOne).refresh();        verify(editorTwo, never()).refresh();    }
@Test(expected = IllegalArgumentException.class)    public void populateRightDocks_Unknown() {        scenarioSimulationEditorBusinessClientWrapper.populateDocks("Unknown");        verify(scenarioSimulationEditorPresenterMock, never()).setTestTools(any());        verify(coverageReportPresenterMock, never()).setCurrentPath(any());        verify(scenarioSimulationEditorPresenterMock, never()).setSettings(any());        verify(settingsPresenterMock, never()).setCurrentPath(any());        verify(cheatSheetPresenterMock, never()).setCurrentPath(any());        verify(scenarioSimulationEditorPresenterMock, never()).setCheatSheet(any());    }
@Test    public void t04_complexGrouping() throws Exception {        String e1 = "(tagA and not tagB) and (not tagC or tagD)";        assertEquals("and(and(tagA, not tagB), or(tagD, not tagC))", parser.parse(e1));        String e2 = "(not tagB and tagA) and (not tagC or tagD)";        assertEquals("and(and(tagA, not tagB), or(tagD, not tagC))", parser.parse(e2));        String e3 = "(not tagA and (not tagB and tagC)) and tagD";        assertEquals("and(tagD, and(and(tagC, not tagB), not tagA))", parser.parse(e3));        String e4 = "((not tagA and (not tagB and tagC)) and tagD) and tagE";        assertEquals("and(tagE, and(tagD, and(and(tagC, not tagB), not tagA)))", parser.parse(e4));    }
@Test(description = "This test case tests handling FeatureManagerDAOException when deleting a profile",          dependsOnMethods = "testDeleteProfileThrowingProfileManagerDAOException")    public void testDeleteProfileThrowingFeatureManagerDAOException() throws Exception {        FeatureDAO featureDAO = mock(FeatureDAO.class);        when(featureDAO.deleteFeaturesOfProfile(any(Profile.class))).thenThrow(new FeatureManagerDAOException());        testThrowingException(profileManager, profile1, p -> profileManager.deleteProfile(profile1), "featureDAO",                              featureDAO,                              FeatureManagerDAOException.class);    }
@Test(expected = IllegalArgumentException.class)	public void testNullFileVersionFailsWhenQueryingAll() {		_amImageQueryBuilderImpl.forFileVersion(null);	}
@Test    void testEqualityNegativeBecauseGroup() {        Assertions.assertEquals(false, referenceA.equals(differentGroup));        Assertions.assertEquals(false, differentGroup.equals(referenceA));    }
@Test(expectedExceptions = RuntimeException.class)  public void testValidateTonyConfTooManyTotalInstances() {    Configuration conf = new Configuration();    conf.setInt(TonyConfigurationKeys.MAX_TOTAL_INSTANCES, 3);    conf.setInt("tony.foo.instances", 2);    conf.setInt("tony.bar.instances", 2);    TonyClient.validateTonyConf(conf);  }
@Test	public void testCreateProperty_1()		throws Exception {		ObjectFactory fixture = new ObjectFactory();		Property result = fixture.createProperty();		assertNotNull(result);		assertEquals("Property [name=null, value=null, description=null, getName()=null, getValue()=null, getDescription()=null]", result.toString());		assertEquals(null, result.getName());		assertEquals(null, result.getValue());		assertEquals(null, result.getDescription());	}
@Test    public void checkWidthWithNegativeValue()                            throws OWSException {        thrown.expect( OWSException.class );        thrown.expectMessage( "Width must be positive." );        checker.checkWidth( -1, null );    }
@Test  public void testRefreshFact() {    long timestamp = 123456789;    FactManager manager = getFactManagerWithMockedClock(timestamp);    FactEntity fact = createAndSaveFact();    assertEquals(fact.getLastSeenTimestamp(), manager.getFact(fact.getId()).getLastSeenTimestamp());    FactEntity refreshedFact = manager.refreshFact(fact.getId());    assertEquals(fact.getId(), refreshedFact.getId());    assertEquals(timestamp, refreshedFact.getLastSeenTimestamp());    assertEquals(timestamp, manager.getFact(fact.getId()).getLastSeenTimestamp());  }
@Test  public void testCopyBad() throws Exception {    StoragePath from = new StoragePath(ORG_ID, MP_ID, VERSION_1, MP_ELEM_ID);    StoragePath to = new StoragePath(ORG_ID, MP_ID, VERSION_2, MP_ELEM_ID);    assertFalse(repo.copy(from, to));  }
@Test    public void t08_checkSpacesInTagValues() throws Exception {        String e1 = "tagA = 'a b'";        assertEquals("[tagA, =, 'a b']", getTokens(parser.parse(e1)).toString());        String e2 = "tagA IN ['a b', 'c d'] ";        assertEquals("[tagA, in, ['a b','c d']]", getTokens(parser.parse(e2)).toString());    }
@Test	public void testDeletePlans() {		assertEquals(true, planController.deletePlan(1,plan));	}
@Test(expected = AMRuntimeException.class)	public void testFileVersionPathDLAppFailure() throws Exception {		Mockito.when(			_dlAppService.getFileVersion(1)		).thenThrow(			PortalException.class		);		_pathInterpreter.interpretPath("/image/0/1/x/foo.jpg");	}
@Test	public void testFilterWithoutSpace2() {		WorkflowDefinitionTitlePredicate predicate =			new WorkflowDefinitionTitlePredicate("Appr");		WorkflowDefinition workflowDefinition = new WorkflowDefinitionImpl(			null, "Single Approver");		boolean result = predicate.test(workflowDefinition);		Assert.assertTrue(result);	}
@Test  public void testClusterResourceNameIsRestricted() throws Exception {    try {      KafkaModelAuthorizables.from("Cluster=cluster1");      fail("Cluster with name other than " + Cluster.NAME + " must not have been created.");    } catch (ConfigurationException cex) {      assertEquals("Exception message is not as expected.", "Kafka's cluster resource can only have name " + Cluster.NAME, cex.getMessage());    } catch (Exception ex) {      fail("Configuration exception was expected for invalid Cluster name.");    }  }
@Test    public void unknownColumnTypeDoesNotTriggerBuilder() {        final BaseColumn column = new RowNumberCol52();        builder.generateDefinition( dtPresenter,                                    column,                                    ( String definition ) -> {                                        fail( "RowNumberCol52 should not be handled by ConditionCol52DefinitionBuilder" );                                    } );    }
@Test    public void testToString() throws Exception {        Map<String, Object> options = formatter.getDefaultOptions();        Value charVar = getVM().mirrorOf('c');        assertEquals("Should be able to format char type.", "c",            formatter.toString(charVar, options));        charVar = getVM().mirrorOf('C');        assertEquals("Should be able to format char type.", "C",            formatter.toString(charVar, options));        charVar = getVM().mirrorOf('?');        assertEquals("Should be able to format char type.", "?",            formatter.toString(charVar, options));        charVar = getVM().mirrorOf('中');        assertEquals("Should be able to format char type.", "中",            formatter.toString(charVar, options));    }
@Test  public void testLazyEachEmpty() {    final boolean[] run = {false};    mlazy(java.util.Collections.emptyList())            .each(new Effect<Object>() {              @Override              public void run(Object o) {                run[0] = true;              }            })            .eval();    assertFalse(run[0]);  }
@Test    public void populateListGroupItemView() {        listGroupItemPresenter.populateListGroupItemView(listGroupItemViewMock, "", FACT_MODEL_TREE.getFactName(), FACT_MODEL_TREE);        verify(listGroupItemViewMock, times(1)).setFactName(eq(FACT_MODEL_TREE.getFactName()));        Map<String, FactModelTree.PropertyTypeName> simpleProperties = FACT_MODEL_TREE.getSimpleProperties();        InOrder inOrder = inOrder(fieldItemPresenterSpy);        simpleProperties.keySet().stream().sorted().forEach(key -> {            FactModelTree.PropertyTypeName value = simpleProperties.get(key);            inOrder.verify(fieldItemPresenterSpy, times(1)).getLIElement(eq(FACT_MODEL_TREE.getFactName()), eq(FACT_MODEL_TREE.getFactName()), eq(key), eq(value.getTypeName()), eq(value.getPropertyTypeNameToVisualize()));        });        verify(listGroupItemViewMock, times(simpleProperties.size())).addFactField(anyObject());        reset(listGroupItemViewMock);        Map<String, String> expandableProperties = FACT_MODEL_TREE.getExpandableProperties();        expandableProperties.entrySet().stream().sorted().forEach(entry -> inOrder.verify(listGroupItemPresenter, times(1)).getDivElement(eq(""), eq(entry.getKey()), eq(entry.getValue())));        verify(listGroupItemViewMock, times(expandableProperties.size())).addExpandableFactField(anyObject());    }
@Test    public void onRunScenario() {        scenarioWithIndexLocal.add(new ScenarioWithIndex(1, new Scenario()));        scenarioWithIndexLocal.add(new ScenarioWithIndex(2, new Scenario()));        scenarioWithIndexLocal.add(new ScenarioWithIndex(3, new Scenario()));        when(simulationMock.getDataByIndex(anyInt())).thenReturn(mock(Scenario.class));        List<Integer> indexList = Arrays.asList(0, 2);        presenterSpy.onRunScenario(indexList);        verify(scenarioGridWidgetSpy, times(1)).resetErrors();        verify(backgroundGridWidgetSpy, times(1)).resetErrors();        verify(scenarioSimulationModelMock, times(1)).setSimulation(simulationMock);        verify(scenarioSimulationModelMock, times(1)).setBackground(backgroundMock);        verify(scenarioSimulationViewMock, times(1)).showBusyIndicator(anyString());        verify(scenarioSimulationEditorWrapperMock, times(1)).onRunScenario(any(), any(), any(), eq(settingsLocal), scenarioWithIndexCaptor.capture(), any());        List<ScenarioWithIndex> capturedValue = scenarioWithIndexCaptor.getValue();        assertEquals(2, capturedValue.size());        for (Integer requestedIndex : indexList) {            assertEquals(1, capturedValue.stream().filter(elem -> elem.getIndex() == (requestedIndex + 1)).count());        }    }
@Test(expectedExceptions = NullPointerException.class)    public void testRemoveNull() {        EdgeStore edgeStore = new EdgeStore();        edgeStore.remove(null);    }
@Test    @SuppressWarnings("unchecked")    public void makeOnCreationCallbackListBoxMultipleSelectMoreThanMaximum() {        setupMultipleSelectTest(ConsumerFactory.MAX_VISIBLE_ROWS + 1,                                true);        final Consumer callback = ConsumerFactory.makeOnCreationCallback(factory,                                                                         cell,                                                                         enumLookups);        callback.accept(multiValueDOMElement);        verify(multiValueWidget).setVisibleItemCount(eq(ConsumerFactory.MAX_VISIBLE_ROWS));        verifyMultipleSelectTest(ConsumerFactory.MAX_VISIBLE_ROWS + 1);    }
@Test	public void testGetExcerptWhenAnchorHasParent() throws Exception {		whenHttpURLToString(			StringBundler.concat(				"<body><p>Visit <a href='http://", _TARGET_URI,				"'>Liferay</a> to learn more</p></body>"));		execute();		verifyExcerpt("Visit Liferay to learn more");	}
@Test    public void testGetFactField() throws Exception {        final String expectedFactField = "factField";        doReturn(expectedFactField).when(editingWrapper).getFactField();        final String actualFactField = plugin.getFactField();        assertEquals(expectedFactField,                     actualFactField);    }
@Test(expected = IllegalArgumentException.class)    public void testCreation_withIncorrectSizes() {        labels.remove(0);        LabeledDenseMatrix.of(M, labels);    }
@Test    public void testEnumHasPriorityOverListOperatorLong() throws Exception {        testEnumAndOperator(DataType.TYPE_NUMERIC_LONG, "in");        verify(testedFactory).decoratedGridCellValueAdaptor(puddCaptor.capture());        assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);    }
@Test	public void testMultiply() {		seqStub s = makeSeq(1, 2, 3);		s.multiply(2);		assertEquals(makeSeq(2, 4, 6), s);		s.multiply(1);		assertEquals(makeSeq(2, 4, 6), s);		s.multiply(-1);		assertEquals(makeSeq(-2, -4, -6), s);		s.multiply(1, 2, 2);		assertEquals(makeSeq(-2, -8, -12), s);		s.multiply(1, 0, 1);		assertEquals(makeSeq(-2, 0, -12), s);		s.multiply(2.5f);		assertEquals(makeFloatSeq(-2 * 2.5f, 0, -12 * 2.5f), s);		s.set(new Atom[] { Atom.newAtom(1), Atom.newAtom("a"), Atom.newAtom(2.5), Atom.newAtom("b") });		s.multiply(2);		assertEquals(Atom.newAtom(2), s.seq.get(0).toAtom());		assertEquals(Atom.newAtom("a"), s.seq.get(1).toAtom());		assertEquals(Atom.newAtom(2.5 * 2), s.seq.get(2).toAtom());		assertEquals(Atom.newAtom("b"), s.seq.get(3).toAtom());	}
@Test    public void testSetupBinding() {        final IsWidget isWidget = mock(IsWidget.class);        final Widget widget = mock(Widget.class);        doReturn(widget).when(isWidget).asWidget();        view.setupBinding(isWidget);        verify(elemental2DomUtil).removeAllElementChildren(bindingFieldContainer);        verify(elemental2DomUtil).appendWidgetToElement(bindingFieldContainer, widget);    }
@Test	public void testGetParameter() {		NestedFieldsHttpServletRequestWrapper			nestedFieldsHttpServletRequestWrapper =				new NestedFieldsHttpServletRequestWrapper(					"skus",					new MockHttpServletRequest(						"skus", "externalReferenceCode", "12345", "width",						"11"));		Assert.assertEquals(			"12345",			nestedFieldsHttpServletRequestWrapper.getParameter(				"externalReferenceCode"));		Assert.assertEquals(			"11", nestedFieldsHttpServletRequestWrapper.getParameter("width"));	}
@Test    public void testRemoveAllEdges() {        GraphStore graphStore = new GraphStore();        NodeStore nodeStore = GraphGenerator.generateNodeStore(5);        EdgeImpl[] edges = GraphGenerator.generateEdgeList(nodeStore, 5, 0, true, true, false);        graphStore.addAllEdges(Arrays.asList(edges));        graphStore.removeAllEdges(Arrays.asList(edges));        Assert.assertEquals(graphStore.getEdgeCount(), 0);        for (EdgeImpl e : edges) {            Assert.assertFalse(graphStore.contains(e));        }    }
@Test  public void testGrantPrivilegeTwice() throws Exception {    String roleName = "r1";    /**     * grantor is admin, there is no need to check grant option     */    String grantor = ADMIN_USER;    sentryStore.createRole(SEARCH, roleName, grantor);    PrivilegeObject queryPrivilegeWithOption = new Builder()    .setComponent(SEARCH)    .setAction(SearchConstants.QUERY)    .setService(SERVICE)    .setAuthorizables(Arrays.asList(new Collection(COLLECTION_NAME)))    .withGrantOption(true)    .build();    sentryStore.alterRoleGrantPrivilege(SEARCH, roleName, queryPrivilegeWithOption, grantor);    assertEquals(1,sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)).size());    //grant again    sentryStore.alterRoleGrantPrivilege(SEARCH, roleName, queryPrivilegeWithOption, grantor);    assertEquals(1,sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)).size());    PrivilegeObject queryPrivilegeWithNoOption = new Builder()    .setComponent(SEARCH)    .setAction(SearchConstants.QUERY)    .setService(SERVICE)    .setAuthorizables(Arrays.asList(new Collection(COLLECTION_NAME)))    .withGrantOption(false)    .build();    sentryStore.alterRoleGrantPrivilege(SEARCH, roleName, queryPrivilegeWithNoOption, grantor);    assertEquals(2,sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)).size());    //grant again    sentryStore.alterRoleGrantPrivilege(SEARCH, roleName, queryPrivilegeWithNoOption, grantor);    assertEquals(2,sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)).size());    PrivilegeObject queryPrivilegeWithNullGrant = new Builder()        .setComponent(SEARCH)        .setAction(SearchConstants.QUERY)        .setService(SERVICE)        .setAuthorizables(Arrays.asList(new Collection(COLLECTION_NAME)))        .withGrantOption(null)        .build();    sentryStore.alterRoleGrantPrivilege(SEARCH, roleName, queryPrivilegeWithNullGrant, grantor);    assertEquals(3,sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)).size());    //grant again    sentryStore.alterRoleGrantPrivilege(SEARCH, roleName, queryPrivilegeWithNullGrant, grantor);    assertEquals(3,sentryStore.getPrivilegesByRole(SEARCH, Sets.newHashSet(roleName)).size());  }
@Test  public void testParsingOneAttribute() {    uri = "mysql://localhost?user=other";    actualParsedResult = parse(uri);    expectedParsedResult = new JsonObject()      .put("host", "localhost")      .put("user", "other");    assertEquals(expectedParsedResult, actualParsedResult);  }
@Test    public void testHandleAttributeAddition_LockLHS() {        popup.handleAttributeAddition(RuleAttributeWidget.LOCK_LHS);        assertThat(model.attributes).isEmpty();        assertThat(model.metadataList).containsExactly(new RuleMetadata(RuleAttributeWidget.LOCK_LHS, "true"));        verify(refreshCommand).execute();    }
@Test    public void testCollectAndSortFeatureTypesToExport_AllFeatureTypes() {        List<FeatureType> featureTypes = featureTypes();        StoredQueryHandler storedQueryHandler = new StoredQueryHandler( mockWFS( featureTypes ), new ArrayList<URL>(),                                                                        managedStoredQueries );        List<QName> configuredFeatureTypeNames = Collections.emptyList();        List<QName> featureTypeNamesToExport = storedQueryHandler.collectAndSortFeatureTypesToExport( configuredFeatureTypeNames );        assertThat( featureTypeNamesToExport.size(), is( featureTypes.size() ) );        for ( FeatureType featureType : featureTypes ) {            assertThat( featureTypeNamesToExport, hasItems( featureType.getName() ) );        }    }
@Test    void testAfterAttempt() {        final Realm otherRealm = new IniRealm();        this.authStrategy.afterAttempt(otherRealm, null, null, null, new RuntimeException());        final AuthenticationInProgressException authInProgressException = new AuthenticationInProgressException();        this.authStrategy.afterAttempt(otherRealm, null, null, null, authInProgressException);        final Throwable exception = Assertions.assertThrows(AuthenticationInProgressException.class, () -> {            this.authStrategy.afterAttempt(new NegotiateAuthenticationRealm(), null, null, null,                    authInProgressException);        });        Assertions.assertNull(exception.getMessage());    }
@Test    public void testOnDecisionTableSelectedEventReadOnly() {        //ViewMenuBuilder.setup() called in @Setup disables view by default        assertFalse(builder.miToggleMergeState.getMenuItem().isEnabled());        assertFalse(builder.miViewAuditLog.getMenuItem().isEnabled());        dtPresenter.getAccess().setReadOnly(true);        builder.onDecisionTableSelectedEvent(new DecisionTableSelectedEvent(dtPresenter));        //Verify selecting a read-only Decision Table also disables view        assertFalse(builder.miToggleMergeState.getMenuItem().isEnabled());        assertFalse(builder.miViewAuditLog.getMenuItem().isEnabled());    }
@Test(expected = IllegalArgumentException.class)    public void testParseOptions_withMissingOptions() {        String[] args = new String[] { "fail-on-random-option" };        Options options = new Options();        options.addOption(Option.builder("o").required().build());        CommonCLIBuilder.parseOptions(this.getClass(), args, options);    }
@Test	public void testPluginWithBadVersion() throws Exception {		Analyzer analyzer = new Analyzer();		Jar jar = new Jar("test");		jar.putResource(			"package.json",			new EmbeddedResource(				getString("dependencies/package.bad.version.json"), 0));		analyzer.setJar(jar);		NpmAnalyzerPlugin npmAnalyzerPlugin = new NpmAnalyzerPlugin();		npmAnalyzerPlugin.analyzeJar(analyzer);		Assert.assertEquals("0.0.0.1word-cha_rs", analyzer.getBundleVersion());		Assert.assertEquals(			"/liferay-0.0.0.1word-cha_rs",			analyzer.getProperty(NpmAnalyzerPlugin.WEB_CONTEXT_PATH));		Assert.assertEquals(			"osgi.webresource;osgi.webresource=liferay;" +				"version:Version=\"0.0.0.1word-cha_rs\"",			analyzer.getProperty(Constants.PROVIDE_CAPABILITY));	}
@Test	public void testGetSessionId() {		assertEquals("testID", user.getSessionId());	}
@Test    public void prepareContent() {        scenarioSimulationEditorKogitoWrapperSpy.prepareContent(resolveCallBackMock, rejectCallbackFnMock);        verify(scenarioSimulationEditorKogitoWrapperSpy, times(1)).synchronizeColumnsDimension(eq(simulationGridPanelMock), eq(backgroundGridPanelMock));        verify(scenarioSimulationEditorKogitoWrapperSpy, times(1)).marshallContent(eq(scenarioSimulationModelMock), eq(resolveCallBackMock));        verify(scenarioSimulationEditorPresenterMock, never()).sendNotification(any(), any());    }
@Test    public void editProperties() {        propertyEditorPresenter.editProperties(ITEM_ID);        verify(spanElementMock, times(1)).getStyle();        verify(styleMock, times(1)).setDisplay(Style.Display.NONE);        verify(propertyValueInputMock, times(1)).setValue(anyString());        verify(propertyValueInputMock, times(1)).getStyle();        verify(styleMock, times(1)).setDisplay(Style.Display.INLINE);        verify(propertyValueInputMock, times(1)).setDisabled(eq(false));    }
@Test  public void testRetractFactUpdatesEntity() {    FactRecord record = new FactRecord().setId(UUID.randomUUID());    mockReindexingOfFact(record);    assertNotNull(dao.retractFact(record));    verify(factManager).retractFact(record.getId());    verifyReindexingOfFact(record);  }
@Test	public void testGetRealEigenvalues_symentric() {		EigenvalueDecomposition decomposition =				new EigenvalueDecomposition(matrix2);		double[] d = decomposition.getRealEigenvalues();		assertEquals(2, d.length);		assertEquals(-5.2008771255, d[0], 1e-10);		assertEquals(6.2008771255, d[1], 1e-10);	}
@Test    public void testHttp() throws Exception{    	mockMvc.perform(post("/mock/http").with(request -> {    		request.setRemoteAddr("192.168.0.1");    		return request;    	}));    }
@Test(description = "This test case tests handling SQLException when checking is compliant",          dependsOnMethods = "testIsCompliantThrowingMonitoringDAOException",          expectedExceptions = IllegalTransactionStateException.class)    public void testIsCompliantThrowingIllegalTransactionStateException() throws Exception {        Pair<Connection, Pair<DataSource, DataSource>> pair = mockConnection();        PowerMockito.doThrow(new SQLException()).when(pair.second().second()).getConnection();        try {            DeviceIdentifier deviceIdentifier = new DeviceIdentifier();            deviceIdentifier.setType(DEVICE_TYPE_E);            deviceIdentifier.setId(String.valueOf(device5.getDeviceIdentifier()));            monitoringManager.isCompliant(deviceIdentifier);        } finally {            PolicyManagementDAOFactory.init(pair.second().first());        }    }
@Test    public void checkConstructContent() {        final Path path = mock(Path.class);        final Overview overview = mock(Overview.class);        final PackageDataModelOracle oracle = mock(PackageDataModelOracle.class);        when(oracle.getModuleCollectionTypes()).thenReturn(new HashMap<String, Boolean>() {{            put("java.util.List",                true);            put("java.util.Set",                true);            put("java.util.Collection",                true);            put("java.util.UnknownCollection",                false);        }});        final Set<PortableWorkDefinition> workItemDefinitions = new HashSet<>();        when(path.toURI()).thenReturn("file://project/src/main/resources/mypackage/dtable.gdst");        when(dataModelService.getDataModel(eq(path))).thenReturn(oracle);        when(workItemsService.loadWorkItemDefinitions(eq(path))).thenReturn(workItemDefinitions);        final GuidedDecisionTableEditorContent content = service.constructContent(path,                                                                                  overview);        verify(resourceOpenedEvent,               times(1)).fire(any(ResourceOpenedEvent.class));        assertNotNull(content.getModel());        assertNotNull(content.getDataModel());        assertNotNull(content.getWorkItemDefinitions());        assertEquals(overview,                     content.getOverview());        assertEquals(3,                     content.getDataModel().getCollectionTypes().size());        assertTrue(content.getDataModel().getCollectionTypes().containsKey("java.util.Collection"));        assertTrue(content.getDataModel().getCollectionTypes().containsKey("java.util.List"));        assertTrue(content.getDataModel().getCollectionTypes().containsKey("java.util.Set"));    }
@Test	public void testLessThan1() throws Exception {		DDMExpressionImpl<Boolean> ddmExpressionImpl = createDDMExpression(			"0 < 4");		Assert.assertTrue(ddmExpressionImpl.evaluate());	}
@Test	public void testCompileStringSassVariableWithUnicode() throws Exception {		try (SassCompiler sassCompiler = new JSassCompiler()) {			File inputDir = new File(				"../sass-compiler-jni/test-classes/unit/com/liferay/sass" +					"/compiler/jni/internal/dependencies/");			File inputFile = new File(inputDir, "/unicode/input.scss");			String input = read(inputFile.toPath());			String actualOutput = sassCompiler.compileString(input, "");			Assert.assertNotNull(actualOutput);			File expectedOutputFile = new File(				inputDir, "/unicode/expected_output.css");			String expectedOutput = read(expectedOutputFile.toPath());			Assert.assertEquals(				stripNewLines(expectedOutput), stripNewLines(actualOutput));		}	}
@Test	public void testParseWithLambdaAnyEqOnCollectionFieldInComplexField()		throws ExpressionVisitException {		Expression expression = _filterParserImpl.parse(			"complexField/collectionField/any(f:contains(f,'alu'))");		Assert.assertNotNull(expression);	}
@Test  public void testConvertRequestFilterOnObjectID() throws Exception {    UUID id = UUID.randomUUID();    FactSearchCriteria criteria = converter.apply(new SearchObjectRequest().addObjectID(id));    assertEquals(SetUtils.set(id), criteria.getObjectID());  }
@Test	public void testClose() throws Exception {		UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader(""));		unsyncBufferedReader.close();		Assert.assertNull(_bufferField.get(unsyncBufferedReader));		Assert.assertNull(_readerField.get(unsyncBufferedReader));		try {			unsyncBufferedReader.readLine();			Assert.fail();		}		catch (IOException ioException) {			Assert.assertEquals("Reader is null", ioException.getMessage());		}		testClose(unsyncBufferedReader, "Reader is null");	}
@Test	public void testSingleEmail() {		IsEmailAddressFunction isEmailAddressFunction =			new IsEmailAddressFunction();		Boolean result = isEmailAddressFunction.apply("test@liferay.com");		Assert.assertTrue(result);	}
@Test    public void testAIXMNumberOfFeatureTypes()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaUrl = this.getClass().getResource( "../aixm/schema/message/AIXM_BasicMessage.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaUrl );        AppSchema schema = adapter.extractAppSchema();        FeatureType[] fts = schema.getFeatureTypes();        Assert.assertEquals( 157, fts.length );    }
@Test	public void testGetOperationByHash() throws FailedVerificationException {		OpBlockChain opBlockChain = dbConsensusManager.init(metadataDb);		generateOperations(formatter, opBlockChain);		OpBlock opBlock = opBlockChain.createBlock(serverName, serverKeyPair);		opBlock.getOperations().forEach(opOperation -> dbConsensusManager.insertOperation(opOperation));		OpOperation opOperation = opBlock.getOperations().get(0);		assertNotNull(dbConsensusManager.getOperationByHash(opOperation.getHash()));		assertEquals(1,				dbConsensusManager.removeOperations(new HashSet<>(Collections.singletonList(opOperation.getHash()))));		assertNull(dbConsensusManager.getOperationByHash(opOperation.getHash()));	}
@Test    //https://bugzilla.redhat.com/show_bug.cgi?id=1256623    public void testEmptyCells() {        final ConversionResult result = new ConversionResult();        final List<DataListener> listeners = new ArrayList<DataListener>();        final GuidedDecisionTableGeneratorListener listener = new GuidedDecisionTableGeneratorListener(result,                                                                                                       dmo);        listeners.add(listener);        //Convert        final ExcelParser parser = new ExcelParser(listeners);        final InputStream is = this.getClass().getResourceAsStream("EmptySpreadsheetCells.xls");        try {            parser.parseFile(is);        } finally {            try {                is.close();            } catch (IOException ioe) {                fail(ioe.getMessage());            }        }        //Check conversion results        assertEquals(0,                     result.getMessages().size());        //Check basics        List<GuidedDecisionTable52> dtables = listener.getGuidedDecisionTables();        assertNotNull(dtables);        assertEquals(1,                     dtables.size());        final GuidedDecisionTable52 dtable = dtables.get(0);        assertEquals("ExceptionPrivateCar",                     dtable.getTableName());        assertEquals(GuidedDecisionTable52.TableFormat.EXTENDED_ENTRY,                     dtable.getTableFormat());        //Check expanded columns        List<BaseColumn> columns = dtable.getExpandedColumns();        assertNotNull(columns);        assertEquals(21,                     columns.size());        assertTrue(columns.get(0) instanceof RowNumberCol52);        assertTrue(columns.get(1) instanceof RuleNameColumn);        assertTrue(columns.get(2) instanceof DescriptionCol52);        assertTrue(columns.get(3) instanceof AttributeCol52);        assertTrue(columns.get(4) instanceof AttributeCol52);        assertTrue(columns.get(5) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(6) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(7) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(8) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(9) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(10) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(11) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(12) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(13) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(14) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(15) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(16) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(17) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(18) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(19) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(20) instanceof BRLActionVariableColumn);    }
@Test	public void testAnd() {		SafeLdapFilter safeLdapFilter = SafeLdapFilterConstraints.eq(			"key1", "value1");		test(			safeLdapFilter.and(SafeLdapFilterConstraints.eq("key2", "value2")),			"(&(key1={0})(key2={1}))", new Object[] {"value1", "value2"});	}
@Test    public void getTabIndex() {        assertEquals(TAB_INDEX, collectionEditorDOMElementSpy.getTabIndex());    }
@Test    public void decodeNotEnoughData() {        Http2Connection connection = new Http2Connection();        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.PING_NO_ENOUGH_DATA_BUFFER);        Http2PingFrame frame = (Http2PingFrame) connection.decode(buffer);        assertNotNull(frame);        assertEquals(1, frame.getLength());        assertEquals(6, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(32, frame.getStreamID());        assertArrayEquals(new byte[] {0x00}, frame.getData());    }
@Test  public void testConvertUncachedSubjectNotAvailable() {    UUID id = UUID.randomUUID();    Subject model = converter.apply(id);    assertNotNull(model);    assertEquals(id, model.getId());    assertEquals("N/A", model.getName());    verify(subjectResolver).resolveSubject(id);  }
@Test(expected = IllegalArgumentException.class)    public void tryToFindAndFail() throws Exception {        new HeaderMetaData(new HashMap<>()).getPatternsByColumnNumber(1);    }
@Test  public void testObjectIsNotNull() {    assertTrue(new ServiceNotNullValidator().isValid(new Object(), null));  }
@Test  public void testDecodeRequest() throws Exception {    UUID id = UUID.randomUUID();    String json = String.format("{ id : '%s' }", id);    GetFactTypeByIdRequest request = getMapper().readValue(json, GetFactTypeByIdRequest.class);    assertEquals(id, request.getId());  }
@Test    public void given$show_whenQuery_thenShouldCallNativeApi() {        // given        PowerMockito.mockStatic(Replies.class);        // when        rnModule.show();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Replies.show();    }
@Test    public void attemptAuthentication_test_with_username_password() {        mockHttpServletRequest.setMethod("POST");        mockHttpServletRequest.setParameter("username", "username");        mockHttpServletRequest.setParameter("password", "password");        when(authenticationManager.authenticate(captor.capture())).thenReturn(null);        target.attemptAuthentication(mockHttpServletRequest, mockHttpServletResponse);        Authentication authenticationToken = captor.getValue();        assertThat(authenticationToken.getPrincipal()).isEqualTo("username");        assertThat(authenticationToken.getCredentials()).isEqualTo("password");    }
@Test  public void testGetEventOperations() throws Exception {    String eventMetadataString = IOUtils.toString(getClass().getResource("/eventOperations.json"));    String path = "{eventId}/workflows/{workflowId}/operations.json";    given().pathParam("eventId", "notExists").pathParam("workflowId", "notExists").expect()            .statusCode(HttpStatus.SC_NOT_FOUND).when().get(rt.host(path));    given().pathParam("eventId", "asdasd").pathParam("workflowId", "xxxx").expect()            .statusCode(HttpStatus.SC_BAD_REQUEST).when().get(rt.host(path));    given().pathParam("eventId", "asdasd").pathParam("workflowId", "9999").expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().get(rt.host(path));    String result = given().pathParam("eventId", "asdasd").pathParam("workflowId", "1").expect()            .statusCode(HttpStatus.SC_OK).when().get(rt.host(path)).asString();    assertThat(eventMetadataString, SameJSONAs.sameJSONAs(result));  }
@Test  public void testTraverseGraphReturnValue() throws Exception {    ObjectRecord source = mockObjectRecord(mockObjectType(), "someValue");    ObjectRecord destination = mockObjectRecord(mockObjectType(), "someOther");    mockFact(source, destination);    when(propertyHelper.getObjectProperties(eq(source), any()))            .thenReturn(ListUtils.list(new PropertyEntry<>("value", "someValue")));    ResultSet<?> resultSet = handler.traverse(set(source.getId()), "g.values('value')", TraverseParams.builder().build());    List<?> result = ListUtils.list(resultSet.iterator());    assertEquals(1, result.size());    assertEquals("someValue", result.get(0));  }
@Test	public void testValidateConfigurationValuesTextFieldTypeInvalidLength()		throws Exception {		expectedException.expect(FragmentEntryConfigurationException.class);		_fragmentEntryValidatorImpl.validateConfigurationValues(			_read(				"configuration_field_text_typeoptions_validation_length.json"),			JSONUtil.put("textField", StringUtil.randomString(11)));	}
@Test  public void testNoAnimation() {    EasyMock.replay(instance);    try {      handler.start(workflow, null);    } catch (WorkflowOperationException e) {      return;    }    // We expect this to fail and the test should never reach this point    Assert.fail();  }
@Test	public void testConstructor() {		Map<String, String> map = new HashMap<>();		for (int i = 0; i < 1024; i++) {			map.put("*.key" + i, "value" + i);		}		URLPatternMapper<String> urlPatternMapper = createURLPatternMapper(map);		for (int i = 0; i < 1024; i++) {			Assert.assertEquals(				"value" + i, urlPatternMapper.getValue("*.key" + i));		}	}
@Test    public void testGetAllEntities() throws Exception {        DateTimeFormatter dtf = DateTimeUtils.PARAMETER_WITH_DAY_DTF.withZone(dtZone);        String startTimeStr = dtf.print(mentionTime.minusDays(1));        String endTimeStr = dtf.print(mentionTime.plusDays(1));        List<ChatEntity> result = underTest.getAllEntites(startTimeStr, endTimeStr, null, null,                                                          null);        assertEquals(entities.size(), result.size());        Set<ChatEntity> resultEntitySet = Sets.newHashSet(result);        for (ChatEntity expectedEntity : entities) {            assertTrue(resultEntitySet.contains(expectedEntity));        }    }
@Test	public void testGetIntValue_3() {		String intStr = null;		int defaultVal = 1;		int result = ParserUtil.getIntValue(intStr, defaultVal);		assertEquals(1, result);	}
@Test  public void testCollection() throws Exception {    Collection coll = (Collection)SearchModelAuthorizables.from("CoLleCtiOn=collection1");    assertEquals("collection1", coll.getName());  }
@Test  public void testConstructTFConfig() throws IOException {    String spec = "{\"worker\":[\"host0:1234\", \"host1:1234\"], \"ps\":[\"host2:1234\"]}";    String tfConfig = Utils.constructTFConfig(spec, "worker", 1);    ObjectMapper mapper = new ObjectMapper();    TFConfig config = mapper.readValue(tfConfig, new TypeReference<TFConfig>() { });    assertEquals(config.getTask().getType(), "worker");    assertEquals(config.getTask().getIndex(), 1);    assertEquals(config.getCluster().get("worker").get(0), "host0:1234");    assertEquals(config.getCluster().get("worker").get(1), "host1:1234");    assertEquals(config.getCluster().get("ps").get(0), "host2:1234");  }
@Test	public void testGetCharsetDecoder() {		CharsetDecoder charsetDecoder = CharsetDecoderUtil.getCharsetDecoder(			"UTF-8");		Assert.assertEquals(Charset.forName("UTF-8"), charsetDecoder.charset());		Assert.assertSame(			CodingErrorAction.REPLACE, charsetDecoder.malformedInputAction());		Assert.assertSame(			CodingErrorAction.REPLACE,			charsetDecoder.unmappableCharacterAction());	}
@Test  public void testFileWithRelativePath() throws IOException  {    FileUtils.write(new File(testFM.outputDir, dummyDir + dummyFile), FILE_DATA);    when(testFM.fileMetaDataMock.getFileName()).thenReturn(dummyDir + dummyFile);    when(testFM.fileMetaDataMock.getRelativePath()).thenReturn(dummyDir + dummyFile);    when(testFM.fileMetaDataMock.getStitchedFileRelativePath()).thenReturn(dummyDir + dummyFile);    testFM.underTest.mergeOutputFile(testFM.fileMetaDataMock);    File statsFile = new File(testFM.outputDir, dummyDir + dummyFile);    Assert.assertTrue(statsFile.exists() && !statsFile.isDirectory());    Assert.assertEquals("File size differes", FILE_DATA.length(),        FileUtils.sizeOf(new File(testFM.outputDir, dummyDir + dummyFile)));  }
@Test  public void testFromEntityWithNullEntity() {    assertNull(converter.fromEntity(null));  }
@Test    public void givenCallback$getUnreadRepliesCount_whenQuery_thenShouldCallNativeApiAndInvokeCallback() {        // given        PowerMockito.mockStatic(Replies.class);        // when        Callback callback = mock(Callback.class);        rnModule.getUnreadRepliesCount(callback);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Replies.getUnreadRepliesCount();        verify(callback).invoke(any());    }
@Test    public void testFileMd5SumNotEquals_NotExistingFile() throws Exception {        Path path1 = Paths.get(FileDigestUtilTest.class.getResource("file1.txt").toURI());        Path path2 = Paths.get("doesnotexist.txt");        byte[] digest1 = fileDigestUtil.getFileMd5Sum(path1);        byte[] digest2 = fileDigestUtil.getFileMd5Sum(path2);        assertFalse(Arrays.equals(digest1, digest2));    }
@Test public void testOnCreateViewToBeAttachedToTheContainer() {		// Arrange:		final Activity activity = Robolectric.buildActivity(TestActivity.class).create().start().resume().get();		final BaseFragment fragment = new TestFragmentWithContentViewToBeAttachedToContainer();		final ViewGroup container = new FrameLayout(activity);		// Act:		final View view = fragment.onCreateView(activity.getLayoutInflater(), container, null);		// Assert:		assertThat(view, is(nullValue()));		assertThat(container.getChildCount(), is(1));	}
@Test        public void tcGetLeftFromDelimiterNumber_OKWDelimiterIsEmptyException()        {            try            {                OKWLanguage.getInstance().setLanguage("en");                OKW_Helper.getLeftFromDelimiterNumber("AAAAGGBBBBGGDDDD", "", 1);                fail();            }            catch (IllegalArgumentException e)            {                // Richtige Exception wurde ausgeloest daher Pass!                assertEquals("Delimiter is empty!", e.getMessage());                ////Pass();            }            catch (Exception e)            {                // Alle anderen Exvceptions sind Fail!                fail();            }        }
@Test  public void testTraverseGraphByObjectSearchWithoutSearchResult() throws Exception {    when(objectFactDao.searchObjects(any())).thenReturn(ResultContainer.<ObjectRecord>builder().build());    ResultSet<?> result = delegate.handle(new TraverseGraphByObjectSearchRequest().setSearch(new SearchObjectRequest()));    assertFalse(result.iterator().hasNext());    verify(requestConverter).apply(notNull());    verify(objectFactDao).searchObjects(notNull());    verifyNoInteractions(traverseGraphHandler);  }
@Test    public void testEqualKeywordFilter()                            throws Exception {        LOG.info( "START Test: testInsert" );        initStore( TstConstants.configURL );        Assume.assumeNotNull( store );        TstUtils.insertMetadata( store, TstConstants.tst_9, TstConstants.tst_10 );        Literal<PrimitiveValue> lit2 = new Literal<PrimitiveValue>( "SPOT 5" );        Operator op = new PropertyIsEqualTo( new ValueReference( "Subject", nsContext ), lit2, true, null );        Filter filter = new OperatorFilter( op );        MetadataQuery query = new MetadataQuery( null, null, filter, null, 1, 10 );        int recordCount = store.getRecordCount( query );        Assert.assertEquals( 1, recordCount );    }
@Test	public void testGetDecimalSymbolsWithAmericanLocale() {		Map<String, String> separatorSymbolsMap =			_numericDDMFormFieldTemplateContextContributor.getSymbolsMap(				LocaleUtil.US);		Assert.assertEquals(".", separatorSymbolsMap.get("decimalSymbol"));		Assert.assertEquals(",", separatorSymbolsMap.get("thousandsSeparator"));	}
@Test	public void testNullParameter() {		IsURLFunction isURLFunction = new IsURLFunction();		Boolean result = isURLFunction.apply(null);		Assert.assertFalse(result);	}
@Test(expected = IllegalArgumentException.class)  public void testInvalidArgs() throws IOException, ParseException {    GoogleAPICredentialRequestor.main(new String[0]);  }
@Test	public void testParseDateRangeIncludesUpper() {		RangeTermQueryValue rangeTermQueryValue =			rangeTermQueryValueParser.parse("]now/d now+1d/d]");		Assert.assertNotNull(rangeTermQueryValue);		assertDoesNotIncludeLower(rangeTermQueryValue);		assertIncludesUpper(rangeTermQueryValue);		assertBounds(rangeTermQueryValue, "now/d", "now+1d/d");	}
@Test  public void testResolveSubjectFound() {    Subject model = Subject.builder()            .setId(UUID.randomUUID())            .setName("name")            .build();    when(subjectResolver.resolveSubject(isA(UUID.class))).thenReturn(model);    SubjectInfoSEB seb = resolver.apply(model.getId());    assertNotNull(seb);    assertEquals(model.getId(), seb.getId());    assertEquals(model.getName(), seb.getName());    verify(subjectResolver).resolveSubject(model.getId());  }
@Test    public void testExampleConfigurationLeavesExistingFileAlone() throws Exception {        final File existingFile = tempDir.newFile();        final ConfigurationFileManager subject = getTestJenkinsConfiguration();        subject.initConfiguration();        assertTrue(existingFile.exists());    }
@Test	public void testGetParameters1() throws Exception {		DDMFormField ddmFormField = new DDMFormField("field", "select");		ddmFormField.setProperty("dataSourceType", "data-provider");		DDMFormFieldRenderingContext ddmFormFieldRenderingContext =			new DDMFormFieldRenderingContext();		ddmFormFieldRenderingContext.setLocale(LocaleUtil.US);		ddmFormFieldRenderingContext.setValue("[\"value 1\"]");		_setUpDDMFormFieldOptionsFactory(			ddmFormField, ddmFormFieldRenderingContext);		SelectDDMFormFieldTemplateContextContributor spy = _createSpy();		Map<String, Object> parameters = spy.getParameters(			ddmFormField, ddmFormFieldRenderingContext);		Assert.assertTrue(parameters.containsKey("dataSourceType"));		Assert.assertEquals("data-provider", parameters.get("dataSourceType"));		Assert.assertTrue(parameters.containsKey("multiple"));		Assert.assertEquals(false, parameters.get("multiple"));		Assert.assertTrue(parameters.containsKey("options"));		List<Object> options = (List<Object>)parameters.get("options");		Assert.assertEquals(options.toString(), 3, options.size());		Map<String, String> optionMap = (Map<String, String>)options.get(0);		Assert.assertEquals("Label 1", optionMap.get("label"));		Assert.assertEquals("value 1", optionMap.get("value"));		optionMap = (Map<String, String>)options.get(1);		Assert.assertEquals("Label 2", optionMap.get("label"));		Assert.assertEquals("value 2", optionMap.get("value"));		optionMap = (Map<String, String>)options.get(2);		Assert.assertEquals("Label 3", optionMap.get("label"));		Assert.assertEquals("value 3", optionMap.get("value"));		List<String> value = (List<String>)parameters.get("value");		Assert.assertEquals(value.toString(), 1, value.size());		Assert.assertTrue(value.toString(), value.contains("value 1"));	}
@Test    public void testGetMin() {        TimeStore timestampStore = new TimeStore(null, null, true);        TimestampIndexStore store = (TimestampIndexStore) timestampStore.nodeIndexStore;        Assert.assertEquals(store.mainIndex.getMinTimestamp(), Double.NEGATIVE_INFINITY);        store.add(1.0);        Assert.assertEquals(store.mainIndex.getMinTimestamp(), 1.0);        store.add(2.0);        Assert.assertEquals(store.mainIndex.getMinTimestamp(), 1.0);        store.remove(1.0);        Assert.assertEquals(store.mainIndex.getMinTimestamp(), 2.0);    }
@Test	public void testGetPropertyName() {		SetDataTypeFunction setDataTypeFunction = new SetDataTypeFunction();		Assert.assertEquals("dataType", setDataTypeFunction.getPropertyName());	}
@Test	public void testNotAssigneeHasNoPermission() {		long assigneeUserId = RandomTestUtil.randomLong();		Assert.assertFalse(			_workflowTaskPermissionChecker.hasPermission(				assigneeUserId,				mockWorkflowTask(User.class.getName(), assigneeUserId),				mockContentReviewerPermissionChecker(					RandomTestUtil.randomLong())));	}
@Test	public void testApplyFalse1() {		EqualsFunction equalsFunction = new EqualsFunction();		Assert.assertFalse(equalsFunction.apply("FORMS", "forms"));	}
@Test(description = "test getType method")    public void testGetType() {        String type = mqttBasedPushNotificationProvider.getType();        Assert.assertEquals(type, "MQTT");    }
@Test    public void destroyAllTextAreaDOMElementFactoryResources() {        abstractScesimGridModelSpy.destroyAllTextAreaDOMElementFactoryResources();        verify(scenarioCellTextAreaSingletonDOMElementFactorySpy, times(1)).destroyResources();        verify(scenarioExpressionCellTextAreaSingletonDOMElementFactorySpy, times(1)).destroyResources();        verify(scenarioHeaderTextBoxSingletonDOMElementFactorySpy, times(1)).destroyResources();    }
@Test	public void testGetPropertyName() {		SetRequiredFunction setRequiredFunction = new SetRequiredFunction();		Assert.assertEquals("required", setRequiredFunction.getPropertyName());	}
@Test	public void testCreateRESTBuilder() throws Exception {		String dependenciesPath = _getDependenciesPath();		RESTBuilder restBuilder = new RESTBuilder(			new File(dependenciesPath, "copyright.txt"),			new File(dependenciesPath), null);		restBuilder.build();		String filesPath = _getFilesPath();		File applicationFile = new File(			filesPath + "/sample-impl/src/main/java/com/example/sample" +				"/internal/jaxrs/application/SampleApplication.java");		Assert.assertTrue(applicationFile.exists());		_assertResourceFilesExist(filesPath, "Document");		_assertResourceFilesExist(filesPath, "Folder");		File sampleApiDir = new File(filesPath + "/sample-api");		FileUtils.deleteDirectory(sampleApiDir);		Assert.assertFalse(sampleApiDir.exists());		File sampleImplDir = new File(filesPath + "/sample-impl");		FileUtils.deleteDirectory(sampleImplDir);		Assert.assertFalse(sampleImplDir.exists());	}
@Test    public void TC_setLocator_2in1()    {        OKWLocatorXPath Locator_1 = new OKWLocatorXPath(">Locator1<");        OKWLocatorXPath Locator_2 = new OKWLocatorXPath(">Locator2<");        OKWLocatorXPath Locator_Summe = new OKWLocatorXPath("Empty");        Locator_Summe.setLocator( "Locator1=$L1$//Locator2=$L2$", Locator_1, Locator_2 );        assertEquals("Locator1=>Locator1<//Locator2=>Locator2<", Locator_Summe.getLocator());    }
@Test	public void testGetExplicitElasticsearchConnectionWithDifferentConnectionId() {		setRemoteConnectionId(_REMOTE_1_CONNECTION_ID);		Assert.assertEquals(			_remoteElasticsearchConnection2,			_elasticsearchConnectionManager.getElasticsearchConnection(				_REMOTE_2_CONNECTION_ID));	}
@Test	public void testRemove() {		Assert.assertEquals(_VALUE_1, _ehcachePortalCache.get(_KEY_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_2));		// Remove 1		Assert.assertTrue(_ehcachePortalCache.remove(_KEY_1, _VALUE_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_2));		_defaultPortalCacheListener.assertActionsCount(1);		_defaultPortalCacheListener.assertRemoved(_KEY_1, _VALUE_1);		_defaultPortalCacheListener.reset();		_defaultPortalCacheReplicator.assertActionsCount(1);		_defaultPortalCacheReplicator.assertRemoved(_KEY_1, _VALUE_1);		_defaultPortalCacheReplicator.reset();		// Remove 2		_ehcachePortalCache.put(_KEY_1, _VALUE_1);		_ehcachePortalCache.put(_KEY_2, _VALUE_2);		_ehcachePortalCache.remove(_KEY_2);		Assert.assertEquals(_VALUE_1, _ehcachePortalCache.get(_KEY_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_2));		_defaultPortalCacheListener.assertActionsCount(3);		_defaultPortalCacheListener.assertPut(_KEY_1, _VALUE_1);		_defaultPortalCacheListener.assertPut(_KEY_2, _VALUE_2);		_defaultPortalCacheListener.assertRemoved(_KEY_2, _VALUE_2);		_defaultPortalCacheListener.reset();		_defaultPortalCacheReplicator.assertActionsCount(3);		_defaultPortalCacheReplicator.assertPut(_KEY_1, _VALUE_1);		_defaultPortalCacheReplicator.assertPut(_KEY_2, _VALUE_2);		_defaultPortalCacheReplicator.assertRemoved(_KEY_2, _VALUE_2);		_defaultPortalCacheReplicator.reset();		// Remove 3		PortalCacheHelperUtil.removeWithoutReplicator(			_ehcachePortalCache, _KEY_1);		Assert.assertNull(_ehcachePortalCache.get(_KEY_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_2));		_defaultPortalCacheListener.assertActionsCount(1);		_defaultPortalCacheListener.assertRemoved(_KEY_1, _VALUE_1);		_defaultPortalCacheListener.reset();		_defaultPortalCacheReplicator.assertActionsCount(0);		// Remove 4		_ehcachePortalCache.put(_KEY_1, _VALUE_1);		_ehcachePortalCache.put(_KEY_2, _VALUE_2);		_ehcachePortalCache.removeAll();		Assert.assertNull(_ehcachePortalCache.get(_KEY_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_2));		_defaultPortalCacheListener.assertActionsCount(3);		_defaultPortalCacheListener.assertPut(_KEY_1, _VALUE_1);		_defaultPortalCacheListener.assertPut(_KEY_2, _VALUE_2);		_defaultPortalCacheListener.assertRemoveAll();		_defaultPortalCacheListener.reset();		_defaultPortalCacheReplicator.assertActionsCount(3);		_defaultPortalCacheReplicator.assertPut(_KEY_1, _VALUE_1);		_defaultPortalCacheReplicator.assertPut(_KEY_2, _VALUE_2);		_defaultPortalCacheReplicator.assertRemoveAll();		_defaultPortalCacheReplicator.reset();		// Remove 5		_ehcachePortalCache.put(_KEY_1, _VALUE_1);		_ehcachePortalCache.put(_KEY_2, _VALUE_2);		PortalCacheHelperUtil.removeAllWithoutReplicator(_ehcachePortalCache);		Assert.assertNull(_ehcachePortalCache.get(_KEY_1));		Assert.assertNull(_ehcachePortalCache.get(_KEY_2));		_defaultPortalCacheListener.assertActionsCount(3);		_defaultPortalCacheListener.assertPut(_KEY_1, _VALUE_1);		_defaultPortalCacheListener.assertPut(_KEY_2, _VALUE_2);		_defaultPortalCacheListener.assertRemoveAll();		_defaultPortalCacheListener.reset();		_defaultPortalCacheReplicator.assertActionsCount(2);		_defaultPortalCacheReplicator.assertPut(_KEY_1, _VALUE_1);		_defaultPortalCacheReplicator.assertPut(_KEY_2, _VALUE_2);		_defaultPortalCacheReplicator.reset();	}
@Test    public void testProcessDescription_3()                            throws OWSExceptionReport, IOException {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        WPSClient wpsClient = new WPSClient( new URL( demoWPSURL ) );        org.deegree.protocol.wps.client.process.Process p2 = wpsClient.getProcess( "ParameterDemoProcess", null );        InputType firstInput = p2.getInputTypes()[0];        LiteralInputType literalInput = (LiteralInputType) firstInput;        Assert.assertEquals( "integer", literalInput.getDataType().getValue() );        Assert.assertEquals( "http://www.w3.org/TR/xmlschema-2/#integer",                             literalInput.getDataType().getRef().toString() );        Assert.assertEquals( "seconds", literalInput.getDefaultUom().getValue() );        Assert.assertEquals( "seconds", literalInput.getSupportedUoms()[0].getValue() );        Assert.assertEquals( "minutes", literalInput.getSupportedUoms()[1].getValue() );        InputType secondInput = p2.getInputTypes()[1];        Assert.assertEquals( "1", secondInput.getMinOccurs() );        Assert.assertEquals( "1", secondInput.getMaxOccurs() );        BBoxInputType bboxData = (BBoxInputType) secondInput;        Assert.assertEquals( "EPSG:4326", bboxData.getDefaultCRS() );        Assert.assertEquals( "EPSG:4326", bboxData.getSupportedCrs()[0] );        InputType thirdInput = p2.getInputTypes()[2];        ComplexInputType xmlData = (ComplexInputType) thirdInput;        Assert.assertEquals( "text/xml", xmlData.getDefaultFormat().getMimeType() );        Assert.assertEquals( "text/xml", xmlData.getSupportedFormats()[0].getMimeType() );        InputType fourthInput = p2.getInputTypes()[3];        ComplexInputType binaryData = (ComplexInputType) fourthInput;        Assert.assertEquals( "image/png", binaryData.getDefaultFormat().getMimeType() );        Assert.assertEquals( "base64", binaryData.getDefaultFormat().getEncoding() );        Assert.assertEquals( "image/png", binaryData.getSupportedFormats()[0].getMimeType() );        Assert.assertEquals( "base64", binaryData.getSupportedFormats()[0].getEncoding() );        OutputType firstOutput = p2.getOutputTypes()[0];        Assert.assertEquals( "A literal output parameter", firstOutput.getTitle().getString() );        LiteralOutputType literalData = (LiteralOutputType) firstOutput;        Assert.assertEquals( "integer", literalData.getDataType().getValue() );        Assert.assertEquals( "http://www.w3.org/TR/xmlschema-2/#integer", literalData.getDataType().getRef().toString() );        Assert.assertEquals( "seconds", literalData.getDefaultUom().getValue() );        Assert.assertEquals( "seconds", literalData.getSupportedUoms()[0].getValue() );        OutputType secondOutput = p2.getOutputTypes()[1];        BBoxOutputType bboxOutput = (BBoxOutputType) secondOutput;        Assert.assertEquals( "EPSG:4326", bboxOutput.getDefaultCrs() );        Assert.assertEquals( "EPSG:4326", bboxOutput.getSupportedCrs()[0] );        OutputType thirdOutput = p2.getOutputTypes()[2];        ComplexOutputType xmlOutput = (ComplexOutputType) thirdOutput;        Assert.assertEquals( "text/xml", xmlOutput.getDefaultFormat().getMimeType() );        Assert.assertEquals( "text/xml", xmlOutput.getSupportedFormats()[0].getMimeType() );        OutputType fourthOutput = p2.getOutputTypes()[3];        ComplexOutputType binaryOutput = (ComplexOutputType) fourthOutput;        System.out.println( binaryOutput.getDefaultFormat() );        Assert.assertEquals( "text/xml", xmlOutput.getDefaultFormat().getMimeType() );        Assert.assertEquals( "text/xml", xmlOutput.getSupportedFormats()[0].getMimeType() );    }
@Test	public void testValidateConfigurationValidRequired() throws Exception {		_fragmentEntryValidatorImpl.validateConfiguration(			_read("configuration_valid_required.json"));	}
@Test	public void testIsFormAvailableForGuest() throws Exception {		DDMFormInstance ddmFormInstance = mockDDMFormInstance();		when(			_ddmFormInstanceLocalService.fetchFormInstance(Matchers.anyLong())		).thenReturn(			ddmFormInstance		);		when(			_ddmFormInstanceService.fetchFormInstance(Matchers.anyLong())		).thenReturn(			null		);		DDMFormDisplayContext ddmFormDisplayContext =			createDDMFormDisplayContext();		Assert.assertFalse(ddmFormDisplayContext.isFormAvailable());	}
@Test  public void testConvertEmpty() {    assertNotNull(converter.apply(new ObjectRecord()));  }
@Test  public void testFetchObjectType() throws Exception {    UUID id = UUID.randomUUID();    ObjectTypeEntity entity = new ObjectTypeEntity();    when(objectTypeRequestResolver.fetchExistingObjectType(id)).thenReturn(entity);    delegate.handle(new GetObjectTypeByIdRequest().setId(id));    verify(objectTypeResponseConverter).apply(entity);  }
@Test    public void internationalize() throws            Exception {        assertEquals("RuleOrderHitPolicy",                     HitPolicyInternationalizer.internationalize(GuidedDecisionTable52.HitPolicy.RULE_ORDER));        assertEquals("FirstHitPolicy",                     HitPolicyInternationalizer.internationalize(GuidedDecisionTable52.HitPolicy.FIRST_HIT));        assertEquals("UniqueHitPolicy",                     HitPolicyInternationalizer.internationalize(GuidedDecisionTable52.HitPolicy.UNIQUE_HIT));        assertEquals("ResolvedHitPolicy",                     HitPolicyInternationalizer.internationalize(GuidedDecisionTable52.HitPolicy.RESOLVED_HIT));        assertEquals("NoneHitPolicy",                     HitPolicyInternationalizer.internationalize(GuidedDecisionTable52.HitPolicy.NONE));    }
@Test	public void testGetPreviewAsStreamTriggersAMProcessorWhenNoAMImageExists()		throws Exception {		Mockito.when(			_amImageFinder.getAdaptiveMediaStream(Mockito.any(Function.class))		).thenAnswer(			invocation -> Stream.empty()		);		Mockito.when(			_amImageMimeTypeProvider.isMimeTypeSupported(Mockito.anyString())		).thenReturn(			true		);		Mockito.when(			_amImageValidator.isValid(_fileVersion)		).thenReturn(			true		);		_amImageEntryProcessor.getPreviewAsStream(_fileVersion);		Mockito.verify(			_amAsyncProcessor		).triggerProcess(			Mockito.any(FileVersion.class), Mockito.anyString()		);	}
@Test	public void testParseWithEqBinaryExpressionWithBooleanTrue()		throws ExpressionVisitException {		Expression expression = _filterParserImpl.parse(			"booleanExternal eq true");		Assert.assertNotNull(expression);		BinaryExpression binaryExpression = (BinaryExpression)expression;		MemberExpression memberExpression =			(MemberExpression)binaryExpression.getLeftOperationExpression();		Assert.assertEquals(			BinaryExpression.Operation.EQ, binaryExpression.getOperation());		PrimitivePropertyExpression primitivePropertyExpression =			(PrimitivePropertyExpression)memberExpression.getExpression();		Assert.assertEquals(			"booleanExternal", primitivePropertyExpression.getName());		LiteralExpression literalExpression =			(LiteralExpression)binaryExpression.getRightOperationExpression();		Assert.assertEquals("true", literalExpression.getText());		Assert.assertEquals(			LiteralExpression.Type.BOOLEAN, literalExpression.getType());	}
@Test  public void testIterateVerticesWithUuidIdSupportUsingVertices() {    Vertex vertex1 = createVertex();    Vertex vertex2 = createVertex();    assertEquals(2, IteratorUtils.count(getActGraph().vertices(vertex1, vertex2)));  }
@Test    public void testTopEdge() {        final Bounds visibleBounds = new BaseBounds( -500,                                                     -500,                                                     1000,                                                     1000 );        final Transform test = new Transform().translate( 0.0,                                                          1200.0 );        final Transform result = restriction.adjust( test,                                                     visibleBounds );        assertNotNull( result );        assertEquals( 0.0,                      result.getTranslateX(),                      0.0 );        assertEquals( 1000.0,                      result.getTranslateY(),                      0.0 );        //View.getBounds() is called once in BoundaryTransformMediator's constructor and once in it's adjust method.        verify( view,                times( 2 ) ).getBounds();    }
@Test	public void testDDMFormFieldValuePredefinedValue() {		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		DDMFormField ddmFormField = DDMFormTestUtil.createTextDDMFormField(			"Name", false, false, false);		LocalizedValue predefinedValue = new LocalizedValue(LocaleUtil.US);		predefinedValue.addString(LocaleUtil.BRAZIL, "Roberto");		predefinedValue.addString(LocaleUtil.US, "Robert");		ddmFormField.setPredefinedValue(predefinedValue);		ddmForm.addDDMFormField(ddmFormField);		DefaultDDMFormValuesFactory defaultDDMFormValuesFactory =			new DefaultDDMFormValuesFactory(ddmForm, LocaleUtil.BRAZIL);		DDMFormValues ddmFormValues = defaultDDMFormValuesFactory.create();		List<DDMFormFieldValue> ddmFormFieldValues =			ddmFormValues.getDDMFormFieldValues();		DDMFormFieldValue ddmFormFieldValue = ddmFormFieldValues.get(0);		Value value = ddmFormFieldValue.getValue();		Assert.assertEquals("Roberto", value.getString(LocaleUtil.BRAZIL));		defaultDDMFormValuesFactory = new DefaultDDMFormValuesFactory(			ddmForm, LocaleUtil.SPAIN);		ddmFormValues = defaultDDMFormValuesFactory.create();		ddmFormFieldValues = ddmFormValues.getDDMFormFieldValues();		ddmFormFieldValue = ddmFormFieldValues.get(0);		value = ddmFormFieldValue.getValue();		Assert.assertEquals("Robert", value.getString(LocaleUtil.SPAIN));	}
@Test    public void onClickBookmarkEdit() throws Exception {        presenter.onRefresh(); // заполняем презентер списком закладок        Mockito.reset(view); // сбрасываем обращения к view        presenter.onSelectBookmark(0);        presenter.onClickBookmarkEdit();        verify(view).openBookmarkDialog(eq(bookmarksWithoutTag.get(0)));    }
@Test    public void testFromStringParsing2() {        //Fact is not prefixed with '        final String content = "Fact.field' : ['a', 'b']";        final List<EnumRow> enums = EnumParser.fromString( content );        assertFalse( enums.isEmpty() );        assertEquals( "Fact.field' : ['a', 'b']",                      enums.get( 0 ).getRaw() );    }
@Test  public void testResolveOrganizationIdentity() {    UUID id = UUID.fromString("00000000-0000-0000-0000-000000000001");    OrganizationIdentity identity = resolver.resolveOrganizationIdentity(id);    assertTrue(identity instanceof OrganizationIdentifier);    assertEquals(id, OrganizationIdentifier.class.cast(identity).getGlobalID());  }
@Test    public void testIndexedParameters_LHSFieldValue() {        final String result = utilities.convertIndexedParametersToTemplateKeys( "field1 == $1, field2 == $2",                                                                                ParameterizedValueBuilder.Part.LHS );        assertEquals( "field1 == \"@{param1}\", field2 == \"@{param2}\"",                      result );    }
@Test    public void testIsCompleteWhenRuleModellerPageIsNotCompleted() throws Exception {        when(brlActionPlugin.isRuleModellerPageCompleted()).thenReturn(false);        brlActionPage.isComplete(Assert::assertFalse);    }
@Test    @SuppressWarnings("unchecked")    public void getPackageParentRuleNames() {        final Set<String> parentRuleNames = new HashSet<>();        parentRuleNames.add("parentRule1");        parentRuleNames.add("parentRule2");        final ParameterizedCommand<Collection<String>> parentRuleNamesCommand = mock(ParameterizedCommand.class);        when(ruleNameService.getRuleNames(any(ObservablePath.class),                                          any(String.class))).thenReturn(parentRuleNames);        dtPresenter.getPackageParentRuleNames(parentRuleNamesCommand);        verify(parentRuleNamesCommand,               times(1)).execute(eq(parentRuleNames));    }
@Test	public void testProcessDDMFormInstanceReportWithEmptyData()		throws Exception {		DDMFormFieldValue ddmFormFieldValue = mock(DDMFormFieldValue.class);		when(			ddmFormFieldValue.getName()		).thenReturn(			"field1"		);		when(			ddmFormFieldValue.getType()		).thenReturn(			DDMFormFieldType.CHECKBOX_MULTIPLE		);		Value value = new LocalizedValue();		value.addString(			value.getDefaultLocale(),			JSONUtil.put(				"option1"			).toString());		value.setDefaultLocale(LocaleUtil.US);		when(			ddmFormFieldValue.getValue()		).thenReturn(			value		);		JSONObject processedFieldJSONObject =			_checkboxMultipleDDMFormFieldTypeReportProcessor.process(				ddmFormFieldValue,				JSONUtil.put(					"type", DDMFormFieldType.CHECKBOX_MULTIPLE				).put(					"values", JSONFactoryUtil.createJSONObject()				),				0, DDMFormInstanceReportConstants.EVENT_ADD_RECORD_VERSION);		Assert.assertEquals(			DDMFormFieldType.CHECKBOX_MULTIPLE,			processedFieldJSONObject.getString("type"));		JSONObject valuesJSONObject = processedFieldJSONObject.getJSONObject(			"values");		Assert.assertEquals(1, valuesJSONObject.getLong("option1"));	}
@Test    public void testMalloc() throws Exception {        //given        final int   cLongSize = sizeof((CLong) null);        final CLong cLong     = new CLong(123456);        //when        try (final Pointer<CLong> cLongPointer = malloc(cLongSize).castp(CLong.class);) {            cLongPointer.set(cLong);            //then            final long nativeCLongRead = JNITestUtil.getCLong(cLongPointer.address);            assertThat(nativeCLongRead).isEqualTo(cLong.longValue());        }    }
@Test    public void testIdLowercase() {        TableImpl<Node> table = new TableImpl<Node>(Node.class, false);        Column col = table.addColumn("A", Integer.class);        Assert.assertEquals(col.getId(), "a");    }
@Test    public void sevenSM() {        Assert.assertEquals(                RxComprehensions                        .doSwitchMap(zero(1), one(true), two("result"), three("other"), four("other".length()),                                five("other".length() < 5), six(Boolean.toString(false)), seven("true"))                        .toBlocking().first(),                false);    }
@Test(expected = AccessDeniedException.class)  public void testCheckReadPermissionForOriginWithoutOrigin() throws Exception {    context.checkReadPermission((OriginEntity) null);  }
@Test()	public void testHolder() {		ExecutorService executor = Executors.newFixedThreadPool(1000);		for (int i = 0; i < MAX_ITERATIONS; i++) {			Runnable worker = new HolderWorkerThread(i);			executor.execute(worker);		}		executor.shutdown();		while (!executor.isTerminated()) {		}	}
@Test    public void sevenCM() {        Assert.assertEquals(RxComprehensions.doConcatMap(zero(1), one(true), two("result"), three("other"), four("other".length()), five("other".length() < 5), six(Boolean.toString(false)), seven("true")).blockingFirst(), false);    }
@Test(expected = InvalidCredentialsException.class)  public void testResolveCurrentUserAffiliationWithInvalidCredentials() throws Exception {    setup("subject.1.name = subject");    accessController.resolveCurrentUserAffiliation(createCredentials(42));  }
@Test  public void testVerbListIdentifiersDateRangeError() throws Exception {    runChecks(OaiPmhConstants.VERB_LIST_IDENTIFIERS,              repo(null, Granularity.DAY)                      .selectVerb(params("ListIdentifiers", null, "oai_dc", "2011-01-02", "2011-01-01", null)),              some(IsError),              list(hasXPath("//oai20:error[@code='badArgument']", NS_CTX)));    runChecks(OaiPmhConstants.VERB_LIST_IDENTIFIERS,              repo(null, Granularity.SECOND)                      .selectVerb(params("ListIdentifiers", null, "oai_dc", "2011-01-01T10:20:10Z", "2011-01-01T10:20:00Z", null)),              some(IsError),              list(hasXPath("//oai20:error[@code='badArgument']", NS_CTX)));  }
@Test    public void testGetEmojis_badEmojiList() throws Exception {        WebResource emojiResource = mock(WebResource.class);        when(mockResource.path("emoji.list")).thenReturn(emojiResource);        String emojiResponseStr = "{\"emoji\": \"BAD JSON\"}";        doReturn(emojiResponseStr).when(underTest).getJsonResultWithRetries(emojiResource,                                                                            apiRetries);        Map<String, String> result = underTest.getEmojis();        assertTrue(result.isEmpty());    }
@Test    public void testGetEmojisFromMessage_noRoom() {        Message message = new Message(mentionTime, "randomFrom", "randomUserId",                                      String.format("test message with :%s:", emoji),                                      "randomRoomId", MessageType.MESSAGE);        FatMessage fatMessage = new FatMessage(message, user, null);        List<EmojiEntity> emojis = underTest.getEmojisFromMessage(fatMessage);        assertEquals(1, emojis.size());        EmojiEntity firstEmoji = emojis.get(0);        assertEquals(user.getMentionName(), firstEmoji.getUsername());        assertNull(firstEmoji.getRoomName());        assertEquals(mentionTime, firstEmoji.getMentionTime());        assertEquals(emoji, firstEmoji.getValue());        assertEquals(1, firstEmoji.getOccurrences());    }
@Test    public void getContent() {        abstractScenarioSimulationEditorKogitoScreenSpy.getContent();        verify(scenarioSimulationEditorKogitoWrapperMock, times(1)).getContent();    }
@Test(expected = ParameterException.class)	public void testValidateInvalidOptionArguments() throws Exception {		Main.main(new String[] {"-X", "foo"});	}
@Test	public void testGetWithIntegerField() {		ExtendedObjectClassDefinition extendedObjectClassDefinition = mock(			ExtendedObjectClassDefinition.class);		ExtendedAttributeDefinition extendedAttributeDefinition = mock(			ExtendedAttributeDefinition.class);		whenGetAttributeDefinitions(			extendedObjectClassDefinition,			new ExtendedAttributeDefinition[] {extendedAttributeDefinition},			ExtendedObjectClassDefinition.ALL);		whenGetAttributeDefinitions(			extendedObjectClassDefinition, new ExtendedAttributeDefinition[0],			ExtendedObjectClassDefinition.OPTIONAL);		whenGetAttributeDefinitions(			extendedObjectClassDefinition,			new ExtendedAttributeDefinition[] {extendedAttributeDefinition},			ExtendedObjectClassDefinition.REQUIRED);		whenGetCardinality(extendedAttributeDefinition, 0);		whenGetID(extendedAttributeDefinition, "Integer");		whenGetType(			extendedAttributeDefinition, ExtendedAttributeDefinition.INTEGER);		ConfigurationModel configurationModel = new ConfigurationModel(			null, null, null, extendedObjectClassDefinition, false);		ConfigurationModelToDDMFormConverter			configurationModelToDDMFormConverter = spy(				new ConfigurationModelToDDMFormConverter(					configurationModel, _enLocale, new EmptyResourceBundle()));		whenGetConfigurationDDMForm(configurationModelToDDMFormConverter, null);		DDMForm ddmForm = configurationModelToDDMFormConverter.getDDMForm();		Map<String, DDMFormField> ddmFormFieldsMap =			ddmForm.getDDMFormFieldsMap(false);		DDMFormField ddmFormField = ddmFormFieldsMap.get("Integer");		Assert.assertNotNull(ddmFormField);		Assert.assertEquals(DDMFormFieldType.TEXT, ddmFormField.getType());		Assert.assertEquals("integer", ddmFormField.getDataType());		Assert.assertFalse(ddmFormField.isRepeatable());		Assert.assertTrue(ddmFormField.isRequired());		LocalizedValue predefinedValue = ddmFormField.getPredefinedValue();		Assert.assertEquals(_enLocale, predefinedValue.getDefaultLocale());		Assert.assertEquals("0", predefinedValue.getString(_enLocale));	}
@Test    public void passingEmptyStringReturnsEmptyList() {        List<MatchedUrl> urls = finder.findUrlsIn("");        assertThat(urls.size()).isEqualTo(0);    }
@Test  public void testStoreMapping() throws Exception {    StoragePath path = new StoragePath(ORG, MP_ID, new VersionImpl(1L), ASSET1_ID);    database.storeMapping(path, "archive_path/" + ASSET1_ID, AWS_VERSION_1);    AwsAssetMapping mapping = database.findMapping(path);    Assert.assertNotNull(mapping);    Assert.assertEquals("archive_path/" + ASSET1_ID, mapping.getObjectKey());    Assert.assertEquals(AWS_VERSION_1, mapping.getObjectVersion());    Assert.assertNull(mapping.getDeletionDate());  }
@Test(expected = IllegalArgumentException.class)  public void testToInternalIdMostSignificantBitsSetThrowsException() {    IdMapper.toInternalID(new UUID(1, 1));  }
@Test  public void testParsingHostName() {    uri = "mysql://vertx.io";    actualParsedResult = parse(uri);    expectedParsedResult = new JsonObject()      .put("host", "vertx.io");    assertEquals(expectedParsedResult, actualParsedResult);  }
@KuduClusterTestContext(kuduClusterBasedTest = true)  @Test  public void testSettersForPojo() throws Exception  {    initOperatorState();    AbstractKuduPartitionScanner<UnitTestTablePojo,InputOperatorControlTuple> currentScanner =        unitTestStepwiseScanInputOperator.getScanner();    SQLToKuduPredicatesTranslator translator = new SQLToKuduPredicatesTranslator(        "select introwkey as intColumn from unittests",        new ArrayList<ColumnSchema>(columnDefs.values()));    List<KuduPartitionScanAssignmentMeta> scansForThisQuery = currentScanner.preparePlanForScanners(translator);    KuduPartitionScannerCallable<UnitTestTablePojo,InputOperatorControlTuple> threadToScan = new        KuduPartitionScannerCallable<>(unitTestStepwiseScanInputOperator,scansForThisQuery.get(0),        currentScanner.getConnectionPoolForThreads().get(0),        unitTestStepwiseScanInputOperator.extractSettersForResultObject(translator),translator);    long countOfScan = threadToScan.call();  }
@Test    public void raisesExceptionContainingValueAndPattern() {        thrown.expect( ValueConversionException.class );        thrown.expectMessage( "\\d+" );        thrown.expectMessage( "asdf" );        new RegexMatcher( "\\d+", 0 ).convert( "asdf" );    }
@Test(dataProvider = "bigIntString")    public void testMinus(String s1, String s2) {        String actual = new MyBigInt().minus(s1, s2);        String expected = new BigInteger(s1).subtract(new BigInteger(s2)).toString();        assertEquals(actual, expected, String.format("%s - %s", s1, s2));    }
@Test	public void testDeleteConfValue_2() throws Exception {		String propertyName = "name1";		boolean result = xmlManipulator.deleteConfValue(filePath, propertyName);		assertEquals(true, result);	}
@Test    public void getSettingsView() {        SettingsView settingsViewMock = mock(SettingsView.class);        AbstractWorkbenchActivity activityMock = mock(AbstractWorkbenchActivity.class);        when(activityMock.getWidget()).thenReturn(settingsViewMock);        PlaceRequest placeRequest = abstractScenarioSimulationDocksHandlerSpy.getCurrentRightDockPlaceRequest(SettingsPresenter.IDENTIFIER);        when(placeManagerMock.getActivity(eq(placeRequest))).thenReturn(activityMock);        Optional<SettingsView> optional = abstractScenarioSimulationDocksHandlerSpy.getSettingsView(placeRequest);        assertSame(settingsViewMock, optional.get());    }
@Test	public void testExecuteClusterRequest() throws Exception {		ClusterExecutorImpl clusterExecutorImpl = getClusterExecutorImpl();		// Test 1, payload is not method handler		ClusterNodeResponse clusterNodeResponse =			clusterExecutorImpl.executeClusterRequest(				ClusterRequest.createMulticastRequest(StringPool.BLANK));		Exception exception1 = clusterNodeResponse.getException();		Assert.assertEquals(			"Payload is not of type " + MethodHandler.class.getName(),			exception1.getMessage());		// Test 2, invoke with exception1		String timestamp = String.valueOf(System.currentTimeMillis());		clusterNodeResponse = clusterExecutorImpl.executeClusterRequest(			ClusterRequest.createMulticastRequest(				new MethodHandler(					new MethodKey(TestBean.class, "testMethod3", String.class),					timestamp)));		try {			clusterNodeResponse.getResult();			Assert.fail();		}		catch (Exception exception2) {			Throwable throwable = exception2.getCause();			Assert.assertEquals(timestamp, throwable.getMessage());		}		// Test 3, invoke without exception1		timestamp = String.valueOf(System.currentTimeMillis());		clusterNodeResponse = clusterExecutorImpl.executeClusterRequest(			ClusterRequest.createMulticastRequest(				new MethodHandler(					new MethodKey(TestBean.class, "testMethod1", String.class),					timestamp)));		Assert.assertEquals(timestamp, clusterNodeResponse.getResult());		// Test 4, thread local		Assert.assertTrue(ClusterInvokeThreadLocal.isEnabled());		clusterNodeResponse = clusterExecutorImpl.executeClusterRequest(			ClusterRequest.createMulticastRequest(				new MethodHandler(					new MethodKey(TestBean.class, "testMethod5"))));		Assert.assertFalse((Boolean)clusterNodeResponse.getResult());		Assert.assertTrue(ClusterInvokeThreadLocal.isEnabled());	}
@Test  public void testCompareWithGTID() {    String gtid1 = UUID1 + ":1-200";    String gtid2 = UUID1 + ":1-300";    String gtid3 = UUID1 + ":1-200," + UUID2 + ":1-456";    BinlogFilePos first = new BinlogFilePos("mysql-bin-changelog.218", 123, 456, gtid1, UUID1);    BinlogFilePos second = new BinlogFilePos("mysql-bin-changelog.218", 456, 789, gtid2, UUID1);    BinlogFilePos third = new BinlogFilePos("mysql-bin-changelog.100", 10, 24, gtid1, UUID2);    BinlogFilePos fourth = new BinlogFilePos("mysql-bin-changelog.100", 20, 24, gtid3, UUID2);    // server_uuid matches, compare binlog file number and position    assertTrue(first.compareTo(second) < 0);    // server_uuid doesn't match, compare GTID    assertEquals(0, first.compareTo(third));    assertTrue(first.compareTo(fourth) < 0);    assertTrue(second.compareTo(third) > 0);  }
@Test    public void copyToDirectory() throws Exception {        final Path folder = mock(Path.class);        service.copy(path,                     "newName.scesim",                     folder,                     "comment");        verify(copyServiceMock).copy(path,                                     "newName.scesim",                                     folder,                                     "comment");    }
@Test    @SuppressWarnings("unchecked")    public void setContent() {        //dtPresenter.setContent(...) is called by the base tests @Before method        verify(dtPresenter,               times(1)).initialiseContent(eq(dtPath),                                           eq(dtPlaceRequest),                                           eq(dtContent),                                           eq(false));        verify(oracleFactory,               times(1)).makeAsyncPackageDataModelOracle(eq(dtPath),                                                         any(GuidedDecisionTable52.class),                                                         any(PackageDataModelOracleBaselinePayload.class));        verify(dtPresenter,               times(1)).makeUiModel();        verify(dtPresenter,               times(1)).makeView(any(Set.class));        verify(dtPresenter,               times(1)).initialiseAccess(false);        verify(dtPresenter,               times(1)).initialiseLockManager();        verify(dtPresenter,               times(1)).initialiseUtilities();        verify(dtPresenter,               times(1)).initialiseModels();        verify(dtPresenter,               times(1)).initialiseValidationAndVerification();        verify(dtPresenter,               times(1)).initialiseEventHandlers();        verify(dtPresenter,               times(1)).initialiseAuditLog();        assertEquals(GuidedDecisionTableView.ROW_HEIGHT,                     dtPresenter.getUiModel().getRow(0).getHeight(),                     0.0);        assertEquals(GuidedDecisionTableView.ROW_HEIGHT,                     dtPresenter.getUiModel().getRow(1).getHeight(),                     0.0);        assertEquals(GuidedDecisionTableView.ROW_HEIGHT,                     dtPresenter.getUiModel().getRow(2).getHeight(),                     0.0);        assertEquals(originalHashCode,                     (int) dtPresenter.getOriginalHashCode());        assertNotEquals(dtContent.getModel().hashCode(),                        (int) dtPresenter.getOriginalHashCode());    }
@Test  public void testSetterShort() throws Exception  {    short shortVal = innerObj.shortVal;    createSetterShort(fqcn, "innerObj.shortVal").set(testObj, ++shortVal);    assertEquals(shortVal, innerObj.shortVal);    createSetterShort(innerObjClass, "shortVal").set(innerObj, ++shortVal);    assertEquals(shortVal, innerObj.shortVal);    createSetterShort(innerObjClass, "protectedShortVal").set(innerObj, ++shortVal);    assertEquals(shortVal, innerObj.protectedShortVal);    createSetterShort(innerObjClass, "privateShortVal").set(innerObj, ++shortVal);    assertEquals(shortVal, innerObj.getPrivateShortVal());  }
@Test  public void testEndingZero() {    StringLongSequence seq = new StringLongSequence();    for (int i = 0;i < 10000;i++) {      Assert.assertEquals(0, seq.next() & 0xFF);    }  }
@Test	public void testPageDescription() throws Exception {		// Dynamic data mapping form		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		// Dynamic data mapping form layout		DDMFormLayout ddmFormLayout = new DDMFormLayout();		String descriptionPage = String.format(			_HTML_WRAPPER, "descriptionPage");		DDMFormLayoutPage ddmFormLayoutPage1 = createDDMFormLayoutPage(			"titlePage", descriptionPage);		ddmFormLayout.addDDMFormLayoutPage(ddmFormLayoutPage1);		// Template context		DDMFormPagesTemplateContextFactory ddmFormPagesTemplateContextFactory =			createDDMFormPagesTemplateContextFactory(				ddmForm, ddmFormLayout, null, false, true, true);		List<Object> pages = ddmFormPagesTemplateContextFactory.create();		Map<String, Object> pageTemplateContext =			(Map<String, Object>)pages.get(0);		Assert.assertEquals(			descriptionPage, pageTemplateContext.get("description"));	}
@Test	public void testDeactivate() {		ClusterExecutorImpl clusterExecutorImpl = getClusterExecutorImpl();		List<TestClusterChannel> clusterChannels =			TestClusterChannel.getClusterChannels();		Assert.assertEquals(			clusterChannels.toString(), 1, clusterChannels.size());		TestClusterChannel clusterChannel = clusterChannels.get(0);		ExecutorService executorService =			clusterExecutorImpl.getExecutorService();		Assert.assertFalse(executorService.isShutdown());		Assert.assertFalse(clusterChannel.isClosed());		clusterExecutorImpl.deactivate();		Assert.assertTrue(clusterChannel.isClosed());		Assert.assertTrue(executorService.isShutdown());	}
@Test(description = "Testing delete device with correct request.")    public void testDeleteDevice() {        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getDeviceManagementService"))                .toReturn(this.deviceManagementProviderService);        Response response = this.deviceManagementService.deleteDevice(TEST_DEVICE_TYPE, UUID.randomUUID().toString());        Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());    }
@Test  public void testConvertUncachedFactTypeNotAvailable() {    UUID id = UUID.randomUUID();    FactType model = converter.apply(id);    assertNotNull(model);    assertEquals(id, model.getId());    assertEquals("N/A", model.getName());    verify(factManager).getFactType(id);    verifyNoInteractions(factTypeResponseConverter);  }
@Test	public void testContainsOnlySupportedQueryWithNegation() throws Exception {		SearchContext searchContext = getSearchContext();		searchContext.setKeywords("test -multiple");		QueryConfig queryConfig = searchContext.getQueryConfig();		queryConfig.setAttribute(			"capabilityQuery", CapabilityQuery.FULLTEXTONLY.value());		String cmisQuery = buildQuery(searchContext);		assertQueryEquals("CONTAINS('(-multiple OR test)')", cmisQuery);	}
@Test  public void testCheckPermissionWithAccess() throws Exception {    when(accessController.hasPermission(credentials, viewThreatIntelFact)).thenReturn(true);    context.checkPermission(viewThreatIntelFact);    verify(accessController).hasPermission(credentials, viewThreatIntelFact);  }
@Test    public void show_Simulation_NotNullRunScenarioElement() {        super.show(businessCentralGridContextMenuSpy, GridWidget.SIMULATION, ScenarioSimulationEditorConstants.INSTANCE.scenario(), "scenario", 0, 0, 1);        verify(businessCentralGridContextMenuSpy, never()).addExecutableMenuItem(eq(GRIDCONTEXTMENU_RUN_SINGLE_SCENARIO), eq(ScenarioSimulationEditorConstants.INSTANCE.runSingleScenario()), eq("runSingleScenario"));        verify(businessCentralGridContextMenuSpy, times(1)).mapEvent(eq(runSingleScenarioElementMock), isA(RunSingleScenarioEvent.class));    }
@Test    public void calendarRelativeTest() {        TriggerAction ta = new TriggerAction("tenant", "plugin", "action", new TimeConstraint("20:30", "20:45"));        Calendar eventCal = Calendar.getInstance();        eventCal.set(2016, Calendar.JANUARY, 26, 20, 31);        Alert alert = new Alert();        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 23, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2015, Calendar.FEBRUARY, 23, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2015, Calendar.FEBRUARY, 23, 19, 25);        alert.setCtime(eventCal.getTimeInMillis());        assertFalse(ActionsValidator.validate(ta, alert));        eventCal.set(2015, Calendar.MARCH, 23, 19, 25);        alert.setCtime(eventCal.getTimeInMillis());        assertFalse(ActionsValidator.validate(ta, alert));        ta = new TriggerAction("tenant", "plugin", "action", new TimeConstraint("Thursday,20:30", "Sunday,20:45"));        eventCal.set(2016, Calendar.JANUARY, 28, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 29, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 30, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 18, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertFalse(ActionsValidator.validate(ta, alert));        eventCal.set(2015, Calendar.JANUARY, 19, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertFalse(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 31, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 7, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.JANUARY, 8, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.FEBRUARY, 5, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertTrue(ActionsValidator.validate(ta, alert));        eventCal.set(2016, Calendar.FEBRUARY, 15, 20, 31);        alert.setCtime(eventCal.getTimeInMillis());        assertFalse(ActionsValidator.validate(ta, alert));    }
@Test  public void testGetCatalog() throws Exception {    String eventMetadataString = IOUtils.toString(getClass().getResource("/eventCatalog.json"));    given().pathParam("eventId", "notExists").pathParam("id", "publish-catalog-1").expect()            .statusCode(HttpStatus.SC_NOT_FOUND).when().get(rt.host("{eventId}/asset/catalog/{id}.json"));    given().pathParam("eventId", "asdasd").pathParam("id", "notExists").expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().get(rt.host("{eventId}/asset/catalog/{id}.json"));    String result = given().pathParam("eventId", "asdasd").pathParam("id", "publish-catalog-1").expect()            .statusCode(HttpStatus.SC_OK).when().get(rt.host("{eventId}/asset/catalog/{id}.json")).asString();    assertThat(eventMetadataString, SameJSONAs.sameJSONAs(result));  }
@SuppressWarnings({ "rawtypes", "unchecked" })  @Test  public void testNodeProcessing()  {    FilteredLineToTokenHashMap oper = new FilteredLineToTokenHashMap();    HashTestSink tokenSink = new HashTestSink();    oper.setSplitBy(";");    oper.setSplitTokenBy(",");    oper.tokens.setSink(tokenSink);    String[] filters = new String[2];    filters[0] = "a";    filters[1] = "c";    oper.setFilterBy(filters);    oper.beginWindow(0); //    String input1 = "a,2,3;b,1,2;c,4,5,6";    String input2 = "d";    String input3 = "";    int numTuples = 1000;    for (int i = 0; i < numTuples; i++) {      oper.data.process(input1);      oper.data.process(input2);      oper.data.process(input3);    }    oper.endWindow(); //    Assert.assertEquals("number emitted tuples", 2, tokenSink.map.size());    HashMap<HashMap<String, ArrayList<String>>, Object> smap = tokenSink.map;    for (Map.Entry<HashMap<String, ArrayList<String>>, Object> e : smap        .entrySet()) {      for (Map.Entry<String, ArrayList<String>> l : e.getKey().entrySet()) {        String key = l.getKey();        ArrayList<String> list = l.getValue();        Assert.assertTrue(!key.equals("b"));        Assert.assertTrue(!key.equals("d"));        if (key.equals("a")) {          Assert              .assertEquals("number emitted values for \"a\"", 2, list.size());          Assert.assertEquals("first value for \"a\"", "2", list.get(0));          Assert.assertEquals("second value for \"a\"", "3", list.get(1));        } else if (key.equals("c")) {          Assert              .assertEquals("number emitted values for \"c\"", 3, list.size());          Assert.assertEquals("first value for \"c\"", "4", list.get(0));          Assert.assertEquals("second value for \"c\"", "5", list.get(1));          Assert.assertEquals("second value for \"c\"", "6", list.get(2));        }      }    }  }
@Test    public void testGetModellerView() {        assertEquals(modellerView, presenter.getModellerView());    }
@Test    public void testReadBufferNoOffset() throws Exception {        SimplePullDataSource pds = new SimplePullDataSource();        pds.remoteReader = new DataInputStream(new MockInputStream(100));        byte buffer[] = new byte[100];        int size = 3 * 9;        int read = pds.readBuffer(buffer, 0, size);        assertEquals(size, read);        assertEquals(new String(data, 0, size), new String(buffer, 0, size));    }
@Test    public void parseRing()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        GMLStreamReader gmlReader = getParser( "Ring.gml" );        XMLStreamReader xmlReader = gmlReader.getXMLReader();        Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Ring" ), xmlReader.getName() );        Ring ring = (Ring) gmlReader.readGeometry();        Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Ring" ), xmlReader.getName() );        Assert.assertEquals( 2, ring.getMembers().size() );        Assert.assertEquals( 2, ring.getMembers().get( 0 ).getCurveSegments().size() );        Assert.assertTrue( ring.getMembers().get( 0 ).getCurveSegments().get( 0 ) instanceof Arc );        Assert.assertTrue( ring.getMembers().get( 0 ).getCurveSegments().get( 1 ) instanceof Arc );        Assert.assertEquals( 1, ring.getMembers().get( 1 ).getCurveSegments().size() );        Assert.assertTrue( ring.getMembers().get( 1 ).getCurveSegments().get( 0 ) instanceof LineStringSegment );    }
@Test	public void testMerge() {		Assert.assertNull(StringUtil.merge((boolean[])null, null));		Assert.assertNull(StringUtil.merge((byte[])null, null));		Assert.assertNull(StringUtil.merge((char[])null, null));		Assert.assertNull(StringUtil.merge((double[])null, null));		Assert.assertNull(StringUtil.merge((float[])null, null));		Assert.assertNull(StringUtil.merge((int[])null, null));		Assert.assertNull(StringUtil.merge((long[])null, null));		Assert.assertNull(StringUtil.merge((short[])null, null));		Assert.assertNull(StringUtil.merge((String[])null, null));		Assert.assertNull(StringUtil.merge((Object[])null, null));		Assert.assertNull(StringUtil.merge((Object[])null, null, null));		Assert.assertNull(StringUtil.merge((ArrayList<Object>)null, null));		Assert.assertNull(			StringUtil.merge((ArrayList<Object>)null, null, null));		Assert.assertNull(StringUtil.merge((Collection<Object>)null, null));		Assert.assertNull(			StringUtil.merge((Collection<Object>)null, null, null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new boolean[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new byte[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new char[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new double[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new float[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new int[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new long[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new short[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new String[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new Object[0], null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new Object[0], null, null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new ArrayList<>(), null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new ArrayList<>(), null, null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new LinkedList<>(), null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new LinkedList<>(), null, null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(Arrays.asList(), null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(Arrays.asList(), null, null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new HashSet<>(), null));		Assert.assertEquals(			StringPool.BLANK, StringUtil.merge(new HashSet<>(), null, null));		Assert.assertEquals(			StringPool.TRUE, StringUtil.merge(new boolean[] {true}, null));		Assert.assertEquals("1", StringUtil.merge(new byte[] {1}, null));		Assert.assertEquals("a", StringUtil.merge(new char[] {'a'}, null));		Assert.assertEquals("1.2", StringUtil.merge(new double[] {1.2D}, null));		Assert.assertEquals("1.0", StringUtil.merge(new float[] {1.0F}, null));		Assert.assertEquals("2", StringUtil.merge(new int[] {2}, null));		Assert.assertEquals("3", StringUtil.merge(new long[] {3L}, null));		Assert.assertEquals("4", StringUtil.merge(new short[] {4}, null));		Assert.assertEquals(			"abc", StringUtil.merge(new String[] {"abc"}, null));		Assert.assertEquals("4", StringUtil.merge(new Object[] {4}, null));		Assert.assertEquals(			"5x",			StringUtil.merge(				new Object[] {5}, object -> object.toString() + "x", null));		Assert.assertEquals(			"a", StringUtil.merge(new ArrayList<>(Arrays.asList("a")), null));		Assert.assertEquals(			"ax",			StringUtil.merge(				new ArrayList<>(Arrays.asList("a")), s -> s + "x", null));		Assert.assertEquals("a", StringUtil.merge(Arrays.asList("a"), null));		Assert.assertEquals(			"ax", StringUtil.merge(Arrays.asList("a"), s -> s + "x", null));		Assert.assertEquals(			"a", StringUtil.merge(new HashSet<>(Arrays.asList("a")), null));		Assert.assertEquals(			"ax",			StringUtil.merge(				new HashSet<>(Arrays.asList("a")), s -> s + "x", null));		Assert.assertEquals(			"true,false",			StringUtil.merge(new boolean[] {true, false}, StringPool.COMMA));		Assert.assertEquals(			"1,2", StringUtil.merge(new byte[] {1, 2}, StringPool.COMMA));		Assert.assertEquals(			"a,b", StringUtil.merge(new char[] {'a', 'b'}, StringPool.COMMA));		Assert.assertEquals(			"1.2,3.4",			StringUtil.merge(new double[] {1.2D, 3.4D}, StringPool.COMMA));		Assert.assertEquals(			"1.0,2.0",			StringUtil.merge(new float[] {1.0F, 2.0F}, StringPool.COMMA));		Assert.assertEquals(			"2,3", StringUtil.merge(new int[] {2, 3}, StringPool.COMMA));		Assert.assertEquals(			"3,4", StringUtil.merge(new long[] {3L, 4L}, StringPool.COMMA));		Assert.assertEquals(			"4,5", StringUtil.merge(new short[] {4, 5}, StringPool.COMMA));		Assert.assertEquals(			"abc,def",			StringUtil.merge(new String[] {"abc", "def"}, StringPool.COMMA));		Assert.assertEquals(			"4,x", StringUtil.merge(new Object[] {4, "x"}, StringPool.COMMA));		Assert.assertEquals(			"5x,ax",			StringUtil.merge(				new Object[] {5, 'a'}, object -> object.toString() + "x",				StringPool.COMMA));		Assert.assertEquals(			"a,b",			StringUtil.merge(				new ArrayList<>(Arrays.asList("a", "b")), StringPool.COMMA));		Assert.assertEquals(			"ax,bx",			StringUtil.merge(				new ArrayList<>(Arrays.asList("a", "b")), s -> s + "x",				StringPool.COMMA));		Assert.assertEquals(			"a,b", StringUtil.merge(Arrays.asList("a", "b"), StringPool.COMMA));		Assert.assertEquals(			"ax,bx",			StringUtil.merge(				Arrays.asList("a", "b"), s -> s + "x", StringPool.COMMA));		Assert.assertEquals(			"a,b",			StringUtil.merge(				new HashSet<>(Arrays.asList("a", "b")), StringPool.COMMA));		Assert.assertEquals(			"ax,bx",			StringUtil.merge(				new HashSet<>(Arrays.asList("a", "b")), s -> s + "x",				StringPool.COMMA));	}
@Test    public void testGetColumnIndex() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        ColumnImpl col = new ColumnImpl("a", Integer.class, null, null, Origin.DATA, false, false);        store.addColumn(col);        Assert.assertEquals(store.getColumnIndex("a"), 0);        Assert.assertEquals(store.getColumnIndex("A"), 0);    }
@Test  public void testFromStringDefault() {    final String defaultNS = "http://default.na/mespace";    final String[] strings = {            "localname",            "{}with-empty-namespace",            "{http://myname.spa/ce}localname"    };    final EName[] eNames = {            new EName(defaultNS, "localname"),            new EName("", "with-empty-namespace"),            new EName("http://myname.spa/ce", "localname")    };    for (int i = 0; i < strings.length; i++) {      assertEquals(eNames[i], EName.fromString(strings[i], defaultNS));    }  }
@Test  public void testNoURISet() throws Exception  {    boolean threwException = false;    try {      PubSubWebSocketAppDataQuery.uriHelper(emptyContext, null);    } catch (Exception e) {      threwException = e instanceof IllegalArgumentException;    }    Assert.assertTrue(threwException);  }
@Test(description = "Get effective features but no any policy applied for device yet should be return FeatureManagement exception" +            " caused by PolicyEvaluationException",dependsOnMethods = "addPolicy",expectedExceptions = FeatureManagementException.class)    public void getEffectiveFeaturesForDeviceWithNoAppliedPolicy() throws Exception {        try{            policyManagerService.getEffectiveFeatures(new DeviceIdentifier(DEVICE_WITHOUT_POLICY, DEVICE_TYPE_B));        }catch (Exception e){            Assert.assertTrue(e.getCause() instanceof PolicyEvaluationException);            throw e;        }    }
@Test	public void testParseWithContainsMethod() throws ExpressionVisitException {		Expression expression = _filterParserImpl.parse(			"contains(fieldExternal, 'value')");		Assert.assertNotNull(expression);		MethodExpression methodExpression = (MethodExpression)expression;		Assert.assertEquals(			MethodExpression.Type.CONTAINS, methodExpression.getType());		List<Expression> expressions = methodExpression.getExpressions();		MemberExpression memberExpression = (MemberExpression)expressions.get(			0);		PrimitivePropertyExpression primitivePropertyExpression =			(PrimitivePropertyExpression)memberExpression.getExpression();		Assert.assertEquals(			"fieldExternal", primitivePropertyExpression.getName());		LiteralExpression literalExpression =			(LiteralExpression)expressions.get(1);		Assert.assertEquals("'value'", literalExpression.getText());	}
@Test  public void testOrderOfFields() {    // Add a single field that has an index greater than 0.    final DublinCoreMetadataCollection collection = new DublinCoreMetadataCollection(Collections.singleton(third));    assertEquals(1, collection.getFields().size());    assertEquals(third, collection.getFields().get(0));  }
@Test	public void testAddOperationsWhenOperationIsMutable() {		OpOperation opOperation = new OpOperation();		exceptionRule.expect(IllegalStateException.class);		blc.addOperation(opOperation);	}
@Test    public final void tc_getProperty_With_Paramaters() throws IOException    {        /*        # Properties mit Parametern        ParamaterValues.One_Param = P1: $P1$        ParamaterValues.Two_Params_1 = P1: $P1$; P2: $P2$        ParamaterValues.Two_Params_2 = P2: $P2$; P1: $P1$        */                assertEquals(  "P1: Param1", myProperties.getProperty( "ParamaterValues.One_Param", null, "Param1" ) );        assertEquals(  "P1: Param1; P2: Param2", myProperties.getProperty( "ParamaterValues.Two_Params_1", null, "Param1", "Param2" ) );        assertEquals(  "P2: Param2; P1: Param1", myProperties.getProperty( "ParamaterValues.Two_Params_2", null, "Param1", "Param2" ) );    }
@Test    public void testDeepHashCode() {        GraphStore g1 = GraphGenerator.generateTinyGraphStore();        GraphStore g2 = GraphGenerator.generateTinyGraphStore();        Assert.assertEquals(g1.deepHashCode(), g2.deepHashCode());    }
@Test	public void testProcessTemplate1() throws Exception {		Template template = new VelocityTemplate(			new MockTemplateResource(_TEMPLATE_FILE_NAME), null,			_velocityEngine, _templateContextHelper, _templateResourceCache,			false);		template.put(_TEST_KEY, _TEST_VALUE);		UnsyncStringWriter unsyncStringWriter = new UnsyncStringWriter();		template.processTemplate(unsyncStringWriter);		String result = unsyncStringWriter.toString();		Assert.assertEquals(_TEST_VALUE, result);	}
@Test    public void testParsingCite110SF0()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaURL = this.getClass().getResource( "../cite/schema/cite-gmlsf0.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaURL );        List<FeatureType> fts = adapter.extractAppSchema().getFeatureTypes( "http://cite.opengeospatial.org/gmlsf",                                                                            false, false );        Assert.assertEquals( 3, fts.size() );    }
@Test    public void testFielesystemResourceOverriding() throws Exception {        StaticResourceClassloader klas = new StaticResourceClassloader(new MockBundle(), overrideDir, bundlePath);        URL result = klas.getResource(overriddenBundleResource);        Assert.assertNotNull(result);        Assert.assertEquals(overrideResource.toURI().toURL(), result);    }
@Test  public void catDirectoryTest() throws IOException {    String expected = "Successfully created directory /testDir\n\n" +            "Path /testDir must be a file\n";    InterpreterResult output = alluxioInterpreter.interpret("mkdir /testDir" +            "\ncat /testDir", null);    Assert.assertEquals(Code.ERROR, output.code());    Assert.assertEquals(expected, output.message());  }
@Test    @SuppressWarnings("unchecked")    public void onCutWithoutSelection() {        dtPresenter.onCut();        verify(clipboard,               never()).setData(any(Set.class));    }
@Test  public void testSaveObjectReturnsNullOnNullInput() {    assertNull(getObjectManager().saveObject(null));  }
@Test	public void testGetWithUnlocalizedValue() {		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"Checkbox", new UnlocalizedValue("true"));		CheckboxDDMFormFieldValueAccessor checkboxDDMFormFieldValueAccessor =			new CheckboxDDMFormFieldValueAccessor();		Assert.assertEquals(			Boolean.TRUE,			checkboxDDMFormFieldValueAccessor.getValue(				ddmFormFieldValue, LocaleUtil.BRAZIL));		Assert.assertEquals(			Boolean.TRUE,			checkboxDDMFormFieldValueAccessor.getValue(				ddmFormFieldValue, LocaleUtil.US));	}
@Test    @SuppressWarnings("unchecked")    public void testDefaultNodeMouseClickHandlers() {        final List<NodeMouseEventHandler> handlers = scenarioGridSpy.getNodeMouseClickEventHandlers(scenarioGridLayerMock);        assertEquals(1, handlers.size());        assertTrue(handlers.get(0) instanceof DefaultGridWidgetCellSelectorMouseEventHandler);    }
@Test    public void testSetConstraintValue() throws Exception {        final int constraintValue = BaseSingleFieldConstraint.TYPE_LITERAL;        doReturn(editingCol).when(plugin).editingCol();        plugin.setConstraintValue(constraintValue);        verify(editingCol).setConstraintValueType(constraintValue);        verify(plugin).setConstraintValueFieldAndUpdateEditingCol(constraintValue);        verify(plugin).resetFieldAndOperator();        verify(plugin).fireChangeEvent(calculationTypePage);        verify(plugin).fireChangeEvent(fieldPage);        verify(plugin).fireChangeEvent(operatorPage);    }
@Test    public void onNodeMouseMove() {        mouseMoveHandler.onNodeMouseMove(mouseMoveEvent);        verify(mouseMoveHandler, times(1)).manageCoordinates(eq(MX), eq(MY));    }
@Test    public void canFactoryProcessViewsShouldThrowIllegalArgExceptionIfExtensionIsNullOrEmpty() {        try {            ScriptEngineUtils.canFactoryForExtensionProcessViews(null, null);            fail();        } catch (IllegalArgumentException e) {            // expected        }        try {            ScriptEngineUtils.canFactoryForExtensionProcessViews("", null);            fail();        } catch (IllegalArgumentException e) {            // expected        }    }
@Test  public void testConvertNull() {    assertNull(converter.apply(null));  }
@Test    public void should_rhs_not_be_evaluated_when_OR_operator_and_lhs_is_true___strong_ref() {        when(lhs.isGranted(any(), any(), any())).thenReturn(true);        GrantEvaluator grantEvaluator = composer.or(lhs, rhs);        boolean granted = grantEvaluator.isGranted(null, null, "fake");        verify(lhs).isGranted(any(), any(), any());        verifyZeroInteractions(rhs);        assertThat(granted).isTrue();    }
@Test	public void testHasImagesDoesNotTriggerAMProcessorWhenNotSupported()		throws Exception {		Mockito.when(			_amImageFinder.getAdaptiveMediaStream(Mockito.any(Function.class))		).thenAnswer(			invocation -> Stream.empty()		);		Mockito.when(			_amImageMimeTypeProvider.isMimeTypeSupported(Mockito.anyString())		).thenReturn(			false		);		_amImageEntryProcessor.hasImages(_fileVersion);		Mockito.verify(			_amAsyncProcessor, Mockito.never()		).triggerProcess(			Mockito.any(FileVersion.class), Mockito.anyString()		);	}
@Test(dataProvider = "islandsAndResult")    public void testNumber(char[][] islands, int expectedNumber) {        assertEquals(new NumberOfIslands().numIslands(islands), expectedNumber);    }
@Test  public void testDuplicateGroupCreation() throws IllegalArgumentException, UnauthorizedException, ConflictException {    // create the group, not exception thrown    provider.createGroup("Test 1", "Test group", "ROLE_ASTRO_101_SPRING_2011_STUDENT", "admin");    // try create again and expect a conflict    thrown.expect(ConflictException.class);    provider.createGroup("Test 1", "Test group 2", "ROLE_ASTRO_101_SPRING_2011_STUDENT", "admin");  }
@Test    public void appendActionColumn() throws VetoException {        reset(modellerPresenter);        final ActionInsertFactCol52 action = new ActionInsertFactCol52();        action.setFactType("FactType");        action.setFactField("field");        action.setHeader("header");        when(oracle.getFieldType(eq("FactType"),                                 eq("field"))).thenReturn(DataType.TYPE_STRING);        dtPresenter.appendColumn(action);        verify(synchronizer,               times(1)).appendColumn(eq(action));        verify(refreshActionsPanelEvent,               times(1)).fire(any(RefreshActionsPanelEvent.class));        verify(modellerPresenter,               times(1)).updateLinks();    }
@Test  public void testSearchObjectFactsByTypeValue() throws Exception {    String type = "ip";    String value = "27.13.4.125";    when(getTiService().searchObjectFacts(any(), isA(SearchObjectFactsRequest.class))).then(i -> {      SearchObjectFactsRequest request = i.getArgument(1);      assertEquals(type, request.getObjectType());      assertEquals(value, request.getObjectValue());      return StreamingResultSet.<Fact>builder().setValues(createFacts()).build();    });    Response response = target(String.format("/v1/object/%s/%s/facts", type, value)).request().post(Entity.json(new SearchObjectFactsRequest()));    JsonNode payload = getPayload(response);    assertEquals(200, response.getStatus());    assertTrue(payload.isArray());    assertEquals(3, payload.size());    verify(getTiService(), times(1)).searchObjectFacts(notNull(), isA(SearchObjectFactsRequest.class));  }
@Test  public void testPut() throws Exception {    Upload upload = EasyMock.createStrictMock(Upload.class);    upload.waitForCompletion();    EasyMock.expectLastCall().once();    EasyMock.replay(upload);    EasyMock.expect(s3Transfer.upload(BUCKET_NAME, KEY_VERSION_1 + ASSET_ID + ".xml", sampleFile)).andReturn(upload);    EasyMock.expect(s3Client.getObject(BUCKET_NAME, KEY_VERSION_1 + ASSET_ID + ".xml")).andReturn(s3Object);    EasyMock.replay(s3Object, s3Client, s3Transfer);    StoragePath path = new StoragePath(ORG_ID, MP_ID, new VersionImpl(1L), ASSET_ID);    store.put(path, Source.mk(uri));    // Check if mapping saved to db    AwsAssetMapping mapping = database.findMapping(path);    Assert.assertNotNull(mapping);    Assert.assertEquals(ORG_ID, mapping.getOrganizationId());    Assert.assertEquals(MP_ID, mapping.getMediaPackageId());    Assert.assertEquals(1L, mapping.getVersion().longValue());    Assert.assertEquals(ASSET_ID, mapping.getMediaPackageElementId());  }
@Test  public void testMultipleTenants() throws Exception {    setUpMultiTenant();    streamingService.activate(bundleContext, map);    assertEquals(2, streamingService.streamingUrls.size());    assertTrue(streamingService.streamingUrls.containsKey(tenant1));    assertTrue(streamingService.streamingUrls.containsKey(tenant2));    assertFalse(streamingService.streamingUrls.containsKey(tenant3));    assertEquals(tenant1Url, streamingService.streamingUrls.get(tenant1).toString());    assertEquals(tenant2Url, streamingService.streamingUrls.get(tenant2).toString());  }
@Test  public void testGetMountPoint() throws Exception {    given().expect()            .body(equalTo("/oaipmh"))            .when().get(env.host("/mountpoint"));  }
@Test  public void testToEntityWithFullRecord() {    UUID factID = UUID.randomUUID();    FactAclEntryRecord record = new FactAclEntryRecord()            .setId(UUID.randomUUID())            .setSubjectID(UUID.randomUUID())            .setOriginID(UUID.randomUUID())            .setTimestamp(123456789L);    FactAclEntity entity = converter.toEntity(record, factID);    assertNotNull(entity);    assertEquals(factID, entity.getFactID());    assertEquals(record.getId(), entity.getId());    assertEquals(record.getSubjectID(), entity.getSubjectID());    assertEquals(record.getOriginID(), entity.getOriginID());    assertEquals(record.getTimestamp(), entity.getTimestamp());  }
@Test  public void testConvertNullReturnsNull() {    assertNull(converter.apply(null));  }
@Test(dataProvider = "arrayProduct")    public void test(int[] array, int k, int expectedNum) {        assertEquals(new NumSubarrayProductLessThanK().numSubarrayProductLessThanK(array, k), expectedNum);    }
@Test    public void oneSM() {        Assert.assertEquals(RxComprehensions.doSwitchMap(zero(1), one(true)).toBlocking().first(), true);    }
@Test  public void testTraverseGraphByObjectSearchCallsDelegate() throws Exception {    TraverseGraphDelegate delegate = mock(TraverseGraphDelegate.class);    when(delegateProvider.get(TraverseGraphDelegate.class)).thenReturn(delegate);    TraverseByObjectSearchRequest request = new TraverseByObjectSearchRequest();    service.traverseGraph(RequestHeader.builder().build(), request);    verify(delegate).handle(request);  }
@Test    public void testIsAdjacent() {        GraphStore graphStore = GraphGenerator.generateTinyGraphStore();        Node n1 = graphStore.getNode("1");        Node n2 = graphStore.getNode("2");        Assert.assertTrue(graphStore.isAdjacent(n1, n2));        Assert.assertFalse(graphStore.isAdjacent(n2, n1));        graphStore.clearEdges();        Assert.assertFalse(graphStore.isAdjacent(n1, n2));    }
@Test	public void testGetGroupId() {		GroupKeyInfoItemIdentifier groupKeyInfoItemIdentifier =			new GroupKeyInfoItemIdentifier(12345L, "key");		Assert.assertEquals(12345L, groupKeyInfoItemIdentifier.getGroupId());	}
@Test    public void testServletCatchesExceptions() throws IOException, ServletException {        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter("fail");        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(false);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mock(FilterChain.class);        Exception ourException = new RuntimeException("Test");        Mockito.doThrow(ourException).when(chain).doFilter(Mockito.any(), Mockito.any());        assertThatThrownBy(() -> servletFilter.doFilter(request, response, chain)).isEqualTo(ourException);        ArgumentCaptor<Segment> emittedSegment = ArgumentCaptor.forClass(Segment.class);        verify(AWSXRay.getGlobalRecorder().getEmitter(), Mockito.times(1)).sendSegment(emittedSegment.capture());        Segment segment = emittedSegment.getValue();        Cause cause = segment.getCause();        Assert.assertEquals(1, cause.getExceptions().size());        Throwable storedThrowable = cause.getExceptions().get(0).getThrowable();        Assert.assertEquals(ourException, storedThrowable);    }
@Test	public void testWriteChar() throws IOException {		Assert.assertEquals("C\"A\"", ConfigurationHandler.write('A'));	}
@Test  public void testGetVertexCached() {    ObjectTypeStruct objectTypeMock = mockObjectType();    ObjectRecord objectSource = mockObject(objectTypeMock);    UUID objectID = objectSource.getId();    Vertex first = elementFactory.getVertex(objectID);    Vertex second = elementFactory.getVertex(objectID);    assertSame(first, second);  }
@Test	public void testWalkObjectGraphSelfReference() throws Exception {		SelfReference selfReference = new SelfReference();		ObjectGraphUtil.walkObjectGraph(selfReference, _recordVisitor);		Assert.assertEquals(_entries.toString(), 1, _entries.size());		Map.Entry<Field, Object> entry = _entries.get(0);		Assert.assertEquals(			ReflectionUtil.getDeclaredField(				SelfReference.class, "_selfReference"),			entry.getKey());		Assert.assertSame(selfReference, entry.getValue());	}
@Test(expected = IllegalArgumentException.class)  public void testGetObjectByTypeValueWithNonExistingObjectType() {    ObjectEntity entity = createAndSaveObject(createAndSaveObjectType().getId());    getObjectManager().getObject("nonExisting", entity.getValue());  }
@Test    public void testEnumHasPriorityOverListOperatorByte() throws Exception {        testEnumAndOperator(DataType.TYPE_NUMERIC_BYTE, "in");        verify(testedFactory).decoratedGridCellValueAdaptor(puddCaptor.capture());        assertTrue(puddCaptor.getValue() instanceof ProxyPopupTextDropDownEditCell);    }
@Test    public void checkLayerCountNoLimit()                            throws OWSException {        checker.checkLayerCount( 100, null );    }
@Test(description = "Testing search devices when unable to search devices")    public void testSearchDevicesException() throws SearchMgtException {        SearchManagerService searchManagerService = Mockito.mock(SearchManagerServiceImpl.class, Mockito.RETURNS_MOCKS);        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getSearchManagerService"))                .toReturn(searchManagerService);        Mockito.when(searchManagerService.search(Mockito.any(SearchContext.class))).thenThrow(new SearchMgtException());        Response response = this.deviceManagementService                .searchDevices(10, 5, new SearchContext());        Assert.assertEquals(response.getStatus(), Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),                "Expects HTTP 500 when an exception occurred while searching the device");    }
@Test(description = "This test case tests handling PolicyComplianceException when checking policy compliance",          dependsOnMethods = "testAddProfileThrowingPolicyComplianceException")    public void testAddProfileThrowingMonitoringDAOException() throws Exception {        MonitoringDAO monitoringDAO = mock(MonitoringDAO.class);        when(monitoringDAO.getCompliance(anyInt(), anyInt())).thenThrow(                new MonitoringDAOException());        DeviceIdentifier deviceIdentifier = new DeviceIdentifier();        deviceIdentifier.setType(DEVICE_TYPE_E);        deviceIdentifier.setId(String.valueOf(device5.getDeviceIdentifier()));        testThrowingException(monitoringManager, deviceIdentifier, d -> monitoringManager.checkPolicyCompliance((DeviceIdentifier) d, new ArrayList<ComplianceFeature>()), "monitoringDAO",                              monitoringDAO,                              MonitoringDAOException.class);    }
@Test    public void testWMSCapabilitiesOperationsMetadata()                            throws XMLStreamException {        WMSCapabilitiesAdapter capabilities = createCapabilities();        OperationsMetadata operationsMetadata = capabilities.parseOperationsMetadata();        List<Operation> operations = operationsMetadata.getOperation();        assertEquals( 4, operations.size() );        Operation getMapOperation = operationsMetadata.getOperation( "GetMap" );        List<URL> getUrls = getMapOperation.getGetUrls();        assertEquals( 1, getUrls.size() );        assertEquals( getGetGetMapUrl(), getUrls.get( 0 ).toExternalForm() );        List<URL> postUrls = getMapOperation.getPostUrls();        assertEquals( 1, postUrls.size() );        assertEquals( getPostGetMapUrl(), postUrls.get( 0 ).toExternalForm() );        List<DCP> dcps = getMapOperation.getDCPs();        assertEquals( 1, dcps.size() );        DCP dcp = dcps.get( 0 );        List<Pair<URL, List<Domain>>> getEndpoints = dcp.getGetEndpoints();        assertEquals( 1, getEndpoints.size() );        assertEquals( getGetGetMapUrl(), getEndpoints.get( 0 ).getFirst().toExternalForm() );        List<Pair<URL, List<Domain>>> postEndpoints = dcp.getPostEndpoints();        assertEquals( 1, postEndpoints.size() );        assertEquals( getPostGetMapUrl(), postEndpoints.get( 0 ).getFirst().toExternalForm() );    }
@Test    public void testGetTitle() throws Exception {        final String errorKey = GuidedDecisionTableErraiConstants.FieldPage_Field;        final String errorMessage = "Title";        when(translationService.format(errorKey)).thenReturn(errorMessage);        final String title = page.getTitle();        assertEquals(errorMessage,                     title);    }
@Test	public void testZipFile_fixture_1() throws Exception {		ZipFiles fixture2 = getFixture();		String filePath = "test.log";		File file = new File(filePath);		file.createNewFile();		String result = fixture2.zipFile(filePath);		file.delete();		file = new File(result);		file.delete();				assertEquals("test.log.zip", result);	}
@Test    public void testRenameType() {        // Skip. This is actually tested by testRenameTypeDesc above.    }
@Test    public void testSetValueList() {        final ActionWrapper actionWrapper = mock(ActionWrapper.class);        final String valueList = "valueList";        doReturn(actionWrapper).when(plugin).editingWrapper();        plugin.setValueList(valueList);        verify(actionWrapper).setValueList(valueList);    }
@Test	public void testGetPSServiceStatus() throws Exception {		List<ComponentService> services = new LinkedList();		ComponentService cs = new ComponentService(PS, PS, PS);		services.add(cs);		Map<String, Boolean> result = fixture.getServiceStatus(services);		assertNotNull(result);		assertEquals(1, result.size());		assertNotNull(result.get(PS));	}
@Test    public void manageContent() {        scenarioSimulationEditorKogitoWrapperSpy.manageContent("path/file.scesim", "value", resolveCallbackFnMock, rejectCallbackFnMock);        verify(scenarioSimulationEditorKogitoWrapperSpy, never()).showScenarioSimulationCreationPopup(any());        verify(scenarioSimulationEditorKogitoWrapperSpy, times(1)).gotoPath(pathArgumentCaptor.capture());        verify(scenarioSimulationEditorKogitoWrapperSpy, times(1)).unmarshallContent(eq("value"));        assertEquals("file.scesim", pathArgumentCaptor.getValue().getFileName());        assertEquals("path/", pathArgumentCaptor.getValue().toURI());    }
@Test  public void getAppWindowDurationMSTest()  {    OperatorContext context = createOperatorContext(500, 10);    long appWindowDuration = WindowUtils.getAppWindowDurationMs(context);    Assert.assertEquals(5000L, appWindowDuration);  }
@Test  public void testActionHierarchy() throws Exception {    String dbName = "db1";    DBWildcardPrivilege dbAll = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "ALL"));    DBWildcardPrivilege dbSelect = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "SELECT"));    DBWildcardPrivilege dbInsert = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "INSERT"));    DBWildcardPrivilege dbAlter = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "ALTER"));    DBWildcardPrivilege dbCreate = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "CREATE"));    DBWildcardPrivilege dbDrop = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "DROP"));    DBWildcardPrivilege dbIndex = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "INDEX"));    DBWildcardPrivilege dbLock = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "LOCK"));    assertTrue(dbAll.implies(dbSelect));    assertTrue(dbAll.implies(dbInsert));    assertTrue(dbAll.implies(dbAlter));    assertTrue(dbAll.implies(dbCreate));    assertTrue(dbAll.implies(dbDrop));    assertTrue(dbAll.implies(dbIndex));    assertTrue(dbAll.implies(dbLock));    dbAll = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName), new KeyValue("action", "*"));    assertTrue(dbAll.implies(dbSelect));    assertTrue(dbAll.implies(dbInsert));    assertTrue(dbAll.implies(dbAlter));    assertTrue(dbAll.implies(dbCreate));    assertTrue(dbAll.implies(dbDrop));    assertTrue(dbAll.implies(dbIndex));    assertTrue(dbAll.implies(dbLock));    dbAll = create(new KeyValue("server", "server1"),        new KeyValue("db", dbName));    assertTrue(dbAll.implies(dbSelect));    assertTrue(dbAll.implies(dbInsert));    assertTrue(dbAll.implies(dbAlter));    assertTrue(dbAll.implies(dbCreate));    assertTrue(dbAll.implies(dbDrop));    assertTrue(dbAll.implies(dbIndex));    assertTrue(dbAll.implies(dbLock));  }
@Test    public void info() throws Exception {        StaticLogger.info(TAG, MESSAGE);        verify(logger).info(eq(TAG), eq(MESSAGE));    }
@Test(description = "Testing getting device features")    public void testGetFeaturesOfDevice() {        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getDeviceManagementService"))                .toReturn(this.deviceManagementProviderService);        Response response = this.deviceManagementService                .getFeaturesOfDevice(TEST_DEVICE_TYPE, UUID.randomUUID().toString(), null);        Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode());    }
@Test  public void testConvertRequestFilterByKeywords() throws Exception {    FactSearchCriteria criteria = converter.apply(new SearchObjectRequest().setKeywords("keyword"));    assertEquals("keyword", criteria.getKeywords());    assertEquals(SetUtils.set(FactSearchCriteria.KeywordFieldStrategy.all), criteria.getKeywordFieldStrategy());    assertEquals(FactSearchCriteria.MatchStrategy.any, criteria.getKeywordMatchStrategy());  }
@Test public void testOnViewCreated() {		// Arrange:		final BaseFragment fragment = new TestFragment();		final View mockView = mock(FrameLayout.class);		// Act:		fragment.onViewCreated(mockView, null);		// Assert:		verifyZeroInteractions(mockView);	}
@Test    public void checkColumnType() {        assertEquals(ActionSetFieldCol52.class,                     builder.getSupportedColumnType());    }
@Test(description = "This test case tests handling FeatureManagerDAOException when retrieving all profiles",          dependsOnMethods = "testGetAllProfilesThrowingProfileManagerDAOException")    public void testGetAllProfilesThrowingFeatureManagerDAOException() throws Exception {        FeatureDAO featureDAO = mock(FeatureDAO.class);        when(featureDAO.getAllProfileFeatures()).thenThrow(new FeatureManagerDAOException());        testThrowingException(profileManager, profile1, p -> profileManager.getAllProfiles(), "featureDAO", featureDAO,                              FeatureManagerDAOException.class);    }
@Test	public void testReadFrom() throws IOException {		System.setProperty(CSVTableProvider.AUTO_GUESS_PROPERTY, "yes");		Assert.assertFalse(isSemicolonDetected(this.commaEasy));		Assert.assertTrue(isSemicolonDetected(this.semicolonEasy));		Assert.assertFalse(isSemicolonDetected(this.commaHarder));		Assert.assertTrue(isSemicolonDetected(this.semicolonHarder));	}
@Test	public void testAdditionalIndexConfigurations() throws Exception {		Mockito.when(			_elasticsearchConfigurationWrapper.additionalIndexConfigurations()		).thenReturn(			"index.number_of_replicas: 1\nindex.number_of_shards: 2"		);		createIndices();		Settings settings = getIndexSettings();		Assert.assertEquals("1", settings.get("index.number_of_replicas"));		Assert.assertEquals("2", settings.get("index.number_of_shards"));	}
@SuppressWarnings("unchecked")  @Test  public void testPopulateIndex() throws Exception {    // This service registry must return a list of jobs    List<String> args = new ArrayList<String>();    args.add(new DefaultOrganization().getId());    List<Job> jobs = new ArrayList<Job>();    for (long i = 0; i < 10; i++) {      MediaPackage mediaPackage = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder().createNew();      mediaPackage.setIdentifier(IdImpl.fromUUID());      searchDatabase.storeMediaPackage(mediaPackage, acl, new Date());      String payload = MediaPackageParser.getAsXml(mediaPackage);      Job job = new JobImpl(i);      job.setArguments(args);      job.setPayload(payload);      job.setStatus(Status.FINISHED);      jobs.add(job);    }    ServiceRegistry serviceRegistry = EasyMock.createNiceMock(ServiceRegistry.class);    EasyMock.expect(            serviceRegistry.createJob((String) EasyMock.anyObject(), (String) EasyMock.anyObject(),                    (List<String>) EasyMock.anyObject(), (String) EasyMock.anyObject(), EasyMock.anyBoolean()))                    .andReturn(new JobImpl()).anyTimes();    EasyMock.expect(serviceRegistry.updateJob((Job) EasyMock.anyObject())).andReturn(new JobImpl()).anyTimes();    EasyMock.expect(serviceRegistry.getJobs((String) EasyMock.anyObject(), (Status) EasyMock.anyObject()))    .andReturn(jobs).anyTimes();    EasyMock.replay(serviceRegistry);    service.setServiceRegistry(serviceRegistry);    OrganizationDirectoryService orgDirectory = EasyMock.createNiceMock(OrganizationDirectoryService.class);    EasyMock.expect(orgDirectory.getOrganization((String) EasyMock.anyObject())).andReturn(new DefaultOrganization())    .anyTimes();    EasyMock.replay(orgDirectory);    service.setOrganizationDirectoryService(orgDirectory);    // We should have nothing in the search index    assertEquals(0, service.getByQuery(new SearchQuery()).size());    service.populateIndex("System Admin");    // This time we should have 10 results    assertEquals(10, service.getByQuery(new SearchQuery()).size());  }
@Test    public void checkRename() {        final Path path = mock(Path.class);        final String newFileName = "newFileName";        final String comment = "comment";        service.rename(path,                       newFileName,                       comment);        verify(renameService,               times(1)).rename(eq(path),                                eq(newFileName),                                eq(comment));    }
@Test	public void testPosition() throws Exception {		CSSRTLConverter cssRTLConverter = new CSSRTLConverter();		Assert.assertEquals(			"p{right:50%}", cssRTLConverter.process("p{left:50%}"));		Assert.assertEquals(			"p{left:50%}", cssRTLConverter.process("p{right:50%}"));	}
@Test    public void TC_Window_Child()    {        OKWLocator Window = new OKWLocator( "Window" );        OKWLocator Child = new OKWLocator( "$L1$.Child", Window );        assertEquals( "Window.Child", Child.getLocator() );        assertEquals( "Window", Window.getLocator() );    }
@Test    public void testSetupConditionsPanel() {        presenter.setupConditionsPanel(modeller);        verify(conditionsPanel).init(modeller);    }
@Test  public void testTakeIterator() {    assertTrue(mlist(asList(1, 2, 3, 4, 5).iterator()).take(0).value().isEmpty());    assertEquals(3, mlist(asList(1, 2, 3, 4, 5).iterator()).take(3).value().size());    assertEquals(5, mlist(asList(1, 2, 3, 4, 5).iterator()).take(5).value().size());    assertEquals(5, mlist(asList(1, 2, 3, 4, 5).iterator()).take(10).value().size());  }
@Test	public void testProcessImgTagWithAttributesAndSimpleImageURL()		throws Exception {		DocumentHTMLProcessor documentHTMLProcessor =			new DocumentHTMLProcessor();		String originalHTML = StringBundler.concat(			"<html><head><title>test-title</title></head><body>",			"<img class=\"test\" src=\"/image",			"/image_gallery?uuid=f17b2a6b-70ee-4121-ae6e-61c22ff47",			"&groupId=807138&t=12798459506\"/></body></html>");		InputStream originalInputStream = new ByteArrayInputStream(			originalHTML.getBytes());		InputStream processedInputStream = documentHTMLProcessor.process(			originalInputStream);		String processedHTML = IOUtils.toString(processedInputStream, "UTF-8");		String expectedHTML = StringBundler.concat(			"<html><head><title>test-title</title></head><body>",			"<img class=\"test\" src=\"/image",			"/image_gallery?uuid=f17b2a6b-70ee-4121-ae6e-61c22ff47",			"&groupId=807138&t=12798459506&auth_token=authtoken\"/>",			"</body></html>");		Assert.assertEquals(expectedHTML, processedHTML);	}
@Test    public void testShowAttributeSelectorPopup() {        final RuleModel model = mock(RuleModel.class);        final boolean lockLHS = false;        final boolean lockRHS = true;        doReturn(model).when(ruleModeller).getModel();        doReturn(lockLHS).when(ruleModeller).lockLHS();        doReturn(lockRHS).when(ruleModeller).lockRHS();        addAttributeWidget.init(ruleModeller);        addAttributeWidget.showAttributeSelectorPopup();        verify(guidedRuleAttributeSelectorPopup).init(eq(model),                                                      eq(lockLHS),                                                      eq(lockRHS),                                                      commandArgumentCaptor.capture());        commandArgumentCaptor.getValue().execute();        verify(ruleModeller).refreshWidget();    }
@Test    public void testEthGetLogsWithNumericBlockRange() throws Exception {        web3j.platonGetLogs(new PlatonFilter(                DefaultBlockParameterNumber.valueOf(Numeric.toBigInt("0xe8")),                DefaultBlockParameterName.LATEST, ""))                .send();        verifyResult(                "{\"jsonrpc\":\"2.0\",\"method\":\"platon_getLogs\","                        + "\"params\":[{\"topics\":[],\"fromBlock\":\"0xe8\","                        + "\"toBlock\":\"latest\",\"address\":[\"\"]}],\"id\":1}");    }
@Test  public void testDoubleConnectionAcquire() {    ConnectionQueue queue = new ConnectionQueue();    ConnectionPool pool = new ConnectionPool(queue, 1);    SimpleHolder holder = new SimpleHolder();    pool.acquire(holder);    SimpleConnection conn = new SimpleConnection();    queue.connect(conn);    holder.init();    try {      holder.init();      fail();    } catch (IllegalStateException ignore) {    }  }
@Test	public void testDisabledComments() throws Exception {		whenGetEntryThenReturn(_blogsEntry);		when(			_portletPreferences.getValue("enableComments", null)		).thenReturn(			"false"		);		addTrackback();		assertError("Comments are disabled");	}
@Test public void testAllowEnterTransitionOverlap() {		// Arrange:		final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		// Act + Assert:    	assertThat(request.allowEnterTransitionOverlap(false), is(request));    	assertThat(request.allowEnterTransitionOverlap(), is(false));		assertThat(request.allowEnterTransitionOverlap(true), is(request));		assertThat(request.allowEnterTransitionOverlap(), is(true));	}
@Test    public void testGetNextUnusedViewHolder() throws Exception {        //Given        List<Shuffle.ViewHolder> viewHolderList = Arrays.asList(            mockShuffleViewHolder(1),            mockShuffleViewHolder(-1),            mockShuffleViewHolder(2)        );        //When        Shuffle.ViewHolder returnedHolder = Shuffle.getNextUnusedViewHolder(viewHolderList, 0);        //Then        assertThat(returnedHolder.position).isEqualTo(-1);    }
@Test    public void checkExpressionSyntax_StringWithExpressionValuePrefix() {        assertEquals(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test", ExpressionUtils.ensureExpressionSyntax(ConstantHolder.EXPRESSION_VALUE_PREFIX + "Test"));    }
@Test	public void testGetNestedFieldsWithNonexistendFieldName() throws Exception {		Product product = _toProduct(1L, null);		Mockito.when(			_writerInterceptorContext.getEntity()		).thenReturn(			product		);		NestedFieldsContextThreadLocal.setNestedFieldsContext(			new NestedFieldsContext(				Collections.emptyList(), new MessageImpl(),				_getPathParameters(), "v1.0", new MultivaluedHashMap<>()));		_nestedFieldsWriterInterceptor.aroundWriteTo(_writerInterceptorContext);		Sku[] skus = product.getSkus();		Assert.assertNull(skus);		NestedFieldsContextThreadLocal.setNestedFieldsContext(			new NestedFieldsContext(				Collections.singletonList("nonexistent"), new MessageImpl(),				_getPathParameters(), "v1.0", new MultivaluedHashMap<>()));		_nestedFieldsWriterInterceptor.aroundWriteTo(_writerInterceptorContext);		skus = product.getSkus();		Assert.assertNull(skus);	}
@Test    public void eightCo() {        Assert.assertEquals((long)RxComprehensions.doCompose(zero(0), intIncrementToString(), stringToInt(), intIncrementToString(), stringToInt(), intIncrementToString(), stringToInt(), intIncrementToString(), stringToInt()).blockingFirst(), 4);    }
@Test    public void t02_defaultGrouping() throws Exception {        String e1 = "tagA and not tagB or tagC";        assertEquals("or(tagC, and(tagA, not tagB))", parser.parse(e1));        String e2 = "not tagA and tagB or tagC";        assertEquals("or(tagC, and(tagB, not tagA))", parser.parse(e2));        String e3 = "not tagA or tagB and tagC";        assertEquals("and(tagC, or(tagB, not tagA))", parser.parse(e3));    }
@Test    public void test200Example8()                            throws Exception {        GetPropertyValueXMLAdapter parser = new GetPropertyValueXMLAdapter();        parser.load( GetPropertyValueXMLAdapterTest.class.getResource( "wfs200/example8.xml" ) );        GetPropertyValue request = parser.parse();        assertEquals( VERSION_200, request.getVersion() );        assertEquals( "myns:phone", request.getValueReference().getAsText() );        assertNull( request.getPresentationParams().getStartIndex() );        assertNull( request.getPresentationParams().getCount() );        assertEquals( "application/xml; subtype=gml/3.2", request.getPresentationParams().getOutputFormat() );        assertNull( request.getResolveParams().getMode() );        assertNull( request.getResolveParams().getDepth() );        assertNull( request.getResolveParams().getTimeout() );        FilterQuery query = (FilterQuery) request.getQuery();        OperatorFilter filter = (OperatorFilter) query.getFilter();        Assert.assertTrue( filter.getOperator() instanceof And );    }
@Test	public void testClose() throws IOException {		AtomicBoolean closeCalled = new AtomicBoolean();		UnsyncFilterInputStream unsyncFilterInputStream =			new UnsyncFilterInputStream(				new TestInputStream() {					@Override					public void close() {						closeCalled.set(true);					}				});		unsyncFilterInputStream.close();		Assert.assertTrue(closeCalled.get());	}
@Test    public void testIsCompleteWhenWorkItemIsSet() {        when(plugin.isWorkItemSet()).thenReturn(true);        page.isComplete(Assert::assertTrue);    }
@Test	public void testGetDisabledConfigurationStringWithMaxHeightAndMaxWidth() {		AMImageConfigurationEntry amImageConfigurationEntry =			new AMImageConfigurationEntryImpl(				"test", "desc", "12345",				HashMapBuilder.put(					"max-height", "100"				).put(					"max-width", "200"				).build(),				false);		String configurationString =			_amImageConfigurationEntryParser.getConfigurationString(				amImageConfigurationEntry);		Assert.assertEquals(			"test:desc:12345:max-height=100;max-width=200:enabled=false",			configurationString);	}
@Test	public void testGetDDMFormFieldsLabel() {		DDMFormInstanceRecordExporterImpl ddmFormInstanceRecordExporterImpl =			new DDMFormInstanceRecordExporterImpl();		Locale locale = new Locale("pt", "BR");		when(			_language.get(locale, "status")		).thenReturn(			"Estado"		);		when(			_language.get(locale, "modified-date")		).thenReturn(			"Data de Modificação"		);		when(			_language.get(locale, "author")		).thenReturn(			"Autor"		);		LocalizedValue localizedValue1 = new LocalizedValue();		localizedValue1.addString(locale, "Campo 1");		LocalizedValue localizedValue2 = new LocalizedValue();		localizedValue2.addString(locale, "Campo 2");		Map<String, DDMFormField> ddmFormFieldMap =			HashMapBuilder.<String, DDMFormField>put(				"field1",				() -> {					DDMFormField ddmFormField1 = new DDMFormField(						"field1", "text");					ddmFormField1.setLabel(localizedValue1);					return ddmFormField1;				}			).put(				"field2",				() -> {					DDMFormField ddmFormField2 = new DDMFormField(						"field2", "text");					ddmFormField2.setLabel(localizedValue2);					return ddmFormField2;				}			).build();		Map<String, String> ddmFormFieldsLabel =			ddmFormInstanceRecordExporterImpl.getDDMFormFieldsLabel(				ddmFormFieldMap, locale);		Assert.assertEquals("Campo 1", ddmFormFieldsLabel.get("field1"));		Assert.assertEquals("Campo 2", ddmFormFieldsLabel.get("field2"));		Assert.assertEquals("Estado", ddmFormFieldsLabel.get("status"));		Assert.assertEquals(			"Data de Modificação", ddmFormFieldsLabel.get("modifiedDate"));		Assert.assertEquals("Autor", ddmFormFieldsLabel.get("author"));	}
@Test	public void testOnBeforeRemove() throws PortalException {		when(			_ddmFormInstanceReportLocalService.				getFormInstanceReportByFormInstanceId(Mockito.anyLong())		).thenThrow(			new NoSuchFormInstanceReportException()		);		DDMFormInstanceRecord ddmFormInstanceRecord = mock(			DDMFormInstanceRecord.class);		when(			ddmFormInstanceRecord.getFormInstanceId()		).thenReturn(			0L		);		_ddmFormInstanceRecordModelListener.onBeforeRemove(			ddmFormInstanceRecord);	}
@Test    public void queryAlertsByResolvedTime() throws Exception {        int numTenants = 1;        int numTriggers = 5;        int numAlerts = 5;        createTestAlerts(numTenants, numTriggers, numAlerts);        Set<String> tenantIds = new HashSet<>();        tenantIds.add("tenant0");        AlertsCriteria criteria = new AlertsCriteria();        criteria.setStartResolvedTime(1L);        // Alerts on stime 1 and 4 are RESOLVED        List<Alert> stimeGTE2Alerts = alerts.getAlerts(tenantIds, criteria, null);        assertEquals(5 * 2, stimeGTE2Alerts.size());        deleteTestAlerts(numTenants);    }
@Test(description = "Testing get devices when request exists both name and role.")    public void testGetDevicesWhenBothNameAndRoleAvailable() {        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getDeviceManagementService"))                .toReturn(this.deviceManagementProviderService);        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getDeviceAccessAuthorizationService"))                .toReturn(this.deviceAccessAuthorizationService);        Response response = this.deviceManagementService                .getDevices(TEST_DEVICE_NAME, TEST_DEVICE_TYPE, DEFAULT_USERNAME, null, DEFAULT_ROLE, DEFAULT_OWNERSHIP,                        DEFAULT_STATUS, 1, null, null, false, 10, 5);        Assert.assertEquals(response.getStatus(), Response.Status.BAD_REQUEST.getStatusCode());    }
@Test  public void testInterpretInvalidInput() {    InterpreterResult result = intp.interpret("invalid input", INTP_CONTEXT);    assertEquals(InterpreterResult.Code.ERROR, result.code());  }
@Test    public void initializeNameAndNamespace() {        Settings settings = new Settings();        dmnTypeServiceImpl.initializeNameAndNamespace(settings, mock(Path.class), "");        assertEquals(NAMESPACE, settings.getDmnNamespace());        assertEquals(MODEL_NAME, settings.getDmnName());    }
@Test  public void testCheckPermissionForOrganizationWithAccess() throws Exception {    UUID organizationID = UUID.randomUUID();    when(identityResolver.resolveOrganizationIdentity(organizationID)).thenReturn(organization);    when(accessController.hasPermission(credentials, viewThreatIntelFact, organization)).thenReturn(true);    context.checkPermission(viewThreatIntelFact, organizationID);    verify(accessController).hasPermission(credentials, viewThreatIntelFact, organization);  }
@Test    public void decodeNoExtraPayload() {        Http2Connection connection = new Http2Connection();        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.RST_STREAM_NO_EXTRA_PAYLOAD_BUFFER);        Http2RstStreamFrame frame = (Http2RstStreamFrame) connection.decode(buffer);        assertNotNull(frame);        assertEquals(4, frame.getLength());        assertEquals(3, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(32, frame.getStreamID());        assertEquals(256, frame.getErrorCode());    }
@Test    public void initMenu() {        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_COLUMN);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_COLUMN);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_INSTANCE);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DUPLICATE_INSTANCE);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_LABEL);        assertNull(abstractColumnMenuPresenter.COLUMNCONTEXTMENU_I18N);        abstractColumnMenuPresenter.initMenu();        assertEquals(GivenContextMenu.GIVENCONTEXTMENU_GIVEN, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_COLUMN);        assertEquals(GivenContextMenu.GIVENCONTEXTMENU_INSERT_COLUMN_LEFT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_LEFT);        assertEquals(GivenContextMenu.GIVENCONTEXTMENU_INSERT_COLUMN_RIGHT, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_INSERT_COLUMN_RIGHT);        assertEquals(GivenContextMenu.GIVENCONTEXTMENU_DELETE_COLUMN, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_COLUMN);        assertEquals(GivenContextMenu.GIVENCONTEXTMENU_DELETE_INSTANCE, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DELETE_INSTANCE);        assertEquals(GivenContextMenu.GIVENCONTEXTMENU_DUPLICATE_INSTANCE, abstractColumnMenuPresenter.COLUMNCONTEXTMENU_DUPLICATE_INSTANCE);        assertEquals(abstractColumnMenuPresenter.constants.given().toUpperCase(), abstractColumnMenuPresenter.COLUMNCONTEXTMENU_LABEL);        assertEquals("given", abstractColumnMenuPresenter.COLUMNCONTEXTMENU_I18N);    }
@Test	public void testGetThumbnailFileSizeDoesNotTriggerAMProcessorWhenInvalidSize()		throws Exception {		Mockito.when(			_amImageFinder.getAdaptiveMediaStream(Mockito.any(Function.class))		).thenAnswer(			invocation -> Stream.empty()		);		Mockito.when(			_amImageMimeTypeProvider.isMimeTypeSupported(Mockito.anyString())		).thenReturn(			true		);		Mockito.when(			_amImageValidator.isValid(_fileVersion)		).thenReturn(			false		);		_amImageEntryProcessor.getThumbnailFileSize(_fileVersion, 0);		Mockito.verify(			_amAsyncProcessor, Mockito.never()		).triggerProcess(			Mockito.any(FileVersion.class), Mockito.anyString()		);	}
@Test  public void testTraverseObjectById() throws Exception {    UUID id = UUID.randomUUID();    when(getTiService().traverseGraph(any(), isA(TraverseByObjectIdRequest.class))).then(i -> {      assertEquals(id, i.<TraverseByObjectIdRequest>getArgument(1).getId());      return StreamingResultSet.<String>builder().setValues(ListUtils.list("something")).build();    });    TraverseByObjectIdRequest request = new TraverseByObjectIdRequest()            .setQuery("g.values('value')");    Response response = target(String.format("/v1/object/uuid/%s/traverse", id)).request().post(Entity.json(request));    JsonNode payload = getPayload(response);    assertEquals(200, response.getStatus());    assertTrue(payload.isArray());    assertEquals(1, payload.size());    assertEquals("something", payload.get(0).asText());    verify(getTiService(), times(1)).traverseGraph(notNull(), isA(TraverseByObjectIdRequest.class));  }
@Test	public void testGetEntitySchemaNames() {		OASExplorer oasExplorer = new OASExplorer();		Set<String> entitySchemaNames = oasExplorer.getEntitySchemaNames(			readObject("openapi.json"));		Assert.assertThat(entitySchemaNames, Matchers.hasSize(16));		Assert.assertThat(			entitySchemaNames,			Matchers.hasItems(				"Attachment", "Category", "Option", "OptionCategory",				"ProductOption", "ProductShippingConfiguration",				"ProductSubscriptionConfiguration", "Sku", "Specification"));	}
@Test public void testNormalizeStackTrace() {    assertEquals("", Outcome.normalizeStackTrace(""));    assertEquals("failure message", Outcome.normalizeStackTrace("  \nfailure message\t\r\n "));    assertEquals("one two three", Outcome.normalizeStackTrace("one  \n \ttwo\r\n\t three\n"));  }
@Test    public void testGetFirstEnabledNullMin() throws Exception {        LocalDate today = LocalDate.now();        RangeUnit unit = new Week(today, today, null, null);        assertEquals(today.withDayOfWeek(DateTimeConstants.MONDAY), unit.getFirstEnabled());    }
@Test    public void getSafeHtml_BrlAction_DefinitionOnly() {        BRLActionColumn originalColumn = new BRLActionColumn();        originalColumn.setDefinition(Arrays.asList(new ActionRetractFact("fact1")));        originalColumn.setHeader("action");        originalColumn.setHideColumn(false);        BRLActionColumn newColumn = new BRLActionColumn();        newColumn.setDefinition(Arrays.asList(new ActionRetractFact("fact2"), new ActionRetractFact("fact3")));        newColumn.setHeader("action");        newColumn.setHideColumn(false);        List<BaseColumnFieldDiff> diffs = originalColumn.diff(newColumn);        SafeHtml result = helper.getSafeHtml(new UpdateColumnAuditLogEntry("mock user", originalColumn, newColumn, diffs));        // Definition diffs are currently not supported, maybe #soon?//        assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString());        assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(new ArrayList<>()), result.asString());    }
@Test  public void testDestinationAsUserName() throws Exception {    operation.setConfiguration(EmailWorkflowOperationHandler.TO_PROPERTY, USER_NAME);    operation.setConfiguration(EmailWorkflowOperationHandler.CC_PROPERTY, USER_NAME);    operation.setConfiguration(EmailWorkflowOperationHandler.BCC_PROPERTY, USER_NAME);    operation.setConfiguration(EmailWorkflowOperationHandler.SUBJECT_PROPERTY, DEFAULT_SUBJECT);    operation.setConfiguration(EmailWorkflowOperationHandler.BODY_PROPERTY,            "This is the media package: ${mediaPackage.identifier}");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals(DEFAULT_TO, capturedTo.getValue());    Assert.assertEquals(DEFAULT_TO, capturedCC.getValue());    Assert.assertEquals(DEFAULT_TO, capturedBCC.getValue());    Assert.assertEquals(DEFAULT_SUBJECT, capturedSubject.getValue());    Assert.assertEquals("This is the media package: 3e7bb56d-2fcc-4efe-9f0e-d6e56422f557", capturedBody.getValue());  }
@Test	public void testImportUserWithEmailAddress() throws Exception {		when(			_company.isStrangers()		).thenReturn(			true		);		when(			_company.isStrangersWithMx()		).thenReturn(			true		);		User resolvedUser = _defaultUserResolver.importUser(			1, _SUBJECT_NAME_IDENTIFIER_EMAIL_ADDRESS, "emailAddress",			new UserResolverSAMLContextImpl(_messageContext),			new ServiceContext());		Assert.assertNotNull(resolvedUser);	}
@Test    public void testManageGridLeftClickReadOnlyFalse() {        when(scenarioGridMock.startEditingCell(UI_ROW_INDEX, UI_COLUMN_INDEX)).thenReturn(true);        when(informationHeaderMetaDataMock.isReadOnly()).thenReturn(false);        scenarioSimulationMainGridPanelClickHandler.setEventBus(eventBusMock);        when(scenarioGridCellMock.isEditingMode()).thenReturn(false);        doReturn(null).when(scenarioSimulationMainGridPanelClickHandler).getUiHeaderRowIndexLocal(isA(Point2D.class));        doReturn(UI_ROW_INDEX).when(scenarioSimulationMainGridPanelClickHandler).getUiRowIndexLocal(anyDouble());        doReturn(UI_COLUMN_INDEX).when(scenarioSimulationMainGridPanelClickHandler).getUiColumnIndexLocal(anyDouble());        doReturn(scenarioGridCellMock).when(scenarioGridModelMock).getCell(UI_ROW_INDEX, UI_COLUMN_INDEX);        assertTrue(scenarioSimulationMainGridPanelClickHandler.manageCoordinates((int) CLICK_POINT_X, (int) CLICK_POINT_Y));        verify(scenarioGridModelMock, times(1)).selectCell(eq(1), eq(0));    }
@Test    public void evaluateInstantInstant() {        assertFalse( after.evaluate( instant( "2014-01-01" ), instant( "2014-01-01" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01" ), instant( "2014-01-01T00:00:01" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01.000" ), instant( "2014-01-01T00:00:01.000" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01" ), instant( "2015-01-01" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01" ), instant( "2014-01-01T00:00:02" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01.000" ), instant( "2014-01-01T00:00:01.001" ) ) );        assertFalse( after.evaluate( null, null ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01" ), instant( "2014-01-01T00:00:01" ) ) );        assertFalse( after.evaluate( instant( "INDETERMINATE" ), instant( "INDETERMINATE" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01" ), instant( "2014-01-01T00:00:02" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01" ), instant( "INDETERMINATE" ) ) );        assertFalse( after.evaluate( instant( "INDETERMINATE" ), instant( "2014-01-01T00:00:01" ) ) );        assertFalse( after.evaluate( instant( "2014-01-01T00:00:01" ), null ) );        assertFalse( after.evaluate( null, instant( "2014-01-01T00:00:01" ) ) );        assertTrue( after.evaluate( instant( "2015-01-01" ), instant( "2014-01-01" ) ) );        assertTrue( after.evaluate( instant( "2014-01-01T00:00:02" ), instant( "2014-01-01T00:00:01" ) ) );        assertTrue( after.evaluate( instant( "2014-01-01T00:00:01.001" ), instant( "2014-01-01T00:00:01.000" ) ) );    }
@Test	public void testRewordAlterColumnType() throws Exception {		Assert.assertEquals(			"alter table DLFolder alter column userName nvarchar(75);\n",			buildSQL("alter_column_type DLFolder userName VARCHAR(75);"));	}
@Test  public void testCreateFactSetMissingConfidence() throws Exception {    CreateFactRequest request = createRequest()            .setConfidence(null);    mockCreateNewFact();    delegate.handle(request);    verify(factCreateHandler).saveFact(argThat(e -> Objects.equals(resolveFactType.getDefaultConfidence(), e.getConfidence())), notNull(), notNull());  }
@Test    public void testIsWidgetForValueNeededIsEqualtTo() throws Exception {        final String operator = HumanReadableConstants.INSTANCE.isEqualTo();        Assertions.assertThat(testedSelector.isWidgetForValueNeeded(operator)).isTrue();    }
@Test(expected = ImmutableViolationException.class)  public void testSaveFactTwiceThrowsException() {    FactEntity entity = createFact(createAndSaveFactType().getId());    getFactManager().saveFact(entity);    getFactManager().saveFact(entity);  }
@Test    public void testOnExpressionEditorButtonClick() {        final String factType = "factType";        final FactPattern factPattern = mock(FactPattern.class);        final HasConstraints hasConstraints = mock(HasConstraints.class);        final FormStylePopup popup = mock(FormStylePopup.class);        final SingleFieldConstraintEBLeftSide constraint = mock(SingleFieldConstraintEBLeftSide.class);        final RuleModeller ruleModeller = mock(RuleModeller.class);        final ClickEvent clickEvent = mock(ClickEvent.class);        doReturn(factType).when(factPattern).getFactType();        doReturn(constraint).when(popupCreator).makeSingleFieldConstraintEBLeftSide(factType);        doReturn(ruleModeller).when(popupCreator).getModeller();        doReturn(factPattern).when(popupCreator).getPattern();        final ClickHandler clickHandler = popupCreator.onExpressionEditorButtonClick(hasConstraints, popup);        clickHandler.onClick(clickEvent);        verify(hasConstraints).addConstraint(constraint);        verify(ruleModeller).refreshWidget();        verify(popup).hide();    }
@Test    public void exportData() throws IOException {        int numberOfRow = 2;        int numberOfColumn = 1;        Simulation simulation = createDummySimulation(numberOfColumn, numberOfRow);        List<String> exportData = Arrays.asList(scenarioCsvImportExport.exportData(simulation).split("\r\n"));        assertEquals(numberOfRow + HEADER_SIZE, exportData.size());        assertEquals("1,My scenario 1,value_1_0", exportData.get(4));    }
@Test(description = "Handle request with device type URI with Encoded Pem",            dependsOnMethods = "testHandleSuccessRequestMutualAuthHeader")    public void testHandleSuccessRequestEncodedPem() throws Exception {        HashMap<String, String> transportHeaders = new HashMap<>();        transportHeaders.put(AuthConstants.ENCODED_PEM, "encoded pem");        setMockClient();        this.mockClient.setResponse(getAccessTokenReponse());        this.mockClient.setResponse(getValidationResponse());        MessageContext messageContext = createSynapseMessageContext("<empty/>", this.synapseConfiguration,                transportHeaders, "https://test.com/testservice/api/testdevice");        boolean response = this.handler.handleRequest(messageContext);        Assert.assertTrue(response);        this.mockClient.reset();    }
@Test    public void getScenarioSimulationDocksHandler() {        assertEquals(scenarioSimulationBusinessCentralDocksHandlerMock,                     scenarioSimulationEditorBusinessClientWrapper.getScenarioSimulationDocksHandler());    }
@Test	public void testGetGroupId() {		GroupUrlTitleInfoItemIdentifier groupUrlTitleInfoItemIdentifier =			new GroupUrlTitleInfoItemIdentifier(12345L, "urlTitle");		Assert.assertEquals(			12345L, groupUrlTitleInfoItemIdentifier.getGroupId());	}
@Test  public void testMutationOutOfOrder() throws Exception {    List<Mutation> unorderedMutations = Lists.newArrayList();    when(firstMetadata.getId()).thenReturn(2L);    when(secondMetadata.getId()).thenReturn(1L);    MutationOrderValidator validator = new MutationOrderValidator(unorderedMutations::add);    validator.validate(firstMutation);    validator.validate(secondMutation);    assertEquals(Arrays.asList(secondMutation), unorderedMutations);  }
@Test	public void testInsert() throws Exception {		DDMContent ddmContent = mock(DDMContent.class);		when(			_ddmContentLocalService.addContent(				Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(),				Matchers.anyString(), Matchers.anyString(),				Matchers.any(ServiceContext.class))		).thenReturn(			ddmContent		);		when(			ddmContent.getPrimaryKey()		).thenReturn(			1L		);		DDMFormValues ddmFormValues = mock(DDMFormValues.class);		DDMFormValuesSerializerSerializeResponse			ddmFormValuesSerializerSerializeResponse =				DDMFormValuesSerializerSerializeResponse.Builder.newBuilder(					"{}"				).build();		when(			_ddmFormValuesSerializer.serialize(				Mockito.any(DDMFormValuesSerializerSerializeRequest.class))		).thenReturn(			ddmFormValuesSerializerSerializeResponse		);		DDMStorageAdapterSaveRequest.Builder builder =			DDMStorageAdapterSaveRequest.Builder.newBuilder(				1, 1, ddmFormValues);		DDMStorageAdapterSaveRequest ddmStorageAdapterSaveRequest =			builder.build();		DDMStorageAdapterSaveResponse ddmStorageAdapterSaveResponse =			_jsonDDMStorageAdapter.save(ddmStorageAdapterSaveRequest);		Assert.assertEquals(1L, ddmStorageAdapterSaveResponse.getPrimaryKey());		Mockito.verify(			_ddmFormValuesSerializer, Mockito.times(1)		).serialize(			Mockito.any(DDMFormValuesSerializerSerializeRequest.class)		);		Mockito.verify(			_ddmContentLocalService, Mockito.times(1)		).addContent(			Matchers.anyLong(), Matchers.anyLong(), Matchers.anyString(),			Matchers.anyString(), Matchers.anyString(),			Matchers.any(ServiceContext.class)		);	}
@Test  public void testRoleShorterThanRequest() throws Exception {    assertTrue(ROLE_SERVER_SERVER1.implies(REQUEST_SERVER1_DB1));    assertTrue(ROLE_SERVER_SERVER1.implies(REQUEST_SERVER1_DB2));    assertFalse(ROLE_SERVER_SERVER1.implies(REQUEST_SERVER2_DB1));    assertFalse(ROLE_SERVER_SERVER1.implies(REQUEST_SERVER2_DB2));    assertTrue(ROLE_SERVER_ALL_DB_ALL.implies(REQUEST_SERVER1));    assertFalse(ROLE_SERVER_ALL_DB_DB1.implies(REQUEST_SERVER1));  }
@Test    public void rstStreamNoExtraPayload() {        Http2Frame frame = TestMessages.RST_STREAM_NO_EXTRA_PAYLOAD_FRAME;        assertArrayEquals(TestMessages.RST_STREAM_NO_EXTRA_PAYLOAD_BUFFER, toByteArray(encoder.encode(frame, null)));    }
@Test  public void testConvertRequestFilterOnOrganization() throws Exception {    UUID id = UUID.randomUUID();    UUID idForName = UUID.randomUUID();    when(byNameResolver.resolveOrganization(notNull())).thenReturn(SetUtils.set(id, idForName));    FactSearchCriteria criteria = converter.apply(new SearchObjectFactsRequest()            .addOrganization(id.toString())            .addOrganization("name")    );    assertEquals(SetUtils.set(id, idForName), criteria.getOrganizationID());    verify(byNameResolver).resolveOrganization(SetUtils.set(id.toString(), "name"));  }
@Test	public void testSemicolonInContent() throws Exception {		CSSRTLConverter cssRTLConverter = new CSSRTLConverter();		Assert.assertEquals(			"b.broke:before{content:\"&darr;\"}",			cssRTLConverter.process("b.broke:before { content:\"&darr;\"}"));	}
@Test  public void testTraverseWithSearchAndParams() throws Exception {    UUID objectId1 = UUID.randomUUID();    UUID objectId2 = UUID.randomUUID();    String query = "g.outE()";    Long after = 2L;    Long before = 1L;    TraverseGraphByObjectSearchRequest request = new TraverseGraphByObjectSearchRequest()            .setSearch(new SearchObjectRequest())            .setTraverse(new TraverseGraphRequest()                    .setQuery(query)                    .setIncludeRetracted(true)                    .setAfter(after)                    .setBefore(before)                    .setLimit(10)            );    Iterator<ObjectRecord> searchResult = set(new ObjectRecord().setId(objectId1), new ObjectRecord().setId(objectId2)).iterator();    when(objectFactDao.searchObjects(any())).thenReturn(ResultContainer.<ObjectRecord>builder().setValues(searchResult).build());    delegate.handle(request);    verify(traverseGraphHandler).traverse(            eq(set(objectId1, objectId2)),            eq(query),            argThat(traverseParams -> {              assertTrue(traverseParams.isIncludeRetracted());              assertEquals(after, traverseParams.getAfterTimestamp());              assertEquals(before, traverseParams.getBeforeTimestamp());              assertEquals(10, traverseParams.getLimit());              return true;            }));  }
@Test	public void testEmptySearchResultsWithUnmatchedTermCollector()		throws Exception {		Mockito.when(			_facetCollector.getTermCollectors()		).thenReturn(			Arrays.asList(new DefaultTermCollector("0", 200))		);		FolderSearchFacetDisplayContext folderSearchFacetDisplayContext =			createDisplayContext(null);		Assert.assertTrue(folderSearchFacetDisplayContext.isRenderNothing());	}
@Test	public void testPutInjectedData() {		SoyContextImpl soyContextImpl = new SoyContextImpl();		soyContextImpl.putInjectedData("injectedKey", "injectedValue");		Map<String, Object> injectedData =			(Map<String, Object>)soyContextImpl.get(				SoyTemplateConstants.INJECTED_DATA);		Assert.assertEquals(injectedData.toString(), 1, injectedData.size());		Assert.assertEquals("injectedValue", injectedData.get("injectedKey"));	}
@Test	public void testReadBoolean() {		byte[] bytes = new byte[_COUNT];		for (int i = 0; i < _COUNT; i++) {			bytes[i] = _random.nextBoolean() ? (byte)1 : (byte)0;		}		ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);		Deserializer deserializer = new Deserializer(byteBuffer);		for (int i = 0; i < _COUNT; i++) {			if (bytes[i] == 0) {				Assert.assertFalse(deserializer.readBoolean());			}			else {				Assert.assertTrue(deserializer.readBoolean());			}		}	}
@Test(dataProvider = "matchObjects")    public void test(String string, String pattern, boolean expected) {        assertEquals(WildcardMatching.isMatch(string, pattern), expected, String.format("s: %s, p: %s", string, pattern));    }
@Test    public void goAwayNoAdditionalData() {        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.GOAWAY_NO_DATA_BUFFER);        Http2GoAwayFrame frame = (Http2GoAwayFrame) decoder.decode(buffer, context);        assertNotNull(frame);        assertEquals(8, frame.getLength());        assertEquals(7, frame.getType());        assertEquals(0, frame.getFlags());        assertEquals(1, frame.getStreamID());        assertEquals(256, frame.getLastStreamID());        assertEquals(0x010203, frame.getErrorCode());    }
@Test    public void manageMap_NotRuleNotSimpleType() {        manageMap(FULL_CLASS_NAME, DMN, EXPECTED_MAP_FOR_EXPANDABLE_TYPE);    }
@Test  public void testSaveMetaFactBindingReturnsNullOnNullInput() {    assertNull(getFactManager().saveMetaFactBinding(null));  }
@Test    public void test4_3FitInside16_9() throws Exception {        RectangleF r169 = new RectangleF(0,0,720 * AspectHelper.ar_16_9, 720);        RectangleF r43 = AspectHelper.fitInside(AspectHelper.RectF_4_3, r169);        System.out.println(r169);        System.out.println(r43);        // 4/3 inside of 16/9 (same height)        // should be 160,0,960,720        Rectangle r = r43.asIntRect();        assertEquals(160, r.x);        assertEquals(0, r.y);        assertEquals(960, r.width);        assertEquals(720, r.height);        assertEquals(r.height, (int)r169.height);    }
@Test  public void testFromEntityWithoutBinding() {    FactRecord record = converter.fromEntity(new FactEntity());    assertNull(record.getSourceObject());    assertNull(record.getDestinationObject());  }
@Test    public void getModelSuccessCallbackMethod() {        scenarioGridWidgetSpy.selectAndFocus();        presenterSpy.getModelSuccessCallbackMethod(dataManagementStrategyMock, modelLocal);        verify(presenterSpy, times(1)).populateRightDocks(TestToolsPresenter.IDENTIFIER);        verify(presenterSpy, times(1)).populateRightDocks(SettingsPresenter.IDENTIFIER);        verify(scenarioGridWidgetSpy, times(1)).setContent(eq(content.getModel().getSimulation()), eq(scenarioSimulationContextLocal.getSettings().getType()));        verify(scenarioSimulationEditorWrapperMock, times(1)).addBackgroundPage(eq(backgroundGridWidgetSpy));        assertEquals(scenarioSimulationContextLocal.getStatus().getSimulation(), content.getModel().getSimulation());        assertEquals(scenarioSimulationContextLocal.getStatus().getBackground(), content.getModel().getBackground());        verify(presenterSpy, times(1)).getValidateCommand();        verify(scenarioGridWidgetSpy, atLeastOnce()).selectAndFocus();    }
@Test    public void test_cancelPoint() {        rec.setTotal(BigDecimal.valueOf(200L).setScale(DecimalUtils.SCALE_2))                .setAvailable(BigDecimal.valueOf(80L).setScale(DecimalUtils.SCALE_2))                .setCancelled(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2))                .setFrozen(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2))                .setTotalCost(BigDecimal.valueOf(100L).setScale(DecimalUtils.SCALE_2))                .setFrozenCost(BigDecimal.valueOf(5L).setScale(DecimalUtils.SCALE_2));        PointRecCalcResult result = calculator.cancelPoint(rec, BigDecimal.valueOf(20).setScale(DecimalUtils.SCALE_2));        log.info("result = {}", result);        Assertions.assertEquals(rec.getId(), result.getRec4Update().getId());        Assertions.assertEquals(BigDecimal.valueOf(60L).setScale(DecimalUtils.SCALE_2),   // 80 - 20                rec.getAvailable());        Assertions.assertEquals(BigDecimal.valueOf(60L).setScale(DecimalUtils.SCALE_2),   // 80 - 20                result.getRec4Update().getAvailable());        Assertions.assertEquals(BigDecimal.valueOf(30L).setScale(DecimalUtils.SCALE_2), // 10 + 20                rec.getCancelled());        Assertions.assertEquals(BigDecimal.valueOf(30L).setScale(DecimalUtils.SCALE_2), result.getRec4Update().getCancelled());        Assertions.assertEquals(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2), rec.getUsedCost());        Assertions.assertEquals(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2), result.getRec4Update().getUsedCost());        Assertions.assertEquals(BigDecimal.valueOf(10L).setScale(DecimalUtils.SCALE_2), result.getDeltaCost());    }
@Test    public void testCloneWithUnsupportedClass() {        RuleModel model = new RuleModel();        model.addLhsItem( new TestFactPattern() );        RuleModelCloneVisitor visitor = new RuleModelCloneVisitor();        thrown.expect( RuntimeException.class );        thrown.expectMessage( TestFactPattern.class.getSimpleName() );        visitor.visitRuleModel( model );    }
@Test	public void testVisitBinaryExpressionOperationWithNotEqualOperation() {		Map<String, EntityField> entityFieldsMap =			_entityModel.getEntityFieldsMap();		EntityField entityField = entityFieldsMap.get("title");		String value = "title1";		BooleanFilter booleanFilter =			(BooleanFilter)				_expressionVisitorImpl.visitBinaryExpressionOperation(					BinaryExpression.Operation.NE, entityField, value);		Assert.assertTrue(booleanFilter.hasClauses());		List<BooleanClause<Filter>> booleanClauses =			booleanFilter.getMustNotBooleanClauses();		Assert.assertEquals(			booleanClauses.toString(), 1, booleanClauses.size());		BooleanClause<Filter> queryBooleanClause = booleanClauses.get(0);		Assert.assertEquals(			BooleanClauseOccur.MUST_NOT,			queryBooleanClause.getBooleanClauseOccur());		TermFilter termFilter = (TermFilter)queryBooleanClause.getClause();		Assert.assertEquals(entityField.getName(), termFilter.getField());		Assert.assertEquals(value, termFilter.getValue());	}
@Test	public void testWriteByte() throws IOException {		Assert.assertEquals(			"X\"1\"", ConfigurationHandler.write(Byte.valueOf("1")));	}
@Test	public void testMasterTokenAcquired() {		masterTokenAcquired();		assertReplicasChanged();	}
@Test    public void getContextMenuMouseDownHandler() {        final MouseDownHandler handler = contextMenuSupport.getContextMenuMouseDownHandler();        assertNotNull(handler);    }
@Test    public final void tc_getProperty_CombindValues() throws IOException    {        //assertEquals(  "Wert 1", myProperties.getProperty( "Value_1" ) );        //assertEquals(  "Wert 2", myProperties.getProperty( "Value_2" ) );                assertEquals(  "Wert 1", myProperties.getProperty( "CombineValues.One_Value" ) );        assertEquals(  "Wert 1; Wert 2", myProperties.getProperty( "CombineValues.Two_Values" ) );    }
@Test(expected = DDMFormFieldValueValidationException.class)	public void testValidationWithEmptyRequiredDateShouldThrowException()		throws Exception {		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		DDMFormField ddmFormField = DDMFormTestUtil.createDDMFormField(			"Date", "Date", "date", "string", false, false, true);		ddmForm.addDDMFormField(ddmFormField);		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"Date", new UnlocalizedValue(""));		_dateDDMFormFieldValueValidator.validate(			ddmFormField, ddmFormFieldValue.getValue());	}
@Test    public void appendRows() {        scenarioGridSpy.appendRows(simulation);        verify(scenarioGridSpy, times(1)).appendRow(anyInt(), isA(Scenario.class));    }
@Test    public void refreshContent() {        scenarioGridWidget.refreshContent(simulationMock);        verify(scenarioGridModelMock, times(1)).bindContent(eq(simulationMock));        verify(scenarioGridModelMock, times(1)).refreshErrors();        verify(scenarioGridWidget, times(1)).onResize();    }
@Test	public void testGetSpellCheckSuggestionsNullByDefault() {		SuggestionsPortletDisplayContext suggestionsPortletDisplayContext =			_displayBuilder.build();		Assert.assertNull(			suggestionsPortletDisplayContext.getSpellCheckSuggestion());	}
@Test    public void warningShownOnInvalidFileName() {        view.setValidBaseFileName( false );        verify( view.baseFileNameHelp ).setVisible( true );        verify( view.baseFileNameContainer ).addStyleName( ValidationState.ERROR.getCssName() );    }
@Test    public void testCanAcceptOtherwiseNotEqual() throws Exception {        column.setConstraintValueType(BaseSingleFieldConstraint.TYPE_LITERAL);        column.setOperator("!=");        assertTrue(ColumnUtilities.canAcceptOtherwiseValues(column));    }
@Test  public void testGetFactCommentsCallsDelegate() throws Exception {    FactGetCommentsDelegate delegate = mock(FactGetCommentsDelegate.class);    when(delegateProvider.get(FactGetCommentsDelegate.class)).thenReturn(delegate);    GetFactCommentsRequest request = new GetFactCommentsRequest();    service.getFactComments(RequestHeader.builder().build(), request);    verify(delegate).handle(request);  }
@Test(expected = InvalidArgumentException.class)  public void testResolveOriginNonProvidedFetchesDeletedOrigin() throws Exception {    UUID currentUserID = UUID.randomUUID();    OriginEntity origin = new OriginEntity()            .setId(currentUserID)            .addFlag(OriginEntity.Flag.Deleted);    when(securityContext.getCurrentUserID()).thenReturn(currentUserID);    when(originManager.getOrigin(currentUserID)).thenReturn(origin);    handler.resolveOrigin(null);  }
@Test    public void testDefaultStreamingStrategyRequiresStreaming() {        DefaultStreamingStrategy defaultStreamingStrategy = new DefaultStreamingStrategy(1);        Segment smallSegment = new SegmentImpl(AWSXRay.getGlobalRecorder(), "small");        Assert.assertFalse(defaultStreamingStrategy.requiresStreaming(smallSegment));        Segment bigSegment = new SegmentImpl(AWSXRay.getGlobalRecorder(), "big");        bigSegment.addSubsegment(new SubsegmentImpl(AWSXRay.getGlobalRecorder(), "big_child", bigSegment));        bigSegment.addSubsegment(new SubsegmentImpl(AWSXRay.getGlobalRecorder(), "big_child", bigSegment));        Assert.assertTrue(defaultStreamingStrategy.requiresStreaming(bigSegment));    }
@Test  public void testShorterThanRequest() throws Exception {    //topic    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_TOPIC1_ALL));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_TOPIC1_READ));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_TOPIC1_WRITE));    assertFalse(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_READ));    assertTrue(KAFKA_HOST1_READ.implies(KAFKA_HOST1_TOPIC1_READ));    assertTrue(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_TOPIC1_WRITE));    //cluster    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_CLUSTER1_ALL));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_CLUSTER1_READ));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_CLUSTER1_WRITE));    assertTrue(KAFKA_HOST1_READ.implies(KAFKA_HOST1_CLUSTER1_READ));    assertTrue(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_CLUSTER1_WRITE));    //consumer group    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_GROUP1_ALL));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_GROUP1_READ));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_GROUP1_WRITE));    assertTrue(KAFKA_HOST1_READ.implies(KAFKA_HOST1_GROUP1_READ));    assertTrue(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_GROUP1_WRITE));  }
@Test    public void init() throws Exception {        service.init();        verify(saveAndRenameServiceMock).init(service);    }
@Test    public void testSubsegmentFunctionExceptionWhenMissingContext() {        IllegalStateException expectedException = new IllegalStateException("To be thrown by function");        Function<Subsegment, Void> function = (subsegment) -> {            throw expectedException;        };        AWSXRayRecorder recorder = AWSXRayRecorderBuilder.standard()                                                         .withContextMissingStrategy(new IgnoreErrorContextMissingStrategy())                                                         .build();        assertThatThrownBy(() -> recorder.createSubsegment("test", function)).isEqualTo(expectedException);    }
@Test	public void testCreateIndicesWithEmptyConfiguration() throws Exception {		createIndices();	}
@Test    public void parseArcByCenterPoint()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        ArcByCenterPoint arc = (ArcByCenterPoint) getParser().parseCurveSegment( getReader( "ArcByCenterPoint.gml" ),                                                                                 CRSManager.getCRSRef( "EPSG:4326" ) );        Assert.assertEquals( 2, arc.getMidPoint().getCoordinateDimension() );        Assert.assertEquals( 47.0, arc.getMidPoint().get0() );        Assert.assertEquals( 11.0, arc.getMidPoint().get1() );        Assert.assertEquals( 1.0, arc.getRadius( null ).getValueAsDouble() );        Assert.assertEquals( "whatever#metres", arc.getRadius( null ).getUomUri() );        Assert.assertEquals( 180.0, arc.getStartAngle().getValueAsDouble() );        Assert.assertEquals( "whatever#degrees", arc.getStartAngle().getUomUri() );        Assert.assertEquals( 360.0, arc.getEndAngle().getValueAsDouble() );        Assert.assertEquals( "whatever#degrees", arc.getEndAngle().getUomUri() );    }
@Test  public void testRoleShorterThanRequest() throws Exception {    Privilege indexer1 = create(new KeyValue("indexer", "ind1"));    Privilege read =      create(new KeyValue("indexer", "ind1"), new KeyValue("action", "read"));    Privilege write =      create(new KeyValue("indexer", "ind1"), new KeyValue("action", "write"));    Privilege all =      create(new KeyValue("indexer", "ind1"), new KeyValue("action", ALL));    assertTrue(indexer1.implies(read));    assertTrue(indexer1.implies(write));    assertTrue(indexer1.implies(all));    assertFalse(read.implies(indexer1));    assertFalse(write.implies(indexer1));    assertTrue(all.implies(indexer1));  }
@Test  public void testHasPermissionWithoutAccessToFunction() throws Exception {    String content = "" +            "subject.1.name = subject\n" +            "organization.1.name = organization\n" +            "subject.1.permission.1 = function" +            "";    setup(content);    assertFalse(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("no_access")));    assertFalse(accessController.hasPermission(createCredentials(1), () -> "no_access"));  }
@Test(expected = AMRuntimeException.IOException.class)	public void testProcessIOExceptionInStorage() throws Exception {		Mockito.when(			_amImageValidator.isProcessingSupported(_fileVersion)		).thenReturn(			true		);		AMImageConfigurationEntry amImageConfigurationEntry =			new AMImageConfigurationEntryImpl(				RandomTestUtil.randomString(), RandomTestUtil.randomString(),				Collections.emptyMap());		Mockito.when(			_amImageConfigurationHelper.getAMImageConfigurationEntries(				Mockito.anyLong())		).thenReturn(			Collections.singleton(amImageConfigurationEntry)		);		Mockito.when(			_amImageConfigurationHelper.getAMImageConfigurationEntry(				Mockito.anyLong(), Mockito.anyString())		).thenReturn(			Optional.of(amImageConfigurationEntry)		);		Mockito.when(			_amImageScalerTracker.getAMImageScaler(Mockito.anyString())		).thenReturn(			_amImageScaler		);		Mockito.when(			_amImageScaler.scaleImage(_fileVersion, amImageConfigurationEntry)		).thenReturn(			new AMImageScaledImageImpl(new byte[100], 150, 200)		);		Mockito.doThrow(			AMRuntimeException.IOException.class		).when(			_amImageEntryLocalService		).addAMImageEntry(			Mockito.any(AMImageConfigurationEntry.class),			Mockito.any(FileVersion.class), Mockito.eq(150), Mockito.eq(200),			Mockito.any(InputStream.class), Mockito.eq(100L)		);		_amImageProcessorImpl.process(_fileVersion);	}
@Test    public void expandAuthoringDock() {        final UberfireDock dockToOpen = mock(UberfireDock.class);        kogitoEditorDockSpy.expandAuthoringDock(dockToOpen);        verify(uberfireDocks, times(1)).show(eq(UberfireDockPosition.EAST), eq(AUTHORING_PERSPECTIVE));        verify(uberfireDocks, times(1)).open(eq(dockToOpen));    }
@SuppressWarnings("unchecked")	@Test	public void infoWhenAnotherIsLeader() {		given(this.mockLeadershipController.getLocalLeader()).willReturn(Optional.of(this.mockLeader));		given(this.mockLeader.getRole()).willReturn("testRole");		given(this.mockLeader.getId()).willReturn("id");		Info.Builder builder = new Info.Builder();		leaderInfoContributor.contribute(builder);		Map<String, Object> details = (Map<String, Object>) builder.build().get("leaderElection");		assertThat(details).containsEntry("isLeader", false);		assertThat(details).containsEntry("leaderId", "id");		assertThat(details).containsEntry("role", "testRole");	}
@Test	public void testLoadCustomWebXML() throws Exception {		WebXMLDefinition webXMLDefinition = loadWebXMLDefinition(			"dependencies/custom-web.xml");		testWebXMLDefinition(webXMLDefinition, 1, 1, 1);	}
@Test(description = "This method tests the updateConfiguration method under negative conditions.",            dependsOnMethods = {"testGetConfigurationWithSuccessConditions"})    public void testUpdateConfigurationUnderNegativeConditions() throws ConfigurationManagementException {        Mockito.reset(platformConfigurationManagementService);        PowerMockito.stub(PowerMockito.method(DeviceMgtAPIUtils.class, "getPlatformConfigurationManagementService"))                .toReturn(platformConfigurationManagementService);        Mockito.doThrow(new ConfigurationManagementException()).when(platformConfigurationManagementService)                .saveConfiguration(Mockito.any(), Mockito.any());        Response response = configurationManagementService.updateConfiguration(platformConfiguration);        Assert.assertEquals(response.getStatus(), Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(),                "updateConfiguration request succeeded with in-valid parameters");    }
@Test    public void retrieveFactModelTuple() {        String factType = "factType";        ModelField[] modelFields = new ModelField[1];        when(oracleMock.getFieldCompletions(eq(factType))).thenReturn(modelFields);        List<String> dataObjectsType = Arrays.asList(factType);        SortedMap<String, FactModelTree> dataObjectsFieldMap = new TreeMap<>();        Map<String, String> superTypesMap = Collections.emptyMap();        List<String> javaSimpleType = new ArrayList<>();        kogitoDMODataManagementStrategySpy.manageDataObjects(dataObjectsType, superTypesMap, testToolsPresenterMock, 1, dataObjectsFieldMap, scenarioSimulationContextMock, javaSimpleType, gridWidgetMock);        verify(oracleMock, times(1)).getFieldCompletions(eq(factType));        verify(kogitoDMODataManagementStrategySpy, times(1)).getFactModelTree(eq(factType), eq(superTypesMap), eq(modelFields));        verify(kogitoDMODataManagementStrategySpy, times(1)).aggregatorCallbackMethod(eq(testToolsPresenterMock), eq(1), eq(dataObjectsFieldMap), eq(scenarioSimulationContextMock), eq(factModelTreeMock), eq(javaSimpleType), eq(gridWidgetMock));    }
@Test public void testOnViewCreatedWithBackgroundResource() {		// Arrange:		final BaseFragment fragment = new TestFragmentWithContentViewWithBackgroundResource();		final View mockView = mock(FrameLayout.class);		// Act:		fragment.onViewCreated(mockView, null);		// Assert:		verify(mockView).setBackgroundResource(TestFragmentWithContentViewWithBackgroundResource.BACKGROUND_RESOURCE);		verifyNoMoreInteractions(mockView);	}
@Test  public void testToJsonFormatLog() throws Throwable {    DBAuditMetadataLogEntity amle = new DBAuditMetadataLogEntity("serviceName", "userName",        "impersonator", "ipAddress", "operation", "eventTime", "operationText", "allowed",        "objectType", "component", "databaseName", "tableName", "columnName", "resourcePath");    String jsonAuditLog = amle.toJsonFormatLog();    ContainerNode rootNode = AuditMetadataLogEntity.parse(jsonAuditLog);    assertEntryEquals(rootNode, Constants.LOG_FIELD_SERVICE_NAME, "serviceName");    assertEntryEquals(rootNode, Constants.LOG_FIELD_USER_NAME, "userName");    assertEntryEquals(rootNode, Constants.LOG_FIELD_IMPERSONATOR,        "impersonator");    assertEntryEquals(rootNode, Constants.LOG_FIELD_IP_ADDRESS, "ipAddress");    assertEntryEquals(rootNode, Constants.LOG_FIELD_OPERATION, "operation");    assertEntryEquals(rootNode, Constants.LOG_FIELD_EVENT_TIME, "eventTime");    assertEntryEquals(rootNode, Constants.LOG_FIELD_OPERATION_TEXT,        "operationText");    assertEntryEquals(rootNode, Constants.LOG_FIELD_ALLOWED, "allowed");    assertEntryEquals(rootNode, Constants.LOG_FIELD_DATABASE_NAME,        "databaseName");    assertEntryEquals(rootNode, Constants.LOG_FIELD_TABLE_NAME, "tableName");    assertEntryEquals(rootNode, Constants.LOG_FIELD_COLUMN_NAME, "columnName");    assertEntryEquals(rootNode, Constants.LOG_FIELD_RESOURCE_PATH,        "resourcePath");    assertEntryEquals(rootNode, Constants.LOG_FIELD_OBJECT_TYPE, "objectType");  }
@Test    public void testSetupPatternWrapper() throws Exception {        final Pattern52 pattern52 = new Pattern52() {{            setFactType("FactType");            setBoundName("BoundName");            setEntryPointName("EntryPointName");            setNegated(true);        }};        when(plugin.getEditingPattern()).thenReturn(pattern52);        plugin.setupPatternWrapper();        final PatternWrapper patternWrapper = plugin.patternWrapper();        assertEquals(patternWrapper.getFactType(),                     "FactType");        assertEquals(patternWrapper.getBoundName(),                     "BoundName");        assertEquals(patternWrapper.getEntryPointName(),                     "EntryPointName");        assertEquals(patternWrapper.isNegated(),                     true);    }
@Test  public void testGrantFactAccessToPublicFact() throws Exception {    GrantFactAccessRequest request = createGrantAccessRequest();    when(factRequestResolver.resolveFact(request.getFact())).thenReturn(new FactRecord().setAccessMode(FactRecord.AccessMode.Public));    InvalidArgumentException ex = assertThrows(InvalidArgumentException.class, () -> delegate.handle(request));    assertEquals(set("fact.is.public"), set(ex.getValidationErrors(), InvalidArgumentException.ValidationError::getMessageTemplate));  }
@Test    //https://issues.jboss.org/browse/RHBPMS-856    public void correctMergedConditionColumnHeaders() {        final ConversionResult result = new ConversionResult();        final List<DataListener> listeners = new ArrayList<>();        addModelField("org.test.Vehicle",                      "this",                      "org.test.Vehicle",                      DataType.TYPE_THIS);        addModelField("org.test.Vehicle",                      "subRTO",                      String.class.getName(),                      DataType.TYPE_STRING);        addModelField("org.test.Vehicle",                      "manufacturer",                      String.class.getName(),                      DataType.TYPE_STRING);        addModelField("org.test.Vehicle",                      "model",                      String.class.getName(),                      DataType.TYPE_STRING);        addModelField("org.test.Vehicle",                      "vehicleSegment",                      String.class.getName(),                      DataType.TYPE_STRING);        addModelField("org.test.Vehicle",                      "vehicleAge",                      Integer.class.getName(),                      DataType.TYPE_NUMERIC_INTEGER);        addModelField("org.test.Vehicle",                      "discount",                      Double.class.getName(),                      DataType.TYPE_NUMERIC_DOUBLE);        final GuidedDecisionTableGeneratorListener listener = new GuidedDecisionTableGeneratorListener(result,                                                                                                       dmo);        listeners.add(listener);        //Convert        final ExcelParser parser = new ExcelParser(listeners);        final InputStream is = this.getClass().getResourceAsStream("RHBPMS-856 (Merged condition columns).xls");        try {            parser.parseFile(is);        } finally {            try {                is.close();            } catch (IOException ioe) {                fail(ioe.getMessage());            }        }        //Check conversion results        assertEquals(0,                     result.getMessages().size());        //Check basics        final List<GuidedDecisionTable52> dtables = listener.getGuidedDecisionTables();        assertNotNull(dtables);        assertEquals(1,                     dtables.size());        GuidedDecisionTable52 dtable = dtables.get(0);        assertEquals("VehiclePremiumDiscount",                     dtable.getTableName());        assertEquals(GuidedDecisionTable52.TableFormat.EXTENDED_ENTRY,                     dtable.getTableFormat());        //Check expanded columns        List<BaseColumn> columns = dtable.getExpandedColumns();        assertNotNull(columns);        assertEquals(10,                     columns.size());        assertTrue(columns.get(0) instanceof RowNumberCol52);        assertTrue(columns.get(1) instanceof RuleNameColumn);        assertTrue(columns.get(2) instanceof DescriptionCol52);        assertTrue(columns.get(3) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(4) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(5) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(6) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(7) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(8) instanceof BRLConditionVariableColumn);        assertTrue(columns.get(9) instanceof BRLActionVariableColumn);        //Check individual condition columns        assertEquals(1,                     dtable.getConditions().size());        assertTrue(dtable.getConditions().get(0) instanceof BRLConditionColumn);        BRLConditionColumn conditionCol0 = ((BRLConditionColumn) dtable.getConditions().get(0));        assertEquals("Converted from ['RTO', 'Manufacturer', 'Model', 'Segment', 'Age Min', 'Age Max']",                     conditionCol0.getHeader());        assertEquals(6,                     conditionCol0.getChildColumns().size());        List<IPattern> conditionCol0definition = conditionCol0.getDefinition();        assertEquals(1,                     conditionCol0definition.size());        assertTrue(conditionCol0definition.get(0) instanceof FactPattern);        FactPattern conditionCol0fp = (FactPattern) conditionCol0definition.get(0);        assertEquals("Vehicle",                     conditionCol0fp.getFactType());        assertEquals(6,                     conditionCol0fp.getNumberOfConstraints());        //Field Constraint 1        assertTrue(conditionCol0fp.getConstraint(0) instanceof SingleFieldConstraint);        final SingleFieldConstraint conditionCol0fpsfc0 = (SingleFieldConstraint) conditionCol0fp.getConstraint(0);        assertEquals("subRTO",                     conditionCol0fpsfc0.getFieldName());        assertEquals("==",                     conditionCol0fpsfc0.getOperator());        assertEquals("param1",                     conditionCol0fpsfc0.getValue());        assertEquals(SingleFieldConstraint.TYPE_TEMPLATE,                     conditionCol0fpsfc0.getConstraintValueType());        assertEquals(DataType.TYPE_STRING,                     conditionCol0fpsfc0.getFieldType());        //Field Constraint 2        assertTrue(conditionCol0fp.getConstraint(1) instanceof SingleFieldConstraint);        final SingleFieldConstraint conditionCol0fpsfc1 = (SingleFieldConstraint) conditionCol0fp.getConstraint(1);        assertEquals("manufacturer",                     conditionCol0fpsfc1.getFieldName());        assertEquals("==",                     conditionCol0fpsfc1.getOperator());        assertEquals("param2",                     conditionCol0fpsfc1.getValue());        assertEquals(SingleFieldConstraint.TYPE_TEMPLATE,                     conditionCol0fpsfc1.getConstraintValueType());        assertEquals(DataType.TYPE_STRING,                     conditionCol0fpsfc1.getFieldType());        //Field Constraint 3        assertTrue(conditionCol0fp.getConstraint(2) instanceof SingleFieldConstraint);        final SingleFieldConstraint conditionCol0fpsfc2 = (SingleFieldConstraint) conditionCol0fp.getConstraint(2);        assertEquals("model",                     conditionCol0fpsfc2.getFieldName());        assertEquals("==",                     conditionCol0fpsfc2.getOperator());        assertEquals("param3",                     conditionCol0fpsfc2.getValue());        assertEquals(SingleFieldConstraint.TYPE_TEMPLATE,                     conditionCol0fpsfc2.getConstraintValueType());        assertEquals(DataType.TYPE_STRING,                     conditionCol0fpsfc2.getFieldType());        //Field Constraint 4        assertTrue(conditionCol0fp.getConstraint(3) instanceof SingleFieldConstraint);        final SingleFieldConstraint conditionCol0fpsfc3 = (SingleFieldConstraint) conditionCol0fp.getConstraint(3);        assertEquals("vehicleSegment",                     conditionCol0fpsfc3.getFieldName());        assertEquals("==",                     conditionCol0fpsfc3.getOperator());        assertEquals("param4",                     conditionCol0fpsfc3.getValue());        assertEquals(SingleFieldConstraint.TYPE_TEMPLATE,                     conditionCol0fpsfc3.getConstraintValueType());        assertEquals(DataType.TYPE_STRING,                     conditionCol0fpsfc3.getFieldType());        //Field Constraint 5        assertTrue(conditionCol0fp.getConstraint(4) instanceof SingleFieldConstraint);        final SingleFieldConstraint conditionCol0fpsfc4 = (SingleFieldConstraint) conditionCol0fp.getConstraint(4);        assertEquals("vehicleAge",                     conditionCol0fpsfc4.getFieldName());        assertEquals("<=",                     conditionCol0fpsfc4.getOperator());        assertEquals("param5",                     conditionCol0fpsfc4.getValue());        assertEquals(SingleFieldConstraint.TYPE_TEMPLATE,                     conditionCol0fpsfc4.getConstraintValueType());        assertEquals(DataType.TYPE_NUMERIC_INTEGER,                     conditionCol0fpsfc4.getFieldType());        //Field Constraint 6        assertTrue(conditionCol0fp.getConstraint(5) instanceof SingleFieldConstraint);        final SingleFieldConstraint conditionCol0fpsfc5 = (SingleFieldConstraint) conditionCol0fp.getConstraint(5);        assertEquals("vehicleAge",                     conditionCol0fpsfc5.getFieldName());        assertEquals(">",                     conditionCol0fpsfc5.getOperator());        assertEquals("param6",                     conditionCol0fpsfc5.getValue());        assertEquals(SingleFieldConstraint.TYPE_TEMPLATE,                     conditionCol0fpsfc5.getConstraintValueType());        assertEquals(DataType.TYPE_NUMERIC_INTEGER,                     conditionCol0fpsfc5.getFieldType());        //Field Constraint 1 - Variable 1        BRLConditionVariableColumn conditionCol0param0 = conditionCol0.getChildColumns().get(0);        assertEquals("param1",                     conditionCol0param0.getVarName());        assertEquals("RTO",                     conditionCol0param0.getHeader());        assertEquals(DataType.TYPE_STRING,                     conditionCol0param0.getFieldType());        assertEquals("Vehicle",                     conditionCol0param0.getFactType());        assertEquals("subRTO",                     conditionCol0param0.getFactField());        //Field Constraint 2 - Variable 2        BRLConditionVariableColumn conditionCol0param1 = conditionCol0.getChildColumns().get(1);        assertEquals("param2",                     conditionCol0param1.getVarName());        assertEquals("Manufacturer",                     conditionCol0param1.getHeader());        assertEquals(DataType.TYPE_STRING,                     conditionCol0param1.getFieldType());        assertEquals("Vehicle",                     conditionCol0param1.getFactType());        assertEquals("manufacturer",                     conditionCol0param1.getFactField());        //Field Constraint 3 - Variable 3        BRLConditionVariableColumn conditionCol0param2 = conditionCol0.getChildColumns().get(2);        assertEquals("param3",                     conditionCol0param2.getVarName());        assertEquals("Model",                     conditionCol0param2.getHeader());        assertEquals(DataType.TYPE_STRING,                     conditionCol0param2.getFieldType());        assertEquals("Vehicle",                     conditionCol0param2.getFactType());        assertEquals("model",                     conditionCol0param2.getFactField());        //Field Constraint 4 - Variable 4        BRLConditionVariableColumn conditionCol0param3 = conditionCol0.getChildColumns().get(3);        assertEquals("param4",                     conditionCol0param3.getVarName());        assertEquals("Segment",                     conditionCol0param3.getHeader());        assertEquals(DataType.TYPE_STRING,                     conditionCol0param3.getFieldType());        assertEquals("Vehicle",                     conditionCol0param3.getFactType());        assertEquals("vehicleSegment",                     conditionCol0param3.getFactField());        //Field Constraint 5 - Variable 5        BRLConditionVariableColumn conditionCol0param4 = conditionCol0.getChildColumns().get(4);        assertEquals("param5",                     conditionCol0param4.getVarName());        assertEquals("Age Min",                     conditionCol0param4.getHeader());        assertEquals(DataType.TYPE_NUMERIC_INTEGER,                     conditionCol0param4.getFieldType());        assertEquals("Vehicle",                     conditionCol0param4.getFactType());        assertEquals("vehicleAge",                     conditionCol0param4.getFactField());        //Field Constraint 6 - Variable 6        BRLConditionVariableColumn conditionCol0param5 = conditionCol0.getChildColumns().get(5);        assertEquals("param6",                     conditionCol0param5.getVarName());        assertEquals("Age Max",                     conditionCol0param5.getHeader());        assertEquals(DataType.TYPE_NUMERIC_INTEGER,                     conditionCol0param5.getFieldType());        assertEquals("Vehicle",                     conditionCol0param5.getFactType());        assertEquals("vehicleAge",                     conditionCol0param5.getFactField());        //Check individual action columns        assertEquals(1,                     dtable.getActionCols().size());        assertTrue(dtable.getActionCols().get(0) instanceof BRLActionColumn);        BRLActionColumn actionCol0 = ((BRLActionColumn) dtable.getActionCols().get(0));        assertEquals("Converted from ['Discount(%)']",                     actionCol0.getHeader());        assertEquals(1,                     actionCol0.getChildColumns().size());        List<IAction> actionCol0definition = actionCol0.getDefinition();        assertEquals(1,                     actionCol0definition.size());        assertTrue(actionCol0definition.get(0) instanceof ActionSetField);        ActionSetField actionCol0asf0 = (ActionSetField) actionCol0definition.get(0);        assertEquals("v",                     actionCol0asf0.getVariable());        ActionFieldValue[] actionCol0asf0afvs = actionCol0asf0.getFieldValues();        assertEquals(1,                     actionCol0asf0afvs.length);        ActionFieldValue actionCol0asf0afv0 = actionCol0asf0afvs[0];        assertEquals("discount",                     actionCol0asf0afv0.getField());        assertEquals("param7",                     actionCol0asf0afv0.getValue());        assertEquals(FieldNatureType.TYPE_TEMPLATE,                     actionCol0asf0afv0.getNature());        assertEquals(DataType.TYPE_NUMERIC_DOUBLE,                     actionCol0asf0afv0.getType());        //Action 1 - Variable 1        BRLActionVariableColumn actionCol0param0 = actionCol0.getChildColumns().get(0);        assertEquals("param7",                     actionCol0param0.getVarName());        assertEquals("Discount(%)",                     actionCol0param0.getHeader());        assertEquals(DataType.TYPE_NUMERIC_DOUBLE,                     actionCol0param0.getFieldType());        assertEquals("Vehicle",                     actionCol0param0.getFactType());        assertEquals("discount",                     actionCol0param0.getFactField());        //Check data        assertEquals(4,                     dtable.getData().size());        assertTrue(isRowEquivalent(new Object[]{1, "", "1", "ALL", "XYZ", "EL", "HighEnd", 1, 0, 1.75d},                                   dtable.getData().get(0)));        assertTrue(isRowEquivalent(new Object[]{2, "", "2", "ALL", "XYZ", "EL", "HighEnd", 5, 1, 2.00d},                                   dtable.getData().get(1)));        assertTrue(isRowEquivalent(new Object[]{3, "", "3", "ALL", "XYZ", "EL", "HighEnd", 7, 5, 2.00d},                                   dtable.getData().get(2)));        assertTrue(isRowEquivalent(new Object[]{4, "", "4", "ALL", "XYZ", "EL", "HighEnd", 10, 7, 1.00d},                                   dtable.getData().get(3)));    }
@Test    public void parseBSpline()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        BSpline arc = (BSpline) getParser().parseCurveSegment( getReader( "BSpline.gml" ),                                                               CRSManager.getCRSRef( "EPSG:4326" ) );        Assert.assertEquals( 4, arc.getControlPoints().size() );        Assert.assertEquals( 2.0, arc.getControlPoints().get( 0 ).get0() );        Assert.assertEquals( 1.0, arc.getControlPoints().get( 0 ).get1() );        Assert.assertEquals( -2.0, arc.getControlPoints().get( 1 ).get0() );        Assert.assertEquals( 2.0, arc.getControlPoints().get( 1 ).get1() );        Assert.assertEquals( -4.0, arc.getControlPoints().get( 2 ).get0() );        Assert.assertEquals( 3.0, arc.getControlPoints().get( 2 ).get1() );        Assert.assertEquals( -6.0, arc.getControlPoints().get( 3 ).get0() );        Assert.assertEquals( 4.0, arc.getControlPoints().get( 3 ).get1() );        Assert.assertEquals( 4, arc.getPolynomialDegree() );        Assert.assertEquals( 2, arc.getKnots().size() );        Assert.assertEquals( 1.0, arc.getKnots().get( 0 ).getValue() );        Assert.assertEquals( 4, arc.getKnots().get( 0 ).getMultiplicity() );        Assert.assertEquals( 5.0, arc.getKnots().get( 0 ).getWeight() );        Assert.assertEquals( 2.0, arc.getKnots().get( 1 ).getValue() );        Assert.assertEquals( 5, arc.getKnots().get( 1 ).getMultiplicity() );        Assert.assertEquals( 1.0, arc.getKnots().get( 1 ).getWeight() );    }
@Test    public void select() {        dtPresenter.select(dtPresenter.getView());        verify(decisionTableSelectedEvent,               times(1)).fire(any(DecisionTableSelectedEvent.class));        // 3 rows created during the setup + 1 select action        verify(lockManager, times(4)).acquireLock();    }
@Test    public void testContractAsRlpValues() {        List<RlpType> rlpStrings = TransactionEncoder.asRlpValues(                createContractTransaction(), null);        assertThat(rlpStrings.size(), is(6));        assertThat(rlpStrings.get(3),                CoreMatchers.<RlpType>is(RlpString.create("")));    }
@Test    public void testRemove() {        TimestampSet set = new TimestampSet();        double t = 1.0;        set.add(t);        Assert.assertTrue(set.remove(t));        Assert.assertTrue(set.isEmpty());        Assert.assertFalse(set.contains(t));    }
@Test    public void defineClassNameField_SimpleType() {        Map<String, String> superTypesMap = new HashMap<>();        String retrieved = abstractDMODataManagementStrategySpy.defineClassNameField(String.class.getSimpleName(), superTypesMap);        assertEquals(String.class.getCanonicalName(), retrieved);    }
@Test  public void testSha256() throws InvalidKeyException, UnsupportedEncodingException, NoSuchAlgorithmException {    String testString = "{\"Statement\":{\"Condition\":{\"DateLessThan\":1425768129644},\"Resource\":\"rtmp:\\/\\/mh-wowza.localdomain\\/matterhorn-engage\\/mp4:engage-player\\/2c2c438d-bb4d-404c-a677-0ebc072d91e2\\/5dbfdbcd-a983-44ea-93b6-e1c457acb61f\\/short\"}}";    assertEquals("bf344862e1d317b246cb4336525146a4312081925c9641efaa5ebf272b944d78", SHA256Util.digest(testString, "abc123"));    assertEquals("5169ea7246cf084413228c5ca3590b9045e3a53a625074530ad222857c6d3b7c", SHA256Util.digest(testString, "123abc"));  }
@Test  public void testGetAndSaveJobResults() throws Exception {    InputStream stream = GoogleSpeechTranscriptionServiceTest.class.getResourceAsStream("/" + PULLED_TRANSCRIPTION_FILE);    database.storeJobControl(MP_ID, TRACK_ID, JOB_ID, TranscriptionJobControl.Status.InProgress.name(), TRACK_DURATION, DATE_EXPECTED, PROVIDER);    Capture<String> capturedCollection = Capture.newInstance();    Capture<String> capturedFileName = Capture.newInstance();    EasyMock.expect(workspace.putInCollection(EasyMock.capture(capturedCollection), EasyMock.capture(capturedFileName),            EasyMock.anyObject(InputStream.class))).andReturn(new URI("http://anything"));    EasyMock.replay(workspace);    HttpEntity httpEntity = EasyMock.createNiceMock(HttpEntity.class);    EasyMock.expect(httpEntity.getContent()).andReturn(stream);    CloseableHttpResponse response = EasyMock.createNiceMock(CloseableHttpResponse.class);    StatusLine status = EasyMock.createNiceMock(StatusLine.class);    EasyMock.expect(response.getStatusLine()).andReturn(status).anyTimes();    EasyMock.expect(response.getEntity()).andReturn(httpEntity).anyTimes();    EasyMock.expect(status.getStatusCode()).andReturn(HttpStatus.SC_OK).anyTimes();    EasyMock.replay(httpEntity, response, status);    Capture<HttpGet> capturedGet = Capture.newInstance();    EasyMock.expect(httpClient.execute(EasyMock.capture(capturedGet))).andReturn(response).anyTimes();    EasyMock.replay(httpClient);    long before = System.currentTimeMillis();    service.getAndSaveJobResults(JOB_ID);    long after = System.currentTimeMillis();    // Check if correct url was invoked    Assert.assertEquals(RESULT_URL + JOB_ID,            capturedGet.getValue().getURI().toString());    // Check if status and date in db was updated    TranscriptionJobControl job = database.findByJob(JOB_ID);    Assert.assertNotNull(job);    Assert.assertEquals(TranscriptionJobControl.Status.TranscriptionComplete.name(), job.getStatus());    Assert.assertNotNull(job.getDateCompleted());    Assert.assertTrue(before <= job.getDateCompleted().getTime() && job.getDateCompleted().getTime() <= after);    // Check if results were saved into a collection    Assert.assertEquals(GoogleSpeechTranscriptionService.TRANSCRIPT_COLLECTION, capturedCollection.getValue());    Assert.assertEquals(JOB_ID + ".json", capturedFileName.getValue());  }
@Test	public void testIsNothingSelected() {		ModifiedFacetDisplayBuilder modifiedFacetDisplayBuilder =			createDisplayBuilder();		ModifiedFacetDisplayContext modifiedFacetDisplayContext =			modifiedFacetDisplayBuilder.build();		Assert.assertTrue(modifiedFacetDisplayContext.isNothingSelected());	}
@Test    public void testLoadContentFail() throws Exception {        doThrow(new RuntimeException()).when(service).loadContent(resourcePath);        presenter.loadContent();        verify(kieEditorWrapperView, never()).clear();        verify(kieEditorWrapperView, never()).addMainEditorPage(view);        verify(kieEditorWrapperView, never()).addOverviewPage(any(), any());        verify(kieEditorWrapperView, never()).addImportsTab(any());        verify(kieEditorWrapperView, never()).addSourcePage(any());        verify(oracleFactory, never()).makeAsyncPackageDataModelOracle(resourcePath, ruleModel, payload);        verify(overviewWidgetPresenter, never()).setContent(overview, resourcePath);        verify(importsWidgetPresenter, never()).setContent(oracle, imports, false);        verify(view).hideBusyIndicator();    }
@Test	public void testItemSelectorURLWithFileItemSelectorCriterion()		throws Exception {		PortletURL itemSelectorPortletURL = mock(PortletURL.class);		when(			itemSelectorPortletURL.toString()		).thenReturn(			"itemSelectorPortletURL"		);		when(			_itemSelector.getItemSelectorURL(				Mockito.any(RequestBackedPortletURLFactory.class),				Mockito.anyString(), Mockito.any(ItemSelectorCriterion.class))		).thenReturn(			itemSelectorPortletURL		);		when(			_itemSelector.getItemSelectedEventName(Mockito.anyString())		).thenReturn(			"selectedEventName"		);		when(			_itemSelector.getItemSelectorCriteria(				"fileItemSelectorCriterionFileEntryItemSelectorReturnType")		).thenReturn(			_getFileItemSelectorCriterionFileEntryItemSelectorReturnType()		);		JSONObject originalJSONObject = JSONUtil.put(			"filebrowserImageBrowseLinkUrl",			"fileItemSelectorCriterionFileEntryItemSelectorReturnType");		JSONObject jsonObject = JSONFactoryUtil.createJSONObject(			originalJSONObject.toJSONString());		AMBlogsEditorConfigContributor amBlogsEditorConfigContributor =			new AMBlogsEditorConfigContributor();		ReflectionTestUtil.setFieldValue(			amBlogsEditorConfigContributor, "_itemSelector", _itemSelector);		amBlogsEditorConfigContributor.populateConfigJSONObject(			jsonObject, _inputEditorTaglibAttributes, _themeDisplay,			_requestBackedPortletURLFactory);		Mockito.verify(			_itemSelector		).getItemSelectorURL(			Mockito.any(RequestBackedPortletURLFactory.class),			Mockito.anyString(), Mockito.any(ItemSelectorCriterion.class)		);	}
@Test public void testFinishActionMode() {		// Arrange:		final ActionBarFragment fragment = new TestFragment();		final ActionMode mockActionMode = mock(ActionMode.class);		fragment.onActionModeStarted(mockActionMode);		// Act:		fragment.onActionModeFinished();		// Assert:		assertThat(fragment.isInActionMode(), is(false));		assertThat(fragment.getActionMode(), is(nullValue()));		verifyZeroInteractions(mockActionMode);	}
@Test    public void testEip155Encode() {        assertThat(TransactionEncoder.encode(createEip155RawTransaction(), (byte) 1),                is(Numeric.hexStringToByteArray(                        "0xec098504a817c800825208943535353535353535353535353535353535353535880de0"                                + "b6b3a764000080018080")));    }
@Test	public void testCase4() throws CAPDUParserException {		byte[] capdu = Hex.decode("00A4040004CAFEBABE00");		CAPDU expected = new CAPDU(0x00, 0xA4, 0x04, 0x00, Hex.decode("CAFEBABE"), 0x00);		CAPDU actual = CAPDUParser.parse(capdu);		Assert.assertEquals(expected, actual);		Assert.assertFalse(actual.isCase1());		Assert.assertFalse(actual.isCase2());		Assert.assertFalse(actual.isCase3());		Assert.assertTrue(actual.isCase4());		Assert.assertEquals(expected.getCla(), actual.getCla());		Assert.assertEquals(expected.getIns(), actual.getIns());		Assert.assertEquals(expected.getP1(), actual.getP1());		Assert.assertEquals(expected.getP2(), actual.getP2());		Assert.assertArrayEquals(expected.getData(), actual.getData());		Assert.assertArrayEquals(expected.getLe(), actual.getLe());	}
@Test    public void testInitReverseOrder() throws Exception {        when(reverseOrderCheckBox.getValue()).thenReturn(true);        columnConfigRow.init(attributeColumn, presenter);        verify(view).addReverseOrderCheckBox(eq(attributeColumn), eq(true), clickCaptor.capture());        //Simulates that checkbox was clicked        clickCaptor.getValue().onClick(null);        verify(editedAttributeColumn).setReverseOrder(true);        verify(decisionTable).updateColumn(attributeColumn, editedAttributeColumn);    }
@Test	public void testCompareLessThanMinor() {		SharepointVersion sharepointVersion1 = createSharepointVersion("9.1");		SharepointVersion sharepointVersion2 = createSharepointVersion("9.0");		Assert.assertEquals(			-1,			_sharepointVersionComparator.compare(				sharepointVersion1, sharepointVersion2));	}
@Test	public void testEscapeNoEspecialCharacters() {		Assert.assertEquals("abc", KeywordsUtil.escape("abc"));	}
@Test(expected = AMRuntimeException.class)	public void testFileEntryPathDLAppFailure() throws Exception {		Mockito.when(			_dlAppService.getFileEntry(0)		).thenThrow(			PortalException.class		);		_pathInterpreter.interpretPath("/image/0/x/foo.jpg");	}
@Test    public void testIsCompleteWhenHeaderIsNotEnabled() throws Exception {        createEmptyModel();        page.isComplete(Assert::assertFalse);        verify(view).showWarning(ENTER_COLUMN_DESCRIPTION);    }
@Test    public void testParse() {        XMLAdapter jrxmlAdapter = new XMLAdapter(                                                  TestJrxmlParserTest.class.getResourceAsStream( "testWPSreportTemplate.jrxml" ) );        JrxmlParser p = new JrxmlParser();        Pair<ProcessDefinition, Map<String, String>> parsed = p.parse( "processId", "testWPSreportTemplate",                                                                       "Process description", jrxmlAdapter,                                                                       new ArrayList<JrxmlContentProvider>(),                                                                       new HashMap<String, ParameterDescription>() );        assertNotNull( parsed );        ProcessDefinition pd = parsed.first;        assertNotNull( pd );        assertNotNull( pd.getIdentifier() );        assertEquals( "processId", pd.getIdentifier().getValue() );        assertEquals( "createReportByAWPSProcess", pd.getTitle().getValue() );    }
@Test  public void startUploadTest() throws IOException {    CloseableHttpResponse response = EasyMock.createNiceMock(CloseableHttpResponse.class);    StatusLine status = EasyMock.createNiceMock(StatusLine.class);    EasyMock.expect(response.getStatusLine()).andReturn(status).anyTimes();    EasyMock.expect(status.getStatusCode()).andReturn(HttpStatus.SC_OK).anyTimes();    EasyMock.replay(response, status);    Capture<HttpPost> capturedPost = Capture.newInstance();    EasyMock.expect(httpClient.execute(EasyMock.capture(capturedPost))).andReturn(response).anyTimes();    EasyMock.replay(httpClient);    // Check if correct url was invoked    service.startUpload(httpClient, bucket, mpId, fileExtension, file, size, contentType, token);    Assert.assertEquals("https://www.googleapis.com/upload/storage/v1/b/bucket/o?uploadType=resumable&name=mpId.flac",            capturedPost.getValue().getURI().toString());  }
@Test  public void testGetNonExistingFactTypeIdsBasedOnNames() {    assertEquals(new HashSet<>(), resolver.factTypeNamesToIds(new HashSet<>()));    assertEquals(new HashSet<>(), resolver.factTypeNamesToIds(null));  }
@Test	public void testValidateConfigurationInvalidFieldSetsExtraProperties()		throws Exception {		expectedException.expect(FragmentEntryConfigurationException.class);		expectedException.expectMessage(			new StringContains("extraneous key [extra] is not permitted"));		_fragmentEntryValidatorImpl.validateConfiguration(			_read("configuration_invalid_field_sets_extra_properties.json"));	}
@Test    void testCustomAddress() throws SocketException {        String address = "123.4.5.6:1234";        DaemonConfiguration config = getDaemonConfiguration(address);        UDPEmitter emitter = new UDPEmitter(config);        assertThat(emitter.getUDPAddress()).isEqualTo(address);    }
@Test  public void testPublish() throws MediaPackageException, PublicationException, ServiceRegistryException {    ServiceRegistry serviceRegistry = EasyMock.createNiceMock(ServiceRegistry.class);    Job dummyJob = EasyMock.createMock(Job.class);    Capture<List<String>> jobArgsCapture = EasyMock.newCapture();    EasyMock.expect(serviceRegistry.createJob(            eq(OaiPmhPublicationService.JOB_TYPE),            eq(OaiPmhPublicationServiceImpl.Operation.Publish.toString()),            capture(jobArgsCapture))).andReturn(dummyJob).once();    EasyMock.replay(serviceRegistry);    service.setServiceRegistry(serviceRegistry);    Job j = service.publish(mp, "default",            Collections.set("catalog-1", "catalog-2", "track-1"), Collections.set("track-1"),true);    Assert.assertSame(dummyJob, j);    List<String> jobArgs = jobArgsCapture.getValue();    // test job arguments    Assert.assertEquals(5, jobArgs.size());    Assert.assertTrue(jobArgs.get(0).contains("<mediapackage "));    Assert.assertEquals("default", jobArgs.get(1));    String downloadDistributionIdsArg = jobArgs.get(2);    Assert.assertNotNull(downloadDistributionIdsArg);    Assert.assertTrue(downloadDistributionIdsArg.contains("catalog-1"));    Assert.assertTrue(downloadDistributionIdsArg.contains("catalog-2"));    Assert.assertTrue(downloadDistributionIdsArg.contains("track-1"));    String streamingDistributionIdsArg = jobArgs.get(3);    Assert.assertNotNull(streamingDistributionIdsArg);    Assert.assertTrue(!streamingDistributionIdsArg.contains("catalog-1"));    Assert.assertTrue(!streamingDistributionIdsArg.contains("catalog-2"));    Assert.assertTrue(streamingDistributionIdsArg.contains("track-1"));    Assert.assertTrue(BooleanUtils.toBoolean(jobArgs.get(4)));  }
@Test  public void testSetterChar() throws Exception  {    char charVal = innerObj.charVal;    createSetterChar(fqcn, "innerObj.charVal").set(testObj, ++charVal);    assertEquals(charVal, innerObj.charVal);    createSetterChar(innerObjClass, "charVal").set(innerObj, ++charVal);    assertEquals(charVal, innerObj.charVal);    createSetterChar(innerObjClass, "protectedCharVal").set(innerObj, ++charVal);    assertEquals(charVal, innerObj.protectedCharVal);    createSetterChar(innerObjClass, "privateCharVal").set(innerObj, ++charVal);    assertEquals(charVal, innerObj.getPrivateCharVal());  }
@Test	public void testGetDistance() {		Assert.assertEquals(			69.382,			_distanceCalculator.getDistance(				_LATITUDE, _LONGITUDE, 34.045886, -118.564861),			_DELTA);		Assert.assertEquals(			9070.629,			_distanceCalculator.getDistance(				_LATITUDE, _LONGITUDE, 48.856614, 2.352222),			_DELTA);	}
@Test  public void testInstallInputOrgInPropertiesFileExpectsAddedToService() throws Exception {    Organization org1 = EasyMock.createMock(Organization.class);    EasyMock.expect(org1.getId()).andReturn("org1").anyTimes();    EasyMock.replay(org1);    Organization org2 = EasyMock.createMock(Organization.class);    EasyMock.expect(org2.getId()).andReturn("org2").anyTimes();    EasyMock.replay(org2);    EasyMock.expect(securityService.getOrganization()).andReturn(org1).anyTimes();    EasyMock.replay(securityService);    File file = getResourceFile("/ListProvidersScannerTest-WithOrg.properties");    listProvidersScanner.install(file);    ResourceListQuery query = new ResourceListQueryImpl();    assertEquals(1, listProvidersService.getAvailableProviders().size());    assertEquals(listName, listProvidersService.getAvailableProviders().get(0));    assertEquals("org1", org1.getId());    assertTrue("Provider is not registered", listProvidersService.hasProvider(listName, org1.getId()));    Map<String, String> dictionary = listProvidersService.getList(listName, query, false);    assertEquals(3, dictionary.size());    assertEquals("TEST.VALUE.1", dictionary.get("TEST.KEY.1"));    assertEquals("TEST.VALUE.2", dictionary.get("TEST.KEY.2"));    assertEquals("TEST.VALUE.3", dictionary.get("TEST.KEY.3"));  }
@Test	public void testExecute_JPS_Command() throws Exception {		String command = "jps";		Result result = CommandExecutor.executeCommand(command);		assertEquals(0, result.getExitVal());		assertNotNull(result);	}
@Test  public void testStartSkipFlavor() throws Exception {    // Make sure operation will be skipped if media package already contains the flavor passed    operation.setConfiguration(StartTranscriptionOperationHandler.SKIP_IF_FLAVOR_EXISTS, "audio/ogg");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.SKIP, result.getAction());  }
@Test    public void sixSM() {        Assert.assertEquals(RxComprehensions.doSwitchMap(zero(1), one(true), two("result"), three("other"), four("other".length()), five("other".length() < 5), six(Boolean.toString(false))).blockingFirst(), "false");    }
@Test    public void given$clearAllUserAttributes_whenQuery_thenShouldCallNativeApi() {        // given        PowerMockito.mockStatic(Instabug.class);        // when        rnModule.clearAllUserAttributes();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Instabug.clearAllUserAttributes();    }
@Test	public void testParseWithINMethod() throws ExpressionVisitException {		Expression expression = _filterParserImpl.parse(			"fieldExternal in ('value1', 'value2', 'value3')");		Assert.assertNotNull(expression);		ListExpression listExpression = (ListExpression)expression;		Assert.assertEquals(			ListExpression.Operation.IN, listExpression.getOperation());		MemberExpression memberExpression =			(MemberExpression)listExpression.getLeftOperationExpression();		PrimitivePropertyExpression primitivePropertyExpression =			(PrimitivePropertyExpression)memberExpression.getExpression();		Assert.assertEquals(			"fieldExternal", primitivePropertyExpression.getName());		List<Expression> rightOperationExpressions =			listExpression.getRightOperationExpressions();		LiteralExpression literalExpression1 =			(LiteralExpression)rightOperationExpressions.get(0);		Assert.assertEquals("'value1'", literalExpression1.getText());	}
@Test    public void continuationNoHeaderBlock() {        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.CONTINUATION_NO_HEADER_FRAGMENT_BUFFER);        Http2ContinuationFrame frame = (Http2ContinuationFrame) decoder.decode(buffer, context);        assertNotNull(frame);        assertEquals(0, frame.getLength());        assertEquals(9, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(50, frame.getStreamID());        assertEquals(0, frame.getHeaderBlockFragment().length);    }
@Test  public void testFetchObjectTypes() {    List<ObjectTypeEntity> expected = createAndSaveObjectTypes(3);    List<ObjectTypeEntity> actual = getObjectManager().fetchObjectTypes();    expected.sort(Comparator.comparing(ObjectTypeEntity::getId));    actual.sort(Comparator.comparing(ObjectTypeEntity::getId));    assertObjectTypes(expected, actual);  }
@Test    public void testContextMissingStrategyOverrideEnvironmentVariable() {        environmentVariables.set(ContextMissingStrategy.CONTEXT_MISSING_STRATEGY_ENVIRONMENT_VARIABLE_OVERRIDE_KEY, "log_error");        AWSXRayRecorder recorder = AWSXRayRecorderBuilder.standard().withContextMissingStrategy(            new RuntimeErrorContextMissingStrategy()).build();        Assert.assertTrue(recorder.getContextMissingStrategy() instanceof LogErrorContextMissingStrategy);        environmentVariables.set(ContextMissingStrategy.CONTEXT_MISSING_STRATEGY_ENVIRONMENT_VARIABLE_OVERRIDE_KEY, null);    }
@Test	public void testPut() throws InterruptedException {		// Without comparator		CoalescedPipe<String> coalescedPipe = new CoalescedPipe<>();		// Null		try {			coalescedPipe.put(null);			Assert.fail();		}		catch (NullPointerException nullPointerException) {		}		// Normal		coalescedPipe.put("test1");		Assert.assertEquals(1, coalescedPipe.pendingCount());		Assert.assertEquals(0, coalescedPipe.coalescedCount());		coalescedPipe.put("test2");		Assert.assertEquals(2, coalescedPipe.pendingCount());		Assert.assertEquals(0, coalescedPipe.coalescedCount());		// Coalesce		coalescedPipe.put("test1");		Assert.assertEquals(2, coalescedPipe.pendingCount());		Assert.assertEquals(1, coalescedPipe.coalescedCount());		coalescedPipe.put("test2");		Assert.assertEquals(2, coalescedPipe.pendingCount());		Assert.assertEquals(2, coalescedPipe.coalescedCount());		// With comparator		coalescedPipe = new CoalescedPipe<String>(			new Comparator<String>() {				@Override				public int compare(String o1, String o2) {					return o1.length() - o2.length();				}			});		// Null		try {			coalescedPipe.put(null);			Assert.fail();		}		catch (NullPointerException nullPointerException) {		}		// Normal		coalescedPipe.put("a");		Assert.assertEquals(1, coalescedPipe.pendingCount());		Assert.assertEquals(0, coalescedPipe.coalescedCount());		coalescedPipe.put("ab");		Assert.assertEquals(2, coalescedPipe.pendingCount());		Assert.assertEquals(0, coalescedPipe.coalescedCount());		// Coalesce		coalescedPipe.put("c");		Assert.assertEquals(2, coalescedPipe.pendingCount());		Assert.assertEquals(1, coalescedPipe.coalescedCount());		coalescedPipe.put("cd");		Assert.assertEquals(2, coalescedPipe.pendingCount());		Assert.assertEquals(2, coalescedPipe.coalescedCount());	}
@Test    public void givenDefaultShareMenuItemIsSet_thenDefaultShareMenuItemComposerIsAdded() {        simpleChromeCustomTabsIntentBuilder.withDefaultShareMenuItem();        verify(mockComposers).add(any(DefaultShareMenuItemComposer.class));    }
@Test(description = "This test case tests adding new profile feature to a non existent profile",          dependsOnMethods = "testAddProfileFeature",          expectedExceptions = {FeatureManagementException.class})    public void testAddProfileFeatureThrowingFeatureManagementException() throws Exception {        Profile profile = ProfileCreator.getProfile(FeatureCreator.getFeatureList(), DEVICE_TYPE_D);        int nonExistentProfileId = 9999;        ProfileFeature profileFeature = profile.getProfileFeaturesList().get(0);        //Adding profile        featureManager.addProfileFeature(profileFeature, nonExistentProfileId);    }
@Test(expectedExceptions = IllegalStateException.class)    public void testAddAuthenticatorWithEmptyString() {        WebappAuthenticatorRepository repository = new WebappAuthenticatorRepository();        repository.addAuthenticator(null);    }
@Test  public void testSaveAndGetObjectTypeById() {    ObjectTypeEntity entity = createAndSaveObjectType();    assertObjectType(entity, getObjectManager().getObjectType(entity.getId()));  }
@Test	public void testDeleteLogExceptionsOnlyFalse() throws Throwable {		expectedException.expect(SearchException.class);		expectedException.expectMessage(			"deletion failed and results in exception");		ElasticsearchExceptionHandler elasticsearchExceptionHandler =			new ElasticsearchExceptionHandler(_log, false);		elasticsearchExceptionHandler.handleDeleteDocumentException(			new SearchException("deletion failed and results in exception"));	}
@Test	public void testGetAttributesMap() {		List<Attribute> attributes = new ArrayList<>();		attributes.add(			OpenSamlUtil.buildAttribute("emailAddress", "test@liferay.com"));		attributes.add(			OpenSamlUtil.buildAttribute("firstName", "TestFirstName"));		attributes.add(OpenSamlUtil.buildAttribute("lastName", "TestLastName"));		attributes.add(OpenSamlUtil.buildAttribute("screenName", "test"));		Map<String, List<Serializable>> attributesMap =			SamlUtil.getAttributesMap(attributes, new Properties());		Assert.assertEquals(			"test@liferay.com",			SamlUtil.getValueAsString("emailAddress", attributesMap));		Assert.assertEquals(			"TestFirstName",			SamlUtil.getValueAsString("firstName", attributesMap));		Assert.assertEquals(			"TestLastName",			SamlUtil.getValueAsString("lastName", attributesMap));		Assert.assertEquals(			"test", SamlUtil.getValueAsString("screenName", attributesMap));	}
@Test	public void testProcessDDMFormInstanceReportOnDeleteEvent()		throws Exception {		DDMFormFieldValue ddmFormFieldValue = mock(DDMFormFieldValue.class);		when(			ddmFormFieldValue.getName()		).thenReturn(			"field1"		);		when(			ddmFormFieldValue.getType()		).thenReturn(			DDMFormFieldType.CHECKBOX_MULTIPLE		);		Value value = new LocalizedValue();		value.addString(			value.getDefaultLocale(),			JSONUtil.put(				"option1"			).toString());		value.setDefaultLocale(LocaleUtil.US);		when(			ddmFormFieldValue.getValue()		).thenReturn(			value		);		JSONObject processedFieldJSONObject =			_checkboxMultipleDDMFormFieldTypeReportProcessor.process(				ddmFormFieldValue,				JSONUtil.put(					"type", DDMFormFieldType.CHECKBOX_MULTIPLE				).put(					"values", JSONUtil.put("option1", 1)				),				0, DDMFormInstanceReportConstants.EVENT_DELETE_RECORD_VERSION);		JSONObject valuesJSONObject = processedFieldJSONObject.getJSONObject(			"values");		Assert.assertEquals(0, valuesJSONObject.getLong("option1"));	}
@Test    public void getScenarioGridColumn4() {        final ScenarioGridColumn retrieved = ScenarioSimulationUtils.getScenarioGridColumn(headerBuilderMock, scenarioCellTextAreaSingletonDOMElementFactoryMock, PLACEHOLDER);        assertNotNull(retrieved);    }
@Test	public void shouldHandleEvent() {		this.watcher.eventReceived(Watcher.Action.ADDED, this.mockConfigMap);		this.watcher.eventReceived(Watcher.Action.DELETED, this.mockConfigMap);		this.watcher.eventReceived(Watcher.Action.MODIFIED, this.mockConfigMap);		verify(this.mockLeadershipController, times(3)).update();	}
@Test        public void tcStrSplit()        {        	ArrayList<String> actual = new ArrayList<String>();        	ArrayList<String> expected = new ArrayList<String>();            // Keinwert            actual = OKW_Helper.splitString("", "/");            expected.clear();            expected.add("");            assertEquals(expected, actual);            // 1            actual = OKW_Helper.splitString("Root", "/");            expected.clear();            expected.add("Root");            assertEquals(expected, actual);            // 1t            actual = OKW_Helper.splitString("Root/", "/");            expected.clear();            expected.add("Root");            expected.add("");            assertEquals(expected, actual);            // t1            actual = OKW_Helper.splitString("/SubDir_1", "/");            expected.clear();            expected.add("");            expected.add("SubDir_1");            assertEquals(expected, actual);            // 1t1            actual = OKW_Helper.splitString("Root/SubDir_1", "/");            expected.clear();            expected.add("Root");            expected.add("SubDir_1");            assertEquals(expected, actual);            // 1tt1            actual = OKW_Helper.splitString("Root//Datei", "/");            expected.clear();            expected.add("Root");            expected.add("");            expected.add("Datei");            assertEquals(expected, actual);            // 1t1t1t1            actual = OKW_Helper.splitString("Root/SubDir_1/SubDir_2/Datei", "/");            expected.clear();            expected.add("Root");            expected.add("SubDir_1");            expected.add("SubDir_2");            expected.add("Datei");            assertEquals(expected, actual);        }
@Test    public void buildMenuBar() {        scenarioSimulationEditorKogitoWrapperSpy.buildMenuBar();        verify(fileMenuBuilderMock, times(1)).build();        verify(menuItemMock, times(1)).setEnabled(eq(true));    }
@Test    void should_accept_NTLM_protocol() {        this.waffleAuthenticatorBase.setProtocols("  NTLM ");        Assertions.assertEquals(1, this.waffleAuthenticatorBase.protocols.size(), "One protocol added");        Assertions.assertEquals("NTLM", this.waffleAuthenticatorBase.protocols.iterator().next());    }
@Test  @SuppressWarnings("unchecked")  public void testVerbListRecordsAll() throws Exception {    runChecks(OaiPmhConstants.VERB_LIST_RECORDS,              repo(oaiPmhPersistenceMock(searchResultItem("id-1", utcDate(2011, 5, 1), false),                                         searchResultItem("id-2", utcDate(2011, 6, 1), true)), Granularity.DAY)                      .selectVerb(params("ListRecords", null, "oai_dc", null, null, null)),              some(IsValid),              list(hasXPath("//oai20:ListRecords/oai20:record/oai20:header[oai20:identifier='id-1']", NS_CTX),                   hasXPath("//oai20:ListRecords/oai20:record/oai20:header[oai20:datestamp='2011-05-01']", NS_CTX),                   hasXPath("//oai20:ListRecords/oai20:record/oai20:header[@status='deleted']", NS_CTX),                   hasXPath("//oai20:ListRecords/oai20:record/oai20:header[oai20:identifier='id-2']", NS_CTX),                   hasXPath("//oai20:ListRecords/oai20:record/oai20:header[oai20:datestamp='2011-06-01']", NS_CTX),                   hasXPath("count(//oai20:ListRecords/oai20:record)", NS_CTX, returningANumber(), equalTo(2.0)),                   hasXPath("count(//oai20:ListRecords/oai20:record/oai20:metadata)", NS_CTX, returningANumber(), equalTo(1.0))));  }
@Test    public void testHasPreFalse() throws Exception {        LocalDate min = LocalDate.parse("2014-10-01");        Month week = new Month(mToday, mToday, min, null);        assertFalse(week.hasPrev());    }
@Test public void testNotifyLoadingStarted() {		// Arrange:		final WebFragment.OnWebContentLoadingListener mockListener = mock(WebFragment.OnWebContentLoadingListener.class);		final WebFragment fragment = new WebFragment();		fragment.setOnWebContentLoadingListener(mockListener);		// Act:		fragment.notifyLoadingStarted("test_url");		// Assert:		verify(mockListener).onLoadingStarted("test_url");		verifyNoMoreInteractions(mockListener);	}
@Test  public void testConvertEmptyRequest() throws Exception {    FactSearchCriteria criteria = converter.apply(new SearchObjectFactsRequest());    assertEquals(SetUtils.set(FactSearchCriteria.NumberFieldStrategy.certainty), criteria.getNumberFieldStrategy());    assertEquals(25, criteria.getLimit());    assertNotNull(criteria.getCurrentUserID());    assertNotNull(criteria.getAvailableOrganizationID());  }
@Test  public void testIterateEdgesWithUuidIdSupportUsingEdgeIds() {    Edge edge1 = createEdge();    Edge edge2 = createEdge();    assertEquals(2, IteratorUtils.count(getActGraph().edges(edge1.id(), edge2.id())));  }
@Test public void indexNoteNameUpdatedOnNoteSave() throws IOException {    //given: total 2 notebooks, 3 paragraphs    Note note1 = newNoteWithParagraph("Notebook1", "test");    Note note2 = newNoteWithParagraphs("Notebook2", "not test", "not test at all");    notebookIndex.addIndexDocs(Arrays.asList(note1, note2));    assertThat(resultForQuery("test").size()).isEqualTo(3);    //when    note1.setName("NotebookN");    note1.persist(null);    //then    assertThat(resultForQuery("Notebook1")).isEmpty();    assertThat(resultForQuery("NotebookN")).isNotEmpty();    assertThat(resultForQuery("NotebookN").size()).isEqualTo(1);  }
@Test    public void should_rhs_not_be_evaluated_when_AND_operator_and_lhs_is_false___strong_ref() {        when(lhs.isGranted(any(), any(), any())).thenReturn(false);        GrantEvaluator grantEvaluator = composer.and(lhs, rhs);        boolean granted = grantEvaluator.isGranted(null, null, "fake");        verify(lhs).isGranted(any(), any(), any());        verifyZeroInteractions(rhs);        assertThat(granted).isFalse();    }
@Test    public void testCapabilitiesExtraction100()                            throws Exception {        String wfsUtahDemo100Url = TestProperties.getProperty( WFS_UTAH_DEMO_100_URL );        if ( wfsUtahDemo100Url == null ) {            LOG.warn( "Skipping test, property '" + WFS_UTAH_DEMO_100_URL + "' not found in ~/.deegree-test.properties" );            return;        }        URL wfsCapaUrl = new URL( wfsUtahDemo100Url );        WFSClient client = new WFSClient( wfsCapaUrl );        assertEquals( WFS_100, client.getServiceVersion() );        // ServiceIdentification        ServiceIdentification si = client.getIdentification();        assertEquals( "deegree 3 Utah Demo", si.getName() );        assertEquals( 1, si.getTitles().size() );        assertEquals( "deegree 3 Utah Demo", si.getTitles().get( 0 ).getString() );        assertEquals( null, si.getTitles().get( 0 ).getLanguage() );        assertEquals( 1, si.getAbstracts().size() );        assertEquals( "WMS and WFS demonstration with Utah data", si.getAbstracts().get( 0 ).getString() );        assertEquals( null, si.getAbstracts().get( 0 ).getLanguage() );        assertEquals( 0, si.getKeywords().size() );        assertNull( si.getFees() );        // ServiceProvider        assertEquals( "http://www.lat-lon.de", client.getProvider().getProviderSite() );        // OperationMetadata (TODO)    }
@Test(expected = AccessDeniedException.class)  public void testFetchOriginWithoutSpecificViewPermission() throws Exception {    OriginEntity origin = new OriginEntity()            .setId(UUID.randomUUID())            .setOrganizationID(UUID.randomUUID());    when(originResolver.apply(origin.getId())).thenReturn(origin);    doThrow(AccessDeniedException.class).when(securityContext).checkReadPermission(origin);    delegate.handle(new GetOriginByIdRequest().setId(origin.getId()));  }
@Test    public void testParseEncodingsWithKvpForAllAndEmptyRequestTypeSpecific() {        DeegreeWMS deegreeWmsConfig = prepareSupportedRequestsWithKvpForAllAndEmptyRequestTypeSpecific();        LimitedSupportedEncodings limitedSupportedEncodings = (LimitedSupportedEncodings) webFeatureService.parseEncodings( deegreeWmsConfig );        Map<WMSRequestType, Set<String>> enabledEncodings = limitedSupportedEncodings.getEnabledEncodingsPerRequestType();        Set<String> getCapabilitiesEncodings = enabledEncodings.get( GetCapabilities );        assertThat( getCapabilitiesEncodings, hasOnlyItems( "kvp" ) );        assertThat( getCapabilitiesEncodings, not( hasOnlyItems( "xml", "soap" ) ) );        Set<String> describeLayerEncodings = enabledEncodings.get( DescribeLayer );        assertThat( describeLayerEncodings, hasOnlyItems( "kvp" ) );        assertThat( getCapabilitiesEncodings, not( hasOnlyItems( "xml", "soap" ) ) );        Set<String> getMapEncodings = enabledEncodings.get( GetMap );        assertThat( getMapEncodings.size(), is( 0 ) );        Set<String> mapEncodings = enabledEncodings.get( map );        assertThat( mapEncodings.size(), is( 0 ) );        Set<String> getFeatureInfoEncodings = enabledEncodings.get( GetFeatureInfo );        assertThat( getFeatureInfoEncodings.size(), is( 0 ) );    }
@Test	public void testGreaterThanOrEquals2() throws Exception {		DDMExpressionImpl<Boolean> ddmExpressionImpl = createDDMExpression(			"1 >= 2");		Assert.assertFalse(ddmExpressionImpl.evaluate());	}
@Test	public void emptyRuleTest() throws Exception {		Mapper mapper = new Mapper("global-pro.xml");		Book book = new Book();		InnerNote innerNote = new InnerNote();		innerNote.setId(123);		Date date = new Date();		book.setDate(date);		book.setAge(23);		book.setExclude("summary");		book.setInnerNote(innerNote);		Note note = new Note();		note.setIdNote("idnoye");		note = (Note) mapper.map("testEmptyRuleMap", book, note);		Assert.assertEquals(23, Integer.valueOf(note.getAgeNote()).intValue());		Assert.assertNull(note.getIdNote());		Assert.assertEquals(DateUtil.dateFormat(date), note.getDate());		Assert.assertEquals(123, note.getInnerNote().getId().intValue());	}
@Test    public void errorTest07() {        try {            new RangeExpressionParser("table_name_0[1..2..]").visit(new RangeExpressionItemVisitor() {                @Override                public void visit(Object val) {                    throw new Error();                }            });            throw new Error();        } catch (RangeExpressionException e) {        }    }
@Test		public void testGetDateAdded() {			assertEquals("2010-01-31", review.getDateAdded().toString());		}
@Test    public void testGetActive_roomToTV() throws Exception {        DateTimeFormatter dtf = DateTimeUtils.PARAMETER_WITH_DAY_DTF.withZone(dtZone);        String startTimeStr = dtf.print(mentionTime.minusDays(1));        String endTimeStr = dtf.print(mentionTime.plusDays(1));        Map<String, Double> scores = underTest.getActive(startTimeStr, endTimeStr,                                                         DimensionType.ROOM.toString(),                                                         ActiveMethod.ToTV.toString(), "10",                                                         "true");        assertFalse(scores.isEmpty());    }
@Test(description = "This method tests the behaviour of getGeoDeviceLocations when there are no devices" +            "in the given map boundaries")    public void testGetGeoDeviceLocations1() throws DeviceManagementException {        Mockito.doReturn(new ArrayList<GeoCluster>()).when(deviceManagementProviderService)                .findGeoClusters(null, Mockito.any(GeoCoordinate.class), Mockito.any(GeoCoordinate.class), Mockito.anyInt());        Response response = geoLocationBasedService.getGeoDeviceLocations(null, 0.4, 15, 75.6,                90.1, 6);        Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode(),                "getGeoDeviceLocations request failed with valid parameters");    }
@Test	public void testMatch2() throws Exception {		ScopeMatcherFactory chunkScopeMatcherFactory =			new ChunkScopeMatcherFactory();		ScopeMatcher scopeMatcher = chunkScopeMatcherFactory.create(			"everything");		Assert.assertTrue(scopeMatcher.match("everything.readonly"));		Assert.assertTrue(scopeMatcher.match("everything"));	}
@Test    public void testIsCompleteWhenPatternIsSet() {        when(plugin.patternWrapper()).thenReturn(newPattern("factType",                                                            "",                                                            false));        page.isComplete(Assert::assertTrue);        verify(view).hidePatternWarning();        verify(view,               never()).showPatternWarning();        verify(plugin,               never()).isNewColumn();    }
@Test  public void testPartialMatches() {    assertEquals("*Hello*", QueryPreprocessor.sanitize("Hello"));    assertEquals("*Hello*", QueryPreprocessor.sanitize("*Hello"));    assertEquals("*Hello*", QueryPreprocessor.sanitize("Hello*"));    assertEquals("*Hello*", QueryPreprocessor.sanitize("*Hello*"));    assertEquals("*Hello* *World*", QueryPreprocessor.sanitize("Hello World"));    assertEquals("*Hello* *World*", QueryPreprocessor.sanitize("Hello* World"));    assertEquals("*Hello* *World*", QueryPreprocessor.sanitize("Hello *World"));    assertEquals("*Hello* *World*", QueryPreprocessor.sanitize("*Hello* *World*"));  }
@Test(expected = AccessDeniedException.class)  public void testTraverseGraphByObjectIdWithoutPermission() throws Exception {    doThrow(AccessDeniedException.class).when(securityContext).checkPermission(TiFunctionConstants.traverseThreatIntelFact);    delegate.handle(new TraverseByObjectIdRequest());  }
@Test    public void testRenderHeaderBodyDivider() {        final RendererCommand command = renderer.renderHeaderBodyDivider(10.0);        assertRenderingCommands(Collections.singletonList(command),                                RenderHeaderGridLinesCommand.class);    }
@Test    public void testIsValueMissingThree() throws Exception {        final String operator = "== null";        final String value = "";        Assertions.assertThat(testedSelector.isValueMissing(operator, value)).isFalse();    }
@Test	public void testDoGetData() throws Exception {		DDMDataProviderInstanceService ddmDataProviderInstanceService = mock(			DDMDataProviderInstanceService.class);		DDMDataProviderInstance ddmDataProviderInstance = mock(			DDMDataProviderInstance.class);		when(			ddmDataProviderInstanceService.fetchDataProviderInstance(1L)		).thenReturn(			ddmDataProviderInstance		);		DDMDataProviderInstanceSettings ddmDataProviderInstanceSettings = mock(			DDMDataProviderInstanceSettings.class);		DDMRESTDataProviderSettings ddmRESTDataProviderSettings =			_createDDMRESTDataProviderSettings();		when(			ddmDataProviderInstanceSettings.getSettings(				Matchers.any(DDMDataProviderInstance.class), Matchers.any())		).thenReturn(			ddmRESTDataProviderSettings		);		mockStatic(HttpRequest.class);		HttpRequest httpRequest = mock(HttpRequest.class);		HttpRequest spyHttpRequest = spy(httpRequest);		when(			HttpRequest.get(Matchers.anyString())		).thenReturn(			spyHttpRequest		);		HttpResponse httpResponse = mock(HttpResponse.class);		HttpResponse spyHttpResponse = spy(httpResponse);		when(			spyHttpRequest.send()		).thenReturn(			spyHttpResponse		);		when(			spyHttpResponse.bodyText()		).thenReturn(			"{}"		);		DDMDataProviderRequest.Builder builder =			DDMDataProviderRequest.Builder.newBuilder();		DDMDataProviderRequest ddmDataProviderRequest =			builder.withDDMDataProviderId(				"1"			).build();		_ddmRESTDataProvider.ddmDataProviderInstanceService =			ddmDataProviderInstanceService;		_ddmRESTDataProvider.ddmDataProviderInstanceSettings =			ddmDataProviderInstanceSettings;		MultiVMPool multiVMPool = mock(MultiVMPool.class);		PortalCache portalCache = mock(PortalCache.class);		PortalCache spyPortalCache = spy(portalCache);		when(			multiVMPool.getPortalCache(DDMRESTDataProvider.class.getName())		).thenReturn(			spyPortalCache		);		_ddmRESTDataProvider.setMultiVMPool(multiVMPool);		_ddmRESTDataProvider.doGetData(ddmDataProviderRequest);		ArgumentCaptor<String> userNameArgumentCaptor = ArgumentCaptor.forClass(			String.class);		ArgumentCaptor<String> passwordArgumentCaptor = ArgumentCaptor.forClass(			String.class);		Mockito.verify(			spyHttpRequest, Mockito.times(1)		).basicAuthentication(			userNameArgumentCaptor.capture(), passwordArgumentCaptor.capture()		);		Assert.assertEquals(			ddmRESTDataProviderSettings.username(),			userNameArgumentCaptor.getValue());		Assert.assertEquals(			ddmRESTDataProviderSettings.password(),			passwordArgumentCaptor.getValue());		Mockito.verify(			spyHttpRequest, Mockito.times(1)		).send();		Mockito.verify(			spyHttpResponse, Mockito.times(1)		).bodyText();		Mockito.verify(			spyPortalCache, Mockito.times(1)		).put(			Matchers.any(Serializable.class), Matchers.any()		);	}
@Test  public void testCreateTheme() throws ParseException, IOException {    String themesString = IOUtils.toString(getClass().getResource("/theme-create.json"), "UTF-8");    Boolean isDefault = true;    String name = "New Theme Name";    String description = "New Theme Description";    Boolean bumperActive = true;    String bumperFile = "bumper-file";    Boolean trailerActive = true;    String trailerFile = "trailer-file";    Boolean titleSlideActive = true;    String titleSlideBackground = "title-background";    String titleSlideMetadata = "title-metadata";    Boolean licenseSlideActive = true;    String licenseSlideBackground = "license-background";    String licenseSlideDescription = "license-description";    Boolean watermarkActive = true;    String watermarkPosition = "watermark-position";    String watermarkFile = "watermark-file";    String result = given().formParam("default", isDefault.toString()).formParam("name", name)            .formParam("description", description).formParam("bumperActive", bumperActive.toString())            .formParam("bumperFile", bumperFile).formParam("trailerActive", trailerActive.toString())            .formParam("trailerFile", trailerFile).formParam("titleSlideActive", titleSlideActive.toString())            .formParam("titleSlideBackground", titleSlideBackground)            .formParam("titleSlideMetadata", titleSlideMetadata).formParam("licenseSlideActive", licenseSlideActive)            .formParam("licenseSlideBackground", licenseSlideBackground)            .formParam("licenseSlideDescription", licenseSlideDescription)            .formParam("watermarkActive", watermarkActive).formParam("watermarkPosition", watermarkPosition)            .formParam("watermarkFile", watermarkFile).expect().statusCode(HttpStatus.SC_OK).when().post(rt.host("/"))            .asString();    JSONObject theme = ((JSONObject) parser.parse(result));    // Make sure the creationDate property exists    assertTrue(StringUtils.trimToNull(theme.get("creationDate").toString()) != null);    // Remove it from the results    theme.remove("creationDate");    logger.info("Expected" + themesString);    logger.info("Result: " + theme.toJSONString());    assertThat(themesString, SameJSONAs.sameJSONAs(theme.toJSONString()).allowingAnyArrayOrdering());  }
@Test  public void testHasPermissionWithDirectlyGrantedFunctionGroup() throws Exception {    String content = "" +            "function.group.members = function\n" +            "subject.1.name = subject\n" +            "organization.1.name = organization\n" +            "subject.1.permission.1 = group" +            "";    setup(content);    assertTrue(accessController.hasPermission(createCredentials(1), createFunctionIdentifier("group")));    assertTrue(accessController.hasPermission(createCredentials(1), () -> "group"));  }
@Test  public void testGetNote() throws IOException {    Note notebook = repo.get("AAAAA", null);    assertThat(notebook).isNotNull();    assertThat(notebook.id()).isEqualTo("2A94M5J1Z");  }
@Test	public void testChangedListsDifferentSizes() {		List<MapPropertySource> left = Collections.singletonList(new MapPropertySource("one", Collections.emptyMap()));		List<MapPropertySource> right = Collections.emptyList();		boolean changed = stub.changed(left, right);		Assert.assertFalse(changed);	}
@Test  public void testNotAuthorizable() throws Exception {    assertNull(SqoopModelAuthorizables.from("k=v"));  }
@Test    public void testAWSXRayServletAsyncListenerEmitsSegmentWhenProcessingEvent() throws IOException, ServletException {        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter("test");        AsyncContext asyncContext = mock(AsyncContext.class);        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(true);        when(request.getAsyncContext()).thenReturn(asyncContext);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mockChain(request, response);        AsyncEvent event = mock(AsyncEvent.class);        when(event.getSuppliedRequest()).thenReturn(request);        when(event.getSuppliedResponse()).thenReturn(response);        servletFilter.doFilter(request, response, chain);        Assert.assertNull(AWSXRay.getTraceEntity());        AWSXRayServletAsyncListener listener = (AWSXRayServletAsyncListener) Whitebox.getInternalState(servletFilter, "listener");        listener.onComplete(event);        verify(AWSXRay.getGlobalRecorder().getEmitter(), Mockito.times(1)).sendSegment(Mockito.any());    }
@Test	public void testReadMultipleRows() throws Exception {		try (CSVBatchEngineImportTaskItemReader				csvBatchEngineImportTaskItemReader =					_getCSVBatchEngineImportTaskItemReader(						FIELD_NAMES, StringPool.COMMA,						new Object[][] {							{								createDateString, "sample description 1", 1,								"sample name 1", "naziv 1"							},							{								createDateString, "sample description 2", 2,								"sample name 2", "naziv 2"							}						})) {			for (int i = 1; i < 3; i++) {				long rowCount = i;				validate(					createDateString, "sample description " + rowCount,					rowCount, Collections.emptyMap(),					csvBatchEngineImportTaskItemReader.read(),					HashMapBuilder.put(						"en", "sample name " + rowCount					).put(						"hr", "naziv " + rowCount					).build());			}		}	}
@Test(expected = GraphOperationException.class)  public void testFetchingAllVerticesNotAllowed() {    getActGraph().vertices();  }
@Test    public void given$showSurveysIfAvailable_whenQuery_thenShouldCallNativeApi() {        // given        PowerMockito.mockStatic(Surveys.class);        // when        surveysModule.showSurveysIfAvailable();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Surveys.showSurveyIfAvailable();    }
@Test  public void testBasicScalding() {    assertEquals(InterpreterResult.Code.SUCCESS,        repl.interpret("case class Sale(state: String, name: String, sale: Int)\n" +          "val salesList = List(Sale(\"CA\", \"A\", 60), Sale(\"CA\", \"A\", 20), Sale(\"VA\", \"B\", 15))\n" +          "val salesPipe = TypedPipe.from(salesList)\n" +          "val results = salesPipe.map{x => (1, Set(x.state), x.sale)}.\n" +          "    groupAll.sum.values.map{ case(count, set, sum) => (count, set.size, sum) }\n" +          "results.dump",          context).code());  }
@Test    public void testHasColumn() {        TableImpl<Node> table = new TableImpl<Node>(Node.class, false);        table.addColumn("Id", Integer.class);        Assert.assertTrue(table.hasColumn("Id"));        Assert.assertTrue(table.hasColumn("ID"));        Assert.assertTrue(table.hasColumn("id"));        Assert.assertTrue(table.hasColumn("iD"));    }
@Test  public void testVaryEpisodeWithOnlyNewFlavorsFalse() throws Exception {    Dictionary<String, String> properties = new Hashtable<>();    boolean isAddOnlyNew;    // Test with properties and key is false    properties.put(IngestServiceImpl.ADD_ONLY_NEW_FLAVORS_KEY, "false");    service.updated(properties);    isAddOnlyNew = service.isAddOnlyNew;    Assert.assertFalse("Updated overwrite property to false", isAddOnlyNew);    testEpisodeUpdateNewAndExisting();  }
@Test    public void parseRectangle()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        XMLStreamReaderWrapper parser = getParser( "Rectangle.gml" );        Rectangle patch = (Rectangle) getPatchParser().parseSurfacePatch( parser, CRSManager.getCRSRef( "EPSG:4326" ) );        Assert.assertEquals( 5, patch.getExteriorRing().getControlPoints().size() );    }
@Test    public void testGetSaveAndRenameServiceCaller() throws Exception {        final Caller<? extends SupportsSaveAndRename<TemplateModel, Metadata>> serviceCaller = presenter.getSaveAndRenameServiceCaller();        assertEquals(this.serviceCaller, serviceCaller);    }
@Test    void should_refuse_other_protocol() {        Assertions.assertThrows(RuntimeException.class, () -> {            this.waffleAuthenticatorBase.setProtocols("  NTLM , OTHER, Negotiate   ");        });    }
@Test    public void onRefreshedModelContent() {        assertNull(scenarioSimulationEditorBusinessClientWrapper.lastRunResult);        scenarioSimulationEditorBusinessClientWrapper.onRefreshedModelContent(simulationRunResultMock);        assertEquals(simulationRunResultMock, scenarioSimulationEditorBusinessClientWrapper.lastRunResult);        verify(scenarioSimulationBusinessCentralDocksHandlerMock, times(1)).updateTestRunnerReportingPanelResult(eq(testResultMessageMock));    }
@Test	public void testGetWhenKaleoTaskAssignmentsIsEmpty() {		KaleoTaskInstanceToken kaleoTaskInstanceToken =			KaleoRuntimeTestUtil.mockKaleoTaskInstanceToken();		WorkflowTaskAssigneesSupplier workflowTaskAssigneesSupplier =			new WorkflowTaskAssigneesSupplier(kaleoTaskInstanceToken);		List<WorkflowTaskAssignee> workflowTaskAssignees =			workflowTaskAssigneesSupplier.get();		Assert.assertTrue(			workflowTaskAssignees.toString(), workflowTaskAssignees.isEmpty());	}
@Test    public void testGetEdge() {        GraphStore graphStore = GraphGenerator.generateSmallGraphStore();        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view = store.createView();        addSomeElements(graphStore, view);        DirectedSubgraph graph = store.getDirectedGraph(view);        for (Edge e : graph.getEdges()) {            Assert.assertSame(graph.getEdge(e.getSource(), e.getTarget()), e);        }        graph.clearEdges();        Node[] nodes = graph.getNodes().toArray();        Assert.assertNull(graph.getEdge(nodes[0], nodes[1]));    }
@Test	public void testHasViewPermissionReturnsFalseWhenUserDoesNotHavePermission()		throws Exception {		Mockito.when(			_modelResourcePermission.contains(				Mockito.any(PermissionChecker.class),				Mockito.any(BookmarksEntry.class), Mockito.anyString())		).thenReturn(			false		);		AssetRenderer<BookmarksEntry> assetRenderer =			new BookmarksEntryAssetRenderer(				_bookmarksEntry, _modelResourcePermission);		Assert.assertFalse(assetRenderer.hasViewPermission(_permissionChecker));	}
@Test    public void testMoveColumnsTo_MoveLeft() throws VetoException {        final MetadataCol52 column1 = new MetadataCol52();        column1.setMetadata("metadata1");        final MetadataCol52 column2 = new MetadataCol52();        column2.setMetadata("metadata2");        final MetadataCol52 column3 = new MetadataCol52();        column3.setMetadata("metadata3");        modelSynchronizer.appendColumn(column1);        modelSynchronizer.appendColumn(column2);        modelSynchronizer.appendColumn(column3);        modelSynchronizer.appendRow();        uiModel.setCellValue(0,                             3,                             new BaseGridCellValue<String>("metadata1"));        uiModel.setCellValue(0,                             4,                             new BaseGridCellValue<String>("metadata2"));        uiModel.setCellValue(0,                             5,                             new BaseGridCellValue<String>("metadata3"));        final GridColumn<?> uiModelColumn1_1 = uiModel.getColumns().get(3);        final GridColumn<?> uiModelColumn2_1 = uiModel.getColumns().get(4);        final GridColumn<?> uiModelColumn3_1 = uiModel.getColumns().get(5);        assertTestMoveColumnsTo(column1,                                column2,                                column3,                                uiModelColumn1_1,                                uiModelColumn2_1,                                uiModelColumn3_1);        //Moving multiple MetaData columns as an unsupported operation as it's impossible via the UI        uiModel.moveColumnsTo(3,                              new ArrayList<GridColumn<?>>() {{                                  add(uiModelColumn2_1);                                  add(uiModelColumn3_1);                              }});        final GridColumn<?> uiModelColumn1_2 = uiModel.getColumns().get(3);        final GridColumn<?> uiModelColumn2_2 = uiModel.getColumns().get(4);        final GridColumn<?> uiModelColumn3_2 = uiModel.getColumns().get(5);        assertTestMoveColumnsTo(column1,                                column2,                                column3,                                uiModelColumn1_2,                                uiModelColumn2_2,                                uiModelColumn3_2);    }
@Test	public void testDelete() throws Exception {		seqStub s = makeSeq();		s.delete(0);		assertEquals(makeSeq("B", "C", "D", "E"), s);		s.delete(-1);		assertEquals(makeSeq("B", "C", "D"), s);		s.delete(5);		assertEquals(makeSeq("B", "C", "D"), s);		s.delete(new int[] { 1, 3 });		assertEquals(makeSeq("B", "D"), s);		s.delete(new int[] { 0, 1, 2, -1 });		assertEquals(emptySeq(), s);		s.delete(0);		s.delete(new int[] { 1, 2, 3 });		assertEquals(emptySeq(), s);	}
@Test    public void testGetValueList() {        final ActionWrapper actionWrapper = mock(ActionWrapper.class);        doReturn(actionWrapper).when(plugin).editingWrapper();        plugin.getValueList();        verify(actionWrapper).getValueList();    }
@Test	public void testGetWorkflowDefinitions() throws Exception {		DDMDataProviderRequest.Builder builder =			DDMDataProviderRequest.Builder.newBuilder();		DDMDataProviderRequest ddmDataProviderRequest = builder.withLocale(			_locale		).withCompanyId(			1L		).build();		_workflowDefinitionsDataProvider.workflowDefinitionManager =			_workflowDefinitionManager;		WorkflowDefinition workflowDefinition1 = mock(WorkflowDefinition.class);		_setUpWorkflowDefinition(			workflowDefinition1, "definition1", 1, "Definition 1");		WorkflowDefinition workflowDefinition2 = mock(WorkflowDefinition.class);		_setUpWorkflowDefinition(			workflowDefinition2, "definition2", 2, "Definition 2");		when(			_workflowDefinitionManager.getActiveWorkflowDefinitions(				1, QueryUtil.ALL_POS, QueryUtil.ALL_POS, null)		).thenReturn(			Arrays.asList(workflowDefinition1, workflowDefinition2)		);		DDMDataProviderResponse ddmDataProviderResponse =			_workflowDefinitionsDataProvider.getData(ddmDataProviderRequest);		Assert.assertTrue(ddmDataProviderResponse.hasOutput("Default-Output"));		Optional<List<KeyValuePair>> optional =			ddmDataProviderResponse.getOutputOptional(				"Default-Output", List.class);		Assert.assertTrue(optional.isPresent());		List<KeyValuePair> keyValuePairs = new ArrayList<KeyValuePair>() {			{				add(new KeyValuePair("no-workflow", "No Workflow"));				add(new KeyValuePair("definition1@1", "Definition 1"));				add(new KeyValuePair("definition2@2", "Definition 2"));			}		};		Assert.assertEquals(keyValuePairs, optional.get());	}
@Test	public void testColumnMapping() throws Exception {		try (JSONBatchEngineImportTaskItemReader				jsonBatchEngineImportTaskItemReader =					_getJSONBatchEngineImportTaskItemReader(						new String[] {							"createDate1", "description1", "id1", "name1"						},						new Object[][] {							{								"\"" + createDateString + "\"",								"\"sample description\"", 1,								"{\"en\": \"sample name\", \"hr\": \"naziv\"}"							}						})) {			validate(				createDateString, "sample description", 1L,				HashMapBuilder.put(					"createDate1", "createDate"				).put(					"description1", "description"				).put(					"id1", "id"				).put(					"name1", "name"				).build(),				jsonBatchEngineImportTaskItemReader.read(),				HashMapBuilder.put(					"en", "sample name"				).put(					"hr", "naziv"				).build());		}	}
@Test	public void testMatches() {		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"*"));		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portal.kernel.service.*"));		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portal.kernel.service.UserService"));		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portal.kernel.service.UserService#getUserById"));		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portal.kernel.service.UserService#get*"));		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portal.kernel.service.*#get*"));		Assert.assertTrue(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"#get*"));		Assert.assertFalse(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portlet.*#get*"));		Assert.assertFalse(			_sapAccessControlPolicy.matches(				"com.liferay.portal.kernel.service.UserService", "getUserById",				"com.liferay.portal.service.*#update*"));	}
@Test	public void testReplacesTwoConsecutiveImageTags() throws Exception {		Mockito.when(			_amImageHTMLTagFactory.create(				"<img data-fileentryid=\"1989\" src=\"adaptable\"/>",				_fileEntry)		).thenReturn(			"<whatever></whatever>"		);		Assert.assertEquals(			"<whatever></whatever><whatever></whatever>",			_htmlContentTransformerImpl.transform(				"<img data-fileentryid=\"1989\" src=\"adaptable\"/>" +					"<img data-fileentryid=\"1989\" src=\"adaptable\"/>"));	}
@Test    public void testWrapAddress() throws Exception {        //given        final long pointer = byteArrayAsPointer(123,                                                -94,                                                43,                                                58,                                                0xFF);        //when        try (final Pointer<Void> voidPointer = wrap(pointer)) {            //then            assertThat(voidPointer.address).isEqualTo(pointer);        }    }
@Test(description = "This test case tests the policy monitoring configuration setting.")    public void testSetPolicyMonitoring() throws InvocationTargetException, IllegalAccessException {        setPolicyMonitoringManager                .invoke(androidDeviceTypeManagerService, androidDeviceConfiguration.getPolicyMonitoring());        Assert.assertEquals(androidDeviceTypeManagerService.getPolicyMonitoringManager() != null,                (androidDeviceConfiguration.getPolicyMonitoring() != null && androidDeviceConfiguration                        .getPolicyMonitoring().isEnabled()),                "Policy Management configurations are added as per the " + "configuration file");        setPolicyMonitoringManager                .invoke(rasberrypiDeviceTypeManagerService, rasberrypiDeviceConfiguration.getPolicyMonitoring());        Assert.assertEquals(rasberrypiDeviceTypeManagerService.getPolicyMonitoringManager() != null,                (rasberrypiDeviceConfiguration.getPolicyMonitoring() != null && rasberrypiDeviceConfiguration                        .getPolicyMonitoring().isEnabled()),                "Policy Management configurations are added as " + "per the " + "configuration file");    }
@Test    public void testToStringDec() throws Exception {        ObjectReference or = this.getObjectReference("Foo");        assertEquals("Failed to format an object.", String.format("MockType@%d", or.uniqueID()),            formatter.toString(or, new HashMap<>()));    }
@Test  public void testConvertUncachedOrganizationNotAvailable() {    UUID id = UUID.randomUUID();    Organization model = converter.apply(id);    assertNotNull(model);    assertEquals(id, model.getId());    assertEquals("N/A", model.getName());    verify(organizationResolver).resolveOrganization(id);  }
@Test    public void testRenameTypeDesc() {        // primitive types are left untouched        assertEquals("I", mOuter.renameTypeDesc("I"));        assertEquals("D", mOuter.renameTypeDesc("D"));        assertEquals("V", mOuter.renameTypeDesc("V"));        // object types that need no renaming are left untouched        assertEquals("Lcom.package.MyClass;", mOuter.renameTypeDesc("Lcom.package.MyClass;"));        assertEquals("Lcom.package.MyClass;", mInner.renameTypeDesc("Lcom.package.MyClass;"));        // object types that match the requirements        assertEquals("Lorg.blah.New;", mOuter.renameTypeDesc("Lcom.pack.Old;"));        assertEquals("Lorg.blah.New$Inner;", mInner.renameTypeDesc("Lcom.pack.Old$Inner;"));        // inner classes match the base type which is being renamed        assertEquals("Lorg.blah.New$Other;", mOuter.renameTypeDesc("Lcom.pack.Old$Other;"));        assertEquals("Lorg.blah.New$Other;", mInner.renameTypeDesc("Lcom.pack.Old$Other;"));        // arrays        assertEquals("[Lorg.blah.New;",  mOuter.renameTypeDesc("[Lcom.pack.Old;"));        assertEquals("[[Lorg.blah.New;", mOuter.renameTypeDesc("[[Lcom.pack.Old;"));                assertEquals("[Lorg.blah.New;",  mInner.renameTypeDesc("[Lcom.pack.Old;"));        assertEquals("[[Lorg.blah.New;", mInner.renameTypeDesc("[[Lcom.pack.Old;"));    }
@Test    public void no_content_no_option() {        Assert.assertEquals(NO_CONTENT_NO_OPTION,                decoder.decode(ByteBufferDumper.fromHexString(NO_CONTENT_NO_OPTION_HEX), null));    }
@Test	public void testExecute_Empty_Command() throws Exception {		String command = "";		exception.expect(java.lang.IllegalArgumentException.class);		Result result = CommandExecutor.executeCommand(command);		assertEquals(1, result.getExitVal());		assertNotNull(result);	}
@Test    public void shouldAnswerCorrectValueType() {        assertSame( Date.class, new DateConverter( monthDayYear ).valueType() );    }
@Test(dataProvider = "marbles")    public void test(int[] marbles, int step) {        assertEquals(step, new MarblesThreeBaskets().minStep(marbles));    }
@Test    public void setSelectedCell() {        int rowIndex = 1;        int columnIndex = 1;        scenarioGridSpy.setSelectedCell(rowIndex, columnIndex);        verify(scenarioGridSpy, times(1)).selectCell(eq(rowIndex), eq(columnIndex), eq(false), eq(false));        verify(scenarioGridLayerMock, times(1)).batch();    }
@Test	public void testCreateName_1()		throws Exception {		ObjectFactory fixture = new ObjectFactory();		String value = "";		JAXBElement<String> result = fixture.createName(value);		assertNotNull(result);		assertEquals("", result.getValue());		assertEquals(false, result.isNil());		assertEquals(true, result.isGlobalScope());		assertEquals(false, result.isTypeSubstituted());	}
@Test    public void testProjectedCS()                            throws IOException {        String s = buildPROJCS( projCRSName, projCRSCode, "Meter", 1.0 );        CRS cs = WKTParser.parse( s );        Assert.assertTrue( cs instanceof ProjectedCRS );        ProjectedCRS projCRS = (ProjectedCRS) cs;        Assert.assertEquals( projCRSName, projCRS.getName() );        Assert.assertEquals( projCRSName + ":" + projCRSCode, projCRS.getCode().getOriginal() );        Assert.assertEquals( "x", projCRS.getAxis()[0].getName() );        Assert.assertEquals( "east", projCRS.getAxis()[0].getOrientationAsString() );        Assert.assertEquals( "y", projCRS.getAxis()[1].getName() );        Assert.assertEquals( "north", projCRS.getAxis()[1].getOrientationAsString() );        IGeographicCRS geographicCRS = projCRS.getGeographicCRS();        Assert.assertEquals( geogCRSName, geographicCRS.getName() );        Assert.assertEquals( geogCRSName + ":" + geogCRSCode, geographicCRS.getCode().getOriginal() );        Assert.assertEquals( "Longitude", geographicCRS.getAxis()[0].getName() );        Assert.assertEquals( "east", geographicCRS.getAxis()[0].getOrientationAsString() );        Assert.assertEquals( "Latitude", geographicCRS.getAxis()[1].getName() );        Assert.assertEquals( "north", geographicCRS.getAxis()[1].getOrientationAsString() );        IDatum datum = geographicCRS.getDatum();        Assert.assertEquals( datumName, datum.getName() );        IEllipsoid ellipsoid = ( (GeodeticDatum) datum ).getEllipsoid();        Assert.assertEquals( ellipsoidName, ellipsoid.getName() );        Assert.assertEquals( ellipsoidName + ":" + ellipsoidCode, ellipsoid.getCode().getOriginal() );        Assert.assertEquals( semiMajorAxis, ellipsoid.getSemiMajorAxis() );        Assert.assertEquals( inverseFlattening, ellipsoid.getInverseFlattening() );        IPrimeMeridian pm = ( (GeodeticDatum) datum ).getPrimeMeridian();        Assert.assertEquals( pmName, pm.getName() );        Assert.assertEquals( pmName + ":" + pmCode, pm.getCode().getOriginal() );        Assert.assertEquals( Unit.DEGREE, pm.getAngularUnit() );        Assert.assertEquals( pmLongitude, pm.getLongitude() );        IProjection proj = projCRS.getProjection();        Assert.assertTrue( proj instanceof LambertConformalConic );        LambertConformalConic lcc = (LambertConformalConic) proj;        Assert.assertEquals( falseEasting, lcc.getFalseEasting() );        Assert.assertEquals( falseNorthing, lcc.getFalseNorthing() );        Assert.assertEquals( DTR * stdParallel1, lcc.getFirstParallelLatitude(), 1e-12 );        Assert.assertEquals( DTR * stdParallel2, lcc.getSecondParallelLatitude(), 1e-12 );        Assert.assertEquals( DTR * lonNatOrigin, lcc.getNaturalOrigin().x );        Assert.assertEquals( DTR * latNatOrigin, lcc.getNaturalOrigin().y );        Assert.assertEquals( scaleFactor, lcc.getScale() );    }
@Test	public void testItemSelectorURLWithFileItemSelectorCriterion()		throws Exception {		PortletURL itemSelectorPortletURL = mock(PortletURL.class);		when(			itemSelectorPortletURL.toString()		).thenReturn(			"itemSelectorPortletURL"		);		when(			_itemSelector.getItemSelectorURL(				Mockito.any(RequestBackedPortletURLFactory.class),				Mockito.anyString(), Mockito.any(ItemSelectorCriterion.class))		).thenReturn(			itemSelectorPortletURL		);		when(			_itemSelector.getItemSelectedEventName(Mockito.anyString())		).thenReturn(			"selectedEventName"		);		when(			_itemSelector.getItemSelectorCriteria(				"fileItemSelectorCriterionFileEntryItemSelectorReturnType")		).thenReturn(			_getFileItemSelectorCriterionFileEntryItemSelectorReturnType()		);		JSONObject originalJSONObject = JSONUtil.put(			"filebrowserImageBrowseLinkUrl",			"fileItemSelectorCriterionFileEntryItemSelectorReturnType");		JSONObject jsonObject = JSONFactoryUtil.createJSONObject(			originalJSONObject.toJSONString());		AMJournalEditorConfigContributor amJournalEditorConfigContributor =			new AMJournalEditorConfigContributor();		ReflectionTestUtil.setFieldValue(			amJournalEditorConfigContributor, "_itemSelector", _itemSelector);		amJournalEditorConfigContributor.populateConfigJSONObject(			jsonObject, _inputEditorTaglibAttributes, _themeDisplay,			_requestBackedPortletURLFactory);		Mockito.verify(			_itemSelector		).getItemSelectorURL(			Mockito.any(RequestBackedPortletURLFactory.class),			Mockito.anyString(), Mockito.any(ItemSelectorCriterion.class)		);	}
@Test	public void testWriteValues() {		DDMFormInstanceRecordCSVWriter ddmFormInstanceRecordCSVWriter =			new DDMFormInstanceRecordCSVWriter();		List<String> values = new ArrayList<String>() {			{				add("value1");				add("2");				add("true");				add("this is a \"string\"");			}		};		String actualValue = ddmFormInstanceRecordCSVWriter.writeValues(values);		Assert.assertEquals(			"value1,2,true,\"this is a \"\"string\"\"\"", actualValue);	}
@Test	public void testAdditionalTypeMappingsWithRootTypeFromContributor()		throws Exception {		_companyIndexFactory.addElasticsearchIndexSettingsContributor(			new BaseIndexSettingsContributor(1) {				@Override				public void contribute(					String indexName, TypeMappingsHelper typeMappingsHelper) {					typeMappingsHelper.addTypeMappings(						indexName, loadAdditionalTypeMappingsWithRootType());				}			});		assertAdditionalTypeMappings();	}
@Test    public void testSerializeException_ContentType()                            throws Exception {        XsltExceptionSerializer xsltExceptionSerializer = createXsltExceptionSerializer();        ByteArrayOutputStream os = new ByteArrayOutputStream();        OWSException ex = new OWSException( EXCEPTION, NO_APPLICABLE_CODE );        XMLExceptionSerializer exceptionSerializer = exceptionSerializer();        HttpResponseBuffer response = responseBuffer( os );        xsltExceptionSerializer.serializeException( response, ex, exceptionSerializer, null );        serialize( xsltExceptionSerializer, os, ex );        verify( response ).setContentType( eq( CONTENT_TYPE ) );    }
@Test    public void invokingConstructorQuietlyWrapsIllegalAccessException() throws Exception {        Constructor<Problematic> constructor = Problematic.class.getDeclaredConstructor();        thrown.expect( ReflectionException.class );        thrown.expectMessage( IllegalAccessException.class.getName() );        instantiate( constructor );    }
@Test    public void queryAlertsByStatus() throws Exception {        int numTenants = 1;        int numTriggers = 5;        int numAlerts = 5;        createTestAlerts(numTenants, numTriggers, numAlerts);        Set<String> tenantIds = new HashSet<>();        tenantIds.add("tenant0");        AlertsCriteria criteria = new AlertsCriteria();        criteria.setStatus(Alert.Status.OPEN);        List<Alert> openAlerts = alerts.getAlerts(tenantIds, criteria, null);        assertEquals(5, openAlerts.size());        criteria.setStatus(Alert.Status.ACKNOWLEDGED);        List<Alert> acknowledgedAlerts = alerts.getAlerts(tenantIds, criteria, null);        assertEquals(5 * 2, acknowledgedAlerts.size());        criteria.setStatus(Alert.Status.RESOLVED);        List<Alert> resolvedAlerts = alerts.getAlerts(tenantIds, criteria, null);        assertEquals(5 * 2, resolvedAlerts.size());        criteria.setStatusSet(Arrays.asList(Alert.Status.ACKNOWLEDGED, Alert.Status.RESOLVED));        List<Alert> ackResolvedAlerts = alerts.getAlerts(tenantIds, criteria, null);        assertEquals(5 * 4, ackResolvedAlerts.size());        deleteTestAlerts(numTenants);    }
@Test    public void first_time_confirmable_message_received() {        CoapMessage in = new CoapMessage(1, MessageType.CONFIRMABLE, 1, 1234, "token".getBytes(), null,                "payload".getBytes());        filter.messageReceived(session, in, readController);        // verify        verify(readController).callReadNextFilter(in);        Mockito.verifyNoMoreInteractions(readController);    }
@Test	public void testValidateExampleValidRequired() throws Exception {		JSONValidator.validate(			_read("example_valid_required.json"), _readJSONSchemaAsStream());	}
@Test    public void testFilterOptionsForConstraintTypeLiteralWhenConstraintValueIsFormula() {        when(plugin.constraintValue()).thenReturn(BaseSingleFieldConstraint.TYPE_RET_VALUE);        final String[] result = page.filterOptionsForConstraintTypeLiteral(OperatorsOracle.EXPLICIT_LIST_OPERATORS);        final List<String> operators = Arrays.asList(result);        assertEquals(0, operators.size());    }
@Test    public void testEncode() throws Exception {        DateTime eventTime = DateTime.now(DateTimeZone.UTC);        MessageSummary msgSummary = new MessageSummary("user", "room",                                                       DateTime.now(DateTimeZone.UTC),                                                       MessageType.BOT_MESSAGE, 1, false);        ChatAlyticsEvent event = new ChatAlyticsEvent(eventTime, msgSummary.getClass().getName(),                                                      msgSummary);        String jsonStr = underTest.encode(event);        ChatAlyticsEvent decodedEvent = new ChatAlyticsEventDecoder().decode(jsonStr);        assertEquals(event, decodedEvent);    }
@Test    public void checkCopy() {        final Path path = mock(Path.class);        final String newFileName = "newFileName";        final String comment = "comment";        service.copy(path,                     newFileName,                     comment);        verify(copyService,               times(1)).copy(eq(path),                              eq(newFileName),                              eq(comment));    }
@Test    public void fieldConstraintLinksToActionUpdateField() {        //Columns: Row#[0], Description[1], Condition[2], Action[3]        final GuidedDecisionTable52 dt1 = new GuidedDecisionTable52();        final Pattern52 p1 = new Pattern52();        p1.setBoundName("$f");        p1.setFactType("Fact");        final ConditionCol52 p1c1 = new ConditionCol52();        p1c1.setFactField("field");        p1.getChildColumns().add(p1c1);        dt1.getConditions().add(p1);        final ActionSetFieldCol52 asf = new ActionSetFieldCol52();        asf.setBoundName("$f");        asf.setFactField("field");        dt1.getActionCols().add(asf);        //Columns: Row#[0], Description[1], Condition[2]        final GuidedDecisionTable52 dt2 = new GuidedDecisionTable52();        final Pattern52 p2 = new Pattern52();        p2.setBoundName("$f");        p2.setFactType("Fact");        final ConditionCol52 p2c1 = new ConditionCol52();        p2c1.setFactField("field");        p2.getChildColumns().add(p2c1);        dt2.getConditions().add(p2);        manager.link(dt1,                     dt2,                     (s, t) -> {                         assertEquals(4,                                      s);                         assertEquals(3,                                      t);                     });    }
@Test public void testNotifyLoadingFinished() {		// Arrange:		final WebFragment.OnWebContentLoadingListener mockListener = mock(WebFragment.OnWebContentLoadingListener.class);		final WebFragment fragment = new WebFragment();		fragment.setOnWebContentLoadingListener(mockListener);		// Act:		fragment.notifyLoadingFinished("test_url");		// Assert:		verify(mockListener).onLoadingFinished("test_url");		verifyNoMoreInteractions(mockListener);	}
@Test    public void testParseEncodingsWithoutSupportedRequestConfiguration() {        DeegreeWMS deegreeWmsConfig = prepareSupportedRequestsWithoutSupportedRequestConfiguration();        SupportedEncodings unlimitedSupportedEncodings = webFeatureService.parseEncodings( deegreeWmsConfig );        assertThat( unlimitedSupportedEncodings, CoreMatchers.instanceOf( UnlimitedSupportedEncodings.class ) );    }
@Test    @SuppressWarnings("unchecked")    public void onContextMenu_CellContextMenu() {        final GuidedDecisionTableView.Presenter dtPresenter = makeDecisionTable();        final GridData uiModel = dtPresenter.getView().getModel();        final GridColumn uiColumn = new BaseGridColumn(mock(GridColumn.HeaderMetaData.class),                                                       mock(GridColumnRenderer.class),                                                       100.0);        uiModel.appendColumn(uiColumn);        when(columnInformation.getColumn()).thenReturn(uiColumn);        when(modellerPresenter.getAvailableDecisionTables()).thenReturn(new HashSet<GuidedDecisionTableView.Presenter>() {{            add(dtPresenter);        }});        final ContextMenuHandler handler = contextMenuSupport.getContextMenuHandler(modellerPresenter);        handler.onContextMenu(event);        verify(rowContextMenu,               never()).show(any(Integer.class),                             any(Integer.class));        verify(cellContextMenu,               times(1)).show(any(Integer.class),                              any(Integer.class));    }
@Test    public void testGetEmojiIcons() {        Map<String, String> emojis = ImmutableMap.of("emoji1", "http://emoji1.com",                                                     "emoji2", "http://emoji2.com");        when(chatApiDao.getEmojis()).thenReturn(emojis);        EmojiMap result = underTest.getEmojiIcons();        assertEquals(emojis, result.getCustomEmojis());        assertNotNull(result.getUnicodeEmojis());        ObjectMapper objectMapper = JsonObjectMapperFactory.createObjectMapper();        Map<String, String> expectedUnicodeEmojis = LocalEmojiUtils.getUnicodeEmojis(objectMapper);        assertEquals(expectedUnicodeEmojis, result.getUnicodeEmojis());    }
@Test	public void testAroundWriteWithExtensionContextWithExtendedType()		throws IOException {		JAXRSExtensionContextUtil.TestObject testObject =			JAXRSExtensionContextUtil.getTestObject();		ArgumentCaptor<ExtendedEntity> argumentCaptor = ArgumentCaptor.forClass(			ExtendedEntity.class);		Mockito.when(			_mockedWriterInterceptorContext.getEntity()		).thenReturn(			testObject		);		Mockito.when(			_mockedWriterInterceptorContext.getType()		).thenReturn(			(Class)testObject.getClass()		);		_entityExtensionWriterInterceptor.aroundWriteTo(			_mockedWriterInterceptorContext);		Mockito.verify(			_mockedWriterInterceptorContext		).setEntity(			argumentCaptor.capture()		);		ExtendedEntity extendedEntity = argumentCaptor.getValue();		Assert.assertEquals(testObject, extendedEntity.getEntity());		Assert.assertEquals(			JAXRSExtensionContextUtil.getTestExtendedProperties(),			extendedEntity.getExtendedProperties());		Mockito.verify(			_mockedWriterInterceptorContext		).setGenericType(			eq(ExtendedEntity.class)		);		Mockito.verify(			_mockedWriterInterceptorContext		).proceed();	}
@Test    public void onOtherwiseCellNoCellSelected() throws VetoException {        dtPresenter.onOtherwiseCell();        verify(synchronizer,               never()).setCellOtherwiseState(any(Integer.class),                                              any(Integer.class));    }
@Test  public void testAdjustedCount()  {    TestReader sliceReader = new TestReader();    Assert.assertEquals("min", 1, sliceReader.getAdjustedCount(1));    Assert.assertEquals("max", 16, sliceReader.getAdjustedCount(16));    Assert.assertEquals("max-1", 8, sliceReader.getAdjustedCount(15));    Assert.assertEquals("min+1", 2, sliceReader.getAdjustedCount(2));    Assert.assertEquals("between 1", 4, sliceReader.getAdjustedCount(4));    Assert.assertEquals("between 2", 4, sliceReader.getAdjustedCount(7));    Assert.assertEquals("between 2", 8, sliceReader.getAdjustedCount(12));  }
@Test(expected = ConfigurationModelListenerException.class)	public void testMaximumNumberOfTagsPerAssetNegative()		throws ConfigurationModelListenerException {		Dictionary<String, Object> properties = new HashMapDictionary<>();		properties.put("maximumNumberOfTagsPerAsset", -1);		_assetAutoTaggerSystemConfigurationModelListener.onBeforeSave(			RandomTestUtil.randomString(), properties);	}
@Test  public void testGetDateCreated() throws Exception {    assertEquals(created, job.getDateCreated());  }
@Test	public void testEquals() {		PathHolder pathHolder = new PathHolder(Paths.get("testFile"));		Assert.assertTrue(pathHolder.equals(pathHolder));		Assert.assertFalse(pathHolder.equals(new Object()));		Assert.assertTrue(			pathHolder.equals(new PathHolder(Paths.get("testFile"))));		Assert.assertFalse(			pathHolder.equals(new PathHolder(Paths.get("anotherFile"))));	}
@Test    public void testCreationTime() {        final long before = System.currentTimeMillis();        final long creation = (new DummySession(service)).getCreationTime();        final long after = System.currentTimeMillis();        assertTrue(creation <= after);        assertTrue(creation >= before);    }
@Test    public void getSelectedScenarioGridPanelSIMULATION() {        when(backgroundGridWidgetSpy.isSelected()).thenReturn(false);        when(scenarioGridWidgetSpy.isSelected()).thenReturn(true);        assertEquals(Optional.of(scenarioGridPanelMock), scenarioSimulationContextLocal.getSelectedScenarioGridPanel());    }
@Test  public void testCheckReadPermissionForFactRecordWithAccessModePublic() throws Exception {    when(accessController.hasPermission(credentials, viewThreatIntelFact)).thenReturn(true);    context.checkReadPermission(new FactRecord().setAccessMode(FactRecord.AccessMode.Public));    verify(accessController).hasPermission(credentials, viewThreatIntelFact);  }
@Test    public void onDeleteItem() {        elementPresenter.onDeleteItem(elementView1Mock);        verify(propertyPresenterMock, times(1)).deleteProperties(eq(ELEMENT1_ID));        verify(itemContainerMock, times(1)).removeFromParent();        assertFalse(elementViewListLocal.contains(elementView1Mock));        verify(collectionPresenterMock, times(1)).toggleEditingStatus(eq(false));    }
@Test    void testMisc() throws Exception {        final String animal1 = "?at";        final String animal2 = "?o?se";        final String animal3 = "*s";        final String vehicle1 = "J*";        final String vehicle2 = "????";        assertTrue(SearchPattern.wildcardMatch(animal1, "bat"));        assertTrue(SearchPattern.wildcardMatch(animal1, "cat"));        assertTrue(SearchPattern.wildcardMatch(animal2, "horse"));        assertTrue(SearchPattern.wildcardMatch(animal2, "mouse"));        assertTrue(SearchPattern.wildcardMatch(animal3, "dogs"));        assertTrue(SearchPattern.wildcardMatch(animal3, "horses"));        assertTrue(SearchPattern.wildcardMatch(vehicle1, "Jeep"));        assertTrue(SearchPattern.wildcardMatch(vehicle2, "ford"));        Assertions.assertFalse(SearchPattern.wildcardMatch(vehicle2, "chevy"));        assertTrue(SearchPattern.wildcardMatch("*", "cAr"));        assertTrue(SearchPattern.wildcardMatch("*/foo", "/bar/foo"));    }
@Test    public void test4_3FitInside16_9_SameWidth() throws Exception {        RectangleF r169 = new RectangleF(0,0,720 * AspectHelper.ar_16_9, 720);        RectangleF r43 = AspectHelper.fitWidth(AspectHelper.RectF_4_3, r169);        System.out.println(r169);        System.out.println(r43);        // 4/3 inside of 16/9 (same width)        // should be 0,-120,1280,960        Rectangle r = r43.asIntRect();        assertEquals(0, r.x);        assertEquals(-120, r.y);        assertEquals(1280, r.width);        assertEquals(960, r.height);        assertEquals(r.width, (int)r169.width);        assertEquals(r43.getAR(), AspectHelper.ar_4_3, AspectHelper.ar_tolerance);    }
@Test	public void testApplyTrue1() {		EqualsFunction equalsFunction = new EqualsFunction();		Assert.assertTrue(equalsFunction.apply("1", new BigDecimal(1)));	}
@Test	public void testInvalidGetReviews() {		when(service.getReviewsByPlace(review.getPlace())).thenReturn(reviews);		when(service.getReviewsByPlace(review2.getPlace())).thenReturn(reviews);		assertEquals(controller.GetReviews(review2), controller.GetReviews(review));	}
@Test(expected = IOException.class)	public void testWriteNullIndexedRecord() throws Exception {		String openApiModule = "/headless-openapi-module/v1.0";		String endpoint = "/bigdecimal/{id}";		LiferayOutputProperties testLiferayOutputProperties =			_getLiferayOutputProperties(				Operation.Update, openApiModule, _OAS_URL, endpoint, "id");		testLiferayOutputProperties.setupProperties();		LiferayWriter liferayWriter = new LiferayWriter(			new LiferayWriteOperation(				new LiferaySink(), testLiferayOutputProperties),			testLiferayOutputProperties);		liferayWriter.write(null);	}
@Test	public void testRewordAlterColumnTypeNullWhenNull() throws Exception {		_nullable = true;		Assert.assertEquals(			"alter table DLFolder modify userName VARCHAR2(75 CHAR);\n",			buildSQL("alter_column_type DLFolder userName VARCHAR(75) null;"));	}
@Test    public void testGetActive_userInvalidMethod() throws Exception {        DateTimeFormatter dtf = DateTimeUtils.PARAMETER_WITH_DAY_DTF.withZone(dtZone);        String startTimeStr = dtf.print(mentionTime.minusDays(1));        String endTimeStr = dtf.print(mentionTime.plusDays(1));        Map<String, Double> scores = underTest.getActive(startTimeStr, endTimeStr,                                                         DimensionType.USER.toString(),                                                         ActiveMethod.ToMV.toString(), "10",                                                         "true");        assertFalse(scores.isEmpty());    }
@Test  public void testBuildNegativeStateQuery() throws Exception {    WorkflowQuery q = new WorkflowQuery().withSeriesId("series1").withoutState(WorkflowState.RUNNING);    String solrQuery = dao.createQuery(q, Permissions.Action.READ.toString(), true);    String expected = "oc_org:mh_default_org AND seriesid:series1 AND (-state:running AND *:*)";    assertEquals(expected, solrQuery);  }
@Test    public void test_V110_EXAMPLE_5()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE_5 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        List<Query> queries = getFeature.getQueries();        FeatureIdQuery query = (FeatureIdQuery) queries.get( 0 );        assertEquals( "InWaterA_1M.1013", query.getFeatureIds()[0] );        assertEquals( "InWaterA_1M.1014", query.getFeatureIds()[1] );        assertEquals( "InWaterA_1M.1015", query.getFeatureIds()[2] );    }
@Test	public void testUncompressedITXTChunksArePreserved() throws Exception {		InputStream inputStream = _createInputStream(			_PNG_SIGNATURE, _UNCOMPRESSED_ITXT_CHUNK);		byte[] bytes =			new byte[_PNG_SIGNATURE.length + _UNCOMPRESSED_ITXT_CHUNK.length];		inputStream.read(bytes);		Assert.assertArrayEquals(			ArrayUtil.append(_PNG_SIGNATURE, _UNCOMPRESSED_ITXT_CHUNK), bytes);		Assert.assertEquals(-1, inputStream.read());	}
@Test    public void checkDelete() {        final Path path = mock(Path.class);        final String comment = "comment";        service.delete(path,                       comment);        verify(deleteService,               times(1)).delete(eq(path),                                eq(comment));    }
@Test	public void testJSONDeserialization() throws Exception {		String jsonString = read("analytics_events_message.json");		AnalyticsEventsMessage analyticsEventsMessage = _jsonObjectMapper.map(			jsonString);		Assert.assertEquals(			"DataSourceId", analyticsEventsMessage.getDataSourceId());		Map<String, String> context = analyticsEventsMessage.getContext();		Assert.assertEquals("v1", context.get("k1"));		Assert.assertEquals("v2", context.get("k2"));		List<AnalyticsEventsMessage.Event> events =			analyticsEventsMessage.getEvents();		Assert.assertEquals(events.toString(), 1, events.size());		AnalyticsEventsMessage.Event event = events.get(0);		Assert.assertEquals("ApplicationId", event.getApplicationId());		Assert.assertEquals(			ISO8601Utils.parse(				"2017-11-20T19:52:56.723Z", new ParsePosition(0)),			event.getEventDate());		Assert.assertEquals("View", event.getEventId());		Map<String, String> properties = event.getProperties();		Assert.assertEquals("v1", properties.get("k1"));		Assert.assertEquals("v2", properties.get("k2"));		Assert.assertEquals("1.0", analyticsEventsMessage.getProtocolVersion());		Assert.assertEquals("UserId", analyticsEventsMessage.getUserId());	}
@Test(expected = DuplicateCommentException.class)	public void testAddDuplicateComment() throws Exception {		setUpExistingComment(_BODY);		_mbCommentManagerImpl.addComment(			_USER_ID, _GROUP_ID, _CLASS_NAME, _ENTRY_ID, _BODY,			_serviceContextFunction);	}
@Test  public void testDistributeJob() throws Exception {    Set<String> mpeIds = new LinkedHashSet<String>();    mpeIds.add("presenter-delivery");    boolean checkAvailability = true;    List<String> args = new LinkedList<String>();    args.add("channelId");    args.add(MediaPackageParser.getAsXml(mp));    args.add(gson.toJson(mpeIds));    args.add(Boolean.toString(checkAvailability));    EasyMock.expect(            serviceRegistry.createJob(                    AwsS3DistributionServiceImpl.JOB_TYPE,                    AwsS3DistributionServiceImpl.Operation.Distribute.toString(),                    args, AwsS3DistributionServiceImpl.DEFAULT_DISTRIBUTE_JOB_LOAD            )).andReturn(null).once();    EasyMock.replay(serviceRegistry);    service.distribute("channelId", mp, "presenter-delivery");    EasyMock.verify(serviceRegistry);  }
@Test  public void testEndWithComment() {    assertEquals(InterpreterResult.Code.SUCCESS, repl.interpret("val c=1\n//comment", context).code());  }
@Test	public void testGetViewInPanelURL() {		MockLiferayPortletRenderRequest mockLiferayPortletRenderRequest =			new MockLiferayPortletRenderRequest();		MockLiferayPortletURL mockLiferayPortletURL =			new MockLiferayPortletURL();		mockLiferayPortletRenderRequest.setAttribute(			"null" + StringPool.DASH + WebKeys.CURRENT_PORTLET_URL,			mockLiferayPortletURL);		mockLiferayPortletRenderRequest.setAttribute(			WebKeys.LOCALE, LocaleUtil.US);		ContentDashboardDropdownItemsProvider			contentDashboardDropdownItemsProvider =				new ContentDashboardDropdownItemsProvider(					_http, _language, mockLiferayPortletRenderRequest,					new MockLiferayPortletRenderResponse(), new PortalImpl());		ContentDashboardItem contentDashboardItem = _getContentDashboardItem(			Collections.singletonList(				_getContentDashboardItemAction(					"viewInPanel",					ContentDashboardItemAction.Type.VIEW_IN_PANEL,					"validURL")));		List<DropdownItem> dropdownItems =			contentDashboardDropdownItemsProvider.getDropdownItems(				contentDashboardItem);		Stream<DropdownItem> stream = dropdownItems.stream();		DropdownItem viewInPanelDropdownItem = stream.filter(			dropdownItem -> Objects.equals(				String.valueOf(dropdownItem.get("label")), "viewInPanel")		).findFirst(		).orElseThrow(			() -> new AssertionError()		);		Map<String, Object> data =			(Map<String, Object>)viewInPanelDropdownItem.get("data");		Assert.assertEquals("showMetrics", String.valueOf(data.get("action")));		Assert.assertEquals("validURL", String.valueOf(data.get("fetchURL")));	}
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseTimestampUnsupportedType() {        TimestampsParser.parseTimestampMap(Date.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]");    }
@Test    public void testRDRLFile() {        final Path pathSource = mock(Path.class);        final Path pathDestination = mock(Path.class);        when(pathSource.toURI()).thenReturn("file://p0/src/main/resources/MyFile.rdrl");        when(pathDestination.toURI()).thenReturn("file://p0/src/main/resources/MyNewFile.rdrl");        when(pathDestination.getFileName()).thenReturn("MyNewFile.rdrl");        when(ioService.readAllString(any(org.uberfire.java.nio.file.Path.class))).thenReturn(drl);        helper.postProcess(pathSource,                           pathDestination);        final ArgumentCaptor<String> drlArgumentCaptor = ArgumentCaptor.forClass(String.class);        verify(ioService,               times(1)).write(any(org.uberfire.java.nio.file.Path.class),                               drlArgumentCaptor.capture(),                               any(CommentedOption.class));        final String newDrl = drlArgumentCaptor.getValue();        assertNotNull(newDrl);        assertTrue(newDrl.contains("MyNewFile"));    }
@Test	public void testDeactivate() {		// Test 1, destroy when cluster link is enabled		ClusterMasterExecutorImpl clusterMasterExecutorImpl =			new ClusterMasterExecutorImpl();		MockClusterExecutor mockClusterExecutor = new MockClusterExecutor(true);		clusterMasterExecutorImpl.setClusterExecutorImpl(mockClusterExecutor);		clusterMasterExecutorImpl.activate();		List<ClusterEventListener> clusterEventListeners =			mockClusterExecutor.getClusterEventListeners();		Assert.assertEquals(			clusterEventListeners.toString(), 1, clusterEventListeners.size());		clusterMasterExecutorImpl.deactivate();		Assert.assertTrue(			clusterEventListeners.toString(), clusterEventListeners.isEmpty());		// Test 2, destory when cluster link is disabled		clusterMasterExecutorImpl = new ClusterMasterExecutorImpl();		clusterMasterExecutorImpl.setClusterExecutorImpl(			new MockClusterExecutor(false));		clusterMasterExecutorImpl.activate();		clusterMasterExecutorImpl.deactivate();	}
@Test	public void testCountAll() {		Assert.assertEquals(11, _uadHierarchyDisplay.countAll(_USER_ID));		Assert.assertEquals(8, _uadHierarchyDisplay.countAll(_USER_ID_OTHER));	}
@Test    public void testExampleConfigurationProvidesExampleFiles() throws Exception {        final ConfigurationFileManager subject = getTestJenkinsConfiguration();        subject.initConfiguration();        for (final String expectedFileName : new String[] { "example.txt", "example/example.txt", "emptyExample" }) {            assertTrue(new File(tempDir.getRoot(), expectedFileName).exists());        }    }
@Test  public void testWorkflowConfiguration() throws Exception {    String templateName = "templateConfig";    String templateContent = "This is an email address: ${workflowConfig['emailAddress']}";    String result = service.applyTemplate(templateName, templateContent, workflowInstance);    Assert.assertEquals("This is an email address: user@domain.com", result);  }
@Test    public void testPrev() throws Exception {        assertTrue(mMonth.prev());        assertEquals(LocalDate.parse("2014-09-01"), mMonth.getFrom());        assertEquals(LocalDate.parse("2014-09-30"), mMonth.getTo());        assertEquals(LocalDate.parse("2014-09-01"), mMonth.getWeeks().get(0).getFrom());    }
@Test  public void testTraverseObjectByTypeValue() throws Exception {    String type = "ip";    String value = "27.13.4.125";    when(getTiService().traverseGraph(any(), isA(TraverseByObjectTypeValueRequest.class))).then(i -> {      TraverseByObjectTypeValueRequest request = i.getArgument(1);      assertEquals(type, request.getType());      assertEquals(value, request.getValue());      return StreamingResultSet.<String>builder().setValues(ListUtils.list("something")).build();    });    TraverseByObjectTypeValueRequest request = new TraverseByObjectTypeValueRequest()            .setQuery("g.values('value')");    Response response = target(String.format("/v1/object/%s/%s/traverse", type, value)).request().post(Entity.json(request));    JsonNode payload = getPayload(response);    assertEquals(200, response.getStatus());    assertTrue(payload.isArray());    assertEquals(1, payload.size());    assertEquals("something", payload.get(0).asText());    verify(getTiService(), times(1)).traverseGraph(notNull(), isA(TraverseByObjectTypeValueRequest.class));  }
@SuppressWarnings("unchecked")    @Test    public void testFilter9()                            throws XMLStreamException, FactoryConfigurationError, IOException {        Filter result = parse( "v100/testfilter9.xml" );        OperatorFilter opFilter = (OperatorFilter) result;        PropertyIsEqualTo prop = (PropertyIsEqualTo) opFilter.getOperator();        ValueReference propName = (ValueReference) prop.getParameter1();        assertEquals( "PROPA", propName.getAsText() );        Add add = (Add) prop.getParameter2();        ValueReference propB = (ValueReference) add.getParameter1();        assertEquals( "PROPB", propB.getAsText() );        Literal<PrimitiveValue> lit = (Literal<PrimitiveValue>) add.getParameter2();        assertEquals( "100", lit.getValue().toString() );    }
@Test    public void testCreateAlreadyExisting() throws URISyntaxException {        when(ioService.exists(any(org.uberfire.java.nio.file.Path.class))).thenReturn(true);        try {            drlService.create(path, filename, "", "");            fail("FileAlreadyExistsException was not thrown when expected!");        } catch (FileAlreadyExistsException faee) {            // this is correct behavior, anz other exception is a problem        }        verify(ioService, never()).write(any(org.uberfire.java.nio.file.Path.class), anyString(), any(OpenOption.class));    }
@Test	public void testSerializationWithNonemptyParameterList() throws Exception {		List<DDMFormFieldType> ddmFormFieldTypes = new ArrayList<>();		DDMFormFieldType ddmFormFieldType = getMockedDDMFormFieldType();		ddmFormFieldTypes.add(ddmFormFieldType);		String actualJSON = serialize(ddmFormFieldTypes);		JSONAssert.assertEquals(createExpectedJSON(), actualJSON, false);	}
@Test    public void testEthGasPrice() throws Exception {        web3j.platonGasPrice().send();        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"platon_gasPrice\",\"params\":[],\"id\":1}");    }
@Test	public void testGetName() {		SoyManager soyManager = _soyTestHelper.getSoyManager();		Assert.assertEquals(			TemplateConstants.LANG_TYPE_SOY, soyManager.getName());	}
@Test    public void testGetEmojis() throws Exception {        WebResource emojiResource = mock(WebResource.class);        when(mockResource.path("emoji.list")).thenReturn(emojiResource);        URI emojiURI = Resources.getResource("slack_api_responses/emoji.list.txt").toURI();        Path emojiPath = Paths.get(emojiURI);        String emojiResponseStr = new String(Files.readAllBytes(emojiPath));        doReturn(emojiResponseStr).when(underTest).getJsonResultWithRetries(emojiResource,                                                                            apiRetries);        Map<String, String> result = underTest.getEmojis();        assertEquals(3, result.size());        assertTrue(result.containsKey("bowtie"));        assertEquals("https://my.slack.com/emoji/bowtie/46ec6f2bb0.png", result.get("bowtie"));        assertTrue(result.containsKey("squirrel"));        assertEquals("https://my.slack.com/emoji/squirrel/f35f40c0e0.png", result.get("squirrel"));        assertTrue(result.containsKey("shipit"));        assertEquals("https://my.slack.com/emoji/squirrel/f35f40c0e0.png", result.get("shipit"));    }
@Test    public void parameterNotNullWithMissingParameterName() throws Exception {        exception.expect(IllegalArgumentException.class);        exception.expectMessage("You must provide a parameter name!");        Assert.assertNotNull("", null);    }
@Test    void testEmptyCgroupFile() throws IOException {        DockerUtils dockerUtils = new DockerUtils(DockerUtilsTest.class.getResource("/com/amazonaws/xray/utils/emptyCgroup"));        String id = dockerUtils.getContainerId();        Assertions.assertNull(id);    }
@Test	public void testGetMessageId() {		Assert.assertEquals(			20646,			MBMailUtil.getMessageId(				"<mb_message.10640.20646.1425017183884@gmail.com>"));	}
@Test    public void testNameOverrideEnvironmentVariable() throws IOException, ServletException {        environmentVariables.set(SegmentNamingStrategy.NAME_OVERRIDE_ENVIRONMENT_VARIABLE_KEY, "pass");        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter("fail");        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(false);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mock(FilterChain.class);        servletFilter.doFilter(request, response, chain);        ArgumentCaptor<Segment> emittedSegment = ArgumentCaptor.forClass(Segment.class);        verify(AWSXRay.getGlobalRecorder().getEmitter(), Mockito.times(1)).sendSegment(emittedSegment.capture());        Assert.assertEquals("pass", emittedSegment.getValue().getName());        environmentVariables.set(SegmentNamingStrategy.NAME_OVERRIDE_ENVIRONMENT_VARIABLE_KEY, null);    }
@Test    public void threeSM() {        Assert.assertEquals(RxComprehensions.doSwitchMap(zero(3), one(true), two("result"), three("other")).blockingFirst(), "other");    }
@Test	public void testGetEditableEditableValues() throws Exception {		String editableValues = _read(			"fragment_entry_link_editable_editable_values.json");		Assert.assertEquals(			_objectMapper.readTree(				_read(					"fragment_entry_link_editable_editable_values_segments_" +						"experience_0.json")),			_objectMapper.readTree(				EditableValuesTransformerUtil.getEditableValues(					editableValues, 0)));		Assert.assertEquals(			_objectMapper.readTree(				_read(					"fragment_entry_link_editable_editable_values_segments_" +						"experience_1.json")),			_objectMapper.readTree(				EditableValuesTransformerUtil.getEditableValues(					editableValues, 1)));		Assert.assertEquals(			_objectMapper.readTree(				_read(					"fragment_entry_link_editable_editable_values_segments_" +						"experience_2.json")),			_objectMapper.readTree(				EditableValuesTransformerUtil.getEditableValues(					editableValues, 2)));	}
@Test    public void noPopOverWhenEventNotOverDecisionTableColumn() {        when(modellerPresenter.getAvailableDecisionTables()).thenReturn(new HashSet<GuidedDecisionTableView.Presenter>() {{            add(dtPresenter1);        }});        when(event.getX()).thenReturn(150);        when(event.getY()).thenReturn(50);        when(dtView1.getComputedLocation()).thenReturn(new Point2D(0,                                                                   0));        handler.onNodeMouseMove(event);        verify(columnPopOverPresenter,               never()).show(any(GuidedDecisionTableModellerView.class),                             any(GuidedDecisionTableView.Presenter.class),                             any(Integer.class));    }
@Test	public void testDeserializeWithEmptyAttributes() throws Exception {		JSONObject jsonObject = JSONUtil.put("uri", "http://localhost");		JSONObject attributesJSONObject = JSONFactoryUtil.createJSONObject();		jsonObject.put("attributes", attributesJSONObject);		AMImageSerializer amImageSerializer = new AMImageSerializerImpl();		InputStream inputStream = Mockito.mock(InputStream.class);		AdaptiveMedia<AMImageProcessor> adaptiveMedia =			amImageSerializer.deserialize(				jsonObject.toString(), () -> inputStream);		Assert.assertEquals(			new URI("http://localhost"), adaptiveMedia.getURI());		Optional<Integer> heightValueOptional = adaptiveMedia.getValueOptional(			AMImageAttribute.AM_IMAGE_ATTRIBUTE_HEIGHT);		Assert.assertFalse(heightValueOptional.isPresent());		Optional<Integer> widthValueOptional = adaptiveMedia.getValueOptional(			AMImageAttribute.AM_IMAGE_ATTRIBUTE_WIDTH);		Assert.assertFalse(widthValueOptional.isPresent());	}
@Test    public void populateExpression() {        when(jsonStringMock.stringValue()).thenReturn("test-string");        collectionEditorPresenterSpy.populateExpression(jsonValueMock);        verify(collectionViewMock, times(1)).setExpression("test-string");    }
@Test    public void givenUrlBarHidingIsSet_thenUrlBarHidingComposerIsAdded() {        simpleChromeCustomTabsIntentBuilder.withUrlBarHiding();        verify(mockComposers).add(any(UrlBarHidingComposer.class));    }
@Test	public void testValidationWithValidDouble() throws Exception {		DDMFormField ddmFormField = DDMFormTestUtil.createDDMFormField(			"double", "double", "numeric", "double", true, false, false);		LocalizedValue localizedValue = new LocalizedValue(LocaleUtil.US);		localizedValue.addString(LocaleUtil.US, "2");		DDMFormFieldValue ddmFormFieldValue =			DDMFormValuesTestUtil.createDDMFormFieldValue(				"double", localizedValue);		_numericDDMFormFieldValueValidator.validate(			ddmFormField, ddmFormFieldValue.getValue());	}
@Test	public void testMapToResults() throws Exception {		Results<Individual> results = _individualJSONObjectMapper.mapToResults(			_read("get-individuals.json"));		Assert.assertEquals(2, results.getTotal());		List<Individual> individuals = results.getItems();		Individual individual = individuals.get(0);		Assert.assertEquals("337338657439093764", individual.getId());		List<Individual.DataSourceIndividualPK> dataSourceIndividualPKs =			individual.getDataSourceIndividualPKs();		Assert.assertEquals(			dataSourceIndividualPKs.toString(), 8,			dataSourceIndividualPKs.size());		Individual.DataSourceIndividualPK dataSourceIndividualPK =			dataSourceIndividualPKs.get(0);		Assert.assertEquals(			"335470356976861111", dataSourceIndividualPK.getDataSourceId());		Assert.assertEquals(			"LIFERAY", dataSourceIndividualPK.getDataSourceType());		List<String> individualPKs = dataSourceIndividualPK.getIndividualPKs();		Assert.assertEquals(individualPKs.toString(), 13, individualPKs.size());		Assert.assertTrue(			individualPKs.contains("bd537758-b907-f00f-91c2-b18dd46e3b32"));		List<String> individualSegmentIds =			individual.getIndividualSegmentIds();		Assert.assertEquals(			individualSegmentIds.toString(), 3, individualSegmentIds.size());		Assert.assertEquals("335470926072595570", individualSegmentIds.get(0));	}
@Test(expected = AccessDeniedException.class)  public void testTraverseGraphByObjectSearchWithoutPermission() throws Exception {    doThrow(AccessDeniedException.class).when(securityContext).checkPermission(TiFunctionConstants.traverseThreatIntelFact);    delegate.handle(new TraverseByObjectSearchRequest());  }
@Test	public void testItemSelectorURLWhenNoFileBrowserImageBrowseLinkUrl()		throws Exception {		JSONObject originalJSONObject = JSONUtil.put(			"filebrowserImageBrowseLinkUrl", StringPool.BLANK);		JSONObject jsonObject = JSONFactoryUtil.createJSONObject(			originalJSONObject.toJSONString());		AMJournalEditorConfigContributor amJournalEditorConfigContributor =			new AMJournalEditorConfigContributor();		ReflectionTestUtil.setFieldValue(			amJournalEditorConfigContributor, "_itemSelector", _itemSelector);		amJournalEditorConfigContributor.populateConfigJSONObject(			jsonObject, _inputEditorTaglibAttributes, _themeDisplay,			_requestBackedPortletURLFactory);		Mockito.verify(			_itemSelector, Mockito.never()		).getItemSelectorURL(			Mockito.any(RequestBackedPortletURLFactory.class),			Mockito.anyString(), Mockito.any(ItemSelectorCriterion.class)		);		JSONObject expectedJSONObject = JSONFactoryUtil.createJSONObject(			originalJSONObject.toJSONString());		JSONAssert.assertEquals(			expectedJSONObject.toJSONString(), jsonObject.toJSONString(), true);	}
@Test	public void testViewPermissionGrantedForSearchResultButDeniedForParentFolder()		throws Exception {		List<TermCollector> termCollectors = addFoldersAndCreateTermCollectors(			"zeroFolderId", null, "null", "", "   ", "assert", "volatile",			"alpha");		setUpMultipleTermCollectors(termCollectors);		FolderSearchFacetDisplayContext folderSearchFacetDisplayContext =			createDisplayContext(null);		List<FolderSearchFacetTermDisplayContext>			folderSearchFacetTermDisplayContexts =				folderSearchFacetDisplayContext.					getFolderSearchFacetTermDisplayContexts();		String nameFrequencyString = buildNameFrequencyString(			folderSearchFacetTermDisplayContexts);		Assert.assertEquals(			folderSearchFacetTermDisplayContexts.toString(),			"assert:6|volatile:7|alpha:8", nameFrequencyString);		Assert.assertEquals(			termCollectors.toString(), 36,			getTotalTermCollectorFrequencyCount(termCollectors));		Assert.assertEquals(			folderSearchFacetTermDisplayContexts.toString(), 21,			getTotalFolderSearchFacetTermDisplayContextFrequencyCount(				folderSearchFacetTermDisplayContexts));	}
@Test    public void testGetAttributeKeys() {        GraphStore store = new GraphStore();        Column column = generateBasicColumn(store);        NodeImpl node = new NodeImpl("0", store);        Set<String> pk = node.getAttributeKeys();        Assert.assertTrue(pk.contains(column.getId()));        Assert.assertEquals(pk.size(), 1 + getElementPropertiesLength());    }
@Test	public void testFacotorize() {		final int MAX_ITERATIONS = 1000000;		// Эмуляция создания "сервлета с состоянием"		CountingFactorizer factorizer = new CountingFactorizer();		// Эмуляция обращения к "сервлету с состоянием" из 20 потоков		ExecutorService executor = Executors.newFixedThreadPool(20);		for (int i = 0; i < MAX_ITERATIONS; i++) {			Runnable worker = new FactorizerWorkerThread(factorizer);			executor.execute(worker);		}		executor.shutdown();		while (!executor.isTerminated()) {		}		// На моей машине тест гарантированно падает начиная с миллиона итераций		assertEquals(MAX_ITERATIONS, factorizer.getCount());	}
@Test(expected = OWSException.class)    public void testDoCreateStoredQuery_NullManagedStoredQueryDirectory()                            throws Exception {        List<FeatureType> featureTypes = featureTypes();        StoredQueryHandler storedQueryHandler = new StoredQueryHandler( mockWFS( featureTypes ), new ArrayList<URL>(),                                                                        null );        String id = "mangedStoredQuery";        CreateStoredQuery request = createStoredQuery( id );        ByteArrayOutputStream outStream = new ByteArrayOutputStream();        XMLStreamWriter xmlStreamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter( outStream );        storedQueryHandler.doCreateStoredQuery( request, mockHttpResponseBuffer( xmlStreamWriter ) );        xmlStreamWriter.close();    }
@Test(description = "Handle request with device type URI with MDM ceritificate",            dependsOnMethods = "testHandleRequestWithoutDeviceType")    public void testHandleSuccessfulRequestMDMCertificate() throws Exception {        HashMap<String, String> transportHeaders = new HashMap<>();        transportHeaders.put(AuthConstants.MDM_SIGNATURE, "some cert");        setMockClient();        this.mockClient.setResponse(getDCRResponse());        this.mockClient.setResponse(getAccessTokenReponse());        this.mockClient.setResponse(getValidationResponse());        boolean response = this.handler.handleRequest(createSynapseMessageContext("<empty/>", this.synapseConfiguration,                transportHeaders, "https://test.com/testservice/api/testdevice"));        Assert.assertTrue(response);        this.mockClient.reset();    }
@Test	public void testGetMasterClusterNodeId() throws Exception {		// Test 1, master to slave		ClusterMasterExecutorImpl clusterMasterExecutorImpl =			new ClusterMasterExecutorImpl();		MockClusterExecutor mockClusterExecutor = new MockClusterExecutor(true);		clusterMasterExecutorImpl.setClusterExecutorImpl(mockClusterExecutor);		clusterMasterExecutorImpl.activate();		Assert.assertEquals(			mockClusterExecutor.getLocalClusterNodeId(),			clusterMasterExecutorImpl.getMasterClusterNodeId(true));		Assert.assertTrue(clusterMasterExecutorImpl.isMaster());		mockClusterExecutor.addClusterNode(			_TEST_ADDRESS,			new ClusterNode(_TEST_CLUSTER_NODE_ID, InetAddress.getLocalHost()));		MockClusterMasterTokenTransitionListener			mockClusterMasterTokenTransitionListener =				new MockClusterMasterTokenTransitionListener();		clusterMasterExecutorImpl.addClusterMasterTokenTransitionListener(			mockClusterMasterTokenTransitionListener);		Address oldCoordinatorAddress =			mockClusterExecutor.getCoordinatorAddress();		mockClusterExecutor.setCoordinatorAddress(_TEST_ADDRESS);		Assert.assertEquals(			_TEST_CLUSTER_NODE_ID,			clusterMasterExecutorImpl.getMasterClusterNodeId(true));		Assert.assertFalse(clusterMasterExecutorImpl.isMaster());		Assert.assertTrue(			mockClusterMasterTokenTransitionListener.				isMasterTokenReleasedNotified());		// Test 2, slave to master		mockClusterExecutor.setCoordinatorAddress(oldCoordinatorAddress);		Assert.assertEquals(			mockClusterExecutor.getLocalClusterNodeId(),			clusterMasterExecutorImpl.getMasterClusterNodeId(true));		Assert.assertTrue(clusterMasterExecutorImpl.isMaster());		Assert.assertTrue(			mockClusterMasterTokenTransitionListener.				isMasterTokenAcquiredNotified());	}
@Test    public void testParseTimestampMapDouble() {        TimestampDoubleMap expected = new TimestampDoubleMap();        expected.put(1.0, 1d);        expected.put(3.0, 2d);        expected.put(5.0, 3d);        expected.put(6.0, 4d);        assertEqualTimestampMaps(expected, TimestampsParser.parseTimestampMap(Double.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]"));        assertEqualTimestampMaps(expected, TimestampsParser.parseTimestampMap(double.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]"));    }
@Test  public void testCreanupWOHwithoutPreservedFlavor() throws WorkflowOperationException, MediaPackageException {    Map<String, String> wfInstConfig = new Hashtable<>();    wfInstConfig.put(CleanupWorkflowOperationHandler.DELETE_EXTERNAL, "true");    MediaPackageBuilder mpBuilder = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder();    MediaPackage mp = mpBuilder.createNew();    MediaPackageElement track1 = addElementToMediaPackage(mp, MediaPackageElement.Type.Track,            "presenter", "source", null);    track1.setURI(UrlSupport.uri(HOSTNAME_NODE1, WFR_URL_PREFIX, WorkingFileRepository.COLLECTION_PATH_PREFIX,            "asset", mp.getIdentifier().toString(), track1.getIdentifier(), "track.mp4"));    cleanupWOH.start(createWorkflowInstance(wfInstConfig, mp), null);    Assert.assertEquals("Media package shouldn't contain any elements", 0, mp.getElements().length);    Assert.assertEquals("One file wasn't deleted on remote repository", 1, deletedFilesURIs.size());  }
@Test    public void testGetActive_roomInvalidMethod() throws Exception {        DateTimeFormatter dtf = DateTimeUtils.PARAMETER_WITH_DAY_DTF.withZone(dtZone);        String startTimeStr = dtf.print(mentionTime.minusDays(1));        String endTimeStr = dtf.print(mentionTime.plusDays(1));        Map<String, Double> scores =  underTest.getActive(startTimeStr, endTimeStr,                                                          DimensionType.ROOM.toString(),                                                          ActiveMethod.ToMV.toString(), "10",                                                          "true");        assertFalse(scores.isEmpty());    }
@Test    public void testLockLHSNegative() {        assertFalse(ruleModeller.lockLHS());    }
@Test	public void testMapToResults() throws Exception {		Results<IndividualSegment> results =			_individualSegmentJSONObjectMapper.mapToResults(				_read("get-individual-segments.json"));		Assert.assertEquals(2, results.getTotal());		List<IndividualSegment> individualSegments = results.getItems();		IndividualSegment individualSegment = individualSegments.get(0);		Assert.assertEquals("324849894334623092", individualSegment.getId());		Assert.assertEquals("British Developers", individualSegment.getName());		Assert.assertEquals(8L, individualSegment.getIndividualCount());		Author author = individualSegment.getAuthor();		Assert.assertEquals("132184", author.getId());	}
@Test    public void should_describe_table() throws Exception {        //Given        String query = "DESCRIBE TABLE live_data.complex_table;";        final String expected = reformatHtml(                readTestResource("/scalate/DescribeTable_live_data_complex_table.html"));        //When        final InterpreterResult actual = interpreter.interpret(query, intrContext);        //Then        assertThat(actual.code()).isEqualTo(Code.SUCCESS);        assertThat(reformatHtml(actual.message())).isEqualTo(expected);    }
@Test	public void testInvalidAddreview() {		assertEquals(null, service.addReview(review2));	}
@Test    public void initMenu() {        initMenu(gridContextMenuSpy);    }
@Test    public void getModelSuccessCallbackMethodRule() {        when(settingsMock.getType()).thenReturn(ScenarioSimulationModel.Type.RULE);        when(scenarioSimulationEditorPresenterMock.getJsonModel(eq(scenarioSimulationModelMock))).thenReturn(JSON_MODEL);        scenarioSimulationEditorKogitoWrapperSpy.onModelSuccessCallbackMethod(scenarioSimulationModelMock);        verify(scenarioSimulationEditorPresenterMock, times(1)).sendNotification(eq(ScenarioSimulationEditorConstants.INSTANCE.ruleScenarioNotSupportedNotification()), eq(NotificationEvent.NotificationType.WARNING), eq(false));        verify(scenarioSimulationEditorPresenterMock, times(1)).setPackageName(eq(ScenarioSimulationEditorKogitoWrapper.DEFAULT_PACKAGE));        verify(((BaseKogitoEditor) scenarioSimulationEditorKogitoWrapperSpy), times(1)).setOriginalContentHash(eq(JSON_MODEL.hashCode()));        verify(scenarioSimulationEditorPresenterMock, times(1)).getModelSuccessCallbackMethod(dataManagementStrategyCaptor.capture(), eq(scenarioSimulationModelMock));        assertTrue(dataManagementStrategyCaptor.getValue() instanceof KogitoDMODataManagementStrategy);        verify(scenarioSimulationEditorPresenterMock, times(1)).showDocks(eq(PlaceStatus.CLOSE));    }
@Test    public void get() {        SimpleOptionNameMap<Integer> map = new SimpleOptionNameMap<>();        assertNull( map.get( KEY ) );        map.put( KEY, VALUE );        assertEquals( VALUE, map.get( KEY ) );    }
@Test    public void testSaveAuto() throws Exception {        MockMultipartFile firstFile = new MockMultipartFile("data", "filename.txt", "text/plain","mock file test".getBytes());//        FileUtils.writeByteArrayToFile(new File("file.txt"), firstFile.getBytes());        MockMultipartFile secondFile = new MockMultipartFile("data", "other-file-name.data", "text/plain", "some other type".getBytes());        MockMultipartFile jsonFile = new MockMultipartFile("json", "", "application/json", "{\"json\": \"someValue\"}".getBytes());        mockMvc.perform(MockMvcRequestBuilders.fileUpload("/upload").file(firstFile).file(secondFile).file(jsonFile)                .param("random", "4")).andExpect(status().is(200)).andExpect(content().string("success"));        System.out.println("=====================");        files(firstFile, secondFile);    }
@Test	public void testFiltersOutAdaptiveMediasWithNoWidth() throws Exception {		int auto = 0;		_addConfigs(			_createAMImageConfigurationEntry(				"normal", 2048, 1024, StringPool.BLANK),			_createAMImageConfigurationEntry(				"wauto", 900, auto, StringPool.BLANK));		_addAdaptiveMedias(			_fileEntry, _createAdaptiveMedia("normal", 1334, 750, "normalURL"));		List<MediaQuery> mediaQueries = _mediaQueryProviderImpl.getMediaQueries(			_fileEntry);		Assert.assertEquals(mediaQueries.toString(), 1, mediaQueries.size());		_assertMediaQuery(mediaQueries.get(0), "normalURL", 750);	}
@Test    public void givenTrue$setChatsEnabled_whenQuery_thenShouldCallNativeApiWithEnabled() {        // given        PowerMockito.mockStatic(Chats.class);        // when        chatsModule.setEnabled(true);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Chats.setState(Feature.State.ENABLED);    }
@Test	public void testGetJavaScriptLoaderModuleForSoy() throws Exception {		Bundle bundle = _mockBundleWithPackageFile();		MVCCommandCache<?> mvcCommandCache = _mockEmptyMVCCommandCache();		FriendlyURLMapper friendlyURLMapper = Mockito.mock(			FriendlyURLMapper.class);		SoyPortletHelper soyPortletHelper = new SoyPortletHelper(			bundle, mvcCommandCache, friendlyURLMapper);		Assert.assertEquals(			"package-with-version@1.0.0/SoyCommand.soy",			soyPortletHelper.getJavaScriptLoaderModule("SoyCommand"));	}
@Test	public void testGetSegmentsEntryIdsWithContextAndEmptyAcClientUserId() {		Context context = new Context();		context.put(			SegmentsAsahRequestContextContributor.				KEY_SEGMENTS_ANONYMOUS_USER_ID,			StringPool.BLANK);		Assert.assertArrayEquals(			new long[0],			_asahSegmentsEntryProvider.getSegmentsEntryIds(				RandomTestUtil.randomLong(), RandomTestUtil.randomString(),				RandomTestUtil.randomLong(), context));	}
@Test	public void testCheckboxMultipleFieldTemplateContext() throws Exception {		// Dynamic data mapping form		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		String formFieldLabel = String.format(_HTML_WRAPPER, "label");		String formFieldTip = String.format(_HTML_WRAPPER, "tip");		String formFieldOption = String.format(_HTML_WRAPPER, "option");		ddmForm.addDDMFormField(			DDMFormTestUtil.createDDMFormField(				"Field1", formFieldLabel, "checkbox-multiple", "string", false,				false, true, formFieldTip, formFieldOption));		mockDDMFormFieldTypeServicesTracker(			"checkbox-multiple",			_ddmFormFieldTemplateContextContributorTestHelper.				createCheckboxMultipleDDMFormFieldTemplateContextContributor());		// Dynamic data mapping form layout		DDMFormLayout ddmFormLayout = new DDMFormLayout();		ddmFormLayout = createDDMFormLayoutPage(			ddmFormLayout, "Page 1", "Page 1 Description", "Field1");		// Template context		DDMFormPagesTemplateContextFactory ddmFormPagesTemplateContextFactory =			createDDMFormPagesTemplateContextFactory(				ddmForm, ddmFormLayout, null, false, true, true);		List<Object> pages = ddmFormPagesTemplateContextFactory.create();		Map<String, Object> fieldTemplateContext = getFieldTemplateContext(			pages);		Assert.assertEquals(formFieldLabel, fieldTemplateContext.get("label"));		List<Map<String, String>> options =			(List<Map<String, String>>)fieldTemplateContext.get("options");		Map<String, String> optionField = options.get(0);		Assert.assertEquals(formFieldOption, optionField.get("label"));		Assert.assertEquals(formFieldTip, fieldTemplateContext.get("tip"));	}
@Test    public void isPropertyAssigned() {        factMappingDescription.getExpressionElements().clear();        assertTrue(scenarioGridSpy.isPropertyAssigned(false, factMappingDescription));        assertTrue(scenarioGridSpy.isPropertyAssigned(true, factMappingDescription));        factMappingDescription.getExpressionElements().add(new ExpressionElement(TEST));        assertTrue(scenarioGridSpy.isPropertyAssigned(false, factMappingDescription));        assertTrue(scenarioGridSpy.isPropertyAssigned(true, factMappingDescription));        factMappingGiven.getExpressionElements().clear();        assertFalse(scenarioGridSpy.isPropertyAssigned(false, factMappingGiven));        assertFalse(scenarioGridSpy.isPropertyAssigned(true, factMappingGiven));        factMappingGiven.getExpressionElements().add(new ExpressionElement("test"));        assertFalse(scenarioGridSpy.isPropertyAssigned(false, factMappingGiven));        assertTrue(scenarioGridSpy.isPropertyAssigned(true, factMappingGiven));        factMappingInteger.getExpressionElements().clear();        assertFalse(scenarioGridSpy.isPropertyAssigned(false, factMappingInteger));        assertTrue(scenarioGridSpy.isPropertyAssigned(true, factMappingInteger));    }
@Test    public void getSelectedScenarioGridModelNone() {        when(backgroundGridWidgetSpy.isSelected()).thenReturn(false);        when(scenarioGridWidgetSpy.isSelected()).thenReturn(false);        assertEquals(Optional.empty(), scenarioSimulationContextLocal.getSelectedScenarioGridModel());    }
@Test	public void testGetEmptyDDMFormTest() {		Assert.assertEquals(new DDMForm(), _ddmFormTaglibUtil.getDDMForm(0, 0));	}
@Test	public void testAroundWritePageWithExtensionContextWithNoExtendedType()		throws IOException {		Page<Object> page = Page.of(Collections.singleton(new Object()));		Mockito.when(			_writerInterceptorContext.getEntity()		).thenReturn(			page		);		Mockito.when(			_writerInterceptorContext.getGenericType()		).thenReturn(			new GenericType<Page<Object>>() {			}.getType()		);		Mockito.when(			_writerInterceptorContext.getType()		).thenReturn(			(Class)Object.class		);		_pageEntityExtensionWriterInterceptor.aroundWriteTo(			_writerInterceptorContext);		Mockito.verify(			_writerInterceptorContext, Mockito.never()		).setEntity(			any()		);		Mockito.verify(			_writerInterceptorContext, Mockito.never()		).setGenericType(			any()		);		Mockito.verify(			_writerInterceptorContext		).proceed();	}
@Test    public void internalFlushInvalidHeader() {        scenarioHeaderTextAreaDOMElement.internalFlush(MULTIPART_VALUE);        verify(scenarioGridModelMock, never()).updateHeader(eq(COLUMN_INDEX), eq(ROW_INDEX), eq(MULTIPART_VALUE));    }
@Test	public void testSerializationWithEmptyParameterList() throws Exception {		List<DDMFormFieldType> ddmFormFieldTypes = Collections.emptyList();		String actualJSON = serialize(ddmFormFieldTypes);		Assert.assertEquals("[]", actualJSON);	}
@Test    public void appendPatternAndConditionColumn() throws VetoException {        reset(modellerPresenter);        final Pattern52 pattern = new Pattern52();        pattern.setFactType("FactType");        final ConditionCol52 condition = new ConditionCol52();        condition.setFactField("field");        condition.setHeader("header");        dtPresenter.appendColumn(pattern,                                 condition);        verify(synchronizer,               times(1)).appendColumn(eq(pattern),                                      eq(condition));        verify(refreshConditionsPanelEvent,               times(1)).fire(any(RefreshConditionsPanelEvent.class));        verify(modellerPresenter,               times(1)).updateLinks();    }
@Test    public void testPrepareJrxmlAndReadInputParameters()                            throws ProcessletException {        List<CodeType> processedIds = new ArrayList<CodeType>();        InputStream jrxml = TestDataTableContentProviderTest.class.getResourceAsStream( "../templateWithPropsFromResourceBundle.jrxml" );        Map<String, Object> params = new HashMap<String, Object>();        List<ProcessletInput> inputs = new ArrayList<ProcessletInput>();        inputs.add( new LiteralInputImpl(                                          propertiesContentProvider.getInputDefinition( new HashMap<String, ParameterDescription>() ),                                          null, null, "de", null ) );        ProcessletInputs in = new ProcessletInputs( inputs );        propertiesContentProvider.prepareJrxmlAndReadInputParameters( jrxml, params, in, processedIds, parameters );        assertEquals( 1, processedIds.size() );        assertEquals( 4, params.size() );    }
@Test  public void testGetOriginWithUnknownNameReturnsNull() {    assertNull(getOriginManager().getOrigin((String) null));    assertNull(getOriginManager().getOrigin(""));    assertNull(getOriginManager().getOrigin("Unknown"));  }
@Test	public void execute() throws Exception {		for (final PINService pinService : serviceManager.getServices(PINService.class)) {			final WFSPINSTATUS pinStatus = new PINStatusCommand(pinService).call();			System.out.println(pinStatus);		}	}
@Test    public void onClickEvent() {        ClickEvent mockClickEvent = mock(ClickEvent.class);        executableMenuItemPresenter.onClickEvent(mockClickEvent, mockLIElement);        verify(mockClickEvent, times(1)).preventDefault();        verify(mockClickEvent, times(1)).stopPropagation();        verify(mockparent, times(1)).hide();        verify(executableMenuItemPresenter, times(1)).fireEvent(eq(mockLIElement));    }
@Test(expected = IllegalArgumentException.class)  public void testParsePropertiesFileNotExists() throws Exception {    parser.parse("/non/existing/file.properties");  }
@Test    public void testBackfillRooms() {        stormConf.put(ConfigurationConstants.CHATALYTICS_CONFIG.txt, YamlUtils.writeYaml(config));        IChatAlyticsDAO dbDao = mock(IChatAlyticsDAO.class);        IChatApiDAO slackDao = mock(IChatApiDAO.class);        underTest.open(chatConfig, slackDao, dbDao, context, collector);        Map<String, User> users = ImmutableMap.of("u1", new User("u1", "email", false, false, false,                                                                 "name", "mention_name", null,                                                                 DateTime.now(), DateTime.now(),                                                                 null, null, null, null));        Room room = new Room("r1", "room", null, DateTime.now(), DateTime.now(), null, false, false,                             null, null);        Map<String, Room> rooms = ImmutableMap.of("r1", room);        Interval interval = new Interval(DateTime.now().minusDays(1), DateTime.now());        Message message = new Message(DateTime.now(), "from", "u1", "test message", "r1",                                      MessageType.MESSAGE);        List<Message> messages = Lists.newArrayList(message);        when(slackDao.getMessages(interval.getStart(), interval.getEnd(), room)).thenReturn(messages);        underTest.backfillRooms(users, rooms, interval);        verify(slackDao).getMessages(interval.getStart(), interval.getEnd(), room);        verifyNoMoreInteractions(slackDao);        verify(collector).emit(any(Values.class));        verifyNoMoreInteractions(collector);    }
@Test  public void testUseWebserver() throws ConfigurationException {    StaticFileRestService staticFileRestService = new StaticFileRestService();    staticFileRestService.activate(getComponentContext(null, 100000000L));    assertFalse(staticFileRestService.useWebserver);    staticFileRestService.activate(getComponentContext("", 100000000L));    assertFalse(staticFileRestService.useWebserver);    staticFileRestService.activate(getComponentContext("false", 100000000L));    assertFalse(staticFileRestService.useWebserver);    staticFileRestService.activate(getComponentContext("other", 100000000L));    assertFalse(staticFileRestService.useWebserver);    staticFileRestService.activate(getComponentContext("true", 100000000L));    assertTrue(staticFileRestService.useWebserver);  }
@Test    public void addMenuItem() {        String id = "TEST-ID";        String label = "TEST-LABEL";        String i18n = "TEST-i18n";        baseMenu.addMenuItem(id, label, i18n);        verify(contextMenuDropdownMock, times(1)).appendChild(menuItemPresenterMock.getLabelMenuElement(id, label));    }
@Test    public void testMoveRowsMoveDown() throws VetoException {        modelSynchronizer.appendRow();        modelSynchronizer.appendRow();        modelSynchronizer.appendRow();        final GridRow uiRow0 = uiModel.getRow(0);        final GridRow uiRow1 = uiModel.getRow(1);        final GridRow uiRow2 = uiModel.getRow(2);        final List<DTCellValue52> row0 = model.getData().get(0);        final List<DTCellValue52> row1 = model.getData().get(1);        final List<DTCellValue52> row2 = model.getData().get(2);        uiModel.moveRowsTo(2,                           new ArrayList<GridRow>() {{                               add(uiRow0);                               add(uiRow1);                           }});        assertEquals(uiRow2,                     uiModel.getRow(0));        assertEquals(uiRow0,                     uiModel.getRow(1));        assertEquals(uiRow1,                     uiModel.getRow(2));        assertEquals(row2,                     model.getData().get(0));        assertEquals(row0,                     model.getData().get(1));        assertEquals(row1,                     model.getData().get(2));    }
@Test  public void testPoll() {    assertTrue(Utils.poll(() -> true, 1, 1));    assertFalse(Utils.poll(() -> false, 1, 1));  }
@Test    public void oneFM() {        Assert.assertEquals(RxComprehensions.doFlatMap(zero(1), one(true)).toBlocking().first(), true);    }
@Test	public void testToContentDashboardItemTypeOptionalByJSONObject()		throws PortalException {		ContentDashboardItemType contentDashboardItemType =			_getContentDashboardItemType();		ContentDashboardItemTypeFactory contentDashboardItemTypeFactory =			_getContentDashboardItemTypeFactory(contentDashboardItemType);		ContentDashboardItemTypeFactoryTracker			contentDashboardItemTypeFactoryTracker =				_getContentDashboardItemTypeFactoryTracker(					contentDashboardItemType, contentDashboardItemTypeFactory);		Optional<? extends ContentDashboardItemType>			contentDashboardItemTypeOptional =				ContentDashboardItemTypeUtil.toContentDashboardItemTypeOptional(					contentDashboardItemTypeFactoryTracker,					JSONFactoryUtil.createJSONObject(						contentDashboardItemType.toJSONString(LocaleUtil.US)));		Assert.assertEquals(			contentDashboardItemType, contentDashboardItemTypeOptional.get());	}
@Test  public void testTemplateContent() throws Exception {    String templateName = "template";    String templateContent = "This is the media package: ${mediaPackage.identifier}";    String result = service.applyTemplate(templateName, templateContent, workflowInstance);    Assert.assertEquals("This is the media package: 3e7bb56d-2fcc-4efe-9f0e-d6e56422f557", result);  }
@Test	public void testSplitNoDefinitions() {		List<ResultRowSplitterEntry> resultRowSplitterEntryList =			_resultRowSplitter.split(_resultRows);		Assert.assertEquals(			resultRowSplitterEntryList.toString(), 0,			resultRowSplitterEntryList.size());	}
@Test	public void shouldHandleClose() {		initStubs();		this.watcher.onClose(this.mockKubernetesClientException);		verify(this.mockPodResource).watch(this.watcher);	}
@Test    public void unRegisterTestToolsCallback() {        DefaultPlaceRequest request = new DefaultPlaceRequest(TestToolsPresenter.IDENTIFIER);        List<Command> commands = spy(new ArrayList<>());        commands.add(populateTestToolsCommand);        assertTrue(commands.contains(populateTestToolsCommand));        when(placeManagerMock.getOnOpenCallbacks(request)).thenReturn(commands);        scenarioSimulationEditorBusinessClientWrapper.unRegisterTestToolsCallback();        verify(placeManagerMock, times(1)).getOnOpenCallbacks(eq(request));        assertFalse(commands.contains(populateTestToolsCommand));    }
@Test(expected = IllegalArgumentException.class)	public void testOnCreateFragmentThatIsNotProvided() {		// Arrange:		final TestFactory factory = new TestFactory();		// Act:		factory.onCreateFragment(TestFactory.FRAGMENT_NOT_PROVIDED);	}
@Test	public void testGetDescendantJsonArray() {		JsonFinder jsonFinder = new JsonFinder();		JsonObject jsonObject = readObject("openapi.json");		JsonArray descendantJsonArray = jsonFinder.getDescendantJsonArray(			"invalid>path>to>array", jsonObject);		Assert.assertNotNull(			"Expect non null json array object", descendantJsonArray);		Assert.assertEquals(			"Expect empty json array", JsonValue.EMPTY_JSON_ARRAY,			descendantJsonArray);		descendantJsonArray = jsonFinder.getDescendantJsonArray(			"components>schemas>Option>properties>fieldType>enum", jsonObject);		Assert.assertEquals(			"Expected json array size", 6, descendantJsonArray.size());	}
@Test public void testGetAnnotationHandler() {		// Arrange:		final TestFragment fragment = new TestFragment();		// Act + Assert:		assertThat(fragment.getAnnotationHandler(), is(notNullValue()));	}
@Test	public void testReturnsTheContentTransformedByAChainOfContentTransformers()		throws Exception {		String intermediateTransformedContent = RandomTestUtil.randomString();		_registerContentTransformer(			_contentTransformerContentType, _ORIGINAL_CONTENT,			intermediateTransformedContent);		String finalTransformedContent = RandomTestUtil.randomString();		_registerContentTransformer(			_contentTransformerContentType, intermediateTransformedContent,			finalTransformedContent);		Assert.assertEquals(			finalTransformedContent,			_contentTransformerHandlerImpl.transform(				_contentTransformerContentType, _ORIGINAL_CONTENT));	}
@Test	public void testReadLine() throws Exception {		// With \r		UnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader("abc\rde"), 5);		Assert.assertEquals("abc", unsyncBufferedReader.readLine());		Assert.assertEquals(4, _indexField.getInt(unsyncBufferedReader));		// With \n		unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader("abc\nde"), 5);		Assert.assertEquals("abc", unsyncBufferedReader.readLine());		Assert.assertEquals(4, _indexField.getInt(unsyncBufferedReader));		// With \r\n		unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader("abc\r\nde"), 5);		Assert.assertEquals("abc", unsyncBufferedReader.readLine());		Assert.assertEquals(5, _indexField.getInt(unsyncBufferedReader));		// Without \r or \n		unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader("abc"), 5);		Assert.assertEquals("abc", unsyncBufferedReader.readLine());		Assert.assertEquals(0, _indexField.getInt(unsyncBufferedReader));		// Empty		Assert.assertNull(unsyncBufferedReader.readLine());		// Load multiple times for one line		unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader("abcdefghijklmn\r"), 5);		Assert.assertEquals("abcdefghijklmn", unsyncBufferedReader.readLine());		Assert.assertEquals(5, _indexField.getInt(unsyncBufferedReader));		unsyncBufferedReader = new UnsyncBufferedReader(			new StringReader("abcdefghijklmn\r"), 5);		Assert.assertEquals('a', unsyncBufferedReader.read());		Assert.assertEquals('b', unsyncBufferedReader.read());		unsyncBufferedReader.mark(1);	}
@Test    public void testSelectILike() {        final List<List<Object>> res = _personDao.findAll(SQL.select( Person.NAME, Person.HEIGTH).from( Person.TABLE).where( Person.LASTNAME.ilike( "pa%")).orderBy( Person.ID));        Assert.assertEquals(res, RESULT_LIKE);    }
@Test    public void testGetWeightNoValue() {        Configuration config = new Configuration();        config.setEdgeWeightType(TimestampDoubleMap.class);        GraphStore graphStore = GraphGenerator.generateTinyGraphStore(config);        Edge e = graphStore.getEdge("0");        e.setAttribute("weight", null);        Assert.assertEquals(e.getWeight(graphStore.getView()), GraphStoreConfiguration.DEFAULT_DYNAMIC_EDGE_WEIGHT_WHEN_MISSING);    }
@Test    public void testGetAllMessageTypes() throws Exception {        DateTimeFormatter dtf = DateTimeUtils.PARAMETER_WITH_DAY_DTF.withZone(dtZone);        String startTimeStr = dtf.print(mentionTime.minusDays(1));        String endTimeStr = dtf.print(mentionTime.plusDays(1));        List<MessageSummary> result = underTest.getAllMessageSummaries(startTimeStr, endTimeStr,                                                                       null, null, null, null);        assertEquals(sums.size(), result.size());        Set<MessageSummary> resultMessageSummarySet = Sets.newHashSet(result);        for (MessageSummary expectedMessageSummary : sums) {            assertTrue(resultMessageSummarySet.contains(expectedMessageSummary));        }        result = underTest.getAllMessageSummaries(startTimeStr, endTimeStr, null, null,                                                  BOT_MESSAGE.toString(), null);        assertEquals(1, result.size());        assertEquals(BOT_MESSAGE, result.get(0).getValue());    }
@Test    public void fiveFM() {        Assert.assertEquals(RxComprehensions.doFlatMap(zero(1), one(true), two("result"), three("other"), four("other".length()), five("other".length() < 5)).blockingFirst(), false);    }
@Test	public void testFullTextQueryStringQueryParserPageable() {		Page<Post> result = postDao.fullTextQuery("content:first",				new QueryParser(Version.LUCENE_35, "content", new StopAnalyzer(						Version.LUCENE_35)), new PageRequest(0, 10));		List<Post> list = result.getContent();		assertThat(list.size(), equalTo(2));	}
@Test	public void testToJSONObject() {		HistogramMetric histogramMetric = new HistogramMetric(			new Date(), RandomTestUtil.randomDouble());		HistoricalMetric historicalMetric = new HistoricalMetric(			Collections.singletonList(histogramMetric),			RandomTestUtil.randomDouble());		JSONObject jsonObject = historicalMetric.toJSONObject();		Assert.assertEquals(			JSONUtil.put(				"histogram",				JSONUtil.put(					JSONUtil.put(						"key", _formatDate(histogramMetric.getKey())					).put(						"value", histogramMetric.getValue()					))			).put(				"value", historicalMetric.getValue()			).toJSONString(),			jsonObject.toJSONString());	}
@Test    public void testAppend() throws VetoException {        final LimitedEntryBRLActionColumn column = new LimitedEntryBRLActionColumn();        column.setHeader("col1");        modelSynchronizer.appendColumn(column);        assertEquals(1,                     model.getActionCols().size());        assertEquals(4,                     uiModel.getColumns().size());        assertTrue(uiModel.getColumns().get(3) instanceof BooleanUiColumn);        assertEquals(true,                     ((BaseMultipleDOMElementUiColumn) uiModel.getColumns().get(3)).isEditable());    }
@Test  public void stringsFromJSONArrayTest() throws Exception  {    List<String> expected = Lists.newArrayList("a", "b", "c");    JSONArray ja = new JSONArray();    ja.put("a").put("b").put("c");    List<String> result = SchemaUtils.getStringsFromJSONArray(ja);    Assert.assertEquals(expected, result);  }
@Test    public void testsetShort() throws Exception {        //given        final short s0 = 0x4567;        final short s1 = (short) 0x8901;        //when        final Pointer<Short> shortPointer = Pointer.nref(s0,                                                         s1);        //then        assertThat(JNITestUtil.getByte(shortPointer.address)).isEqualTo((byte) 0x67);        assertThat(JNITestUtil.getByte(shortPointer.address + 1)).isEqualTo((byte) 0x45);        assertThat(JNITestUtil.getByte(shortPointer.address + 2)).isEqualTo((byte) 0x01);        assertThat(JNITestUtil.getByte(shortPointer.address + 3)).isEqualTo((byte) 0x89);    }
@Test    public void testGetOperator() {        final String expectedOperator = "operator";        when(plugin.getFactField()).thenReturn("factField");        when(plugin.editingCol()).thenReturn(editingCol);        when(editingCol.getOperator()).thenReturn(expectedOperator);        final String operator = page.getOperator();        verify(plugin).editingCol();        verify(editingCol).getOperator();        assertEquals(expectedOperator,                     operator);    }
@Test	public void testGridFieldTemplateContext() throws Exception {		// Dynamic data mapping form		DDMForm ddmForm = DDMFormTestUtil.createDDMForm();		String formFieldLabel = String.format(_HTML_WRAPPER, "label");		String formFieldTip = String.format(_HTML_WRAPPER, "tip");		String formFieldOption = String.format(_HTML_WRAPPER, "option");		ddmForm.addDDMFormField(			DDMFormTestUtil.createGridDDMFormField(				"Field1", formFieldLabel, "grid", "string", false, false, true,				formFieldTip, formFieldOption));		mockDDMFormFieldTypeServicesTracker(			"grid",			_ddmFormFieldTemplateContextContributorTestHelper.				createGridDDMFormFieldTemplateContextContributor());		// Dynamic data mapping form layout		DDMFormLayout ddmFormLayout = new DDMFormLayout();		ddmFormLayout = createDDMFormLayoutPage(			ddmFormLayout, "Page 1", "Page 1 Description", "Field1");		// Template context		DDMFormValues ddmFormValues = DDMFormValuesTestUtil.createDDMFormValues(			ddmForm);		ddmFormValues.addDDMFormFieldValue(			DDMFormValuesTestUtil.createDDMFormFieldValue(				"Field1", new UnlocalizedValue("{}")));		DDMFormPagesTemplateContextFactory ddmFormPagesTemplateContextFactory =			createDDMFormPagesTemplateContextFactory(				ddmForm, ddmFormLayout, ddmFormValues, false, true, true);		List<Object> pages = ddmFormPagesTemplateContextFactory.create();		Map<String, Object> fieldTemplateContext = getFieldTemplateContext(			pages);		Assert.assertEquals(formFieldLabel, fieldTemplateContext.get("label"));		List<Map<String, String>> columns =			(List<Map<String, String>>)fieldTemplateContext.get("columns");		Map<String, String> columnField = columns.get(0);		Assert.assertEquals(formFieldOption, columnField.get("label"));		List<Map<String, String>> rows =			(List<Map<String, String>>)fieldTemplateContext.get("rows");		Map<String, String> rowField = rows.get(0);		Assert.assertEquals(formFieldOption, rowField.get("label"));		Assert.assertEquals(formFieldTip, fieldTemplateContext.get("tip"));	}
@Test    public void testNewActionWrapperWhenColumnIsAnActionSetFactWrapper() throws Exception {        when(model.getTableFormat()).thenReturn(GuidedDecisionTable52.TableFormat.EXTENDED_ENTRY);        when(presenter.getModel()).thenReturn(model);        final ActionWorkItemWrapper wrapper = plugin.newActionWorkItemWrapper(mock(ActionWorkItemSetFieldCol52.class));        assertTrue(wrapper instanceof ActionWorkItemSetWrapper);    }
@Test    public void testIsCompleteWhenValueOptionsPageIsNotCompleted() throws Exception {        when(plugin.isValueOptionsPageCompleted()).thenReturn(false);        page.isComplete(Assert::assertFalse);    }
@Test	public void testParseWithGeBinaryExpression()		throws ExpressionVisitException {		Expression expression = _filterParserImpl.parse(			"fieldExternal ge 'value'");		Assert.assertNotNull(expression);		BinaryExpression binaryExpression = (BinaryExpression)expression;		Assert.assertEquals(			BinaryExpression.Operation.GE, binaryExpression.getOperation());		MemberExpression memberExpression =			(MemberExpression)binaryExpression.getLeftOperationExpression();		PrimitivePropertyExpression primitivePropertyExpression =			(PrimitivePropertyExpression)memberExpression.getExpression();		Assert.assertEquals(			"fieldExternal", primitivePropertyExpression.getName());		LiteralExpression literalExpression =			(LiteralExpression)binaryExpression.getRightOperationExpression();		Assert.assertEquals("'value'", literalExpression.getText());		Assert.assertEquals(			LiteralExpression.Type.STRING, literalExpression.getType());	}
@Test	public void testReadLong() {		ByteBuffer byteBuffer = ByteBuffer.allocate(_COUNT * 8);		byteBuffer.order(ByteOrder.BIG_ENDIAN);		LongBuffer longBuffer = byteBuffer.asLongBuffer();		long[] longs = new long[_COUNT];		for (int i = 0; i < _COUNT; i++) {			longs[i] = _random.nextLong();			longBuffer.put(longs[i]);		}		Deserializer deserializer = new Deserializer(byteBuffer);		for (int i = 0; i < _COUNT; i++) {			Assert.assertEquals(longs[i], deserializer.readLong());		}	}
@Test  public void testAddMultipleEvents() throws Exception {    final RRule rrule = new RRule("FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;BYHOUR=7;BYMINUTE=0");    final Date start = new Date(1546844400000L); // 2019-01-07T07:00:00Z    final Date end = new Date(1570953300000L); // 2019-10-13T07:55:00Z    final Long duration = 6900000L;    final TimeZone tz = TimeZone.getTimeZone("America/Los_Angeles");    final String captureAgentId = "Device A";    final Set<String> userIds = Collections.emptySet();    final String id = "Recording1";    final String seriesId = "TestSeries";    final MediaPackage mpTemplate = generateEvent(Opt.some(id));    mpTemplate.setSeries(seriesId);    final DublinCoreCatalog dublinCoreCatalog = generateEvent(captureAgentId, Opt.some(mpTemplate.getIdentifier().toString()), Opt.some("Test Title"), start, end);    addDublinCore(Opt.some(mpTemplate.getIdentifier().toString()), mpTemplate, dublinCoreCatalog);    final Map<String, String> wfProperties = this.wfProperties;    final Map<String, String> caProperties = Collections.singletonMap("foo", "bar");    final Opt<String> schedulingSource = Opt.none();    assertEquals("mod0", schedSvc.getScheduleLastModified(captureAgentId));    final Map<String, Period> scheduled = schedSvc.addMultipleEvents(        rrule,        start,        end,        duration,        tz,        captureAgentId,        userIds,        mpTemplate,        wfProperties,        caProperties,        schedulingSource    );    final int expectedEventCount = rrule.getRecur().getDates(        new net.fortuna.ical4j.model.Date(start),        new net.fortuna.ical4j.model.Date(end),        Value.DATE    ).size();    assertEquals(expectedEventCount, scheduled.keySet().size());    final String randomMpId = scheduled.keySet().stream().findAny().orElseThrow(() -> new RuntimeException("This should never happen"));    final Period period = scheduled.get(randomMpId);    final MediaPackage mediaPackage = schedSvc.getMediaPackage(randomMpId);    final DublinCoreCatalog eventLoaded = schedSvc.getDublinCore(randomMpId);    final TechnicalMetadata technicalMetadata = schedSvc.getTechnicalMetadata(randomMpId);    assertEquals(seriesId, mediaPackage.getSeries());    assertTrue(eventLoaded.getFirst(PROPERTY_TITLE).startsWith(dublinCoreCatalog.getFirst(PROPERTY_TITLE)));    assertEquals(randomMpId, technicalMetadata.getEventId());    assertEquals(captureAgentId, technicalMetadata.getAgentId());    assertEquals(new Date(period.getStart().getTime()), technicalMetadata.getStartDate());    assertEquals(new Date(period.getEnd().getTime()), technicalMetadata.getEndDate());    assertEquals(userIds, technicalMetadata.getPresenters());    assertTrue(technicalMetadata.getRecording().isNone());    assertTrue(technicalMetadata.getCaptureAgentConfiguration().size() >= caProperties.size());    assertEquals(wfProperties, new HashMap<>(schedSvc.getWorkflowConfig(randomMpId)));    String lastModified = schedSvc.getScheduleLastModified(captureAgentId);    assertNotEquals("mod0", lastModified);    assertTrue(schedSvc.getCaptureAgentConfiguration(randomMpId).size() >= caProperties.size());  }
@Test  public void interpretDecimalLessThan() {    assertTrue(WorkflowConditionInterpreter.interpret("485.0 > 50"));  }
@Test  public void testFetchExistingObjectTypeFailsWhenMissing(){    ObjectNotFoundException ex = assertThrows(ObjectNotFoundException.class, () -> resolver.fetchExistingObjectType(UUID.randomUUID()));    assertEquals("object.type.not.exist", ex.getMessageTemplate());  }
