@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: "); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5d}%CW)%"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       int int0 = 537; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace(537, 166, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft(102, 102, '?'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = treeSet0.retainAll(arrayList0); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       charArray0[0] = '?'; [EOL]       charArray0[1] = '?'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder1.indexOf((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((char[]) null); [EOL]        [EOL]       boolean boolean1 = strBuilder2.contains(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       boolean boolean2 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendFixedWidthPadRight((Object) iterator0, 102, '?'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.mark(63); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendSeparator("{8UA", "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2280); [EOL]       MutableFloat mutableFloat0 = new MutableFloat((Number) integer0); [EOL]       Short short0 = new Short((short) (-1931)); [EOL]       mutableFloat0.subtract((Number) short0); [EOL]       assertEquals(4211.0, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       String string1 = strBuilder4.rightString(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "s ubr$U?#"); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "e~/aXjk(\"-1QzZxGM", hashMap0); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor(); [EOL]       assertNull(executorService0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli(0L); [EOL]       Date date0 = Date.from(instant0); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, (-2215)); [EOL]       assertNotSame(date1, date0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<?> class0 = ClassUtils.primitiveToWrapper((Class<?>) null); [EOL]       assertNull(class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-43)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-2081), (-1)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isStartedBy(integer0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       stringBuffer0.setLength(2016); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(2); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((-523.88385F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.append(5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.setNullText("/RDU5z0P,\u0001Ay"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder2.build(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder3.append((Object) strBuilder5); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.append(object0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder2.appendNewLine(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer1 = strBuilder9.toStringBuffer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'G'; [EOL]       strBuilder8.buffer = charArray0; [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder5.setNullText(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder10.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder8.length(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((String) null, (-677)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.appendln((float) 5); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       stringBuffer0.setLength(2016); [EOL]        [EOL]       int int0 = 5; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(2); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendSeparator("", 32); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder4.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.append((-523.88385F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(5); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setNullText("/RDU5z0P,\u0001Ay"); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder7.getNullText()); [EOL]        [EOL]       String string1 = strBuilder2.build(); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder3.append((Object) strBuilder6); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder3.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder6.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder8.getNullText()); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder0.append(object0); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder2.appendNewLine(); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder10.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]        [EOL]       StringBuffer stringBuffer1 = strBuilder10.toStringBuffer(); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder10.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'G'; [EOL]       strBuilder9.buffer = charArray0; [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder9.getNullText()); [EOL]       assertEquals("/RDU5z0P,\u0001Ay", strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.appendln(strBuilder4, 2, 2016); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Class<Object> class0 = Object.class; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0, true, (Class<? super Object>) class0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[18]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'c', 'O'); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = "\\p{InCombiningDiacriticalMarks}+"; [EOL]       Locale locale0 = Locale.TAIWAN; [EOL]        [EOL]       String string1 = locale0.getDisplayName(); [EOL]        [EOL]       String string2 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+", locale0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL]       assertFalse(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       boolean boolean0 = stack0.add((Object) "p{InCombiningDiacriticalMarks}+"); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       Iterator<Object> iterator0 = stack0.iterator(); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       char char0 = '>'; [EOL]       String string3 = StringUtils.join(iterator0, '>'); [EOL]       assertFalse(stack0.contains('>')); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) '>'; [EOL]       intArray0[1] = 2777; [EOL]       intArray0[2] = (int) '>'; [EOL]       intArray0[3] = (-1572); [EOL]       intArray0[4] = (int) '>'; [EOL]       intArray0[5] = (int) '>'; [EOL]       intArray0[6] = (int) '>'; [EOL]       intArray0[7] = (int) '>'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '>', (-1572), 62); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1572 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(0, (-300)); [EOL]       boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) "JGbjVl3X9m!&2 XD"; [EOL]       String string0 = StringUtils.remove("5I<=Sp4`*rQ9Ey", '~'); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "5I<=Sp4`*rQ9Ey"; [EOL]       charSequenceArray0[2] = (CharSequence) "JGbjVl3X9m!&2 XD"; [EOL]       String string1 = StringUtils.appendIfMissing("JGbjVl3X9m!&2 XD", "JGbjVl3X9m!&2 XD", charSequenceArray0); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.join((Object[]) charSequenceArray0, 'y', 2303, (-405)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.substringBeforeLast("", ""); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[2], "", 2303); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replacePattern((String) null, "C^~Zv[B=W<.aXJ]B2k", "org.apache.commons.lang3.StringUtils"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", ""); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string3 = StringUtils.repeat('A', 1330); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "~@!LXZ6YxCtw"; [EOL]       charSequenceArray0[1] = (CharSequence) "D;ijuF},="; [EOL]       charSequenceArray0[2] = (CharSequence) "~@!LXZ6YxCtw"; [EOL]       charSequenceArray0[3] = (CharSequence) "~@!LXZ6YxCtw"; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "D;ijuF},="; [EOL]       String string4 = StringUtils.appendIfMissing("D;ijuF},=", string3, charSequenceArray0);ijuF},=", string4); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("length must be valid"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, '_'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(".["); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(strBuilder2, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.substring(915, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = strMatcher_NoMatcher0.isMatch(charArray0, 1, 1, (-2741)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("(?: s|[s&&[^ ]])s*", "(?: s|[s&&[^ ]])s*"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'K'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.lowerCase("4QSejn\"zyIHEF~:m|C"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       mutableDouble0.add((double) 108L); [EOL]       assertEquals(197.0, mutableDouble0.toDouble(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int2 = (-65); [EOL]       String string0 = strBuilder0.midString(62, (-65)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F)); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), 62); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('\u000B'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertEquals(2, strBuilder0.size()); [EOL]       assertEquals(2, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (-1123.413941); [EOL]       doubleArray0[1] = 0.0; [EOL]       doubleArray0[2] = 6273.6721243; [EOL]       doubleArray0[3] = 0.0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, (double[]) null); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int[]) null, (int[]) null); [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '0'; [EOL]       char[] charArray1 = new char[4]; [EOL]       charArray1[0] = '0'; [EOL]       charArray1[1] = '0'; [EOL]       charArray1[2] = '0'; [EOL]       charArray1[3] = '0'; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, true); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) "Cannot get the toString of a null identity", (Object) equalsBuilder2); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte)31, (byte)101); [EOL]       assertSame(equalsBuilder0, equalsBuilder6); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('N'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll("", (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       String string1 = strBuilder0.rightString((-2383)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]        [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 1.0; [EOL]       doubleArray0[1] = (-690.4802009552836); [EOL]       doubleArray0[2] = 765.3743487472304; [EOL]       doubleArray0[3] = 0.0; [EOL]       double[] doubleArray1 = new double[4]; [EOL]       doubleArray1[0] = 0.0; [EOL]       doubleArray1[1] = 0.0; [EOL]       doubleArray1[2] = (-690.4802009552836); [EOL]       doubleArray1[3] = 1.0; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248)); [EOL]       Integer integer0 = new Integer((-4784)); [EOL]       EqualsBuilder.isRegistered(integer0, "]lEx>?>"); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1.1F, 1.1F); [EOL]       equalsBuilder4.append(406, 406); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('9', '9'); [EOL]       char char0 = charRange0.getEnd(); [EOL]       assertEquals('9', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((long) (-2563)); [EOL]       hashCodeBuilder0.append((long) (-2563)); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("0x"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendNewLine(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder((String) null); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-2586)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.center("6~L @37EEQ$", (-2586), "The character must not be null"); [EOL]        [EOL]       int int2 = StringUtils.length("6~L @37EEQ$"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "6~L @37EEQ$"; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("6~L @37EEQ$", "6~L @37EEQ$", charSequenceArray0); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(3421, 3421); [EOL]       int int0 = fraction0.intValue(); [EOL]       assertEquals(3421, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[8]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "Minimum abbreviation width with offset is 7"; [EOL]       String string1 = StringUtils.replaceChars("iB`Dd`m)wT", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "iB`Dd`m)wT", 0); [EOL]        [EOL]       char char0 = 'D'; [EOL]       String string2 = StringUtils.remove("iB`Dd`m)wT", 'D'); [EOL]        [EOL]       String string3 = StringUtils.substringAfter("...", ", Length: "); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("vH#$4G"); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.chomp("on,/B?M*0;2fA");2fA", string4); [EOL]        [EOL]       String string5 = StringUtils.join((float[]) null, 'D'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.toString((byte[]) null, ""); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       String string0 = StringUtils.join(iterator0, "The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "The character must not be null", (CharSequence) "The character must not be null"); [EOL]        [EOL]       Integer integer0 = linkedList0.pollFirst(); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "The character must not be null", ""); [EOL]        [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       String string3 = StringUtils.join(stringArray0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("kytsDAH*4", "kytsDAH*4"); [EOL]        [EOL]       String string5 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.appendIfMissing("", "", stringArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(416, 'n'); [EOL]       assertEquals(416, strBuilder0.length()); [EOL]       assertEquals(416, strBuilder1.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right((String) null, (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertEquals(8, shortArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 0, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string1 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       char char0 = 'R'; [EOL]       String string2 = StringUtils.center("JL_O}", 0, 'R'); [EOL]        [EOL]       String string3 = StringUtils.center((String) null, 0, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       char char1 = '}'; [EOL]       String string4 = StringUtils.rightPad((String) null, 2185, '}'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2185); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stack0.listIterator((-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // Index: -1 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       int[] intArray0 = new int[6]; [EOL]       int[] intArray1 = new int[9]; [EOL]       compareToBuilder0.append(intArray0, intArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripStart(" ", " "); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) " "); [EOL]        [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) ""; [EOL]       String string1 = StringUtils.join(objectArray0, "", 2670, 2670); [EOL]       assertEquals(3, objectArray0.length); [EOL]        [EOL]       String string2 = StringUtils.replace("m", "", " ", 2670); [EOL]        [EOL]       String string3 = StringUtils.normalizeSpace(""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase("", "m"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlphanumeric("m"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = fraction0.ONE_HALF.pow(0); [EOL]       assertEquals(2374, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       int int0 = numericEntityUnescaper0.translate((CharSequence) "&#&\u0000\u0000\u0000#", (int) '\u0000', (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-929)); [EOL]       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("|H").when(comparator0).toString(); [EOL]       doReturn(12, 611, (-929), 611, 0).when(comparator0).compare(anyInt() , anyInt()); [EOL]       Range<Integer> range0 = Range.is(integer0, comparator0); [EOL]       Comparator<Integer> comparator1 = range0.getComparator(); [EOL]       Range<Integer> range1 = Range.between(integer0, integer0, comparator1); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte) (-34); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0); [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) (byte) (-34); [EOL]       floatArray0[1] = (float) (byte) (-34); [EOL]       floatArray0[2] = (float) (byte) (-34); [EOL]       floatArray0[3] = (float) (byte) (-34); [EOL]       floatArray0[4] = (float) (byte) (-34); [EOL]       floatArray0[5] = (float) (byte) (-34); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, floatArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((float) (byte) (-34), (-1.0F)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-34.0F), (double) (byte) (-34)); [EOL]       char[] charArray0 = new char[0]; [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(charArray0, charArray0); [EOL]       assertSame(equalsBuilder6, equalsBuilder5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = (-1890); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1890)); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1890), 0.0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1890 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       Long long0 = mutableLong0.getValue(); [EOL]       assertEquals(0L, (long)long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]       calendar0.setLenient(false); [EOL]       DateUtils.ceiling(calendar0, 0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=8,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0); [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0); [EOL]       ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0); [EOL]       MockError mockError0 = new MockError(":IC?TWffvYqDnT"); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn"); [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>(); [EOL]       ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       Delayed delayed0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Delayed>) concurrentSkipListMap0, (RuntimeException) null, (ConcurrentInitializer<Delayed>) null); [EOL]       assertNull(delayed0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-929)); [EOL]       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("|H").when(comparator0).toString(); [EOL]       doReturn(12, 611, (-929), 611, 0).when(comparator0).compare(anyInt() , anyInt()); [EOL]       Range<Integer> range0 = Range.is(integer0, comparator0); [EOL]       Comparator<Integer> comparator1 = range0.getComparator(); [EOL]       Range<Integer> range1 = Range.between(integer0, integer0, comparator1); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("@uY"); [EOL]        [EOL]       ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J"); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'Q'; [EOL]       charArray0[1] = 'E'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '&'; [EOL]       charArray0[4] = 'D'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]        [EOL]       ArrayDeque<String> arrayDeque1 = arrayDeque0.clone(); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY"); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(0.0); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('c'); [EOL]        [EOL]       int int2 = strBuilder0.lastIndexOf('c'); [EOL]        [EOL]       int int3 = strBuilder1.size(); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]        [EOL]       arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J"); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append(2998); [EOL]       assertFalse(arrayDeque0.contains("@uY")); [EOL]       assertTrue(arrayDeque0.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertTrue(arrayDeque1.contains("2qZ^>Qrw9g\"x/].J")); [EOL]       assertFalse(arrayDeque1.contains("@uY")); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('h'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5'); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]       assertEquals(773, strBuilder2.size()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       objectArray0[4] = (Object) ", Length: 0"; [EOL]       objectArray0[5] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator(""); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]       assertEquals(773, strBuilder1.size()); [EOL]       assertEquals(773, strBuilder3.size()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'h'; [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1083)); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(integer0, toStringStyle0); [EOL]       long[] longArray0 = new long[8]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(longArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("e9EwrN.v3yrb0"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(645); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 645); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendNull(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       int int0 = (-3235); [EOL]       StrBuilder strBuilder5 = strBuilder1.appendSeparator('7', (-3235)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       int int1 = 3; [EOL]       strBuilder0.validateIndex(3); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.appendln('y'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert((-407), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -407 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[6]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "bA'rZ-*CMNc~eS"); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Integer) null, toStringStyle0, stringBuffer0, (Class<? super Integer>) class0, false, true); [EOL]       reflectionToStringBuilder0.setAppendStatics(true); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad((String) null, 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", (CharSequence) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]       assertTrue(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse((String) null); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[0] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       long[] longArray0 = new long[5]; [EOL]       long[] longArray1 = ArrayUtils.clone(longArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, (String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, '\''); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
