 ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals(66, strBuilder1.size()); [EOL]       assertEquals(66, strBuilder3.size()); [EOL]       assertEquals(66, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]     
 ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(str ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [E ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(str ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [E ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.subtract((-1.7143645F)); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals(1.7143645286560059, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.subtract((-1.7143645F)); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals((-1.7143645F), mutableFloat0.intValue()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.subtract((-1.7143645F)); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals((-1.7143645F), mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.subtract((-1.7143645F)); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals((-1.7143645F), mutableFloat0.doubleValue(), 0.01F); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.subtract((-1.7143645F)); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals(1.7143645F, mutableFloat0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder
 ########## @Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "8XvWRM_]~po", false); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "8XvWRM_]", false); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "", false); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "8XvWRM_]"); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetField()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Field field0 = FieldUtils.getField(class0, "", 0); [EOL]       assertNull(field0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, executorService0); [EOL]       callableBackgroundInitializer1.isStarted(); [EOL]       Callable<Callable<Delayed>> callable2 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<Delayed>>(callable2); [EOL]       ExecutorService executorService1 = callableBackgroundInitializer2.getExternalExecutor(); [EOL]       assertNull(executorService1); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, 0); [EOL]       assertTrue(date1.equals((Object)date0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, 1); [EOL]       assertTrue(date1.equals((Object)date0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       Date date1 = DateUtils.setYears(date0, (-2041)); [EOL]       assertNotSame(date1, date0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, 1001); [EOL]       assertTrue(date1.equals((Object)date0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsetMilliseconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, 0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<ClassUtils> class0 = ClassUtils.class; [EOL]       Class<?> class1 = ClassUtils.primitiveToWrapper(class0); [EOL]       assertFalse(class1.isEnum()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<ClassUtils> class0 = ClassUtils.class; [EOL]       Class<?> class1 = ClassUtils.primitiveToWrapper(class0); [EOL]       assertNull(class1); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<ClassUtils> class0 = ClassUtils.class; [EOL]       Class<?> class1 = ClassUtils.primitiveToWrapper(class0); [EOL]       assertTrue(class1.isEnum()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<Short> class0 = Short.class; [EOL]       Class<?> class1 = ClassUtils.primitiveToWrapper(class0); [EOL]       assertFalse(class1.isEnum()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<Short> class0 = Short.class; [EOL]       Class<?> class1 = ClassUtils.primitiveToWrapper((Class<?>[]) null); [EOL]       assertNull(class1); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isBeforeRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isAfterRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       boolean boolean0 = range0.isAfter((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isOverlappedBy((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       boolean boolean0 = range0.contains((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = str ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = str ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]       charArray0[7] = 'R'; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I["); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]  
 ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = str ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = str ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]       charArray0[7] = 'R'; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I["); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]  
 ########## @Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson("Kr^K5)xi3M!@H]nX\"'Z"); [EOL]       assertEquals("Kr^K5)xi3M!@H]nX\"'Z", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson("Kr^K5)k5)xi3M!@H]nX\"'Z"); [EOL]       assertEquals("Kr^K5)xi3M!@H]nX\"'Z", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson("Kr^K5)xi3M!@H]nX\"'Z", (String) null); [EOL]       assertEquals("Kr^K5)xi3M!@H]nX\"'Z", string0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder
 ########## @Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase("'<4Z?"); [EOL]       assertEquals("'<4z?", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase("'<4Z?"); [EOL]       assertEquals("'Z", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = WordUtils.swapCase("java.awt.graphicsenv"); [EOL]       assertEquals("JAVA.GRAPHICSENV", string0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1083)); [EOL]       String string0 = ToStringBuilder.reflectionToString((Object) integer0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       String string0 = ToStringBuilder.reflectionToString(object0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       String string0 = ToStringBuilder.reflectionToString((Object) "}}:@", (ToStringStyle) null); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[4]; [EOL]       float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0); [EOL]       assertEquals(0, booleanArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[4]; [EOL]       float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) 0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, true); [EOL]       assertEquals(0, booleanArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false); [EOL]       assertEquals(5, booleanArray1.length); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(""); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(""); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher((StrMatcher) null); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('<'); [EOL]       assertTrue(strTokenizer1.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid offset: ", "Invalid offset: "); [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.getTrimmerMatcher(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]     ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = ( ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dw ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y
 ########## @Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(1, 1); [EOL]       boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(1, 1); [EOL]       boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       String string0 = UnicodeEscaper.between(1, 1); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(0, 1); [EOL]       boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(1, 1); [EOL]       boolean boolean0 = unicodeEscaper0.translate(1, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL] ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]       assert ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]      
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA
 ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder
 ########## @Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.negate((Boolean) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.negate((Boolean) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.negate(false); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]       assertNull(boolean1); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.valueOf(true); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       int int0 = strMatcher_CharSetMatcher0.isMatch(charArray0, 1, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       int int0 = strMatcher_CharSetMatcher0.isMatch(charArray0, 1, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       int int0 = strMatcher_CharSetMatcher0.isMatch(charArray0, 1, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(";.Wv4!3f/"); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(";.Wv4!3f/"); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA
 ########## @Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       Double double0 = mutableDouble0.toDouble(); [EOL]       assertEquals((-447.178917), (double)double0, 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       MutableDouble mutableDouble1 = new MutableDouble((-1640.0216)); [EOL]       Double double0 = mutableDouble1.toDouble(); [EOL]       mutableDouble1.setValue((Number) mutableDouble0); [EOL]       mutableDouble1.subtract((Number) double0); [EOL]       mutableDouble1.toDouble(); [EOL]       assertEquals("1192.842683", mutableDouble1.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       Double double0 = mutableDouble0.toDouble(); [EOL]       assertEquals(89.0, (double)double0, 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(0.0); [EOL]       Double double0 = mutableDouble0.toDouble(); [EOL]       assertEquals(0.0, (double)double0, 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       double double0 = mutableDouble0.doubleValue(); [EOL]       assertEquals(89.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals(66, strBuilder1.size()); [EOL]       assertEquals(66, strBuilder3.size()); [EOL]       assertEquals(66, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]     
 ########## @Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('P'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('P'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('\u0085'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals(66, strBuilder1.size()); [EOL]       assertEquals(66, strBuilder3.size()); [EOL]       assertEquals(66, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]     
 ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [E ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder
 ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]       IDKey i ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       equalsBuilder0.append(objectArray0, objectArray0); [EOL]       EqualsBuilder.getRegisterPair(equalsBuilder0, equalsBuilder0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-2782), (short) (-2782)); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       charArray0[3] = 'S'; [EOL]       charArray0[4] = 'S'; [EOL]       charArray0[5] = 'S'; [EOL]       charArray0[6] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]    ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       IDKey iD
 ########## @Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) strBuilder_StrBuilderTokenizer1); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(1920, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(1920, strBuilder0.capacity()); [EOL]       assertEquals(1920, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(1920, strBuilder0.capacity()); [EOL]       assertEquals(1920, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(1920, strBuilder0.capacity()); [EOL]       assertEquals(1920, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(1920, strBuilder0.capacity()); [EOL]       assertEquals(1920, strBuilder1.capacity()); [EOL]       assertEquals(1920, strBuilder3.capacity()); [EOL]       assertEquals(1920, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(1920, strBuilder0.capacity()); [EOL]       assertEquals
 ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byte[] byteArray1 = new byte[8]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       float[] floatArray0 = new float[5]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 0L); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Object[] objectArray1 = new Object[2]; [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray1, objectArray0, comparator0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[2]; [EOL]       char[] charArray1 = new char[6]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]       IDKey i ########## @Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       charArray0[3] = 'S'; [EOL]       charArray0[4] = 'S'; [EOL]       charArray0[5] = 'S'; [EOL]       charArray0[6] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL] ########## @Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       charArray0[3] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 ########## @Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       IDKey iD ########## @Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]   
 ########## @Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       Object object0 = new Object(); [EOL]       boolean boolean0 = charRange0.equals(object0); [EOL]       assertEquals('6', charRange0.getStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertEquals('%', charRange1.getStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertEquals('%', charRange1.getStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       charRange0.hashCode(); [EOL]       assertEquals('6', charRange0.getStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('#'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertEquals('#', charRange1.getStart()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((short) (-1149)); [EOL]       assertEquals((-520), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float) 2018); [EOL]       hashCodeBuilder0.append((byte) (-1)); [EOL]       assertEquals((-126510360), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(Integer.MAX_VALUE); [EOL]       hashCodeBuilder1.append((-1)); [EOL]       assertEquals((-2147460413), hashCodeBuilder1.toHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((char[]) null); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.appendSuper(0); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("+3M]}Uvl"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("A"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber(""); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("+3M]}Uvl"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0.0); [EOL]       Fraction fraction1 = fraction0.ZERO.multiplyBy(fraction0); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_HALF; [EOL]       int int0 = fraction0.getProperNumerator(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.compareTo(fraction0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       int int0 = fraction0.getProperNumerator(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_HALF; [EOL]       int int0 = fraction0.getNumerator(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       ########## @Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv ########## @Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = 'b'; [EOL]       charArray0[2] = '`'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '!'; [EOL]       charArray0[5] = '6'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '6'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, 2924, (-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]        ########## @Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA
 ########## @Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-2641.68360927)); [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertEquals((-15955769), fraction1.getNumerator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       boolean boolean0 = fraction0.equals("BN~jiW"); [EOL]       assertEquals((-3225013), fraction0.getNumerator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-2641.68360927)); [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertEquals((-15955769), fraction0.getNumerator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       assertEquals((-3225013), fraction0.getNumerator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-2641.68360927)); [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertEquals((-414), fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       Str ########## @Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = 'b'; [EOL]       charArray0[2] = '`'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '!'; [EOL]       charArray0[5] = '6'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '6'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, 2924, (-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          ########## @Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0 ########## @Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = 'b'; [EOL]       charArray0[2] = '`'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '!'; [EOL]       charArray0[5] = '6'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '6'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, 2924, (-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]        
 ########## @Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       long[] longArray0 = new long[3]; [EOL]       ArrayUtils.reverse(longArray0); [EOL]       assertArrayEquals(new long[] {}, longArray0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       ArrayUtils.reverse(booleanArray0); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       ArrayUtils.reverse(booleanArray0); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       int[] intArray0 = new int[7]; [EOL]       ArrayUtils.reverse(intArray0); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       int[] intArray0 = new int[7]; [EOL]       ArrayUtils.reverse(intArray0); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA
 ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]     ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = ( ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dw ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("g?PZ{DRa[O6upHJ")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]       assertEquals(16, strBuilder3.length()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]       assertEquals(16, strBuilder3.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(14, strBuilder0.length()); [EOL]       assertEquals(14, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(66, strBuilder0.length()); [EOL]       assertEquals(66, strBuilder1.length()); [EOL]       assertEquals(66, strBuilder3.length()); [EOL]       assertEquals(66, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(66, strBuilder0.length()); [EOL]       assertEquals ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '7'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'v'; [EOL]       charArray0[3] = 't'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0, 0, 0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA
 ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{ ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = ( ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       boolean boolean3 = arrayList0.add((Object) listIterator0); [EOL]        [EOL] 
 ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byte[] byteArray1 = new byte[8]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       float[] floatArray0 = new float[5]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(floatArray0, floatArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, 0L); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Object[] objectArray1 = new Object[2]; [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray1, objectArray0, comparator0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[2]; [EOL]       char[] charArray1 = new char[6]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA
 ########## @Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-2641.68360927)); [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertEquals(221, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       int int0 = fraction0.intValue(); [EOL]       assertEquals(2374, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(46, (-693)); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       int int0 = fraction1.compareTo(fraction1); [EOL]       assertEquals(693, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       boolean boolean0 = fraction0.equals("BN~jiW"); [EOL]       assertEquals(32, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(46, (-693)); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       int int0 = fraction1.compareTo(fraction0); [EOL]       assertEquals(693, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0); [EOL]       assertEquals("&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u ########## @Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[3] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0); [EOL]       assertEquals("&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u ########## @Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0); [EOL]       assertEquals("&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 ########## @Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       String string0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0); [EOL]       assertEquals("&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 ########## @Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '&'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       int int0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0, 2, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       boolean boolean0 = range0.contains((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isBeforeRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       int int0 = range0.elementCompareTo(""); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isAfterRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString(); [EOL]       assertEquals("[!R3q..!R3q]", string0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)64, 3132); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       int int0 = ArrayUtils.lastIndexOf(objectArray0, (Object) null); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 'r'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, (-471L), 2); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, (long) 0L); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]       IDKey i ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       objectArray0[1] = (Object) equalsBuilder0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       equalsBuilder0.append(objectArray0, objectArray0); [EOL]       EqualsBuilder.getRegisterPair(equalsBuilder0, equalsBuilder0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-2782), (short) (-2782)); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       charArray0[3] = 'S'; [EOL]       charArray0[4] = 'S'; [EOL]       charArray0[5] = 'S'; [EOL]       charArray0[6] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL] ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]    ########## @Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       IDKey iD
 ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]       assertEquals(16, strBuilder3.length()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]       assertEquals(16, strBuilder3.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(14, strBuilder0.length()); [EOL]       assertEquals(14, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(66, strBuilder0.length()); [EOL]       assertEquals(66, strBuilder1.length()); [EOL]       assertEquals(66, strBuilder3.length()); [EOL]       assertEquals(66, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(66, strBuilder0.length()); [EOL]       assertEquals ########## @Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '7'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'v'; [EOL]       charArray0[3] = 't'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0, 0, 0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.subtract(984L); [EOL]       mutableLong0.getValue(); [EOL]       assertEquals("-984", mutableLong0.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)88); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.subtract(984L); [EOL]       mutableLong0.getValue(); [EOL]       assertEquals("-984", mutableLong0.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)88); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       Long long0 = mutableLong0.getValue(); [EOL]       assertEquals(88L, (long)long0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       Long long0 = mutableLong0.getValue(); [EOL]       assertEquals(0L, (long)long0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.subtract(984L); [EOL]       long long0 = mutableLong0.longValue(); [EOL]       assertEquals("-98L", long0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(str ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [E ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(str ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [E ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.round((Date) mockDate0, 1); [EOL]       assertEquals("Sun Jan 01 00:00:00 GMT 1899", date0.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.round((Date) mockDate0, 1); [EOL]       assertEquals("Date0", date0.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.round((Date) mockDate0, 1); [EOL]       assertEquals("Sun Jan 01 00:00:00 GMT 1970", date0.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.round((Date) mockDate0, 1); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(0, 0, 0); [EOL]       Date date0 = DateUtils.round((Date) mockDate0, 0); [EOL]       assertEquals("Sun Jan 01 00:00:00 GMT 1899", date0.toString()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) null); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       MockError mockError0 = new MockError(mockRuntimeException0); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       assertTrue(concurrentUtils_ConstantFuture0.isDone()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) null); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       MockError mockError0 = new MockError(); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       assertTrue(concurrentUtils_ConstantFuture0.isDone()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) null); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       MockError mockError0 = new MockError(mockRuntimeException0); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       assertTrue(constantFuture0.isDone()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) null); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       assertTrue(concurrentUtils_ConstantFuture0.isDone()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0); [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0); [EOL]       ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0); [EOL]       MockError mockError0 = new MockError(":IC?TWffvYqDnT"); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn"); [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>(); [EOL]       ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       Delayed delayed0 = ConcurrentUtils.create
 ########## @Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", "}$p.medQ&,.:Ku"); [EOL]       boolean boolean0 = range0.isAfterRange(range0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.containsRange(range1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       boolean boolean0 = range0.isOverlappedBy((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", "}$p.medQ&,.:Ku"); [EOL]       boolean boolean0 = range0.isBefore(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", "}$p.medQ&,.:Ku"); [EOL]       boolean boolean0 = range0.isAfterRange(range0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]   ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2"); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) (-1)); [EOL]        [EOL]       StrBuilder strBuilder ########## @Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer
 ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0. ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]       assertEquals(16, strBuilder2.size()); [EOL]       assertEquals(16, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]      ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals(66, strBuilder1.size()); [EOL]       assertEquals(66, strBuilder3.size()); [EOL]       assertEquals(66, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(66, strBuilder0.size()); [EOL]       assertEquals ########## @Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder2.size()); [EOL]       assertEquals(17, strBuilder3.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]     
 ########## @Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendAsObjectToString(object0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("IPz$I2G^e"); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("IPz$I2G^e", (short[]) null, false); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       toStringBuilder0.build(); [EOL]       assertEquals(21, stringBuffer0.length()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("IPz$I2G^e"); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("IPz$I2G^e", (short[]) null, true); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendAsObjectToString(object0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(str ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [E ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(str ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [E ########## @Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(351L); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding((-2463), 'u'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((char[]) null, '7', 134); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-230)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 1.5); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[0], (-230)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, (-2637)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]       assertEquals(0.0, (double)double0, 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       MutableDouble mutableDouble1 = new MutableDouble((-1640.0216)); [EOL]       Double double0 = mutableDouble1.toDouble(); [EOL]       mutableDouble1.setValue((Number) mutableDouble0); [EOL]       mutableDouble1.subtract((Number) double0); [EOL]       mutableDouble1.toDouble(); [EOL]       assertEquals("1192.842683", mutableDouble1.toString()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       double double0 = mutableDouble0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       int int0 = mutableDouble0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2438); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1159)); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2438); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(object0); [EOL]       reflectionToStringBuilder0.toString(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2438); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0); [EOL]       boolean boolean0 = reflectionToStringBuilder0.isAppendStatics(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL] ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]  ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]       assert ########## @Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]      
 ########## @Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       int[] intArray0 = new int[7]; [EOL]       int[] intArray1 = ArrayUtils.clone(intArray0); [EOL]       assertEquals(7, intArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       float[] floatArray0 = new float[4]; [EOL]       float[] floatArray1 = ArrayUtils.clone(floatArray0); [EOL]       assertEquals(4, floatArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.clone(intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       char[] charArray0 = new char[7]; [EOL]       char[] charArray1 = ArrayUtils.clone(charArray0); [EOL]       assertEquals(7, charArray1.length); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.clone((short[]) null); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "JAVA_1_3"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "JAVA_1_3"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "JAVA_1_4"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "k"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "JAVA_1_8"); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(""); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher((StrMatcher) null); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported"); [EOL]       boolean boolean0 = strTokenizer0.isEmptyTokenAsNull(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported"); [EOL]       boolean boolean0 = strTokenizer0.isEmptyTokenAsNull(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.getTrimmerMatcher(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
 ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL] ########## @Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
