@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void verifySignature() throws Exception [EOL] { [EOL] String message = getSignedMessage(); [EOL] PGPPublicKeyRing pubKeyRing = PGPKeyUtil.readPublicKeyRing( getPublicKey() ); [EOL] [EOL] assertTrue( PGPEncryptionUtil.verifyClearSign( message.getBytes(), pubKeyRing ) ); [EOL] } [EOL]
@Test [EOL] public void filter() throws Exception { [EOL] final DebugTabUri tab = new DebugTabUri(new UriInfoImpl().setKind(UriInfoKind.all) [EOL] .setSystemQueryOption(new FilterOptionImpl().setExpression( [EOL] new BinaryImpl(new LiteralImpl("1", EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Int64)), [EOL] BinaryOperatorKind.GT, [EOL] new LiteralImpl("2", EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.SByte)), [EOL] EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Boolean))))); [EOL] assertEquals("{\"kind\":\"all\",\"filter\":{" [EOL] + "\"nodeType\":\"binary\",\"operator\":\"gt\",\"type\":\"Boolean\"," [EOL] + "\"left\":{\"nodeType\":\"literal\",\"type\":\"Edm.Int64\",\"value\":\"1\"}," [EOL] + "\"right\":{\"nodeType\":\"literal\",\"type\":\"Edm.SByte\",\"value\":\"2\"}}}", [EOL] createJson(tab)); [EOL] [EOL] assertThat(createHtml(tab), allOf( [EOL] startsWith("<h2>Kind</h2>\n" [EOL] + "<p>all</p>\n" [EOL] + "<h2>Filter Option</h2>\n" [EOL] + "<ul>\n" [EOL] + "<li class=\"json\">"), [EOL] containsString("nodeType"), containsString("binary"), [EOL] containsString("operator"), containsString("gt"))); [EOL] assertThat(createHtml(tab), allOf( [EOL] containsString("literal"), containsString("Int64"), [EOL] containsString("SByte"), containsString("2"), [EOL] endsWith("</li>\n</ul>\n"))); [EOL] [EOL] assertEquals("{\"kind\":\"all\",\"filter\":{" [EOL] + "\"nodeType\":\"method\",\"operator\":\"ceiling\",\"type\":\"Number\"," [EOL] + "\"parameters\":[{\"nodeType\":\"literal\",\"type\":\"Edm.Decimal\",\"value\":\"1.5\"}]}}", [EOL] createJson(new DebugTabUri(new UriInfoImpl().setKind(UriInfoKind.all) [EOL] .setSystemQueryOption(new FilterOptionImpl().setExpression( [EOL] new MethodImpl(MethodKind.CEILING, Arrays.asList( [EOL] (Expression) new LiteralImpl("1.5", [EOL] EdmPrimitiveTypeFactory.getInstance(EdmPrimitiveTypeKind.Decimal))))))))); [EOL] [EOL] EdmEntityType edmEntityType = mock(EdmEntityType.class); [EOL] when(edmEntityType.getFullQualifiedName()).thenReturn(new FullQualifiedName("ns", "entityType")); [EOL] EdmProperty edmProperty = mock(EdmProperty.class); [EOL] when(edmProperty.getName()).thenReturn("property"); [EOL] assertEquals("{\"kind\":\"all\",\"filter\":{" [EOL] + "\"nodeType\":\"member\",\"type\":\"unknown\",\"typeFilter\":\"ns.entityType\"," [EOL] + "\"resourceSegments\":[{\"nodeType\":\"primitiveProperty\",\"name\":\"property\",\"type\":\"unknown\"}]}}", [EOL] createJson(new DebugTabUri(new UriInfoImpl().setKind(UriInfoKind.all) [EOL] .setSystemQueryOption(new FilterOptionImpl().setExpression( [EOL] new MemberImpl(new UriInfoImpl().setKind(UriInfoKind.resource) [EOL] .addResourcePart(new UriResourcePrimitivePropertyImpl(edmProperty)), [EOL] edmEntityType)))))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]       Class<?> class0 = ClassUtils.getClass(classLoader0, "short"); [EOL]       assertEquals("short", class0.toString()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void isEnabled() { [EOL] assertThat(groovyFileSystem.hasGroovyFiles()).isFalse(); [EOL] [EOL] fileSystem.add(new DefaultInputFile("", "fake.file")); [EOL] assertThat(groovyFileSystem.hasGroovyFiles()).isFalse(); [EOL] [EOL] fileSystem.add(new DefaultInputFile("", "fake.groovy").setLanguage(Groovy.KEY)); [EOL] assertThat(groovyFileSystem.hasGroovyFiles()).isTrue(); [EOL] } [EOL]
@Test [EOL] 	public void locateGenerators_shouldNotThrowAnExceptionIfTheClassInstantiationFails() throws Exception { [EOL] 		IReceiptNumberGenerator[] generators = ReceiptNumberGeneratorFactory.locateGenerators(); [EOL] [EOL] 		Assert.assertNotNull(generators); [EOL] 		Assert.assertTrue(generators.length >= 2); [EOL] [EOL] 		boolean foundInvalidGenerator = false; [EOL] 		for (IReceiptNumberGenerator generator : generators) { [EOL] 			if (generator.getClass().equals(InvalidReceiptNumberGenerator.class)) { [EOL] 				foundInvalidGenerator = true; [EOL] 				break; [EOL] 			} [EOL] 		} [EOL] [EOL] 		Assert.assertFalse("The invalid generator was unexpectedly located.", foundInvalidGenerator); [EOL] 	} [EOL]
@Test [EOL] public void toStar() throws Exception { [EOL] TestSubscriber<Boolean> subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.toStar("TellH", "GitClub").subscribe(subscriber); [EOL] subscriber.assertValue(true); [EOL] subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.checkStarred("TellH", "GitClub").subscribe(subscriber); [EOL] subscriber.assertValue(true); [EOL] } [EOL]
@Test [EOL] public void testGeneratePublicKeyPairBytes() throws Exception [EOL] { [EOL] assertNotNull( keyManager.generatePublicKeyPairBytes() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testOnEntryExpiry() throws Exception [EOL] { [EOL] CommandProcess commandProcess = mock( CommandProcess.class ); [EOL] callback.onEntryExpiry( commandProcess ); [EOL] [EOL] verify( commandProcess ).stop(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEndedBy()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) integer0, (Object) "", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy("Elements in a range must not be null: element1="); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncaughtExceptionHandler()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.uncaughtExceptionHandler(thread_UncaughtExceptionHandler0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]       assertEquals(0, thread0.countStackFrames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson("Kr^K5)xi3M!@H]nX\"'Z"); [EOL]       assertEquals("Kr^K5)xi3M!@H]nX\"'Z", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExecute2() throws Exception [EOL] { [EOL] commandExecutor.execute( HOST_ID, requestBuilder, callback ); [EOL] [EOL] verify( commandProcessor ).execute( any( Request.class ), eq( callback ) ); [EOL] verify( commandProcessor ).getResult( any( UUID.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhandleCauseUnchecked()  throws Throwable  { [EOL]       ExecutionException executionException0 = mock(ExecutionException.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Throwable) null).when(executionException0).getCause(); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       ExecutionException executionException1 = new ExecutionException("#0K`4yx[{#", (Throwable) null); [EOL]       StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[4]; [EOL]       StackTraceElement stackTraceElement0 = new StackTraceElement("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", "org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", "org.apache.commons.lang3.concurrent.ConcurrentUtils", 0); [EOL]       stackTraceElementArray0[0] = stackTraceElement0; [EOL]       StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "", 0); [EOL]       stackTraceElementArray0[1] = stackTraceElement1; [EOL]       StackTraceElement stackTraceElement2 = new StackTraceElement("!yvqM)9R9B+@s*FdB", "!yvqM)9R9B+@s*FdB", "org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", (-1072)); [EOL]       stackTraceElementArray0[2] = stackTraceElement2; [EOL]       StackTraceElement stackTraceElement3 = new StackTraceElement("XjP`4mI|d1]R6", "org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture", "!yvqM)9R9B+@s*FdB", 2); [EOL]       stackTraceElementArray0[3] = stackTraceElement3; [EOL]       executionException1.setStackTrace(stackTraceElementArray0); [EOL]       ConcurrentUtils.extractCause(executionException1); [EOL]       ExecutionException executionException2 = new ExecutionException((Throwable) null); [EOL]       executionException2.fillInStackTrace(); [EOL]       executionException2.fillInStackTrace(); [EOL]       ConcurrentUtils.handleCauseUnchecked(executionException2); [EOL]       assertNotSame(executionException2, executionException1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("U"); [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'U'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void headerWithWrongName() throws Exception { [EOL] final Header header = BatchParserCommon.consumeHeaders(toLineList("a,b: c/d" + CRLF)); [EOL] assertNotNull(header); [EOL] assertFalse(header.iterator().hasNext()); [EOL] } [EOL]
@Test [EOL] public void fromUriLiteral() throws Exception { [EOL] assertEquals("String''Value", instance.fromUriLiteral("'String''''Value'")); [EOL] [EOL] expectErrorInFromUriLiteral(instance, ""); [EOL] expectErrorInFromUriLiteral(instance, "'"); [EOL] expectErrorInFromUriLiteral(instance, "'\""); [EOL] } [EOL]
@Test [EOL] public void testAddContainerHost() throws Exception [EOL] { [EOL] resourceHostEntity.addContainerHost( containerHost ); [EOL] [EOL] verify( containerHost ).setParent( resourceHostEntity ); [EOL] } [EOL]
@Test [EOL] public void testIsConnected() throws Exception [EOL] { [EOL] doReturn( resourceHostInfo ).when( hostRegistry ).getResourceHostByContainerHost( containerHostInfo ); [EOL] doReturn( true ).when( hostRegistry ).pingHost( anyString() ); [EOL] assertTrue( localPeer.isConnected( containerHost.getContainerId() ) ); [EOL] [EOL] when( hostRegistry.getHostInfoById( CONTAINER_HOST_ID ) ).thenReturn( hostInfo ); [EOL] [EOL] doReturn( "" ).when( hostInfo ).getId(); [EOL] [EOL] assertFalse( localPeer.isConnected( containerHost.getContainerId() ) ); [EOL] [EOL] HostDisconnectedException hostDisconnectedException = mock( HostDisconnectedException.class ); [EOL] [EOL] doThrow( hostDisconnectedException ).when( hostRegistry ).getHostInfoById( CONTAINER_HOST_ID ); [EOL] [EOL] assertFalse( localPeer.isConnected( containerHost.getContainerId() ) ); [EOL] } [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldReturnFalseIfHeadersAreNullOrEmpty() { [EOL] assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), null)); [EOL] assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), new Hashtable<String, String>())); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 66, '\"'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll("SzpQ!4 ;U"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       int int0 = (-1498); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1498)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char char0 = 'Y'; [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('Y'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("I%EqwV7sG3W", "I%EqwV7sG3W"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf(strMatcher0, 116); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'Y'; [EOL]       int int2 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-738), (-1498)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -738 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void saveState() { [EOL] UriTokenizer tokenizer = new UriTokenizer("a*"); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] tokenizer.saveState(); [EOL] assertTrue(tokenizer.next(TokenKind.STAR)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] tokenizer.returnToSavedState(); [EOL] assertTrue(tokenizer.next(TokenKind.STAR)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1580); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = strBuilder0.getChars(charArray0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, charArray0.length); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetRecipient() throws Exception [EOL] { [EOL] assertEquals( RECIPIENT, requestListener.getRecipient() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeInstance()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("CGnq5w2>W6Y47X"); [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0); [EOL]       String string0 = fastDateFormat0.getPattern(); [EOL]       assertEquals("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("1so6^[^z!mYS2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder("1so6^[^z!mYS2"); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(strBuilder2); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendFixedWidthPadRight((-364), (-364), ';'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.lowerCase("ghZ]CWmR;Q]$V");q]$v", string0); [EOL]        [EOL]       String string1 = StringUtils.substringBetween("", "Search and Replace array lengths don't match: "); [EOL]        [EOL]       String string2 = StringUtils.appendIfMissing("Strings must not be null", (CharSequence) null, (CharSequence[]) null); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append('Y'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetResourceHostInfoById() throws Exception [EOL] { [EOL] ResourceHostInfo existingHost = registry.getResourceHostInfoById( HOST_ID ); [EOL] assertNotNull( existingHost ); [EOL] [EOL] try [EOL] { [EOL] registry.getResourceHostInfoById( UUID.randomUUID().toString() ); [EOL] fail( "Expected HostDisconnectedException" ); [EOL] } [EOL] catch ( HostDisconnectedException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeEcmaScript()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeEcmaScript("+g"); [EOL]       assertEquals("+g", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void do_nothing_when_no_groovy_file() throws IOException { [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] context = Mockito.spy(context); [EOL] sensor = new GroovySensor(settings, fileLinesContextFactory, context.fileSystem()); [EOL] sensor.execute(context); [EOL] [EOL] Mockito.verify(context, Mockito.never()).newHighlighting(); [EOL] } [EOL]
@Test [EOL] public void getMavenCommandWithEmptyMainServiceNormalMavenCommand() { [EOL] String result = new RunApplication(Vertx.vertx(), config) [EOL] .getMavenCommand(new DeployApplicationRequest("group", "artifact", "version", "classifier", "type").withMainService(" ")); [EOL] [EOL] assertThat(result, is("maven:group:artifact:version")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.clear(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ")[C$#_(U9,]+>eub7]}"; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       char char0 = 'c'; [EOL]       int int3 = strBuilder0.lastIndexOf('c', 7); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0'); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testReadPublicKey() throws Exception [EOL] { [EOL] [EOL] assertNotNull( [EOL] PGPKeyUtil.readPublicKey( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.PUBLIC_KEYRING ) ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoStringYesNo()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringYesNo(true); [EOL]       assertEquals("yes", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       equalsBuilder0.append(true, true); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = "Q@a+w^PT*i"; [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       MutablePair<IDKey, IDKey> mutablePair0 = new MutablePair<IDKey, IDKey>(); [EOL]       float[] floatArray0 = new float[4]; [EOL]       floatArray0[1] = (float) (byte)2; [EOL]       EqualsBuilder.reflectionEquals((Object) stringArray0[0], (Object) boolean0, stringArray0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3995L), (-3995L)); [EOL]        [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = (float) (byte)2; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1); [EOL]       assertFalse(equalsBuilder2.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldHandleConversionFailedException() { [EOL] ResponseEntity<QueryResponse> result = target.handleConversionFailedException(new ConversionFailedException(null, null, null, new IllegalArgumentException("conversionFailedException"))); [EOL] [EOL] assertThat(result, is(notNullValue())); [EOL] assertThat(result.getStatusCodeValue(), is(400)); [EOL] } [EOL]
@Test [EOL] public void test_description() { [EOL] DefaultSensorDescriptor defaultSensorDescriptor = new DefaultSensorDescriptor(); [EOL] sensor.describe(defaultSensorDescriptor); [EOL] assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY); [EOL] } [EOL]
@Test [EOL] @Ignore [EOL] public void isDesktop() throws Exception [EOL] { [EOL] boolean isDekstop = desktopManager.isDesktop( containerHost ); [EOL] assertTrue( isDekstop ); [EOL] } [EOL]
@Test [EOL] public void testLogPayloadSerializationAndDeserialization() throws IOException [EOL] { [EOL] originalObject = new EventMessage( origin, source, logPayload ); [EOL] [EOL] final String json = objectMapper.writeValueAsString( originalObject ); [EOL] [EOL] System.out.println( json ); [EOL] [EOL] final EventMessage restoredObject = objectMapper.readValue( json, EventMessage.class ); [EOL] [EOL] assertEquals( originalObject.getPayload(), restoredObject.getPayload() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = "A"; [EOL]       String string1 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"; [EOL]       int int0 = 34; [EOL]       boolean boolean0 = false; [EOL]       StrBuilder strBuilder1 = new StrBuilder("A"); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       char char0 = strBuilder3.charAt(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(33, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append((CharSequence) strBuilder2, 34, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldFindAllWithPageable() { [EOL] Sort sort = Sort.by("name"); [EOL] PetDocument petDocument1 = new PetDocument(); [EOL] petDocument1.setName("fluffy"); [EOL] PetDocument petDocument2 = new PetDocument(); [EOL] petDocument2.setName("browny"); [EOL] Query query = new Query(); [EOL] when(queryService.getMongoDBQuery()).thenReturn(query); [EOL] when(entityInformation.getJavaType()).thenReturn(PetDocument.class); [EOL] when(entityInformation.getCollectionName()).thenReturn("pets"); [EOL] when(mongoOperations.find(query.with(sort), PetDocument.class, "pets")).thenReturn(List.of(petDocument2, petDocument1)); [EOL] [EOL] Page<PetDocument> result = target.findAll(PageRequest.of(1, 1, Sort.by("name"))); [EOL] [EOL] assertThat(result, is(notNullValue())); [EOL] assertThat(result.getSize(), is(1)); [EOL] } [EOL]
@Test [EOL] public void testGetTimeout() throws Exception [EOL] { [EOL] assertNotNull( requestBuilder.getTimeout() ); [EOL] } [EOL]
@Test [EOL] public void testGetSecurityManager() throws Exception [EOL] { [EOL] assertEquals( securityManager, channelManager.getSecurityManager() ); [EOL] } [EOL]
@Test [EOL] void testOnHeadersRead_trailerPart() { [EOL] testHandler = new Http2Handler(mockEncoder, MAX_PAYLOAD, NO_CORS); [EOL] [EOL] // Fake the initial request + handler. [EOL] Http2Headers initialHeaders = new DefaultHttp2Headers().method("GET").path(OK_PATH); [EOL] XrpcRequest fakeRequest = new XrpcRequest(initialHeaders, null, null, channel); [EOL] testHandler.requests.put(STREAM_ID, fakeRequest); [EOL] testHandler.handlers.put(STREAM_ID, OK_HANDLER); [EOL] [EOL] headers.add("some-header", "some-value"); [EOL] testHandler.onHeadersRead(mockContext, STREAM_ID, headers, 1, true); [EOL] [EOL] // Expect an OK response, but DON'T expect a request count. [EOL] assertEquals(0L, requestMeter.getCount()); [EOL] verifyResponse(HttpResponseStatus.OK, ImmutableMap.of(), Optional.empty(), STREAM_ID); [EOL] // Assert that the request's headers were updated. [EOL] assertEquals("some-value", fakeRequest.h2Headers().get("some-header")); [EOL] } [EOL]
@Test [EOL] public void testDispose() throws Exception [EOL] { [EOL] listener.dispose(); [EOL] [EOL] verify( notifier ).shutdown(); [EOL] } [EOL]
@Test [EOL] public void testOpenLdapSchemaRendererObjectClassSimple() [EOL] { [EOL] String actual = OpenLdapSchemaFileExporter.toSourceCode( objectClassSimple ); [EOL] String expected = "objectclass ( 1.2.3.4 NAME 'name0'\n\tSTRUCTURAL\n\tMUST att0 )"; [EOL] assertEquals( expected, actual ); [EOL] } [EOL]
@Test [EOL] void shouldSelectFromAllColumns() { [EOL] List<String> columns = List.of("*"); [EOL] List<String> tables = List.of("employees"); [EOL] String predicatesInString = "(employees.name = 'Joffer' AND employees.address = 'Stockholm')"; [EOL] SqlStatement target = new SqlStatement.Builder() [EOL] .select(columns) [EOL] .from(tables) [EOL] .where(predicatesInString) [EOL] .build(); [EOL] assertThat(target.getExecutableSqlStatements(), is("SELECT * FROM employees WHERE (employees.name = 'Joffer' AND employees.address = 'Stockholm');")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 8); [EOL]        [EOL]       charArray0[0] = '+'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray0); [EOL]        [EOL]       charArray0[1] = 'd'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '='; [EOL]       charArray0[4] = 'H'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertNotNull(writer0); [EOL]        [EOL]       boolean boolean0 = strBuilder0.endsWith((String) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(strBuilder3, 2438, 2438); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testPublishNonExisting() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] [EOL] itemVersionManagerImpl.publish(context, itemId, versionId, ""); [EOL] } [EOL]
@Test [EOL] public void collectionOfProjectedEntities() { [EOL] final ContextURL contextURL = ContextURLParser.parse( [EOL] URI.create("http://host/service/$metadata#Customers(Address,Orders)")); [EOL] [EOL] assertEquals("Customers", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertEquals("Address,Orders", contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955); [EOL]       assertFalse(arrayList0.contains(955)); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) arrayList0, '5'); [EOL]       assertFalse(arrayList0.contains(955)); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.mid("", 955, 3); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       String string2 = StringUtils.upperCase(""); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       String string3 = StringUtils.removeStartIgnoreCase("\r", ""); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "\r"; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) charBuffer0; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]); [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = (long) 3; [EOL]       longArray0[1] = 2587L; [EOL]       longArray0[2] = (long) 3; [EOL]       longArray0[3] = (long) 955; [EOL]       longArray0[4] = (long) 955; [EOL]       longArray0[5] = (long) 3; [EOL]       longArray0[6] = (-1L); [EOL]       String string4 = StringUtils.join(longArray0, '5', 8192, (-1515)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string5 = StringUtils.chomp("\"N;ix%MK");ix%MK", string5); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) "\"N;ix%MK"; [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) 8192; [EOL]       floatArray0[1] = (float) 3L; [EOL]       String string6 = StringUtils.join(floatArray0, 'L', 32, 16); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('B'); [EOL]       CharRange charRange1 = CharRange.is('e'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]       assertEquals('e', charRange1.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder.isRegistered("Unexpected IllegalAccessException", "Unexpected IllegalAccessException"); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) "Unexpected IllegalAccessException", (Object) "Unexpected IllegalAccessException"); [EOL]       assertTrue(equalsBuilder1.isEquals()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = false; [EOL]       booleanArray0[2] = false; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((boolean[]) null, booleanArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(443.779, 443.779); [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)1; [EOL]       shortArray0[1] = (short) (-756); [EOL]       short[] shortArray1 = new short[1]; [EOL]       shortArray1[0] = (short) (-756); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray1); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(false, false); [EOL]       assertFalse(equalsBuilder1.isEquals()); [EOL]       assertFalse(equalsBuilder6.isEquals()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] step.execute(); [EOL] [EOL] verify( containerHost ).destroy( false ); [EOL] } [EOL]
@Test [EOL] void testDecoderWithoutParam() { [EOL] assertSame(fooBarDecoder, decoders.decoder("foo/bar")); [EOL] } [EOL]
@Test [EOL] public void testDESTROY_CONTAINER() throws Exception [EOL] { [EOL] [EOL] RelationManager relationManager = mock( RelationManager.class ); [EOL] doReturn( relationManager ).when( environmentManager ).getRelationManager(); [EOL] [EOL] workflow.DESTROY_CONTAINER(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( any( LocalEnvironment.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Integer integer0 = new Integer(10); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append((Object) integer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'C'; [EOL]       charArray0[2] = 'r'; [EOL]       charArray0[3] = 'g'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'p'; [EOL]       charArray0[6] = '('; [EOL]       charArray0[7] = 'P'; [EOL]       charArray0[8] = '@'; [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(10, (float) 10); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(stringBuilder3, 10, 10); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test public void testDigestIsDeterministic() throws java.io.IOException { [EOL] DeadEndDigestOutputStream stream1 = new DeadEndDigestOutputStream(); [EOL] DeadEndDigestOutputStream stream2 = new DeadEndDigestOutputStream(); [EOL] assertEquals(stream1.getDigestString(), stream2.getDigestString()); [EOL] stream1.write(123); stream2.write(123); [EOL] assertEquals(stream1.getDigestString(), stream2.getDigestString()); [EOL] [EOL] stream1.close(); [EOL] stream2.close(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsetVariableResolver()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J'); [EOL]       StrLookup<?> strLookup0 = strSubstitutor0.getVariableResolver(); [EOL]       strSubstitutor0.setVariableResolver(strLookup0); [EOL]       assertEquals('J', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       hashCodeBuilder0.append((boolean[]) null); [EOL]       assertEquals(657721, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testWhatDnBasicDnRegex() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnBasicDnRegex" ); [EOL] String dnPattern = "dc=*"; [EOL] [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] AclItem aclItem = parser.parse( "access to dn.regex=\"" + dnPattern + "\" by *" ); [EOL] assertNotNull( aclItem ); [EOL] [EOL] // Testing the 'what' clause [EOL] AclWhatClause whatClause = aclItem.getWhatClause(); [EOL] assertNotNull( whatClause ); [EOL] assertTrue( whatClause instanceof AclWhatClauseDn ); [EOL] AclWhatClauseDn whatClauseDn = (AclWhatClauseDn) whatClause; [EOL] [EOL] // test the content [EOL] assertEquals( dnPattern, whatClauseDn.getPattern() ); [EOL] assertEquals( AclWhatClauseDnTypeEnum.REGEX, whatClauseDn.getType() ); [EOL] [EOL] System.out.println( "<-- ACL:" + aclItem ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder3.append(6); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testEqualsHashCode() throws Exception [EOL] { [EOL] [EOL] //check equals [EOL] ContainerHostInfo containerHostInfo2 = JsonUtil.fromJson( INFO_JSON, ContainerHostInfoModel.class ); [EOL] [EOL] assertEquals( containerHostInfo, containerHostInfo2 ); [EOL] [EOL] assertFalse( containerHostInfo.equals( new Object() ) ); [EOL] [EOL] ContainerHostInfo containerHostInfo3 = JsonUtil.fromJson( INFO2_JSON, ContainerHostInfoModel.class ); [EOL] [EOL] assertNotEquals( containerHostInfo, containerHostInfo3 ); [EOL] [EOL] //check hash [EOL] Map<ContainerHostInfo, ContainerHostInfo> map = Maps.newHashMap(); [EOL] [EOL] map.put( containerHostInfo2, containerHostInfo2 ); [EOL] [EOL] assertEquals( containerHostInfo2, map.get( containerHostInfo ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("43Eh>Xb3,/"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testVALIDATE() throws Exception [EOL] { [EOL] assertNull( workflow.VALIDATE() ); [EOL] [EOL] doReturn( Sets.newHashSet( container, TestHelper.ENV_CONTAINER() ) ).when( environment ).getContainerHosts(); [EOL] [EOL] assertEquals( ContainerDestructionWorkflow.ContainerDestructionPhase.DESTROY_CONTAINER, workflow.VALIDATE() ); [EOL] } [EOL]
@Test [EOL] public void operators() { [EOL] UriTokenizer tokenizer = new UriTokenizer("1 ne 2"); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertFalse(tokenizer.next(TokenKind.EqualsOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.NotEqualsOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] [EOL] tokenizer = new UriTokenizer("-1ne 2"); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertFalse(tokenizer.next(TokenKind.NotEqualsOperator)); [EOL] [EOL] tokenizer = new UriTokenizer("1 ne-2"); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertFalse(tokenizer.next(TokenKind.NotEqualsOperator)); [EOL] [EOL] tokenizer = new UriTokenizer("1 \tle\t\t\t2"); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.LessThanOrEqualsOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] [EOL] assertTrue(new UriTokenizer("-x").next(TokenKind.MinusOperator)); [EOL] assertFalse(new UriTokenizer("-1").next(TokenKind.MinusOperator)); [EOL] assertFalse(new UriTokenizer("-INF").next(TokenKind.MinusOperator)); [EOL] assertFalse(new UriTokenizer("+").next(TokenKind.MinusOperator)); [EOL] [EOL] assertFalse(new UriTokenizer("nottrue").next(TokenKind.NotOperator)); [EOL] assertFalse(new UriTokenizer("no true").next(TokenKind.NotOperator)); [EOL] [EOL] tokenizer = new UriTokenizer("true or not false and 1 eq 2 add 3 sub 4 mul 5 div 6 mod 7"); [EOL] assertTrue(tokenizer.next(TokenKind.BooleanValue)); [EOL] assertTrue(tokenizer.next(TokenKind.OrOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.NotOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.BooleanValue)); [EOL] assertTrue(tokenizer.next(TokenKind.AndOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.EqualsOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.AddOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.SubOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.MulOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.DivOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.ModOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] [EOL] tokenizer = new UriTokenizer("1 gt 2 or 3 ge 4 or 5 lt 6 or 7 has namespace.name'flag1,flag2'"); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.GreaterThanOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.OrOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.GreaterThanOrEqualsOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.OrOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.LessThanOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.OrOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.IntegerValue)); [EOL] assertTrue(tokenizer.next(TokenKind.HasOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.EnumValue)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(18, strBuilder0.size()); [EOL]       assertEquals(18, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertEquals(36, strBuilder0.size()); [EOL]       assertEquals(36, strBuilder2.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(54, strBuilder0.size()); [EOL]       assertEquals(54, strBuilder3.size()); [EOL]       assertEquals(54, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder4.size()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder4.size()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertEquals(86, strBuilder0.size()); [EOL]       assertEquals(86, strBuilder3.size()); [EOL]       assertEquals(86, strBuilder5.size()); [EOL]       assertEquals(86, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertEquals(93, strBuilder0.size()); [EOL]       assertEquals(93, strBuilder3.size()); [EOL]       assertEquals(93, strBuilder6.size()); [EOL]       assertEquals(93, strBuilder2.size()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals(0, set0.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(93, strBuilder0.size()); [EOL]       assertEquals(93, strBuilder4.size()); [EOL]       assertEquals(0, set0.size()); [EOL]       assertEquals(93, strBuilder7.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void getUserInfo() throws Exception { [EOL] TestSubscriber<UserInfo> subscriber = TestSubscriber.create(); [EOL] userDataSource.getUserInfo("TellH").subscribe(subscriber); [EOL] subscriber.assertValueCount(1); [EOL] List<UserInfo> event = subscriber.getOnNextEvents(); [EOL] assertNotNull(event); [EOL] assertTrue(event.size() == 1); [EOL] for (UserInfo userInfo : event) { [EOL] System.out.println(userInfo.toString()); [EOL] } [EOL] } [EOL]
@Test [EOL] public void should_highlight_only_partially_if_file_can_not_be_lexed() throws Exception { [EOL] File file = TestUtils.getResource("/org/sonar/plugins/groovy/foundation/Error.groovy"); [EOL] [EOL] SensorContextTester context = SensorContextTester.create(file.getParentFile()); [EOL] DefaultInputFile inputFile = new DefaultInputFile("", "Error.groovy") [EOL] .setLanguage(Groovy.KEY) [EOL] .setType(Type.MAIN) [EOL] .initMetadata(new String(Files.readAllBytes(file.toPath()), "UTF-8")); [EOL] context.fileSystem().add(inputFile); [EOL] [EOL] GroovyHighlighterAndTokenizer highlighter = new GroovyHighlighterAndTokenizer(inputFile); [EOL] [EOL] context = Mockito.spy(context); [EOL] highlighter.processFile(context); [EOL] [EOL] assertThat(context.highlightingTypeAt(":Error.groovy", 1, 0)).containsOnly(TypeOfText.KEYWORD); [EOL] assertThat(context.highlightingTypeAt(":Error.groovy", 2, 2)).containsOnly(TypeOfText.KEYWORD); [EOL] assertThat(context.highlightingTypeAt(":Error.groovy", 3, 2)).isEmpty(); [EOL] Mockito.verify(context, Mockito.times(1)).newHighlighting(); [EOL] } [EOL]
@Test [EOL] public void testAddSshKey() throws Exception [EOL] { [EOL] environment.addSshKey( SSH_KEY, true ); [EOL] [EOL] verify( environmentManager ).addSshKey( environment.getId(), SSH_KEY, true ); [EOL] } [EOL]
@Test [EOL] public void testReplaceAllInstancesOfBoundedString() { [EOL] assertEquals("", TextUtils.replaceBoundedString("", PREFIX, SUFFIX, REPLACEMENT)); [EOL] assertEquals("", TextUtils.replaceBoundedString("", PREFIX, "", REPLACEMENT)); [EOL] assertEquals("", TextUtils.replaceBoundedString("", "", "", REPLACEMENT)); [EOL] [EOL] DEF_GEN.setExpectedMatches(""); [EOL] assertEquals(REPLACEMENT, TextUtils.replaceBoundedString("PREFIXSUF", PREFIX, SUFFIX, DEF_GEN)); [EOL] [EOL] DEF_GEN.setExpectedMatches("bbbbb"); [EOL] assertEquals("aaaaREPLACEMENTccccc", TextUtils.replaceBoundedString("aaaaPREFIXbbbbbSUFccccc", PREFIX, SUFFIX, DEF_GEN)); [EOL] [EOL] DEF_GEN.setExpectedMatches((String) null); [EOL] assertEquals("aaaPREFIXbbbbSUFF", TextUtils.replaceBoundedString("aaaPREFIXbbbbSUFF", PREFIX, "SUFFI", DEF_GEN)); [EOL] assertEquals("aRcccReeeR", TextUtils.replaceBoundedString("aPbbScccPdSeeePS", "P", "S", "R")); [EOL] } [EOL]
@Test [EOL] public void testIncrementDeliveryAttempts() throws Exception [EOL] { [EOL] [EOL] messengerDataService.incrementDeliveryAttempts( envelope ); [EOL] [EOL] verify( messageDao ).incrementDeliveryAttempts( eq( envelope.getMessage().getId().toString() ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('w'); [EOL]       char char0 = charRange0.getStart(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(true, true); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F47@g0~|IH&t"); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       char[] charArray1 = new char[8]; [EOL]        [EOL]       charArray1[0] = 'n'; [EOL]       charArray1[1] = 'n'; [EOL]       charArray1[2] = 'S'; [EOL]       charArray1[3] = 'n'; [EOL]       charArray1[4] = 'S'; [EOL]       charArray1[5] = 'S'; [EOL]       charArray1[6] = 'S'; [EOL]       charArray1[7] = 'S'; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-1), 207, 'S'); [EOL]       assertEquals(438, strBuilder0.capacity()); [EOL]       assertEquals(438, strBuilder1.capacity()); [EOL]        [EOL]       charArray0[1] = 'S'; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertEquals(438, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertEquals(438, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Ignore [EOL] @Test ( expected=ParseException.class) [EOL] public void testWhatDnBadDn() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnBadDn" ); [EOL] String dnPattern = "Blah"; [EOL] [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] parser.parse( "access to dn=\"" + dnPattern + "\"\n by *" ); [EOL] [EOL] fail(); [EOL] } [EOL]
@Test [EOL] public void testGetHostType() [EOL] { [EOL] assertEquals( HostMetricsDto.HostType.CONTAINER_HOST, chMetrics.getHostType() ); [EOL] assertEquals( HostMetricsDto.HostType.RESOURCE_HOST, rhMetrics.getHostType() ); [EOL] } [EOL]
@Test [EOL] void getClientRateLimitOverride() { [EOL] Config rawConfig = ConfigFactory.load("test.conf"); [EOL] XConfig config = new XConfig(rawConfig.getConfig("xrpc")); [EOL] [EOL] Map<String, List<Double>> configTest = config.getClientRateLimitOverride(); [EOL] [EOL] double expected1 = Double.parseDouble("550"); [EOL] double testVal1 = configTest.get("localhost").get(0); [EOL] assertEquals(expected1, testVal1); [EOL] [EOL] double expected2 = Double.parseDouble("1"); [EOL] double testVal2 = configTest.get("1.2.3.4").get(0); [EOL] [EOL] double expected3 = Double.parseDouble("2"); [EOL] double testVal3 = configTest.get("1.2.3.4").get(1); [EOL] [EOL] assertEquals(expected2, testVal2); [EOL] assertEquals(expected3, testVal3); [EOL] } [EOL]
@Test [EOL] public void testStringToArrayStingleAttributeWithTrailingCommas() [EOL] { [EOL] String[] attributes = ReturningAttributesWidget.stringToArray( " , ,cn,," ); [EOL] assertNotNull( attributes ); [EOL] assertArrayEquals( new String[] [EOL] { "cn" }, attributes ); [EOL] } [EOL]
@Test [EOL] public void testExecuteAsync() throws Exception [EOL] { [EOL] commandExecutor.executeAsync( HOST_ID, requestBuilder ); [EOL] [EOL] verify( commandProcessor ).execute( any( Request.class ), isA( DummyCallback.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]        [EOL]       standardToStringStyle0.setFieldNameValueSeparator((String) null); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testMergeOnNonExistingItem() { [EOL] itemVersionManagerImpl.merge(context, new Id(), new Id(), new Id()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntValue()  throws Throwable  { [EOL]       int int0 = CharUtils.toIntValue((Character) null, 97); [EOL]       assertEquals(97, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripToEmpty("-2+AJhSn#?.RX,#(^c="); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("-2+AJhSn#?.RX,#(^c=", "-2+AJhSn#?.RX,#(^c="); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayList0.iterator(); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, ""); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String[] stringArray0 = new String[0]; [EOL]       String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '|'; [EOL]       charArray0[1] = 'S'; [EOL]       charArray0[2] = '1'; [EOL]       charArray0[3] = 'l'; [EOL]       charArray0[4] = 'E'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "ZFU$pUC", "ZFU$pUC"); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariablePrefix("ZFU$pUC"); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetRequestDataService() throws Exception [EOL] { [EOL] assertEquals( registrationManager.getRequestDataService(), requestDataService ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('5'); [EOL]       assertTrue(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln((Object) strBuilder1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.deleteAll('o'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 79, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testAddAlertListener() throws Exception [EOL] { [EOL] Set<AlertListener> alertListeners = Sets.newHashSet(); [EOL] monitor.setAlertListeners( alertListeners ); [EOL] [EOL] monitor.addAlertListener( alertListener ); [EOL] [EOL] assertTrue( alertListeners.contains( alertListener ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replaceOnce("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is 7"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = 's'; [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('s'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder0.replace(strMatcher0, "", 0, 0, 116); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(2545, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2545 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(expected = APIException.class) [EOL] 	public void getGenerator_shouldThrowAPIExceptionIfGeneratorClassCannotBeFound() throws Exception { [EOL] 		when(administrationService.getGlobalProperty(ModuleSettings.SYSTEM_RECEIPT_NUMBER_GENERATOR)) [EOL] 		 .thenReturn("org.openmrs.module.openhmis.cashier.NotAValidClass"); [EOL] [EOL] 		ReceiptNumberGeneratorFactory.getGenerator(); [EOL] 	} [EOL]
@Test [EOL] public void testGetProductOperation() throws Exception [EOL] { [EOL] doReturn( true ).when( identityManager ).isAdmin(); [EOL] tracker.getTrackerOperation( SOURCE, OPERATION_ID ); [EOL] [EOL] verify( dataService ).getTrackerOperation( SOURCE, OPERATION_ID ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testOnHeadersRead_preflightOptionsRequest() { [EOL] CorsConfig corsConfig = [EOL] CorsConfigBuilder.forOrigin("test.domain") [EOL] .allowCredentials() [EOL] .allowedRequestMethods(HttpMethod.GET) [EOL] .build(); [EOL] Http2CorsHandler corsHandler = new Http2CorsHandler(corsConfig); [EOL] [EOL] testHandler = new Http2Handler(mockEncoder, MAX_PAYLOAD, corsHandler); [EOL] [EOL] headers [EOL] .method("OPTIONS") [EOL] .add("origin", "test.domain") [EOL] .add("access-control-request-method", "GET") [EOL] .path(OK_PATH); [EOL] [EOL] testHandler.onHeadersRead(mockContext, STREAM_ID, headers, 1, true); [EOL] assertEquals(1L, requestMeter.getCount()); [EOL] [EOL] verifyResponse( [EOL] HttpResponseStatus.OK, [EOL] ImmutableMap.of( [EOL] "access-control-allow-methods", [EOL] "GET", [EOL] "access-control-allow-origin", [EOL] corsConfig.origin(), [EOL] "access-control-allow-credentials", [EOL] "true"), [EOL] Optional.empty(), [EOL] STREAM_ID); [EOL] } [EOL]
@Test [EOL] public void testVisit() throws Exception { [EOL] SessionContext context = TestUtils.createSessionContext(USER, "test"); [EOL] ElementContext elementContext = new ElementContext(new Id(), new Id()); [EOL] Space space = Space.PRIVATE; [EOL] CoreElement element = new CoreElement(); [EOL] visitor.visit(context, elementContext, space, element); [EOL] [EOL] verify(elementCommandFactoryMock).executeCommand(context, elementContext, space, element); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigit(1); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((short) (-1)); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (-152L); [EOL]       longArray0[1] = (long) (short) (-1); [EOL]       longArray0[2] = (long) (short) (-1); [EOL]       longArray0[3] = (long) (short) (-1); [EOL]       longArray0[4] = (-1L); [EOL]       longArray0[5] = (long) (short) (-1); [EOL]       longArray0[6] = (long) Integer.MAX_VALUE; [EOL]       longArray0[7] = (long) Integer.MAX_VALUE; [EOL]       HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(longArray0); [EOL]       HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, Integer.MAX_VALUE, (Object) hashCodeBuilder3); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, true); [EOL]       //  // Unstable assertion: assertEquals(952405261, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(0, 0, 0); [EOL]       Date date0 = DateUtils.setDays(mockDate0, 0); [EOL]       mockDate0.setTime(0); [EOL]       boolean boolean0 = DateUtils.isSameInstant(date0, (Date) mockDate0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRESERVE_NET() throws Exception [EOL] { [EOL] workflow.RESERVE_NET(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('7'); [EOL]       assertEquals(14, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testAdvertiseInNeighborhoodNotLoggedIn() { [EOL] try { [EOL] Syncbase.advertiseLoggedInUserInNeighborhood(); [EOL] fail("should throw because the user isn't logged in"); [EOL] } catch (SyncbaseException e) { [EOL] // We expect the advertise attempt to throw. [EOL] } [EOL] } [EOL]
@Test [EOL] public void nullOK() { [EOL] assertFalse(new UriTokenizer(null).next(null)); [EOL] assertTrue(new UriTokenizer(null).next(TokenKind.EOF)); [EOL] } [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldThrowIllegalArgExceptionIfExtensionIsNullOrEmpty() { [EOL] try { [EOL] ScriptEngineUtils.canFactoryForExtensionProcessViews(null, null); [EOL] fail(); [EOL] } catch (IllegalArgumentException e) { [EOL] // expected [EOL] } [EOL] [EOL] try { [EOL] ScriptEngineUtils.canFactoryForExtensionProcessViews("", null); [EOL] fail(); [EOL] } catch (IllegalArgumentException e) { [EOL] // expected [EOL] } [EOL] } [EOL]
@Test [EOL] public void suffixes() { [EOL] UriTokenizer tokenizer = new UriTokenizer("p1 asc,p2 desc"); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.AscSuffix)); [EOL] assertTrue(tokenizer.next(TokenKind.COMMA)); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.DescSuffix)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] [EOL] wrongToken(TokenKind.DescSuffix, " desc", 'D'); [EOL] } [EOL]
@Test [EOL] public void attemptCreateSyncgroupWithinBatch() throws SyncbaseException, [EOL] ExecutionException, InterruptedException { [EOL] BatchDatabase batch = Syncbase.database().beginBatch(new Database.BatchOptions()); [EOL] [EOL] thrown.expect(IllegalArgumentException.class); [EOL] thrown.expectMessage("Cannot create syncgroup in a batch"); [EOL] [EOL] batch.createCollection(new CollectionOptions()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('9', '9'); [EOL]       char char0 = charRange0.getEnd(); [EOL]       assertEquals('9', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testMergeNonExistingSource() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] [EOL] Id sourceVersionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, sourceVersionId); [EOL] [EOL] itemVersionManagerImpl.merge(context, itemId, versionId, sourceVersionId); [EOL] } [EOL]
@Test [EOL] public void testGetResourceHostByContainerName() throws Exception [EOL] { [EOL] assertEquals( resourceHost, localPeer.getResourceHostByContainerHostName( CONTAINER_HOST_NAME ) ); [EOL] } [EOL]
@Test [EOL] public void testNotifyAgent() throws Exception [EOL] { [EOL] [EOL] WebClient webClient = mock( WebClient.class ); [EOL] Response response = mock( Response.class ); [EOL] [EOL] doReturn( "IP" ).when( resourceHostInfo ).getAddress(); [EOL] doReturn( webClient ).when( commandProcessor ).getWebClient( resourceHostInfo ); [EOL] doReturn( response ).when( webClient ).form( any( Form.class ) ); [EOL] doReturn( Response.Status.ACCEPTED.getStatusCode() ).when( response ).getStatus(); [EOL] [EOL] commandProcessor.notifyAgent( resourceHostInfo ); [EOL] [EOL] verify( hostRegistry ).updateResourceHostEntryTimestamp( HOST_ID ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 0; [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       linkedList0.sort(comparator0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = 2; [EOL]       boolean boolean0 = linkedList0.add((Object) strBuilder0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.setCharAt(2, 'l'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (-2690.0); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-2690.0), 2536); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void joinSyncgroup() { [EOL] Id dbId = new Id("idp:a:angrybirds", "join_syncgroup"); [EOL] String dbName = dbId.encode(); [EOL] Id sgId = new Id("idp:u:alice", "syncgroup"); [EOL] boolean exceptionThrown = false; [EOL] try { [EOL] Database.JoinSyncgroup( [EOL] dbName, "", new ArrayList<String>(), sgId, new SyncgroupMemberInfo()); [EOL] } catch (VError vError) { [EOL] assertEquals("v.io/v23/verror.NoExist", vError.id); [EOL] assertNotNull(vError.message); [EOL] assertNotNull(vError.stack); [EOL] assertEquals(0, vError.actionCode); [EOL] exceptionThrown = true; [EOL] } [EOL] assertTrue(exceptionThrown); [EOL] } [EOL]
@Test( expected = PeerException.class ) [EOL] public void testDestroyContainer() throws Exception [EOL] { [EOL] remotePeer.destroyContainer( containerHost.getContainerId() ); [EOL] [EOL] [EOL] remotePeer.destroyContainer( containerHost.getContainerId() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBetween("b#7v\"Z6i?umpQU", "b#7v\"Z6i?umpQU"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       String string1 = "The character must not be null"; [EOL]       int int0 = 229; [EOL]       String string2 = StringUtils.abbreviate("The character must not be null", 229); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "The character must not be null"; [EOL]       charSequenceArray0[2] = (CharSequence) null; [EOL]       int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0); [EOL]       assertEquals(3, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]); [EOL]       assertEquals(3, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("The character must not be null"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", 229, (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(106, strBuilder0.size()); [EOL]       assertEquals(106, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertEquals(110, strBuilder0.size()); [EOL]       assertEquals(110, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder2.size()); [EOL]       assertEquals(114, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder1.size()); [EOL]       assertEquals(109, strBuilder4.size()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder1.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder2.size()); [EOL]       assertEquals(109, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder2.size()); [EOL]       assertEquals(109, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Class<Object> class0 = Object.class; [EOL]       String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0, true, (Class<? super Object>) class0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.setIgnoreEmptyTokens(true); [EOL]       assertEquals(2, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.uncapitalize(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testStartSession() [EOL] { [EOL] assertNotNull(session); [EOL] } [EOL]
@Test [EOL] public void testIsExistWhenNot() { [EOL] Id itemId = new Id(); [EOL] doReturn(new Response<>(false)).when(stateAdaptorMock).isItemExist(context, itemId); [EOL] boolean exist = itemManagerImpl.isExist(context, itemId); [EOL] Assert.assertFalse(exist); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(101); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[7]; [EOL]       strBuilderArray0[0] = strBuilder0; [EOL]       strBuilderArray0[1] = strBuilder0; [EOL]       strBuilderArray0[2] = strBuilder0; [EOL]       strBuilderArray0[3] = strBuilder0; [EOL]       strBuilderArray0[4] = strBuilder0; [EOL]       strBuilderArray0[5] = strBuilder0; [EOL]       strBuilderArray0[6] = strBuilder0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.setNewLineText(""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void roundingInAdjustedBill_shouldConsiderRoundingOfPreviousBill() throws Exception { [EOL] 		CashierOptions cashierOptions = cashOptService.getOptions(); [EOL] 		Assert.assertEquals(5, (int)cashierOptions.getRoundToNearest()); [EOL] [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(8)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		IItemDataService itemService = Context.getService(IItemDataService.class); [EOL] 		Item roundingItem = itemService.getByUuid(cashierOptions.getRoundingItemUuid()); [EOL] [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(2, bill.getLineItems().size()); [EOL] 		item.setLineItemOrder(1); [EOL] 		bill.addLineItem(item); [EOL] 		Assert.assertEquals(3, bill.getLineItems().size()); [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(3, bill.getLineItems().size()); [EOL] 		BigDecimal roundingValue = new BigDecimal(0); [EOL] 		BigDecimal itemTotal = new BigDecimal(0); [EOL] 		int roundingItemCounter = 0; [EOL] 		for (BillLineItem lineItem : bill.getLineItems()) { [EOL] 			if (lineItem.getItem() != null && roundingItem.getId().equals(lineItem.getItem().getId())) { [EOL] 				roundingValue = roundingValue.add(lineItem.getTotal()); [EOL] 				roundingItemCounter++; [EOL] 			} else { [EOL] 				itemTotal = itemTotal.add(lineItem.getTotal()); [EOL] 			} [EOL] 		} [EOL] 		Assert.assertEquals(16, itemTotal.intValue()); [EOL] 		Assert.assertEquals(-1, roundingValue.intValue()); [EOL] 		Assert.assertEquals(1, roundingItemCounter); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0); [EOL]       int int0 = pair0.compareTo(pair0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testUpdateOnNonExistingItem() { [EOL] itemVersionManagerImpl.update(context, new Id(), new Id(), new ItemVersionData()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("2YZaq+Yp"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'E'; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher_NoMatcher0); [EOL]       String string0 = strTokenizer0.next(); [EOL]        [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('D'); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher(strMatcher_CharMatcher0); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Float float0 = new Float(0.0F); [EOL]       mutableInt0.setValue((Number) float0); [EOL]       assertEquals(0, mutableInt0.intValue()); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.THREE_QUARTERS.negate(); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals((-0.75), fraction2.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('\u000B'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testOpenLdapSchemaRendererAttributeTypeSimple() [EOL] { [EOL] String actual = OpenLdapSchemaFileExporter.toSourceCode( attributeTypeSimple ); [EOL] String expected = "attributetype ( 1.2.3.4 NAME 'name0'\n\tEQUALITY matchingRule0\n\tSYNTAX 2.3.4.5{512}\n\tCOLLECTIVE\n\tUSAGE userApplications )"; [EOL] assertEquals( expected, actual ); [EOL] } [EOL]
@Test [EOL] public void testMergeContainer() throws Exception [EOL] { [EOL] environmentService.mergeContainer( environmentContainer ); [EOL] [EOL] verify( entityManager ).merge( environmentContainer ); [EOL] } [EOL]
@Test( expected = PeerException.class ) [EOL] public void testStartContainer() throws Exception [EOL] { [EOL] localPeer.startContainer( containerHost.getContainerId() ); [EOL] [EOL] verify( resourceHost ).startContainerHost( containerHost ); [EOL] [EOL] RuntimeException cause = mock( RuntimeException.class ); [EOL] [EOL] doThrow( cause ).when( resourceHost ).startContainerHost( containerHost ); [EOL] [EOL] localPeer.startContainer( containerHost.getContainerId() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(256); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, ""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder3, (-2074), (-2074)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(strBuilder3); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       char char0 = '|'; [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.validateRange(32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test( expected = NetworkManagerException.class ) [EOL] public void testExecute() throws Exception [EOL] { [EOL] when( commandResult.hasSucceeded() ).thenReturn( false ); [EOL] [EOL] networkManager.execute( containerHost, requestBuilder ); [EOL] } [EOL]
@Test(expected=SerializerException.class) [EOL] public void serializer() throws SerializerException { [EOL] odata.createSerializer(null); [EOL] } [EOL]
@Test( expected = IllegalArgumentException.class ) [EOL] public void testInvalidDiskUsage() [EOL] { [EOL] peerPolicy.setDiskUsageLimit( -1 ); [EOL] } [EOL]
@Test [EOL] public void testRemove() throws Exception [EOL] { [EOL] doReturn( true ).when( environmentAdapter ).removeEnvironment( environment ); [EOL] environmentManager.remove( environment ); [EOL] [EOL] verify( environmentService ).remove( TestHelper.ENV_ID ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.firstNonNull(objectArray0); [EOL]       Object object1 = ObjectUtils.defaultIfNull(object0, (Object) "org.apache.commons.lang3.ObjectUtils"); [EOL]       assertEquals("org.apache.commons.lang3.ObjectUtils", object1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRemoveAlertHandler() throws Exception [EOL] { [EOL] AlertHandler alertHandler = mock( AlertHandler.class ); [EOL] environmentManager.alertHandlers.put( "ID", alertHandler ); [EOL] doReturn( "ID" ).when( alertHandler ).getId(); [EOL] [EOL] environmentManager.removeAlertHandler( alertHandler ); [EOL] [EOL] assertFalse( environmentManager.alertHandlers.containsValue( alertHandler ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       int int0 = ObjectUtils.CONST(1960); [EOL]       assertEquals(1960, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(97); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceSystemProperties()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRun() throws Exception [EOL] { [EOL] [EOL] responseProcessor.run(); [EOL] [EOL] verify( commandProcess ).appendResponse( response ); [EOL] verify( commandProcess ).getCallback(); [EOL] verify( callback ).onResponse( eq( response ), any( CommandResult.class ) ); [EOL] verify( commandProcess ).isDone(); [EOL] verify( commandProcessor ).remove( any( Request.class ) ); [EOL] verify( commandProcess ).stop(); [EOL] [EOL] [EOL] RuntimeException exception = mock( RuntimeException.class ); [EOL] doThrow( exception ).when( commandProcess ).isDone(); [EOL] [EOL] responseProcessor.run(); [EOL] [EOL] verify( exception ).printStackTrace( any( PrintStream.class ) ); [EOL] } [EOL]
@Test [EOL] public void setVisibleViewGone() { [EOL] View view = new View(new Activity()); [EOL] view.setVisibility(VISIBLE); [EOL] assertEquals(VISIBLE, view.getVisibility()); [EOL] ViewUtils.setGone(view, true); [EOL] assertEquals(GONE, view.getVisibility()); [EOL] } [EOL]
@Test [EOL] 	public void testConstructorStrings() { [EOL] 		NgTemplate template = new NgTemplate("<h1>moin</h1>", "NgTemplateTest") { [EOL] [EOL] 			/** [EOL] 			 * [EOL] 			 */ [EOL] 			private static final long serialVersionUID = 1L; [EOL] 		}; [EOL] 		assertEquals("<h1>moin</h1>", template.getState().templateSource); [EOL] 		assertEquals("NgTemplateTest", template.getState().moduleName); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(238); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll('s'); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       boolean boolean0 = fraction0.equals(fraction0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Integer integer1 = new Integer(0); [EOL]       MutableTriple<Object, Object, Integer> mutableTriple0 = MutableTriple.of((Object) integer0, (Object) integer0, integer1); [EOL]       mutableTriple0.setLeft(integer1); [EOL]       assertTrue(integer1.equals((Object)integer0)); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldAllowEmptyReportDirectory(@TempDir final Path temp) throws Exception { [EOL] final Path home = Files.createDirectories(temp.resolve("home")); [EOL] [EOL] createConfig(home, "allure-test.yml"); [EOL] [EOL] final ConfigOptions options = mock(ConfigOptions.class); [EOL] when(options.getProfile()).thenReturn("test"); [EOL] final Path reportPath = Files.createDirectories(temp.resolve("report")); [EOL] final Commands commands = new Commands(home); [EOL] final ExitCode exitCode = commands.generate(reportPath, Collections.emptyList(), false, options); [EOL] [EOL] assertThat(exitCode) [EOL] .isEqualTo(ExitCode.NO_ERROR); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = new StrBuilder("0rn@[CM"); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testWhenPersistingAValidDocument() { [EOL] final DocumentArchivingContext documentArchivingContext = createDocumentArchivingContext(); [EOL] final DocumentCreationContext documentCreationContext = DocumentCreationContext.builder() [EOL] .build(); [EOL] when(documentCreationContextFactory.newContext(documentArchivingContext)) [EOL] .thenReturn(Mono.just(documentCreationContext)); [EOL] final DocumentEntity documentEntity = DocumentEntity.builder() [EOL] .build(); [EOL] when(documentEntityFactory.newDocumentEntity(documentCreationContext)) [EOL] .thenReturn(Mono.just(documentEntity)); [EOL] [EOL] final Mono<DocumentEntity> result = underTest.archiveDocument(documentArchivingContext); [EOL] [EOL] StepVerifier.create(result) [EOL] .consumeNextWith(documentEntity1 -> assertThat(documentEntity1, is(documentEntity))) [EOL] .verifyComplete(); [EOL] [EOL] verify(vaultDocumentStorage).persistDocument(eq(documentEntity), documentContent.capture()); [EOL] assertThat(documentContent.getValue(), is(CONTENT)); [EOL] verify(documentCreationContextFactory).newContext(documentArchivingContext); [EOL] verify(documentEntityFactory).newDocumentEntity(documentCreationContext); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       String string0 = "htoXU5/8-3A+"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("htoXU5/8-3A+"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.reverse(); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       char char0 = 'X'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln('X'); [EOL]        [EOL]       int int0 = 8; [EOL]       StrBuilder strBuilder3 = strBuilder1.setLength(8); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(8); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 0, 3125); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid length: 3125 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testIsValidEmail() [EOL] { [EOL] assertTrue( StringUtil.isValidEmail( "valid@email.com" ) ); [EOL] assertFalse( StringUtil.isValidEmail( "invalidemail@com" ) ); [EOL] assertFalse( StringUtil.isValidEmail( null ) ); [EOL] assertFalse( StringUtil.isValidEmail( "" ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[11]; [EOL]       String string0 = CharSetUtils.squeeze(stringArray0[1], stringArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetAllFields()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       List<Field> list0 = FieldUtils.getAllFieldsList(class0); [EOL]       assertTrue(list0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testFailCreateWithExistingIdOnPublic() { [EOL] Id itemId = new Id("itemId"); [EOL] Id versionId = new Id("versionId"); [EOL] doReturn(new Response<>(false)).when(stateAdaptorMock).isItemVersionExist(context, Space.PRIVATE, itemId, versionId); [EOL] doReturn(new Response<>(true)).when(stateAdaptorMock).isItemVersionExist(context, Space.PUBLIC, itemId, versionId); [EOL] [EOL] itemVersionManagerImpl.create(context, itemId, versionId, null, new ItemVersionData()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.min((byte)0, (byte)1, (byte) (-57)); [EOL]       assertEquals((byte) (-57), byte0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcall()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = 'B'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: "); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith(""); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(true); [EOL]       assertEquals(4, strBuilder0.length()); [EOL]       assertEquals(4, strBuilder1.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.deleteCharAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldGetPluralObject() throws Exception { [EOL] 		// build witsmlObjects list [EOL] 		ArrayList<AbstractWitsmlObject> witsmlObjects; [EOL] 		witsmlObjects = new ArrayList<>(); [EOL] [EOL] 		com.hashmapinc.tempus.WitsmlObjects.v1311.ObjWellbore wellboreA = new com.hashmapinc.tempus.WitsmlObjects.v1311.ObjWellbore(); [EOL] 		wellboreA.setName("wellbore-A"); [EOL] 		wellboreA.setUid("wellbore-A"); [EOL] 		witsmlObjects.add(wellboreA); [EOL] [EOL] 		com.hashmapinc.tempus.WitsmlObjects.v1311.ObjWellbore wellboreB = new com.hashmapinc.tempus.WitsmlObjects.v1311.ObjWellbore(); [EOL] 		wellboreB.setName("wellbore-B"); [EOL] 		wellboreB.setUid("wellbore-B"); [EOL] 		witsmlObjects.add(wellboreB); [EOL] [EOL] [EOL] 		// build query context [EOL] 		QueryContext qc = new QueryContext( [EOL] 			"1.3.1.1", [EOL] 			"wellbore", [EOL] 			new HashMap<>(), [EOL] 			"", [EOL] 			witsmlObjects, [EOL] 			"goodUsername", [EOL] 			"goodPassword", [EOL] 			"shouldGetPluralObject" // exchange ID [EOL] 		); [EOL] [EOL] [EOL] 		// mock delegator behavior [EOL] 		doReturn(wellboreA).when(this.mockDelegator).getObject(wellboreA, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.mockClient, new HashMap<>()); [EOL] 		doReturn(wellboreB).when(this.mockDelegator).getObject(wellboreB, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.mockClient, new HashMap<>()); [EOL] [EOL] 		// test [EOL] 		String expected = // expected = merge wellboreA and wellbore B [EOL] 			wellboreA.getXMLString("1.3.1.1").replace("</wellbores>", "") + [EOL] 			wellboreB.getXMLString("1.3.1.1").replace( [EOL] 				"<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>" + [EOL] 				"<wellbores version=\"1.3.1.1\" xmlns=\"http://www.witsml.org/schemas/131\">", [EOL] 				"" [EOL] 			); [EOL] 		String actual = this.valve.getObject(qc).get(); [EOL] 		assertEquals(expected, actual); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = CharSequenceUtils.lastIndexOf("", 1834, 2479); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testArmorByteArray() throws Exception [EOL] { [EOL] [EOL] String armored = new String( PGPEncryptionUtil.armorByteArray( "test".getBytes() ) ); [EOL] [EOL] assertThat( armored, startsWith( "-----BEGIN PGP MESSAGE-----" ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(641); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, (-1032)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = strBuilder0.validateRange(0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testFormatWithoutIncludeOriginFlag() throws Exception { [EOL] final JsonNode result = objectMapper.readTree(formatter.format(record)); [EOL] assertThat(result.get("log.origin")).isNull(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("J"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("J", mockThrowable0); [EOL]       Class<String> class0 = String.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable1, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testMergeNonExisting() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] [EOL] itemVersionManagerImpl.merge(context, itemId, versionId, new Id()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.removeLastFieldSeparator(stringBuffer0); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void getRDServerInfo() throws Exception [EOL] { [EOL] String rdServer = desktopManager.getRDServerInfo( containerHost ); [EOL] assertEquals( RESULT_RDS, rdServer ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[1]; [EOL]       Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0); [EOL]       assertEquals(1, characterArray1.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testProcessNextResponse() throws Exception [EOL] { [EOL] commandProcess.processNextResponse( response ); [EOL] [EOL] verify( executor ).execute( isA( ResponseProcessor.class ) ); [EOL] [EOL] //---------- [EOL] [EOL] RuntimeException exception = mock( RuntimeException.class ); [EOL] doThrow( exception ).when( executor ).execute( any( ResponseProcessor.class ) ); [EOL] [EOL] commandProcess.processNextResponse( response ); [EOL] [EOL] verify( exception ).printStackTrace( any( PrintStream.class ) ); [EOL] [EOL] //---------- [EOL] [EOL] reset( executor ); [EOL] commandProcess.userSession = null; [EOL] [EOL] commandProcess.processNextResponse( response ); [EOL] [EOL] verify( executor ).execute( isA( ResponseProcessor.class ) ); [EOL] verify( session, times( 2 ) ).getSubject(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) null, class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldDeleteLogRecurringElement() throws Exception { [EOL] 		// build witsmlObjects lists [EOL] 		ArrayList<AbstractWitsmlObject> logs1311 = new ArrayList<>(); [EOL] 		ArrayList<AbstractWitsmlObject> logs1411 = new ArrayList<>(); [EOL] [EOL] 		ObjLogs logsObj1311 = new ObjLogs(); [EOL] 		com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLogs logsObj1411 = new com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLogs(); [EOL] [EOL] 		// get traj 1311 [EOL] 		ObjLog log1311 = new ObjLog(); [EOL] 		log1311.setUid("HM_800023"); [EOL] 		log1311.setUidWell("U2"); [EOL] 		log1311.setUidWellbore("WBDD600"); [EOL] 		com.hashmapinc.tempus.WitsmlObjects.v1411.CsLogCurveInfo csLogCurveInfo = new com.hashmapinc.tempus.WitsmlObjects.v1411.CsLogCurveInfo(); [EOL] 		csLogCurveInfo.setUid("lci-13"); [EOL] 		List<com.hashmapinc.tempus.WitsmlObjects.v1411.CsLogCurveInfo> csLogCurveInfoList = new ArrayList<>(); [EOL] 		csLogCurveInfoList.add(csLogCurveInfo); [EOL] 		log1311.setLogCurveInfo(csLogCurveInfoList); [EOL] 		logs1311.add(log1311); [EOL] 		logsObj1311.addLog(log1311); [EOL] [EOL] 		// get traj 1411 [EOL] 		com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLog log1411 = new com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLog(); [EOL] 		log1411.setUid("HM_800023"); [EOL] 		log1411.setUidWell("U2"); [EOL] 		log1411.setUidWellbore("WBDD600"); [EOL] 		csLogCurveInfo.setUid("lci-13"); [EOL] 		csLogCurveInfoList.add(csLogCurveInfo); [EOL] 		log1411.setLogCurveInfo(csLogCurveInfoList); [EOL] 		logs1411.add(log1411); [EOL] 		logsObj1411.addLog(log1411); [EOL] [EOL] 		// build query contexts [EOL] 		QueryContext qc1311 = new QueryContext( [EOL] 				"1.3.1.1", [EOL] 				"log", [EOL] 				null, [EOL] 				WitsmlMarshal.serialize(logsObj1311), [EOL] 				logs1311, [EOL] 				"goodUsername", [EOL] 				"goodPassword", [EOL] 				"shouldDeleteLogRecurringElement-1311" // exchange ID [EOL] 		); [EOL] 		QueryContext qc1411 = new QueryContext( [EOL] 				"1.4.1.1", [EOL] 				"log", [EOL] 				null, [EOL] 				WitsmlMarshal.serialize(logsObj1411), [EOL] 				logs1411, [EOL] 				"goodUsername", [EOL] 				"goodPassword", [EOL] 				"shouldDeleteLogRecurringElement-1411" // exchange ID [EOL] 		); [EOL] [EOL] 		// test deletes [EOL] 		this.valve.deleteObject(qc1311); [EOL] 		this.valve.deleteObject(qc1411); [EOL] [EOL] 		// verify [EOL] 		verify(this.mockDelegator).deleteObject(log1311, qc1311.USERNAME, qc1311.PASSWORD, qc1311.EXCHANGE_ID, this.mockClient); [EOL] 		verify(this.mockDelegator).deleteObject(log1411, qc1411.USERNAME, qc1411.PASSWORD, qc1411.EXCHANGE_ID, this.mockClient); [EOL] 		verifyNoMoreInteractions(this.mockDelegator); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(37); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       hashCodeBuilder1.append((double) (-1)); [EOL]       doubleArray0[0] = (double) (-2563); [EOL]       doubleArray0[1] = (double) (-2563); [EOL]       doubleArray0[2] = (double) (-1); [EOL]       hashCodeBuilder0.append(doubleArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       long long0 = NumberUtils.toLong("", (long) (byte)0); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1935.9095027)); [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals((-1935.9095F), fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('a'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(strBuilder3); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       char char0 = '|'; [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.validateRange(32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] void stripUrlParameters() { [EOL] assertEquals("https://api.nordstrom.com/foo/v1", XUrl.stripUrlParameters(url1)); [EOL] } [EOL]
@Test [EOL] public void testEscapeHtml() [EOL] { [EOL] String result = StringUtil.escapeHtml( htmlString ); [EOL] [EOL] assertFalse( result.contains( "<" ) ); [EOL] assertFalse( result.contains( ">" ) ); [EOL] assertTrue( result.contains( "&lt;" ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.append((StringBuilder) null, 79, 44); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]       assertEquals(79, strBuilder3.capacity()); [EOL]       assertEquals(79, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.clear(); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder2.capacity()); [EOL]       assertEquals(79, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]       assertEquals(79, strBuilder3.capacity()); [EOL]       assertEquals(79, strBuilder4.capacity()); [EOL]       assertEquals(79, strBuilder6.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder1.capacity()); [EOL]       assertEquals(79, strBuilder7.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertEquals(79, strBuilder0.capacity()); [EOL]       assertEquals(79, strBuilder8.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void andOther() throws Exception { [EOL] 		HandlerFunction<ServerResponse> handlerFunction = [EOL] 				request -> ServerResponse.ok().body(fromObject("42")); [EOL] 		RouterFunction<?> routerFunction1 = request -> Mono.empty(); [EOL] 		RouterFunction<ServerResponse> routerFunction2 = [EOL] 				request -> Mono.just(handlerFunction); [EOL] [EOL] 		RouterFunction<?> result = routerFunction1.andOther(routerFunction2); [EOL] 		assertNotNull(result); [EOL] [EOL] 		MockServerRequest request = MockServerRequest.builder().build(); [EOL] 		Mono<? extends HandlerFunction<?>> resultHandlerFunction = result.route(request); [EOL] [EOL] 		StepVerifier.create(resultHandlerFunction) [EOL] 				.expectNextMatches(o -> o.equals(handlerFunction)) [EOL] 				.expectComplete() [EOL] 				.verify(); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       String string0 = ExceptionUtils.getRootCauseMessage(mockThrowable0); [EOL]       assertEquals("MockThrowable: 8z/t]?%'4", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void haveAllPermissionsNo() { [EOL] when(mActivity.checkSelfPermission(PERM0)).thenReturn(PackageManager.PERMISSION_GRANTED); [EOL] when(mActivity.checkSelfPermission(PERM1)).thenReturn(PackageManager.PERMISSION_DENIED); [EOL] assertFalse(mManager.haveAllPermissions()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       IDKey iDKey0 = new IDKey("j<w?_Kh"); [EOL]       Object object0 = new Object(); [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "j<w?_Kh"; [EOL]       stringArray0[1] = "j<w?_Kh"; [EOL]       stringArray0[2] = "j<w?_Kh"; [EOL]       stringArray0[3] = "j<w?_Kh"; [EOL]       stringArray0[4] = "j<w?_Kh"; [EOL]       EqualsBuilder.reflectionEquals((Object) iDKey0, object0, stringArray0); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       int[] intArray0 = new int[2]; [EOL]       intArray0[0] = (-504); [EOL]       intArray0[1] = 0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0); [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (-504); [EOL]       floatArray0[1] = (float) 0; [EOL]       floatArray0[2] = (float) 0; [EOL]       float[] floatArray1 = new float[5]; [EOL]       floatArray1[0] = (float) (-504); [EOL]       floatArray1[1] = (float) (-504); [EOL]       floatArray1[2] = (float) 0; [EOL]       floatArray1[3] = (float) 0; [EOL]       floatArray1[4] = (float) 0; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((byte)0, (byte)1); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(' ', '8'); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(959, 0); [EOL]       equalsBuilder5.reset(); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void create() { [EOL] assertEquals("a/b", ContentType.create("a/b").toContentTypeString()); [EOL] assertEquals(ContentType.create("a/b;c=d;x=y"), ContentType.create("a/b;x=y;c=d")); [EOL] assertEquals(ContentType.create("a/b;c=d;x=y"), ContentType.create("a/b; x=y; c=d")); [EOL] assertEquals(ContentType.create("A/B"), ContentType.create("a/b")); [EOL] } [EOL]
@Test( expected = PeerException.class ) [EOL] public void testStopContainer() throws Exception [EOL] { [EOL] remotePeer.stopContainer( containerHost.getContainerId() ); [EOL] [EOL] [EOL] remotePeer.stopContainer( containerHost.getContainerId() ); [EOL] } [EOL]
@Test [EOL] public void testWhatDnValidDnWithQuote() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnValidDnWithQuote" ); [EOL] String dnPattern = "dc=example,dc=com"; [EOL] [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] AclItem aclItem = parser.parse( "access to dn=\"" + dnPattern + "\" by *" ); [EOL] assertNotNull( aclItem ); [EOL] [EOL] // Testing the 'what' clause [EOL] AclWhatClause whatClause = aclItem.getWhatClause(); [EOL] assertNotNull( whatClause ); [EOL] assertTrue( whatClause instanceof AclWhatClauseDn ); [EOL] AclWhatClauseDn whatClauseDn = (AclWhatClauseDn)whatClause; [EOL] assertEquals( dnPattern, whatClauseDn.getPattern() ); [EOL] [EOL] System.out.println( "<-- ACL:" + aclItem ); [EOL] } [EOL]
@Test [EOL] public void ejectFromSyncgroup() { [EOL] Id dbId = new Id("idp:a:angrybirds", "eject_from_syncgroup"); [EOL] String dbName = dbId.encode(); [EOL] Id sgId = new Id("idp:u:alice", "syncgroup"); [EOL] boolean exceptionThrown = false; [EOL] try { [EOL] Database.Create(dbName, anyDbPermissions()); [EOL] Database.EjectFromSyncgroup(dbName, sgId, ""); [EOL] } catch (VError vError) { [EOL] assertEquals("v.io/v23/verror.NoExist", vError.id); [EOL] exceptionThrown = true; [EOL] } [EOL] assertTrue(exceptionThrown); [EOL] } [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldThrowIllegalArgExceptionIfFactoryIsNull() { [EOL] try { [EOL] ScriptEngineUtils.canFactoryProcessViews(null, null); [EOL] fail(); [EOL] } catch (IllegalArgumentException e) { [EOL] // expected [EOL] } [EOL] } [EOL]
@Test [EOL] public void parsePhrase() throws Exception { [EOL] SearchTokenizer tokenizer = new SearchTokenizer(); [EOL] List<SearchQueryToken> result; [EOL] [EOL] assertQuery("abc AND \"x-y_z\" AND olingo"); [EOL] [EOL] // [EOL] result = tokenizer.tokenize("\"abc\""); [EOL] Assert.assertNotNull(result); [EOL] [EOL] Assert.assertEquals(PHRASE, result.get(0).getToken()); [EOL] [EOL] // [EOL] result = tokenizer.tokenize("\"9988 abs\""); [EOL] Assert.assertNotNull(result); [EOL] [EOL] Assert.assertEquals(PHRASE, result.get(0).getToken()); [EOL] Assert.assertEquals("\"9988 abs\"", result.get(0).getLiteral()); [EOL] [EOL] // [EOL] result = tokenizer.tokenize("\"99_88.\""); [EOL] Assert.assertNotNull(result); [EOL] [EOL] Assert.assertEquals(PHRASE, result.get(0).getToken()); [EOL] Assert.assertEquals("\"99_88.\"", result.get(0).getLiteral()); [EOL] [EOL] assertQuery("abc or \"xyz\"").resultsIn(WORD, WORD, PHRASE); [EOL] } [EOL]
@Test [EOL] 	public void addRoundingLineItem_shouldNotModifyABillThatNeedsNoRounding() [EOL] 	 throws Exception { [EOL] 		CashierOptions cashierOptions = cashOptService.getOptions(); [EOL] 		Assert.assertEquals(5, (int)cashierOptions.getRoundToNearest()); [EOL] [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(5)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String[]) null); [EOL]       assertNull(charSet0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4387)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = linkedHashSet0.add(strBuilder0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertFalse(linkedHashSet0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(linkedHashSet0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.ensureCapacity((-4387)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendPadding((-764), 'x'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(linkedHashSet0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetP2pVersion() throws Exception [EOL] { [EOL] networkManager.getP2pVersion( resourceHost ); [EOL] [EOL] verify( commandResult ).getStdOut(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z"); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertTrue(string4.equals((Object)string1));6z", string4); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGrowEnvironment() throws Exception [EOL] { [EOL] [EOL] doReturn( environmentCreationRef ).when( environmentManager ) [EOL] .modifyEnvironment( eq( TestHelper.ENV_ID ), eq( topology ), anySet(), [EOL] anyMap(), anyBoolean() ); [EOL] [EOL] environmentManager.growEnvironment( TestHelper.ENV_ID, topology, false ); [EOL] [EOL] verify( environmentManager ) [EOL] .modifyEnvironment( eq( TestHelper.ENV_ID ), eq( topology ), anySet(), anyMap(), anyBoolean() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetPeerId() throws Exception [EOL] { [EOL] assertEquals( PEER_ID, environmentContainer.getPeerId() ); [EOL] } [EOL]
@Test [EOL] public void testINIT() throws Exception [EOL] { [EOL] workflow.INIT(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Short[] shortArray0 = new Short[2]; [EOL]       Short short0 = new Short((short)20); [EOL]       shortArray0[0] = short0; [EOL]       shortArray0[1] = shortArray0[0]; [EOL]       short[] shortArray1 = ArrayUtils.toPrimitive(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)20, (short)20}, shortArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[0] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testOnCancellation() throws Exception [EOL] { [EOL] workflow.onCancellation(); [EOL] [EOL] verify( trackerOperation ).addLogFailed( anyString() ); [EOL] } [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testDeleteNonExisting() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] itemVersionManagerImpl.delete(context, itemId, versionId); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 798); [EOL]       Fraction fraction1 = fraction0.add(fraction0); [EOL]       assertSame(fraction1, fraction0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z"); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setContentEnd((String) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testAbortChain() throws Exception [EOL] { [EOL] // 403 [EOL] MessageContentUtil.abortChain( message, new AccessControlException( "" ) ); [EOL] [EOL] verify( response ).setStatus( 403 ); [EOL] [EOL] [EOL] // 401 [EOL] MessageContentUtil.abortChain( message, new LoginException( "" ) ); [EOL] [EOL] verify( response ).setStatus( 401 ); [EOL] [EOL] [EOL] // 500 [EOL] MessageContentUtil.abortChain( message, new RuntimeException( "" ) ); [EOL] [EOL] verify( response ).setStatus( 500 ); [EOL] [EOL] verify( interceptors, atLeastOnce() ).abort(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[0] = true; [EOL]       boolean boolean0 = BooleanUtils.or(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       double double0 = NumberUtils.min(0.0, 784.9377, 784.9377); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testUnEscapeHtml() [EOL] { [EOL] String result = StringUtil.escapeHtml( htmlString ); [EOL] result = StringUtil.unEscapeHtml( result ); [EOL] [EOL] assertTrue( result.contains( "<" ) ); [EOL] assertFalse( result.contains( "&lt;" ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       compareToBuilder0.append((byte[]) null, byteArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void create() { [EOL] Id dbId = new Id("idp:a:angrybirds", "core_create_db"); [EOL] // The instance is empty so creating of a database should succeed. [EOL] try { [EOL] Service.database(dbId).create(anyDbPermissions()); [EOL] } catch (VError vError) { [EOL] vError.printStackTrace(); [EOL] fail(vError.toString()); [EOL] } [EOL] [EOL] // Creating the same database should raise an exception. [EOL] boolean exceptionThrown = false; [EOL] try { [EOL] Service.database(dbId).create(anyDbPermissions()); [EOL] } catch (VError vError) { [EOL] assertEquals("v.io/v23/verror.Exist", vError.id); [EOL] assertNotNull(vError.message); [EOL] assertNotNull(vError.stack); [EOL] assertEquals(0, vError.actionCode); [EOL] exceptionThrown = true; [EOL] } [EOL] assertTrue(exceptionThrown); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int2 = (-65); [EOL]       String string0 = strBuilder0.midString(62, (-65)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F)); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), 62); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       Object[] objectArray1 = new Object[3]; [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append(objectArray0, objectArray1, comparator0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append((Object) null, object0, comparator0); [EOL]       char[] charArray0 = new char[9]; [EOL]       compareToBuilder0.append(charArray0, charArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testDefaultEncoder() { [EOL] assertSame(jsonEncoder, encoders.acceptedEncoder("")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.capitalize("Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", 392); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("The Array must not be null", "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '|'; [EOL]       charArray0[1] = '/'; [EOL]       charArray0[2] = ','; [EOL]       charArray0[3] = 'B'; [EOL]       charArray0[4] = 'b'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charArray0); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("\r", 392, 392); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.replaceChars("R\"?33Lrbm5Y?s", "Minimum abbreviation width with offset is 7", "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("R\"?33Llvl5Y? "); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       String string3 = StringUtils.strip((String) null, "_iVq9-<w--D+?HoA~d"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(594); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(594, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetPrivateKeyFromStream() throws IOException, PGPException [EOL] { [EOL] try ( InputStream is = new FileInputStream( PGPTestDataFactory.PRIVATE_KEY_PATH ) ) [EOL] { [EOL] PGPPrivateKey privateKey = PGPKeyHelper.readPrivateKey( is, PGPTestDataFactory.DEFAULT_PASSWORD ); [EOL] [EOL] assertNotNull( privateKey ); [EOL] } [EOL] } [EOL]
@Issue("587") [EOL] @Issue("572") [EOL] @Test [EOL] void shouldSortByStartTimeAsc() { [EOL] final TestResult first = new TestResult() [EOL] .setName("first") [EOL] .setTime(new Time().setStart(10L)); [EOL] final TestResult second = new TestResult() [EOL] .setName("second") [EOL] .setTime(new Time().setStart(12L)); [EOL] final TestResult timeless = new TestResult() [EOL] .setName("timeless"); [EOL] [EOL] final Tree<TestResult> tree = SuitesPlugin.getData( [EOL] createSingleLaunchResults(second, first, timeless) [EOL] ); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .extracting(TreeNode::getName) [EOL] .containsExactly("timeless", "first", "second"); [EOL] } [EOL]
@Test [EOL] public void listStarredRepo1() throws Exception { [EOL] TestSubscriber<List<RepositoryInfo>> subscriber = TestSubscriber.create(); [EOL] userDataSource.listStarredRepo("TellH", Constant.SortType.SortType_Repo.STARS, 1).subscribe(subscriber); [EOL] List<List<RepositoryInfo>> onNextEvents = subscriber.getOnNextEvents(); [EOL] assertNotNull(onNextEvents); [EOL] System.out.println(onNextEvents.toString()); [EOL] List<RepositoryInfo> list = onNextEvents.get(0); [EOL] for (int i = 1; i < list.size(); i++) { [EOL] assertTrue(list.get(i).getStars() < list.get(i - 1).getStars()); [EOL] } [EOL] } [EOL]
@Test [EOL] public void testADD_KEY() throws Exception [EOL] { [EOL] workflow.ADD_KEY(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test [EOL] void shouldListData() { [EOL] PetEntity petEntity = new PetEntity(); [EOL] petEntity.setName("browny"); [EOL] petEntity.setOwner("dodong"); [EOL] when(queryService.getTypedQuery(PetEntity.class, Sort.unsorted(), entityManager)).thenReturn(query); [EOL] when(query.getResultList()).thenReturn(List.of(petEntity)); [EOL] [EOL] List<PetEntity> result = target.findAll(); [EOL] [EOL] assertThat(result.size(), is(1)); [EOL] } [EOL]
@Test(expected = IllegalArgumentException.class) [EOL] public void buildReferenceWithEntitySet() { [EOL] EdmEntitySet entitySet = mock(EdmEntitySet.class); [EOL] when(entitySet.getName()).thenReturn("Customers"); [EOL] ContextURLBuilder.create(ContextURL.with().entitySet(entitySet).suffix(Suffix.REFERENCE).build()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[1] = '|'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches(charBuffer0, false, 0, charBuffer0, 1, '|'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Boolean boolean0 = basicThreadFactory0.getDaemonFlag(); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldWorkWithEngineName() { [EOL] Dictionary<String, String> headers = new Hashtable<>(2); [EOL] headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, "js,test,groovy"); [EOL] headers.put("color", "black"); [EOL] [EOL] assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]       assertEquals(1, stringArray2.length); [EOL]        [EOL]       String string2 = StringUtils.substring("", 0, 32); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string3 = StringUtils.join(floatArray0, 'L'); [EOL]       assertEquals(0, floatArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testIsValidDocumentWhenDocumentIsValid() { [EOL] final StageLocation stageLocation = mock(StageLocation.class); [EOL] [EOL] when(stageLocationFactory.getLocation(DOCUMENT_ID.toString(), DOCUMENT_TYPE)) [EOL] .thenReturn(Mono.just(stageLocation)); [EOL] when(stageLocation.size()).thenReturn(Mono.just(MAX_FILE_SIZE_IN_BYTES - 1)); [EOL] when(downloaderConfigurationProperties.getMaximumArchiveSize()).thenReturn(MAX_FILE_SIZE_IN_BYTES); [EOL] [EOL] final InputStream documentInputStream = mock(InputStream.class); [EOL] when(stageLocation.openStream()).thenReturn(documentInputStream); [EOL] when(documentDataParser.parseDocumentMetadata(DOCUMENT_ID, DOCUMENT_TYPE, documentInputStream)) [EOL] .thenReturn( [EOL] DocumentMetadata.builder() [EOL] .build() [EOL] ); [EOL] [EOL] final Mono<Boolean> result = underTest.isValidDocument(DOCUMENT_ID.toString(), DOCUMENT_TYPE); [EOL] [EOL] StepVerifier.create(result) [EOL] .consumeNextWith(Assertions::assertTrue) [EOL] .verifyComplete(); [EOL] } [EOL]
@Test [EOL] public void testGetPeers() throws Exception [EOL] { [EOL] Set<Peer> peerSet = environmentManager.getPeers( topology ); [EOL] [EOL] assertTrue( peerSet.contains( localPeer ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 0); [EOL]        [EOL]       Reader reader0 = strBuilder1.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, ""); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.minimizeCapacity(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]        [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(36); [EOL]       ImmutableTriple<Object, Integer, String> immutableTriple0 = ImmutableTriple.of((Object) "", integer0, (String) null); [EOL]       Object object0 = immutableTriple0.getLeft(); [EOL]       assertEquals("", object0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void fromContentType() { [EOL] final List<AcceptType> acceptType = AcceptType.fromContentType(ContentType.APPLICATION_JSON); [EOL] assertNotNull(acceptType); [EOL] assertEquals(1, acceptType.size()); [EOL] assertEquals(ContentType.APPLICATION_JSON.toContentTypeString(), acceptType.get(0).toString()); [EOL] } [EOL]
@Test [EOL] public void storeAllLocalPersistentStatesShouldFailInReadOnlyMode() { [EOL] verifyFailureInReadOnlyMode(() -> moduleManager.storeAllLocalPersistentStates()); [EOL] } [EOL]
@Test [EOL] public void testCheckClientTrusted() throws Exception [EOL] { [EOL] naiveTrustManager.checkClientTrusted( certificates, "authType" ); [EOL] } [EOL]
@Test(expected = ODataRuntimeException.class) [EOL] public void doubleSystemQueryOptions() { [EOL] new UriInfoImpl() [EOL] .setSystemQueryOption(new FormatOptionImpl()) [EOL] .setSystemQueryOption(new FormatOptionImpl()); [EOL] } [EOL]
@Test [EOL] public void listAt() { [EOL] ObjectNode node = newObject(); [EOL] node.putArray("foo").add(1).add(2).add(3); [EOL] [EOL] Iterable<? extends JsonNode> value = Selectors.listAt(node, FOO_FIELD); [EOL] [EOL] assertThat(value, contains(new IntNode(1), new IntNode(2), new IntNode(3))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertArrayEquals(new short[] {}, shortArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       DateUtils.iterator((Calendar) mockGregorianCalendar0, 3); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62401465735000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=9,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=213,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=31,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL] } [EOL]
@Test [EOL] public void testBuildNonDxBundle() throws IOException { [EOL] PersistentBundle info = build("non-dx-bundle"); [EOL] logger.info("Module info parsed for {}: {}", info.getResource(), info); [EOL] [EOL] assertEquals(null, info.getGroupId()); [EOL] assertEquals("org.apache.commons.codec", info.getSymbolicName()); [EOL] assertEquals("1.8.0", info.getVersion()); [EOL] assertEquals("org.apache.commons.codec/1.8.0", info.getKey()); [EOL] assertEquals("Commons Codec", info.getDisplayName()); [EOL] } [EOL]
@Test [EOL] public void test_read_execution_data_with_only_IT() { [EOL] setMocks(false, true); [EOL] [EOL] sensor.execute(context); [EOL] [EOL] int[] oneHitlines = {9, 10, 25}; [EOL] int[] zeroHitlines = {14, 15, 17, 21, 29, 30, 32, 33, 38, 42, 47}; [EOL] int[] conditionLines = {14, 29, 30}; [EOL] int[] coveredConditions = {0, 0, 0}; [EOL] [EOL] verifyOverallMetrics(context, zeroHitlines, oneHitlines, conditionLines, coveredConditions); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testwrap()  throws Throwable  { [EOL]       String string0 = WordUtils.wrap("wil!RZ_<1#D", (-1125), (String) null, true); [EOL]       assertEquals("w\ni\nl\n!\nR\nZ\n_\n<\n1\n#\nD", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddYears()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(362L); [EOL]       Date date0 = DateUtils.addYears(mockDate0, 4); [EOL]       assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSaveResourceHostContainers() throws Exception [EOL] { [EOL] [EOL] ContainerHostInfo containerHostInfo1 = mock( ContainerHostInfo.class ); [EOL] when( containerHostInfo1.getId() ).thenReturn( UUID.randomUUID().toString() ); [EOL] [EOL] when( resourceHostInfo.getContainers() ).thenReturn( Sets.newHashSet( containerHostInfo1 ) ); [EOL] [EOL] [EOL] resourceHost.updateHostInfo( resourceHostInfo ); [EOL] [EOL] [EOL] when( resourceHostInfo.getContainers() ).thenReturn( Sets.newHashSet( containerHostInfo ) ); [EOL] [EOL] [EOL] resourceHost.updateHostInfo( resourceHostInfo ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       Stack<StrBuilder> stack0 = new Stack<StrBuilder>(); [EOL]       assertFalse(stack0.contains(strBuilder0)); [EOL]        [EOL]       LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(stack0); [EOL]       assertFalse(stack0.contains(strBuilder0)); [EOL]       assertFalse(linkedHashSet0.contains(strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0); [EOL]       assertFalse(stack0.contains(strBuilder1)); [EOL]       assertFalse(linkedHashSet0.contains(strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator(""); [EOL]        [EOL]       int int0 = (-1); [EOL]       StringWriter stringWriter0 = null; [EOL]       try { [EOL]         stringWriter0 = new StringWriter((-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Negative buffer size [EOL]          // [EOL]          verifyException("java.io.StringWriter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRemoveHtmlAndSpecialChars() [EOL] { [EOL] String result = StringUtil.removeHtmlAndSpecialChars( htmlString, true ); [EOL] [EOL] assertFalse( result.contains( "<" ) ); [EOL] assertFalse( result.contains( "script" ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testaddContextValue()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       ContextedException contextedException1 = contextedException0.addContextValue("org.apache.commons.lang3.exception.ContextedException", "org.apache.commons.lang3.exception.ContextedException"); [EOL]       String string0 = contextedException1.getMessage(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       TreeSet<DecimalFormatSymbols> treeSet0 = new TreeSet<DecimalFormatSymbols>(); [EOL]       TreeSet<DecimalFormatSymbols> treeSet1 = ObjectUtils.clone(treeSet0); [EOL]       assertTrue(treeSet1.equals((Object)treeSet0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 564, (-310)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void handleRoundingLineItem_shouldRoundBillsWithANonZeroAmountCorrectlyForFLOOR() throws Exception { [EOL] 		CashierSettings settings = ModuleSettings.loadSettings(); [EOL] 		settings.setCashierRoundingMode(CashierOptions.RoundingMode.FLOOR.toString()); [EOL] 		ModuleSettings.saveSettings(settings); [EOL] [EOL] 		settings = ModuleSettings.loadSettings(); [EOL] 		Assert.assertEquals(5, (int)settings.getCashierRoundingToNearest()); [EOL] 		Assert.assertEquals(CashierOptions.RoundingMode.FLOOR.toString(), settings.getCashierRoundingMode()); [EOL] [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(3.5)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		// One line item [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		// Do rounding [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		// Now two line items [EOL] 		Assert.assertEquals(2, bill.getLineItems().size()); [EOL] 		// Assert rounding item's price [EOL] 		BillLineItem rounding = bill.getLineItems().get(1); [EOL] 		Assert.assertEquals(new BigDecimal(-3.5), rounding.getTotal()); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) null; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder0; [EOL]       objectArray0[6] = (Object) null; [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]       assertEquals(360, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]       assertEquals(360, strBuilder2.capacity()); [EOL]       assertEquals(360, strBuilder3.capacity()); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(1L); [EOL]       assertEquals(360, strBuilder0.capacity()); [EOL]       assertEquals(360, strBuilder4.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = (-334); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-334)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('P'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(117); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-334), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -334 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test( expected = DaoException.class ) [EOL] public void testAddSubscriptionException() throws Exception [EOL] { [EOL] throwDbException(); [EOL] [EOL] monitorDao.addSubscription( ENVIRONMENT_ID, SUBSCRIBER_ID ); [EOL] } [EOL]
@Test [EOL] public void testMemory() [EOL] { [EOL] final HostMetricsDto metrics = rhMetrics.getHostMetrics(); [EOL] [EOL] MemoryDto memoryDto = metrics.getMemory(); [EOL] [EOL] assertNotNull( memoryDto ); [EOL] [EOL] assertEquals( 1440642129.26984, memoryDto.getActive(), 0.0001 ); [EOL] assertEquals( 6414672749.71429, memoryDto.getMemFree(), 0.0001 ); [EOL] assertEquals( 905762913.52381, memoryDto.getCached(), 0.0001 ); [EOL] assertEquals( 17029022.4761905, memoryDto.getBuffers(), 0.0001 ); [EOL] } [EOL]
@Test [EOL] public void testGetEntries() throws Exception [EOL] { [EOL] expiringCache.getEntries(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]       assertEquals(1, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");6z", string4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMiddle()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1); [EOL]       MutableTriple<Object, String, Object> mutableTriple0 = new MutableTriple<Object, String, Object>(integer0, "6@w7}8Hh/tF{\"6_z4:", (Object) null); [EOL]       String string0 = mutableTriple0.getMiddle(); [EOL]       assertEquals("6@w7}8Hh/tF{\"6_z4:", string0); [EOL]   } [EOL]  [EOL]
@Test( expected=ParseException.class) [EOL] public void testWhatDnBasicDnRegexNoQuote() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnBasicDnRegexNoQuote" ); [EOL] String dnPattern = "dc=*,dc=com"; [EOL] [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] AclItem aclItem = parser.parse( "access to dn.regex=" + dnPattern + " by *" ); [EOL] [EOL] fail(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 511L; [EOL]       longArray0[1] = 708L; [EOL]       long long0 = NumberUtils.min(longArray0); [EOL]       assertEquals(511L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString(34, (-1)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.ensureCapacity(34); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[1] = 'S'; [EOL]       charArray0[2] = 'L'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '`'; [EOL]       charArray0[5] = '^'; [EOL]       charArray0[6] = 'V'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.getChars(3889, 0, charArray0, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(18, charBuffer0.capacity()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(18, charBuffer0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals(0, charBuffer1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder4.capacity()); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder4.capacity()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder6.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals(50, strBuilder0.capacity()); [EOL]       assertEquals(50, strBuilder4.capacity()); [EOL]       assertEquals(50, strBuilder7.capacity()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testPropertyPathExp() throws Exception { [EOL] final String entitySetName = "ESName"; [EOL] final String keyPropertyName = "a"; [EOL] EdmProperty keyProperty = mockProperty(keyPropertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] EdmKeyPropertyRef keyPropertyRef = mockKeyPropertyRef(keyPropertyName, keyProperty); [EOL] EdmEntityType entityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(entityType.getPropertyNames()).thenReturn(Collections.singletonList(keyPropertyName)); [EOL] Mockito.when(entityType.getProperty(keyPropertyName)).thenReturn(keyProperty); [EOL] EdmEntitySet entitySet = mockEntitySet(entitySetName, entityType); [EOL] EdmEntityContainer container = mockContainer(entitySetName, entitySet); [EOL] Edm mockedEdm = Mockito.mock(Edm.class); [EOL] Mockito.when(mockedEdm.getEntityContainer()).thenReturn(container); [EOL] [EOL] UriTokenizer tokenizer = new UriTokenizer("a eq \'abc\'"); [EOL] Expression expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("{[a] EQ \'abc\'}", expression.toString()); [EOL] [EOL] tokenizer = new UriTokenizer("a in (\'abc\', \'xyz\')"); [EOL] expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("{[a] IN [\'abc\', \'xyz\']}", expression.toString()); [EOL] try { [EOL] tokenizer = new UriTokenizer("a in (\'abc\', 10)"); [EOL] expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] } catch (UriParserSemanticException e) { [EOL] assertEquals("Incompatible types.", e.getMessage()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(booleanArray0, booleanArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0); [EOL]        [EOL]       int int1 = 924; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 924, 'y'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((String) null); [EOL]        [EOL]       char char0 = '8'; [EOL]       int int2 = strBuilder0.indexOf('8'); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder((String) null); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StringBuffer stringBuffer0 = null; [EOL]       try { [EOL]         stringBuffer0 = new StringBuffer((CharSequence) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testOnAlert() throws Exception [EOL] { [EOL] AlertEvent alertEvent = mock( AlertEvent.class ); [EOL] doReturn( TestHelper.ENV_ID ).when( alertEvent ).getEnvironmentId(); [EOL] [EOL] environmentManager.onAlert( alertEvent ); [EOL] [EOL] verify( environmentManager ).handleAlertPack( eq( alertEvent ), isA( EnvironmentAlertHandlers.class ) ); [EOL] } [EOL]
@Test [EOL] public void testGetP2PConnections() throws Exception [EOL] { [EOL] doReturn( LIST_P2P_OUTPUT ).when( commandResult ).getStdOut(); [EOL] [EOL] P2PConnections p2PConnections = networkManager.getP2PConnections( resourceHost ); [EOL] [EOL] assertFalse( p2PConnections.getConnections().isEmpty() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(3421, 3421); [EOL]       int int0 = fraction0.intValue(); [EOL]       assertEquals(3421, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldConcatenateAndConstraints() { [EOL] SqlPredicate sqlPredicate1 = new SqlPredicate("pets.owner", "=", "alice"); [EOL] SqlPredicate sqlPredicate2 = new SqlPredicate("pets.name", "=", "fluffy"); [EOL] List<SqlPredicate> predicates = List.of(sqlPredicate1, sqlPredicate2); [EOL] [EOL] String result = SqlUtil.concatByAndOperation(predicates); [EOL] [EOL] assertThat(result, is("(pets.owner = 'alice' AND pets.name = 'fluffy')")); [EOL] } [EOL]
@Test [EOL] public void testOnRegistrationSucceeded() throws Exception [EOL] { [EOL] environmentManager.onRegistrationSucceeded(); [EOL] [EOL] verify( environmentManager ).uploadPeerOwnerEnvironmentsToBazaar(); [EOL] } [EOL]
@Test [EOL] void shouldLoadConfig(@TempDir final Path home) throws Exception { [EOL] createConfig(home, "allure-test.yml"); [EOL] [EOL] final ConfigOptions options = mock(ConfigOptions.class); [EOL] when(options.getProfile()).thenReturn("test"); [EOL] [EOL] final Commands commands = new Commands(home); [EOL] final CommandlineConfig config = commands.getConfig(options); [EOL] assertThat(config) [EOL] .isNotNull(); [EOL] [EOL] assertThat(config.getPlugins()) [EOL] .hasSize(3) [EOL] .containsExactly("a", "b", "c"); [EOL] } [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] doReturn( true ).doReturn( false ).when( peerTaskResult ).hasSucceeded(); [EOL] [EOL] step.execute(); [EOL] [EOL] step.execute(); [EOL] [EOL] verify( peerUtil, times( 2 ) ).executeParallel(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]        [EOL]       int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertFalse(locale_Category0.equals((Object)locale_Category1)); [EOL]       assertFalse(locale_Category1.equals((Object)locale_Category0)); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testClearSign() throws Exception [EOL] { [EOL] InputStream secondSecretStream = findFile( PLUGIN_PRIVATE_KEY ); [EOL] InputStream secondPublicStream = findFile( PLUGIN_PUBLIC_KEY ); [EOL] [EOL] PGPSecretKeyRingCollection secretKeyRingCollection = [EOL] new PGPSecretKeyRingCollection( PGPUtil.getDecoderStream( secondSecretStream ), [EOL] new JcaKeyFingerprintCalculator() ); [EOL] [EOL] PGPSecretKeyRing secretKeyRing = secretKeyRingCollection [EOL] .getSecretKeyRing( secretKeyRingCollection.iterator().next().getPublicKey().getKeyID() ); [EOL] [EOL] PGPSecretKey secondSecretKey = secretKeyRing.getSecretKey(); [EOL] [EOL] PGPPublicKeyRingCollection secondPublicKeyRingCollection = [EOL] new PGPPublicKeyRingCollection( PGPUtil.getDecoderStream( secondPublicStream ), [EOL] new JcaKeyFingerprintCalculator() ); [EOL] [EOL] [EOL] PGPPublicKeyRing pgpKeyring = secondPublicKeyRingCollection [EOL] .getPublicKeyRing( secondPublicKeyRingCollection.iterator().next().getPublicKey().getKeyID() ); [EOL] [EOL] byte[] signedMessageArmor = PGPEncryptionUtil [EOL] .clearSign( IOUtils.toString( findFile( "message.txt" ) ).getBytes(), secondSecretKey, [EOL] "123".toCharArray(), "" ); [EOL] [EOL] String signedMessage = new String( signedMessageArmor, StandardCharsets.UTF_8 ); [EOL] [EOL] logger.info( "\n" + signedMessage ); [EOL] [EOL] boolean result = PGPEncryptionUtil.verifyClearSign( signedMessage.getBytes(), pgpKeyring ); [EOL] if ( result ) [EOL] { [EOL] logger.info( "signature verified." ); [EOL] } [EOL] else [EOL] { [EOL] logger.info( "signature verification failed." ); [EOL] } [EOL] [EOL] assertEquals( true, result ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = (-4136); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4136)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-4136)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((Object) "_D]5>#kw<b6p@SuO"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder1.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceAll("", ""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder2.midString((-4136), (-4136)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.substring((-730), 938); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -730 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test( expected = EnvironmentCreationException.class ) [EOL] public void testExecute() throws Exception [EOL] { [EOL] doReturn( true ).when( response ).hasSucceeded(); [EOL] [EOL] step.execute(); [EOL] [EOL] verify( peerUtil ).executeParallelFailFast(); [EOL] [EOL] doReturn( false ).when( response ).hasSucceeded(); [EOL] [EOL] step.execute(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217), (int) (byte)10); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(289); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder3.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Issue("587") [EOL] @Issue("572") [EOL] @Test [EOL] void shouldSortByStartTimeAsc() { [EOL] final Category category = new Category().setName("some"); [EOL] [EOL] final TestResult first = new TestResult() [EOL] .setName("first") [EOL] .setStatus(Status.FAILED) [EOL] .setTime(new Time().setStart(10L)); [EOL] first.addExtraBlock(CATEGORIES, singletonList(category)); [EOL] final TestResult second = new TestResult() [EOL] .setName("second") [EOL] .setStatus(Status.FAILED) [EOL] .setTime(new Time().setStart(12L)); [EOL] second.addExtraBlock(CATEGORIES, singletonList(category)); [EOL] final TestResult timeless = new TestResult() [EOL] .setName("timeless") [EOL] .setStatus(Status.FAILED); [EOL] timeless.addExtraBlock(CATEGORIES, singletonList(category)); [EOL] [EOL] final Tree<TestResult> tree = CategoriesPlugin.getData( [EOL] createSingleLaunchResults(second, first, timeless) [EOL] ); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .flatExtracting("children") [EOL] .flatExtracting("children") [EOL] .extracting("name") [EOL] .containsExactly("timeless", "first", "second"); [EOL] } [EOL]
@Test [EOL] public void testAddCallback() throws Exception [EOL] { [EOL] commandResponseListener.addCallback( COMMAND_ID, callback, ( int ) TIMEOUT, semaphore ); [EOL] [EOL] verify( callbacks ).put( eq( COMMAND_ID ), eq( callback ), [EOL] eq( TIMEOUT * 1000 + Timeouts.COMMAND_REQUEST_MESSAGE_TIMEOUT * 2 * 1000 ), [EOL] isA( EntryExpiryCallback.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.normalizeSpace(" "); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("The Array must not be null", 10); [EOL]        [EOL]       String string2 = StringUtils.repeat('', 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ""); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string3 = "\\u00"; [EOL]       String string4 = StringUtils.lowerCase(string3); [EOL]        [EOL]       String string5 = StringUtils.overlay("dyfY", "t", (-437), (-452)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0L, (-317L)); [EOL]       char[] charArray0 = new char[2]; [EOL]       compareToBuilder1.append(charArray0, charArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSetTransientFields() throws Exception [EOL] { [EOL] doReturn( Sets.newHashSet( environmentContainer ) ).when( environment ).getContainerHosts(); [EOL] environmentManager.setTransientFields( Sets.<Environment>newHashSet( environment ) ); [EOL] [EOL] verify( environmentManager ).setEnvironmentTransientFields( environment ); [EOL] verify( environmentManager ).setContainersTransientFields( environment ); [EOL] } [EOL]
@Test [EOL] public void biggerResponse() throws Exception { [EOL] ODataResponse response = new ODataResponse(); [EOL] response.setStatusCode(HttpStatusCode.ACCEPTED.getStatusCode()); [EOL] response.setHeader(HttpHeader.CONTENT_TYPE, ContentType.APPLICATION_JSON.toContentTypeString()); [EOL] response.setHeader(HttpHeader.CONTENT_LENGTH, String.valueOf(0)); [EOL] [EOL] String testData = testData(20000); [EOL] response.setContent(IOUtils.toInputStream(testData)); [EOL] [EOL] AsyncResponseSerializer serializer = new AsyncResponseSerializer(); [EOL] InputStream in = serializer.serialize(response); [EOL] String result = IOUtils.toString(in); [EOL] assertEquals("HTTP/1.1 202 Accepted" + CRLF [EOL] + "Content-Type: application/json" + CRLF [EOL] + "Content-Length: 0" + CRLF + CRLF [EOL] + testData, result); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       Long[] longArray0 = new Long[1]; [EOL]       Long long0 = new Long(0L); [EOL]       longArray0[0] = long0; [EOL]       long[] longArray1 = ArrayUtils.toPrimitive(longArray0, (long) charArray0[2]); [EOL]       assertEquals(1, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains('5'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void decimal() { [EOL] assertTrue(new UriTokenizer("1.2").next(TokenKind.DecimalValue)); [EOL] assertFalse(new UriTokenizer(".1").next(TokenKind.DecimalValue)); [EOL] assertTrue(new UriTokenizer("-12.34").next(TokenKind.DecimalValue)); [EOL] assertTrue(new UriTokenizer("1234567890.0123456789").next(TokenKind.DecimalValue)); [EOL] assertFalse(new UriTokenizer("0,1").next(TokenKind.DecimalValue)); [EOL] assertFalse(new UriTokenizer("0..1").next(TokenKind.DecimalValue)); [EOL] } [EOL]
@Test [EOL] public void testGetAll() throws Exception [EOL] { [EOL] environmentService.getAll(); [EOL] [EOL] verify( entityManager ).createQuery( "select e from LocalEnvironment e where e.deleted = false", LocalEnvironment.class ); [EOL] [EOL] verify( query ).getResultList(); [EOL] } [EOL]
@Test [EOL] public void testBuildDxModuleReleased() throws IOException { [EOL] PersistentBundle info = build("dx-module-released"); [EOL] logger.info("Module info parsed for {}: {}", info.getResource(), info); [EOL] [EOL] assertEquals("org.jahia.modules", info.getGroupId()); [EOL] assertEquals("article", info.getSymbolicName()); [EOL] assertEquals("2.0.2", info.getVersion()); [EOL] assertEquals("org.jahia.modules/article/2.0.2", info.getKey()); [EOL] assertEquals("Jahia Article", info.getDisplayName()); [EOL] assertEquals("f1bffece4ed8f547d99685b65f9c9570", info.getChecksum()); [EOL] } [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] doReturn( true ).doReturn( false ).when( peerTaskResult ).hasSucceeded(); [EOL] [EOL] step.execute(); [EOL] [EOL] step.execute(); [EOL] [EOL] verify( peerUtil, times( 2 ) ).executeParallel(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte) (-34); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0); [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = (float) (byte) (-34); [EOL]       floatArray0[1] = (float) (byte) (-34); [EOL]       floatArray0[2] = (float) (byte) (-34); [EOL]       floatArray0[3] = (float) (byte) (-34); [EOL]       floatArray0[4] = (float) (byte) (-34); [EOL]       floatArray0[5] = (float) (byte) (-34); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, floatArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((float) (byte) (-34), (-1.0F)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) (-34.0F), (double) (byte) (-34)); [EOL]       char[] charArray0 = new char[0]; [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append(charArray0, charArray0); [EOL]       assertSame(equalsBuilder6, equalsBuilder5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testFail() throws Exception [EOL] { [EOL] Throwable throwable = mock( Throwable.class ); [EOL] workflow.fail( "", throwable ); [EOL] [EOL] verify( trackerOperation ).addLogFailed( anyString() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       assertTrue(equalsBuilder1.build()); [EOL]        [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 1.0; [EOL]       doubleArray0[1] = (-690.4802009552836); [EOL]       doubleArray0[2] = 765.3743487472304; [EOL]       doubleArray0[3] = 0.0; [EOL]       double[] doubleArray1 = new double[4]; [EOL]       doubleArray1[0] = 0.0; [EOL]       doubleArray1[1] = 0.0; [EOL]       doubleArray1[2] = (-690.4802009552836); [EOL]       doubleArray1[3] = 1.0; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248)); [EOL]       Integer integer0 = new Integer((-4784)); [EOL]       EqualsBuilder.isRegistered(integer0, "]lEx>?>"); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1.1F, 1.1F); [EOL]       equalsBuilder4.append(406, 406); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void removeEndingCRLFAll() { [EOL] String line = CRLF; [EOL] assertEquals("", BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString()); [EOL] } [EOL]
@Test( expected = IllegalArgumentException.class ) [EOL] public void testMergeSignatures_withDifferentPubKeys() throws Exception [EOL] { [EOL] PGPPublicKey alicePuKey = PGPTestDataFactory.getPublicKey( "alice" ); [EOL] [EOL] PGPPublicKey applePubKey = PGPTestDataFactory.getPublicKey( "apple" ); [EOL] [EOL] PGPSignatureUtil.mergeSignatures( alicePuKey, applePubKey ); [EOL] } [EOL]
@Test [EOL] void testOnDataRead_payloadTooLarge() { [EOL] testHandler = new Http2Handler(mockEncoder, MAX_PAYLOAD, NO_CORS); [EOL] [EOL] // Create a fake request. [EOL] XrpcRequest fakeRequest = new XrpcRequest((Http2Headers) null, null, null, channel); [EOL] testHandler.requests.put(STREAM_ID, fakeRequest); [EOL] [EOL] // Start with a small payload, then add a bigger one. [EOL] testHandler.onDataRead(mockContext, STREAM_ID, Unpooled.wrappedBuffer(new byte[10]), 0, false); [EOL] verifyNoResponse(); [EOL] testHandler.onDataRead( [EOL] mockContext, STREAM_ID, Unpooled.wrappedBuffer(new byte[MAX_PAYLOAD - 5]), 0, true); [EOL] [EOL] // Verify a TOO_MANY_REQUESTS response. [EOL] assertEquals(0L, requestMeter.getCount()); [EOL] verifyResponse( [EOL] HttpResponseStatus.REQUEST_ENTITY_TOO_LARGE, [EOL] ImmutableMap.of(), [EOL] Optional.of(Unpooled.wrappedBuffer(XrpcConstants.PAYLOAD_EXCEEDED_RESPONSE)), [EOL] STREAM_ID); [EOL] } [EOL]
@Test [EOL] public void testFormatWithoutLoggerName() throws Exception { [EOL] record.setLoggerName(null); [EOL] [EOL] final JsonNode result = objectMapper.readTree(formatter.format(record)); [EOL] [EOL] assertThat(result.get("log.logger")).isNull(); [EOL] } [EOL]
@Test [EOL] public void testParseMajorityOfHostPool() [EOL] { [EOL] VirtualCheckOperator op = VirtualCheckExpressionParser.parseVirtualCheckExpression("majority of hosts in pool 'test' as WARNING, CRITICAL"); [EOL] assertThat(op.toString(), is(equalTo("majority of hosts in pool 'test' as WARNING, CRITICAL"))); [EOL] assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test"))))); [EOL] } [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testPublishOnNonExistingItem() { [EOL] itemVersionManagerImpl.publish(context, new Id(), new Id(), ""); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, 17); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldNotFailIfReportsNotFound() { [EOL] Settings settings = mock(Settings.class); [EOL] when(settings.getString(SurefireUtils.SUREFIRE_REPORTS_PATH_PROPERTY)).thenReturn("unknown"); [EOL] [EOL] GroovySurefireSensor surefireSensor = new GroovySurefireSensor(mock(GroovySurefireParser.class), settings, fs, pathResolver); [EOL] surefireSensor.execute(mock(SensorContext.class)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisAfterRange()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-929)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-929)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isAfterRange((Range<Object>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('`'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.insert(97, (long) 2817); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendln(stringBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (float) '`'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'J', (int) (short) (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1354); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('E'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.charAt(2193); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2193 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object[] objectArray1 = new Object[4]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray1); [EOL]       int[] intArray0 = new int[6]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testReadSecretKey() throws Exception [EOL] { [EOL] PGPSecretKeyRing secretKeyRing = [EOL] PGPKeyUtil.readSecretKeyRing( PGPEncryptionUtilTest.findFile( PGPEncryptionUtilTest.SECRET_KEYRING ) ); [EOL] [EOL] assertNotNull( PGPKeyUtil.readSecretKey( secretKeyRing ) ); [EOL] } [EOL]
@Test( expected = PeerException.class ) [EOL] public void testSendRequestInternal() throws Exception [EOL] { [EOL] remotePeer.sendRequestInternal( REQUEST, RECIPIENT, TIMEOUT, headers ); [EOL] [EOL] verify( messenger ).sendMessage( any( Peer.class ), eq( message ), anyString(), eq( TIMEOUT ), eq( headers ) ); [EOL] [EOL] [EOL] doThrow( messageException ).when( messenger ) [EOL] .sendMessage( any( Peer.class ), any( Message.class ), anyString(), anyInt(), [EOL] anyMap() ); [EOL] [EOL] remotePeer.sendRequestInternal( REQUEST, RECIPIENT, TIMEOUT, headers ); [EOL] } [EOL]
@Test [EOL] public void shouldCheckDuplicateMnemonicsInRequest() throws Exception{ [EOL] String channelPayload=TestUtilities.getResourceAsString("updateTest/DuplicateMnemonicsChannelPayload.json"); [EOL] String dataPayload=TestUtilities.getResourceAsString("updateTest/DuplicateMnemonicsDataPayload.json"); [EOL] String version="1.4.1.1"; [EOL] int resultCode=DotDelegator.mnemonicsChecks(channelPayload, dataPayload, version); [EOL] assertEquals(-447, resultCode); [EOL] } [EOL]
@Test [EOL] public void testGetEnvelope() throws Exception [EOL] { [EOL] when( messageDao.find( message.getId().toString() ) ).thenReturn( messageEntity ); [EOL] [EOL] Envelope envelope1 = messengerDataService.getEnvelope( message.getId() ); [EOL] [EOL] verify( messageDao ).find( message.getId().toString() ); [EOL] } [EOL]
@Test [EOL] public void testClientEntityJSONWithNull() throws ODataSerializerException { [EOL] String expectedJson = "{\"@odata.type\":\"#test.testClientEntity\"," [EOL] + "\"testInt32@odata.type\":\"Int32\"," [EOL] + "\"testInt32\":12," [EOL] + "\"testInt32Null@odata.type\":\"Int32\"" [EOL] + ",\"testInt32Null\":null," [EOL] + "\"testString@odata.type\":\"String\"," [EOL] + "\"testString\":\"testString\"," [EOL] + "\"testStringNull@odata.type\":\"String\"," [EOL] + "\"testStringNull\":null}"; [EOL] [EOL] ODataClient odataClient = ODataClientFactory.getClient(); [EOL] ClientObjectFactory objFactory = odataClient.getObjectFactory(); [EOL] ClientEntity clientEntity = objFactory.newEntity(new FullQualifiedName("test", "testClientEntity")); [EOL] [EOL] clientEntity.getProperties().add( [EOL] objFactory.newPrimitiveProperty( [EOL] "testInt32", [EOL] objFactory.newPrimitiveValueBuilder().buildInt32(12))); [EOL] clientEntity.getProperties().add( [EOL] objFactory.newPrimitiveProperty( [EOL] "testInt32Null", [EOL] objFactory.newPrimitiveValueBuilder().buildInt32(null))); [EOL] clientEntity.getProperties().add( [EOL] objFactory.newPrimitiveProperty( [EOL] "testString", [EOL] objFactory.newPrimitiveValueBuilder().buildString("testString"))); [EOL] clientEntity.getProperties().add( [EOL] objFactory.newPrimitiveProperty( [EOL] "testStringNull", [EOL] objFactory.newPrimitiveValueBuilder().buildString(null))); [EOL] [EOL] JsonSerializer jsonSerializer = new JsonSerializer(false, ContentType.JSON_FULL_METADATA); [EOL] [EOL] StringWriter writer = new StringWriter(); [EOL] jsonSerializer.write(writer, odataClient.getBinder().getEntity(clientEntity)); [EOL] assertThat(writer.toString(), is(expectedJson)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 798); [EOL]       int int0 = fraction0.getNumerator(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRootCauseMessage()  throws Throwable  { [EOL]       String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testResolvePeer() throws Exception [EOL] { [EOL] environmentManager.resolvePeer( TestHelper.PEER_ID ); [EOL] [EOL] verify( peerManager ).getPeer( TestHelper.PEER_ID ); [EOL] } [EOL]
@Test [EOL] public void DebugStringTest() { [EOL] String s = Blessings.DebugString(); [EOL] assertTrue(s.contains("Default Blessings")); [EOL] } [EOL]
@Test [EOL] public void changeSetResponse() throws Exception { [EOL] List<ODataResponsePart> parts = new ArrayList<ODataResponsePart>(); [EOL] [EOL] ODataResponse response = new ODataResponse(); [EOL] response.setHeader(HttpHeader.CONTENT_ID, "1"); [EOL] response.setStatusCode(HttpStatusCode.NO_CONTENT.getStatusCode()); [EOL] parts.add(new ODataResponsePart(Collections.singletonList(response), true)); [EOL] [EOL] BatchResponseSerializer serializer = new BatchResponseSerializer(); [EOL] final InputStream content = serializer.serialize(parts, BOUNDARY); [EOL] [EOL] assertNotNull(content); [EOL] [EOL] final BatchLineReader reader = new BatchLineReader(content); [EOL] final List<String> body = reader.toList(); [EOL] reader.close(); [EOL] [EOL] int line = 0; [EOL] assertEquals(14, body.size()); [EOL] assertEquals("--" + BOUNDARY + CRLF, body.get(line++)); [EOL] assertTrue(body.get(line++).startsWith("Content-Type: multipart/mixed; boundary=changeset_")); [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertTrue(body.get(line++).startsWith("--changeset_")); [EOL] assertEquals("Content-Type: application/http" + CRLF, body.get(line++)); [EOL] assertEquals("Content-Transfer-Encoding: binary" + CRLF, body.get(line++)); [EOL] assertEquals("Content-ID: 1" + CRLF, body.get(line++)); [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertEquals("HTTP/1.1 204 No Content" + CRLF, body.get(line++)); [EOL] assertEquals("Content-Length: 0" + CRLF, body.get(line++)); [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertTrue(body.get(line++).startsWith("--changeset_")); [EOL] assertEquals("--" + BOUNDARY + "--" + CRLF, body.get(line++)); [EOL] } [EOL]
@Test [EOL] public void buildReference() { [EOL] final ContextURL contextURL = ContextURL.with().suffix(Suffix.REFERENCE).build(); [EOL] assertEquals("../$metadata#$ref", ContextURLBuilder.create(contextURL).toASCIIString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.minimizeCapacity(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('U'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = (StrMatcher.NoMatcher)strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.setTrimmerMatcher(strMatcher_NoMatcher0); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       String string0 = strBuilder0.leftString(2026); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendFixedWidthPadRight((Object) strBuilder_StrBuilderTokenizer1, 2026, '('); [EOL]       assertEquals(2027, strBuilder0.size()); [EOL]       assertEquals(2027, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2027, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.insert(2026, 0.0F); [EOL]       assertEquals(2030, strBuilder0.size()); [EOL]       assertEquals(2030, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2030, strBuilder4.size()); [EOL]       assertEquals(2030, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.append(0L); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]       assertEquals(2031, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2031, strBuilder4.size()); [EOL]       assertEquals(2031, strBuilder6.size()); [EOL]        [EOL]       String string1 = strBuilder_StrBuilderTokenizer0.previousToken(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setCharAt(97, '+'); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]       assertEquals(2031, strBuilder1.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]       assertEquals(2031, strBuilder4.size()); [EOL]       assertEquals(2031, strBuilder6.size()); [EOL]       assertEquals(2031, strBuilder7.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(2031, strBuilder0.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) "java.vendor.url"; [EOL]       objectArray0[1] = (Object) "U"; [EOL]       objectArray0[2] = (Object) strBuilder2; [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[4] = (Object) "U"; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer3 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       objectArray0[5] = (Object) strBuilder_StrBuilderTokenizer3; [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer0; [EOL]       StrBuilder strBuilder8 = strBuilder2.appendln("java.vendor.url", objectArray0); [EOL]       assertEquals(2047, strBuilder0.size()); [EOL]       assertEquals(2047, strBuilder1.size()); [EOL]       assertEquals(2047, strBuilder2.size()); [EOL]       assertEquals(2047, strBuilder8.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(" -~*ui'"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder8.appendln(stringBuffer0, (-1229), 2026); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between(object0, object0, comparator0); [EOL]       boolean boolean0 = range0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char0 = 'j'; [EOL]       Iterable<Object> iterable0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.="); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('j', 815); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char1 = '8'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]        [EOL]       int int1 = 516; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(516, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 516 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0); [EOL]       assertEquals(18, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDeliverMessages() throws Exception [EOL] { [EOL] when( messengerDataService.getEnvelopes() ).thenReturn( Sets.newHashSet( envelope ) ); [EOL] when( envelope.getTimeToLive() ).thenReturn( TIME_TO_LIVE ); [EOL] when( envelope.getTargetPeerId() ).thenReturn( TARGET_PEER_ID ); [EOL] when( envelope.getCreateDate() ).thenReturn( CREATE_DATE ); [EOL] when( peerManager.getPeer( TARGET_PEER_ID ) ).thenReturn( peer ); [EOL] when( peer.getId() ).thenReturn( TARGET_PEER_ID ); [EOL] when( peerManager.getLocalPeer() ).thenReturn( localPeer ); [EOL] // when( peerManager.getLocalPeerInfo() ).thenReturn( peerInfo ); [EOL] when( peerInfo.getId() ).thenReturn( UUID.randomUUID().toString() ); [EOL] when( localPeer.isLocal() ).thenReturn( false ); [EOL] when( localPeer.getId() ).thenReturn( UUID.randomUUID().toString() ); [EOL] when( completer.take() ).thenReturn( future ); [EOL] when( messenger.getPeerManager() ).thenReturn( peerManager ); [EOL] [EOL] messageSender.deliverMessages(); [EOL] [EOL] verify( completer ).submit( isA( RemotePeerMessageSender.class ) ); [EOL] [EOL] when( peer.isLocal() ).thenReturn( true ); [EOL] [EOL] messageSender.deliverMessages(); [EOL] [EOL] verify( completer ).submit( isA( LocalPeerMessageSender.class ) ); [EOL] [EOL] doThrow( new InterruptedException() ).when( completer ).take(); [EOL] [EOL] messageSender.deliverMessages(); [EOL] [EOL] verify( logger ).warn( anyString(), isA( InterruptedException.class ) ); [EOL] } [EOL]
@Test [EOL] public void extractUriForNettyRequests() { [EOL] [EOL] //@formatter:off (Eclipse formatter) [EOL] //CHECKSTYLE:OFF (Maven checkstyle) [EOL] String [][] uris = { [EOL] /* 0: cp 1: sr 2: od 3: qp 4: spl */ [EOL] { "", "", "", "", "0"}, [EOL] { "", "", "/", "", "0"}, [EOL] { "", "", "/od", "", "0"}, [EOL] { "", "", "/od/", "", "0"}, [EOL] [EOL] { "/cp", "", "", "", "0"}, [EOL] { "/cp", "", "/", "", "0"}, [EOL] { "/cp", "", "/od", "", "0"}, [EOL] { "", "/sr", "", "", "1"}, [EOL] { "", "/sr", "/", "", "1"}, [EOL] { "", "/sr", "/od", "", "1"}, [EOL] { "", "/sr/sr", "", "", "2"}, [EOL] { "", "/sr/sr", "/", "", "2"}, [EOL] { "", "/sr/sr", "/od", "", "2"}, [EOL] [EOL] { "/cp", "/sr", "/", "", "1"}, [EOL] { "/cp", "/sr", "/od", "", "1"}, [EOL] [EOL] { "", "", "", "qp", "0"}, [EOL] { "", "", "/", "qp", "0"}, [EOL] { "/cp", "/sr", "/od", "qp", "1"}, [EOL] [EOL] { "/c%20p", "/s%20r", "/o%20d", "p+q", "1"}, [EOL] }; [EOL] //@formatter:on [EOL] // CHECKSTYLE:on [EOL] [EOL] for (String[] p : uris) { [EOL] HttpRequest hr = mock(HttpRequest.class); [EOL] [EOL] String requestUrl = p[0] + p[1] + p[2]; [EOL] if (!p[3].equals("") || p[3].length() > 0) { [EOL] 	 requestUrl += "?$" + p[3]; [EOL] } [EOL] [EOL] when(hr.uri()).thenReturn(requestUrl); [EOL] [EOL] ODataRequest odr = new ODataRequest(); [EOL] ODataNettyHandlerImpl.fillUriInformationFromHttpRequest(odr, hr, Integer.parseInt(p[4]), p[0]); [EOL] [EOL] String rawBaseUri = p[0] + p[1]; [EOL] String rawODataPath = p[2]; [EOL] String rawQueryPath = "".equals(p[3]) ? null : "$" + p[3]; [EOL] String rawRequestUri = p[0] + p[1] + p[2] + ("".equals(p[3]) ? "" : "?$" + p[3]); [EOL] String rawServiceResolutionUri = "".equals(p[1]) ? null : p[1]; [EOL] [EOL] assertEquals(rawBaseUri, odr.getRawBaseUri()); [EOL] assertEquals(rawODataPath, odr.getRawODataPath()); [EOL] assertEquals(rawQueryPath, odr.getRawQueryPath()); [EOL] assertEquals(rawRequestUri, odr.getRawRequestUri()); [EOL] assertEquals(rawServiceResolutionUri, odr.getRawServiceResolutionUri()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       booleanArray0[0] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0, 0); [EOL]       assertEquals('1', char0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testINIT() throws Exception [EOL] { [EOL] workflow.INIT(); [EOL] [EOL] verify( environmentManager ).update( environment ); [EOL] } [EOL]
@Test [EOL] public void testGetName() throws Exception [EOL] { [EOL] assertEquals( Common.DEFAULT_CONTAINER_INTERFACE, hostInterface.getName() ); [EOL] } [EOL]
@Test [EOL] public void testGetOwnerId() throws Exception [EOL] { [EOL] remotePeer.getOwnerId(); [EOL] [EOL] verify( peerInfo ).getOwnerId(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(767); [EOL]       assertEquals(767, strBuilder0.capacity()); [EOL]        [EOL]       Class<String> class0 = String.class; [EOL]       ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       Class<StrBuilder> class1 = StrBuilder.class; [EOL]       ServiceLoader<StrBuilder> serviceLoader1 = ServiceLoader.loadInstalled(class1); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) serviceLoader0, "d"); [EOL]       assertEquals(767, strBuilder0.capacity()); [EOL]       assertEquals(767, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertEquals(767, strBuilder0.capacity()); [EOL]       assertEquals(767, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testStart() throws Exception [EOL] { [EOL] commandProcess.start(); [EOL] [EOL] assertEquals( CommandStatus.RUNNING, commandProcess.status ); [EOL] [EOL] commandProcess.status = CommandStatus.RUNNING; [EOL] [EOL] try [EOL] { [EOL] commandProcess.start(); [EOL] fail( "Expected CommandException" ); [EOL] } [EOL] catch ( CommandException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldWorkWithExtensions() { [EOL] Dictionary<String, String> headers = new Hashtable<>(2); [EOL] headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, "foo,js,groovy"); [EOL] headers.put("color", "black"); [EOL] [EOL] assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       String string0 = StringUtils.join(iterator0, "The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "The character must not be null", (CharSequence) "The character must not be null"); [EOL]        [EOL]       Integer integer0 = linkedList0.pollFirst(); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "The character must not be null", ""); [EOL]        [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       String string3 = StringUtils.join(stringArray0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("kytsDAH*4", "kytsDAH*4"); [EOL]        [EOL]       String string5 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.appendIfMissing("", "", stringArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", ""); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testJoinP2PSwarm() throws Exception [EOL] { [EOL] networkManager.joinP2PSwarm( resourceHost, P2P_HASH, LOCAL_IP, P2P_HASH, SECRET_KEY, [EOL] Common.DEFAULT_P2P_SECRET_KEY_TTL_SEC ); [EOL] [EOL] verify( networkManager ).execute( eq( resourceHost ), any( RequestBuilder.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.getContent(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void roundBillTotal_shouldRoundToNearestFloor() throws Exception { [EOL] 		Assert.assertEquals(new BigDecimal(5), RoundingUtil.round(new BigDecimal(9), 5, CashierOptions.RoundingMode.FLOOR)); [EOL] 		BigDecimal decimal = new BigDecimal(BigInteger.valueOf(199), 2); // 1.99 [EOL] 		Assert.assertEquals(new BigDecimal(1), RoundingUtil.round(decimal, 1, CashierOptions.RoundingMode.FLOOR)); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStart(":lRC9;Q#I/x!xtF", ":lRC9;Q#I/x!xtF"); [EOL]        [EOL]       String string1 = StringUtils.chomp("2", ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "2"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "2"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "2"; [EOL]       charSequenceArray0[5] = (CharSequence) "2"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       String string2 = StringUtils.removeEnd("2", (String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "2", "4H*M`VvBKe5Oj^M&g;"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetVariablePrefix()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariablePrefix('$'); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void valueToStringFromCalendar() throws Exception { [EOL] Calendar dateTime = Calendar.getInstance(); [EOL] dateTime.clear(); [EOL] setTimeZone(dateTime, "GMT"); [EOL] dateTime.set(2012, 1, 29, 1, 2, 3); [EOL] assertEquals("2012-02-29T01:02:03Z", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] assertEquals("2012-02-29T01:02:03Z", instance.valueToString(dateTime, null, null, 0, null, null)); [EOL] assertEquals("2012-02-29T01:02:03Z", instance.valueToString(dateTime, null, null, 5, null, null)); [EOL] [EOL] setTimeZone(dateTime, "GMT-1:30"); [EOL] assertEquals("2012-02-28T23:32:03-01:30", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] [EOL] setTimeZone(dateTime, "GMT+11:00"); [EOL] assertEquals("2012-02-29T12:02:03+11:00", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] [EOL] dateTime.set(Calendar.MILLISECOND, 503); [EOL] assertEquals("2012-02-29T12:02:03.503+11:00", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] assertEquals("2012-02-29T12:02:03.503+11:00", instance.valueToString(dateTime, null, null, 3, null, null)); [EOL] [EOL] dateTime.set(Calendar.MILLISECOND, 530); [EOL] assertEquals("2012-02-29T12:02:03.53+11:00", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] assertEquals("2012-02-29T12:02:03.53+11:00", instance.valueToString(dateTime, null, null, 3, null, null)); [EOL] [EOL] dateTime.set(Calendar.MILLISECOND, 53); [EOL] assertEquals("2012-02-29T12:02:03.053+11:00", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] assertEquals("2012-02-29T12:02:03.053+11:00", instance.valueToString(dateTime, null, null, 3, null, null)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]       assertEquals(5644, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]       assertEquals(11552, strBuilder1.capacity()); [EOL]       assertEquals(11552, strBuilder6.capacity()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]       assertEquals(11552, strBuilder1.capacity()); [EOL]       assertEquals(11552, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(11552, strBuilder7.capacity()); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(11552, strBuilder0.capacity()); [EOL]       assertEquals(11552, strBuilder8.capacity()); [EOL]       assertEquals(11552, strBuilder1.capacity()); [EOL]        [EOL]       strBuilder8.buffer = charArray0; [EOL]       assertEquals(1, strBuilder0.capacity()); [EOL]       assertEquals(1, strBuilder8.capacity()); [EOL]       assertEquals(1, strBuilder1.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder6.append(strBuilder3, 0, 2822); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRESERVE_NET() throws Exception [EOL] { [EOL] workflow.RESERVE_NET(); [EOL] [EOL] verify( environmentManager ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       String string0 = "iVO"; [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher("iVO"); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher("x~DPyO[EG\"4:"); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher("iVO"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst(strMatcher4, (String) null); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1), "%;$c19wXmzsg6Q"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = (-302); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setLength((-302)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -302 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "Pl=kr", "T(yEy"); [EOL]       assertEquals("T(yEy", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('3'); [EOL]       assertEquals(12, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "", ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testEncodeId() { [EOL] assertEquals("blessing,name", Util.EncodeId(new Id("blessing", "name"))); [EOL] } [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testListOnNonExistingItem() { [EOL] itemVersionManagerImpl.list(context, Space.PRIVATE, new Id()); [EOL] } [EOL]
@Test [EOL] public void testPrepareKeyPairGenerationException() throws Exception [EOL] { [EOL] keyManager.prepareKeyPairGeneration( KeyPairType.RSA, 5 ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("NIa|", ""); [EOL]        [EOL]       String string1 = StringUtils.join((long[]) null, '_'); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("NIa|", (CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.chop(""); [EOL]        [EOL]       String string3 = StringUtils.substring((String) null, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]        [EOL]       String string4 = StringUtils.chomp("Array element "); [EOL]        [EOL]       String string5 = StringUtils.repeat("The Character must not be null", 4517); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)0; [EOL]       String string6 = StringUtils.join(shortArray0, '_', Integer.MAX_VALUE, (int) (short)0); [EOL]       assertEquals(1, shortArray0.length); [EOL]        [EOL]       ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       String string7 = StringUtils.join(iterator0, '_'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       String string8 = StringUtils.join(charArray0, '_', (-1752), (-3540)); [EOL]       assertEquals(5, charArray0.length); [EOL]   } [EOL]  [EOL]
@SuppressWarnings("unchecked") [EOL] @Test [EOL] public void test() { [EOL] final InputChannel<Integer> mockInputChannel = mock(InputChannel.class); [EOL] when(mockInputChannel.recv()).thenReturn( [EOL] Futures.immediateFuture(1), [EOL] Futures.immediateFuture(2), [EOL] Futures.immediateFailedFuture(PowerMockito.mock(EndOfFileException.class))); [EOL] assertEquals(ImmutableList.of(1, 2), RxTestCase.first( [EOL] RxInputChannel.wrap(mockInputChannel).autoConnect().toList())); [EOL] } [EOL]
@Test [EOL] public void testBuildDxModuleSnapshot() throws IOException { [EOL] PersistentBundle info = build("dx-module-snapshot"); [EOL] logger.info("Module info parsed for {}: {}", info.getResource(), info); [EOL] [EOL] assertEquals("org.jahia.modules", info.getGroupId()); [EOL] assertEquals("external-provider-modules", info.getSymbolicName()); [EOL] assertEquals("3.1.0.SNAPSHOT", info.getVersion()); [EOL] assertEquals("org.jahia.modules/external-provider-modules/3.1.0.SNAPSHOT", info.getKey()); [EOL] assertEquals("Jahia External Provider Modules", info.getDisplayName()); [EOL] } [EOL]
@Test [EOL] public void testGet() { [EOL] Item retrievedItem = createItem(new Id(), "item1"); [EOL] Response<Item> itemResponse = new Response<>(retrievedItem); [EOL] doReturn(itemResponse).when(stateAdaptorMock).getItem(context, retrievedItem.getId()); [EOL] [EOL] Item item = itemManagerImpl.get(context, retrievedItem.getId()); [EOL] Assert.assertEquals(item, retrievedItem); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[18]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void getCreationTimestamp() throws Exception [EOL] { [EOL] assertTrue( environment.getCreationTimestamp() > 0 ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = Fraction.getReducedFraction(0, 2374); [EOL]       Fraction fraction2 = fraction0.ONE_HALF.multiplyBy(fraction1); [EOL]       assertEquals(2374.0F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleConstructor()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0); [EOL]       Constructor<Annotation> constructor0 = ConstructorUtils.getMatchingAccessibleConstructor(class0, (Class<?>[]) classArray0); [EOL]       assertNull(constructor0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldProperlyMerge1311Well() throws Exception { [EOL] String destString = new String(Files.readAllBytes(Paths.get("src/test/resources/utilTest/well1311dest.json"))); [EOL] String srcString = new String(Files.readAllBytes(Paths.get("src/test/resources/utilTest/well1311src.json"))); [EOL] [EOL] JSONObject dest = new JSONObject(destString); [EOL] JSONObject src = new JSONObject(srcString); [EOL] [EOL] JSONObject merged = JsonUtil.merge(dest, src); [EOL] [EOL] String actual = merged.toString(2); [EOL] String expected = new String(Files.readAllBytes(Paths.get("src/test/resources/utilTest/well1311merged.json"))); [EOL] [EOL] assertEquals(expected, actual); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(289); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder3.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testIsLocal() throws Exception [EOL] { [EOL] environmentContainer.isLocal(); [EOL] [EOL] verify( environmentContainer ).getLocalPeer(); [EOL] verify( environmentContainer ).getPeerId(); [EOL] } [EOL]
@Test [EOL] void testDownload() { [EOL] final InputStream downloadResult = mock(InputStream.class); [EOL] when(s3Client.getObject(any(GetObjectRequest.class), any(ResponseTransformer.class))) [EOL] .thenReturn(downloadResult); [EOL] [EOL] final InputStream result = underTest.download(); [EOL] [EOL] verify(s3Client).getObject(getObjectRequestArgumentCaptor.capture(), any(ResponseTransformer.class)); [EOL] [EOL] final GetObjectRequest getObjectRequest = getObjectRequestArgumentCaptor.getValue(); [EOL] assertThat(getObjectRequest.bucket(), is(BUCKET_NAME)); [EOL] assertThat(getObjectRequest.key(), is(FILE_NAME)); [EOL] [EOL] assertThat(result, is(downloadResult)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder1.toStringBuffer(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder1.isEmpty(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       Buffer buffer0 = charBuffer0.flip(); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendWithSeparators((Iterable<?>) treeSet0, "hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 121, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       boolean boolean0 = range0.equals(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(expected = HostDisconnectedException.class) [EOL] public void testGetContainerHostInfoByContainerName() throws Exception [EOL] { [EOL] assertNotNull( registry.getContainerHostInfoByContainerName( CONTAINER_HOSTNAME ) ); [EOL] [EOL] doReturn( "" ).when( containerHostInfo ).getContainerName(); [EOL] [EOL] registry.getContainerHostInfoByContainerName( CONTAINER_HOSTNAME ); [EOL] } [EOL]
@Test [EOL] public void testGetEnvironmentId() throws Exception [EOL] { [EOL] assertNotNull( environment.getEnvironmentId() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testavailableLocaleList()  throws Throwable  { [EOL]       List<Locale> list0 = LocaleUtils.availableLocaleList(); [EOL]       assertEquals(160, list0.size()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRegisterListener() throws Exception [EOL] { [EOL] proxy.registerListener( environmentEventListener ); [EOL] [EOL] verify( environmentManager ).registerListener( environmentEventListener ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldSeparatorAtStart(true); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtStart(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetValidSession() [EOL] { [EOL] Session validSession = sessionManager.getValidSession(sessionId); [EOL] [EOL] assertEquals(session , validSession); [EOL] } [EOL]
@Test [EOL] void shouldReturnNullIfListIsEmptyAndOPeration(){ [EOL] String result = SqlUtil.concatByAndOperation(Collections.emptyList()); [EOL] assertThat(result, is(nullValue())); [EOL] } [EOL]
@Test [EOL] public void testGetContainerHosts() throws Exception [EOL] { [EOL] resourceHostEntity.addContainerHost( containerHost ); [EOL] [EOL] Set<ContainerHost> containerHosts = resourceHostEntity.getContainerHosts(); [EOL] [EOL] assertTrue( containerHosts.contains( containerHost ) ); [EOL] } [EOL]
@Test(expected = APIException.class) [EOL] 	public void getGenerator_shouldThrowAPIExceptionIfGeneratorClassCannotBeInstantiated() throws Exception { [EOL] 		when(administrationService.getGlobalProperty(ModuleSettings.SYSTEM_RECEIPT_NUMBER_GENERATOR)) [EOL] 		 .thenReturn(InvalidReceiptNumberGenerator.class.getName()); [EOL] [EOL] 		ReceiptNumberGeneratorFactory.getGenerator(); [EOL] 	} [EOL]
@Test [EOL] void testOnHeadersRead_headersStreamContinuing() throws Exception { [EOL] testHandler = new Http2Handler(mockEncoder, MAX_PAYLOAD, NO_CORS); [EOL] [EOL] headers.method("GET").path(PARAM_PATH_PREFIX + "/group"); [EOL] [EOL] // Call with endOfStream set to false; we shouldn't see a response. [EOL] testHandler.onHeadersRead(mockContext, STREAM_ID, headers, 1, false); [EOL] [EOL] assertEquals(1L, requestMeter.getCount()); [EOL] verifyNoResponse(); [EOL] [EOL] // Verify that the request and handler were queued up. [EOL] XrpcRequest xrpcRequest = testHandler.requests.get(STREAM_ID); [EOL] assertNotNull(xrpcRequest); [EOL] assertEquals(headers, xrpcRequest.h2Headers()); [EOL] assertEquals("group", xrpcRequest.variable(PARAM_NAME)); [EOL] Handler handler = testHandler.handlers.get(STREAM_ID); [EOL] assertNotNull(handler); [EOL] assertEquals(HttpResponseStatus.OK, handler.handle(xrpcRequest).status()); [EOL] } [EOL]
@Test [EOL] public void test_description() { [EOL] DefaultSensorDescriptor defaultSensorDescriptor = new DefaultSensorDescriptor(); [EOL] sensor.describe(defaultSensorDescriptor); [EOL] assertThat(defaultSensorDescriptor.languages()).containsOnly(Groovy.KEY); [EOL] } [EOL]
@Test [EOL] public void testGetName() throws Exception [EOL] { [EOL] remotePeer.getName(); [EOL] [EOL] verify( peerInfo ).getName(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setNullText(""); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldGetDescription() { [EOL] 		assertEquals( [EOL] 			"Valve for interaction with Drillops Town", [EOL] 			this.valve.getDescription() [EOL] 		); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'L'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.get("1.2"); [EOL]       assertEquals(JavaVersion.JAVA_1_2, javaVersion0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStringBuffer()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer("Jj^%^wj"); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       StringBuffer stringBuffer1 = toStringBuilder0.getStringBuffer(); [EOL]       assertEquals(29, stringBuffer1.length()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testGetLocationWhenDocumentEntityProvidesTheCompression() { [EOL] final VaultLocation result = underTest.getLocation(DOCUMENT_ENTITY); [EOL] [EOL] assertThat(result, is(notNullValue())); [EOL] verify(fileFactory,atMostOnce()).newFile(any(), any()); [EOL] verify(fileFactory).newFile("testpath", "123e4567-e89b-12d3-a456-556642440000.epub.lzma"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsetTrimmerMatcher()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid offset: ", "Invalid offset: "); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("Invalid offset: "); [EOL]       strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('%'); [EOL]       String[] stringArray0 = strTokenizer1.getTokenArray(); [EOL]       assertEquals(0, stringArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[0] = true; [EOL]       boolean[] booleanArray1 = new boolean[5]; [EOL]       compareToBuilder0.append(booleanArray0, booleanArray1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldFindWellsWithEmptyGraphQLQuery() throws Exception { [EOL] String query = TestUtilities.getResourceAsString("well1311FullEmptyQuery.xml"); [EOL] String response = TestUtilities.getResourceAsString("WellGraphQLResponseFull.json"); [EOL] [EOL] ObjWells queryObject = WitsmlMarshal.deserialize(query, ObjWells.class); [EOL] AbstractWitsmlObject singleWell = queryObject.getWell().get(0); [EOL] GraphQLQueryConverter converter = new GraphQLQueryConverter(); [EOL] String jsonQuery = converter.getQuery(singleWell); [EOL] assertNotNull(jsonQuery); [EOL] String endpoint = this.url + this.graphQlWellPath; [EOL] HttpRequestWithBody req = Unirest.post(endpoint); [EOL] req.header("Content-Type", "application/json"); [EOL] req.body(jsonQuery); [EOL] [EOL] HttpResponse<String> resp = mock(HttpResponse.class); [EOL] when(resp.getBody()).thenReturn(response); [EOL] when(resp.getStatus()).thenReturn(200); [EOL] [EOL] when(this.mockClient.makeRequest(argThat(someReq -> ( [EOL] someReq.getHttpMethod().name().equals(req.getHttpMethod().name()) && [EOL] someReq.getUrl().equals(req.getUrl()) && [EOL] someReq.getHeaders().containsKey("Content-Type") [EOL] )), eq("goodUsername"), eq("goodPassword"), anyString())).thenReturn(resp); [EOL] [EOL] ArrayList<AbstractWitsmlObject> foundObjects = this.delegator.search(singleWell, "goodUsername", "goodPassword", "exchangeID", this.mockClient, new HashMap<>()); [EOL] assertEquals(3, foundObjects.size()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMiddle()  throws Throwable  { [EOL]       ImmutableTriple<Object, String, String> immutableTriple0 = ImmutableTriple.of((Object) null, "c(j,I&N$orhDD/xljLT", "c(j,I&N$orhDD/xljLT"); [EOL]       String string0 = immutableTriple0.getMiddle(); [EOL]       assertEquals("c(j,I&N$orhDD/xljLT", string0); [EOL]   } [EOL] } [EOL]
@Test [EOL] public void testStart() throws Exception [EOL] { [EOL] environmentContainer.start(); [EOL] [EOL] verify( peer ).startContainer( environmentContainer.getContainerId() ); [EOL] } [EOL]
@Test [EOL] public void testGetP2PConnectionsCommand() throws Exception [EOL] { [EOL] assertNotNull( commands.getP2PConnectionsCommand() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] commandExecutor.execute( HOST_ID, requestBuilder ); [EOL] [EOL] verify( commandProcessor ).execute( any( Request.class ), any( CommandCallback.class ) ); [EOL] verify( commandProcessor ).getResult( any( UUID.class ) ); [EOL] } [EOL]
@Test( expected = HostNotFoundException.class ) [EOL] public void testGetManagementHost() throws Exception [EOL] { [EOL] [EOL] doThrow( new HostNotFoundException( "" ) ).when( localPeer ) [EOL] .getResourceHostByContainerName( Common.MANAGEMENT_HOSTNAME ); [EOL] [EOL] localPeer.getManagementHost(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("qw)\"0^d").when(annotation0).toString(); [EOL]       doReturn(class0, class0).when(annotation0).annotationType(); [EOL]       String string0 = AnnotationUtils.toString(annotation0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void test_read_execution_data_with_jacoco_0_7_4() { [EOL] when(pathResolver.relativeFile(any(File.class), ArgumentMatchers.endsWith(".exec"))).thenReturn(jacocoExecutionData); [EOL] [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] sensor.execute(context); [EOL] [EOL] verifyMeasures(context); [EOL] } [EOL]
@Test [EOL] public void should_tokenize_for_cpd() throws Exception { [EOL] File file = TestUtils.getResource("/org/sonar/plugins/groovy/foundation/Greet.groovy"); [EOL] [EOL] SensorContextTester context = SensorContextTester.create(file.getParentFile()); [EOL] DefaultInputFile inputFile = new DefaultInputFile("", "Greet.groovy") [EOL] .setLanguage(Groovy.KEY) [EOL] .setType(Type.MAIN) [EOL] .initMetadata(new String(Files.readAllBytes(file.toPath()), "UTF-8")); [EOL] context.fileSystem().add(inputFile); [EOL] [EOL] GroovyHighlighterAndTokenizer highlighter = new GroovyHighlighterAndTokenizer(inputFile); [EOL] context = Mockito.spy(context); [EOL] highlighter.processFile(context); [EOL] [EOL] assertThat(context.cpdTokens(":Greet.groovy")).extracting("value").containsExactly("classGreet{", [EOL] "defname", [EOL] "Greet(who){name=who}", [EOL] "defsalute(){printlnLITERALnameLITERALnameLITERAL}", [EOL] "}", [EOL] "/** * Javadoc style */", [EOL] "@groovy.beans.Bindable", [EOL] "classCool{", [EOL] "doublex=1.4// Comment", [EOL] "}"); [EOL] Mockito.verify(context, Mockito.times(1)).newCpdTokens(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRemove() throws Exception [EOL] { [EOL] service.remove( ID ); [EOL] [EOL] verifyCommit(); [EOL] [EOL] throwException(); [EOL] [EOL] service.remove( ID ); [EOL] [EOL] verifyRollback(); [EOL] } [EOL]
@Test [EOL] void shouldCreatePredicateEqualOperatorBooleanType() { [EOL] Root<PetEntity> root = getPetEntityRoot(); [EOL] SqlPredicate sqlPredicate1 = new SqlPredicate("pets.owner", "=", true); [EOL] [EOL] Predicate result = target.createPredicate(sqlPredicate1, root); [EOL] assertThat(result, is(notNullValue())); [EOL] } [EOL]
@Test [EOL] public void testGetActiveWorkflows() throws Exception [EOL] { [EOL] proxy.getActiveWorkflows(); [EOL] [EOL] verify( environmentManager ).getActiveWorkflows(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder1.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.size()); [EOL]       assertEquals(81, strBuilder1.size()); [EOL]       assertEquals(81, strBuilder2.size()); [EOL]       assertEquals(81, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.size()); [EOL]       assertEquals(2822, strBuilder4.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(3005, strBuilder0.size()); [EOL]       assertEquals(3005, strBuilder4.size()); [EOL]       assertEquals(3005, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5828, strBuilder0.size()); [EOL]       assertEquals(5828, strBuilder1.size()); [EOL]       assertEquals(5828, strBuilder6.size()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(5828, strBuilder0.size()); [EOL]       assertEquals(5828, strBuilder1.size()); [EOL]       assertEquals(5828, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5833, strBuilder7.size()); [EOL]       assertEquals(5833, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5851, strBuilder0.size()); [EOL]       assertEquals(5851, strBuilder8.size()); [EOL]       assertEquals(5851, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8673, strBuilder0.size()); [EOL]       assertEquals(8673, strBuilder9.size()); [EOL]       assertEquals(8673, strBuilder1.size()); [EOL]       assertEquals(8673, strBuilder2.size()); [EOL]       assertEquals(8673, strBuilder3.size()); [EOL]       assertEquals(8673, strBuilder6.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertEquals(8673, strBuilder0.size()); [EOL]       assertEquals(8673, strBuilder4.size()); [EOL]       assertEquals(8673, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testIsExist() { [EOL] Id itemId = new Id(); [EOL] doReturn(new Response<>(true)).when(stateAdaptorMock).isItemExist(context, itemId); [EOL] [EOL] boolean exist = itemManagerImpl.isExist(context, itemId); [EOL] Assert.assertTrue(exist); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('8'); [EOL]       assertEquals(4, booleanArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSuccessful()  throws Throwable  { [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       boolean boolean0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.isSuccessful(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Issue("587") [EOL] @Issue("572") [EOL] @Test [EOL] void shouldSortByStartTimeAsc() { [EOL] final TestResult first = new TestResult() [EOL] .setName("first") [EOL] .setTime(new Time().setStart(10L)); [EOL] final TestResult second = new TestResult() [EOL] .setName("second") [EOL] .setTime(new Time().setStart(100L)); [EOL] final TestResult third = new TestResult() [EOL] .setName("third") [EOL] .setTime(new Time().setStart(50L)); [EOL] final TestResult timeless = new TestResult() [EOL] .setName("timeless"); [EOL] [EOL] final LaunchResults results = new DefaultLaunchResults( [EOL] new HashSet<>(Arrays.asList(first, second, third, timeless)), [EOL] Collections.emptyMap(), [EOL] Collections.emptyMap() [EOL] ); [EOL] [EOL] final PackagesPlugin packagesPlugin = new PackagesPlugin(); [EOL] final Tree<TestResult> tree = packagesPlugin.getData(singletonList(results)); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .extracting("name") [EOL] .containsExactly("timeless", "first", "third", "second"); [EOL] } [EOL]
@Test [EOL] public void toUriLiteral() throws Exception { [EOL] assertEquals("'StringValue'", instance.toUriLiteral("StringValue")); [EOL] assertEquals("'String''Value'", instance.toUriLiteral("String'Value")); [EOL] assertEquals("'String''''''Value'", instance.toUriLiteral("String'''Value")); [EOL] } [EOL]
@Test [EOL] public void testStopContainerHost() throws Exception [EOL] { [EOL] [EOL] try [EOL] { [EOL] resourceHostEntity.stopContainerHost( containerHost ); [EOL] fail( "Expected ResourceHostException" ); [EOL] } [EOL] catch ( ResourceHostException e ) [EOL] { [EOL] } [EOL] [EOL] resourceHostEntity.addContainerHost( containerHost ); [EOL] [EOL] resourceHostEntity.stopContainerHost( containerHost ); [EOL] [EOL] verify( commandUtil, atLeastOnce() ).execute( any( RequestBuilder.class ), eq( resourceHostEntity ) ); [EOL] [EOL] doThrow( new CommandException( "" ) ).when( commandUtil ) [EOL] .execute( any( RequestBuilder.class ), eq( resourceHostEntity ) ); [EOL] [EOL] try [EOL] { [EOL] resourceHostEntity.stopContainerHost( containerHost ); [EOL] fail( "Expected ResourceHostException" ); [EOL] } [EOL] catch ( ResourceHostException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       long long0 = NumberUtils.max(373L, 0L, (-891L)); [EOL]       assertEquals(373L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRootCauseStackTrace()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("", mockThrowable0); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace(mockThrowable1); [EOL]       assertEquals(2, stringArray0.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void should_get_reports_from_property() { [EOL] Settings settings = mock(Settings.class); [EOL] when(settings.getString("sonar.junit.reportsPath")).thenReturn("target/surefire"); [EOL] assertThat(SurefireUtils.getReportsDirectory(settings, fs, pathResolver).exists()).isTrue(); [EOL] assertThat(SurefireUtils.getReportsDirectory(settings, fs, pathResolver).isDirectory()).isTrue(); [EOL] } [EOL]
@Test [EOL] public void aggregation() { [EOL] UriTokenizer tokenizer = new UriTokenizer("$apply=aggregate(a with sum as s from x with average)"); [EOL] assertTrue(tokenizer.next(TokenKind.APPLY)); [EOL] assertTrue(tokenizer.next(TokenKind.EQ)); [EOL] assertTrue(tokenizer.next(TokenKind.AggregateTrafo)); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.WithOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.SUM)); [EOL] assertTrue(tokenizer.next(TokenKind.AsOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.FromOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.WithOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.AVERAGE)); [EOL] assertTrue(tokenizer.next(TokenKind.CLOSE)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] [EOL] tokenizer = new UriTokenizer("a with min as m"); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.WithOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.MIN)); [EOL] [EOL] tokenizer = new UriTokenizer("a with countdistinct as c"); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.WithOperator)); [EOL] assertTrue(tokenizer.next(TokenKind.COUNTDISTINCT)); [EOL] [EOL] assertTrue(new UriTokenizer("identity").next(TokenKind.IDENTITY)); [EOL] assertTrue(new UriTokenizer("bottomcount(1,x)").next(TokenKind.BottomCountTrafo)); [EOL] assertTrue(new UriTokenizer("bottompercent(1,x)").next(TokenKind.BottomPercentTrafo)); [EOL] assertTrue(new UriTokenizer("bottomsum(1,x)").next(TokenKind.BottomSumTrafo)); [EOL] assertTrue(new UriTokenizer("topcount(1,x)").next(TokenKind.TopCountTrafo)); [EOL] assertTrue(new UriTokenizer("toppercent(1,x)").next(TokenKind.TopPercentTrafo)); [EOL] assertTrue(new UriTokenizer("topsum(1,x)").next(TokenKind.TopSumTrafo)); [EOL] assertTrue(new UriTokenizer("compute(a mul b as m)").next(TokenKind.ComputeTrafo)); [EOL] [EOL] assertTrue(new UriTokenizer("search(a)").next(TokenKind.SearchTrafo)); [EOL] assertTrue(new UriTokenizer("expand(a)").next(TokenKind.ExpandTrafo)); [EOL] assertTrue(new UriTokenizer("filter(true)").next(TokenKind.FilterTrafo)); [EOL] [EOL] tokenizer = new UriTokenizer("groupby((rollup($all,x,y)))"); [EOL] assertTrue(tokenizer.next(TokenKind.GroupByTrafo)); [EOL] assertTrue(tokenizer.next(TokenKind.OPEN)); [EOL] assertTrue(tokenizer.next(TokenKind.RollUpSpec)); [EOL] assertTrue(tokenizer.next(TokenKind.ROLLUP_ALL)); [EOL] assertTrue(tokenizer.next(TokenKind.COMMA)); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.COMMA)); [EOL] assertTrue(tokenizer.next(TokenKind.ODataIdentifier)); [EOL] assertTrue(tokenizer.next(TokenKind.CLOSE)); [EOL] assertTrue(tokenizer.next(TokenKind.CLOSE)); [EOL] assertTrue(tokenizer.next(TokenKind.CLOSE)); [EOL] assertTrue(tokenizer.next(TokenKind.EOF)); [EOL] [EOL] assertTrue(new UriTokenizer("isdefined(x)").next(TokenKind.IsDefinedMethod)); [EOL] } [EOL]
@Test [EOL] void testExceptionLogging() throws Exception { [EOL] record.setThrown(new RuntimeException("Example Exception Message") { [EOL] @Override [EOL] public void printStackTrace(PrintWriter pw) { [EOL] pw.println("co.elastic.logging.jboss.logmanager.EcsFormatterTest$1: Example Exception Message"); [EOL] pw.println("\tat co.elastic.logging.jboss.logmanager.EcsFormatterTest.testExceptionLogging(EcsFormatterTest.java:125)"); [EOL] } [EOL] }); [EOL] [EOL] JsonNode result = objectMapper.readTree(formatter.format(record)); [EOL] assertThat(result.get("error.type").textValue()).isEqualTo("co.elastic.logging.jboss.logmanager.EcsFormatterTest$1"); [EOL] assertThat(result.get("error.message").textValue()).isEqualTo("Example Exception Message"); [EOL] assertThat(result.get("error.stack_trace").textValue()) [EOL] .isEqualTo("co.elastic.logging.jboss.logmanager.EcsFormatterTest$1: Example Exception Message\n" + [EOL] "\tat co.elastic.logging.jboss.logmanager.EcsFormatterTest.testExceptionLogging(EcsFormatterTest.java:125)\n"); [EOL] } [EOL]
@Test [EOL] public void unclosedInterpolatedTextConsideredASticFragment() { [EOL] assertThat(TemplateParser.parseTemplateString("{{"), contains(staticFragment("{{"))); [EOL] } [EOL]
@Test [EOL] public void testInstallingTemplate() throws Exception [EOL] { [EOL] doReturn( "time=\"2017-03-22 12:10:08\" level=info msg=\"Installing template cassandra\"" ).when( response ) [EOL] .getStdOut(); [EOL] tracker.onResponse( response, commandResult ); [EOL] [EOL] verify( resourceHostEntity ).updateTemplateDownloadProgress( ENV_ID, "cassandra", 100 ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testUpdate() { [EOL] Id itemId = new Id(); [EOL] Info info = TestUtils.createInfo("item1"); [EOL] doReturn(new Response<>(true)).when(stateAdaptorMock).isItemExist(context, itemId); [EOL] //doReturn(new Response<>(Void.TYPE)).when(stateAdaptorMock).updateItem(context, itemId, info); [EOL] doReturn(new Response<>(Void.TYPE)).when(stateAdaptorMock) [EOL] .updateItem(eq(context), eq(itemId), eq(info), any(Date.class)); [EOL] doReturn(new Response<>(Void.TYPE)).when(collaborationAdaptorMock).updateItem(context, itemId, info); [EOL] [EOL] itemManagerImpl.update(context, itemId, info); [EOL] [EOL] verify(collaborationAdaptorMock).updateItem(context, itemId, info); [EOL] verify(stateAdaptorMock).updateItem(eq(context), eq(itemId), eq(info), any(Date.class)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append('?', 'h'); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendln((-1270.0144F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       String string1 = strBuilder3.leftString(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = new StrBuilder(); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendln((Object) strBuilder7); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder9 = strBuilder5.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0, 2004, 3923); [EOL]       assertEquals(0.51083356F, fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[1]; [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       byteArray0[0] = byte0; [EOL]       byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0); [EOL]       assertEquals(1, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] @SneakyThrows [EOL] public void testConsumeThrowsException() { [EOL] when(bufferedReaderMock.readLine()) [EOL] .thenReturn("aaa") [EOL] .thenThrow(new IOException()); [EOL] [EOL] final Flux<String> result = bufferedReaderAdapter.consume().apply(bufferedReaderMock); [EOL] [EOL] StepVerifier.create(result) [EOL] .consumeNextWith(a -> assertThat(a, is("aaa"))) [EOL] .verifyError(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(0L); [EOL]       long long0 = stopWatch0.getTime(); [EOL]       assertEquals((-1392409281L), long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 0; [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       LinkedList<Object> linkedList0 = new LinkedList<Object>(); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       linkedList0.sort(comparator0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       int int1 = 2; [EOL]       boolean boolean0 = linkedList0.add((Object) strBuilder0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.setCharAt(2, 'l'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void removeListener() throws Exception [EOL] { [EOL] [EOL] commandProcessor.removeListener( heartbeatListener ); [EOL] [EOL] verify( listeners ).remove( heartbeatListener ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 242.8578F; [EOL]       float float0 = IEEE754rUtils.min(floatArray0); [EOL]       assertEquals(242.8578F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testLambdaPropertyPathExp() throws Exception { [EOL] final String entitySetName = "ESName"; [EOL] final String keyPropertyName = "a"; [EOL] final String complexPropertyName = "comp"; [EOL] final String propertyName = "prop"; [EOL] EdmProperty keyProperty = mockProperty(keyPropertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] EdmKeyPropertyRef keyPropertyRef = mockKeyPropertyRef(keyPropertyName, keyProperty); [EOL] EdmProperty property = mockProperty(propertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] [EOL] EdmComplexType complexType = mockComplexType(propertyName, property); [EOL] EdmProperty complexProperty = mockProperty(complexPropertyName, complexType); [EOL] Mockito.when(complexProperty.isCollection()).thenReturn(true); [EOL] [EOL] EdmEntityType entityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(entityType.getPropertyNames()).thenReturn(Arrays.asList(keyPropertyName, complexPropertyName)); [EOL] Mockito.when(entityType.getProperty(keyPropertyName)).thenReturn(keyProperty); [EOL] Mockito.when(entityType.getProperty(complexPropertyName)).thenReturn(complexProperty); [EOL] Mockito.when(entityType.getFullQualifiedName()).thenReturn(new FullQualifiedName("test.ET")); [EOL] EdmEntitySet entitySet = mockEntitySet(entitySetName, entityType); [EOL] EdmEntityContainer container = mockContainer(entitySetName, entitySet); [EOL] Edm mockedEdm = Mockito.mock(Edm.class); [EOL] Mockito.when(mockedEdm.getEntityContainer()).thenReturn(container); [EOL] [EOL] UriTokenizer tokenizer = new UriTokenizer("comp/any(d:d/prop eq \'abc\')"); [EOL] Expression expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("[comp, any]", expression.toString()); [EOL] [EOL] tokenizer = new UriTokenizer("comp/all(d:d/prop eq \'abc\')"); [EOL] expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("[comp, all]", expression.toString()); [EOL] } [EOL]
@Test [EOL] void testEncoderWithoutParam() { [EOL] assertSame(fooBarEncoder, encoders.acceptedEncoder("text/plain, foo/bar")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.setTrimmerMatcher((StrMatcher) null); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[5] = true; [EOL]       booleanArray0[7] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, (int) (short)0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRemoveSshKey() throws Exception [EOL] { [EOL] SshKeyRemovalWorkflow sshKeyRemovalWorkflow = mock( SshKeyRemovalWorkflow.class ); [EOL] doNothing().when( environmentManager ).registerActiveWorkflow( environment, sshKeyRemovalWorkflow ); [EOL] doReturn( sshKeyRemovalWorkflow ).when( environmentManager ) [EOL] .getSshKeyRemovalWorkflow( environment, TestHelper.SSH_KEY, trackerOperation ); [EOL] [EOL] environmentManager.removeSshKey( TestHelper.ENV_ID, TestHelper.SSH_KEY, false ); [EOL] [EOL] verify( environmentAdapter ).removeSshKey( TestHelper.ENV_ID, TestHelper.SSH_KEY ); [EOL] [EOL] //----- [EOL] [EOL] doReturn( true ).when( sshKeyRemovalWorkflow ).isFailed(); [EOL] [EOL] try [EOL] { [EOL] [EOL] environmentManager.removeSshKey( TestHelper.ENV_ID, TestHelper.SSH_KEY, false ); [EOL] [EOL] fail( "Expected EnvironmentModificationException" ); [EOL] } [EOL] catch ( EnvironmentModificationException e ) [EOL] { [EOL] } [EOL] [EOL] //----- [EOL] [EOL] doReturn( EnvironmentStatus.UNDER_MODIFICATION ).when( environment ).getStatus(); [EOL] [EOL] try [EOL] { [EOL] [EOL] environmentManager.removeSshKey( TestHelper.ENV_ID, TestHelper.SSH_KEY, false ); [EOL] [EOL] fail( "Expected EnvironmentModificationException" ); [EOL] } [EOL] catch ( EnvironmentModificationException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[7]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F, (-1)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testVerifyClearSign() throws Exception [EOL] { [EOL] InputStream secondPublicStream = findFile( PLUGIN_PUBLIC_KEY ); [EOL] PGPPublicKeyRingCollection secondPublicKeyRingCollection = [EOL] new PGPPublicKeyRingCollection( PGPUtil.getDecoderStream( secondPublicStream ), [EOL] new JcaKeyFingerprintCalculator() ); [EOL] [EOL] PGPPublicKeyRing pgpKeyring = secondPublicKeyRingCollection [EOL] .getPublicKeyRing( secondPublicKeyRingCollection.iterator().next().getPublicKey().getKeyID() ); [EOL] [EOL] String signedMessage = IOUtils.toString( findFile( "signedMessage.txt" ) ); [EOL] [EOL] logger.info( "\n" + signedMessage ); [EOL] [EOL] boolean result = PGPEncryptionUtil.verifyClearSign( signedMessage.getBytes(), pgpKeyring ); [EOL] if ( result ) [EOL] { [EOL] logger.info( "signature verified." ); [EOL] } [EOL] else [EOL] { [EOL] logger.info( "signature verification failed." ); [EOL] } [EOL] [EOL] assertEquals( true, result ); [EOL] } [EOL]
@Test [EOL] public void extractMethod() throws Exception { [EOL] String[][] mm = { [EOL] { "GET", null, null, "GET" }, [EOL] { "GET", "xxx", "yyy", "GET" }, [EOL] { "PUT", "xxx", "yyy", "PUT" }, [EOL] { "DELETE", "xxx", "yyy", "DELETE" }, [EOL] { "PATCH", "xxx", "yyy", "PATCH" }, [EOL] [EOL] { "POST", null, null, "POST" }, [EOL] { "POST", null, "GET", "GET" }, [EOL] { "POST", null, "PATCH", "PATCH" }, [EOL] [EOL] { "POST", "GET", null, "GET" }, [EOL] { "POST", "PATCH", null, "PATCH" }, [EOL] [EOL] { "POST", "GET", "GET", "GET" }, [EOL] { "HEAD", null, null, "HEAD" } [EOL] }; [EOL] [EOL] for (String[] m : mm) { [EOL] [EOL] HttpServletRequest hr = mock(HttpServletRequest.class); [EOL] [EOL] when(hr.getMethod()).thenReturn(m[0]); [EOL] when(hr.getHeader("X-HTTP-Method")).thenReturn(m[1]); [EOL] when(hr.getHeader("X-HTTP-Method-Override")).thenReturn(m[2]); [EOL] [EOL] assertEquals(HttpMethod.valueOf(m[3]), ODataHttpHandlerImpl.extractMethod(hr)); [EOL] } [EOL] } [EOL]
@Test [EOL] public void preMarshmallowPermissions() { [EOL] mManager = new PermissionManager( [EOL] Build.VERSION_CODES.LOLLIPOP, mActivity, REQUEST_CODE, REQUIRED_PERMS); [EOL] assertTrue(mManager.haveAllPermissions()); [EOL] } [EOL]
@Test( expected=ParseException.class) [EOL] public void testWhatDnScopeOneStar() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnScopeOneStar" ); [EOL] [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] parser.parse( "access to dn.one=* by *" ); [EOL] } [EOL]
@Test(expected = UriParserSyntaxException.class) [EOL] public void wrongPercentEncoding() throws Exception { [EOL] UriDecoder.splitAndDecodePath("%wrong"); [EOL] } [EOL]
@Test [EOL] public void testWhatStarWithoutAccess() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatStarWithoutAccess" ); [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] AclItem aclItem = parser.parse( " to * by *" ); [EOL] assertNotNull( aclItem ); [EOL] [EOL] // Testing the 'what' clause [EOL] AclWhatClause whatClause = aclItem.getWhatClause(); [EOL] assertNotNull( whatClause ); [EOL] assertTrue( whatClause instanceof AclWhatClauseStar ); [EOL] [EOL] System.out.println( "<-- ACL:" + aclItem ); [EOL] } [EOL]
@Test [EOL] public void testFail() throws Exception [EOL] { [EOL] Throwable throwable = mock( Throwable.class ); [EOL] workflow.fail( "", throwable ); [EOL] [EOL] verify( trackerOperation ).addLogFailed( anyString() ); [EOL] } [EOL]
@Issue("531") [EOL] @Test [EOL] void shouldProcessTestsInNestedPackages() { [EOL] final Set<TestResult> testResults = new HashSet<>(); [EOL] final TestResult first = new TestResult() [EOL] .setName("first") [EOL] .setLabels(singletonList(PACKAGE.label("a.b"))); [EOL] final TestResult second = new TestResult() [EOL] .setName("second") [EOL] .setLabels(singletonList(PACKAGE.label("a.b.c"))); [EOL] [EOL] testResults.add(first); [EOL] testResults.add(second); [EOL] [EOL] final LaunchResults results = new DefaultLaunchResults( [EOL] testResults, [EOL] Collections.emptyMap(), [EOL] Collections.emptyMap() [EOL] ); [EOL] [EOL] final PackagesPlugin packagesPlugin = new PackagesPlugin(); [EOL] final Tree<TestResult> tree = packagesPlugin.getData(singletonList(results)); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .hasSize(1) [EOL] .extracting("name") [EOL] .containsExactlyInAnyOrder("a.b"); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .flatExtracting("children") [EOL] .extracting("name") [EOL] .containsExactlyInAnyOrder("first", "c"); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .flatExtracting("children") [EOL] .filteredOn("name", "c") [EOL] .flatExtracting("children") [EOL] .extracting("name") [EOL] .containsExactlyInAnyOrder("second"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.capitalizeFully((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetResult() throws Exception [EOL] { [EOL] [EOL] CommandResult result = commandProcess.getResult(); [EOL] [EOL] assertNotNull( result ); [EOL] } [EOL]
@Test [EOL] public void testStringToArrayMultiplwWithAllUserAndOperationalAttributes() [EOL] { [EOL] String[] attributes = ReturningAttributesWidget.stringToArray( "cn, sn uid, * +" ); [EOL] assertNotNull( attributes ); [EOL] assertArrayEquals( new String[] [EOL] { "cn", "sn", "uid", "*", "+" }, attributes ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, "g,SXP", "w#4xU.0t'5b#", (String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setContentEnd((String) null); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.max((byte) (-92), (byte) (-44), (byte) (-44)); [EOL]       assertEquals((byte) (-44), byte0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetResourceHostDataService() throws Exception [EOL] { [EOL] assertNotNull( localPeer.createResourceHostDataService() ); [EOL] } [EOL]
@Test(expected = IllegalArgumentException.class) [EOL] public void testInvalid() throws Exception { [EOL] BundleInfo.fromKey("article"); [EOL] } [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] doReturn( commandProcess ).when( commandProcessor ).createCommandProcess( callback, request, HOST_ID ); [EOL] [EOL] doThrow( new HostDisconnectedException( "" ) ).when( commandProcessor ).getResourceHostInfo( HOST_ID ); [EOL] [EOL] try [EOL] { [EOL] commandProcessor.execute( request, callback ); [EOL] fail( "Expected CommandException" ); [EOL] } [EOL] catch ( CommandException e ) [EOL] { [EOL] } [EOL] [EOL] doReturn( resourceHostInfo ).when( commandProcessor ).getResourceHostInfo( HOST_ID ); [EOL] [EOL] try [EOL] { [EOL] commandProcessor.execute( request, callback ); [EOL] fail( "Expected CommandException" ); [EOL] } [EOL] catch ( CommandException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test [EOL] public void testGetProductOperationException() throws Exception [EOL] { [EOL] [EOL] Response response = restService.getTrackerOperation( SOURCE, null ); [EOL] [EOL] assertEquals( Response.Status.BAD_REQUEST.getStatusCode(), response.getStatus() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInSeconds()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = ""; [EOL]       Date date0 = DateUtils.parseDateStrictly("", stringArray0); [EOL]       long long0 = DateUtils.getFragmentInSeconds(date0, 12); [EOL]       assertEquals(21L, long0); [EOL]   } [EOL]  [EOL]
@Test(expected=SerializerException.class) [EOL] public void deltaSerializer() throws SerializerException { [EOL] List<String> versions = new ArrayList<String>(); [EOL] versions.add("4.01"); [EOL] odata.createEdmDeltaSerializer(null, versions); [EOL] } [EOL]
@Test [EOL] public void testGenerateSecretKey() throws Exception [EOL] { [EOL] keyManager.generateSecretKey( keyGenerator ); [EOL] } [EOL]
@Test [EOL] public void nonAnnotatedClass() { [EOL] binderUnderTest.bind(TestUtils.FUNCTION_TYPE, new IgnoreNonAnnotated()); [EOL] [EOL] assertTrue(state.boundNames.isEmpty()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("java.library.path"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd'); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('d'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'd'; [EOL]       charArray0[1] = '%'; [EOL]       IntStream intStream0 = strBuilder2.chars(); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]        [EOL]       charArray0[2] = 'd'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'd'; [EOL]       char[] charArray1 = strBuilder3.getChars(charArray0); [EOL]       assertFalse(charArray1.equals((Object)charArray0)); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5); [EOL]        [EOL]       IntStream intStream1 = strBuilder6.chars(); [EOL]       assertFalse(intStream1.equals((Object)intStream0)); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44)); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.setLength(18); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path"); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldNotMarkLatestAsFlakyIfRetriesArePassed() { [EOL] String historyId = UUID.randomUUID().toString(); [EOL] List<LaunchResults> launchResultsList = createSingleLaunchResults( [EOL] createTestResult(FIRST_RESULT, historyId, 1L, 9L).setStatus(Status.PASSED), [EOL] createTestResult(SECOND_RESULT, historyId, 11L, 19L).setStatus(Status.PASSED) [EOL] ); [EOL] retryPlugin.aggregate(null, launchResultsList, null); [EOL] Set<TestResult> results = launchResultsList.get(0).getAllResults(); [EOL] [EOL] assertThat(results) [EOL] .filteredOn(TestResult::isHidden) [EOL] .extracting(TestResult::getName) [EOL] .containsExactlyInAnyOrder(FIRST_RESULT); [EOL] [EOL] assertThat(results) [EOL] .filteredOn(result -> !result.isHidden()) [EOL] .extracting(TestResult::getName, TestResult::isFlaky) [EOL] .containsExactlyInAnyOrder(tuple(SECOND_RESULT, false)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testStartContainerHost() throws Exception [EOL] { [EOL] [EOL] try [EOL] { [EOL] resourceHostEntity.startContainerHost( containerHost ); [EOL] fail( "Expected ResourceHostException" ); [EOL] } [EOL] catch ( ResourceHostException e ) [EOL] { [EOL] } [EOL] [EOL] when( containerHost.isConnected() ).thenReturn( true ); [EOL] when( commandResult.getStdOut() ).thenReturn( CONTAINER_STATUS_STARTED ); [EOL] resourceHostEntity.addContainerHost( containerHost ); [EOL] [EOL] resourceHostEntity.startContainerHost( containerHost ); [EOL] [EOL] verify( commandUtil, atLeastOnce() ).execute( any( RequestBuilder.class ), eq( resourceHostEntity ) ); [EOL] [EOL] when( commandResult.getStdOut() ).thenReturn( CONTAINER_STATUS_STOPPED ); [EOL] [EOL] try [EOL] { [EOL] resourceHostEntity.startContainerHost( containerHost ); [EOL] fail( "Expected ResourceHostException" ); [EOL] } [EOL] catch ( ResourceHostException e ) [EOL] { [EOL] } [EOL] [EOL] when( commandResult.getStdOut() ).thenReturn( CONTAINER_STATUS_STARTED ); [EOL] [EOL] doThrow( new CommandException( "" ) ).when( commandUtil ) [EOL] .execute( any( RequestBuilder.class ), eq( resourceHostEntity ) ); [EOL] [EOL] try [EOL] { [EOL] resourceHostEntity.startContainerHost( containerHost ); [EOL] fail( "Expected ResourceHostException" ); [EOL] } [EOL] catch ( ResourceHostException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test [EOL] public void testVerifyToken() [EOL] { [EOL] String token = createToken(); [EOL] [EOL] assertTrue( verifyTokenSignature(token) ); [EOL] } [EOL]
@Test [EOL] 	public void testConstructorStrings() { [EOL] 		NgTemplatePlus template = new NgTemplatePlus("<h1>moin</h1>", [EOL] 				"NgTemplateTest") { [EOL] [EOL] 			/** [EOL] 			 * [EOL] 			 */ [EOL] 			private static final long serialVersionUID = 1L; [EOL] 		}; [EOL] 		assertEquals("<h1>moin</h1>", template.getState().templateSource); [EOL] 		assertEquals("NgTemplateTest", template.getState().moduleName); [EOL] 	} [EOL]
@Test [EOL] public void headersSeparatedByComma() throws Exception { [EOL] final Header header = BatchParserCommon.consumeHeaders(toLineList( [EOL] "Content-Id: 1" + CRLF, [EOL] "Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11" + CRLF, [EOL] "content-type: Application/http" + CRLF, [EOL] "content-transfer-encoding: Binary" + CRLF)); [EOL] assertNotNull(header); [EOL] [EOL] final List<String> upgradeHeader = header.getHeaders("upgrade"); [EOL] assertNotNull(upgradeHeader); [EOL] assertEquals(4, upgradeHeader.size()); [EOL] assertEquals("HTTP/2.0", upgradeHeader.get(0)); [EOL] assertEquals("SHTTP/1.3", upgradeHeader.get(1)); [EOL] assertEquals("IRC/6.9", upgradeHeader.get(2)); [EOL] assertEquals("RTA/x11", upgradeHeader.get(3)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void getContent() throws Exception { [EOL] TestSubscriber<List<Branch>> branchSubscriber = TestSubscriber.create(); [EOL] repositoryDataSource.listBranches("TellH", "GitClub").subscribe(branchSubscriber); [EOL] List<Branch> branches = branchSubscriber.getOnNextEvents().get(0); [EOL] assertNotNull(branches); [EOL] assertTrue(branches.size() > 0); [EOL] TestSubscriber<List<TreeNode>> treeNodeSubscriber = TestSubscriber.create(); [EOL] repositoryDataSource.getContent("TellH", "GitClub", branches.get(0)).subscribe(treeNodeSubscriber); [EOL] List<TreeNode> treeNodes = treeNodeSubscriber.getOnNextEvents().get(0); [EOL] assertNotNull(treeNodes); [EOL] } [EOL]
@Test [EOL] public void testGenerateKeyPair() throws Exception [EOL] { [EOL] KeyPair keyPair = PGPEncryptionUtil.generateKeyPair( USER_ID, SECRET_PWD, false ); [EOL] [EOL] assertNotNull( PGPEncryptionUtil [EOL] .findPublicKeyById( new ByteArrayInputStream( keyPair.getPubKeyring() ), keyPair.getSubKeyId() ) ); [EOL] assertNotNull( PGPEncryptionUtil [EOL] .findSecretKeyByFingerprint( new ByteArrayInputStream( keyPair.getSecKeyring() ), [EOL] keyPair.getPrimaryKeyFingerprint() ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void testParse() throws ParseException, CheckedOutOfMemoryError { [EOL] 		final List<String> pages = new ArrayList<String> (3); [EOL] 		PageHandler handler = new PageHandler() { [EOL] 			public boolean handlePage(String pageText) { [EOL] 				pages.add(pageText); [EOL] 				return false; [EOL] 			} [EOL] 		}; [EOL] 		new PagingPdfParser(TestFiles.multi_page_pdf.get(), handler).run(); [EOL] 		assertEquals(3, pages.size()); [EOL] 		assertEquals("page 1" + Util.LS, pages.get(0)); [EOL] 		assertEquals("page 2" + Util.LS, pages.get(1)); [EOL] 		assertEquals("page 3" + Util.LS, pages.get(2)); [EOL] 	} [EOL]
@Test [EOL] public void handleNormalFound() throws Exception { [EOL] mList.setObserver(mObserver); [EOL] [EOL] when(mConverter.make(mAdvertisement)).thenReturn(THING0); [EOL] mList.handleFoundAdvertisement(mAdvertisement); [EOL] [EOL] verify(mHandler).post(mRunnable.capture()); [EOL] mRunnable.getValue().run(); [EOL] assertEquals(1, mList.size()); [EOL] assertEquals(THING0, mList.get(0)); [EOL] verify(mObserver).notifyItemInserted(0); [EOL] } [EOL]
@Test [EOL] public void toWatch() throws Exception { [EOL] TestSubscriber<Boolean> subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.toWatch("TellH", "GitClub").subscribe(subscriber); [EOL] subscriber.assertValue(true); [EOL] subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.checkWatching("TellH", "GitClub").subscribe(subscriber); [EOL] subscriber.assertValue(true); [EOL] } [EOL]
@Test [EOL] public void unStar() throws Exception { [EOL] TestSubscriber<Boolean> subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.unStar("TellH", "GitClub").subscribe(subscriber); [EOL] subscriber.assertValue(true); [EOL] subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.checkStarred("TellH", "GitClub").subscribe(subscriber); [EOL] subscriber.assertValue(false); [EOL] } [EOL]
@Test [EOL] public void expand() throws Exception { [EOL] EdmNavigationProperty edmProperty = mock(EdmNavigationProperty.class); [EOL] when(edmProperty.getName()).thenReturn("property"); [EOL] final DebugTabUri tab = new DebugTabUri(new UriInfoImpl().setKind(UriInfoKind.all) [EOL] .setSystemQueryOption(new ExpandOptionImpl().addExpandItem( [EOL] new ExpandItemImpl().setResourcePath( [EOL] new UriInfoImpl().setKind(UriInfoKind.resource) [EOL] .addResourcePart(new UriResourceNavigationPropertyImpl(edmProperty))) [EOL] .setSystemQueryOption(new LevelsOptionImpl().setValue(1))))); [EOL] assertEquals("{\"kind\":\"all\",\"expand\":[{\"expandPath\":[" [EOL] + "{\"uriResourceKind\":\"navigationProperty\",\"segment\":\"property\",\"isCollection\":false}]," [EOL] + "\"levels\":1}]}", [EOL] createJson(tab)); [EOL] [EOL] final String html = createHtml(tab); [EOL] assertThat(html, allOf( [EOL] startsWith("<h2>Kind</h2>\n" [EOL] + "<p>all</p>\n" [EOL] + "<h2>Expand Option</h2>\n" [EOL] + "<ul>\n" [EOL] + "<li class=\"json\">"), [EOL] containsString("navigationProperty"), containsString("property"), [EOL] containsString("isCollection"), containsString("false"))); [EOL] assertThat(html, allOf(containsString("levels"), endsWith("</li>\n</ul>\n"))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '['; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDispose() throws Exception [EOL] { [EOL] commandResponseListener.dispose(); [EOL] [EOL] verify( callbacks ).dispose(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("(?: s|[s&&[^ ]])s*", "(?: s|[s&&[^ ]])s*"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'K'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.lowerCase("4QSejn\"zyIHEF~:m|C"); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void longDynamicText() { [EOL] List<TextFragment> fragments = [EOL] TemplateParser.parseTemplateString("{{this text should be dynamic}}"); [EOL] [EOL] assertThat(fragments, contains(TextFragment.dynamicFragment("this text should be dynamic"))); [EOL] } [EOL]
@Test [EOL] public void shouldReturnReportPathWhenModified() { [EOL] settings.setProperty(JaCoCoConfiguration.REPORT_PATH_PROPERTY, "jacoco.exec"); [EOL] assertThat(jacocoSettings.getReportPath()).isEqualTo("jacoco.exec"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void reading_file_no_tfound_should_do_nothing() { [EOL] new JaCoCoReportReader(null).readJacocoReport(mock(IExecutionDataVisitor.class), mock(ISessionInfoVisitor.class)); [EOL] } [EOL]
@Test [EOL] 	public void testIsDriveLetter() { [EOL] 		class Sample { [EOL] 			private final String input; [EOL] 			private final boolean expectedOutput; [EOL] 			private Sample(String input, boolean expectedOutput) { [EOL] 				this.input = input; [EOL] 				this.expectedOutput = expectedOutput; [EOL] 			} [EOL] 		} [EOL] 		Sample[] samples = { [EOL] 			new Sample("C:", true), [EOL] 			new Sample("G:\\", true), [EOL] 			new Sample("x:\\\\", true), [EOL] 			new Sample("f:\\Foo\\", false), [EOL] 			new Sample("c:\\\\Foo", false), [EOL] 			new Sample("c://", true), [EOL] 			new Sample("c://Foo", false), [EOL] 			new Sample("c:\\/", true), [EOL] 		}; [EOL] 		for (Sample sample : samples) { [EOL] 			boolean output = Util.isWindowsDevice(sample.input); [EOL] 			assertEquals(sample.expectedOutput, output); [EOL] 		} [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("vjm@8I}9pL-9$^D", "vjm@8I}9pL-9$^D", "", "Wx/fR7^T5S\" >9P["); [EOL]       booleanArray0[0] = boolean0; [EOL]       Boolean boolean1 = Boolean.valueOf("vjm@8I}9pL-9$^D"); [EOL]       booleanArray0[1] = boolean1; [EOL]       Boolean boolean2 = BooleanUtils.and(booleanArray0); [EOL]       assertFalse(boolean2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("~dYL7CZ`YIZ7"); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.close(); [EOL]       assertEquals(44, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void propertiesAt() { [EOL] ObjectNode node = newObject(); [EOL] node.putArray("foo").add(newKvObject("k1", "v1")).add(newKvObject("k2", "v2")); [EOL] [EOL] Map<String, String> value = Selectors.propertiesAt(node, FOO_FIELD); [EOL] [EOL] assertThat(value, allOf(hasEntry("k1", "v1"), hasEntry("k2", "v2"))); [EOL] } [EOL]
@Test [EOL] public void derivedEntity() { [EOL] final ContextURL contextURL = ContextURLParser.parse( [EOL] URI.create("http://host/service/$metadata#Customers/Model.VipCustomer/$entity")); [EOL] [EOL] assertEquals("Customers", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertEquals("Model.VipCustomer", contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertTrue(contextURL.isEntity()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1354); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]       assertEquals(1354, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append('E'); [EOL]       assertEquals(1354, strBuilder0.capacity()); [EOL]       assertEquals(1354, strBuilder1.capacity()); [EOL]       assertEquals(1354, strBuilder2.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.charAt(2193); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2193 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testTagNonExisting() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] itemVersionManagerImpl.tag(context, itemId, versionId, new Id(), new Tag("tagName", "tagDesc")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4043)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 1885L; [EOL]       longArray0[1] = (long) 0; [EOL]       String string4 = StringUtils.join(longArray0, 'S', 285, 0); [EOL]       assertTrue(string4.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray0)); [EOL]       assertFalse(stringArray2.equals((Object)stringArray1)); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)21; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)16; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte)3; [EOL]       byteArray0[5] = (byte)64; [EOL]       byteArray0[6] = (byte)36; [EOL]       try {  [EOL]         StringUtils.toString(byteArray0, ""); [EOL]         fail("Expecting exception: UnsupportedEncodingException"); [EOL]        [EOL]       } catch(UnsupportedEncodingException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys();2|T ")); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);2|T ")); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiControl('\uDC42'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void geoPolygon() { [EOL] assertTrue(new UriTokenizer("geography'SRID=4326;Polygon((0 0,1 0,0 1,0 0))'").next(TokenKind.GeographyPolygon)); [EOL] assertTrue(new UriTokenizer("geometry'SRID=0;Polygon((0 0,1 0,0 1,0 0))'").next(TokenKind.GeometryPolygon)); [EOL] assertTrue(new UriTokenizer("geometry'SRID=0;Polygon((1 1,2 1,2 2,1 2,1 1),(0 0,4 0,4 4,0 4,0 0))'") [EOL] 	.next(TokenKind.GeometryPolygon)); [EOL] assertTrue(new UriTokenizer( [EOL] 	"geometry'SRID=0;Polygon((0 0,1 1,2 2,0 0),(1 1,2 1,2 2,1 2,1 1),(0 0,4 0,4 4,0 4,0 0))'") [EOL] 	.next(TokenKind.GeometryPolygon)); [EOL] wrongToken(TokenKind.GeometryPolygon, [EOL] "geometry'SRID=0;Polygon((0 0,4 0,4 4,0 4,0 0),(1 1,2 1,2 2,1 2,1 1))'", [EOL] 'x'); [EOL] } [EOL]
@Test [EOL] public void testGetValue() throws Exception [EOL] { [EOL] assertNotNull( cacheEntry.getValue() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       compareToBuilder0.append(1359, 43); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       int int0 = NumberUtils.min(5226, 5226, 5226); [EOL]       assertEquals(5226, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void retrieveObjectsForPageableOutOfRange() { [EOL] PetEntity petEntity1 = new PetEntity(); [EOL] petEntity1.setName("browny"); [EOL] petEntity1.setOwner("dodong"); [EOL] PetEntity petEntity2 = new PetEntity(); [EOL] petEntity2.setName("asol"); [EOL] petEntity2.setOwner("gerry"); [EOL] when(queryService.getTypedQuery(PetEntity.class, Sort.sort(PetEntity.class), entityManager)).thenReturn(query); [EOL] when(query.getResultList()).thenReturn(List.of(petEntity2, petEntity1)); [EOL] [EOL] Page<PetEntity> all = target.findAll(PageRequest.of(2, 10)); [EOL] [EOL] assertThat(all, is(notNullValue())); [EOL] assertThat(all.getSize(), is(10)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArraySeparator((String) null); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.clear(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteAll('#'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]       assertTrue(strBuilder6.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder8.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[1]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)0}, shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(6); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder("v@1?:{"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // dstOffset -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testCreateEnvironmentKeyPair() throws Exception [EOL] { [EOL] KeyPair keyPair = mock( KeyPair.class ); [EOL] doReturn( keyPair ).when( keyManager ).generateKeyPair( TestHelper.ENV_ID, false ); [EOL] [EOL] PGPSecretKeyRing secRing = mock( PGPSecretKeyRing.class ); [EOL] PGPPublicKeyRing pubRing = mock( PGPPublicKeyRing.class ); [EOL] doReturn( secRing ).when( pgpKeyUtil ).getSecretKeyRing( any( byte[].class ) ); [EOL] doReturn( pubRing ).when( pgpKeyUtil ).getPublicKeyRing( any( byte[].class ) ); [EOL] [EOL] environmentManager.createEnvironmentKeyPair( TestHelper.ENVIRONMENT_ID ); [EOL] [EOL] verify( keyManager ).saveSecretKeyRing( TestHelper.ENV_ID, SecurityKeyType.ENVIRONMENT_KEY.getId(), secRing ); [EOL] verify( keyManager ).savePublicKeyRing( TestHelper.ENV_ID, SecurityKeyType.ENVIRONMENT_KEY.getId(), pubRing ); [EOL] } [EOL]
@Test [EOL] public void setVisibleViewInvisible() { [EOL] View view = new View(new Activity()); [EOL] view.setVisibility(VISIBLE); [EOL] assertEquals(VISIBLE, view.getVisibility()); [EOL] ViewUtils.setInvisible(view, true); [EOL] assertEquals(INVISIBLE, view.getVisibility()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRemove() throws Exception [EOL] { [EOL] [EOL] commandProcessor.remove( request ); [EOL] [EOL] verify( commands ).remove( COMMAND_ID ); [EOL] } [EOL]
@Test [EOL] void shouldCreateTree() { [EOL] [EOL] final Tree<TestResult> tree = SuitesPlugin.getData(getSimpleLaunchResults()); [EOL] [EOL] assertThat(tree.getChildren()) [EOL] .hasSize(2) [EOL] .extracting(TreeNode::getName) [EOL] .containsExactlyInAnyOrder("s1", "s2"); [EOL] } [EOL]
@Test [EOL] public void noDebugModeCreateDebugResponseCallMustDoNothing() { [EOL] ODataResponse odResponse = new ODataResponse(); [EOL] ODataResponse debugResponse = debugger.createDebugResponse(null, odResponse, null, null, null); [EOL] [EOL] assertEquals(odResponse, debugResponse); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("Elements in a range must not be null: element1="); [EOL]       boolean boolean0 = range0.isEndedBy(""); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testFormatWithEmptyLoggerName() throws Exception { [EOL] record.setLoggerName(""); [EOL] [EOL] final JsonNode result = objectMapper.readTree(formatter.format(record)); [EOL] [EOL] assertThat(result.get("log.logger").textValue()).isEmpty(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "#Vd[("; [EOL]       StrBuilder strBuilder0 = new StrBuilder("#Vd[("); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]        [EOL]       int int0 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(7, 1542); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       compareToBuilder0.append(byteArray0, byteArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testOnResponse() throws Exception [EOL] { [EOL] blockingCommandCallback.completionSemaphore = completionSemaphore; [EOL] [EOL] blockingCommandCallback.onResponse( response, commandResult ); [EOL] [EOL] verify( completionSemaphore ).release(); [EOL] verify( callback ).onResponse( response, commandResult ); [EOL] } [EOL]
@Test [EOL] public void testObjectClassMustAttributesDiffer() [EOL] { [EOL] int less = comparator.compare( objectClass, cn ); [EOL] assertTrue( less < 0 ); [EOL] int greater = comparator.compare( cn, objectClass ); [EOL] assertTrue( greater > 0 ); [EOL] assertEquals( 0, less + greater ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsetEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetBytesInMb() [EOL] { [EOL] double result = UnitUtil.getBytesInMb( 1024 * 1024 ); [EOL] assertEquals( 1.0, result, DELTA ); [EOL] result = UnitUtil.getBytesInMb( 1024 * 1024 * 4 ); [EOL] assertEquals( 4.0, result, DELTA ); [EOL] } [EOL]
@Test [EOL] public void twoDynamicFragmentsWithSeparator() { [EOL] List<TextFragment> fragments = TemplateParser.parseTemplateString("{{hello}}/{{world}}"); [EOL] [EOL] assertThat( [EOL] fragments, [EOL] contains( [EOL] TextFragment.dynamicFragment("hello"), [EOL] staticFragment("/"), [EOL] TextFragment.dynamicFragment("world"))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(32); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       objectArray0[4] = (Object) strBuilder1; [EOL]       objectArray0[5] = (Object) strBuilder1; [EOL]       objectArray0[6] = (Object) strBuilder1; [EOL]       objectArray0[7] = (Object) null; [EOL]       objectArray0[8] = (Object) strBuilder1; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testCreateAndGetSyncgroups() throws Exception { [EOL] Database db = createDatabase(); [EOL] DatabaseHandle.CollectionOptions opts = new DatabaseHandle.CollectionOptions(); [EOL] opts.withoutSyncgroup = true; [EOL] Collection cxA = db.createCollection(opts.setPrefix("a")); [EOL] Collection cxB = db.createCollection(opts.setPrefix("b")); [EOL] Collection cxC = db.createCollection(opts.setWithoutSyncgroup(false).setPrefix("c")); [EOL] assertNotNull(cxA); [EOL] // Note, there's no userdata syncgroup since we set disableUserdataSyncgroup to true. [EOL] assertTrue(idsMatch(getSyncgroupIds(db), Syncbase.getPersonalBlessingString(), [EOL] ImmutableList.of("c"))); [EOL] db.syncgroup("sg1", ImmutableList.of(cxA)); [EOL] db.syncgroup("sg2", ImmutableList.of(cxA, cxB, cxC)); [EOL] assertThat(getSyncgroupIds(db)).containsExactly( [EOL] new Id(Syncbase.getPersonalBlessingString(), cxC.getSyncgroup().getId().getName()), [EOL] new Id(Syncbase.getPersonalBlessingString(), "sg1"), [EOL] new Id(Syncbase.getPersonalBlessingString(), "sg2")); [EOL] } [EOL]
@Test [EOL] public void testTraitsBuilder() throws Exception [EOL] { [EOL] Map<String, String> map = proxy.traitsBuilder( "a=b;c=d" ); [EOL] [EOL] assertEquals( map.get( "a" ), "b" ); [EOL] } [EOL]
@Test(expected = ValveAuthException.class) [EOL] 	public void shouldFailAuthenticate() throws ValveAuthException { [EOL] 		// add mock behavior [EOL] 		when(this.mockClient.getJWT(eq("badUsername"), eq("badPassword"), eq("n/a"))) [EOL] 			.thenThrow(new ValveAuthException("")); [EOL] [EOL] 		// test [EOL] 		this.valve.authenticate("badUsername", "badPassword"); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", ""); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void create() { [EOL] Id dbId = new Id("idp:a:angrybirds", "core_create_syncgroups"); [EOL] Id sgId = new Id("...", "syncgroup"); [EOL] Id collectionId = new Id("...", "collection"); [EOL] try { [EOL] Database db = Service.database(dbId); [EOL] db.create(anyDbPermissions()); [EOL] db.collection(collectionId).create(anyCollectionPermissions()); [EOL] SyncgroupSpec spec = new SyncgroupSpec(); [EOL] spec.collections = singletonList(collectionId); [EOL] spec.permissions = anySyncgroupPermissions(); [EOL] SyncgroupMemberInfo info = new SyncgroupMemberInfo(); [EOL] // TODO(razvanm): Pick some meaningful values. [EOL] info.syncPriority = 1; [EOL] info.blobDevType = 2; [EOL] Syncgroup syncgroup = db.syncgroup(sgId); [EOL] syncgroup.create(spec, info); [EOL] [EOL] List<Id> syncgroups = db.listSyncgroups(); [EOL] assertEquals(1, syncgroups.size()); [EOL] Id actual = syncgroups.get(0); [EOL] assertEquals(sgId.blessing, actual.blessing); [EOL] assertEquals(sgId.name, actual.name); [EOL] [EOL] VersionedSyncgroupSpec verSpec = syncgroup.getSpec(); [EOL] assertNotNull(verSpec.version); [EOL] assertTrue(verSpec.version.length() > 0); [EOL] assertNotNull(verSpec.syncgroupSpec); [EOL] assertEquals(1, verSpec.syncgroupSpec.collections.size()); [EOL] // The trim is used to remove a new line. [EOL] assertEquals( [EOL] new String(spec.permissions.json), [EOL] new String(verSpec.syncgroupSpec.permissions.json).trim()); [EOL] actual = syncgroups.get(0); [EOL] assertEquals(sgId.blessing, actual.blessing); [EOL] assertEquals(sgId.name, actual.name); [EOL] [EOL] verSpec.syncgroupSpec.description = "Dummy description"; [EOL] syncgroup.setSpec(verSpec); [EOL] assertEquals( [EOL] verSpec.syncgroupSpec.description, [EOL] syncgroup.getSpec().syncgroupSpec.description); [EOL] [EOL] Map<String, SyncgroupMemberInfo> members = syncgroup.getMembers(); [EOL] assertNotNull(members); [EOL] assertEquals(1, members.size()); [EOL] assertTrue(members.keySet().iterator().next().length() > 0); [EOL] assertEquals(info.syncPriority, members.values().iterator().next().syncPriority); [EOL] assertEquals(info.blobDevType, members.values().iterator().next().blobDevType); [EOL] } catch (VError vError) { [EOL] vError.printStackTrace(); [EOL] fail(vError.toString()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('h'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5'); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]       assertEquals(773, strBuilder2.size()); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       objectArray0[4] = (Object) ", Length: 0"; [EOL]       objectArray0[5] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator(""); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]       assertEquals(773, strBuilder1.size()); [EOL]       assertEquals(773, strBuilder3.size()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'h'; [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(773, strBuilder0.size()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void dynamicFragmentToTheLeft() { [EOL] List<TextFragment> fragments = TemplateParser.parseTemplateString("{{hello}}-world"); [EOL] [EOL] assertThat( [EOL] fragments, contains(TextFragment.dynamicFragment("hello"), staticFragment("-world"))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-2586)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.center("6~L @37EEQ$", (-2586), "The character must not be null"); [EOL]        [EOL]       int int2 = StringUtils.length("6~L @37EEQ$"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "6~L @37EEQ$"; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("6~L @37EEQ$", "6~L @37EEQ$", charSequenceArray0); [EOL]       assertEquals(1, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void generateProperGraphQLQueryForWellbore() throws Exception { [EOL] final String variablesNodeName = "variables"; [EOL] final String queryNodeName = "query"; [EOL] final String wellboreArgNodeName = "wellboreArgument"; [EOL] final String wellboreOpenQuery = "wellboreOpenQuery1411.xml"; [EOL] JSONObject wellboreQueryFields = new JSONObject(); [EOL] [EOL] // Get what is expected from the resource... [EOL] String queryString = TestUtilities.getResourceAsString(wellboreOpenQuery); [EOL] ObjWellbores queryObject = WitsmlMarshal.deserialize(queryString, ObjWellbores.class); [EOL] ObjWellbore singularObject = queryObject.getWellbore().get(0); [EOL] JSONObject wellboreJson = new JSONObject(singularObject.getJSONString("1.4.1.1")); [EOL] [EOL] // Get what the code-under-test produces... [EOL] GraphQLQueryConverter converter = new GraphQLQueryConverter(); [EOL] String graphQLQuery = converter.getQuery(singularObject); [EOL] [EOL] // Perform the tests... [EOL] [EOL] // 1st: check that the query was produced... [EOL] assertNotNull(graphQLQuery); [EOL] [EOL] // 2nd: Check if the produced JSON contains all of the populated query fields [EOL] // from the Resource and build wellbore query fields dynamically ... [EOL] checkNbuildQuery("uid", wellboreJson, graphQLQuery, wellboreQueryFields ); [EOL] checkNbuildQuery("uidWell", wellboreJson, graphQLQuery, wellboreQueryFields ); [EOL] checkNbuildQuery("name", wellboreJson, graphQLQuery, wellboreQueryFields ); [EOL] checkNbuildQuery("nameWell", wellboreJson, graphQLQuery, wellboreQueryFields ); [EOL] [EOL] // 3rd: Create comparable object (to perform an apples-to-apples comparison) & then [EOL] // perform a deep comparison of the json values... [EOL] JSONObject comparable = new JSONObject(); [EOL] comparable.put( queryNodeName, GraphQLQueryConstants.WELLBORE_QUERY ); [EOL] [EOL] // build variables section [EOL] JSONObject variables = new JSONObject(); [EOL] variables.put( wellboreArgNodeName, wellboreQueryFields ); [EOL] comparable.put( variablesNodeName, variables ); [EOL] String comparableToString = comparable.toString(2); [EOL] [EOL] ObjectMapper om = new ObjectMapper(); [EOL] Map<String, Object> producedMap = (Map<String, Object>) (om.readValue(graphQLQuery, Map.class)); [EOL] Map<String, Object> expectedMap = (Map<String, Object>) (om.readValue(comparableToString, Map.class)); [EOL] assertEquals( producedMap, expectedMap ); [EOL] [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.capitalizeFully("C"); [EOL]       assertEquals("C", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSize() throws Exception [EOL] { [EOL] expiringCache.size(); [EOL] } [EOL]
@Test [EOL] public void tastCall() throws Exception [EOL] { [EOL] task.call(); [EOL] [EOL] verify( container ).destroy( false ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHex()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(2); [EOL]       assertEquals('4', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(2134); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) null, ""); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder1.capacity()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(""); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterator<?>) null); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder2.capacity()); [EOL]       assertEquals(2134, strBuilder3.capacity()); [EOL]        [EOL]       CharSequence charSequence0 = strBuilder2.subSequence(0, 0); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]       assertEquals(2134, strBuilder2.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertEquals(2134, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testReadPublicKeyFromPath() throws IOException, PGPException [EOL] { [EOL] PGPPublicKey publicKey = PGPKeyHelper.readPublicKey( PGPTestDataFactory.PUBLIC_KEY_PATH ); [EOL] [EOL] checkPublicKey( publicKey ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = '4'; [EOL]       StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder4.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray1 = new char[0]; [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder7 = strBuilder5.append(6); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray1, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("', has a length less than 2", 'E', 'E'); [EOL]        [EOL]       String string1 = StringUtils.replace("', has a length less than 2", "', has a length less than 2", "', has a length less than 2"); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("', has a length less than 2"); [EOL]        [EOL]       String string2 = StringUtils.difference("', has a length less than 2", "', has a length less than 2"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = "', has a length less than 2"; [EOL]       String string4 = StringUtils.removeStart("", "', has a length less than 2"); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       String string5 = StringUtils.substringAfterLast("', has a length less than 2", "', has a length less than 2"); [EOL]       assertTrue(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("', has a length less than 2"); [EOL]        [EOL]       int int1 = (-76); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("x", (-76), (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldGetName() { [EOL] 		assertEquals("DoT", this.valve.getName()); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("."); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void and() throws Exception { [EOL] 		HandlerFunction<ServerResponse> handlerFunction = request -> ServerResponse.ok().build(); [EOL] 		RouterFunction<ServerResponse> routerFunction1 = request -> Mono.empty(); [EOL] 		RouterFunction<ServerResponse> routerFunction2 = request -> Mono.just(handlerFunction); [EOL] [EOL] 		RouterFunction<ServerResponse> result = routerFunction1.and(routerFunction2); [EOL] 		assertNotNull(result); [EOL] [EOL] 		MockServerRequest request = MockServerRequest.builder().build(); [EOL] 		Mono<HandlerFunction<ServerResponse>> resultHandlerFunction = result.route(request); [EOL] [EOL] 		StepVerifier.create(resultHandlerFunction) [EOL] 				.expectNext(handlerFunction) [EOL] 				.expectComplete() [EOL] 				.verify(); [EOL] 	} [EOL]
@Test [EOL] public void shouldCreateLog1411() throws Exception { [EOL] [EOL] // get the raw WITSML XML request from resource file [EOL] String rawXML = TestUtilities.getResourceAsString("log1411.xml"); [EOL] [EOL] // handle version 1.4.1.1; it is not necessary to test 1.3.1.1 [EOL] com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLogs logs = WitsmlMarshal.deserialize( [EOL] rawXML, com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLogs.class); [EOL] [EOL] // for testing, there is only 1 log under test, so obtain that one [EOL] com.hashmapinc.tempus.WitsmlObjects.v1411.ObjLog log = logs.getLog().get(0); [EOL] [EOL] // ********************************* ChannelSet ********************************* // [EOL] ChannelSet channelSet = ChannelSet.from1411(log); [EOL] String csPayload = channelSet.toJson(); [EOL] [EOL] // build first http request that creates a ChannelSet [EOL] // endpoint: [EOL] // .../channelSets?uid={uid}&uidWellbore={uidWellbore}&uidWell={uidWell} [EOL] String endpointCS = this.url + this.logChannelsetPath; // endpoint must match with [EOL] // the one used in DotDelegator [EOL] // (logChannelsetPath) [EOL] HttpRequestWithBody requestCS = Unirest.post(endpointCS); [EOL] // add query string params for ChannelSet creation: [EOL] // uid, uidWellbore, and uidWell [EOL] requestCS.queryString("uid", log.getUid()); [EOL] requestCS.queryString("uidWellbore", log.getUidWellbore()); [EOL] requestCS.queryString("uidWell", log.getUidWell()); [EOL] [EOL] // create the header for create ChannelSet [EOL] requestCS.header("Content-Type", "application/json"); [EOL] [EOL] // create the payload for create ChannelSet [EOL] requestCS.body(csPayload); [EOL] [EOL] // build http response mock for ChannelSet [EOL] HttpResponse<String> respCS = mock(HttpResponse.class); [EOL] // only requires the uid and uuid from ChannelSet [EOL] when(respCS.getBody()).thenReturn( "{\"uid\": \"" [EOL] + log.getUid() + "\"," + "\"uuid\": \"testUUID\"}" ); [EOL] when(respCS.getStatus()).thenReturn(201); [EOL] [EOL] // ********************************** Channels ********************************** // [EOL] String channelsPayload = Channel.channelListToJson(Channel.from1411(log)); [EOL] [EOL] // build second http request that creates Channels for the ChannelSet [EOL] // endpoint: [EOL] // .../channels/metadata?channelSetUuid={channelSetUuid} [EOL] String endpointCH = this.url + this.logChannelsPath; // endpoint must match with [EOL] // the one used in DotDelegator [EOL] // (logChannelsPath) [EOL] HttpRequestWithBody requestCHs = Unirest.post(endpointCH); [EOL] // add query string params for Channels creation: [EOL] // channelSetUuid [EOL] requestCHs.queryString("channelSetUuid", "testUUID"); [EOL] [EOL] // create the header for create Channels [EOL] requestCHs.header("Content-Type", "application/json"); [EOL] [EOL] // create the payload for create Channels [EOL] requestCHs.body(channelsPayload); [EOL] [EOL] // build http response mock for Channels [EOL] HttpResponse<String> respCHs = mock(HttpResponse.class); [EOL] when(respCHs.getStatus()).thenReturn(200); [EOL] [EOL] // ************************************ Data ************************************ // [EOL] String dataPayload = DotLogDataHelper.convertDataToDotFrom1411(log); [EOL] [EOL] // build third http request that creates data for the channel set [EOL] // endpoint: .../channels/data?channelSetUuid={channelSetUuid} [EOL] String endpointData = this.url + this.logDataPath; // endpoint must match with [EOL] // the one used in DotDelegator [EOL] // (logDataPath) [EOL] HttpRequestWithBody requestData = Unirest.post(endpointData); [EOL] // add query string params for data creation: [EOL] // channelSetUuid [EOL] requestData.queryString("channelSetUuid", "testUUID"); [EOL] [EOL] // create the header for Data creation: [EOL] requestData.header("Content-Type", "application/json"); [EOL] [EOL] // create the payload for create data [EOL] requestData.body(dataPayload); [EOL] [EOL] // build http response mock for Data [EOL] HttpResponse<String> respData = mock(HttpResponse.class); [EOL] when(respData.getBody()).thenReturn( "{\"uid\": \"" [EOL] + log.getUid() + "\"," + "\"uuid\": \"testUUID\"}" ); [EOL] when(respData.getStatus()).thenReturn(200); [EOL] [EOL] // *********************************** Mocking ********************************** // [EOL] when(this.mockClient.makeRequest(any(HttpRequest.class), anyString(), anyString(), anyString())) [EOL] .thenAnswer( [EOL] invocation -> { [EOL] HttpRequest req = invocation.getArgument(0); [EOL] String userName = invocation.getArgument(1); [EOL] String pass = invocation.getArgument(2); [EOL] [EOL] if (req.getHttpMethod().name().equals(requestCS.getHttpMethod().name()) && [EOL] req.getUrl().equals(requestCS.getUrl()) && [EOL] req.getHeaders().containsKey("Content-Type") && [EOL] userName.equals("goodUsername") && [EOL] pass.equals("goodPassword")) { [EOL] return respCS; [EOL] } else if (req.getHttpMethod().name().equals(requestCHs.getHttpMethod().name()) && [EOL] req.getUrl().equals(requestCHs.getUrl()) && [EOL] req.getHeaders().containsKey("Content-Type") && [EOL] userName.equals("goodUsername") && [EOL] pass.equals("goodPassword")) { [EOL] return respCHs; [EOL] } else if (req.getHttpMethod().name().equals(requestData.getHttpMethod().name()) && [EOL] req.getUrl().equals(requestData.getUrl()) && [EOL] req.getHeaders().containsKey("Content-Type") && [EOL] userName.equals("goodUsername") && [EOL] pass.equals("goodPassword")) { [EOL] return respData; [EOL] } else { [EOL] throw new InvalidUseOfMatchersException( [EOL] String.format("Argument %s does not match", req.getUrl())); [EOL] } [EOL] }); [EOL] [EOL] // ********************************* Validation ********************************* // [EOL] String actualUid = this.delegator.createObject( log, [EOL] "goodUsername", [EOL] "goodPassword", [EOL] "exchangeID", [EOL] this.mockClient ); [EOL] String expectedUid = log.getUid(); [EOL] assertEquals(expectedUid, actualUid); [EOL] } [EOL]
@Test [EOL] public void shouldHandleTestSuiteDetails() throws URISyntaxException { [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] context.fileSystem() [EOL] .add(inputFile("org.sonar.core.ExtensionsFinderTest")) [EOL] .add(inputFile("org.sonar.core.ExtensionsFinderTest2")) [EOL] .add(inputFile("org.sonar.core.ExtensionsFinderTest3")); [EOL] surefireSensor.collect(context, new File(getClass().getResource( [EOL] "/org/sonar/plugins/groovy/surefire/SurefireSensorTest/shouldHandleTestSuiteDetails/").toURI())); [EOL] [EOL] // 3 classes, 6 measures by class [EOL] assertThat(context.measures(":org.sonar.core.ExtensionsFinderTest")).hasSize(6); [EOL] assertThat(context.measures(":org.sonar.core.ExtensionsFinderTest2")).hasSize(6); [EOL] assertThat(context.measures(":org.sonar.core.ExtensionsFinderTest3")).hasSize(6); [EOL] [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.TESTS).value()).isEqualTo(4); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.TEST_EXECUTION_TIME).value()).isEqualTo(111); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.TEST_FAILURES).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.TEST_ERRORS).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(0); [EOL] [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest2", CoreMetrics.TESTS).value()).isEqualTo(2); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest2", CoreMetrics.TEST_EXECUTION_TIME).value()).isEqualTo(2); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest2", CoreMetrics.TEST_FAILURES).value()).isEqualTo(0); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest2", CoreMetrics.TEST_ERRORS).value()).isEqualTo(0); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest2", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(0); [EOL] [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest3", CoreMetrics.TESTS).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest3", CoreMetrics.TEST_EXECUTION_TIME).value()).isEqualTo(16); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest3", CoreMetrics.TEST_FAILURES).value()).isEqualTo(0); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest3", CoreMetrics.TEST_ERRORS).value()).isEqualTo(0); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest3", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(1); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("T"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "T", 0); [EOL]        [EOL]       boolean boolean3 = StringUtils.containsNone((CharSequence) "T", "{FakYXNQUOHZ"); [EOL]        [EOL]       boolean boolean4 = StringUtils.contains((CharSequence) "", 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.increment(); [EOL]       mutableLong0.toLong(); [EOL]       assertEquals(1, mutableLong0.intValue()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertEquals(2, strBuilder0.size()); [EOL]       assertEquals(2, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]       assertEquals(3, strBuilder1.size()); [EOL]       assertEquals(3, strBuilder3.size()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.clear(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ")[C$#_(U9,]+>eub7]}"; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendln(false); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.replaceAll(strMatcher0, ")[C$#_(U9,]+>eub7]}"); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder4.size()); [EOL]       assertEquals(6, strBuilder6.size()); [EOL]        [EOL]       char char0 = 'c'; [EOL]       int int3 = strBuilder0.lastIndexOf('c', 7); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.appendSeparator("Solaris"); [EOL]       assertEquals(13, strBuilder0.size()); [EOL]       assertEquals(13, strBuilder2.size()); [EOL]       assertEquals(13, strBuilder7.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertEquals(13, strBuilder0.size()); [EOL]       assertEquals(13, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendFixedWidthPadRight((Object) "java.vm.specification.version", 81, '0'); [EOL]       assertEquals(94, strBuilder8.size()); [EOL]       assertEquals(94, strBuilder0.size()); [EOL]       assertEquals(94, strBuilder4.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "o&$W$9Myt(-BI6CNQZ"; [EOL]       String string0 = " v](>;:r<Bi6i@@h-"; [EOL]       stringArray0[1] = " v](>;:r<Bi6i@@h-"; [EOL]       String string1 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(" v](>;:r<Bi6i@@h-"); [EOL]        [EOL]       String string2 = StringUtils.left("P{", Integer.MAX_VALUE); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsIgnoreCase("P{", ""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("P{", Integer.MAX_VALUE, (-3384)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void destroy() { [EOL] Id dbId = new Id("idp:a:angrybirds", "core_destroy_db"); [EOL] try { [EOL] Database db = Service.database(dbId); [EOL] db.create(anyDbPermissions()); [EOL] db.destroy(); [EOL] } catch (VError vError) { [EOL] vError.printStackTrace(); [EOL] fail(vError.toString()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       System.setCurrentTimeMillis(0L); [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       String string0 = stopWatch0.toSplitString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replacePattern("", "", ""); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("null comparator"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = StringUtils.getCommonPrefix((String[]) null); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAlphanumericSpace(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]       assertEquals(40, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('2'); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder1.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder1.length()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]       assertEquals(41, strBuilder2.length()); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf('', 0); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '\\'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("b-K~^"); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNewLine(); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((StringBuilder) null); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]       assertEquals(6, strBuilder2.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder1.equals(strBuilder0); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]       assertEquals(6, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertEquals(6, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'p'; [EOL]       int int1 = 96; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(31, charArray0, 96, (-886)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('d', char0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetId() throws Exception [EOL] { [EOL] assertEquals( HOST_ID, host.getId() ); [EOL] } [EOL]
@Test [EOL] public void testDoExecute() throws Exception [EOL] { [EOL] command.doExecute(); [EOL] [EOL] assertTrue( getSysOut().contains( PEER_ID ) ); [EOL] } [EOL]
@Test [EOL] public void shouldInsertZeroWhenNoReports() throws URISyntaxException { [EOL] SensorContext context = mock(SensorContext.class); [EOL] parser.collect(context, getDir("noReports")); [EOL] verify(context, never()).newMeasure(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln((Object) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.deleteAll('o'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 79, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripAccents((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null); [EOL]        [EOL]       String string1 = StringUtils.removeEnd((String) null, "%"); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsWhitespace((CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.substring("4q57|=FQji9Xaa?i", 0, 591); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "4q57|=FQji9Xaa?i", (CharSequence) "4q57|=FQji9Xaa?i"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.upperCase((String) null); [EOL]        [EOL]       String string4 = StringUtils.difference("4q57|=FQji9Xaa?i", "4q57|=FQji9Xaa?i"); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = StringUtils.chop((String) null); [EOL]        [EOL]       boolean boolean4 = StringUtils.isAlphaSpace((CharSequence) null); [EOL]        [EOL]       boolean boolean5 = StringUtils.isEmpty((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = null; [EOL]       stringArray0[1] = null; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = null; [EOL]       stringArray0[4] = null; [EOL]       stringArray0[5] = "4q57|=FQji9Xaa?i"; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testshortToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('C'); [EOL]       boolean[] booleanArray1 = Conversion.shortToBinary((short) (-314), (short) (-314), booleanArray0, (-1), (-1)); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, false, false}, booleanArray1)); [EOL]   } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL] public void badSyntaxWithMultipleDots() { [EOL] ProtobufPathParser.parse("$..foo..bar"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(""); [EOL]       String string0 = contextedException0.getRawMessage(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testNonProxyHostsDefined() throws HttpException { [EOL] System.setProperty("http.proxyHost", "httpProxy"); [EOL] System.setProperty("http.proxyPort", "9090"); [EOL] System.setProperty("https.proxyHost", "httpsProxy"); [EOL] System.setProperty("https.proxyPort", "9443"); [EOL] System.setProperty("http.nonProxyHosts", "localhost|*.jahia.com"); [EOL] [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("http://www.jahia.com")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("https://www.jahia.com")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("http://localhost:8080")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("https://localhost:8080")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("www.jahia.com:9090")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("localhost:9090")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("/aaa.html")); [EOL] [EOL] assertEquals("httpProxy:9090", ProxyAddressSelector.getProxyForUrl("http://www.google.com")); [EOL] assertEquals("httpsProxy:9443", ProxyAddressSelector.getProxyForUrl("https://www.google.com")); [EOL] } [EOL]
@Test [EOL] public void scan() throws Exception { [EOL] Id dbId = new Id("idp:a:angrybirds", "scan_collection"); [EOL] String dbName = dbId.encode(); [EOL] Id collectionId = new Id("...", "collection"); [EOL] String collectionName = Util.NamingJoin(Arrays.asList(dbName, collectionId.encode())); [EOL] final String keyName = Util.NamingJoin(Arrays.asList(collectionName, "key")); [EOL] // Reference: release/go/src/v.io/v23/vom/testdata/data81/vomdata.vdl [EOL] final byte[] vomValue = {(byte)0x81, 0x06, 0x03, 'a', 'b', 'c'}; [EOL] try { [EOL] Database.Create(dbName, anyDbPermissions()); [EOL] String batchHandle = Database.BeginBatch(dbId.encode(), null); [EOL] Collection.Create(collectionName, batchHandle, anyCollectionPermissions()); [EOL] Row.Put(keyName, batchHandle, vomValue); [EOL] Database.Commit(dbName, batchHandle); [EOL] [EOL] batchHandle = Database.BeginBatch(dbName, null); [EOL] assertTrue(Row.Exists(keyName, batchHandle)); [EOL] final SettableFuture<Void> done = SettableFuture.create(); [EOL] Collection.Scan(collectionName, batchHandle, new byte[]{}, new byte[]{}, [EOL] new Collection.ScanCallbacks() { [EOL] @Override [EOL] public void onKeyValue(KeyValue keyValue) { [EOL] assertEquals("key", keyValue.key); [EOL] assertArrayEquals(vomValue, keyValue.value); [EOL] } [EOL] [EOL] @Override [EOL] public void onDone(VError vError) { [EOL] assertEquals(null, vError); [EOL] done.set(null); [EOL] } [EOL] }); [EOL] done.get(1, TimeUnit.SECONDS); [EOL] } catch (VError vError) { [EOL] vError.printStackTrace(); [EOL] fail(vError.toString()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       Integer integer0 = new Integer(36); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String string0 = ReflectionToStringBuilder.toString(integer0, toStringStyle0, true, true, (Class<? super Integer>) class0); [EOL]       assertEquals("36,1360826667806852920,4,2147483647,-2147483648,32,int,{0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9},{0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9},{0,1,2,3,4,5,6,7,8,9,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z},{9,99,999,9999,99999,999999,9999999,99999999,999999999,2147483647}", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] when( host.execute( any( RequestBuilder.class ) ) ).thenReturn( commandResult ); [EOL] when( commandResult.hasSucceeded() ).thenReturn( true ); [EOL] [EOL] commandUtil.execute( requestBuilder, host ); [EOL] } [EOL]
@Test [EOL] public void testCall() throws Exception [EOL] { [EOL] try [EOL] { [EOL] [EOL] task.call(); [EOL] [EOL] fail( "ActionFailedException expected" ); [EOL] } [EOL] catch ( ActionFailedException e ) [EOL] { [EOL] } [EOL] [EOL] doReturn( true ).when( response ).hasSucceeded(); [EOL] [EOL] assertNotNull( task.call() ); [EOL] } [EOL]
@Test [EOL] public void buildPrimitiveType() { [EOL] ContextURL contextURL = ContextURL.with().serviceRoot(serviceRoot) [EOL] .type(OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)) [EOL] .build(); [EOL] assertEquals(serviceRoot + "$metadata#Edm.String", [EOL] ContextURLBuilder.create(contextURL).toASCIIString()); [EOL] [EOL] contextURL = ContextURL.with().serviceRoot(serviceRoot) [EOL] .type(OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)).asCollection() [EOL] .build(); [EOL] assertEquals(serviceRoot + "$metadata#Collection(Edm.String)", [EOL] ContextURLBuilder.create(contextURL).toString()); [EOL] } [EOL]
@Test [EOL] public void writeServiceDocument() throws Exception { [EOL] CsdlEdmProvider provider = new MetadataDocumentXmlSerializerTest.LocalProvider(); [EOL] ServiceMetadata serviceMetadata = new ServiceMetadataImpl(provider, [EOL] Collections.<EdmxReference> emptyList(), null); [EOL] InputStream metadataStream = serializer.serviceDocument(serviceMetadata, "http://host/svc").getContent(); [EOL] String metadata = IOUtils.toString(metadataStream); [EOL] assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?>" [EOL] + "<app:service xmlns:atom=\"http://www.w3.org/2005/Atom\" " [EOL] + "xmlns:app=\"http://www.w3.org/2007/app\" " [EOL] + "xmlns:metadata=\"http://docs.oasis-open.org/odata/ns/metadata\" " [EOL] + "metadata:context=\"http://host/svc/$metadata\">" [EOL] + "<app:workspace>" [EOL] + "<atom:title>org.olingo.container</atom:title>" [EOL] + "<app:collection href=\"ESAllPrim\" metadata:name=\"ESAllPrim\">" [EOL] + "<atom:title>ESAllPrim</atom:title>" [EOL] + "</app:collection>" [EOL] + "<metadata:function-import href=\"FINRTInt16\" metadata:name=\"FINRTInt16\">" [EOL] + "<atom:title>FINRTInt16</atom:title>" [EOL] + "</metadata:function-import>" [EOL] + "<metadata:function-import href=\"FINRTET\" metadata:name=\"FINRTET\">" [EOL] + "<atom:title>FINRTET</atom:title>" [EOL] + "</metadata:function-import>" [EOL] + "<metadata:singleton href=\"SI\" metadata:name=\"SI\">" [EOL] + "<atom:title>SI</atom:title>" [EOL] + "</metadata:singleton>" [EOL] + "</app:workspace>" [EOL] + "</app:service>", [EOL] metadata); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalizeFully()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER; [EOL]       String string0 = charSet0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL] } [EOL]
@Test [EOL] public void testQueueRequest() throws Exception [EOL] { [EOL] RequestedHost requestedHost = mock( RequestedHost.class ); [EOL] when( requestedHost.getId() ).thenReturn( REQUEST_ID ); [EOL] doReturn( TestHelper.PGP_PUBLIC_KEY ).when( requestedHost ).getPublicKey(); [EOL] doReturn( "hostname" ).when( requestedHost ).getHostname(); [EOL] [EOL] registrationManager.queueRequest( requestedHost ); [EOL] [EOL] verify( requestDataService ).update( isA( RequestedHostImpl.class ) ); [EOL] [EOL] //----- [EOL] [EOL] doReturn( null ).when( requestDataService ).find( REQUEST_ID ); [EOL] [EOL] registrationManager.queueRequest( requestedHost ); [EOL] [EOL] verify( registrationManager ).checkManagement( isA( RequestedHost.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Object[] objectArray1 = new Object[3]; [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append(objectArray0, objectArray1, comparator0); [EOL]       int int0 = compareToBuilder0.toComparison(); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCharMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('\u0000'); [EOL]       int int0 = strMatcher_CharMatcher0.isMatch(charArray0, 1, 1, 1); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigit(11); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[17]; [EOL]       boolean boolean0 = BooleanUtils.and(booleanArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testWithTimeout() throws Exception [EOL] { [EOL] requestBuilder.withTimeout( 500 ); [EOL] } [EOL]
@Test [EOL] public void setGoneViewInvisible() { [EOL] View view = new View(new Activity()); [EOL] view.setVisibility(GONE); [EOL] assertEquals(GONE, view.getVisibility()); [EOL] ViewUtils.setInvisible(view, true); [EOL] assertEquals(INVISIBLE, view.getVisibility()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int[] intArray0 = new int[1]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertEquals(2, strBuilder0.size()); [EOL]       assertEquals(2, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldThrowAPIExceptionWhenRoundingIsEnabledButNoRoundingIdSet() throws Exception { [EOL] 		expectedEx.expect(APIException.class); [EOL] 		expectedEx.expectMessage("Rounding enabled "); [EOL] 		options = new CashierOptions(); [EOL] 		options.setRoundToNearest(10); [EOL] 		when(cashierOptionsService.getOptions()).thenReturn(options); [EOL] 		when(adminService.getGlobalProperty(ModuleSettings.ROUNDING_ITEM_ID)).thenReturn(null); [EOL] 		cashierOptionsController.options(); [EOL] 	} [EOL]
@Test [EOL] public void testRemoveContainer() throws Exception [EOL] { [EOL] environment.removeContainer( environmentContainer ); [EOL] [EOL] assertTrue( environment.getContainerHosts().isEmpty() ); [EOL] } [EOL]
@Test [EOL] public void testFileMd5SumNotEquals_NotExistingFileBoth() throws Exception { [EOL] Path path1 = Paths.get("doesnotexist.txt"); [EOL] Path path2 = Paths.get("doesnotexist.txt"); [EOL] byte[] digest1 = fileDigestUtil.getFileMd5Sum(path1); [EOL] byte[] digest2 = fileDigestUtil.getFileMd5Sum(path2); [EOL] assertTrue(Arrays.equals(digest1, digest2)); [EOL] } [EOL]
@Test [EOL] public void testExtendSessionTime() [EOL] { [EOL] Date sessionDateBefore = session.getStartDate(); [EOL] sessionManager.extendSessionTime (session); [EOL] [EOL] long mSeconds = session.getEndDate().getTime() - sessionDateBefore.getTime(); [EOL] [EOL] mSeconds = (mSeconds/1000)/60; [EOL] assertTrue(mSeconds >= sessionManager.getSessionTimeout()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte) (-2)); [EOL]       MutableByte mutableByte1 = new MutableByte(); [EOL]       boolean boolean0 = mutableByte0.equals(mutableByte1); [EOL]       assertEquals((byte) (-2), (byte)mutableByte0.toByte()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDestroyContainer() throws Exception [EOL] { [EOL] [EOL] doThrow( new ResourceHostException( "" ) ).when( resourceHost ).destroyContainerHost( containerHost ); [EOL] [EOL] try [EOL] { [EOL] localPeer.destroyContainer( containerHost.getContainerId() ); [EOL] fail( "Expected PeerException" ); [EOL] } [EOL] catch ( PeerException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test [EOL] public void testDestroyEnvironment() throws Exception [EOL] { [EOL] EnvironmentDestructionWorkflow environmentDestructionWorkflow = mock( EnvironmentDestructionWorkflow.class ); [EOL] doReturn( environmentDestructionWorkflow ).when( environmentManager ) [EOL] .getEnvironmentDestructionWorkflow( environment, trackerOperation ); [EOL] doNothing().when( environmentManager ).registerActiveWorkflow( environment, environmentDestructionWorkflow ); [EOL] [EOL] environmentManager.destroyEnvironment( TestHelper.ENV_ID, false ); [EOL] [EOL] verify( environmentDestructionWorkflow ).join(); [EOL] [EOL] //----- [EOL] [EOL] doReturn( true ).when( environmentDestructionWorkflow ).isFailed(); [EOL] [EOL] try [EOL] { [EOL] environmentManager.destroyEnvironment( TestHelper.ENV_ID, false ); [EOL] [EOL] fail( "Expected EnvironmentModificationException" ); [EOL] } [EOL] catch ( EnvironmentDestructionException e ) [EOL] { [EOL] } [EOL] [EOL] //----- [EOL] [EOL] doReturn( EnvironmentStatus.UNDER_MODIFICATION ).when( environment ).getStatus(); [EOL] [EOL] try [EOL] { [EOL] environmentManager.destroyEnvironment( TestHelper.ENV_ID, false ); [EOL] [EOL] fail( "Expected EnvironmentModificationException" ); [EOL] } [EOL] catch ( EnvironmentDestructionException e ) [EOL] { [EOL] } [EOL] [EOL] //----- [EOL] [EOL] doReturn( bzrEnvironment ).when( environmentManager ).loadEnvironment( TestHelper.ENV_ID ); [EOL] [EOL] environmentManager.destroyEnvironment( TestHelper.ENV_ID, false ); [EOL] [EOL] verify( environmentAdapter ).removeEnvironment( bzrEnvironment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-890)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append("$Ps-)|ysy>r47^"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) strBuilder1; [EOL]       objectArray0[1] = (Object) "$Ps-)|ysy>r47^"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[5] = (Object) "$Ps-)|ysy>r47^"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "$Ps-)|ysy>r47^"); [EOL]       assertEquals(604, strBuilder0.capacity()); [EOL]       assertEquals(604, strBuilder1.capacity()); [EOL]       assertEquals(604, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(4, (float) 4); [EOL]       assertEquals(604, strBuilder0.capacity()); [EOL]       assertEquals(604, strBuilder1.capacity()); [EOL]       assertEquals(604, strBuilder2.capacity()); [EOL]       assertEquals(604, strBuilder3.capacity()); [EOL]        [EOL]       String string0 = strBuilder1.midString((-3719), 97); [EOL]       assertEquals(604, strBuilder0.capacity()); [EOL]       assertEquals(604, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0); [EOL]       assertEquals(2, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldCreateRandomUidContext() { [EOL] final RandomUidContext context = new RandomUidContext(); [EOL] assertThat(context.getValue()) [EOL] .isNotNull(); [EOL] } [EOL]
@Test [EOL] public void testRequiresLayout() throws Exception [EOL] { [EOL] [EOL] assertFalse( subutaiAppender.requiresLayout() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(256); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder3, (-2074), (-2074)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExportTemplate() throws Exception [EOL] { [EOL] doReturn( "time=\"2017-04-11 10:01:36\" level=info msg=\"tag-test-template exported to " [EOL] + "/var/snap/subutai-dev/common/lxc/tmpdir/tag-test-template-subutai-template_4.0.0_amd64.tar" [EOL] + ".gz\" \n" + "time=\"2017-04-11 10:01:38\" level=info msg=\"Template uploaded, " [EOL] + "hash:7d42f1d084c405b482938bb2620cce77 md5:asdfadfadsf size:123 parent:'foo:dilshat:1.0.0'\"" ) [EOL] .when( commandResult ).getStdOut(); [EOL] [EOL] resourceHostEntity.exportTemplate( "foo", "foo-template", "1.0.0", false, "token" ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsetIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       strTokenizer0.previousToken(); [EOL]       strTokenizer1.setIgnoreEmptyTokens(true); [EOL]       assertEquals(1, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInSeconds()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       long long0 = DateUtils.getFragmentInSeconds((Calendar) mockGregorianCalendar0, 5); [EOL]       assertEquals(73281L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("IPz$I2G^e"); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("IPz$I2G^e", (short[]) null, false); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeXml(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void handleNormalLost() throws Exception { [EOL] mList.setObserver(mObserver); [EOL] mList.add(0, THING0); [EOL] verify(mObserver).notifyItemInserted(0); [EOL] assertEquals(1, mList.size()); [EOL] [EOL] mList.handleLostAdvertisement(mAdvertisement); [EOL] [EOL] verify(mHandler).post(mRunnable.capture()); [EOL] [EOL] mRunnable.getValue().run(); [EOL] [EOL] assertEquals(0, mList.size()); [EOL] verify(mObserver).notifyItemRemoved(0); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte) (-105); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, (byte[]) null); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 4134); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (byte) (-105), (short) (-1)); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0); [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1); [EOL]       floatArray0[1] = (float) 0; [EOL]       floatArray0[2] = 0.0F; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       equalsBuilder4.reset(); [EOL]       shortArray0[0] = (short) (byte)0; [EOL]       equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder5.append((Object) "", (Object) ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.length()); [EOL]       assertEquals(2954, strBuilder4.length()); [EOL]       assertEquals(2954, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.length()); [EOL]       assertEquals(5782, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.length()); [EOL]       assertEquals(5800, strBuilder8.length()); [EOL]       assertEquals(5800, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder9.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder2.length()); [EOL]       assertEquals(8622, strBuilder3.length()); [EOL]       assertEquals(8622, strBuilder6.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(charArray0, 0, 116); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid length: 116 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       Calendar calendar0 = MockCalendar.getInstance(); [EOL]       Calendar calendar1 = DateUtils.round(calendar0, 9); [EOL]       Calendar calendar2 = DateUtils.truncate(calendar1, 9); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar2.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder1.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]       assertEquals(2, enumSet0.size()); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]       assertEquals(2, enumSet0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertEquals(119, strBuilder0.size()); [EOL]       assertEquals(119, strBuilder1.size()); [EOL]       assertEquals(2, enumSet0.size()); [EOL]       assertEquals(119, strBuilder2.size()); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendNewLine(); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1); [EOL]       assertEquals(102, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(102, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher(); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0); [EOL]       assertEquals(102, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(102, strBuilder3.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]       assertEquals(102, strBuilder5.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.contains('n'); [EOL]       assertEquals('%', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetEnvironmentsByOwnerId() throws Exception [EOL] { [EOL] Set<Environment> environments = environmentManager.getEnvironmentsByOwnerId( TestHelper.USER_ID ); [EOL] [EOL] assertTrue( environments.contains( environment ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripStart("XF", "5i;(d$6_s%^;sG2`"); [EOL]        [EOL]       String string1 = StringUtils.defaultString("5i;(d$6_s%^;sG2`");(d$6_s%^;sG2`", string1); [EOL]        [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = 1790L; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[2] = 0L; [EOL]       longArray0[3] = 996L; [EOL]       longArray0[4] = (-3436L); [EOL]       longArray0[5] = (-955L); [EOL]       longArray0[6] = (-1154L); [EOL]       String string2 = StringUtils.join(longArray0, 'y', Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]       assertEquals(7, longArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.setValue(525L); [EOL]       float float0 = mutableLong0.floatValue(); [EOL]       assertEquals(525.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testUpdateNonExisting() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] itemVersionManagerImpl.update(context, itemId, versionId, new ItemVersionData()); [EOL] } [EOL]
@Test [EOL] 	public void handleRoundingLineItem_shouldRoundBillsWithANonZeroAmountCorrectlyForCEILING() throws Exception { [EOL] 		CashierSettings settings = ModuleSettings.loadSettings(); [EOL] 		settings.setCashierRoundingMode(CashierOptions.RoundingMode.CEILING.toString()); [EOL] 		ModuleSettings.saveSettings(settings); [EOL] [EOL] 		settings = ModuleSettings.loadSettings(); [EOL] 		Assert.assertEquals(5, (int)settings.getCashierRoundingToNearest()); [EOL] 		Assert.assertEquals(CashierOptions.RoundingMode.CEILING.toString(), settings.getCashierRoundingMode()); [EOL] [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(3.5)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		// One line item [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		// Do rounding [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		// Now two line items [EOL] 		Assert.assertEquals(2, bill.getLineItems().size()); [EOL] 		// Assert rounding item's price [EOL] 		BillLineItem rounding = bill.getLineItems().get(1); [EOL] 		Assert.assertEquals(new BigDecimal(1.5), rounding.getTotal()); [EOL] 	} [EOL]
@Test [EOL] public void should_parse_report() { [EOL] FilePredicates fp = mock(FilePredicates.class); [EOL] [EOL] class CustomFilePredicate implements FilePredicate { [EOL] [EOL] final String fileName; [EOL] [EOL] CustomFilePredicate(String fileName) { [EOL] this.fileName = fileName; [EOL] } [EOL] [EOL] @Override [EOL] public boolean apply(InputFile inputFile) { [EOL] return true; [EOL] } [EOL] } [EOL] [EOL] when(fp.hasAbsolutePath(ArgumentMatchers.anyString())).thenAnswer(new Answer<FilePredicate>() { [EOL] @Override [EOL] public FilePredicate answer(InvocationOnMock invocation) throws Throwable { [EOL] return new CustomFilePredicate(invocation.<String>getArgument(0)); [EOL] } [EOL] }); [EOL] [EOL] FileSystem mockfileSystem = mock(FileSystem.class); [EOL] when(mockfileSystem.predicates()).thenReturn(fp); [EOL] when(mockfileSystem.hasFiles(ArgumentMatchers.nullable(FilePredicate.class))).thenReturn(true); [EOL] [EOL] Map<String, DefaultInputFile> groovyFilesByName = new HashMap<>(); [EOL] [EOL] when(mockfileSystem.inputFile(any(FilePredicate.class))).thenAnswer(new Answer<InputFile>() { [EOL] boolean firstCall = true; [EOL] [EOL] @Override [EOL] public InputFile answer(InvocationOnMock invocation) throws Throwable { [EOL] if (firstCall) { [EOL] // The first class in the test coverage.xml is a java class and the rest are groovy [EOL] firstCall = false; [EOL] return new DefaultInputFile("", "fake.java").setLanguage("java"); [EOL] } [EOL] String fileName = invocation.<CustomFilePredicate>getArgument(0).fileName; [EOL] DefaultInputFile groovyFile; [EOL] if (!groovyFilesByName.containsKey(fileName)) { [EOL] // store groovy file as default input files [EOL] groovyFile = new DefaultInputFile("", fileName).setLanguage(Groovy.KEY).setType(Type.MAIN).setLines(Integer.MAX_VALUE); [EOL] groovyFilesByName.put(fileName, groovyFile); [EOL] } [EOL] return groovyFilesByName.get(fileName); [EOL] } [EOL] }); [EOL] sensor = new CoberturaSensor(settings, mockfileSystem); [EOL] [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] sensor.execute(context); [EOL] [EOL] // random pick groovy file [EOL] String filekey = ":/Users/cpicat/myproject/grails-app/domain/AboveEighteenFilters.groovy"; [EOL] int[] lineHits = {2, 6, 7}; [EOL] int[] lineNoHits = {9, 10, 11}; [EOL] [EOL] for (int line : lineHits) { [EOL] assertThat(context.lineHits(filekey, CoverageType.UNIT, line)).isEqualTo(1); [EOL] } [EOL] for (int line : lineNoHits) { [EOL] assertThat(context.lineHits(filekey, CoverageType.UNIT, line)).isEqualTo(0); [EOL] } [EOL] [EOL] // No value for java file [EOL] assertThat(context.lineHits(":/Users/cpicat/myproject/grails-app/domain/com/test/web/EmptyResultException.java", CoverageType.UNIT, 16)).isNull(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(""); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.insert(0, false); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = ':'; [EOL]       charArray0[1] = '.'; [EOL]       charArray0[2] = 'f'; [EOL]       charArray0[3] = '#'; [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, charArray0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuilder4, 0, 326); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSortByDependencies() throws CycleDetectedException { [EOL] Map<String, PackagedModule> modules = new LinkedHashMap<>(); [EOL] [EOL] Attributes attrs = new Attributes(); [EOL] attrs.put(Constants.ATTR_NAME_JAHIA_DEPENDS, "default,moduleb"); [EOL] PackagedModule pkg = new ModulesPackage.PackagedModule("modulec", attrs, null); [EOL] modules.put(pkg.getName(), pkg); [EOL] [EOL] attrs = new Attributes(); [EOL] attrs.put(Constants.ATTR_NAME_JAHIA_DEPENDS, "default,assets"); [EOL] attrs.putValue(org.osgi.framework.Constants.IMPORT_PACKAGE, [EOL] "org.jahia.modules.external;resolution:=optional;version=\"[3.0,4)\""); [EOL] pkg = new ModulesPackage.PackagedModule("moduleb", attrs, null); [EOL] modules.put(pkg.getName(), pkg); [EOL] [EOL] attrs = new Attributes(); [EOL] attrs.put(Constants.ATTR_NAME_JAHIA_DEPENDS, "default,assets"); [EOL] attrs.putValue(org.osgi.framework.Constants.EXPORT_PACKAGE, [EOL] "org.jahia.modules.external;uses:=\"javax.jcr,javax.jcr.lock,javax.jcr.nodetype,javax.jcr.observation,javax.jcr.query,javax.jcr.query.qom," [EOL] + "javax.jcr.retention,javax.jcr.security,javax.jcr.version,org.apache.jackrabbit.spi.commons.conversion,org.jahia.exceptions," [EOL] + "org.jahia.modules.external.acl,org.jahia.services.content,org.jahia.services.content.nodetypes,org.jahia.utils.security," [EOL] + "org.springframework.beans.factory,org.xml.sax\";version=\"3.1.1\",org.jahia.modules.external.query;uses:=\"javax.jcr" [EOL] + ",javax.jcr.query,javax.jcr.query.qom,org.jahia.modules.external\";version=\"3.1.1\""); [EOL] pkg = new ModulesPackage.PackagedModule("modulea", attrs, null); [EOL] modules.put(pkg.getName(), pkg); [EOL] [EOL] ModulesPackage.sortByDependencies(modules); [EOL] [EOL] String[] keys = modules.keySet().toArray(new String[] {}); [EOL] assertEquals("modulea", keys[0]); [EOL] assertEquals("moduleb", keys[1]); [EOL] assertEquals("modulec", keys[2]); [EOL] } [EOL]
@Test [EOL] public void should_not_parse_report_if_settings_does_not_contain_report_path() { [EOL] DefaultFileSystem fileSystem = new DefaultFileSystem(new File(".")); [EOL] fileSystem.add(new DefaultInputFile("", "fake.groovy").setLanguage(Groovy.KEY)); [EOL] sensor = new CoberturaSensor(new Settings(), fileSystem); [EOL] [EOL] SensorContext context = mock(SensorContext.class); [EOL] sensor.execute(context); [EOL] [EOL] Mockito.verify(context, Mockito.never()).newCoverage(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRegisterListener() throws Exception [EOL] { [EOL] EnvironmentEventListener listener = mock( EnvironmentEventListener.class ); [EOL] [EOL] environmentManager.registerListener( listener ); [EOL] [EOL] assertTrue( environmentManager.listeners.contains( listener ) ); [EOL] } [EOL]
@Test [EOL] public void should_do_nothing_when_can_not_find_report_path() throws Exception { [EOL] [EOL] sensorContextTester.settings().setProperty(GroovyPlugin.CODENARC_REPORT_PATHS, "../missing_file.xml"); [EOL] [EOL] addFileWithFakeContent("src/org/codenarc/sample/domain/Unknown.groovy"); [EOL] [EOL] ActiveRulesBuilder activeRulesBuilder = new ActiveRulesBuilder(); [EOL] activeRulesBuilder = activateRule(activeRulesBuilder, "org.codenarc.rule.basic.EmptyClassRule", "EmptyClass"); [EOL] sensorContextTester.setActiveRules(activeRulesBuilder.build()); [EOL] [EOL] sensor.execute(sensorContextTester); [EOL] [EOL] assertThat(sensorContextTester.allIssues()).isEmpty(); [EOL] } [EOL]
@Test [EOL] public void applyBundlesPersistentStatesShouldFailInReadOnlyMode() { [EOL] verifyFailureInReadOnlyMode(() -> moduleManager.applyBundlesPersistentStates(null)); [EOL] } [EOL]
@Test [EOL] public void shouldClearAllDataOnDevice() throws Exception { [EOL] final int[] count = {0}; [EOL] mTarget.clearData(() -> count[0] = 1); [EOL] [EOL] assertThat(count[0]).isEqualTo(1); [EOL] } [EOL]
@Test [EOL] void shouldCreatePredicateGTOperatorWithDoubleType() { [EOL] Root<PetEntity> root = getPetEntityRoot(); [EOL] SqlPredicate sqlPredicate1 = new SqlPredicate("pets.owner", ">", 4.34); [EOL] [EOL] Predicate result = target.createPredicate(sqlPredicate1, root); [EOL] assertThat(result, is(notNullValue())); [EOL] } [EOL]
@Test [EOL] public void newListEmpty() throws Exception { [EOL] assertEquals(0, mList.size()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testaddContextValue()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       DefaultExceptionContext defaultExceptionContext1 = defaultExceptionContext0.addContextValue("Ex{ptio Conext:\"", "Ex{ptio Conext:\""); [EOL]       DefaultExceptionContext defaultExceptionContext2 = defaultExceptionContext0.setContextValue("Ex{ptio Conext:\"", defaultExceptionContext1); [EOL]       assertSame(defaultExceptionContext2, defaultExceptionContext1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSignKey() throws Exception [EOL] { [EOL] [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uD7C0'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testUpdate() throws Exception [EOL] { [EOL] service.update( item ); [EOL] [EOL] verifyCommit(); [EOL] [EOL] throwException(); [EOL] [EOL] service.update( item ); [EOL] [EOL] verifyRollback(); [EOL] } [EOL]
@Test [EOL] public void moduleStopShouldFailInReadOnlyMode() { [EOL] verifyFailureInReadOnlyMode(() -> moduleManager.stop("bundleKey", null)); [EOL] } [EOL]
@Test(expected = RuntimeException.class) [EOL] 	public void testCallException() { [EOL] 		JreJsonFactory jsonFactory = new JreJsonFactory(); [EOL] 		JsonArray params = jsonFactory.createArray(); [EOL] 		TestTarget target = new TestTarget(); [EOL] 		Method testMethod = Arrays [EOL] 				.stream(TestTarget.class.getDeclaredMethods()) [EOL] 				.filter(m -> "testMethodExc".equals(m.getName())).findFirst() [EOL] 				.get(); [EOL] 		MethodInvoker invoker = new MethodInvoker(target, testMethod); [EOL] 		invoker.call(params); [EOL] 	} [EOL]
@Test [EOL] public void testPut() throws Exception [EOL] { [EOL] expiringCache.put( object, object, 500 ); [EOL] } [EOL]
@Test [EOL] public void testRunWithException() throws Exception [EOL] { [EOL] Exception exception = mock( RuntimeException.class ); [EOL] doThrow( exception ).when( listener ).onMessage( message ); [EOL] [EOL] messageNotifier.run(); [EOL] [EOL] verify( exception ).printStackTrace( any( PrintStream.class ) ); [EOL] } [EOL]
@Test [EOL] public void testSETUP_P2P() throws Exception [EOL] { [EOL] workflow.SETUP_P2P(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = '4'; [EOL]       StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]       assertEquals(9, strBuilder1.size()); [EOL]       assertEquals(9, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder3.size()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder3.size()); [EOL]       assertEquals(20, strBuilder4.size()); [EOL]        [EOL]       Writer writer0 = strBuilder4.asWriter(); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder3.size()); [EOL]       assertEquals(20, strBuilder4.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder5.size()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]        [EOL]       char[] charArray1 = new char[0]; [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.trim(); [EOL]       assertEquals(19, strBuilder0.size()); [EOL]       assertEquals(19, strBuilder6.size()); [EOL]       assertEquals(19, strBuilder5.size()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder7 = strBuilder5.append(6); [EOL]       assertEquals(20, strBuilder0.size()); [EOL]       assertEquals(20, strBuilder7.size()); [EOL]       assertEquals(20, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray1, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitializeUnchecked()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0); [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0); [EOL]       ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0); [EOL]       MockError mockError0 = new MockError(":IC?TWffvYqDnT"); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn"); [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>(); [EOL]       ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       Delayed delayed0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Delayed>) concurrentSkipListMap0, (RuntimeException) null, (ConcurrentInitializer<Delayed>) null); [EOL]       assertNull(delayed0); [EOL]   } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL] public void badIndex() { [EOL] ProtobufPathParser.parse("$.foo[-1]"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(88, 0); [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       char[] charArray0 = new char[9]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = unicodeEscaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('c'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetExternalExecutor()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, executorService0); [EOL]       callableBackgroundInitializer1.isStarted(); [EOL]       Callable<Callable<Delayed>> callable2 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<Delayed>>(callable2); [EOL]       ExecutorService executorService1 = callableBackgroundInitializer2.getExternalExecutor(); [EOL]       assertNull(executorService1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testEquals() throws Exception [EOL] { [EOL] HostImpl host1 = new HostImpl( PEER_ID, hostInfo ); [EOL] [EOL] assertEquals( host1, host ); [EOL] [EOL] host1 = null; [EOL] [EOL] assertFalse( host.equals( host1 ) ); [EOL] } [EOL]
@Test [EOL] public void testGetResponse() throws Exception [EOL] { [EOL] ResponseImpl response = mock( ResponseImpl.class ); [EOL] [EOL] ResponseWrapper responseWrapper = new ResponseWrapper( response ); [EOL] [EOL] assertEquals( response, responseWrapper.getResponse() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-1)); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDoubleQuotedSingleToken() throws Exception [EOL] { [EOL] List<String> command = CommandTokeniser.tokeniseCommandLine("\"Testing 123\""); [EOL] assertThat(command.size(), is(equalTo(1))); [EOL] assertThat(command.get(0), is(equalTo("Testing 123"))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void collectionOfDerivedEntities() { [EOL] final ContextURL contextURL = ContextURLParser.parse( [EOL] URI.create("http://host/service/$metadata#Customers/Model.VipCustomer")); [EOL] [EOL] assertEquals("Customers", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertEquals("Model.VipCustomer", contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void decodeQueryString_withUrlEncoding() { [EOL] String query = "https://n.com?param1=value%201&param2=&param3=value%203&param3"; [EOL] assertEquals("value 1", XUrl.decodeQueryString(query).get("param1").get(0)); [EOL] assertEquals("", XUrl.decodeQueryString(query).get("param2").get(0)); [EOL] assertEquals("value 3", XUrl.decodeQueryString(query).get("param3").get(0)); [EOL] assertEquals("", XUrl.decodeQueryString(query).get("param3").get(1)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder4.length()); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0); [EOL]       assertEquals(31, strBuilder0.length()); [EOL]       assertEquals(31, strBuilder1.length()); [EOL]       assertEquals(31, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.clear(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder6.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder7 = strBuilder5.appendln(false); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder5.length()); [EOL]       assertEquals(6, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, ""); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder6.length()); [EOL]       assertEquals(6, strBuilder8.length()); [EOL]        [EOL]       char char0 = 'W'; [EOL]       int int3 = strBuilder0.lastIndexOf('W', 7); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter(); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder5.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void getMavenCommandNoMainServiceNormalMavenCommand() { [EOL] String result = new RunApplication(Vertx.vertx(), config).getMavenCommand(new DeployApplicationRequest("group", "artifact", "version", "classifier", "type")); [EOL] [EOL] assertThat(result, is("maven:group:artifact:version")); [EOL] } [EOL]
@Test [EOL] public void testWhatDnScopeOneEmptyDn() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnScopeOneEmptyDn" ); [EOL] [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] AclItem aclItem = parser.parse( "access to dn.one=\"\" by *" ); [EOL] assertNotNull( aclItem ); [EOL] [EOL] // Testing the 'what' clause [EOL] AclWhatClause whatClause = aclItem.getWhatClause(); [EOL] assertNotNull( whatClause ); [EOL] assertTrue( whatClause instanceof AclWhatClauseDn ); [EOL] AclWhatClauseDn whatClauseDn = (AclWhatClauseDn) whatClause; [EOL] [EOL] // test the content [EOL] assertEquals( "", whatClauseDn.getPattern() ); [EOL] assertEquals( AclWhatClauseDnTypeEnum.ONE, whatClauseDn.getType() ); [EOL] [EOL] System.out.println( "<-- ACL:" + aclItem ); [EOL] } [EOL]
@Test [EOL] public void translateQueryResponseTestWithSubSelect() throws Exception { [EOL] AbstractWitsmlObject wmlObject = WitsmlMarshal.deserializeFromJSON( [EOL] "{\"country\":\"\",\"groundElevation\":{\"datum\":null,\"uom\":null,\"value\":null},\"commonData\":{\"privateGroupOnly\":null,\"comments\":\"\",\"acquisitionTimeZone\":[],\"dTimLastChange\":null,\"extensionAny\":null,\"defaultDatum\":{\"value\":\"\",\"uidRef\":\"\"},\"itemState\":null,\"sourceName\":null,\"extensionNameValue\":[],\"serviceCategory\":null,\"dTimCreation\":null},\"county\":\"\",\"timeZone\":\"\",\"waterDepth\":{\"uom\":\"\",\"value\":null},\"numAPI\":\"\",\"operator\":\"\",\"pcInterest\":{\"uom\":\"\",\"value\":null},\"referencePoint\":[{\"elevation\":{\"datum\":\"\",\"uom\":null,\"value\":null},\"uid\":\"\",\"measuredDepth\":{\"datum\":\"\",\"uom\":null,\"value\":null},\"name\":\"\",\"location\":[{\"uid\":\"\",\"easting\":{\"uom\":\"\",\"value\":null},\"wellCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"latitude\":{\"uom\":\"\",\"value\":null},\"localY\":{\"uom\":\"\",\"value\":null},\"description\":\"\",\"localX\":{\"uom\":\"\",\"value\":null},\"extensionNameValue\":[],\"northing\":{\"uom\":\"\",\"value\":null},\"longitude\":{\"uom\":\"\",\"value\":null}}],\"type\":\"\",\"extensionNameValue\":[]}],\"wellLocation\":[{\"uid\":\"\",\"easting\":{\"uom\":\"\",\"value\":null},\"wellCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"description\":\"\",\"extensionNameValue\":[],\"northing\":{\"uom\":\"\",\"value\":null}}],\"uid\":\"randy\",\"wellheadElevation\":{\"datum\":null,\"uom\":null,\"value\":null},\"field\":\"\",\"wellCRS\":[{\"uid\":\"\",\"localCRS\":{\"yAxisAzimuth\":{\"uom\":\"\",\"northDirection\":null,\"value\":null}},\"mapProjectionCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"geodeticCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"name\":\"\",\"description\":\"\",\"extensionNameValue\":[]}],\"nameLegal\":\"\",\"district\":\"\",\"numGovt\":\"\",\"block\":\"\",\"state\":\"\",\"region\":\"\",\"operatorDiv\":\"\",\"wellDatum\":[{\"elevation\":{\"datum\":\"\",\"uom\":null,\"value\":null},\"uid\":\"\",\"datumName\":{\"namingSystem\":\"\",\"code\":\"\",\"value\":\"\"},\"kind\":[],\"name\":\"\",\"extensionNameValue\":[]}]}", [EOL] com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell.class); [EOL] [EOL] String responseString = "{\"country\":\"US\",\"dTimLicense\":\"2001-05-15T13:20:00+00:00\",\"numLicense\":\"Company License Number\",\"county\":\"Montgomery\",\"waterDepth\":{\"uom\":\"ft\",\"value\":520},\"operator\":\"Operating Company\",\"pcInterest\":{\"uom\":\"%\",\"value\":65},\"dTimPa\":\"2001-07-15T15:30:00+00:00\",\"uid\":\"randy\",\"nameLegal\":\"Company Legal Name\",\"block\":\"Block Name\",\"state\":\"TX\",\"operatorDiv\":\"Division Name\",\"groundElevation\":{\"uom\":\"FT\",\"value\":250},\"commonData\":{\"comments\":\"These are the comments associated with the Well data object.\",\"dTimLastChange\":\"2019-01-30T14:09:27.268843+00:00\",\"acquisitionTimeZone\":[],\"defaultDatum\":{\"value\":\"Kelly Bushing\",\"uidRef\":\"KB\"},\"itemState\":\"PLAN\",\"extensionNameValue\":[],\"dTimCreation\":\"2019-01-24T16:59:38.88059+00:00\"},\"timeZone\":\"-06:00\",\"statusWell\":\"DRILLING\",\"purposeWell\":\"EXPLORATION\",\"numAPI\":\"123-543-987AZ\",\"referencePoint\":[{\"uid\":\"SRP1\",\"name\":\"Slot Bay Centre\",\"location\":[{\"uid\":\"loc-1\",\"easting\":{\"uom\":\"m\",\"value\":425366.47},\"wellCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"proj1\"},\"extensionNameValue\":[],\"northing\":{\"uom\":\"m\",\"value\":6623781.95}},{\"uid\":\"loc-2\",\"wellCRS\":{\"value\":\"WellOneWSP\",\"uidRef\":\"localWell1\"},\"localY\":{\"uom\":\"m\",\"value\":-3.74},\"description\":\"Location of the Site Reference Point with respect to the well surface point\",\"localX\":{\"uom\":\"m\",\"value\":12.63},\"extensionNameValue\":[]}],\"type\":\"Site Reference Point\",\"extensionNameValue\":[]},{\"elevation\":{\"datum\":\"SL\",\"uom\":\"FT\",\"value\":-118.4},\"uid\":\"WRP2\",\"measuredDepth\":{\"datum\":\"KB\",\"uom\":\"FT\",\"value\":173.09},\"name\":\"Sea Bed\",\"location\":[{\"uid\":\"loc-1\",\"easting\":{\"uom\":\"m\",\"value\":425353.84},\"wellCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"proj1\"},\"extensionNameValue\":[],\"northing\":{\"uom\":\"m\",\"value\":6623785.69}},{\"uid\":\"loc-2\",\"wellCRS\":{\"value\":\"ED50\",\"uidRef\":\"geog1\"},\"latitude\":{\"uom\":\"dega\",\"value\":59.743844},\"extensionNameValue\":[],\"longitude\":{\"uom\":\"dega\",\"value\":1.67198083}}],\"type\":\"Well Reference Point\",\"extensionNameValue\":[]}],\"wellLocation\":[{\"uid\":\"loc-1\",\"easting\":{\"uom\":\"m\",\"value\":425353.84},\"wellCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"proj1\"},\"description\":\"Location of well surface point in projected system.\",\"extensionNameValue\":[],\"northing\":{\"uom\":\"m\",\"value\":6623785.69}}],\"wellheadElevation\":{\"uom\":\"FT\",\"value\":500},\"field\":\"Big Field\",\"dTimSpud\":\"2001-05-31T08:15:00+00:00\",\"wellCRS\":[{\"uid\":\"geog1\",\"geodeticCRS\":{\"value\":\"4230\",\"uidRef\":\"4230\"},\"name\":\"ED50\",\"description\":\"ED50 system with EPSG code 4230.\",\"extensionNameValue\":[]},{\"uid\":\"proj1\",\"mapProjectionCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"23031\"},\"name\":\"ED50 \\/ UTM Zone 31N\",\"extensionNameValue\":[]},{\"uid\":\"localWell1\",\"localCRS\":{\"usesWellAsOrigin\":true,\"xRotationCounterClockwise\":false,\"yAxisAzimuth\":{\"uom\":\"dega\",\"northDirection\":\"GRID_NORTH\",\"value\":0}},\"name\":\"WellOneWSP\",\"extensionNameValue\":[]}],\"district\":\"District Name\",\"name\":\"6507\\/7-A-42\",\"numGovt\":\"Govt-Number\",\"region\":\"Region Name\",\"wellDatum\":[{\"elevation\":{\"datum\":\"SL\",\"uom\":\"FT\",\"value\":78.5},\"uid\":\"KB\",\"code\":\"KB\",\"kind\":[],\"name\":\"Kelly Bushing\",\"extensionNameValue\":[]},{\"uid\":\"SL\",\"code\":\"SL\",\"datumName\":{\"namingSystem\":\"EPSG\",\"code\":\"5106\",\"value\":\"Caspian Sea\"},\"kind\":[],\"name\":\"Sea Level\",\"extensionNameValue\":[]}]}"; [EOL] [EOL] Map<String, String> optionsIn = new HashMap<>(); [EOL] optionsIn.put("returnElements", "requested"); [EOL] [EOL] // get query response [EOL] AbstractWitsmlObject abstractWitsmlObject = DotTranslator.translateQueryResponse(wmlObject, responseString, optionsIn); [EOL] [EOL] assertTrue(abstractWitsmlObject instanceof com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell); [EOL] [EOL] com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell objWell = (com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell) abstractWitsmlObject; [EOL] [EOL] assertEquals(null, objWell.getNumLicense()); [EOL] } [EOL]
@Test [EOL] public void testParseOneOfAnonServicePool() [EOL] { [EOL] VirtualCheckOperator op = VirtualCheckExpressionParser.parseVirtualCheckExpression("one of services in pool 'test' as WARNING"); [EOL] assertThat(op.toString(), is(equalTo("one of services in pool 'test' as WARNING"))); [EOL] assertThat(op.computePoolDependencies(null), is(equalTo(new HashSet<String>(Arrays.asList("test"))))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('f'); [EOL]       assertEquals(4, booleanArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('A'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(114, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(114, strBuilder1.length()); [EOL]       assertEquals(114, strBuilder2.length()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       Buffer buffer0 = charBuffer0.flip(); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(comparator0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendWithSeparators((Iterable<?>) treeSet0, "hZ3CNnc|]e"); [EOL]       assertEquals(117, strBuilder4.length()); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder5.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder6.length()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder7.length()); [EOL]       assertEquals(2, charArray1.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 121, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string0)); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]       assertFalse(string7.equals((Object)string0)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string6)); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]       assertFalse(string8.equals((Object)string7)); [EOL]       assertTrue(string8.equals((Object)string3)); [EOL]       assertFalse(string8.equals((Object)string2)); [EOL]       assertFalse(string8.equals((Object)string5)); [EOL]       assertFalse(string8.equals((Object)string6)); [EOL]       assertFalse(string8.equals((Object)string0)); [EOL]       assertFalse(string8.equals((Object)string1)); [EOL]       assertFalse(string8.equals((Object)string4)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("Threshold must not be negative", ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFa", "s", ".ti')kKzb5J(cbBlh"); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDispose() throws Exception [EOL] { [EOL] resourceHostEntity.init(); [EOL] resourceHostEntity.dispose(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName("["); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString(34, (-1)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[2] = 'L'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '`'; [EOL]       charArray0[5] = '^'; [EOL]       charArray0[6] = 'V'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.getChars(3889, 0, charArray0, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldSaveErrorsAndFailuresInXML() throws URISyntaxException { [EOL] [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] context.fileSystem() [EOL] .add(inputFile("org.sonar.core.ExtensionsFinderTest")) [EOL] .add(inputFile("org.sonar.core.ExtensionsFinderTest2")) [EOL] .add(inputFile("org.sonar.core.ExtensionsFinderTest3")); [EOL] [EOL] surefireSensor.collect(context, new File(getClass().getResource( [EOL] "/org/sonar/plugins/groovy/surefire/SurefireSensorTest/shouldSaveErrorsAndFailuresInXML/").toURI())); [EOL] [EOL] // 1 classes, 6 measures by class [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.core.ExtensionsFinderTest", CoreMetrics.TESTS).value()).isEqualTo(7); [EOL] assertThat(context.measures(":org.sonar.core.ExtensionsFinderTest")).hasSize(6); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testatLeast()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.JAVA_1_3; [EOL]       boolean boolean0 = javaVersion0.atLeast(javaVersion0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.left("F*ih6'Wv@Hv&-.Ni:q", (-2178)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", "F*ih6'Wv@Hv&-.Ni:q"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, ""); [EOL]        [EOL]       String string1 = StringUtils.stripStart("", (String) null); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.countMatches((CharSequence) null, ""); [EOL]        [EOL]       String string2 = StringUtils.stripToNull(""); [EOL]        [EOL]       String string3 = StringUtils.defaultString("", (String) null); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void valueToString() throws Exception { [EOL] Calendar dateTime = Calendar.getInstance(); [EOL] dateTime.clear(); [EOL] setTimeZone(dateTime, "GMT+11:30"); [EOL] dateTime.set(1, 2, 3, 4, 5, 6); [EOL] assertEquals("04:05:06", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] [EOL] dateTime.add(Calendar.MILLISECOND, 42); [EOL] assertEquals("04:05:06.042", instance.valueToString(dateTime, null, null, null, null, null)); [EOL] assertEquals("04:05:06.042", instance.valueToString(dateTime, null, null, 3, null, null)); [EOL] assertEquals("04:05:06.042", instance.valueToString(dateTime, null, null, 4, null, null)); [EOL] [EOL] Calendar dateTime2 = Calendar.getInstance(); [EOL] dateTime2.clear(); [EOL] setTimeZone(dateTime, TimeZone.getDefault()); [EOL] dateTime2.set(Calendar.HOUR, 5); [EOL] dateTime2.set(Calendar.MINUTE, 59); [EOL] dateTime2.set(Calendar.SECOND, 23); [EOL] [EOL] final java.sql.Time time = new java.sql.Time(dateTime2.getTimeInMillis()); [EOL] assertEquals("05:59:23", instance.valueToString(time, null, null, null, null, null)); [EOL] [EOL] assertEquals("05:59:23", instance.valueToString(dateTime2.getTimeInMillis(), null, null, null, null, null)); [EOL] [EOL] // Timestamp timestamp = new Timestamp(0); [EOL] // timestamp.setNanos(42); [EOL] [EOL] expectTypeErrorInValueToString(instance, 0); [EOL] } [EOL]
@Test [EOL] public void testMultiQuotedTokens() throws Exception [EOL] { [EOL] List<String> command = CommandTokeniser.tokeniseCommandLine("\"Here\" 'is' some 'quoted' \"tokens\" to parse"); [EOL] assertThat(command.size(), is(equalTo(7))); [EOL] assertThat(command.get(0), is(equalTo("Here"))); [EOL] assertThat(command.get(1), is(equalTo("is"))); [EOL] assertThat(command.get(2), is(equalTo("some"))); [EOL] assertThat(command.get(3), is(equalTo("quoted"))); [EOL] assertThat(command.get(4), is(equalTo("tokens"))); [EOL] assertThat(command.get(5), is(equalTo("to"))); [EOL] assertThat(command.get(6), is(equalTo("parse"))); [EOL] } [EOL]
@Test [EOL] void shouldReturnNullIfQueryIsNotSetInfPartialRequestConfig() { [EOL] final HttpServletRequest mockHttpServletRequest = mock(HttpServletRequest.class); [EOL] when(mockHttpServletRequest.getMethod()).thenReturn(GET); [EOL] when(mockHttpServletRequest.getServletPath()).thenReturn(PATH); [EOL] DefaultPartialRequest target = new DefaultPartialRequest(mockHttpServletRequest, new PartialRequestConfig()); [EOL] [EOL] PartialRequest result = target.getDefaultPartialRequest(); [EOL] [EOL] assertThat(result, is(nullValue())); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 0, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string1 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       char char0 = 'R'; [EOL]       String string2 = StringUtils.center("JL_O}", 0, 'R'); [EOL]        [EOL]       String string3 = StringUtils.center((String) null, 0, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       char char1 = '}'; [EOL]       String string4 = StringUtils.rightPad((String) null, 2185, '}'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2185); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL]       assertTrue(stack0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stack0.listIterator((-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // Index: -1 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       String string0 = DateFormatUtils.formatUTC(0L, "."); [EOL]       assertEquals(".", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append('a', '7'); [EOL]       compareToBuilder1.append(true, true); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2382); [EOL]       MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, ""); [EOL]       Integer integer1 = new Integer(41); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, ""); [EOL]       int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexToInt("", 0, 0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void serializerFixedFormat() throws DeserializerException { [EOL] assertNotNull(odata.createFixedFormatSerializer()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       char char0 = 'Q'; [EOL]       Integer integer0 = new Integer((-3878)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) integer0, (-3878), 'H'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       charArray0[0] = 'Q'; [EOL]       int int0 = 5; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-3878), charArray0, (-3878), 5); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -3878 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setSummaryObjectEndText(""); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void emptyInlineEntityOlingo540() throws Exception { [EOL] final String content = "" + [EOL] "<entry xmlns=\"http://www.w3.org/2005/Atom\" " [EOL] + "xmlns:data=\"http://docs.oasis-open.org/odata/ns/data\" " [EOL] + "xmlns:metadata=\"http://docs.oasis-open.org/odata/ns/metadata\" " [EOL] + "xmlns:georss=\"http://www.georss.org/georss\" xmlns:gml=\"http://www.opengis.net/gml\" " [EOL] + "xml:base=\"http://services.odata.org/V3/OData/OData.svc/\">\r\n" + [EOL] " <id>http://services.odata.org/V3/OData/OData.svc/Products(3)</id>\r\n" + [EOL] " <category term=\"ODataDemo.Product\" " [EOL] + "scheme=\"http://docs.oasis-open.org/odata/ns/scheme\" />\r\n" + [EOL] " \r\n" + [EOL] " <link rel=\"edit\" title=\"Product\" href=\"Products\" />\r\n" + [EOL] " <link rel=\"http://docs.oasis-open.org/odata/ns/related/Categories\" " [EOL] + "type=\"application/atom+xml;type=feed\" title=\"Categories\" href=\"Products(3)/Categories\" />\r\n" + [EOL] " <link rel=\"http://docs.oasis-open.org/odata/ns/related/Supplier\" " [EOL] + "type=\"application/atom+xml;type=entry\" title=\"Supplier\" href=\"Products(3)/Supplier\">\r\n" + [EOL] " <metadata:inline>\r\n" + [EOL] " </metadata:inline>\r\n" + [EOL] " </link>\r\n" + [EOL] " <link rel=\"http://docs.oasis-open.org/odata/ns/related/ProductDetail\"" [EOL] + " type=\"application/atom+xml;type=entry\" title=\"ProductDetail\" " [EOL] + "href=\"Products(3)/ProductDetail\" />\r\n" + [EOL] " <title type=\"text\">Havina Cola</title>\r\n" + [EOL] " <summary type=\"text\">The Original Key Lime Cola</summary>\r\n" + [EOL] " <updated>2015-01-26T08:57:02Z</updated>\r\n" + [EOL] " <author>\r\n" + [EOL] " <name />\r\n" + [EOL] " </author>\r\n" + [EOL] " <link rel=\"http://docs.oasis-open.org/odata/ns/relatedlinks/Categories\" " [EOL] + "type=\"application/xml\" title=\"Categories\" href=\"Products(3)/$links/Categories\" />\r\n" + [EOL] " <link rel=\"http://docs.oasis-open.org/odata/ns/relatedlinks/Supplier\" " [EOL] + "type=\"application/xml\" title=\"Supplier\" href=\"Products(3)/$links/Supplier\" />\r\n" + [EOL] " <link rel=\"http://docs.oasis-open.org/odata/ns/relatedlinks/ProductDetail\"" [EOL] + " type=\"application/xml\" title=\"ProductDetail\" href=\"Products(3)/$links/ProductDetail\" />\r\n" + [EOL] " <content type=\"application/xml\">\r\n" + [EOL] " <metadata:properties>\r\n" + [EOL] " <data:ID metadata:type=\"Edm.Int32\">3</data:ID>\r\n" + [EOL] " <data:ReleaseDate metadata:type=\"Edm.DateTime\">2005-10-01T00:00:00</data:ReleaseDate>\r\n" + [EOL] " <data:DiscontinuedDate metadata:type=\"Edm.DateTime\">2006-10-01T00:00:00</data:DiscontinuedDate>\r\n" + [EOL] " <data:Rating metadata:type=\"Edm.Int16\">3</data:Rating>\r\n" + [EOL] " <data:Price metadata:type=\"Edm.Double\">19.9</data:Price>\r\n" + [EOL] " </metadata:properties>\r\n" + [EOL] " </content>\r\n" + [EOL] " </entry>"; [EOL] [EOL] final AtomDeserializer deserializer = new AtomDeserializer(); [EOL] final InputStream in = new ByteArrayInputStream(content.getBytes("UTF-8")); [EOL] final ResWrap<Entity> entity = deserializer.toEntity(in); [EOL] [EOL] assertNotNull(entity); [EOL] assertNull(entity.getPayload().getNavigationLink("Supplier").getInlineEntitySet()); [EOL] } [EOL]
@Test [EOL] public void testPurgeExpiredMessages() throws Exception [EOL] { [EOL] messengerDataService.purgeExpiredMessages(); [EOL] [EOL] verify( messageDao ).purgeMessages(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("nFgu8hR=<", strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetEntityManagerFromFactory() throws Exception [EOL] { [EOL] daoManager.getEntityManagerFromFactory(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(' ', (-2561)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test( expected = EnvironmentCreationException.class ) [EOL] public void testExecute() throws Exception [EOL] { [EOL] doReturn( true ).when( step ).processResponse( any( CreateEnvironmentContainersResponse.class ), anyString() ); [EOL] [EOL] step.execute(); [EOL] [EOL] verify( PEER_UTIL ).addPeerTask( any( PeerUtil.PeerTask.class ) ); [EOL] [EOL] doReturn( false ).when( step ).processResponse( any( CreateEnvironmentContainersResponse.class ), anyString() ); [EOL] [EOL] step.execute(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testVisitElementWithoutSubs() throws Exception { [EOL] SessionContext context = TestUtils.createSessionContext(USER, "test"); [EOL] ElementContext elementContext = new ElementContext(new Id(), new Id()); [EOL] Space space = Space.PRIVATE; [EOL] CoreElement element = new CoreElement(); [EOL] [EOL] visitor.visit(context, elementContext, space, element); [EOL] [EOL] verify(elementCommandFactoryMock).executeCommand(context, elementContext, space, element); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/'); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2"); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) (-1)); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]       assertEquals(2, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.ensureCapacity((-1)); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]       assertEquals(2, strBuilder3.length()); [EOL]       assertEquals(2, strBuilder4.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));yKvV#~sM4D<2")); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertEquals(2, strBuilder5.length()); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder6.length()); [EOL]       assertEquals(2, charArray1.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void extendedClass() { [EOL] binderUnderTest.bind(TestUtils.FUNCTION_TYPE, new ChildClass()); [EOL] [EOL] assertThat(state.boundNames, hasItems("parent", "child")); [EOL] } [EOL]
@Test [EOL] public void testRun() throws Exception [EOL] { [EOL] [EOL] messageNotifier.run(); [EOL] [EOL] verify( listener ).onMessage( message ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[4]; [EOL]       char char0 = '\\'; [EOL]       char[] charArray0 = ArrayUtils.toPrimitive(characterArray0, char0); [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, '\\', 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testFunctions() { [EOL] StatefulFunctionModule module = fromPath("bar-module/module.yaml"); [EOL] [EOL] StatefulFunctionsUniverse universe = emptyUniverse(); [EOL] module.configure(Collections.emptyMap(), universe); [EOL] [EOL] assertThat( [EOL] universe.functions(), [EOL] allOf( [EOL] hasKey(new FunctionType("com.example", "hello")), [EOL] hasKey(new FunctionType("com.foo", "world")))); [EOL] } [EOL]
@Test [EOL] void shouldReturnMongoDbQuery() { [EOL] opa.datafilter.core.ast.db.query.model.request.PartialRequest opaPartialRequest = new opa.datafilter.core.ast.db.query.model.request.PartialRequest(); [EOL] BasicQuery query = new BasicQuery("{ age : { $lt : 50 }, balance : { $gt : 1000.00 }}"); [EOL] when(mongoQueryService.getMongoDBQuery(opaPartialRequest)).thenReturn(query); [EOL] [EOL] QueryResponse result = target.getMongoDbQuery(new PartialRequest()); [EOL] [EOL] assertThat(result, is(notNullValue())); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterable<?>) null, (String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('L'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterable<?>) null, ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("r8T0ER3M!z7l6zL5!"); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((double) 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder4.build(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.deleteFirst((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "os.arch"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals(strBuilder4); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string1 = strBuilder1.getNullText(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendSeparator(", Length: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.insert(0, false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'L'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'L'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.append(charArray0, 1898, 1898); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 1898 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.stripToEmpty((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart("", "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank("", "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing("", (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator(string4, (String) null, (-1)); [EOL]       assertEquals(8, stringArray1.length); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference("", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, ""); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[0] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertEquals(8, shortArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(6); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1)); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]       assertEquals(0, strBuilder3.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder("v@1?:{"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // dstOffset -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@SuppressWarnings("unchecked") [EOL] @Test [EOL] void shouldGetData() { [EOL] final List<HistoryTrendItem> history = randomHistoryTrendItems(); [EOL] final List<HistoryTrendItem> data = HistoryTrendPlugin.getData(createSingleLaunchResults( [EOL] singletonMap(HISTORY_TREND_BLOCK_NAME, history), [EOL] randomTestResult().setStatus(Status.PASSED), [EOL] randomTestResult().setStatus(Status.FAILED), [EOL] randomTestResult().setStatus(Status.FAILED) [EOL] )); [EOL] [EOL] assertThat(data) [EOL] .hasSize(1 + history.size()) [EOL] .extracting(HistoryTrendItem::getStatistic) [EOL] .extracting(Statistic::getTotal, Statistic::getFailed, Statistic::getPassed) [EOL] .first() [EOL] .isEqualTo(Tuple.tuple(3L, 2L, 1L)); [EOL] [EOL] final List<HistoryTrendItem> next = data.subList(1, data.size()); [EOL] [EOL] assertThat(next) [EOL] .containsExactlyElementsOf(history); [EOL] [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhandleCause()  throws Throwable  { [EOL]       ExecutionException executionException0 = new ExecutionException((Throwable) null); [EOL]       MockPrintStream mockPrintStream0 = new MockPrintStream("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder"); [EOL]       executionException0.printStackTrace((PrintStream) mockPrintStream0); [EOL]       ConcurrentUtils.handleCauseUnchecked(executionException0); [EOL]       assertNull(executionException0.getMessage()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(8); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(strBuilder0); [EOL]       assertEquals("", stringBuilder0.toString()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0); [EOL]       assertEquals("", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuilder1.toString()); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.insert(0, 3482.0); [EOL]       assertEquals("3482.0", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("3482.0", stringBuilder1.toString()); [EOL]       assertEquals("3482.0", stringBuilder2.toString()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.append(5L); [EOL]       assertEquals("3482.05", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("3482.05", stringBuilder1.toString()); [EOL]       assertEquals("3482.05", stringBuilder2.toString()); [EOL]       assertEquals("3482.05", stringBuilder3.toString()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder3); [EOL]       assertEquals("3482.05", stringBuilder0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("3482.05", stringBuilder1.toString()); [EOL]       assertEquals("3482.05", stringBuilder2.toString()); [EOL]       assertEquals("3482.05", stringBuilder3.toString()); [EOL]        [EOL]       int int0 = strBuilder0.size(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('j', 'y'); [EOL]       boolean boolean0 = charRange0.contains('j'); [EOL]       assertEquals('j', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[0]; [EOL]       Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0); [EOL]       assertNotSame(byteArray1, byteArray0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void parse() { [EOL] assertEquals(ContentType.APPLICATION_OCTET_STREAM, ContentType.parse("application/octet-stream")); [EOL] [EOL] assertNull(ContentType.parse("a")); [EOL] assertNull(ContentType.parse("a/b;c")); [EOL] assertNull(ContentType.parse("a/b;c=")); [EOL] assertNull(ContentType.parse("a/b;c= ")); [EOL] } [EOL]
@Test [EOL] 	public void testSplitPath() { [EOL] 		String[][] samples = { [EOL] 				// input path, expected path part outputs [EOL] 				{"path/to/file", "path", "to", "file"}, [EOL] 				{"/path/to/file", "", "path", "to", "file"}, [EOL] 				{"path/to/file/", "path", "to", "file"}, [EOL] 				{"/path/to/file/", "", "path", "to", "file"}, [EOL] 				 [EOL] 				{"/", ""}, [EOL] 				{"//", "", ""}, [EOL] 				{"", ""}, [EOL] 		}; [EOL] 		for (String[] sample : samples) { [EOL] 			List<String> expected = new ArrayList<String> (); [EOL] 			for (int i = 1; i < sample.length; i++) [EOL] 				expected.add(sample[i]); [EOL] 			List<String> actual = Util.splitPath(sample[0]); [EOL] 			if (expected.size() != 0 && actual.size() != 0) [EOL] 				assertEquals(expected, actual); [EOL] 		} [EOL] 	} [EOL]
@Test [EOL] public void search() throws Exception { [EOL] [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(""); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null); [EOL]       assertFalse(strTokenizer1.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void dateTimeOffset() { [EOL] assertTrue(new UriTokenizer("1234-12-25T11:12:13.456Z").next(TokenKind.DateTimeOffsetValue)); [EOL] assertTrue(new UriTokenizer("-1234-12-25t01:12z").next(TokenKind.DateTimeOffsetValue)); [EOL] assertTrue(new UriTokenizer("-1234-12-25T21:22:23+01:00").next(TokenKind.DateTimeOffsetValue)); [EOL] assertTrue(new UriTokenizer("1234-12-25T11:12:13-00:30").next(TokenKind.DateTimeOffsetValue)); [EOL] assertFalse(new UriTokenizer("1234-10-01").next(TokenKind.DateTimeOffsetValue)); [EOL] wrongToken(TokenKind.DateTimeOffsetValue, "-1234-12-25T11:12:13.456+01:00", 'P'); [EOL] } [EOL]
@Test [EOL] public void boundaryParameter() throws Exception { [EOL] final String boundary = "boundary"; [EOL] final String contentType = MULTIPART_MIXED + "; boundary=" + boundary + " "; [EOL] Assert.assertEquals(boundary, BatchParserCommon.getBoundary(contentType, 0)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       strBuilder0.size = (-914); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendSeparator('\"', 'p'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSetQuota() throws Exception [EOL] { [EOL] environmentContainer.setQuota( QUOTA ); [EOL] [EOL] verify( peer ).setQuota( environmentContainer.getContainerId(), QUOTA ); [EOL] } [EOL]
@Test [EOL] public void checkSupport() throws Exception { [EOL] ContentNegotiator.checkSupport(ContentType.JSON, null, RepresentationType.ENTITY); [EOL] ContentNegotiator.checkSupport(ContentType.TEXT_PLAIN, null, RepresentationType.VALUE); [EOL] try { [EOL] ContentNegotiator.checkSupport(ContentType.APPLICATION_SVG_XML, null, RepresentationType.ENTITY); [EOL] fail("Exception expected."); [EOL] } catch (final ContentNegotiatorException e) { [EOL] assertEquals(ContentNegotiatorException.MessageKeys.UNSUPPORTED_CONTENT_TYPE, e.getMessageKey()); [EOL] } [EOL] [EOL] ContentNegotiator.checkSupport(ContentType.create("a/b"), createCustomContentTypeSupport("a/b"), [EOL] RepresentationType.ENTITY); [EOL] ContentNegotiator.checkSupport(ContentType.create(ContentType.create("a/b"), "c", "d"), [EOL] createCustomContentTypeSupport("a/b"), [EOL] RepresentationType.ENTITY); [EOL] try { [EOL] ContentNegotiator.checkSupport(ContentType.create("a/b"), createCustomContentTypeSupport("a/b;c=d"), [EOL] RepresentationType.ENTITY); [EOL] fail("Exception expected."); [EOL] } catch (final ContentNegotiatorException e) { [EOL] assertEquals(ContentNegotiatorException.MessageKeys.UNSUPPORTED_CONTENT_TYPE, e.getMessageKey()); [EOL] } [EOL] } [EOL]
@Test [EOL] public void testFINALIZE() throws Exception [EOL] { [EOL] workflow.FINALIZE(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool(); [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames(); [EOL]       assertTrue(set0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDoExecute() throws Exception [EOL] { [EOL] //test execution [EOL] [EOL] command.doExecute(); [EOL] [EOL] verify( commandExecutor ) [EOL] .executeAsync( any( String.class ), any( RequestBuilder.class ), isA( CommandCallback.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char0 = 'j'; [EOL]       Iterable<Object> iterable0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.="); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('j', 815); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char char1 = '8'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int1 = 516; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(516, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 516 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test( expected = CommandException.class ) [EOL] public void testExecuteException() throws Exception [EOL] { [EOL] when( host.execute( any( RequestBuilder.class ) ) ).thenReturn( commandResult ); [EOL] when( commandResult.hasSucceeded() ).thenReturn( false ); [EOL] [EOL] commandUtil.execute( requestBuilder, host ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertEquals(7, strBuilder0.length()); [EOL]       assertEquals(7, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertEquals(13, strBuilder0.length()); [EOL]       assertEquals(13, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]       assertEquals(65, strBuilder3.length()); [EOL]       assertEquals(65, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.clear(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]       assertEquals(0, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteAll('#'); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder3.length()); [EOL]       assertEquals(0, strBuilder4.length()); [EOL]       assertEquals(0, strBuilder6.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder8.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExecuteAsync() throws Exception [EOL] { [EOL] host.executeAsync( requestBuilder ); [EOL] [EOL] verify( peer ).executeAsync( requestBuilder, host, null ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldWork() throws IOException { [EOL] [EOL] Category category = new Category() [EOL] .setName(CATEGORY_NAME) [EOL] .setMessageRegex(".*") [EOL] .setMatchedStatuses(singletonList(Status.BROKEN)); [EOL] [EOL] Map<String, Object> meta = new HashMap<>(); [EOL] meta.put("categories", singletonList(category)); [EOL] [EOL] List<LaunchResults> launchResultsList = createSingleLaunchResults( [EOL] meta, createTestResult("asd\n", Status.BROKEN) [EOL] ); [EOL] [EOL] CategoriesPlugin plugin = new CategoriesPlugin(); [EOL] [EOL] plugin.aggregate(configuration, launchResultsList, reportPath); [EOL] [EOL] Set<TestResult> results = launchResultsList.get(0).getAllResults(); [EOL] List<Category> categories = results.toArray(new TestResult[]{})[0] [EOL] .getExtraBlock("categories"); [EOL] [EOL] assertThat(categories).as("test categories") [EOL] .extracting(Category::getName) [EOL] .containsExactly(category.getName()); [EOL] [EOL] assertThat(reportPath.resolve("data").resolve(JSON_FILE_NAME)) [EOL] .exists(); [EOL] [EOL] assertThat(reportPath.resolve("data").resolve(CSV_FILE_NAME)) [EOL] .exists(); [EOL] } [EOL]
@Test [EOL] public void testStringToArrayNoAttrs() [EOL] { [EOL] String[] attributes = ReturningAttributesWidget.stringToArray( "1.1" ); [EOL] assertNotNull( attributes ); [EOL] assertArrayEquals( new String[] [EOL] { "1.1" }, attributes ); [EOL] } [EOL]
@Test [EOL] public void testGetCurrentMetricCommand() throws Exception [EOL] { [EOL] assertEquals( new RequestBuilder( "subutai info system" ), commands.getRhMetricCommand() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       charArray0[0] = '3'; [EOL]       StrBuilder strBuilder2 = strBuilder0.append(3986.49F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(""); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder2.codePoints(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.appendln(stringBuffer0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(5305); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln('3'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-2104)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.appendln(""); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test( expected = MessageException.class ) [EOL] public void testSendMessage() throws Exception [EOL] { [EOL] messenger.sendMessage( localPeer, message, RECIPIENT, TIME_TO_LIVE, HEADERS ); [EOL] [EOL] verify( messengerDataService ).saveEnvelope( isA( Envelope.class ) ); [EOL] [EOL] doThrow( new RuntimeException() ).when( messengerDataService ).saveEnvelope( any( Envelope.class ) ); [EOL] [EOL] messenger.sendMessage( localPeer, message, RECIPIENT, TIME_TO_LIVE, HEADERS ); [EOL] } [EOL]
@Test [EOL] public void getResumeMarker() { [EOL] Id dbId = new Id("idp:a:angrybirds", "core_get_resume_marker"); [EOL] try { [EOL] Database db = Service.database(dbId); [EOL] db.create(anyDbPermissions()); [EOL] BatchDatabase batchDb = db.beginBatch(null); [EOL] byte[] marker = batchDb.getResumeMarker(); [EOL] assertNotNull(marker); [EOL] assertTrue(marker.length > 0); [EOL] } catch (VError vError) { [EOL] vError.printStackTrace(); [EOL] fail(vError.toString()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)0); [EOL]       mutableShort0.increment(); [EOL]       short short0 = mutableShort0.shortValue(); [EOL]       assertEquals(1.0, mutableShort0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("%.uP-XC6m9"); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder0); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertEquals(21, strBuilder0.size()); [EOL]       assertEquals(21, strBuilder1.size()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void entity() { [EOL] ContextURL contextURL = ContextURLParser.parse(URI.create("http://host/service/$metadata#Customers/$entity")); [EOL] [EOL] assertEquals("Customers", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertTrue(contextURL.isEntity()); [EOL] [EOL] contextURL = ContextURLParser.parse(URI.create("http://host/service/$metadata#Orders(4711)/Items/$entity")); [EOL] [EOL] assertEquals("Orders/Items", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertTrue(contextURL.isEntity()); [EOL] [EOL] contextURL = ContextURLParser.parse( [EOL] URI.create("http://host/service/$metadata#Users('user')/Messages('message')/Attachments/$entity")); [EOL] [EOL] assertEquals("Users/Messages/Attachments", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertTrue(contextURL.isEntity()); [EOL] [EOL] // v3 [EOL] contextURL = ContextURLParser.parse(URI.create("http://host/service/$metadata#Products/@Element")); [EOL] [EOL] assertEquals("Products", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertTrue(contextURL.isEntity()); [EOL] } [EOL]
@Test [EOL] public void fromStringFailure() { [EOL] mThrown.expect(java.lang.IllegalArgumentException.class); [EOL] mThrown.expectMessage("For input string: \"pizza\""); [EOL] Id id = Id.fromString("pizza"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>(); [EOL]       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", ""); [EOL]       ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0); [EOL]       MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair1 = MutablePair.of(abstractMap_SimpleImmutableEntry0, immutablePair0); [EOL]       int int0 = mutablePair0.compareTo((Pair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>) mutablePair1); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testOnHeadersRead_fullRequestGoodPath() { [EOL] testHandler = new Http2Handler(mockEncoder, MAX_PAYLOAD, NO_CORS); [EOL] [EOL] headers.method("GET").path(OK_PATH); [EOL] [EOL] // Call with endOfStream set to true. [EOL] testHandler.onHeadersRead(mockContext, STREAM_ID, headers, 1, true); [EOL] [EOL] assertEquals(1L, requestMeter.getCount()); [EOL] // Verify an OK response. [EOL] verifyResponse(HttpResponseStatus.OK, ImmutableMap.of(), Optional.empty(), STREAM_ID); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = "\\p{InCombiningDiacriticalMarks}+"; [EOL]       Locale locale0 = Locale.TAIWAN; [EOL]        [EOL]       String string1 = locale0.getDisplayName(); [EOL]        [EOL]       String string2 = StringUtils.lowerCase("p{InCombiningDiacriticalMarks}+", locale0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL]       assertFalse(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       boolean boolean0 = stack0.add((Object) "p{InCombiningDiacriticalMarks}+"); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       Iterator<Object> iterator0 = stack0.iterator(); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       char char0 = '>'; [EOL]       String string3 = StringUtils.join(iterator0, '>'); [EOL]       assertFalse(stack0.contains('>')); [EOL]       assertTrue(stack0.contains("p{InCombiningDiacriticalMarks}+")); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) '>'; [EOL]       intArray0[1] = 2777; [EOL]       intArray0[2] = (int) '>'; [EOL]       intArray0[3] = (-1572); [EOL]       intArray0[4] = (int) '>'; [EOL]       intArray0[5] = (int) '>'; [EOL]       intArray0[6] = (int) '>'; [EOL]       intArray0[7] = (int) '>'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '>', (-1572), 62); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1572 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testOnCancellation() throws Exception [EOL] { [EOL] workflow.onCancellation(); [EOL] [EOL] verify( trackerOperation ).addLogFailed( anyString() ); [EOL] } [EOL]
@Test [EOL] public void testCLONE_CONTAINERS() throws Exception [EOL] { [EOL] workflow.CLONE_CONTAINERS(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setUseIdentityHashCode(false); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void roundingInAdjustedBill_shouldNotAddRoundingLineItemIfRoundingDifferenceIsZero() throws Exception { [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(5)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 	} [EOL]
@Test [EOL] public void testOnCancellation() throws Exception [EOL] { [EOL] workflow.onCancellation(); [EOL] [EOL] verify( trackerOperation ).addLogFailed( anyString() ); [EOL] } [EOL]
@Test [EOL] public void shouldDeleteTrajectory() throws Exception { [EOL] // build object [EOL] ObjTrajectory traj = new ObjTrajectory(); [EOL] traj.setUid("traj-a"); [EOL] traj.setUidWellbore("wellbore-a"); [EOL] traj.setUidWell("well-a"); [EOL] [EOL] // build http request [EOL] String endpoint = this.url + this.trajectoryPath + traj.getUid(); [EOL] HttpRequest req = Unirest.delete(endpoint); [EOL] req.header("Content-Type", "application/json"); [EOL] req.queryString("uidWellbore", traj.getUidWellbore()); [EOL] req.queryString("uidWell", traj.getUidWell()); [EOL] [EOL] // build http response mock [EOL] HttpResponse<String> resp = mock(HttpResponse.class); [EOL] when(resp.getStatus()).thenReturn(204); [EOL] [EOL] // mock mockClient behavior [EOL] when(this.mockClient.makeRequest(argThat(someReq -> ( [EOL] someReq.getHttpMethod().name().equals(req.getHttpMethod().name()) && [EOL] someReq.getUrl().equals(req.getUrl()) && [EOL] someReq.getHeaders().containsKey("Content-Type") [EOL] )), eq("goodUsername"), eq("goodPassword"), anyString())).thenReturn(resp); [EOL] [EOL] // test [EOL] this.delegator.deleteObject(traj, "goodUsername", "goodPassword", "exchangeID", this.mockClient); [EOL] [EOL] // verify [EOL] verify(this.mockClient).makeRequest(argThat(someReq -> ( [EOL] someReq.getHttpMethod().name().equals(req.getHttpMethod().name()) && [EOL] someReq.getUrl().equals(req.getUrl()) && [EOL] someReq.getHeaders().containsKey("Content-Type") [EOL] )), eq("goodUsername"), eq("goodPassword"), anyString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisDigits()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isDigits((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.trim(); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void integer() { [EOL] assertTrue(new UriTokenizer("1").next(TokenKind.IntegerValue)); [EOL] assertTrue(new UriTokenizer("1.").next(TokenKind.IntegerValue)); [EOL] assertFalse(new UriTokenizer(".1").next(TokenKind.IntegerValue)); [EOL] assertTrue(new UriTokenizer("-1").next(TokenKind.IntegerValue)); [EOL] assertTrue(new UriTokenizer("1234567890").next(TokenKind.IntegerValue)); [EOL] } [EOL]
@Test [EOL] void shouldGetSqlQueryStatementsFromPartialRequests() { [EOL] String result = target.getSqlQueryStatements(partialRequest); [EOL] assertThat(result, is("SELECT * FROM pets WHERE (pets.owner = 'alice' AND pets.name = 'fluffy') OR (pets.veterinarian = 'alice' AND pets.clinic = 'SOMA' AND pets.name = 'fluffy');")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsetMonths()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-947), (-947), 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 0); [EOL]       Date date1 = DateUtils.setMonths(date0, 1); [EOL]       assertEquals("Mon Jan 01 00:00:00 GMT 4", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-297.21217)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testDefaultDecoderForNul() { [EOL] assertSame(jsonDecoder, decoders.decoder(null)); [EOL] } [EOL]
@Test [EOL] public void testGetState() throws Exception [EOL] { [EOL] doReturn( CONTAINER_HOST_STATE ).when( peer ).getContainerState( any( ContainerId.class ) ); [EOL] [EOL] assertEquals( CONTAINER_HOST_STATE, containerHostEntity.getState() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence charSequence0 = null; [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, 0, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&,1fs'G.F7", 0); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '!'; [EOL]       charArray0[1] = '8'; [EOL]       charArray0[2] = '9'; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = ';'; [EOL]       charArray0[5] = 'B'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);', 'B'}, charArray0); [EOL]        [EOL]       String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("&,1fs'G.F7"); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "&,1fs'G.F7"); [EOL]        [EOL]       String string2 = StringUtils.substring("", 0); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.repeat("&,1fs'G.F7", 2138); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithIgnoreCase("&,1fs'G.F7", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.trim(""); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertTrue(string4.equals((Object)string2)); [EOL]        [EOL]       String string5 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", 0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldGetOpaCompileApiResponse() { [EOL] when(restTemplate.postForEntity(anyString(), any(HttpEntity.class), eq(OpaCompilerResponse.class))) [EOL] .thenReturn(new ResponseEntity<>(opaCompilerResponse, HttpStatus.OK)); [EOL] PartialRequest partialRequest = PartialRequest.builder() [EOL] .query("data.petclinic.authz.allow = true") [EOL] .unknowns(Set.of("data.pets")).build(); [EOL] [EOL] [EOL] OpaCompilerResponse result = target.getOpaCompilerApiResponse(partialRequest); [EOL] [EOL] assertThat(result, is(notNullValue())); [EOL] } [EOL]
@Test [EOL] @SneakyThrows [EOL] public void testConsumeReturnsLinesCorrectly() { [EOL] when(bufferedReaderMock.readLine()).thenReturn("aaa", "bbb", "ccc", null); [EOL] [EOL] final Flux<String> result = bufferedReaderAdapter.consume().apply(bufferedReaderMock); [EOL] [EOL] StepVerifier.create(result) [EOL] .consumeNextWith(a -> assertThat(a, is("aaa"))) [EOL] .consumeNextWith(a -> assertThat(a, is("bbb"))) [EOL] .consumeNextWith(a -> assertThat(a, is("ccc"))) [EOL] .verifyComplete(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getSimpleName((Object) null, (String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = 517; [EOL]       StrBuilder strBuilder0 = new StrBuilder(517); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append('S'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(object0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assertEquals(29, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((long) 517); [EOL]       assertEquals(32, strBuilder0.size()); [EOL]       assertEquals(32, strBuilder2.size()); [EOL]       assertEquals(32, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(84, strBuilder0.size()); [EOL]       assertEquals(84, strBuilder2.size()); [EOL]       assertEquals(84, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceFirst("G1", "G1"); [EOL]       assertEquals(84, strBuilder0.size()); [EOL]       assertEquals(84, strBuilder5.size()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.append((long) 517); [EOL]       assertEquals(87, strBuilder0.size()); [EOL]       assertEquals(87, strBuilder5.size()); [EOL]       assertEquals(87, strBuilder6.size()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendSeparator("v5a", 517); [EOL]       assertEquals(91, strBuilder0.size()); [EOL]       assertEquals(91, strBuilder7.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('S'); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.replaceFirst(strMatcher0, ""); [EOL]       assertEquals(90, strBuilder0.size()); [EOL]       assertEquals(90, strBuilder7.size()); [EOL]       assertEquals(90, strBuilder8.size()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder1.appendln("v5a"); [EOL]       assertEquals(95, strBuilder0.size()); [EOL]       assertEquals(95, strBuilder1.size()); [EOL]       assertEquals(95, strBuilder9.size()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadRight(517, 517, 'o'); [EOL]       assertEquals(612, strBuilder0.size()); [EOL]       assertEquals(612, strBuilder1.size()); [EOL]       assertEquals(612, strBuilder10.size()); [EOL]        [EOL]       int int1 = 2001; [EOL]       boolean boolean0 = true; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder9.append((CharSequence) strBuilder1, 517, 1738); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testToString() throws Exception [EOL] { [EOL] assertThat( host.toString(), containsString( PEER_ID ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy"); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(955, 955).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "8BSsazZjZ<nSFi28~ ", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isEndedBy("pKzJ'CmBAFa}&8mMy"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testEmptyValuesDiffer() [EOL] { [EOL] int less = comparator.compare( cn_empty_1, cn_bar ); [EOL] assertTrue( less < 0 ); [EOL] int greater = comparator.compare( cn_bar, cn_empty_1 ); [EOL] assertTrue( greater > 0 ); [EOL] assertEquals( 0, less + greater ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('e'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, "F"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('#'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(598L); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.reverse(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'K'; [EOL]       charArray0[3] = 'e'; [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) null); [EOL]        [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = 'e'; [EOL]       charArray0[6] = 'e'; [EOL]       charArray0[7] = 'e'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int2 = 1354; [EOL]       strBuilder_StrBuilderReader0.mark(1354); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testPut1() throws Exception [EOL] { [EOL] expiringCache.put( object, object, 500, entryExpiryCallback ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("`<j[.Hj#z$ak.1\"Rd", strMatcher0); [EOL]       strTokenizer0.getQuoteMatcher(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testMerge() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] mockExistingVersion(Space.PRIVATE, itemId, versionId); [EOL] [EOL] Id sourceVersionId = new Id(); [EOL] mockExistingVersion(Space.PRIVATE, itemId, sourceVersionId); [EOL] [EOL] CoreMergeResult retrievedMergeResult = new CoreMergeResult(); [EOL] CoreMergeChange change = createMergeChange(sourceVersionId, false); [EOL] retrievedMergeResult.setChange(change); [EOL] doReturn(new Response<>(retrievedMergeResult)) [EOL] .when(collaborationAdaptorMock) [EOL] .mergeItemVersion(context, itemId, versionId, sourceVersionId); [EOL] [EOL] mockItemVersionChangeSave(Space.PRIVATE, itemId, sourceVersionId, false, change); [EOL] [EOL] CoreMergeResult result = [EOL] itemVersionManagerImpl.merge(context, itemId, versionId, sourceVersionId); [EOL] [EOL] Assert.assertEquals(result, retrievedMergeResult); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction((-1), (-1)); [EOL]       Fraction fraction1 = Fraction.ONE_QUARTER; [EOL]       boolean boolean0 = fraction0.equals(fraction1); [EOL]       assertFalse(fraction1.equals((Object)fraction0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(")l(BL"); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'M'; [EOL]       charArray0[3] = 'I'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_CharSetMatcher0, (String) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(expectedExceptions = ZusammenException.class) [EOL] public void testCreateBasedOnNonExisting() { [EOL] Id itemId = new Id(); [EOL] Id baseVersionId = new Id(); [EOL] mockNonExistingVersion(Space.PRIVATE, itemId, baseVersionId); [EOL] itemVersionManagerImpl.create(context, itemId, baseVersionId, new ItemVersionData()); [EOL] } [EOL]
@Test [EOL] public void getPermissions() { [EOL] VersionedPermissions versionedPermissions1 = Service.GetPermissions(); [EOL] assertNotNull(versionedPermissions1); [EOL] assertTrue(versionedPermissions1.version.length() > 0); [EOL] String json = new String(versionedPermissions1.permissions.json); [EOL] assertTrue(json.contains("Admin")); [EOL] [EOL] try { [EOL] Service.SetPermissions(versionedPermissions1); [EOL] VersionedPermissions versionedPermissions2 = Service.GetPermissions(); [EOL] assertEquals("1", versionedPermissions2.version); [EOL] assertEquals(json, new String(versionedPermissions2.permissions.json)); [EOL] } catch (VError vError) { [EOL] vError.printStackTrace(); [EOL] fail(vError.toString()); [EOL] } [EOL] } [EOL]
@Test(expected = APIException.class) [EOL] 	public void save_shouldThrowAPIExceptionIfReceiptNumberCannotBeGenerated() throws Exception { [EOL] 		Bill bill = createEntity(true); [EOL] 		bill.setReceiptNumber(null); [EOL] [EOL] 		when(receiptNumberGenerator.generateNumber(bill)) [EOL] 		 .thenThrow(new APIException("Test exception")); [EOL] [EOL] 		service.save(bill); [EOL] 	} [EOL]
@Test [EOL] public void testPingHost() [EOL] { [EOL] registry.pingHost( HOST_IP ); [EOL] [EOL] verify( webClient ).get(); [EOL] [EOL] doReturn( Response.Status.OK.getStatusCode() ).when( response ).getStatus(); [EOL] [EOL] assertTrue( registry.pingHost( HOST_IP ) ); [EOL] [EOL] doReturn( Response.Status.SERVICE_UNAVAILABLE.getStatusCode() ).when( response ).getStatus(); [EOL] [EOL] assertFalse( registry.pingHost( HOST_IP ) ); [EOL] [EOL] doThrow( new RuntimeException() ).when( webClient ).get(); [EOL] [EOL] assertFalse( registry.pingHost( HOST_IP ) ); [EOL] } [EOL]
@Test [EOL] public void shouldExportProfile() throws Exception { [EOL] Rule rule = Rule.create(CodeNarcRulesDefinition.REPOSITORY_KEY, "org.codenarc.rule.basic.AddEmptyStringRule", "Add Empty String"); [EOL] profile.activateRule(rule, RulePriority.MAJOR); [EOL] rule = Rule.create(CodeNarcRulesDefinition.REPOSITORY_KEY, "org.codenarc.rule.size.ClassSizeRule", "Class Size"); [EOL] profile.activateRule(rule, RulePriority.MAJOR); [EOL] exporter.exportProfile(profile); [EOL] [EOL] assertSimilarXml( [EOL] TestUtils.getResource("/org/sonar/plugins/groovy/codenarc/exportProfile/exportProfile.xml"), [EOL] writer.toString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("", "s/eB&ED@mIB"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.rightPad("", 0); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void roundingInAdjustedBill_shouldAddRoundingLineItemIfRoundingDifferenceIsNotZero() throws Exception { [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(7)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(2, bill.getLineItems().size()); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3163); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(""); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3417.2957F)); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder2.capacity()); [EOL]        [EOL]       int int0 = strBuilder2.indexOf("3+r3jcbdAXt1x", 3163); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator('s'); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder3.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 's'; [EOL]       charArray0[1] = 'H'; [EOL]       ArrayList<StrBuilder> arrayList0 = new ArrayList<StrBuilder>(); [EOL]        [EOL]       ArrayList<Object> arrayList1 = new ArrayList<Object>(arrayList0); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList1.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendAll((Iterator<?>) listIterator0); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder4.capacity()); [EOL]        [EOL]       charArray0[2] = 's'; [EOL]       charArray0[3] = 's'; [EOL]       charArray0[4] = 's'; [EOL]       charArray0[5] = 's'; [EOL]       charArray0[6] = 's'; [EOL]       StrBuilder strBuilder5 = strBuilder1.append(charArray0); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder5.capacity()); [EOL]       assertEquals(3163, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln("aHPcrO", 5, 0); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder5, 0, 's'); [EOL]       assertEquals(3163, strBuilder0.capacity()); [EOL]       assertEquals(3163, strBuilder5.capacity()); [EOL]       assertEquals(3163, strBuilder1.capacity()); [EOL]       assertEquals(3163, strBuilder7.capacity()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append(stringBuffer0, 3062, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup.MapStrLookup<String> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<String>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0, "6", "6", '<'); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("6"); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(stringBuffer0, 1, 0); [EOL]       assertEquals('<', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("", "p!,").when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldPartialEvaluationException() { [EOL] ResponseEntity<QueryResponse> result = target.handlePartialEvaluationException(new PartialEvauationException("partialEvaluationExceptio")); [EOL] [EOL] assertThat(result, is(notNullValue())); [EOL] assertThat(result.getStatusCodeValue(), is(500)); [EOL] } [EOL]
@Test [EOL] public void testDerivedPathExp() throws Exception { [EOL] final String derivedEntitySetName = "ESName"; [EOL] final String keyPropertyName = "a"; [EOL] final String propertyName = "navProp"; [EOL] EdmProperty keyProperty = mockProperty(keyPropertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] EdmKeyPropertyRef keyPropertyRef = mockKeyPropertyRef(keyPropertyName, keyProperty); [EOL] [EOL] EdmEntityType navEntityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(navEntityType.getFullQualifiedName()).thenReturn(new FullQualifiedName("test.navET")); [EOL] Mockito.when(navEntityType.getNamespace()).thenReturn("test"); [EOL] Mockito.when(navEntityType.getPropertyNames()).thenReturn( [EOL] Arrays.asList(keyPropertyName)); [EOL] Mockito.when(navEntityType.getProperty(keyPropertyName)).thenReturn(keyProperty); [EOL] [EOL] EdmEntityType baseEntityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(baseEntityType.getFullQualifiedName()).thenReturn(new FullQualifiedName("test.baseET")); [EOL] Mockito.when(baseEntityType.getNamespace()).thenReturn("test"); [EOL] Mockito.when(baseEntityType.getPropertyNames()).thenReturn( [EOL] Arrays.asList(keyPropertyName)); [EOL] Mockito.when(baseEntityType.getProperty(keyPropertyName)).thenReturn(keyProperty); [EOL] [EOL] Mockito.when(navEntityType.getBaseType()).thenReturn(baseEntityType); [EOL] Mockito.when(baseEntityType.compatibleTo(navEntityType)).thenReturn(true); [EOL] [EOL] EdmEntityType entityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(entityType.getFullQualifiedName()).thenReturn(new FullQualifiedName("test.derivedET")); [EOL] Mockito.when(entityType.getNamespace()).thenReturn("test"); [EOL] Mockito.when(entityType.getPropertyNames()).thenReturn(Arrays.asList(keyPropertyName, propertyName)); [EOL] EdmNavigationProperty navProperty = mockNavigationProperty(propertyName, navEntityType); [EOL] Mockito.when(entityType.getProperty(propertyName)).thenReturn(navProperty); [EOL] [EOL] EdmEntitySet entitySet = mockEntitySet(derivedEntitySetName, entityType); [EOL] EdmEntityContainer container = mockContainer(derivedEntitySetName, entitySet); [EOL] Edm mockedEdm = Mockito.mock(Edm.class); [EOL] Mockito.when(mockedEdm.getEntityContainer()).thenReturn(container); [EOL] Mockito.when(mockedEdm.getEntityType(new FullQualifiedName("test.baseET"))).thenReturn(baseEntityType); [EOL] [EOL] UriTokenizer tokenizer = new UriTokenizer("navProp/test.baseET"); [EOL] Expression expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("[navProp]", expression.toString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-4569442781688233984L), (-4569442781688233984L)); [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte)125; [EOL]       byteArray0[1] = (byte)1; [EOL]       byteArray0[2] = (byte) (-38); [EOL]       byteArray0[3] = (byte)107; [EOL]       byteArray0[4] = (byte) (-72); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0); [EOL]       long[] longArray0 = new long[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0); [EOL]       assertTrue(equalsBuilder3.build()); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) (byte)107; [EOL]       intArray0[1] = (int) (byte) (-38); [EOL]       intArray0[2] = (int) (byte) (-72); [EOL]       intArray0[3] = (int) (byte)1; [EOL]       intArray0[4] = (int) (byte)107; [EOL]       intArray0[5] = (int) (byte) (-38); [EOL]       intArray0[6] = (int) (byte) (-38); [EOL]       intArray0[7] = (int) (byte)125; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, (int[]) null); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) 107; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0); [EOL]       equalsBuilder5.append(objectArray0, objectArray0); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void exampleUsage() { [EOL] Message originalMessage = SimpleMessage.newBuilder().setName("bob").build(); [EOL] DynamicMessage message = dynamic(originalMessage); [EOL] [EOL] TemplateEvaluator evaluator = [EOL] new TemplateEvaluator( [EOL] originalMessage.getDescriptorForType(), [EOL] fragments(staticFragment("foo.bar/"), dynamicFragment("$.name"))); [EOL] [EOL] assertThat(evaluator.evaluate(message), is("foo.bar/bob")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("kfk"); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotTrue()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.isNotTrue((Boolean) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testSaveTrackerOperation() throws Exception [EOL] { [EOL] tracker.saveTrackerOperation( SOURCE, productOperation ); [EOL] [EOL] verify( dataService ).saveTrackerOperation( SOURCE, productOperation, identityManager.getActiveUser().getId() ); [EOL] } [EOL]
@Test( expected = ParseException.class ) [EOL] public void testWhatDnStar() throws Exception [EOL] { [EOL] System.out.println( "\n--> testWhatDnStar" ); [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] parser.parse( "access to dn=* by *" ); [EOL] [EOL] fail(); [EOL] } [EOL]
@Test(expectedExceptions = ZusammenException.class/*, [EOL] expectedExceptionsMessageRegExp = ITEM_NOT_EXIST*/) [EOL] public void testUpdateNonExisting() { [EOL] Id itemId = new Id(); [EOL] Info info = new Info(); [EOL] [EOL] doReturn(new Response<>(false)).when(stateAdaptorMock).isItemExist(context, itemId); [EOL] [EOL] doReturn(new Response<>(Void.TYPE)).when(stateAdaptorMock) [EOL] .updateItem(eq(context), eq(itemId), eq(info), any(Date.class)); [EOL] doReturn(new Response<>(Void.TYPE)).when(collaborationAdaptorMock).updateItem(context, itemId, info); [EOL] [EOL] itemManagerImpl.update(context, itemId, info); [EOL] } [EOL]
@Test [EOL] void shouldConvertSqlPredicateGreaterThanOperatorToMongoDbCriteria() { [EOL] SqlPredicate sqlPredicate1 = new SqlPredicate("pets.owner", ">", 4L); [EOL] [EOL] Criteria result = target.initialCriteria(sqlPredicate1); [EOL] String resultInString = result.getCriteriaObject().toJson(); [EOL] [EOL] assertThat(resultInString, is("{\"owner\": {\"$gt\": {\"$numberLong\": \"4\"}}}")); [EOL] } [EOL]
@Test [EOL] public void should_parse() throws Exception { [EOL] [EOL] ActiveRulesBuilder activeRulesBuilder = new ActiveRulesBuilder(); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "BooleanInstantiation"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "DuplicateImport"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyCatchBlock"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyElseBlock"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyFinallyBlock"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyForStatement"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyIfStatement"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyTryBlock"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "EmptyWhileStatement"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "ImportFromSamePackage"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "ReturnFromFinallyBlock"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "StringInstantiation"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "ThrowExceptionFromFinallyBlock"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "UnnecessaryGroovyImport"); [EOL] activeRulesBuilder = activateFakeRule(activeRulesBuilder, "UnusedImport"); [EOL] sensorContextTester.setActiveRules(activeRulesBuilder.build()); [EOL] [EOL] File reportUpdated = getReportWithUpdatedSourceDir(); [EOL] sensorContextTester.settings().setProperty(GroovyPlugin.CODENARC_REPORT_PATHS, reportUpdated.getAbsolutePath()); [EOL] [EOL] addFileWithFakeContent("src/org/codenarc/sample/domain/SampleDomain.groovy"); [EOL] addFileWithFakeContent("src/org/codenarc/sample/service/NewService.groovy"); [EOL] addFileWithFakeContent("src/org/codenarc/sample/service/OtherService.groovy"); [EOL] addFileWithFakeContent("src/org/codenarc/sample/service/SampleService.groovy"); [EOL] [EOL] sensor.execute(sensorContextTester); [EOL] [EOL] assertThat(sensorContextTester.allIssues()).hasSize(17); [EOL] } [EOL]
@Test [EOL] public void testExtensions() { [EOL] assertThat(JaCoCoExtensions.getExtensions().size()).isEqualTo(7); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between(object0, object0, comparator0); [EOL]       boolean boolean0 = range0.equals((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testNewContext() { [EOL] final UUID id = UUID.randomUUID(); [EOL] final byte[] content = {0, 1, 2, 3}; [EOL] final DocumentArchivingContext documentArchivingContext = DocumentArchivingContext.builder() [EOL] .id(id) [EOL] .content(content) [EOL] .contentLength(4) [EOL] .source("unknown") [EOL] .type(DocumentType.PDF) [EOL] .versionNumber(123) [EOL] .build(); [EOL] when(checksumProvider.checksum(content)) [EOL] .thenReturn(Mono.just("textchecksum")); [EOL] when(compressionConfigurationProperties.getAlgorithm()) [EOL] .thenReturn(DocumentCompression.GZIP); [EOL] [EOL] final Mono<DocumentCreationContext> result = underTest.newContext(documentArchivingContext); [EOL] [EOL] StepVerifier.create(result) [EOL] .consumeNextWith(documentCreationContext -> { [EOL] assertThat(documentCreationContext.getId(), is(id)); [EOL] assertThat(documentCreationContext.getFileSize(), is(4L)); [EOL] assertThat(documentCreationContext.getSource(), is("unknown")); [EOL] assertThat(documentCreationContext.getType(), is(DocumentType.PDF)); [EOL] assertThat(documentCreationContext.getChecksum(), is("textchecksum")); [EOL] assertThat(documentCreationContext.getVersionNumber(), is(123)); [EOL] assertThat(documentCreationContext.getCompression(), is(DocumentCompression.GZIP)); [EOL] assertThat(documentCreationContext.getStatus(), is(DocumentStatus.DOWNLOADED)); [EOL] }) [EOL] .verifyComplete(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testidentityToString()  throws Throwable  { [EOL]       String string0 = ObjectUtils.identityToString((Object) ""); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetContainerInfoByHostname() throws Exception [EOL] { [EOL] ContainerHostInfo existingHost = registry.getContainerHostInfoByHostname( CONTAINER_HOSTNAME ); [EOL] assertNotNull( existingHost ); [EOL] [EOL] try [EOL] { [EOL] registry.getContainerHostInfoByHostname( DUMMY_HOSTNAME ); [EOL] fail( "Expected HostDisconnectedException" ); [EOL] } [EOL] catch ( HostDisconnectedException e ) [EOL] { [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void getOptions_shouldNotThrowExceptionIfNumericOptionsAreNull() throws Exception { [EOL] 		when(adminService.getGlobalProperty(ModuleSettings.RECEIPT_REPORT_ID_PROPERTY)) [EOL] 		 .thenReturn(null); [EOL] 		when(adminService.getGlobalProperty(ModuleSettings.ROUNDING_MODE_PROPERTY)) [EOL] 		 .thenReturn(null); [EOL] 		when(adminService.getGlobalProperty(ModuleSettings.ROUND_TO_NEAREST_PROPERTY)) [EOL] 		 .thenReturn(null); [EOL] 		when(adminService.getGlobalProperty(ModuleSettings.ROUNDING_ITEM_ID)) [EOL] 		 .thenReturn(null); [EOL] 		when(adminService.getGlobalProperty(ModuleSettings.TIMESHEET_REQUIRED_PROPERTY)) [EOL] 		 .thenReturn(null); [EOL] [EOL] 		CashierOptions options = optionsService.getOptions(); [EOL] [EOL] 		Assert.assertNotNull(options); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[8]; [EOL]       Float float0 = new Float((-1444.746F)); [EOL]       floatArray0[0] = float0; [EOL]       float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (-1484.0985F)); [EOL]       assertArrayEquals(new float[] {(-1444.746F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F), (-1484.0985F)}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder((String) null); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'i'; [EOL]       charArray0[1] = '~'; [EOL]       charArray0[2] = 'i'; [EOL]       charArray0[3] = 'i'; [EOL]       charArray0[4] = 'i'; [EOL]       charArray0[5] = 'i'; [EOL]       charArray0[6] = 'i'; [EOL]       charArray0[7] = 'i'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 0, 'i'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((double) 0); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int0 = strBuilder4.lastIndexOf('l', 103); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendAll((Iterable<?>) null); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendSeparator((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldWorkWithLanguageName() { [EOL] Dictionary<String, String> headers = new Hashtable<>(2); [EOL] headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, "groovy,js,lang"); [EOL] headers.put("color", "black"); [EOL] [EOL] assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) arrayList0, '5'); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.mid("", 955, 3); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       String string2 = StringUtils.upperCase(""); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       String string3 = StringUtils.removeStartIgnoreCase("\r", ""); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "\r"; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]); [EOL]       assertEquals("", charBuffer0.toString()); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) charBuffer0; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]); [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = (long) 3; [EOL]       longArray0[1] = 2587L; [EOL]       longArray0[2] = (long) 3; [EOL]       longArray0[3] = (long) 955; [EOL]       longArray0[4] = (long) 955; [EOL]       longArray0[5] = (long) 3; [EOL]       longArray0[6] = (-1L); [EOL]       String string4 = StringUtils.join(longArray0, '5', 8192, (-1515)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string5 = StringUtils.chomp("\"N;ix%MK");ix%MK", string5); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) "\"N;ix%MK"; [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) 8192; [EOL]       floatArray0[1] = (float) 3L; [EOL]       String string6 = StringUtils.join(floatArray0, 'L', 32, 16); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectStartText(); [EOL]       assertEquals("<", string0); [EOL]   } [EOL]  [EOL]
@Test(expected=DeserializerException.class) [EOL] public void deserializer1() throws DeserializerException { [EOL] List<String> versions = new ArrayList<String>(); [EOL] versions.add("4.01"); [EOL] odata.createDeserializer(null, null, versions); [EOL] } [EOL]
@Test [EOL] public void testGetLastHeartbeat() throws Exception [EOL] { [EOL] assertTrue( host.getLastHeartbeat() == 0 ); [EOL] } [EOL]
@Test [EOL] 	public void shouldSucceedAuthenticate() throws Exception { [EOL] 		// mock behavior [EOL] 		when(this.mockClient.getJWT(eq("goodUsername"), eq("goodPassword"), anyString())) [EOL] 			.thenReturn(JWT.decode( // using dummy token string from https://jwt.io/ [EOL] 				"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiR29vZCBUb2tlbiJ9.II4bNgtahHhV4jl7dgGn8CGjVxZWwBMZht-4LXeqB_Y" [EOL] 			) [EOL] 		); [EOL] [EOL] 		// test [EOL] 		this.valve.authenticate("goodUsername", "goodPassword"); [EOL] [EOL] 		// verify [EOL] 		verify(this.mockClient).getJWT(eq("goodUsername"), eq("goodPassword"), anyString()); [EOL] 		verifyNoMoreInteractions(this.mockClient); [EOL] 	} [EOL]
@Test [EOL] public void getReadMe() throws Exception { [EOL] TestSubscriber<ReadMe> subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.getReadMe("TellH", "GitClub").subscribe(subscriber); [EOL] ReadMe readMe = subscriber.getOnNextEvents().get(0); [EOL] assertNotNull(readMe); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void roundingInAdjustedBill_shouldDeleteRoundingLineItemIfRoundingDifferenceIsZero() throws Exception { [EOL] 		// Test bill [EOL] 		Bill bill = new Bill(); [EOL] 		BillLineItem item = new BillLineItem(); [EOL] 		Item lineItemItem = new Item(1); [EOL] 		item.setItem(lineItemItem); [EOL] 		item.setLineItemOrder(0); [EOL] 		item.setPrice(new BigDecimal(7)); [EOL] 		item.setQuantity(1); [EOL] 		bill.addLineItem(item); [EOL] [EOL] 		Assert.assertEquals(1, bill.getLineItems().size()); [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(2, bill.getLineItems().size()); [EOL] [EOL] 		BillLineItem item2 = new BillLineItem(); [EOL] 		item2.setItem(lineItemItem); [EOL] 		item2.setLineItemOrder(0); [EOL] 		item2.setPrice(new BigDecimal(3)); [EOL] 		item2.setQuantity(1); [EOL] 		bill.addLineItem(item2); [EOL] [EOL] 		RoundingUtil.handleRoundingLineItem(bill); [EOL] 		Assert.assertEquals(2, bill.getLineItems().size()); [EOL] [EOL] 		CashierOptions cashierOptions = cashOptService.getOptions(); [EOL] 		IItemDataService itemService = Context.getService(IItemDataService.class); [EOL] 		Item roundingItem = itemService.getByUuid(cashierOptions.getRoundingItemUuid()); [EOL] [EOL] 		boolean containsRoundingItem = false; [EOL] 		for (BillLineItem lineItem : bill.getLineItems()) { [EOL] 			if (roundingItem.equals(lineItem.getItem())) { [EOL] 				containsRoundingItem = true; [EOL] 			} [EOL] 		} [EOL] [EOL] 		Assert.assertEquals(false, containsRoundingItem); [EOL] 	} [EOL]
@Test [EOL] public void testNamingJoin() { [EOL] assertEquals("a/b/c", Util.NamingJoin(Arrays.asList("a", "b", "c"))); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testImpliedWhatStarWithAccess() throws Exception [EOL] { [EOL] System.out.println( "\n--> testImpliedWhatStarWithAccess" ); [EOL] // Create parser [EOL] OpenLdapAclParser parser = new OpenLdapAclParser(); [EOL] [EOL] // Testing the ACL item [EOL] AclItem aclItem = parser.parse( "access to by *" ); [EOL] assertNotNull( aclItem ); [EOL] [EOL] // Testing the 'what' clause [EOL] AclWhatClause whatClause = aclItem.getWhatClause(); [EOL] assertNotNull( whatClause ); [EOL] assertTrue( whatClause instanceof AclWhatClauseStar ); [EOL] [EOL] System.out.println( "<-- ACL:" + aclItem ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("lg?3caGG41[$\"tg!|"); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendDetail(stringBuffer0, (String) null, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, (String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(0.0); [EOL]       assertEquals(4, strBuilder0.size()); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]       assertEquals(4, strBuilder2.size()); [EOL]        [EOL]       int int0 = 556; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.substring(821, 556); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>(); [EOL]       mutableTriple0.setLeft("wo?ME"); [EOL]       MutableTriple<Object, Object, Object> mutableTriple1 = new MutableTriple<Object, Object, Object>(); [EOL]       Integer integer0 = new Integer((-3184)); [EOL]       ImmutableTriple<Integer, Object, String> immutableTriple0 = ImmutableTriple.of(integer0, (Object) null, "wo?ME"); [EOL]       ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>>("wo?ME", immutableTriple0, mutableTriple1); [EOL]       boolean boolean0 = immutableTriple1.equals(mutableTriple0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseFieldNames(false); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]       assertEquals(5644, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(11654, strBuilder7.capacity()); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder8.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder9.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder2.capacity()); [EOL]       assertEquals(11654, strBuilder3.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder4.capacity()); [EOL]       assertEquals(11654, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL] public void noPrefix() { [EOL] ProtobufPathParser.parse("foo"); [EOL] } [EOL]
@Test [EOL] public void testValuesEqual() [EOL] { [EOL] assertEquals( 0, comparator.compare( cn_foo_1, cn_foo_1 ) ); [EOL] assertEquals( 0, comparator.compare( cn_foo_1, cn_foo_2 ) ); [EOL] assertEquals( 0, comparator.compare( cn_foo_2, cn_foo_1 ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testUpdateItemVersionModificationTime() { [EOL] Id itemId = new Id(); [EOL] Id versionId = new Id(); [EOL] Date modificationTime = new Date(); [EOL] Space space = Space.PRIVATE; [EOL] itemVersionManagerImpl [EOL] .updateModificationTime(context, space, itemId, versionId, modificationTime); [EOL] [EOL] verify(stateAdaptorMock) [EOL] .updateItemVersionModificationTime(context, space, itemId, versionId, modificationTime); [EOL] verify(itemManagerMock).updateModificationTime(context, itemId, modificationTime); [EOL] } [EOL]
@Test [EOL] public void makeFileName() { [EOL] assertEquals( [EOL] SCRATCH_DIR + "/REMOTE_THUMB_0011.jpg", [EOL] mBitMapper.makeFileName( [EOL] 11, Moment.Kind.REMOTE, Moment.Style.THUMB).toString()); [EOL] assertEquals( [EOL] SCRATCH_DIR + "/LOCAL_THUMB_0022.jpg", [EOL] mBitMapper.makeFileName( [EOL] 22, Moment.Kind.LOCAL, Moment.Style.THUMB).toString()); [EOL] assertEquals( [EOL] SCRATCH_DIR + "/LOCAL_FULL_0033.jpg", [EOL] mBitMapper.makeFileName( [EOL] 33, Moment.Kind.LOCAL, Moment.Style.FULL).toString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-890)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append("$Ps-)|ysy>r47^"); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) strBuilder1; [EOL]       objectArray0[1] = (Object) "$Ps-)|ysy>r47^"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]        [EOL]       objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[5] = (Object) "$Ps-)|ysy>r47^"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "$Ps-)|ysy>r47^"); [EOL]       assertEquals(427, strBuilder0.size()); [EOL]       assertEquals(427, strBuilder1.size()); [EOL]       assertEquals(427, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(4, (float) 4); [EOL]       assertEquals(430, strBuilder0.size()); [EOL]       assertEquals(430, strBuilder1.size()); [EOL]       assertEquals(430, strBuilder2.size()); [EOL]       assertEquals(430, strBuilder3.size()); [EOL]        [EOL]       String string0 = strBuilder1.midString((-3719), 97); [EOL]       assertEquals(430, strBuilder0.size()); [EOL]       assertEquals(430, strBuilder1.size()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void canFactoryProcessViewsShouldBeRobustWithWeirdInput() { [EOL] Dictionary<String, String> headers = new Hashtable<>(2); [EOL] [EOL] headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, ",,,"); [EOL] assertFalse(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); [EOL] [EOL] headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, ", foo \t\n,,"); [EOL] assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); [EOL] [EOL] headers.put(BundleScriptingConfigurationConstants.JAHIA_MODULE_SCRIPTING_VIEWS, ", js \t\n,, bar,"); [EOL] assertTrue(ScriptEngineUtils.canFactoryProcessViews(new TestScriptEngineFactory(), headers)); [EOL] } [EOL]
@Test [EOL] public void testOnCancellation() throws Exception [EOL] { [EOL] workflow.onCancellation(); [EOL] [EOL] verify( trackerOperation, atLeastOnce() ).addLogFailed( anyString() ); [EOL] } [EOL]
@Test [EOL] public void testRemoveAlertListener() throws Exception [EOL] { [EOL] monitor.removeAlertListener( alertListener ); [EOL] [EOL] assertFalse( alertListeners.contains( alertListener ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[2] = 'B'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('H'); [EOL]       assertSame(strTokenizer0, strTokenizer1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testRemove() throws Exception [EOL] { [EOL] environmentService.remove( ID ); [EOL] [EOL] verify( entityManager ).remove( Matchers.anyObject() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append((short) (-1)); [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) hashCodeBuilder1; [EOL]       objectArray0[1] = (Object) hashCodeBuilder0; [EOL]       objectArray0[2] = (Object) hashCodeBuilder0; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[3] = object0; [EOL]       objectArray0[4] = (Object) hashCodeBuilder0; [EOL]       objectArray0[5] = (Object) hashCodeBuilder0; [EOL]       objectArray0[6] = (Object) hashCodeBuilder1; [EOL]       hashCodeBuilder1.append(objectArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testFINALIZE() throws Exception [EOL] { [EOL] workflow.FINALIZE(); [EOL] [EOL] verify( trackerOperation ).addLogDone( anyString() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameInstant()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(362L); [EOL]       boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExportAscii() throws Exception [EOL] { [EOL] assertThat( PGPKeyUtil.exportAscii( pgpPublicKey ), startsWith( "-----BEGIN PGP MESSAGE-----" ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       booleanArray0[4] = false; [EOL]       booleanArray0[5] = false; [EOL]       boolean[] booleanArray1 = new boolean[2]; [EOL]       booleanArray1[0] = false; [EOL]       booleanArray1[1] = true; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, true); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1865, 1865); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) 1865, (double) 1865); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) 1865, (long) 1865); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void should_not_parse_report_if_report_does_not_exist() { [EOL] Settings settings = new Settings(); [EOL] settings.setProperty(GroovyPlugin.COBERTURA_REPORT_PATH, "org/sonar/plugins/groovy/cobertura/fake-coverage.xml"); [EOL] [EOL] DefaultFileSystem fileSystem = new DefaultFileSystem(new File(".")); [EOL] fileSystem.add(new DefaultInputFile("", "fake.groovy").setLanguage(Groovy.KEY)); [EOL] [EOL] sensor = new CoberturaSensor(settings, fileSystem); [EOL] [EOL] SensorContext context = mock(SensorContext.class); [EOL] sensor.execute(context); [EOL] [EOL] Mockito.verify(context, Mockito.never()).newCoverage(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = Fraction.getFraction((-1391.467789443829)); [EOL]       Fraction fraction2 = fraction0.subtract(fraction1); [EOL]       assertEquals((-3304736), fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void should_store_zero_tests_when_directory_is_null_or_non_existing_or_a_file() throws Exception { [EOL] parser.collect(context, null); [EOL] verify(context, never()).newMeasure(); [EOL] [EOL] context = mock(SensorContext.class); [EOL] parser.collect(context, getDir("nonExistingReportsDirectory")); [EOL] verify(context, never()).newMeasure(); [EOL] [EOL] context = mock(SensorContext.class); [EOL] parser.collect(context, getDir("file.txt")); [EOL] verify(context, never()).newMeasure(); [EOL] } [EOL]
@Test [EOL] public void testGetId() throws Exception [EOL] { [EOL] assertNotNull( environment.getId() ); [EOL] } [EOL]
@Test [EOL] public void testCancelEnvironmentWorkflow() throws Exception [EOL] { [EOL] proxy.cancelEnvironmentWorkflow( TestHelper.ENV_ID ); [EOL] [EOL] verify( environmentManager ).cancelEnvironmentWorkflow( TestHelper.ENV_ID ); [EOL] } [EOL]
@Test [EOL] public void shouldUpdateTrajectory1311() throws Exception { [EOL] //===================================================================== [EOL] // 1.3.1.1 [EOL] //===================================================================== [EOL] // build object [EOL] ObjTrajectory traj1311 = new ObjTrajectory(); [EOL] traj1311.setUid("traj1311"); [EOL] traj1311.setName("traj1311"); [EOL] traj1311.setUidWellbore("wellbore1311"); [EOL] traj1311.setUidWell("well1311"); [EOL] [EOL] // build http request [EOL] String endpoint = this.url + this.trajectoryPath + traj1311.getUid(); [EOL] HttpRequest req1311 = Unirest.put(endpoint); [EOL] req1311.header("Content-Type", "application/json"); [EOL] req1311.queryString("uidWellbore", traj1311.getUidWellbore()); [EOL] req1311.queryString("uidWell", traj1311.getUidWell()); [EOL] [EOL] // build http response mock [EOL] HttpResponse<String> resp = mock(HttpResponse.class); [EOL] when(resp.getStatus()).thenReturn(200); [EOL] [EOL] // mock mockClient behavior [EOL] when(this.mockClient.makeRequest(argThat(someReq -> ( [EOL] someReq.getHttpMethod().name().equals(req1311.getHttpMethod().name()) && [EOL] someReq.getUrl().equals(req1311.getUrl()) && [EOL] someReq.getHeaders().containsKey("Content-Type") [EOL] )), eq("goodUsername"), eq("goodPassword"), anyString())).thenReturn(resp); [EOL] [EOL] // test [EOL] this.delegator.updateObject(traj1311, "goodUsername", "goodPassword", "exchangeID", this.mockClient); [EOL] [EOL] // verify [EOL] verify(this.mockClient).makeRequest(argThat(someReq -> ( [EOL] someReq.getHttpMethod().name().equals(req1311.getHttpMethod().name()) && [EOL] someReq.getUrl().equals(req1311.getUrl()) && [EOL] someReq.getHeaders().containsKey("Content-Type") [EOL] )), eq("goodUsername"), eq("goodPassword"), anyString()); [EOL] //===================================================================== [EOL] } [EOL]
@Test [EOL] public void listContributors() throws Exception { [EOL] TestSubscriber<List<UserEntity>> subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.listContributors("TellH", "GitClub", 1).subscribe(subscriber); [EOL] List<UserEntity> userList = subscriber.getOnNextEvents().get(0); [EOL] assertNotNull(userList); [EOL] System.out.println(userList.toString()); [EOL] } [EOL]
@Test [EOL] public void testOpenLdapSchemaRendererObjectClassComplex() [EOL] { [EOL] String actual = OpenLdapSchemaFileExporter.toSourceCode( objectClassComplex ); [EOL] String expected = "objectclass ( 1.2.3.4 NAME ( 'name1' 'name2' )\n\tDESC 'description with \\27quotes\\27'\n\tOBSOLETE\n\tSUP 1.3.5.7\n\tAUXILIARY\n\tMUST ( att1 $ att2 )\n\tMAY ( att3 $ att4 ) )"; [EOL] assertEquals( expected, actual ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.mid("", 64, 64); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       String string1 = StringUtils.substringAfter("r", ""); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) "r"; [EOL]       boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.equals(charSequenceArray0[1], (CharSequence) ""); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 64; [EOL]       intArray0[1] = 64; [EOL]       intArray0[2] = 64; [EOL]       intArray0[3] = 64; [EOL]       intArray0[4] = 64; [EOL]       intArray0[5] = 64; [EOL]       intArray0[6] = 64; [EOL]       intArray0[7] = 1076; [EOL]       String string2 = StringUtils.join(intArray0, 'q', 0, (-385)); [EOL]       assertEquals(8, intArray0.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldCreatePluralObject() throws Exception { [EOL] 		// build witsmlObjects list [EOL] 		ArrayList<AbstractWitsmlObject> witsmlObjects; [EOL] 		witsmlObjects = new ArrayList<>(); [EOL] [EOL] 		ObjWellbore wellboreA = new ObjWellbore(); [EOL] 		wellboreA.setName("wellbore-A"); [EOL] 		wellboreA.setUid("wellbore-A"); [EOL] 		witsmlObjects.add(wellboreA); [EOL] [EOL] 		ObjWellbore wellboreB = new ObjWellbore(); [EOL] 		wellboreB.setName("wellbore-B"); [EOL] 		wellboreB.setUid("wellbore-B"); [EOL] 		witsmlObjects.add(wellboreB); [EOL] [EOL] [EOL] 		// build query context [EOL] 		QueryContext qc = new QueryContext( [EOL] 			"1.3.1.1", [EOL] 			"wellbore", [EOL] 			null, [EOL] 			"", [EOL] 			witsmlObjects, [EOL] 			"goodUsername", [EOL] 			"goodPassword", [EOL] 			"shouldCreatePluralObject" // exchange ID [EOL] 		); [EOL] [EOL] [EOL] 		// mock delegator behavior [EOL] 		when( [EOL] 			this.mockDelegator.createObject(wellboreA, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.mockClient) [EOL] 		).thenReturn(wellboreA.getUid()); [EOL] 		when( [EOL] 			this.mockDelegator.createObject(wellboreB, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.mockClient) [EOL] 		).thenReturn(wellboreB.getUid()); [EOL] [EOL] [EOL] 		// test [EOL] 		String expected = wellboreA.getUid() + "," + wellboreB.getUid(); [EOL] 		String actual = this.valve.createObject(qc).get(); [EOL] 		assertEquals(expected, actual); [EOL] 	} [EOL]
@Test [EOL] public void buildWithComplexDerivedTypeInSelect2() { [EOL] EdmEntitySet entitySet = Mockito.mock(EdmEntitySet.class); [EOL] Mockito.when(entitySet.getName()).thenReturn("ESCompCollComp"); [EOL] ContextURL contextURL = ContextURL.with().serviceRoot(serviceRoot) [EOL] .entitySet(entitySet) [EOL] .selectList("PropertyComp/CollPropertyComp/olingo.odata.test1.CTBase/AdditionalPropString") [EOL] .build(); [EOL] assertEquals(serviceRoot + "$metadata#ESCompCollComp(PropertyComp/CollPropertyComp/" [EOL] + "olingo.odata.test1.CTBase/AdditionalPropString)", [EOL] ContextURLBuilder.create(contextURL).toASCIIString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]        [EOL]       float[] floatArray0 = new float[7]; [EOL]       floatArray0[0] = 3863.3088F; [EOL]       floatArray0[1] = 0.0F; [EOL]       floatArray0[2] = 0.0F; [EOL]       floatArray0[3] = (-1268.2902F); [EOL]       floatArray0[4] = (-3025.2256F); [EOL]       floatArray0[5] = 0.0F; [EOL]       floatArray0[6] = 885.884F; [EOL]       float[] floatArray1 = new float[7]; [EOL]       floatArray1[0] = 885.884F; [EOL]       floatArray1[1] = 3863.3088F; [EOL]       floatArray1[2] = 0.0F; [EOL]       floatArray1[3] = 0.0F; [EOL]       floatArray1[4] = (-3025.2256F); [EOL]       floatArray1[5] = (-3025.2256F); [EOL]       floatArray1[6] = 3863.3088F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       char[] charArray0 = new char[0]; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false); [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-4493); [EOL]       shortArray0[1] = (short)1200; [EOL]       shortArray0[2] = (short)430; [EOL]       shortArray0[3] = (short)543; [EOL]       shortArray0[4] = (short)4401; [EOL]       shortArray0[5] = (short)3602; [EOL]       shortArray0[6] = (short) (-1); [EOL]       shortArray0[7] = (short)0; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((float) (short)543, 3024.4634F); [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = (long) (short)4401; [EOL]       longArray0[1] = (long) (short) (-1); [EOL]       equalsBuilder5.append(longArray0, longArray0); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testPREPARE_TEMPLATES() throws Exception [EOL] { [EOL] workflow.PREPARE_TEMPLATES(); [EOL] [EOL] verify( environmentManager, atLeastOnce() ).update( environment ); [EOL] } [EOL]
@Test [EOL] public void successRatioIsZeroWhenAllTestsFail() throws URISyntaxException { [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] context.fileSystem().add(inputFile("org.sonar.Foo")); [EOL] [EOL] surefireSensor.collect(context, new File(getClass().getResource( [EOL] "/org/sonar/plugins/groovy/surefire/SurefireSensorTest/successRatioIsZeroWhenAllTestsFail/").toURI())); [EOL] [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TESTS).value()).isEqualTo(2); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TEST_FAILURES).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TEST_ERRORS).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TEST_SUCCESS_DENSITY).value()).isEqualTo(0); [EOL] } [EOL]
@Test [EOL] public void valueOfString() throws Exception { [EOL] Calendar dateTime = Calendar.getInstance(); [EOL] dateTime.clear(); [EOL] [EOL] assertEqualCalendar(dateTime, instance.valueOfString("00:00", null, null, null, null, null, Calendar.class)); [EOL] assertEqualCalendar(dateTime, instance.valueOfString("00:00:00", null, null, null, null, null, Calendar.class)); [EOL] assertEqualCalendar(dateTime, [EOL] instance.valueOfString("00:00:00.000000000", null, null, null, null, null, Calendar.class)); [EOL] [EOL] final Time timeValue = instance.valueOfString("00:00:00.999", null, null, 3, null, null, Time.class); [EOL] assertEquals(dateTime.getTimeInMillis(), timeValue.getTime()); [EOL] [EOL] dateTime.set(Calendar.MILLISECOND, 999); [EOL] assertEqualCalendar(dateTime, [EOL] instance.valueOfString("00:00:00.999", null, null, 3, null, null, Calendar.class)); [EOL] assertEqualCalendar(dateTime, [EOL] instance.valueOfString("00:00:00.999", null, null, 3, null, null, Calendar.class)); [EOL] assertEquals(Long.valueOf(dateTime.getTimeInMillis()), [EOL] instance.valueOfString("00:00:00.999", null, null, 3, null, null, Long.class)); [EOL] [EOL] final Timestamp timestamp = instance.valueOfString("00:00:00.999888777", null, null, 9, null, null, [EOL] Timestamp.class); [EOL] assertEquals(dateTime.getTimeInMillis(), timestamp.getTime()); [EOL] assertEquals(999888777, timestamp.getNanos()); [EOL] [EOL] // expectUnconvertibleErrorInValueOfString(instance, "11:12:13.1234", Calendar.class); [EOL] // expectUnconvertibleErrorInValueOfString(instance, "11:12:13.0123456789", Timestamp.class); [EOL] [EOL] expectContentErrorInValueOfString(instance, "24:32:02"); [EOL] expectContentErrorInValueOfString(instance, "011:12:13"); [EOL] expectContentErrorInValueOfString(instance, "11:12:13:14"); [EOL] expectContentErrorInValueOfString(instance, "111213"); [EOL] expectContentErrorInValueOfString(instance, "1:2:3"); [EOL] expectContentErrorInValueOfString(instance, "11:12:13.0.1"); [EOL] // expectContentErrorInValueOfString(instance, "11:12:13."); [EOL] expectContentErrorInValueOfString(instance, "11:12:13.0000000000000"); [EOL] [EOL] expectTypeErrorInValueOfString(instance, "11:12:13"); [EOL] } [EOL]
@Test [EOL] public void testBatchRequest(){ [EOL] ODataBatchUtilities util = new ODataBatchUtilities(); [EOL] Map<String, Collection<String>> value = new HashMap<String, Collection<String>>(); [EOL] util.addHeaderLine("header:name", value ); [EOL] value.put("header:name", null); [EOL] util.addHeaderLine("header:name", value ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       assertEquals((-1.0F), fraction1.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test public void testNormalizeStackTrace() { [EOL] assertEquals("", Outcome.normalizeStackTrace("")); [EOL] assertEquals("failure message", Outcome.normalizeStackTrace(" \nfailure message\t\r\n ")); [EOL] assertEquals("one two three", Outcome.normalizeStackTrace("one \n \ttwo\r\n\t three\n")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null, (byte)2); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(false); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]        [EOL]       int int0 = 32; [EOL]       int int1 = 8; [EOL]       char[] charArray0 = new char[4]; [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln('}'); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder1.size()); [EOL]       assertEquals(7, strBuilder3.size()); [EOL]        [EOL]       int int2 = 0; [EOL]       String string0 = strBuilder3.substring(0); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder1.size()); [EOL]       assertEquals(7, strBuilder3.size()); [EOL]        [EOL]       int int3 = strBuilder2.indexOf((StrMatcher) null, 8); [EOL]       assertEquals(0, strBuilder2.size()); [EOL]        [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = 'b'; [EOL]       char char0 = 'S'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateIndex(8); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 8 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testFINALIZE() throws Exception [EOL] { [EOL] workflow.FINALIZE(); [EOL] [EOL] verify( trackerOperation ).addLogDone( anyString() ); [EOL] } [EOL]
@Test [EOL] void testRetryWhenErrorHappensWhilePersisting() { [EOL] final DocumentArchivingContext documentArchivingContext = createDocumentArchivingContext(); [EOL] final DocumentCreationContext documentCreationContext = DocumentCreationContext.builder() [EOL] .build(); [EOL] when(documentCreationContextFactory.newContext(documentArchivingContext)) [EOL] .thenReturn(Mono.just(documentCreationContext)); [EOL] final DocumentEntity documentEntity = DocumentEntity.builder() [EOL] .build(); [EOL] when(documentEntityFactory.newDocumentEntity(documentCreationContext)) [EOL] .thenReturn(Mono.just(documentEntity)); [EOL] final MongoWriteException mongoWriteException = mock(MongoWriteException.class); [EOL] when(mongoWriteException.getMessage()).thenReturn("E11000 duplicate key error"); [EOL] //Do a normal exception, then a retry happens and throw the mongo exception to stop the retries [EOL] doThrow(new RuntimeException("Test exception"), mongoWriteException) [EOL] .when(vaultDocumentStorage).persistDocument(any(), any()); [EOL] [EOL] final Mono<DocumentEntity> result = underTest.archiveDocument(documentArchivingContext); [EOL] [EOL] StepVerifier.create(result) [EOL] .verifyError(MongoWriteException.class); [EOL] [EOL] verify(vaultDocumentStorage, times(2)).persistDocument(any(), any()); [EOL] } [EOL]
@Test [EOL] public void measuresShouldNotIncludeSkippedTests() throws URISyntaxException { [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] context.fileSystem().add(inputFile("org.sonar.Foo")); [EOL] [EOL] surefireSensor.collect(context, new File(getClass().getResource( [EOL] "/org/sonar/plugins/groovy/surefire/SurefireSensorTest/measuresShouldNotIncludeSkippedTests/").toURI())); [EOL] [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TESTS).value()).isEqualTo(2); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TEST_FAILURES).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TEST_ERRORS).value()).isEqualTo(0); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.SKIPPED_TESTS).value()).isEqualTo(1); [EOL] assertThat(context.measure(":org.sonar.Foo", CoreMetrics.TEST_SUCCESS_DENSITY).value()).isEqualTo(50); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("v"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 169; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("v", 169); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'O'; [EOL]       char char0 = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(554, (-1433), charArray0, 554); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1433 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.FORMAT; [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) locale_Category0); [EOL]       assertEquals(72, strBuilder0.capacity()); [EOL]       assertEquals(72, strBuilder1.capacity()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(0, '\"'); [EOL]       assertEquals(72, strBuilder0.capacity()); [EOL]       assertEquals(72, strBuilder2.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = '\"'; [EOL]       charArray0[2] = '\"'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '\"'; [EOL]       charArray0[5] = '\"'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(charArray0, (-2049), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, "org.apache.commons.lang3.builder.ToStringStyle$ShortPrefixToStringStyle", (char[]) null, boolean0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldConvertSqlPredicateLessThanOrEqualToOperatorToMongoDbCriteria() { [EOL] SqlPredicate sqlPredicate1 = new SqlPredicate("pets.owner", "<=", 5.14); [EOL] [EOL] Criteria result = target.initialCriteria(sqlPredicate1); [EOL] String resultInString = result.getCriteriaObject().toJson(); [EOL] [EOL] assertThat(resultInString, is("{\"owner\": {\"$lte\": 5.14}}")); [EOL] } [EOL]
@Test [EOL] public void testExecuteAsync() throws Exception [EOL] { [EOL] localPeer.executeAsync( requestBuilder, containerHost, commandCallback ); [EOL] [EOL] verify( commandExecutor ).executeAsync( CONTAINER_HOST_ID, requestBuilder, commandCallback ); [EOL] [EOL] localPeer.executeAsync( requestBuilder, containerHost ); [EOL] [EOL] verify( commandExecutor ).executeAsync( CONTAINER_HOST_ID, requestBuilder ); [EOL] } [EOL]
@Test [EOL] public void removeLastEndingCRLFWithWSLong() { [EOL] String line = "Test " + CRLF + "Test2 " + CRLF; [EOL] assertEquals("Test " + CRLF + "Test2 ", [EOL] BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString()); [EOL] } [EOL]
@Test [EOL] void shouldFailIfDirectoryExists(@TempDir final Path temp) throws Exception { [EOL] final Path home = Files.createDirectories(temp.resolve("home")); [EOL] final Path reportPath = Files.createDirectories(temp.resolve("report")); [EOL] Files.createTempFile(reportPath, "some", ".txt"); [EOL] final Commands commands = new Commands(home); [EOL] final ExitCode exitCode = commands.generate(reportPath, null, false, [EOL] null); [EOL] [EOL] assertThat(exitCode) [EOL] .isEqualTo(ExitCode.GENERIC_ERROR); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln("rn$e:"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       Vector<String> vector0 = new Vector<String>(); [EOL]       assertTrue(vector0.isEmpty()); [EOL]        [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) treeSet0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(vector0.isEmpty()); [EOL]       assertTrue(linkedHashSet0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator("rn$e:", 1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       Integer[] integerArray0 = new Integer[5]; [EOL]       Integer integer0 = new Integer(1); [EOL]        [EOL]       integerArray0[0] = integer0; [EOL]       Integer integer1 = new Integer(862); [EOL]        [EOL]       integerArray0[1] = integer1; [EOL]       int int0 = 0; [EOL]       Integer integer2 = new Integer(0); [EOL]        [EOL]       integerArray0[2] = integer2; [EOL]       Integer integer3 = new Integer(862); [EOL]        [EOL]       integerArray0[3] = integer3; [EOL]       Integer integer4 = new Integer(int0); [EOL]        [EOL]       integerArray0[4] = integer4; [EOL]       StrBuilder strBuilder4 = strBuilder3.appendAll(integerArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testWithType() throws Exception [EOL] { [EOL] assertNotNull( requestBuilder.withType( RequestType.EXECUTE_REQUEST ) ); [EOL] } [EOL]
@Test [EOL] public void testGetIp() throws Exception [EOL] { [EOL] assertEquals( Common.LOCAL_HOST_IP, environmentContainer.getIp() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5d}%CW)%"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int0 = 537; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace(537, 166, ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testResetP2PSecretKey() throws Exception [EOL] { [EOL] proxy.resetP2PSecretKey( TestHelper.ENV_ID, "SECRET", 123L, true ); [EOL] [EOL] verify( environmentManager ).resetP2PSecretKey( TestHelper.ENV_ID, "SECRET", 123L, true ); [EOL] } [EOL]
@Test(expected = UriParserSemanticException.class) [EOL] public void testPropertyPathExpWithoutType() throws Exception { [EOL] final String entitySetName = "ESName"; [EOL] final String keyPropertyName = "a"; [EOL] EdmProperty keyProperty = mockProperty(keyPropertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] EdmKeyPropertyRef keyPropertyRef = mockKeyPropertyRef(keyPropertyName, keyProperty); [EOL] EdmEntityType entityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(entityType.getPropertyNames()).thenReturn(Collections.singletonList(keyPropertyName)); [EOL] Mockito.when(entityType.getProperty(keyPropertyName)).thenReturn(keyProperty); [EOL] EdmEntitySet entitySet = mockEntitySet(entitySetName, entityType); [EOL] EdmEntityContainer container = mockContainer(entitySetName, entitySet); [EOL] Edm mockedEdm = Mockito.mock(Edm.class); [EOL] Mockito.when(mockedEdm.getEntityContainer()).thenReturn(container); [EOL] [EOL] UriTokenizer tokenizer = new UriTokenizer("a eq \'abc\'"); [EOL] new ExpressionParser(mockedEdm, odata).parse(tokenizer, null, null, null); [EOL] } [EOL]
@Test [EOL] public void testGetEntityManager() throws Exception [EOL] { [EOL] daoManager.getEntityManager(); [EOL] } [EOL]
@Test [EOL] public void testSetStatus() throws Exception [EOL] { [EOL] environment.setStatus( EnvironmentStatus.CANCELLED ); [EOL] [EOL] assertEquals( EnvironmentStatus.CANCELLED, environment.getStatus() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("FiHbfxLjq4Y/Lm\""); [EOL]        [EOL]       int int0 = 988; [EOL]       String string0 = strBuilder0.midString(2, 988); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(1855); [EOL]       assertEquals("", stringWriter0.toString()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(2, 88); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       assertEquals("", stringWriter0.toString()); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.clear(); [EOL]        [EOL]       char char0 = '\''; [EOL]       StringWriter stringWriter1 = stringWriter0.append('\''); [EOL]       assertEquals("'", stringWriter0.toString()); [EOL]       assertEquals("'", stringWriter1.toString()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuffer0, 109, (-1319)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) null; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) strBuilder0; [EOL]       objectArray0[5] = (Object) strBuilder0; [EOL]       objectArray0[6] = (Object) null; [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "length must be valid"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, (String) null); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((CharSequence) strBuilder0, 31, 31); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(1L); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testIsLocal() throws Exception [EOL] { [EOL] assertTrue( containerHostEntity.isLocal() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisPackageAccess()  throws Throwable  { [EOL]       boolean boolean0 = MemberUtils.isPackageAccess(0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testMerge() throws Exception [EOL] { [EOL] [EOL] environmentService.merge( environment ); [EOL] [EOL] verify( entityManager ).merge( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("$W8BC)fVnoVM,sZ]"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "hJd3~IkyQU3Lzn0Z^Hs"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.isNegated(); [EOL]       assertEquals('%', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void listForks() throws Exception { [EOL] TestSubscriber<List<RepositoryInfo>> subscriber = TestSubscriber.create(); [EOL] repositoryDataSource.listForks("TellH", "GitClub", 1).subscribe(subscriber); [EOL] List<RepositoryInfo> list = subscriber.getOnNextEvents().get(0); [EOL] assertNotNull(list); [EOL] for (RepositoryInfo repo : list) { [EOL] System.out.println(repo.getOwner()); [EOL] } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("n:qv{0F`Yb3&H^f*N2", charBuffer0.toString()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals("n:qv{0F`Yb3&H^f*N2", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals("", charBuffer1.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('F'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTypeArguments()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Class<?> class1 = TypeUtils.getRawType(class0, class0); [EOL]       Class<String> class2 = String.class; [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class1, (Class<?>) class2); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]
@Test [EOL] 	public void shouldCreateTrajectory() throws Exception { [EOL] 		// build witsmlObjects list [EOL] 		ArrayList<AbstractWitsmlObject> witsmlObjects; [EOL] 		witsmlObjects = new ArrayList<>(); [EOL] [EOL] 		ObjTrajectory traj = new ObjTrajectory(); [EOL] 		traj.setUid("traj-A"); [EOL] 		traj.setName("traj-A"); [EOL] [EOL] 		witsmlObjects.add(traj); [EOL] [EOL] 		// build query context [EOL] 		QueryContext qc = new QueryContext( [EOL] 			"1.3.1.1", [EOL] 			"trajectory", [EOL] 			null, [EOL] 			"", [EOL] 			witsmlObjects, [EOL] 			"goodUsername", [EOL] 			"goodPassword", [EOL] 			"shouldCreateTrajectory" // exchange ID [EOL] 		); [EOL] [EOL] [EOL] 		// mock delegator behavior [EOL] 		when( [EOL] 			this.mockDelegator.createObject(traj, qc.USERNAME, qc.PASSWORD, qc.EXCHANGE_ID, this.mockClient) [EOL] 		).thenReturn(traj.getUid()); [EOL] [EOL] [EOL] 		// test [EOL] 		String expected = traj.getUid(); [EOL] 		String actual = this.valve.createObject(qc).get(); [EOL] 		assertEquals(expected, actual); [EOL] 	} [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       double[] doubleArray0 = new double[2]; [EOL]       doubleArray0[0] = 0.0; [EOL]       doubleArray0[1] = 0.0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, doubleArray0); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((Object) equalsBuilder0, object0); [EOL]       float[] floatArray0 = new float[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(floatArray0, floatArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte) (-1), (byte) (-81)); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0); [EOL]       assertSame(equalsBuilder5, equalsBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 5, (-1)); [EOL]       assertNotSame(booleanArray0, booleanArray1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testDoExecute() throws Exception [EOL] { [EOL] command.doExecute(); [EOL] [EOL] verify( containerHostInfo ).getState(); [EOL] } [EOL]
@Test [EOL] public void testGetInitiatorPeerId() throws Exception [EOL] { [EOL] assertEquals( INITIATOR_ID, environmentContainer.getInitiatorPeerId() ); [EOL] } [EOL]
@Test [EOL] public void testDispose() throws Exception [EOL] { [EOL] proxy.dispose(); [EOL] [EOL] verify( environmentManager ).dispose(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true); [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Float float0 = new Float(167.82865430967); [EOL]       MutableInt mutableInt0 = new MutableInt(float0); [EOL]       boolean boolean0 = ObjectUtils.equals((Object) mutableInt0, (Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test( expected = HostNotFoundException.class ) [EOL] public void testGetContainerHostByName() throws Exception [EOL] { [EOL] assertEquals( containerHost, localPeer.getContainerHostByHostName( CONTAINER_HOST_NAME ) ); [EOL] [EOL] doThrow( new HostNotFoundException( "" ) ).when( resourceHost ) [EOL] .getContainerHostByHostName( CONTAINER_HOST_NAME ); [EOL] [EOL] localPeer.getContainerHostByHostName( CONTAINER_HOST_NAME ); [EOL] } [EOL]
@Test [EOL] public void testIsOnline() throws Exception [EOL] { [EOL] assertTrue( localPeer.isOnline() ); [EOL] } [EOL]
@Test [EOL] public void testHttpsProxyDefined() throws HttpException { [EOL] System.setProperty("https.proxyHost", "httpsProxy"); [EOL] System.setProperty("https.proxyPort", "9443"); [EOL] [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("http://www.jahia.com")); [EOL] assertEquals("httpsProxy:9443", ProxyAddressSelector.getProxyForUrl("https://www.jahia.com")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("http://localhost:8080")); [EOL] assertEquals("httpsProxy:9443", ProxyAddressSelector.getProxyForUrl("https://localhost:8080")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("www.jahia.com:9090")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("localhost:9090")); [EOL] assertNull(ProxyAddressSelector.getProxyForUrl("/aaa.html")); [EOL] [EOL] System.setProperty("https.proxyPort", ""); [EOL] assertEquals("httpsProxy:443", ProxyAddressSelector.getProxyForUrl("https://www.jahia.com")); [EOL] } [EOL]
@Test [EOL] public void testBindHost() throws Exception [EOL] { [EOL] [EOL] assertEquals( resourceHost, localPeer.findHost( RESOURCE_HOST_ID ) ); [EOL] [EOL] assertEquals( containerHost, localPeer.findHost( CONTAINER_HOST_ID ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setArrayEnd((String) null); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testCreateSshKey() throws Exception [EOL] { [EOL] doReturn( environmentContainer ).when( environment ).getContainerHostByHostname( TestHelper.HOSTNAME ); [EOL] doReturn( localPeer ).when( environmentContainer ).getPeer(); [EOL] SshKey sshKey = mock( SshKey.class ); [EOL] doReturn( sshKey ).when( localPeer ) [EOL] .createSshKey( TestHelper.ENVIRONMENT_ID, TestHelper.CONT_HOST_ID, SshEncryptionType.ECDSA ); [EOL] [EOL] environmentManager.createSshKey( TestHelper.ENV_ID, TestHelper.HOSTNAME, SshEncryptionType.ECDSA ); [EOL] [EOL] verify( localPeer ).createSshKey( TestHelper.ENVIRONMENT_ID, TestHelper.CONT_HOST_ID, SshEncryptionType.ECDSA ); [EOL] } [EOL]
@Test [EOL] public void testCallException() throws Exception [EOL] { [EOL] doThrow( new RuntimeException() ).when( webClient ).post( anyString() ); [EOL] [EOL] remotePeerMessageSender.call(); [EOL] [EOL] verify( messengerDataService ).incrementDeliveryAttempts( envelope ); [EOL] } [EOL]
@Test [EOL] void serializeExceptionAsString() throws IOException { [EOL] Exception exception = new Exception("foo"); [EOL] StringBuilder jsonBuilder = new StringBuilder(); [EOL] jsonBuilder.append('{'); [EOL] EcsJsonSerializer.serializeException(jsonBuilder, exception, false); [EOL] jsonBuilder.append('}'); [EOL] JsonNode jsonNode = new ObjectMapper().readTree(jsonBuilder.toString()); [EOL] [EOL] assertThat(jsonNode.get("error.type").textValue()).isEqualTo(exception.getClass().getName()); [EOL] assertThat(jsonNode.get("error.message").textValue()).isEqualTo("foo"); [EOL] StringWriter stringWriter = new StringWriter(); [EOL] exception.printStackTrace(new PrintWriter(stringWriter)); [EOL] assertThat(jsonNode.get("error.stack_trace").textValue()).isEqualTo(stringWriter.toString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1083)); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(integer0, toStringStyle0); [EOL]       long[] longArray0 = new long[8]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(longArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string1 = "]*qbQ%"; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText("]*qbQ%"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("]*qbQ%", (-1079)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldNotExportUnsetParameters() throws Exception { [EOL] Rule rule = Rule.create(CodeNarcRulesDefinition.REPOSITORY_KEY, "org.codenarc.rule.size.ClassSizeRule", "Class Size"); [EOL] rule.createParameter("maxLines"); [EOL] profile.activateRule(rule, RulePriority.MAJOR).setParameter("maxLines", null); [EOL] [EOL] exporter.exportProfile(profile); [EOL] [EOL] assertSimilarXml( [EOL] TestUtils.getResource("/org/sonar/plugins/groovy/codenarc/exportProfile/exportNullParameters.xml"), [EOL] writer.toString()); [EOL] } [EOL]
@Test [EOL] public void testComplexPropertyPathExp() throws Exception { [EOL] final String entitySetName = "ESName"; [EOL] final String keyPropertyName = "a"; [EOL] final String complexPropertyName = "comp"; [EOL] final String propertyName = "prop"; [EOL] EdmProperty keyProperty = mockProperty(keyPropertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] EdmKeyPropertyRef keyPropertyRef = mockKeyPropertyRef(keyPropertyName, keyProperty); [EOL] EdmProperty property = mockProperty(propertyName, [EOL] OData.newInstance().createPrimitiveTypeInstance(EdmPrimitiveTypeKind.String)); [EOL] [EOL] EdmComplexType complexType = mockComplexType(propertyName, property); [EOL] EdmProperty complexProperty = mockProperty(complexPropertyName, complexType); [EOL] [EOL] EdmEntityType entityType = mockEntityType(keyPropertyName, keyPropertyRef); [EOL] Mockito.when(entityType.getPropertyNames()).thenReturn(Arrays.asList(keyPropertyName, complexPropertyName)); [EOL] Mockito.when(entityType.getProperty(keyPropertyName)).thenReturn(keyProperty); [EOL] Mockito.when(entityType.getProperty(complexPropertyName)).thenReturn(complexProperty); [EOL] EdmEntitySet entitySet = mockEntitySet(entitySetName, entityType); [EOL] EdmEntityContainer container = mockContainer(entitySetName, entitySet); [EOL] Edm mockedEdm = Mockito.mock(Edm.class); [EOL] Mockito.when(mockedEdm.getEntityContainer()).thenReturn(container); [EOL] [EOL] UriTokenizer tokenizer = new UriTokenizer("comp/prop eq \'abc\'"); [EOL] Expression expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("{[comp, prop] EQ \'abc\'}", expression.toString()); [EOL] [EOL] tokenizer = new UriTokenizer("comp/prop in (\'abc\','xyz')"); [EOL] expression = new ExpressionParser(mockedEdm, odata).parse(tokenizer, [EOL] entityType, null, null); [EOL] assertNotNull(expression); [EOL] assertEquals("{[comp, prop] IN [\'abc\', \'xyz\']}", expression.toString()); [EOL] } [EOL]
@Test [EOL] public void moduleUpdateShouldFailInReadOnlyMode() { [EOL] verifyFailureInReadOnlyMode(() -> moduleManager.update("bundleKey", null)); [EOL] } [EOL]
@Test [EOL] public void not_existing_class_files_should_not_be_analyzed_for_previous() { [EOL] File report = TestUtils.getResource("/org/sonar/plugins/groovy/jacoco/JaCoCo_incompatible_merge/jacoco-0.7.4.exec"); [EOL] Collection<File> classFile = Arrays.asList(dummy); [EOL] new JaCoCoReportReader(report).analyzeFiles(null, classFile); [EOL] } [EOL]
@Test [EOL] public void test() { [EOL] CodeNarcRulesDefinition definition = new CodeNarcRulesDefinition(); [EOL] RulesDefinition.Context context = new RulesDefinition.Context(); [EOL] definition.define(context); [EOL] RulesDefinition.Repository repository = context.repository(CodeNarcRulesDefinition.REPOSITORY_KEY); [EOL] [EOL] assertThat(repository.name()).isEqualTo(CodeNarcRulesDefinition.REPOSITORY_NAME); [EOL] assertThat(repository.language()).isEqualTo(Groovy.KEY); [EOL] [EOL] List<Rule> rules = repository.rules(); [EOL] assertThat(rules).hasSize(347); [EOL] [EOL] List<String> missingDebt = new LinkedList<>(); [EOL] for (Rule rule : rules) { [EOL] assertThat(rule.key()).isNotNull(); [EOL] assertThat(rule.internalKey()).isNotNull(); [EOL] assertThat(rule.name()).isNotNull(); [EOL] assertThat(rule.htmlDescription()).isNotNull(); [EOL] if (rule.debtRemediationFunction() == null) { [EOL] missingDebt.add(rule.key()); [EOL] } [EOL] } [EOL] // From SONARGROOV-36, 'org.codenarc.rule.generic.IllegalSubclassRule' does not have debt by purpose [EOL] assertThat(missingDebt).containsOnly("org.codenarc.rule.generic.IllegalSubclassRule.fixed"); [EOL] [EOL] Rule rule = repository.rule("org.codenarc.rule.braces.ElseBlockBracesRule"); [EOL] assertThat(rule.params()).hasSize(1); [EOL] assertThat(rule.params().get(0).defaultValue()).isEqualToIgnoringCase("false"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testMergeExtException() [EOL] { [EOL] when( entityManager.merge( any() ) ).thenThrow( Exception.class ); [EOL] [EOL] assertEquals( 0, daoManager.mergeExt( entityManager, object ) ); [EOL] } [EOL]
@Test [EOL] public void testStringToJCRSearchExp() { [EOL] String term = "foo bar"; [EOL] assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo -bar"; [EOL] assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo \\-bar"; [EOL] assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo \"bar"; [EOL] assertEquals(getFinalTerm("foo \\\"bar"), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo \"bar baz\""; [EOL] assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo \"bar -baz\""; [EOL] assertEquals(getFinalTerm(term), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo \"bar baz\" boo\""; [EOL] assertEquals(getFinalTerm("foo \"bar baz\" boo\\\""), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo \"bar baz\" \"fu boo\""; [EOL] assertEquals(getFinalTerm("foo \"bar baz\" \"fu boo\""), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = " foo \"bar baz\" boo bu "; [EOL] assertEquals(getFinalTerm("foo \"bar baz\" boo bu"), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "\"foo"; [EOL] assertEquals(getFinalTerm("\\\"foo"), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "foo\""; [EOL] assertEquals(getFinalTerm("foo\\\""), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = "\""; [EOL] assertEquals(getFinalTerm("\\\""), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] [EOL] term = ""; [EOL] assertEquals(getFinalTerm(""), JCRContentUtils.stringToJCRSearchExp(term)); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testintToShortArray()  throws Throwable  { [EOL]       short[] shortArray0 = new short[7]; [EOL]       short[] shortArray1 = Conversion.intToShortArray(0, 0, shortArray0, (short) (-3102), 0); [EOL]       assertSame(shortArray1, shortArray0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testPrintOperationLog() throws Exception [EOL] { [EOL] doReturn( productOperationView ).when( tracker ).getTrackerOperation( SOURCE.toUpperCase(), OPERATION_ID ); [EOL] when( productOperationView.getLog() ).thenReturn( "log" ); [EOL] when( productOperationView.getState() ).thenReturn( OperationState.RUNNING ) [EOL] .thenReturn( OperationState.SUCCEEDED ); [EOL] [EOL] tracker.printOperationLog( SOURCE, OPERATION_ID, 200 ); [EOL] [EOL] assertEquals( "log", getSysOut() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.strip("xlj[0BAT3@1"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "xlj[0BAT3@1"; [EOL]       String string1 = StringUtils.removeStart("xlj[0BAT3@1", "&r"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "xlj[0BAT3@1"; [EOL]       String string2 = StringUtils.leftPad("xlj[0BAT3@1", 8192, "}^M"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) string2; [EOL]       String string3 = StringUtils.replaceChars("xlj[0BAT3@1", (String) null, "xlj[0BAT3@1"); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "xlj[0BAT3@1"; [EOL]       String string4 = StringUtils.stripToNull("Minimum abbreviation width is 4"); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is 4"; [EOL]       String string5 = StringUtils.EMPTY; [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       String string6 = StringUtils.difference("", (String) null); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string7 = StringUtils.substringBefore("", "Index: "); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetMessage() throws Exception [EOL] { [EOL] Request request2 = payload.getMessage( Request.class ); [EOL] [EOL] assertEquals( request, request2 ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       boolean[] booleanArray1 = new boolean[9]; [EOL]       compareToBuilder0.append(booleanArray0, booleanArray1); [EOL]       compareToBuilder0.append('P', 'j'); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = 'l'; [EOL]       charArray0[2] = '4'; [EOL]       charArray0[3] = 'm'; [EOL]       charArray0[5] = '/'; [EOL]       charArray0[6] = '_'; [EOL]       charArray0[7] = 'F'; [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte) (-1); [EOL]       byteArray0[1] = (byte) (-23); [EOL]       byteArray0[2] = (byte) (-23); [EOL]       byteArray0[3] = (byte)0; [EOL]       byte[] byteArray1 = new byte[4]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte) (-23); [EOL]       byteArray1[2] = (byte) (-23); [EOL]       byteArray1[3] = (byte) (-23); [EOL]       equalsBuilder1.append(byteArray0, byteArray1); [EOL]       assertFalse(equalsBuilder1.isEquals()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = Fraction.getReducedFraction(0, 2374); [EOL]       Fraction fraction2 = fraction0.ONE_HALF.multiplyBy(fraction1); [EOL]       assertEquals(5635876, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testVisitElementWithSubs() throws Exception { [EOL] SessionContext context = TestUtils.createSessionContext(USER, "test"); [EOL] ElementContext elementContext = new ElementContext(new Id(), new Id()); [EOL] Space space = Space.PRIVATE; [EOL] CoreElement element = new CoreElement(); [EOL] element.setId(new Id()); [EOL] element.setNamespace(Namespace.ROOT_NAMESPACE); [EOL] element.setSubElements(Arrays.asList(new CoreElement(), new CoreElement(), new CoreElement())); [EOL] [EOL] visitor.visit(context, elementContext, space, element); [EOL] [EOL] verify(elementCommandFactoryMock).executeCommand(context, elementContext, space, element); [EOL] element.getSubElements().forEach(subElement -> { [EOL] Assert.assertEquals(subElement.getParentId(), element.getId()); [EOL] Assert.assertEquals(subElement.getNamespace(), [EOL] new Namespace(element.getNamespace(), element.getId())); [EOL] }); [EOL] } [EOL]
@Test [EOL] public void testAddSubscription() throws Exception [EOL] { [EOL] monitorDao.addSubscription( ENVIRONMENT_ID, SUBSCRIBER_ID ); [EOL] [EOL] assertTrue( monitorDao.findHandlersByEnvironment( ENVIRONMENT_ID ).contains( SUBSCRIBER_ID ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(boolean0); [EOL]       boolean boolean1 = mutableBoolean0.isTrue(); [EOL]       assertTrue(boolean1); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void standardIsDebugModeIsFalse() { [EOL] assertFalse(debugger.isDebugMode()); [EOL] } [EOL]
@Test [EOL] public void testDoExecute() throws Exception [EOL] { [EOL] command.doExecute(); [EOL] [EOL] assertTrue( getSysOut().contains( ID ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testmid()  throws Throwable  { [EOL]       String string0 = null; [EOL]       String string1 = StringUtils.mid((String) null, 0, 1805); [EOL]       assertNull(string1); [EOL]        [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = 1805; [EOL]       intArray0[1] = 0; [EOL]       intArray0[2] = 0; [EOL]       intArray0[3] = 1805; [EOL]       intArray0[4] = 1805; [EOL]       intArray0[5] = 1805; [EOL]       intArray0[6] = 1805; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(intArray0, '.', (-502), 0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -502 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldUseTestSuiteReportIfAlone() throws URISyntaxException { [EOL] SensorContextTester context = SensorContextTester.create(new File("")); [EOL] [EOL] parser.collect(context, getDir("onlyTestSuiteReport")); [EOL] [EOL] assertThat(context.measures(":org.sonar.SecondTest")).hasSize(6); [EOL] assertThat(context.measures(":org.sonar.JavaNCSSCollectorTest")).hasSize(6); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testExecuteCallback() throws Exception [EOL] { [EOL] environmentContainer.execute( COMMAND, CALLBACK ); [EOL] [EOL] verify( peer ).execute( COMMAND, environmentContainer, CALLBACK ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = 'B'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: "); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.deleteCharAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void translateQueryResponseTestWithReturnElementsIdOnly() throws Exception { [EOL] AbstractWitsmlObject wmlObject = WitsmlMarshal.deserializeFromJSON( [EOL] "{\"country\":\"\",\"groundElevation\":{\"datum\":null,\"uom\":null,\"value\":null},\"commonData\":{\"privateGroupOnly\":null,\"comments\":\"\",\"acquisitionTimeZone\":[],\"dTimLastChange\":null,\"extensionAny\":null,\"defaultDatum\":{\"value\":\"\",\"uidRef\":\"\"},\"itemState\":null,\"sourceName\":null,\"extensionNameValue\":[],\"serviceCategory\":null,\"dTimCreation\":null},\"county\":\"\",\"timeZone\":\"\",\"waterDepth\":{\"uom\":\"\",\"value\":null},\"numAPI\":\"\",\"operator\":\"\",\"pcInterest\":{\"uom\":\"\",\"value\":null},\"referencePoint\":[{\"elevation\":{\"datum\":\"\",\"uom\":null,\"value\":null},\"uid\":\"\",\"measuredDepth\":{\"datum\":\"\",\"uom\":null,\"value\":null},\"name\":\"\",\"location\":[{\"uid\":\"\",\"easting\":{\"uom\":\"\",\"value\":null},\"wellCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"latitude\":{\"uom\":\"\",\"value\":null},\"localY\":{\"uom\":\"\",\"value\":null},\"description\":\"\",\"localX\":{\"uom\":\"\",\"value\":null},\"extensionNameValue\":[],\"northing\":{\"uom\":\"\",\"value\":null},\"longitude\":{\"uom\":\"\",\"value\":null}}],\"type\":\"\",\"extensionNameValue\":[]}],\"wellLocation\":[{\"uid\":\"\",\"easting\":{\"uom\":\"\",\"value\":null},\"wellCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"description\":\"\",\"extensionNameValue\":[],\"northing\":{\"uom\":\"\",\"value\":null}}],\"uid\":\"randy\",\"wellheadElevation\":{\"datum\":null,\"uom\":null,\"value\":null},\"field\":\"\",\"wellCRS\":[{\"uid\":\"\",\"localCRS\":{\"yAxisAzimuth\":{\"uom\":\"\",\"northDirection\":null,\"value\":null}},\"mapProjectionCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"geodeticCRS\":{\"value\":\"\",\"uidRef\":\"\"},\"name\":\"\",\"description\":\"\",\"extensionNameValue\":[]}],\"nameLegal\":\"\",\"district\":\"\",\"numGovt\":\"\",\"block\":\"\",\"state\":\"\",\"region\":\"\",\"operatorDiv\":\"\",\"wellDatum\":[{\"elevation\":{\"datum\":\"\",\"uom\":null,\"value\":null},\"uid\":\"\",\"datumName\":{\"namingSystem\":\"\",\"code\":\"\",\"value\":\"\"},\"kind\":[],\"name\":\"\",\"extensionNameValue\":[]}]}", [EOL] com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell.class); [EOL] [EOL] String responseString = "{\"country\":\"US\",\"dTimLicense\":\"2001-05-15T13:20:00+00:00\",\"numLicense\":\"Company License Number\",\"county\":\"Montgomery\",\"waterDepth\":{\"uom\":\"ft\",\"value\":520},\"operator\":\"Operating Company\",\"pcInterest\":{\"uom\":\"%\",\"value\":65},\"dTimPa\":\"2001-07-15T15:30:00+00:00\",\"uid\":\"randy\",\"nameLegal\":\"Company Legal Name\",\"block\":\"Block Name\",\"state\":\"TX\",\"operatorDiv\":\"Division Name\",\"groundElevation\":{\"uom\":\"FT\",\"value\":250},\"commonData\":{\"comments\":\"These are the comments associated with the Well data object.\",\"dTimLastChange\":\"2019-01-30T14:09:27.268843+00:00\",\"acquisitionTimeZone\":[],\"defaultDatum\":{\"value\":\"Kelly Bushing\",\"uidRef\":\"KB\"},\"itemState\":\"PLAN\",\"extensionNameValue\":[],\"dTimCreation\":\"2019-01-24T16:59:38.88059+00:00\"},\"timeZone\":\"-06:00\",\"statusWell\":\"DRILLING\",\"purposeWell\":\"EXPLORATION\",\"numAPI\":\"123-543-987AZ\",\"referencePoint\":[{\"uid\":\"SRP1\",\"name\":\"Slot Bay Centre\",\"location\":[{\"uid\":\"loc-1\",\"easting\":{\"uom\":\"m\",\"value\":425366.47},\"wellCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"proj1\"},\"extensionNameValue\":[],\"northing\":{\"uom\":\"m\",\"value\":6623781.95}},{\"uid\":\"loc-2\",\"wellCRS\":{\"value\":\"WellOneWSP\",\"uidRef\":\"localWell1\"},\"localY\":{\"uom\":\"m\",\"value\":-3.74},\"description\":\"Location of the Site Reference Point with respect to the well surface point\",\"localX\":{\"uom\":\"m\",\"value\":12.63},\"extensionNameValue\":[]}],\"type\":\"Site Reference Point\",\"extensionNameValue\":[]},{\"elevation\":{\"datum\":\"SL\",\"uom\":\"FT\",\"value\":-118.4},\"uid\":\"WRP2\",\"measuredDepth\":{\"datum\":\"KB\",\"uom\":\"FT\",\"value\":173.09},\"name\":\"Sea Bed\",\"location\":[{\"uid\":\"loc-1\",\"easting\":{\"uom\":\"m\",\"value\":425353.84},\"wellCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"proj1\"},\"extensionNameValue\":[],\"northing\":{\"uom\":\"m\",\"value\":6623785.69}},{\"uid\":\"loc-2\",\"wellCRS\":{\"value\":\"ED50\",\"uidRef\":\"geog1\"},\"latitude\":{\"uom\":\"dega\",\"value\":59.743844},\"extensionNameValue\":[],\"longitude\":{\"uom\":\"dega\",\"value\":1.67198083}}],\"type\":\"Well Reference Point\",\"extensionNameValue\":[]}],\"wellLocation\":[{\"uid\":\"loc-1\",\"easting\":{\"uom\":\"m\",\"value\":425353.84},\"wellCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"proj1\"},\"description\":\"Location of well surface point in projected system.\",\"extensionNameValue\":[],\"northing\":{\"uom\":\"m\",\"value\":6623785.69}}],\"wellheadElevation\":{\"uom\":\"FT\",\"value\":500},\"field\":\"Big Field\",\"dTimSpud\":\"2001-05-31T08:15:00+00:00\",\"wellCRS\":[{\"uid\":\"geog1\",\"geodeticCRS\":{\"value\":\"4230\",\"uidRef\":\"4230\"},\"name\":\"ED50\",\"description\":\"ED50 system with EPSG code 4230.\",\"extensionNameValue\":[]},{\"uid\":\"proj1\",\"mapProjectionCRS\":{\"value\":\"ED50 \\/ UTM Zone 31N\",\"uidRef\":\"23031\"},\"name\":\"ED50 \\/ UTM Zone 31N\",\"extensionNameValue\":[]},{\"uid\":\"localWell1\",\"localCRS\":{\"usesWellAsOrigin\":true,\"xRotationCounterClockwise\":false,\"yAxisAzimuth\":{\"uom\":\"dega\",\"northDirection\":\"GRID_NORTH\",\"value\":0}},\"name\":\"WellOneWSP\",\"extensionNameValue\":[]}],\"district\":\"District Name\",\"name\":\"6507\\/7-A-42\",\"numGovt\":\"Govt-Number\",\"region\":\"Region Name\",\"wellDatum\":[{\"elevation\":{\"datum\":\"SL\",\"uom\":\"FT\",\"value\":78.5},\"uid\":\"KB\",\"code\":\"KB\",\"kind\":[],\"name\":\"Kelly Bushing\",\"extensionNameValue\":[]},{\"uid\":\"SL\",\"code\":\"SL\",\"datumName\":{\"namingSystem\":\"EPSG\",\"code\":\"5106\",\"value\":\"Caspian Sea\"},\"kind\":[],\"name\":\"Sea Level\",\"extensionNameValue\":[]}]}"; [EOL] [EOL] Map<String, String> optionsIn = new HashMap<>(); [EOL] // change this to id-only [EOL] optionsIn.put("returnElements", "id-only"); [EOL] [EOL] // get query response [EOL] AbstractWitsmlObject abstractWitsmlObject = DotTranslator.translateQueryResponse(wmlObject, responseString, optionsIn); [EOL] [EOL] assertTrue(abstractWitsmlObject instanceof com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell); [EOL] [EOL] com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell objWell = (com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell) abstractWitsmlObject; [EOL] [EOL] assertEquals(null, objWell.getNumLicense()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testregister()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append('['); [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)37; [EOL]       shortArray0[1] = (short) (-1872); [EOL]       shortArray0[2] = (short)2; [EOL]       HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, true); [EOL]       shortArray0[3] = (short)2; [EOL]       shortArray0[4] = (short) (-132); [EOL]       HashCodeBuilder.getRegistry(); [EOL]       shortArray0[5] = (short) (-1654); [EOL]       shortArray0[6] = (short)778; [EOL]       hashCodeBuilder1.append(shortArray0); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder1.append((int[]) null); [EOL]       IDKey iDKey0 = new IDKey(hashCodeBuilder2); [EOL]       HashCodeBuilder.register(iDKey0); [EOL]       Integer integer0 = hashCodeBuilder2.build(); [EOL]       assertEquals((-847924507), (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeHtml3()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml3("_uKyBnE~p"); [EOL]       assertEquals("_uKyBnE~p", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[3] = (-426); [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, (-426), 102); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1083)); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(integer0, toStringStyle0); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append(byteArray0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)15); [EOL]       assertEquals(9, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((Object) "!Z;sl 2pEf u", object0, (Comparator<?>) comparator0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testInit() throws Exception [EOL] { [EOL] peerManager.init(); [EOL] [EOL] verify( localPeer, atLeastOnce() ).addRequestListener( any( RequestListener.class ) ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]       assertEquals(2, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.trim(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.chop(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('\'', '~'); [EOL]       CharRange charRange1 = CharRange.isNot('M'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertEquals('\'', charRange0.getStart()); [EOL]       assertEquals('M', charRange1.getStart()); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldListPlugins(@TempDir final Path home) throws Exception { [EOL] createConfig(home, "allure-test.yml"); [EOL] [EOL] final ConfigOptions options = mock(ConfigOptions.class); [EOL] when(options.getProfile()).thenReturn("test"); [EOL] final Commands commands = new Commands(home); [EOL] final ExitCode exitCode = commands.listPlugins(options); [EOL] [EOL] assertThat(exitCode) [EOL] .isEqualTo(ExitCode.NO_ERROR); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Double double0 = new Double((-30.60225976818994)); [EOL]       MutableLong mutableLong0 = new MutableLong(double0); [EOL]       mutableLong0.add((Number) double0); [EOL]       assertEquals((short) (-60), mutableLong0.shortValue()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testCreateMessage() throws Exception [EOL] { [EOL] Message message = messenger.createMessage( PAYLOAD ); [EOL] [EOL] assertNotNull( message ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.toBooleanDefaultIfNull((Boolean) null, false); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void toList() throws Exception { [EOL] BatchLineReader reader = create(TEXT_COMBINED); [EOL] List<Line> stringList = reader.toLineList(); [EOL] [EOL] assertEquals(11, stringList.size()); [EOL] assertEquals("Test\r", stringList.get(0).toString()); [EOL] assertEquals("Test2\r\n", stringList.get(1).toString()); [EOL] assertEquals("Test3\n", stringList.get(2).toString()); [EOL] assertEquals("Test4\r", stringList.get(3).toString()); [EOL] assertEquals("\r", stringList.get(4).toString()); [EOL] assertEquals("\r\n", stringList.get(5).toString()); [EOL] assertEquals("\r\n", stringList.get(6).toString()); [EOL] assertEquals("Test5\n", stringList.get(7).toString()); [EOL] assertEquals("Test6\r\n", stringList.get(8).toString()); [EOL] assertEquals("Test7\n", stringList.get(9).toString()); [EOL] assertEquals("\n", stringList.get(10).toString()); [EOL] reader.close(); [EOL] } [EOL]
@Test [EOL] public void testGetNonExisting() { [EOL] Id itemId = new Id(); [EOL] Item retrieveItem = null; [EOL] Response<Item> itemResponse = new Response<>(retrieveItem); [EOL] doReturn(itemResponse).when(stateAdaptorMock).getItem(context, itemId); [EOL] Item item = itemManagerImpl.get(context, itemId); [EOL] Assert.assertNull(item); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f"); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.setDelimiterChar('S'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testCLONE_CONTAINERS() throws Exception [EOL] { [EOL] workflow.CLONE_CONTAINERS(); [EOL] [EOL] verify( environmentManager ).update( environment ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2"); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) (-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.ensureCapacity((-1)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));yKvV#~sM4D<2")); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(charArray1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.mid("-", (-385), (-385)); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "|qO{l0uUU|R8lUrfn"; [EOL]       long[] longArray0 = new long[9]; [EOL]       longArray0[0] = (long) (-385); [EOL]       longArray0[1] = (long) (-385); [EOL]       longArray0[2] = (long) (-385); [EOL]       longArray0[3] = (long) (-385); [EOL]       longArray0[4] = 3213L; [EOL]       longArray0[5] = (long) (-385); [EOL]       longArray0[6] = (long) (-385); [EOL]       longArray0[7] = (long) (-385); [EOL]       String string1 = StringUtils.join(longArray0, 'D'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) "-385D-385D-385D-385D3213D-385D-385D-385D0"; [EOL]       charSequenceArray0[7] = (CharSequence) "|qO{l0uUU|R8lUrfn"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('F'); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, true, true, true}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testCall() throws Exception [EOL] { [EOL] doReturn( response ).when( webClient ).post( anyString() ); [EOL] doReturn( Response.Status.ACCEPTED.getStatusCode() ).when( response ).getStatus(); [EOL] [EOL] remotePeerMessageSender.call(); [EOL] [EOL] verify( webClient ).post( anyString() ); [EOL] verify( messengerDataService ).markAsSent( envelope ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("<#"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Date date0 = fastDateParser0.parse("<#"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       char[] charArray1 = new char[0]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGetState() [EOL] { [EOL] List<Bundle> bundles = Lists.newArrayList( bundle ); [EOL] [EOL] doReturn( bundles.toArray( new Bundle[0] ) ).when( bundleContext ).getBundles(); [EOL] [EOL] assertEquals( HealthService.State.LOADING, healthRestService.getState() ); [EOL] [EOL] doReturn( BundleState.Failure ).when( bundleStateService ).getState( bundle ); [EOL] [EOL] for ( int i = 0; i <= HealthService.BUNDLE_COUNT; i++ ) [EOL] { [EOL] bundles.add( bundle ); [EOL] } [EOL] [EOL] doReturn( bundles.toArray( new Bundle[0] ) ).when( bundleContext ).getBundles(); [EOL] [EOL] assertEquals( HealthService.State.FAILED, healthRestService.getState() ); [EOL] [EOL] doReturn( BundleState.Active ).when( bundleStateService ).getState( bundle ); [EOL] [EOL] assertEquals( HealthService.State.READY, healthRestService.getState() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAsObjectToString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.appendAsObjectToString(object0); [EOL]       assertSame(toStringBuilder0, toStringBuilder1); [EOL]   } [EOL]  [EOL]
@Test [EOL] void shouldGetSqlQueryStatementsFromUnknowns() { [EOL] String result = target.getSqlQueryStatements(Set.of("data.pets")); [EOL] assertThat(result, is("SELECT * FROM pets WHERE (pets.owner = 'alice' AND pets.name = 'fluffy') OR (pets.veterinarian = 'alice' AND pets.clinic = 'SOMA' AND pets.name = 'fluffy');")); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = CharSequenceUtils.indexOf("", (-1), 2); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL] public void badSyntaxWithIndexing() { [EOL] ProtobufPathParser.parse("$.foo[[1]"); [EOL] } [EOL]
@Test [EOL] public void testEncode() { [EOL] assertEquals("string", Util.Encode("string")); [EOL] assertEquals("part1%2Fpart2", Util.Encode("part1/part2")); [EOL] assertEquals("part1%25part2", Util.Encode("part1%part2")); [EOL] } [EOL]
@Test [EOL] public void testUpdate() throws Exception [EOL] { [EOL] doReturn( environment ).when( environmentService ).merge( environment ); [EOL] [EOL] environmentManager.update( environment ); [EOL] [EOL] verify( environmentService, atLeastOnce() ).merge( environment ); [EOL] [EOL] //----- [EOL] [EOL] BazaarEnvironment bzrEnvironment = mock( BazaarEnvironment.class ); [EOL] reset( environmentService ); [EOL] [EOL] environmentManager.update( bzrEnvironment ); [EOL] [EOL] verify( environmentService, never() ).merge( environment ); [EOL] } [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] host.execute( requestBuilder ); [EOL] [EOL] verify( peer ).execute( requestBuilder, host, null ); [EOL] } [EOL]
@Test [EOL] public void poolIsAbleToAllocateTheRequiredNumberOfPages() { [EOL] final int pageCount = 10; [EOL] MemorySegmentPool pool = new MemorySegmentPool(pageCount * MemorySegmentPool.PAGE_SIZE); [EOL] [EOL] for (int i = 0; i < pageCount; i++) { [EOL] MemorySegment segment = pool.nextSegment(); [EOL] [EOL] assertThat(segment, notNullValue()); [EOL] assertThat(segment.size(), is(MemorySegmentPool.PAGE_SIZE)); [EOL] } [EOL] [EOL] assertThat(pool.nextSegment(), nullValue()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(106, strBuilder0.length()); [EOL]       assertEquals(106, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]       assertEquals(115, strBuilder0.length()); [EOL]       assertEquals(115, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(119, strBuilder0.length()); [EOL]       assertEquals(119, strBuilder2.length()); [EOL]       assertEquals(119, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder2.length()); [EOL]       assertEquals(120, strBuilder3.length()); [EOL]       assertEquals(120, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder1.length()); [EOL]       assertEquals(120, strBuilder5.length()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertEquals(120, strBuilder0.length()); [EOL]       assertEquals(120, strBuilder2.length()); [EOL]       assertEquals(120, strBuilder6.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtokenize()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder"); [EOL]       String string0 = strTokenizer0.toString(); [EOL]       assertEquals("StrTokenizer[not tokenized yet]", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       strTokenizer0.previousToken(); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('N'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll("", (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       String string1 = strBuilder0.rightString((-2383)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void removeLastEndingCRLF() { [EOL] String line = "Test" + CRLF + CRLF; [EOL] assertEquals("Test" + CRLF, BatchParserCommon.removeEndingCRLF(new Line(line, 1)).toString()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '$'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1774), charArray0, 2269, 2269); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1774 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test [EOL] public void testGet() throws Exception [EOL] { [EOL] expiringCache.get( object ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(2954, strBuilder0.length()); [EOL]       assertEquals(2954, strBuilder4.length()); [EOL]       assertEquals(2954, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertEquals(5777, strBuilder0.length()); [EOL]       assertEquals(5777, strBuilder1.length()); [EOL]       assertEquals(5777, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5782, strBuilder7.length()); [EOL]       assertEquals(5782, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5800, strBuilder0.length()); [EOL]       assertEquals(5800, strBuilder8.length()); [EOL]       assertEquals(5800, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder9.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder2.length()); [EOL]       assertEquals(8622, strBuilder3.length()); [EOL]       assertEquals(8622, strBuilder6.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder8.new StrBuilderTokenizer(); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder8.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder8.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(8622, strBuilder0.length()); [EOL]       assertEquals(8622, strBuilder8.length()); [EOL]       assertEquals(8622, strBuilder1.length()); [EOL]       assertEquals(8622, strBuilder10.length()); [EOL]        [EOL]       StrBuilder strBuilder11 = strBuilder6.deleteFirst('\\'); [EOL]       assertEquals(8621, strBuilder0.length()); [EOL]       assertEquals(8621, strBuilder1.length()); [EOL]       assertEquals(8621, strBuilder11.length()); [EOL]       assertEquals(8621, strBuilder6.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdecrement()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       mutableDouble0.getValue(); [EOL]       assertEquals((-1), mutableDouble0.intValue()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void grantedDenied() { [EOL] int[] denied = {PackageManager.PERMISSION_GRANTED, PackageManager.PERMISSION_DENIED}; [EOL] assertFalse(mManager.granted(REQUEST_CODE, REQUIRED_PERMS, denied)); [EOL] } [EOL]
@Test [EOL] public void testExecute() throws Exception [EOL] { [EOL] doReturn( true ).when( taskResult ).hasSucceeded(); [EOL] [EOL] step.execute(); [EOL] [EOL] verify( environmentManager ).loadEnvironment( TestHelper.ENV_ID ); [EOL] [EOL] doReturn( false ).when( taskResult ).hasSucceeded(); [EOL] [EOL] step.execute(); [EOL] [EOL] verify( environmentManager, times( 2 ) ).loadEnvironment( TestHelper.ENV_ID ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right((String) null, (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]       assertEquals(8, shortArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfThrowable()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       MockThrowable mockThrowable1 = new MockThrowable(); [EOL]       mockThrowable0.initCause(mockThrowable1); [EOL]       Class<Throwable> class0 = Throwable.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test [EOL] void testSingleNDCInformationLogging() throws Exception { [EOL] record.setNdc("exampleTag"); [EOL] JsonNode result = objectMapper.readTree(formatter.format(record)); [EOL] assertThat(result.get("tags")).hasSize(1); [EOL] assertThat(result.get("tags").get(0).textValue()).isEqualTo("exampleTag"); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT"); [EOL]        [EOL]       String string0 = StringUtils.substringAfter("TT", "TT"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.repeat("", 116); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       String string3 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT"); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string1));W-R>", string4); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122); [EOL]        [EOL]       String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("xQD3IhI"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) ""); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       String string5 = StringUtils.reverseDelimited("", ']'); [EOL]       assertTrue(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertTrue(string5.equals((Object)string2)); [EOL]       assertTrue(string5.equals((Object)string0)); [EOL]       assertTrue(string5.equals((Object)string1)); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "xQD3IhI"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>"; [EOL]       int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean4 = StringUtils.isWhitespace("TT"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAccessible()  throws Throwable  { [EOL]       Member member0 = mock(Member.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(member0).getModifiers(); [EOL]       boolean boolean0 = MemberUtils.isAccessible(member0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(expected=SerializerException.class) [EOL] public void edmAssitedSerializer() throws SerializerException { [EOL] odata.createEdmAssistedSerializer(null); [EOL] } [EOL]
@Test [EOL] public void testGetEnvironmentAlertHandlers() throws Exception [EOL] { [EOL] EnvironmentAlertHandler environmentAlertHandler = mock( EnvironmentAlertHandler.class ); [EOL] doReturn( Sets.newHashSet( environmentAlertHandler ) ).when( environment ).getAlertHandlers(); [EOL] doReturn( "ID" ).when( environmentAlertHandler ).getAlertHandlerId(); [EOL] doReturn( AlertHandlerPriority.HIGH ).when( environmentAlertHandler ).getAlertHandlerPriority(); [EOL] AlertHandler alertHandler = mock( AlertHandler.class ); [EOL] environmentManager.alertHandlers.put( "ID", alertHandler ); [EOL] [EOL] [EOL] assertFalse( environmentManager.getEnvironmentAlertHandlers( TestHelper.ENVIRONMENT_ID ).getAllHandlers() [EOL] .isEmpty() ); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(4); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('2'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       IDKey iDKey0 = new IDKey("yXF20W=RcpY4f"); [EOL]       boolean boolean0 = iDKey0.equals("yXF20W=RcpY4f"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void complexOrPrimitiveType() { [EOL] ContextURL contextURL = ContextURLParser.parse(URI.create("http://host/service/$metadata#Edm.String")); [EOL] [EOL] assertEquals("Edm.String", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] [EOL] contextURL = ContextURLParser.parse(URI.create("http://host/service/$metadata#ODataDemo.Address")); [EOL] [EOL] assertEquals("ODataDemo.Address", contextURL.getEntitySetOrSingletonOrType()); [EOL] assertNull(contextURL.getDerivedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("T0]6[>UOMVX"); [EOL]       assertEquals(11, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNewLineText("Invalid startIndex: "); [EOL]       assertEquals(11, strBuilder0.length()); [EOL]       assertEquals(11, strBuilder1.length()); [EOL]        [EOL]       int int0 = 554; [EOL]       int int1 = (-1164); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append("T0]6[>UOMVX", 554, (-1164)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadjustYear()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       int int0 = fastDateParser0.adjustYear(2167); [EOL]       assertEquals(4067, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       Class<Long> class0 = Long.TYPE; [EOL]       Class<Boolean> class1 = Boolean.TYPE; [EOL]       boolean boolean0 = ClassUtils.isAssignable(class1, class0, true); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test [EOL] public void shouldNotInsertZeroOnFiles() throws URISyntaxException { [EOL] SensorContext context = mock(SensorContext.class); [EOL] parser.collect(context, getDir("noTests")); [EOL] [EOL] verify(context, never()).newMeasure(); [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Object object0 = fastDateParser0.parseObject("<#"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", object0.toString()); [EOL]   } [EOL]  [EOL]
