04/06/2022 01:56:25 - INFO - __main__ -   Namespace(adam_epsilon=1e-08, beam_size=10, cal_blue=0, config_name='graphcodebert-base', dev_filename='dataset/small/eval_evo_80.methods,dataset/small/eval_evo_80.tests', do_eval=True, do_lower_case=False, do_test=False, do_train=True, eval_batch_size=16, eval_steps=-1, gradient_accumulation_steps=1, learning_rate=0.0001, load_model_path=None, local_rank=-1, max_grad_norm=1.0, max_source_length=512, max_steps=-1, max_target_length=240, model_name_or_path='graphcodebert-base', model_type='roberta', no_cuda=False, num_train_epochs=5, output_dir='saved_models/dec_6_eval_test_data_contex_Assert_graphcodebert_511_240/methods-tests/', seed=42, source_lang='java', test_filename=None, tokenizer_name='graphcodebert-base', train_batch_size=16, train_filename='dataset/small/train_evo_80.methods,dataset/small/train_evo_80.tests', train_steps=-1, warmup_steps=0, weight_decay=0.0)
04/06/2022 01:56:25 - INFO - __main__ -   0
Some weights of the model checkpoint at graphcodebert-base were not used when initializing RobertaModel: ['lm_head.decoder.bias', 'lm_head.layer_norm.weight', 'lm_head.bias', 'lm_head.dense.weight', 'lm_head.dense.bias', 'lm_head.layer_norm.bias', 'lm_head.decoder.weight']
- This IS expected if you are initializing RobertaModel from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPreTraining model).
- This IS NOT expected if you are initializing RobertaModel from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
Some weights of RobertaModel were not initialized from the model checkpoint at graphcodebert-base and are newly initialized: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
  0%|          | 0/80 [00:00<?, ?it/s]04/06/2022 01:56:31 - INFO - __main__ -   *** Example ***
04/06/2022 01:56:31 - INFO - __main__ -   source_tokens: ['<s>', 'Str', 'Token', 'izer', '_[', '_E', 'OL', '_]', '_', '_public', '_Str', 'Token', 'izer', '_set', 'Del', 'im', 'iter', 'String', '_', '_(', '_final', '_String', '_delim', '_)', '_{', '_[', '_E', 'OL', '_]', '_return', '_set', 'Del', 'im', 'iter', 'Mat', 'cher', '_(', '_Str', 'Mat', 'cher', '_.', '_string', 'Mat', 'cher', '_(', '_delim', '_)', '_)', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_private', '_static', '_Str', 'Token', 'izer', '_get', 'CS', 'V', 'Cl', 'one', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Str', 'Token', 'izer', '_get', 'CS', 'V', 'Instance', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Str', 'Token', 'izer', '_get', 'CS', 'V', 'Instance', '_', '_(', '_final', '_String', '_input', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Str', 'Token', 'izer', '_get', 'CS', 'V', 'Instance', '_', '_(', '_final', '_char', '_[', '_]', '_input', '_)', '_[', '_E', 'OL', '_]', '_private', '_static', '_Str', 'Token', 'izer', '_get', 'TS', 'V', 'Cl', 'one', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Str', 'Token', 'izer', '_get', 'TS', 'V', 'Instance', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Str', 'Token', 'izer', '_get', 'TS', 'V', 'Instance', '_', '_(', '_final', '_String', '_input', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Str', 'Token', 'izer', '_get', 'TS', 'V', 'Instance', '_', '_(', '_final', '_char', '_[', '_]', '_input', '_)', '_[', '_E', 'OL', '_]', '_public', '_int', '_size', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_String', '_next', 'Token', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_String', '_previous', 'Token', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_String', '_[', '_]', '_get', 'Token', 'Array', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_List', '_<', '_String', '_>', '_get', 'Token', 'List', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Token', 'izer', '_reset', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Token', 'izer', '_reset', '_', '_(', '_final', '_String', '_input', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Token', 'izer', '_reset', '_', '_(', '_final', '_char', '_[', '_]', '_input', '_)', '_[', '_E', 'OL', '_]', '_public', '_boolean', '_has', 'Next', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_String', '_next', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_int', '_next', 'Index', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_boolean', '_has', 'Previous', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_String', '_previous', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_int', '_previous', 'Index', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_void', '_remove', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_void', '_set', '_', '_(', '_final', '_String', '_obj', '_)', '_[', '_E', 'OL', '_]', '_public', '_void', '_add', '_', '_(', '_final', '_String', '_obj', '_)', '_[', '_E', 'OL', '_]', '_private', '_void', '_check', 'Token', 'ized', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_protected', '_List', '_<', '_String', '_>', '_token', 'ize', '_', '_(', '_final', '_char', '_[', '_]', '_chars', '_,', '_final', '_int', '_offset', '_,', '_final', '_int', '_count', '_)', '_[', '_E', 'OL', '_]', '_private', '_void', '_add', 'Token', '_', '_(', '_final', '_List', '_<', '_String', '_>', '_list', '_,', '_String', '_to', 'k', '_)', '_[', '_E', 'OL', '_]', '_private', '_int', '_read', 'Next', 'Token', '_', '_(', '_final', '_char', '_[', '_]', '_chars', '_,', '_int', '_start', '_,', '_final', '_int', '_len', '_,', '_final', '_Str', 'Builder', '_work', 'Area', '_,', '_final', '_List', '_<', '_String', '_>', '_tokens', '_)', '_[', '_E', 'OL', '_]', '_private', '_int', '_read', '</s>', 'StrTokenizer']
04/06/2022 01:56:31 - INFO - __main__ -   source_ids: 0 29116 45643 6315 646 381 3384 27779 1437 285 5997 45643 6315 278 21502 757 8660 34222 1437 36 507 26602 45382 4839 25522 646 381 3384 27779 671 278 21502 757 8660 30121 5260 36 5997 30121 5260 479 6755 30121 5260 36 45382 4839 4839 25606 1437 646 381 3384 27779 35524 646 381 3384 27779 940 25156 5997 45643 6315 120 6842 846 11428 1264 1437 36 4839 646 381 3384 27779 285 25156 5997 45643 6315 120 6842 846 49483 1437 36 4839 646 381 3384 27779 285 25156 5997 45643 6315 120 6842 846 49483 1437 36 507 26602 8135 4839 646 381 3384 27779 285 25156 5997 45643 6315 120 6842 846 49483 1437 36 507 16224 646 27779 8135 4839 646 381 3384 27779 940 25156 5997 45643 6315 120 2685 846 11428 1264 1437 36 4839 646 381 3384 27779 285 25156 5997 45643 6315 120 2685 846 49483 1437 36 4839 646 381 3384 27779 285 25156 5997 45643 6315 120 2685 846 49483 1437 36 507 26602 8135 4839 646 381 3384 27779 285 25156 5997 45643 6315 120 2685 846 49483 1437 36 507 16224 646 27779 8135 4839 646 381 3384 27779 285 6979 1836 1437 36 4839 646 381 3384 27779 285 26602 220 45643 1437 36 4839 646 381 3384 27779 285 26602 986 45643 1437 36 4839 646 381 3384 27779 285 26602 646 27779 120 45643 48222 1437 36 4839 646 381 3384 27779 285 9527 28696 26602 8061 120 45643 36583 1437 36 4839 646 381 3384 27779 285 5997 45643 6315 18821 1437 36 4839 646 381 3384 27779 285 5997 45643 6315 18821 1437 36 507 26602 8135 4839 646 381 3384 27779 285 5997 45643 6315 18821 1437 36 507 16224 646 27779 8135 4839 646 381 3384 27779 285 49378 34 19192 1437 36 4839 646 381 3384 27779 285 26602 220 1437 36 4839 646 381 3384 27779 285 6979 220 45673 1437 36 4839 646 381 3384 27779 285 49378 34 44716 1437 36 4839 646 381 3384 27779 285 26602 986 1437 36 4839 646 381 3384 27779 285 6979 986 45673 1437 36 4839 646 381 3384 27779 285 13842 3438 1437 36 4839 646 381 3384 27779 285 13842 278 1437 36 507 26602 26907 4839 646 381 3384 27779 285 13842 1606 1437 36 507 26602 26907 4839 646 381 3384 27779 940 13842 1649 45643 1538 1437 36 4839 646 381 3384 27779 4371 9527 28696 26602 8061 19233 2072 1437 36 507 16224 646 27779 49160 2156 507 6979 6147 2156 507 6979 3212 4839 646 381 3384 27779 940 13842 1606 45643 1437 36 507 9527 28696 26602 8061 889 2156 26602 7 330 4839 646 381 3384 27779 940 6979 1166 19192 45643 1437 36 507 16224 646 27779 49160 2156 6979 386 2156 507 6979 25528 2156 507 5997 45200 173 42895 2156 507 9527 28696 26602 8061 22121 4839 646 381 3384 27779 940 6979 1166 2 3
04/06/2022 01:56:31 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:31 - INFO - __main__ -   position_idx: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 0]
04/06/2022 01:56:31 - INFO - __main__ -   dfg_to_code: (1, 4)
04/06/2022 01:56:31 - INFO - __main__ -   dfg_to_dfg: []
04/06/2022 01:56:31 - INFO - __main__ -   target_tokens: ['<s>', '@', 'Test', '(', 'timeout', '_=', '_4000', ')', '_[', 'E', 'OL', ']', '_', '_', '_public', '_void', '_test', 'set', 'Del', 'im', 'iter', 'String', '()', '_', '_throws', '_Throw', 'able', '_', '_{', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_char', '[]', '_char', 'Array', '0', '_=', '_new', '_char', '[', '9', '];', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_char', 'Array', '0', '[', '0', ']', '_=', "_'", 'u', "';", '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_char', 'Array', '0', '[', '6', ']', '_=', "_'", '0', "';", '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_Str', 'Mat', 'cher', '_str', 'Mat', 'cher', '0', '_=', '_Str', 'Mat', 'cher', '.', 'tr', 'im', 'Mat', 'cher', '();', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_Str', 'Token', 'izer', '_str', 'Token', 'izer', '0', '_=', '_new', '_Str', 'Token', 'izer', '(', 'char', 'Array', '0', ',', '_str', 'Mat', 'cher', '0', ',', '_str', 'Mat', 'cher', '0', ');', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_str', 'Token', 'izer', '0', '.', 'next', '();', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_str', 'Token', 'izer', '0', '.', 'next', '();', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_Str', 'Token', 'izer', '_str', 'Token', 'izer', '1', '_=', '_str', 'Token', 'izer', '0', '.', 'set', 'Del', 'im', 'iter', 'String', '("', 'rc', 'JP', '~', '");', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_assert', 'Same', '(', 'str', 'Token', 'izer', '1', ',', '</s>']
04/06/2022 01:56:31 - INFO - __main__ -   target_ids: 0 1039 34603 1640 49109 5457 32542 43 646 717 3384 742 1437 1437 285 13842 1296 8738 21502 757 8660 34222 43048 1437 6989 28106 868 1437 25522 646 717 3384 742 1437 1437 1437 1437 1437 1437 16224 48992 16224 48222 288 5457 92 16224 10975 466 44082 646 717 3384 742 1437 1437 1437 1437 1437 1437 16224 48222 288 10975 288 742 5457 128 257 23500 646 717 3384 742 1437 1437 1437 1437 1437 1437 16224 48222 288 10975 401 742 5457 128 288 23500 646 717 3384 742 1437 1437 1437 1437 1437 1437 5997 30121 5260 7031 30121 5260 288 5457 5997 30121 5260 4 4328 757 30121 5260 47006 646 717 3384 742 1437 1437 1437 1437 1437 1437 5997 45643 6315 7031 45643 6315 288 5457 92 5997 45643 6315 1640 24262 48222 288 6 7031 30121 5260 288 6 7031 30121 5260 288 4397 646 717 3384 742 1437 1437 1437 1437 1437 1437 7031 45643 6315 288 4 25616 47006 646 717 3384 742 1437 1437 1437 1437 1437 1437 7031 45643 6315 288 4 25616 47006 646 717 3384 742 1437 1437 1437 1437 1437 1437 5997 45643 6315 7031 45643 6315 134 5457 7031 45643 6315 288 4 8738 21502 757 8660 34222 46469 22393 12887 34437 45751 646 717 3384 742 1437 1437 1437 1437 1437 1437 18088 42271 1640 6031 45643 6315 134 6 2
04/06/2022 01:56:31 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:31 - INFO - __main__ -   *** Example ***
04/06/2022 01:56:31 - INFO - __main__ -   source_tokens: ['<s>', 'String', 'Ut', 'ils', '_[', '_E', 'OL', '_]', '_', '_public', '_static', '_boolean', '_equals', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_cs', '1', '_,', '_final', '_Char', 'Sequ', 'ence', '_cs', '2', '_)', '_{', '_[', '_E', 'OL', '_]', '_if', '_(', '_cs', '1', '_==', '_cs', '2', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_', '_if', '_(', '_cs', '1', '_==', '_null', '_||', '_cs', '2', '_==', '_null', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_', '_if', '_(', '_cs', '1', '_instance', 'of', '_String', '_&&', '_cs', '2', '_instance', 'of', '_String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_cs', '1', '_.', '_equals', '_(', '_cs', '2', '_)', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_', '_return', '_Char', 'Sequ', 'ence', 'Ut', 'ils', '_.', '_region', 'Mat', 'ches', '_(', '_cs', '1', '_,', '_false', '_,', '_0', '_,', '_cs', '2', '_,', '_0', '_,', '_Math', '_.', '_max', '_(', '_cs', '1', '_.', '_length', '_(', '_)', '_,', '_cs', '2', '_.', '_length', '_(', '_)', '_)', '_)', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_is', 'Empty', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_cs', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_is', 'Not', 'Empty', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_cs', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_is', 'Bl', 'ank', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_cs', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_is', 'Not', 'Bl', 'ank', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_cs', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_trim', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_trim', 'To', 'Null', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_trim', 'To', 'Empty', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', 'To', 'Null', '_', '_(', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', 'To', 'Empty', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', '_', '_(', '_String', '_str', '_,', '_final', '_String', '_strip', 'Ch', 'ars', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', 'Start', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_String', '_strip', 'Ch', 'ars', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', 'End', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_String', '_strip', 'Ch', 'ars', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_[', '_]', '_strip', 'All', '_', '_(', '_final', '_String', '_...', '_str', 's', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_[', '_]', '_strip', 'All', '_', '_(', '_final', '_String', '_[', '_]', '_str', 's', '_,', '_final', '_String', '_strip', 'Ch', 'ars', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_String', '_strip', 'Acc', 'ents', '_', '_(', '_final', '_String', '_input', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_equals', 'Ign', 'ore', 'Case', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_str', '1', '_,', '_final', '_Char', 'Sequ', 'ence', '_str', '2', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_int', '_index', 'Of', '_', '_(', '</s>', 'EOL']
04/06/2022 01:56:31 - INFO - __main__ -   source_ids: 0 34222 41967 5290 646 381 3384 27779 1437 285 25156 49378 27601 1437 36 507 7275 48245 4086 42123 134 2156 507 7275 48245 4086 42123 176 4839 25522 646 381 3384 27779 114 36 42123 134 45994 42123 176 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 1437 114 36 42123 134 45994 23796 45056 42123 176 45994 23796 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 1437 114 36 42123 134 4327 1116 26602 48200 42123 176 4327 1116 26602 4839 25522 1437 646 381 3384 27779 671 42123 134 479 27601 36 42123 176 4839 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 1437 671 7275 48245 4086 41967 5290 479 976 30121 5559 36 42123 134 2156 3950 2156 321 2156 42123 176 2156 321 2156 11945 479 19220 36 42123 134 479 5933 36 4839 2156 42123 176 479 5933 36 4839 4839 4839 25606 1437 646 381 3384 27779 35524 646 381 3384 27779 285 25156 49378 16 47819 1437 36 507 7275 48245 4086 42123 4839 646 381 3384 27779 285 25156 49378 16 7199 47819 1437 36 507 7275 48245 4086 42123 4839 646 381 3384 27779 285 25156 49378 16 12654 3153 1437 36 507 7275 48245 4086 42123 4839 646 381 3384 27779 285 25156 49378 16 7199 12654 3153 1437 36 507 7275 48245 4086 42123 4839 646 381 3384 27779 285 25156 26602 10723 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 26602 10723 3972 49302 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 26602 10723 3972 47819 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 26602 9572 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 26602 9572 3972 49302 1437 36 26602 7031 4839 646 381 3384 27779 285 25156 26602 9572 3972 47819 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 26602 9572 1437 36 26602 7031 2156 507 26602 9572 4771 2726 4839 646 381 3384 27779 285 25156 26602 9572 33724 1437 36 507 26602 7031 2156 507 26602 9572 4771 2726 4839 646 381 3384 27779 285 25156 26602 9572 18547 1437 36 507 26602 7031 2156 507 26602 9572 4771 2726 4839 646 381 3384 27779 285 25156 26602 646 27779 9572 3684 1437 36 507 26602 1666 7031 29 4839 646 381 3384 27779 285 25156 26602 646 27779 9572 3684 1437 36 507 26602 646 27779 7031 29 2156 507 26602 9572 4771 2726 4839 646 381 3384 27779 285 25156 26602 9572 36984 4189 1437 36 507 26602 8135 4839 646 381 3384 27779 285 25156 49378 27601 45616 1688 38834 1437 36 507 7275 48245 4086 7031 134 2156 507 7275 48245 4086 7031 176 4839 646 381 3384 27779 285 25156 6979 1965 10643 1437 36 2 3
04/06/2022 01:56:31 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:31 - INFO - __main__ -   position_idx: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 0]
04/06/2022 01:56:31 - INFO - __main__ -   dfg_to_code: (5, 7)
04/06/2022 01:56:31 - INFO - __main__ -   dfg_to_dfg: []
04/06/2022 01:56:31 - INFO - __main__ -   target_tokens: ['<s>', '@', 'Test', '(', 'timeout', '_=', '_4000', ')', '_[', 'E', 'OL', ']', '_', '_', '_public', '_void', '_test', 'equ', 'als', '()', '_', '_throws', '_Throw', 'able', '_', '_{', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_String', '_string', '0', '_=', '_String', 'Ut', 'ils', '.', 'get', 'Common', 'Pref', 'ix', '((', 'String', '[', '])', '_null', ');', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_boolean', '_boolean', '0', '_=', '_String', 'Ut', 'ils', '.', 'is', 'All', 'U', 'pper', 'Case', '("', '");', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_String', '_string', '1', '_=', '_String', 'Ut', 'ils', '.', 'repeat', '("', 'h', 'Z', "'", 'ġ', 'p', 'C', '",', '_(', 'String', ')', '_null', ',', '_1', ');', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_assert', 'False', '(', 'string', '1', '.', 'equ', 'als', '((', 'Object', ')', 'string', '0', '));', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_char', '[]', '_char', 'Array', '0', '_=', '_new', '_char', '[', '7', '];', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_char', 'Array', '0', '[', '0', ']', '_=', "_'", 'r', "';", '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_char', 'Array', '0', '[', '1', ']', '_=', "_'", 't', "';", '_[', 'E', 'OL', ']', '_', '_', '_', '_', '</s>']
04/06/2022 01:56:31 - INFO - __main__ -   target_ids: 0 1039 34603 1640 49109 5457 32542 43 646 717 3384 742 1437 1437 285 13842 1296 8198 1536 43048 1437 6989 28106 868 1437 25522 646 717 3384 742 1437 1437 1437 1437 1437 1437 26602 6755 288 5457 26602 41967 5290 4 6460 40437 48670 3181 48461 34222 10975 45587 23796 4397 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 646 717 3384 742 1437 1437 1437 1437 1437 1437 49378 49378 288 5457 26602 41967 5290 4 354 3684 791 5961 38834 46469 45751 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 646 717 3384 742 1437 1437 1437 1437 1437 1437 26602 6755 134 5457 26602 41967 5290 4 47418 46469 298 1301 108 49802 642 347 1297 36 34222 43 23796 6 112 4397 646 717 3384 742 1437 1437 1437 1437 1437 1437 18088 46659 1640 20951 134 4 8198 1536 48461 46674 43 20951 288 48749 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 646 717 3384 742 1437 1437 1437 1437 1437 1437 16224 48992 16224 48222 288 5457 92 16224 10975 406 44082 646 717 3384 742 1437 1437 1437 1437 1437 1437 16224 48222 288 10975 288 742 5457 128 338 23500 646 717 3384 742 1437 1437 1437 1437 1437 1437 16224 48222 288 10975 134 742 5457 128 90 23500 646 717 3384 742 1437 1437 1437 1437 2
04/06/2022 01:56:31 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  2%|▎         | 2/80 [00:00<00:14,  5.29it/s]04/06/2022 01:56:31 - INFO - __main__ -   *** Example ***
04/06/2022 01:56:31 - INFO - __main__ -   source_tokens: ['<s>', 'Str', 'Builder', 'Token', 'izer', '_[', '_E', 'OL', '_]', '_', '_public', '_String', '_get', 'Null', 'Text', '_', '_(', '_)', '_{', '_[', '_E', 'OL', '_]', '_return', '_null', 'Text', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_Str', 'Builder', 'Reader', '_[', '_E', 'OL', '_]', '_', '_Str', 'Builder', 'Writer', '_[', '_E', 'OL', '_]', '_Str', 'Builder', '_[', '_E', 'OL', '_]', '_', '_public', '_String', '_get', 'New', 'Line', 'Text', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_set', 'New', 'Line', 'Text', '_', '_(', '_final', '_String', '_new', 'Line', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_set', 'Null', 'Text', '_', '_(', '_String', '_null', 'Text', '_)', '_[', '_E', 'OL', '_]', '_public', '_int', '_length', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_set', 'Length', '_', '_(', '_final', '_int', '_length', '_)', '_[', '_E', 'OL', '_]', '_public', '_int', '_capacity', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_ensure', 'Cap', 'acity', '_', '_(', '_final', '_int', '_capacity', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_minimize', 'Cap', 'acity', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_int', '_size', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_boolean', '_is', 'Empty', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_clear', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_char', '_char', 'At', '_', '_(', '_final', '_int', '_index', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_set', 'Char', 'At', '_', '_(', '_final', '_int', '_index', '_,', '_final', '_char', '_ch', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_delete', 'Char', 'At', '_', '_(', '_final', '_int', '_index', '_)', '_[', '_E', 'OL', '_]', '_public', '_char', '_[', '_]', '_to', 'Char', 'Array', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_char', '_[', '_]', '_to', 'Char', 'Array', '_', '_(', '_final', '_int', '_start', 'Index', '_,', '_int', '_end', 'Index', '_)', '_[', '_E', 'OL', '_]', '_public', '_char', '_[', '_]', '_get', 'Ch', 'ars', '_', '_(', '_char', '_[', '_]', '_destination', '_)', '_[', '_E', 'OL', '_]', '_public', '_void', '_get', 'Ch', 'ars', '_', '_(', '_final', '_int', '_start', 'Index', '_,', '_final', '_int', '_end', 'Index', '_,', '_final', '_char', '_[', '_]', '_destination', '_,', '_final', '_int', '_destination', 'Index', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', 'New', 'Line', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', 'Null', '_', '_(', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_Object', '_obj', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_seq', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_Char', 'Sequ', 'ence', '_seq', '_,', '_final', '_int', '_start', 'Index', '_,', '_final', '_int', '_length', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_int', '_start', 'Index', '_,', '_final', '_int', '_length', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_String', '_format', '_,', '_final', '_Object', '_...', '_ob', 'js', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_String', 'Buffer', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_Str', 'Builder', '_append', '_', '_(', '_final', '_String', 'Buffer', '_str', '_,', '_final', '_int', '_start', 'Index', '_,', '_final', '_int', '_length', '_)', '</s>', 'EOL']
04/06/2022 01:56:31 - INFO - __main__ -   source_ids: 0 29116 45200 45643 6315 646 381 3384 27779 1437 285 26602 120 49302 39645 1437 36 4839 25522 646 381 3384 27779 671 23796 39645 25606 1437 646 381 3384 27779 35524 646 381 3384 27779 5997 45200 46347 646 381 3384 27779 1437 5997 45200 45489 646 381 3384 27779 5997 45200 646 381 3384 27779 1437 285 26602 120 4030 18997 39645 1437 36 4839 646 381 3384 27779 285 5997 45200 278 4030 18997 39645 1437 36 507 26602 92 18997 4839 646 381 3384 27779 285 5997 45200 278 49302 39645 1437 36 26602 23796 39645 4839 646 381 3384 27779 285 6979 5933 1437 36 4839 646 381 3384 27779 285 5997 45200 278 48739 1437 36 507 6979 5933 4839 646 381 3384 27779 285 6979 2148 1437 36 4839 646 381 3384 27779 285 5997 45200 1306 15791 18583 1437 36 507 6979 2148 4839 646 381 3384 27779 285 5997 45200 15925 15791 18583 1437 36 4839 646 381 3384 27779 285 6979 1836 1437 36 4839 646 381 3384 27779 285 49378 16 47819 1437 36 4839 646 381 3384 27779 285 5997 45200 699 1437 36 4839 646 381 3384 27779 285 16224 16224 3750 1437 36 507 6979 1965 4839 646 381 3384 27779 285 5997 45200 278 42379 3750 1437 36 507 6979 1965 2156 507 16224 1855 4839 646 381 3384 27779 285 5997 45200 17462 42379 3750 1437 36 507 6979 1965 4839 646 381 3384 27779 285 16224 646 27779 7 42379 48222 1437 36 4839 646 381 3384 27779 285 16224 646 27779 7 42379 48222 1437 36 507 6979 386 45673 2156 6979 253 45673 4839 646 381 3384 27779 285 16224 646 27779 120 4771 2726 1437 36 16224 646 27779 6381 4839 646 381 3384 27779 285 13842 120 4771 2726 1437 36 507 6979 386 45673 2156 507 6979 253 45673 2156 507 16224 646 27779 6381 2156 507 6979 6381 45673 4839 646 381 3384 27779 285 5997 45200 40462 4030 18997 1437 36 4839 646 381 3384 27779 285 5997 45200 40462 49302 1437 36 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 35671 26907 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 7275 48245 4086 48652 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 7275 48245 4086 48652 2156 507 6979 386 45673 2156 507 6979 5933 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 26602 7031 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 26602 7031 2156 507 6979 386 45673 2156 507 6979 5933 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 26602 7390 2156 507 35671 1666 6168 21978 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 26602 49334 7031 4839 646 381 3384 27779 285 5997 45200 40462 1437 36 507 26602 49334 7031 2156 507 6979 386 45673 2156 507 6979 5933 4839 2 3
04/06/2022 01:56:31 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:31 - INFO - __main__ -   position_idx: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 0]
04/06/2022 01:56:31 - INFO - __main__ -   dfg_to_code: (6, 8)
04/06/2022 01:56:31 - INFO - __main__ -   dfg_to_dfg: []
04/06/2022 01:56:31 - INFO - __main__ -   target_tokens: ['<s>', '@', 'Test', '(', 'timeout', '_=', '_4000', ')', '_[', 'E', 'OL', ']', '_', '_', '_public', '_void', '_test', 'get', 'Null', 'Text', '()', '_', '_throws', '_Throw', 'able', '_', '_{', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_Str', 'Builder', '_str', 'Builder', '0', '_=', '_new', '_Str', 'Builder', '((', 'String', ')', '_null', ');', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_assert', 'Null', '(', 'str', 'Builder', '0', '.', 'get', 'Null', 'Text', '());', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_int', '_int', '0', '_=', '_(-', '17', '75', ');', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_//', '_Und', 'e', 'cl', 'ared', '_exception', '!', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_try', '_{', '_', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_', '_str', 'Builder', '0', '.', 'sub', 'string', '((', '-', '17', '75', '));', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_', '_fail', '("', 'Ex', 'pecting', '_exception', ':', '_String', 'Index', 'Out', 'Of', 'B', 'ounds', 'Exception', '");', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_}', '_catch', '(', 'String', 'Index', 'Out', 'Of', 'B', 'ounds', 'Exception', '_e', ')', '_{', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '_', '_', '_//', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_', '</s>']
04/06/2022 01:56:31 - INFO - __main__ -   target_ids: 0 1039 34603 1640 49109 5457 32542 43 646 717 3384 742 1437 1437 285 13842 1296 6460 49302 39645 43048 1437 6989 28106 868 1437 25522 646 717 3384 742 1437 1437 1437 1437 1437 1437 5997 45200 7031 45200 288 5457 92 5997 45200 48461 34222 43 23796 4397 646 717 3384 742 1437 1437 1437 1437 1437 1437 18088 49302 1640 6031 45200 288 4 6460 49302 39645 49291 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 646 717 3384 742 1437 1437 1437 1437 1437 1437 6979 6979 288 5457 15611 1360 2545 4397 646 717 3384 742 1437 1437 1437 1437 1437 1437 21277 14111 242 3998 6537 8219 328 646 717 3384 742 1437 1437 1437 1437 1437 1437 860 25522 1437 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 1437 7031 45200 288 4 10936 20951 48461 12 1360 2545 48749 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 1437 5998 46469 9089 45341 8219 35 26602 45673 14944 10643 387 12363 48847 45751 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 646 717 3384 742 1437 1437 1437 1437 1437 1437 35524 2916 1640 34222 45673 14944 10643 387 12363 48847 364 43 25522 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 1437 1437 21277 646 717 3384 742 1437 1437 1437 1437 1437 1437 1437 2
04/06/2022 01:56:31 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  4%|▍         | 3/80 [00:00<00:14,  5.28it/s]04/06/2022 01:56:32 - INFO - __main__ -   *** Example ***
04/06/2022 01:56:32 - INFO - __main__ -   source_tokens: ['<s>', 'Boo', 'lean', 'Ut', 'ils', '_[', '_E', 'OL', '_]', '_', '_public', '_static', '_boolean', '_to', 'Boo', 'lean', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_String', '_true', 'String', '_,', '_final', '_String', '_false', 'String', '_)', '_{', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_==', '_true', 'String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_==', '_false', 'String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_!=', '_null', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_.', '_equals', '_(', '_true', 'String', '_)', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_.', '_equals', '_(', '_false', 'String', '_)', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_throw', '_new', '_Illegal', 'Arg', 'ument', 'Exception', '_(', '_"', 'The', '_String', '_did', '_not', '_match', '_either', '_specified', '_value', '"', '_)', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_to', 'Boo', 'lean', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_String', '_true', 'String', '_,', '_final', '_String', '_false', 'String', '_)', '_{', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_==', '_true', 'String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_==', '_false', 'String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_!=', '_null', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_.', '_equals', '_(', '_true', 'String', '_)', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_.', '_equals', '_(', '_false', 'String', '_)', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_throw', '_new', '_Illegal', 'Arg', 'ument', 'Exception', '_(', '_"', 'The', '_String', '_did', '_not', '_match', '_either', '_specified', '_value', '"', '_)', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_public', '_static', '_boolean', '_to', 'Boo', 'lean', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_String', '_true', 'String', '_,', '_final', '_String', '_false', 'String', '_)', '_{', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_==', '_true', 'String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_==', '_false', 'String', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_!=', '_null', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_.', '_equals', '_(', '_true', 'String', '_)', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_true', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_else', '_if', '_(', '_str', '_.', '_equals', '_(', '_false', 'String', '_)', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_false', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_throw', '_new', '_Illegal', 'Arg', '</s>', 'EOL']
04/06/2022 01:56:32 - INFO - __main__ -   source_ids: 0 45599 21926 41967 5290 646 381 3384 27779 1437 285 25156 49378 7 45599 21926 1437 36 507 26602 7031 2156 507 26602 1528 34222 2156 507 26602 3950 34222 4839 25522 646 381 3384 27779 114 36 7031 45994 1528 34222 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 45994 3950 34222 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 49333 23796 4839 25522 1437 646 381 3384 27779 114 36 7031 479 27601 36 1528 34222 4839 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 479 27601 36 3950 34222 4839 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 35524 646 381 3384 27779 3211 92 36993 45621 18816 48847 36 22 133 26602 222 45 914 1169 17966 923 113 4839 25606 1437 646 381 3384 27779 35524 646 381 3384 27779 285 25156 49378 7 45599 21926 1437 36 507 26602 7031 2156 507 26602 1528 34222 2156 507 26602 3950 34222 4839 25522 646 381 3384 27779 114 36 7031 45994 1528 34222 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 45994 3950 34222 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 49333 23796 4839 25522 1437 646 381 3384 27779 114 36 7031 479 27601 36 1528 34222 4839 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 479 27601 36 3950 34222 4839 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 35524 646 381 3384 27779 3211 92 36993 45621 18816 48847 36 22 133 26602 222 45 914 1169 17966 923 113 4839 25606 1437 646 381 3384 27779 35524 646 381 3384 27779 285 25156 49378 7 45599 21926 1437 36 507 26602 7031 2156 507 26602 1528 34222 2156 507 26602 3950 34222 4839 25522 646 381 3384 27779 114 36 7031 45994 1528 34222 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 45994 3950 34222 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 49333 23796 4839 25522 1437 646 381 3384 27779 114 36 7031 479 27601 36 1528 34222 4839 4839 25522 1437 646 381 3384 27779 671 1528 25606 1437 646 381 3384 27779 35524 1493 114 36 7031 479 27601 36 3950 34222 4839 4839 25522 1437 646 381 3384 27779 671 3950 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 35524 646 381 3384 27779 3211 92 36993 45621 2 3
04/06/2022 01:56:32 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:32 - INFO - __main__ -   position_idx: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 0]
04/06/2022 01:56:32 - INFO - __main__ -   dfg_to_code: (6, 8)
04/06/2022 01:56:32 - INFO - __main__ -   dfg_to_dfg: []
04/06/2022 01:56:32 - INFO - __main__ -   target_tokens: ['<s>', '@', 'Test', '(', 'timeout', '_=', '_4000', ')', '_[', 'E', 'OL', ']', '_', '_', '_public', '_void', '_test', 'to', 'Boo', 'lean', '()', '_', '_throws', '_Throw', 'able', '_', '_{', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_Boolean', '_boolean', '0', '_=', '_Boolean', 'Ut', 'ils', '.', 'to', 'Boo', 'lean', 'Object', '((', 'String', ')', '_null', ');', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_assert', 'Null', '(', 'bo', 'olean', '0', ');', '_[', 'E', 'OL', ']', '_', '_', '_}', '_[', 'E', 'OL', ']', '_', '_[', 'E', 'OL', ']', '</s>']
04/06/2022 01:56:32 - INFO - __main__ -   target_ids: 0 1039 34603 1640 49109 5457 32542 43 646 717 3384 742 1437 1437 285 13842 1296 560 45599 21926 43048 1437 6989 28106 868 1437 25522 646 717 3384 742 1437 1437 1437 1437 1437 1437 49210 49378 288 5457 49210 41967 5290 4 560 45599 21926 46674 48461 34222 43 23796 4397 646 717 3384 742 1437 1437 1437 1437 1437 1437 18088 49302 1640 3983 48547 288 4397 646 717 3384 742 1437 1437 35524 646 717 3384 742 1437 646 717 3384 742 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:32 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  5%|▌         | 4/80 [00:00<00:12,  6.15it/s]04/06/2022 01:56:32 - INFO - __main__ -   *** Example ***
04/06/2022 01:56:32 - INFO - __main__ -   source_tokens: ['<s>', 'Number', 'Ut', 'ils', '_[', '_E', 'OL', '_]', '_', '_public', '_static', '_Float', '_create', 'Float', '_', '_(', '_final', '_String', '_str', '_)', '_{', '_[', '_E', 'OL', '_]', '_if', '_(', '_str', '_==', '_null', '_)', '_{', '_', '_[', '_E', 'OL', '_]', '_return', '_null', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_', '_[', '_E', 'OL', '_]', '_', '_return', '_Float', '_.', '_value', 'Of', '_(', '_str', '_)', '_;', '_', '_[', '_E', 'OL', '_]', '_}', '_[', '_E', 'OL', '_]', '_public', '_static', '_int', '_to', 'Int', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_int', '_to', 'Int', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_int', '_default', 'Value', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_long', '_to', 'Long', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_long', '_to', 'Long', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_long', '_default', 'Value', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_float', '_to', 'Float', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_float', '_to', 'Float', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_float', '_default', 'Value', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_double', '_to', 'Double', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_double', '_to', 'Double', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_double', '_default', 'Value', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_byte', '_to', 'Byte', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_byte', '_to', 'Byte', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_byte', '_default', 'Value', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_short', '_to', 'Short', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_short', '_to', 'Short', '_', '_(', '_final', '_String', '_str', '_,', '_final', '_short', '_default', 'Value', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Number', '_create', 'Number', '_', '_(', '_final', '_String', '_str', '_)', '_throws', '_Number', 'Format', 'Exception', '_[', '_E', 'OL', '_]', '_', '_private', '_static', '_boolean', '_is', 'All', 'Z', 'eros', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Double', '_create', 'Double', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Integer', '_create', 'Integer', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Long', '_create', 'Long', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Big', 'Integer', '_create', 'Big', 'Integer', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_Big', 'Dec', 'imal', '_create', 'Big', 'Dec', 'imal', '_', '_(', '_final', '_String', '_str', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_long', '_min', '_', '_(', '_final', '_long', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_int', '_min', '_', '_(', '_final', '_int', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_short', '_min', '_', '_(', '_final', '_short', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_byte', '_min', '_', '_(', '_final', '_byte', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_double', '_min', '_', '_(', '_final', '_double', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_float', '_min', '_', '_(', '_final', '_float', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '_]', '_public', '_static', '_long', '_max', '_', '_(', '_final', '_long', '_[', '_]', '_array', '_)', '_[', '_E', 'OL', '</s>', 'EOL']
04/06/2022 01:56:32 - INFO - __main__ -   source_ids: 0 43623 41967 5290 646 381 3384 27779 1437 285 25156 43944 1045 48766 1437 36 507 26602 7031 4839 25522 646 381 3384 27779 114 36 7031 45994 23796 4839 25522 1437 646 381 3384 27779 671 23796 25606 1437 646 381 3384 27779 35524 1437 646 381 3384 27779 1437 671 43944 479 923 10643 36 7031 4839 25606 1437 646 381 3384 27779 35524 646 381 3384 27779 285 25156 6979 7 22886 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 6979 7 22886 1437 36 507 26602 7031 2156 507 6979 6814 33977 4839 646 381 3384 27779 285 25156 251 7 21001 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 251 7 21001 1437 36 507 26602 7031 2156 507 251 6814 33977 4839 646 381 3384 27779 285 25156 15754 7 48766 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 15754 7 48766 1437 36 507 26602 7031 2156 507 15754 6814 33977 4839 646 381 3384 27779 285 25156 1457 7 42380 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 1457 7 42380 1437 36 507 26602 7031 2156 507 1457 6814 33977 4839 646 381 3384 27779 285 25156 47893 7 47447 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 47893 7 47447 1437 36 507 26602 7031 2156 507 47893 6814 33977 4839 646 381 3384 27779 285 25156 765 7 34256 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 765 7 34256 1437 36 507 26602 7031 2156 507 765 6814 33977 4839 646 381 3384 27779 285 25156 12270 1045 43623 1437 36 507 26602 7031 4839 6989 12270 48587 48847 646 381 3384 27779 1437 940 25156 49378 16 3684 1301 22070 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 12617 1045 42380 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 47927 1045 49740 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 2597 1045 21001 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 1776 49740 1045 12583 49740 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 1776 15953 16980 1045 12583 15953 16980 1437 36 507 26602 7031 4839 646 381 3384 27779 285 25156 251 5251 1437 36 507 251 646 27779 8932 4839 646 381 3384 27779 285 25156 6979 5251 1437 36 507 6979 646 27779 8932 4839 646 381 3384 27779 285 25156 765 5251 1437 36 507 765 646 27779 8932 4839 646 381 3384 27779 285 25156 47893 5251 1437 36 507 47893 646 27779 8932 4839 646 381 3384 27779 285 25156 1457 5251 1437 36 507 1457 646 27779 8932 4839 646 381 3384 27779 285 25156 15754 5251 1437 36 507 15754 646 27779 8932 4839 646 381 3384 27779 285 25156 251 19220 1437 36 507 251 646 27779 8932 4839 646 381 3384 2 3
04/06/2022 01:56:32 - INFO - __main__ -   source_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:32 - INFO - __main__ -   position_idx: [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 0]
04/06/2022 01:56:32 - INFO - __main__ -   dfg_to_code: (5, 7)
04/06/2022 01:56:32 - INFO - __main__ -   dfg_to_dfg: []
04/06/2022 01:56:32 - INFO - __main__ -   target_tokens: ['<s>', '@', 'Test', '(', 'timeout', '_=', '_4000', ')', '_[', 'E', 'OL', ']', '_', '_', '_public', '_void', '_test', 'create', 'Float', '()', '_', '_throws', '_Throw', 'able', '_', '_{', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_Float', '_float', '0', '_=', '_Number', 'Ut', 'ils', '.', 'create', 'Float', '("', '0', '");', '_[', 'E', 'OL', ']', '_', '_', '_', '_', '_', '_', '_assert', 'Equ', 'als', '(', '0', '.', '0', 'F', ',', '_(', 'float', ')', 'float', '0', ',', '_0', '.', '01', 'F', ');', '_[', 'E', 'OL', ']', '_', '_', '_}', '_[', 'E', 'OL', ']', '_', '_[', 'E', 'OL', ']', '</s>']
04/06/2022 01:56:32 - INFO - __main__ -   target_ids: 0 1039 34603 1640 49109 5457 32542 43 646 717 3384 742 1437 1437 285 13842 1296 32845 48766 43048 1437 6989 28106 868 1437 25522 646 717 3384 742 1437 1437 1437 1437 1437 1437 43944 15754 288 5457 12270 41967 5290 4 32845 48766 46469 288 45751 646 717 3384 742 1437 1437 1437 1437 1437 1437 18088 28568 1536 1640 288 4 288 597 6 36 46349 43 46349 288 6 321 4 2663 597 4397 646 717 3384 742 1437 1437 35524 646 717 3384 742 1437 646 717 3384 742 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
04/06/2022 01:56:32 - INFO - __main__ -   target_mask: 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  8%|▊         | 6/80 [00:00<00:09,  7.59it/s] 10%|█         | 8/80 [00:01<00:08,  8.08it/s] 11%|█▏        | 9/80 [00:01<00:08,  8.22it/s] 14%|█▍        | 11/80 [00:01<00:06, 10.00it/s] 16%|█▋        | 13/80 [00:01<00:06,  9.91it/s] 19%|█▉        | 15/80 [00:01<00:06, 10.00it/s] 21%|██▏       | 17/80 [00:01<00:06, 10.05it/s] 24%|██▍       | 19/80 [00:02<00:05, 10.63it/s] 28%|██▊       | 22/80 [00:02<00:04, 14.34it/s] 30%|███       | 24/80 [00:02<00:04, 13.78it/s] 32%|███▎      | 26/80 [00:02<00:04, 13.31it/s] 35%|███▌      | 28/80 [00:02<00:05,  9.31it/s] 38%|███▊      | 30/80 [00:03<00:06,  8.18it/s] 40%|████      | 32/80 [00:03<00:06,  7.30it/s] 42%|████▎     | 34/80 [00:04<00:08,  5.54it/s] 46%|████▋     | 37/80 [00:04<00:07,  5.92it/s] 48%|████▊     | 38/80 [00:04<00:07,  5.80it/s] 52%|█████▎    | 42/80 [00:04<00:03,  9.63it/s] 55%|█████▌    | 44/80 [00:05<00:03, 10.02it/s] 57%|█████▊    | 46/80 [00:05<00:03, 10.29it/s] 61%|██████▏   | 49/80 [00:05<00:03, 10.08it/s] 65%|██████▌   | 52/80 [00:05<00:02, 12.41it/s] 68%|██████▊   | 54/80 [00:05<00:02, 11.54it/s] 70%|███████   | 56/80 [00:06<00:02,  9.15it/s] 72%|███████▎  | 58/80 [00:06<00:03,  6.45it/s] 75%|███████▌  | 60/80 [00:07<00:02,  6.85it/s] 76%|███████▋  | 61/80 [00:07<00:02,  6.73it/s] 79%|███████▉  | 63/80 [00:07<00:02,  6.70it/s] 82%|████████▎ | 66/80 [00:07<00:01,  9.25it/s] 85%|████████▌ | 68/80 [00:08<00:01,  7.20it/s] 86%|████████▋ | 69/80 [00:08<00:01,  7.02it/s] 89%|████████▉ | 71/80 [00:08<00:01,  8.63it/s] 91%|█████████▏| 73/80 [00:08<00:01,  6.30it/s] 92%|█████████▎| 74/80 [00:09<00:01,  5.59it/s] 95%|█████████▌| 76/80 [00:09<00:00,  7.10it/s] 96%|█████████▋| 77/80 [00:09<00:00,  6.91it/s] 98%|█████████▊| 78/80 [00:09<00:00,  6.74it/s]100%|██████████| 80/80 [00:09<00:00,  8.28it/s]
/project/6025819/sepehr8/test_generation/BART_test_generation/ENV/lib/python3.7/site-packages/transformers/optimization.py:309: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use thePyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning
  FutureWarning,
04/06/2022 01:56:41 - INFO - __main__ -   ***** Running training *****
04/06/2022 01:56:41 - INFO - __main__ -     Num examples = 80
04/06/2022 01:56:41 - INFO - __main__ -     Batch size = 16
04/06/2022 01:56:41 - INFO - __main__ -     Num epoch = 5
  0%|          | 0/5 [00:00<?, ?it/s]/project/6025819/sepehr8/test_generation/BART_test_generation/ENV/lib/python3.7/site-packages/torch/nn/parallel/_functions.py:68: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.
  warnings.warn('Was asked to gather along dimension 0, but all '
epoch 0 loss 11.7546:   0%|          | 0/5 [00:06<?, ?it/s]epoch 0 loss 11.7546:  20%|██        | 1/5 [00:07<00:28,  7.01s/it]epoch 0 loss 11.7623:  20%|██        | 1/5 [00:07<00:28,  7.01s/it]epoch 0 loss 11.7623:  40%|████      | 2/5 [00:07<00:09,  3.26s/it]epoch 0 loss 10.4649:  40%|████      | 2/5 [00:07<00:09,  3.26s/it]epoch 0 loss 10.4649:  60%|██████    | 3/5 [00:08<00:04,  2.05s/it]epoch 0 loss 9.5077:  60%|██████    | 3/5 [00:08<00:04,  2.05s/it] epoch 0 loss 9.5077:  80%|████████  | 4/5 [00:08<00:01,  1.47s/it]epoch 0 loss 8.7907:  80%|████████  | 4/5 [00:09<00:01,  1.47s/it]epoch 0 loss 8.7907: 100%|██████████| 5/5 [00:09<00:00,  1.15s/it]run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
epoch 0 loss 8.7907: 100%|██████████| 5/5 [00:09<00:00,  1.90s/it]
  0%|          | 0/80 [00:00<?, ?it/s]  1%|▏         | 1/80 [00:00<00:13,  5.91it/s]  2%|▎         | 2/80 [00:00<00:13,  6.00it/s]  5%|▌         | 4/80 [00:00<00:09,  8.38it/s]  6%|▋         | 5/80 [00:00<00:08,  8.70it/s]  8%|▊         | 6/80 [00:00<00:08,  8.24it/s] 10%|█         | 8/80 [00:00<00:06, 11.08it/s] 14%|█▍        | 11/80 [00:01<00:06, 11.37it/s] 16%|█▋        | 13/80 [00:01<00:07,  9.21it/s] 19%|█▉        | 15/80 [00:01<00:06,  9.60it/s] 21%|██▏       | 17/80 [00:01<00:06,  9.66it/s] 24%|██▍       | 19/80 [00:02<00:08,  7.35it/s] 26%|██▋       | 21/80 [00:02<00:07,  7.88it/s] 28%|██▊       | 22/80 [00:02<00:08,  6.73it/s] 30%|███       | 24/80 [00:02<00:07,  7.05it/s] 31%|███▏      | 25/80 [00:03<00:08,  6.19it/s] 32%|███▎      | 26/80 [00:03<00:09,  5.97it/s] 34%|███▍      | 27/80 [00:03<00:08,  6.25it/s] 38%|███▊      | 30/80 [00:03<00:06,  7.40it/s] 40%|████      | 32/80 [00:04<00:05,  8.30it/s] 42%|████▎     | 34/80 [00:04<00:05,  8.94it/s] 44%|████▍     | 35/80 [00:04<00:05,  8.26it/s] 45%|████▌     | 36/80 [00:04<00:07,  6.28it/s] 46%|████▋     | 37/80 [00:04<00:06,  6.50it/s] 48%|████▊     | 38/80 [00:04<00:06,  6.43it/s] 49%|████▉     | 39/80 [00:05<00:09,  4.43it/s] 52%|█████▎    | 42/80 [00:05<00:05,  7.28it/s] 54%|█████▍    | 43/80 [00:05<00:04,  7.54it/s] 56%|█████▋    | 45/80 [00:05<00:04,  8.43it/s] 57%|█████▊    | 46/80 [00:06<00:04,  6.94it/s] 60%|██████    | 48/80 [00:06<00:04,  7.90it/s] 61%|██████▏   | 49/80 [00:06<00:05,  5.39it/s] 62%|██████▎   | 50/80 [00:06<00:05,  5.05it/s] 64%|██████▍   | 51/80 [00:07<00:06,  4.76it/s] 65%|██████▌   | 52/80 [00:07<00:05,  5.05it/s] 66%|██████▋   | 53/80 [00:07<00:05,  4.75it/s] 68%|██████▊   | 54/80 [00:07<00:05,  4.34it/s] 69%|██████▉   | 55/80 [00:08<00:06,  3.73it/s] 70%|███████   | 56/80 [00:08<00:06,  3.72it/s] 72%|███████▎  | 58/80 [00:08<00:04,  5.40it/s] 76%|███████▋  | 61/80 [00:09<00:03,  5.26it/s] 78%|███████▊  | 62/80 [00:09<00:03,  4.72it/s] 79%|███████▉  | 63/80 [00:09<00:03,  4.97it/s] 81%|████████▏ | 65/80 [00:09<00:02,  6.29it/s] 82%|████████▎ | 66/80 [00:10<00:02,  6.78it/s] 86%|████████▋ | 69/80 [00:10<00:01,  8.75it/s] 88%|████████▊ | 70/80 [00:10<00:01,  8.12it/s] 90%|█████████ | 72/80 [00:10<00:00,  8.21it/s] 91%|█████████▏| 73/80 [00:11<00:01,  5.09it/s] 95%|█████████▌| 76/80 [00:11<00:00,  6.57it/s] 96%|█████████▋| 77/80 [00:11<00:00,  5.32it/s]100%|██████████| 80/80 [00:12<00:00,  7.29it/s]100%|██████████| 80/80 [00:12<00:00,  6.64it/s]
04/06/2022 01:57:02 - INFO - __main__ -   
***** Running evaluation *****
04/06/2022 01:57:02 - INFO - __main__ -     Num examples = 80
04/06/2022 01:57:02 - INFO - __main__ -     Batch size = 16
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
04/06/2022 01:57:04 - INFO - __main__ -     eval_ppl = 266.5757
04/06/2022 01:57:04 - INFO - __main__ -     global_step = 6
04/06/2022 01:57:04 - INFO - __main__ -     train_loss = 8.7907
04/06/2022 01:57:04 - INFO - __main__ -     ********************
04/06/2022 01:57:05 - INFO - __main__ -     Best ppl:266.5757
04/06/2022 01:57:05 - INFO - __main__ -     ********************
  0%|          | 0/80 [00:00<?, ?it/s]  2%|▎         | 2/80 [00:00<00:08,  9.09it/s]  4%|▍         | 3/80 [00:00<00:15,  5.12it/s]  5%|▌         | 4/80 [00:00<00:13,  5.51it/s]  8%|▊         | 6/80 [00:00<00:08,  8.43it/s] 10%|█         | 8/80 [00:01<00:09,  7.36it/s] 11%|█▏        | 9/80 [00:01<00:09,  7.38it/s] 12%|█▎        | 10/80 [00:01<00:13,  5.01it/s] 14%|█▍        | 11/80 [00:01<00:11,  5.75it/s] 16%|█▋        | 13/80 [00:01<00:09,  6.97it/s] 19%|█▉        | 15/80 [00:02<00:09,  6.72it/s] 20%|██        | 16/80 [00:02<00:09,  6.62it/s] 21%|██▏       | 17/80 [00:02<00:09,  6.52it/s] 24%|██▍       | 19/80 [00:02<00:07,  7.72it/s] 25%|██▌       | 20/80 [00:03<00:09,  6.50it/s] 28%|██▊       | 22/80 [00:03<00:07,  7.56it/s] 29%|██▉       | 23/80 [00:03<00:07,  7.25it/s] 30%|███       | 24/80 [00:03<00:08,  6.97it/s] 31%|███▏      | 25/80 [00:03<00:07,  7.09it/s] 32%|███▎      | 26/80 [00:03<00:09,  5.92it/s] 34%|███▍      | 27/80 [00:04<00:08,  6.01it/s] 36%|███▋      | 29/80 [00:04<00:06,  7.44it/s] 38%|███▊      | 30/80 [00:04<00:07,  6.79it/s] 39%|███▉      | 31/80 [00:04<00:10,  4.86it/s] 40%|████      | 32/80 [00:04<00:08,  5.36it/s] 44%|████▍     | 35/80 [00:05<00:06,  6.98it/s] 45%|████▌     | 36/80 [00:05<00:07,  5.93it/s] 49%|████▉     | 39/80 [00:06<00:07,  5.71it/s] 51%|█████▏    | 41/80 [00:06<00:05,  6.90it/s] 52%|█████▎    | 42/80 [00:06<00:06,  5.98it/s] 56%|█████▋    | 45/80 [00:06<00:04,  8.51it/s] 60%|██████    | 48/80 [00:06<00:02, 10.80it/s] 62%|██████▎   | 50/80 [00:06<00:02, 12.21it/s] 65%|██████▌   | 52/80 [00:07<00:03,  8.42it/s] 68%|██████▊   | 54/80 [00:07<00:02,  9.00it/s] 70%|███████   | 56/80 [00:07<00:02,  9.15it/s] 72%|███████▎  | 58/80 [00:08<00:02,  7.67it/s] 74%|███████▍  | 59/80 [00:08<00:03,  6.72it/s] 76%|███████▋  | 61/80 [00:08<00:02,  6.98it/s] 78%|███████▊  | 62/80 [00:08<00:03,  5.63it/s] 80%|████████  | 64/80 [00:09<00:02,  6.75it/s] 81%|████████▏ | 65/80 [00:09<00:02,  6.64it/s] 82%|████████▎ | 66/80 [00:09<00:01,  7.05it/s] 84%|████████▍ | 67/80 [00:09<00:02,  4.93it/s] 86%|████████▋ | 69/80 [00:10<00:02,  4.51it/s] 88%|████████▊ | 70/80 [00:10<00:02,  4.64it/s] 90%|█████████ | 72/80 [00:10<00:01,  6.03it/s] 94%|█████████▍| 75/80 [00:11<00:00,  7.13it/s] 96%|█████████▋| 77/80 [00:11<00:00,  7.30it/s] 98%|█████████▊| 78/80 [00:11<00:00,  6.40it/s]100%|██████████| 80/80 [00:11<00:00,  6.59it/s]100%|██████████| 80/80 [00:11<00:00,  6.78it/s]
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
/project/6025819/sepehr8/test_generation/Graph_codeBERT_TestGen/model.py:175: UserWarning: __floordiv__ is deprecated, and its behavior will change in a future version of pytorch. It currently rounds toward 0 (like the 'trunc' function NOT 'floor'). This results in incorrect rounding for negative values. To keep the current behavior, use torch.div(a, b, rounding_mode='trunc'), or for actual floor division, use torch.div(a, b, rounding_mode='floor').
  prevK = bestScoresId // numWords
04/06/2022 02:01:15 - INFO - __main__ -     xMatch = 0.0 
04/06/2022 02:01:15 - INFO - __main__ -     ********************
  0%|          | 0/5 [00:00<?, ?it/s]epoch 1 loss 5.34:   0%|          | 0/5 [00:00<?, ?it/s]epoch 1 loss 5.34:  20%|██        | 1/5 [00:00<00:03,  1.06it/s]epoch 1 loss 5.2454:  20%|██        | 1/5 [00:01<00:03,  1.06it/s]epoch 1 loss 5.2454:  40%|████      | 2/5 [00:01<00:02,  1.36it/s]epoch 1 loss 5.1531:  40%|████      | 2/5 [00:01<00:02,  1.36it/s]epoch 1 loss 5.1531:  60%|██████    | 3/5 [00:02<00:01,  1.50it/s]epoch 1 loss 5.1019:  60%|██████    | 3/5 [00:02<00:01,  1.50it/s]epoch 1 loss 5.1019:  80%|████████  | 4/5 [00:02<00:00,  1.57it/s]epoch 1 loss 5.0604:  80%|████████  | 4/5 [00:02<00:00,  1.57it/s]epoch 1 loss 5.0604: 100%|██████████| 5/5 [00:03<00:00,  1.62it/s]run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
epoch 1 loss 5.0604: 100%|██████████| 5/5 [00:03<00:00,  1.49it/s]
04/06/2022 02:01:19 - INFO - __main__ -   
***** Running evaluation *****
04/06/2022 02:01:19 - INFO - __main__ -     Num examples = 80
04/06/2022 02:01:19 - INFO - __main__ -     Batch size = 16
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
04/06/2022 02:01:20 - INFO - __main__ -     eval_ppl = 117.68757
04/06/2022 02:01:20 - INFO - __main__ -     global_step = 11
04/06/2022 02:01:20 - INFO - __main__ -     train_loss = 5.0604
04/06/2022 02:01:20 - INFO - __main__ -     ********************
04/06/2022 02:01:21 - INFO - __main__ -     Best ppl:117.68757
04/06/2022 02:01:21 - INFO - __main__ -     ********************
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
04/06/2022 02:05:20 - INFO - __main__ -     xMatch = 0.0 
04/06/2022 02:05:20 - INFO - __main__ -     ********************
  0%|          | 0/5 [00:00<?, ?it/s]epoch 2 loss 4.7707:   0%|          | 0/5 [00:00<?, ?it/s]epoch 2 loss 4.7707:  20%|██        | 1/5 [00:01<00:04,  1.02s/it]epoch 2 loss 4.6277:  20%|██        | 1/5 [00:01<00:04,  1.02s/it]epoch 2 loss 4.6277:  40%|████      | 2/5 [00:01<00:02,  1.31it/s]epoch 2 loss 4.5419:  40%|████      | 2/5 [00:01<00:02,  1.31it/s]epoch 2 loss 4.5419:  60%|██████    | 3/5 [00:02<00:01,  1.46it/s]epoch 2 loss 4.4351:  60%|██████    | 3/5 [00:02<00:01,  1.46it/s]epoch 2 loss 4.4351:  80%|████████  | 4/5 [00:02<00:00,  1.54it/s]epoch 2 loss 4.4988:  80%|████████  | 4/5 [00:03<00:00,  1.54it/s]epoch 2 loss 4.4988: 100%|██████████| 5/5 [00:03<00:00,  1.59it/s]run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
epoch 2 loss 4.4988: 100%|██████████| 5/5 [00:03<00:00,  1.45it/s]
04/06/2022 02:05:24 - INFO - __main__ -   
***** Running evaluation *****
04/06/2022 02:05:24 - INFO - __main__ -     Num examples = 80
04/06/2022 02:05:24 - INFO - __main__ -     Batch size = 16
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
run.py:270: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
  attn_mask=np.zeros((self.args.max_source_length,self.args.max_source_length),dtype=np.bool)
04/06/2022 02:05:25 - INFO - __main__ -     eval_ppl = 76.86895
04/06/2022 02:05:25 - INFO - __main__ -     global_step = 16
04/06/2022 02:05:25 - INFO - __main__ -     train_loss = 4.4988
04/06/2022 02:05:25 - INFO - __main__ -     ********************
04/06/2022 02:05:26 - INFO - __main__ -     Best ppl:76.86895
04/06/2022 02:05:26 - INFO - __main__ -     ********************
