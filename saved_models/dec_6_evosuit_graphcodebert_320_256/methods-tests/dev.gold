@Test(timeout = 4000) [EOL]   public void testgetFuture()  throws Throwable  { [EOL]       Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer0.getFuture(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // start() must be called first! [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56320, (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]        [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1), (short) (-1831)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long) (short) (-1), (long) (short) (-1)); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (double) (short) (-1); [EOL]       doubleArray0[1] = (double) (short) (-1); [EOL]       doubleArray0[2] = (double) (short) (-1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(doubleArray0, doubleArray0); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short)0, (short) (-438)); [EOL]       Boolean boolean0 = equalsBuilder0.build(); [EOL]       IDKey iDKey0 = new IDKey(equalsBuilder4); [EOL]       IDKey iDKey1 = new IDKey(iDKey0); [EOL]       EqualsBuilder.getRegisterPair(boolean0, iDKey1); [EOL]       equalsBuilder4.appendSuper(false); [EOL]       equalsBuilder0.append((-2306.2883F), 3129.99F); [EOL]       equalsBuilder3.appendSuper(false); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder3, false); [EOL]       Object object1 = new Object(); [EOL]       float[] floatArray0 = new float[5]; [EOL]       floatArray0[0] = (float) (short) (-438); [EOL]       floatArray0[1] = (float) (short) (-438); [EOL]       floatArray0[2] = (float) (short) (-1); [EOL]       floatArray0[3] = (float) (short)0; [EOL]       floatArray0[4] = (float) (short) (-1); [EOL]       float[] floatArray1 = new float[0]; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder2.append(floatArray0, floatArray1); [EOL]       Class<String> class0 = String.class; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = "6"; [EOL]       stringArray0[1] = "X0d5sI`kw?!1"; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = "org.apache.commons.lang3.tuple.MutablePair"; [EOL]       boolean boolean1 = EqualsBuilder.reflectionEquals(object1, (Object) equalsBuilder5, false, (Class<?>) class0, stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendIfMissing()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], charSequenceArray0[3]); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType("\"\"\"\"\"\"\"\"\"\""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("tA$dgqg-e4)j", '\"'); [EOL]        [EOL]       int[] intArray0 = new int[3]; [EOL]       intArray0[0] = 10; [EOL]       intArray0[1] = 2976; [EOL]       intArray0[2] = (int) '\"'; [EOL]       String string2 = StringUtils.join(intArray0, 'C'); [EOL]        [EOL]       String string3 = StringUtils.substring("Cannot get the toString of a null identity", 1, 10); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabove()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.above('\u0000'); [EOL]       boolean boolean0 = numericEntityEscaper0.translate(2104, (Writer) stringWriter0);", stringWriter0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceIn()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("H"); [EOL]       durationFormatUtils_Token0.equals("H"); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       DurationFormatUtils.formatDuration(0L, "java.lang.String@0000000002java.lang.String@0000000002", false); [EOL]       String string0 = (String)DurationFormatUtils.d; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("d"); [EOL]       DurationFormatUtils.formatDurationISO((-260L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcharAt()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 847, '{'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((Object) null); [EOL]        [EOL]       ArrayDeque<StrBuilder> arrayDeque0 = new ArrayDeque<StrBuilder>(847); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendWithSeparators((Iterable<?>) arrayDeque0, ""); [EOL]        [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(""); [EOL]        [EOL]       int int0 = strBuilder4.lastIndexOf((StrMatcher) strMatcher_StringMatcher0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.charAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       boolean boolean0 = toStringStyle0.isUseClassName(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsOnly()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replacePattern("", "", ""); [EOL]        [EOL]       String string4 = StringUtils.substringBetween("", (String) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAsciiPrintable("9'A"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 't'; [EOL]       charArray0[1] = '>'; [EOL]       charArray0[2] = ''; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = '^'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "d(!`<o?9g`N"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'R'; [EOL]       charArray0[7] = ']'; [EOL]       Locale.Category locale_Category0 = Locale.Category.FORMAT; [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) locale_Category0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       int int0 = (-3745); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, (-3745), (-3745)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: -3745 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrTokenizer"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrTokenizer"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 31; [EOL]       char char0 = '{'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadRight((Object) "org.apache.commons.lang3.text.StrTokenizer", 31, '{'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(1613.02F); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(102); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.validateIndex(102); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 102 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       String string0 = StringUtils.join(iterator0, "The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "The character must not be null", (CharSequence) "The character must not be null"); [EOL]        [EOL]       Integer integer0 = linkedList0.pollFirst(); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "The character must not be null", ""); [EOL]        [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       String string3 = StringUtils.join(stringArray0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("kytsDAH*4", "kytsDAH*4"); [EOL]        [EOL]       String string5 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.appendIfMissing("", "", stringArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.appendFixedWidthPadRight(2808, 0, '\\'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlphanumericSpace()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "p{InCombiningDiacriticalMarks}+"; [EOL]       stringArray0[1] = "~@!LXZ6YxCtw"; [EOL]       stringArray0[2] = "null comparator"; [EOL]       stringArray0[3] = "Threshold must not be negative"; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "~@!LXZ6YxCtw"; [EOL]       String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank("~@!LXZ6YxCtw"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField"); [EOL]       Locale locale0 = new Locale("", "org.apache.commons.lang3.time.FastDatePrinter$TwentyFourHourField"); [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter("K", timeZone0, locale0); [EOL]       Calendar calendar0 = MockCalendar.getInstance(locale0); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer()); [EOL]       FieldPosition fieldPosition0 = new FieldPosition(format_Field0); [EOL]       fastDatePrinter0.format((Object) calendar0, stringBuffer0, fieldPosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragment()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-33), 116, (-4857), 500, (-1349)); [EOL]       long long0 = DateUtils.getFragmentInMinutes((Date) mockDate0, 11); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0); [EOL]       assertEquals((-811), (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("off", (String) null, "off", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       int int0 = (-1994); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1994)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = (-2242); [EOL]       int int2 = 5; [EOL]       strBuilder1.size = 5; [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       strBuilder1.size = (-2242); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       int int3 = 20; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace((-2242), 20, "java.compiler"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2242 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1198, 1198); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1198 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(list0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = '='; [EOL]       charArray0[5] = '5'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]       assertEquals(6, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       String string2 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[1] = (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[3] = (CharSequence) "Z|&xc}e&+;"; [EOL]       String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "', is neither of type Map.Entry nor an Array", charSequenceArray0); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       String string4 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", (-3245)); [EOL]        [EOL]       int int2 = StringUtils.indexOfAny(charSequenceArray0[1], charArray0); [EOL]       assertEquals(6, charArray0.length); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]        [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "', is neither of type Map.Entry nor an Array"; [EOL]       stringArray0[1] = "Z|&xc}e&+;"; [EOL]       StringUtils.replaceEach(" vs ", stringArray0, stringArray0); [EOL]       int int3 = StringUtils.indexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) " vs "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(1719.82282); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       mutableDouble0.add((double) 108L); [EOL]       assertEquals(197.0, mutableDouble0.toDouble(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range1 = Range.is((Object) range0, comparator1); [EOL]       Range<Object> range2 = Range.between((Object) "3P~}zBq", (Object) "", (Comparator<Object>) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         range1.isOverlappedBy(range2); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Range$ComparableComparator", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'E'; [EOL]       charArray0[1] = 'O'; [EOL]       charArray0[2] = '}'; [EOL]       charArray0[3] = 'G'; [EOL]       charArray0[4] = '@'; [EOL]       charArray0[5] = 'z'; [EOL]       charArray0[6] = 'F'; [EOL]       charArray0[7] = ''; [EOL]       charArray0[8] = 'P'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       String string0 = StringUtils.replaceOnce("", "", "o]az=-zkOjZ*SA.49m"); [EOL]        [EOL]       String string1 = StringUtils.capitalize("FI>R"); [EOL]        [EOL]       String string2 = StringUtils.removeStart((String) null, ""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "FI>R", charArray0); [EOL]        [EOL]       String string3 = StringUtils.reverseDelimited("", '2'); [EOL]        [EOL]       String string4 = StringUtils.leftPad("Index: ", 2428); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('h'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0"); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5'); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       objectArray0[4] = (Object) ", Length: 0"; [EOL]       objectArray0[5] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator(""); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'h'; [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[0] = (Object) null; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) null; [EOL]       objectArray0[4] = (Object) null; [EOL]       objectArray0[5] = (Object) null; [EOL]       objectArray0[6] = (Object) strBuilder0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln((String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = false; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = false; [EOL]       booleanArray0[5] = false; [EOL]       booleanArray0[6] = false; [EOL]       booleanArray0[7] = false; [EOL]       booleanArray0[8] = false; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray0); [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) false; [EOL]       objectArray0[1] = (Object) false; [EOL]       objectArray0[2] = (Object) false; [EOL]       objectArray0[3] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[1] = (short) (-2658); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(shortArray0, shortArray0); [EOL]       assertTrue(equalsBuilder1.isEquals()); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) (short)0; [EOL]       double[] doubleArray1 = new double[8]; [EOL]       doubleArray1[0] = (double) (short) (-2658); [EOL]       doubleArray1[1] = (double) (short)0; [EOL]       doubleArray1[2] = (double) (short) (-2658); [EOL]       doubleArray1[3] = (double) (short)0; [EOL]       doubleArray1[5] = (double) (short) (-2658); [EOL]       doubleArray1[6] = (double) (short)0; [EOL]       doubleArray1[7] = 0.0; [EOL]       equalsBuilder3.append(doubleArray0, doubleArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       boolean boolean0 = fraction0.equals("BN~jiW"); [EOL]       assertEquals((-3225013), fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("-1"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]        [EOL]       char char0 = '^'; [EOL]       int int1 = strBuilder1.lastIndexOf('^'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(1575, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1575 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByCharacterType()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 7); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0Nn2%azF )g$yM<;c"); [EOL]        [EOL]       String string0 = StringUtils.replaceChars("w", 'w', 'w'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "w", "w"); [EOL]        [EOL]       String string1 = StringUtils.deleteWhitespace("wz6d7vzJ$Nu"); [EOL]        [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)837; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)1628; [EOL]       shortArray0[3] = (short)4517; [EOL]       shortArray0[4] = (short) (-1910); [EOL]       shortArray0[5] = (short)1625; [EOL]       shortArray0[6] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'b'); [EOL]        [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1910); [EOL]       floatArray0[1] = (float) (short)0; [EOL]       floatArray0[2] = (float) 'w'; [EOL]       String string3 = StringUtils.join(floatArray0, 't'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]        [EOL]       String string0 = StringUtils.upperCase("", locale0); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "", 236, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty(""); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.descendingIterator(); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, '+'); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "", ""); [EOL]        [EOL]       String string2 = StringUtils.join((float[]) null, '+'); [EOL]        [EOL]       String string3 = StringUtils.upperCase("iCQh"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '+'; [EOL]       charArray0[1] = '\"'; [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) "ICQH", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("w+Pf>Zb"); [EOL]        [EOL]       Locale locale1 = Locale.TRADITIONAL_CHINESE; [EOL]        [EOL]       boolean boolean3 = locale1.hasExtensions(); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null, locale1); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumeric((CharSequence) null); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)0; [EOL]       String string5 = StringUtils.join(shortArray0, '\"'); [EOL]        [EOL]       String string6 = StringUtils.substringAfter("", "*="); [EOL]        [EOL]       boolean boolean5 = StringUtils.containsIgnoreCase("*=", (CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtrim()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       String string1 = "1.4"; [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst("1.4", ""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0); [EOL]        [EOL]       Class<Object> class0 = Object.class; [EOL]       ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) serviceLoader0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendSeparator('1'); [EOL]        [EOL]       char[] charArray0 = null; [EOL]       StrBuilder strBuilder5 = strBuilder4.append((char[]) null); [EOL]        [EOL]       ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(arrayDeque0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.appendAll((Iterable<?>) treeSet0); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder5.toStringBuffer(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder1.appendln(1831L); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.trim(); [EOL]        [EOL]       strBuilder8.size = (-1455); [EOL]        [EOL]       int int0 = 3; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setLength(3); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       boolean boolean3 = arrayList0.add((Object) listIterator0); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean4 = arrayList0.add((Object) ""); [EOL]       assertFalse(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]       assertTrue(arrayList0.contains("")); [EOL]        [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]       assertFalse(arrayList0.contains(0)); [EOL]       assertTrue(arrayList0.contains("")); [EOL]        [EOL]       String string2 = StringUtils.join(doubleArray0, '}'); [EOL]        [EOL]       String string3 = StringUtils.center("", 0); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean5 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean6 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, '}'); [EOL]        [EOL]       boolean boolean7 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.join((Iterable<?>) arrayList0, '}'); [EOL]       assertFalse(arrayList0.contains(0)); [EOL]       assertTrue(arrayList0.contains("*aKUDx7dwU3mi-y:{")); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean8 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       String string8 = StringUtils.rightPad("", (-1), '3'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Iterator<?>) listIterator0, '}'); [EOL]         fail("Expecting exception: ConcurrentModificationException"); [EOL]        [EOL]       } catch(ConcurrentModificationException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.ArrayList$Itr", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfAny()  throws Throwable  { [EOL]       String string0 = StringUtils.difference(",-t8JJh/bUr{+$_DS", "WDl?;hCf*= F");hCf*= F", string0); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "WDl?;hCf*= F", "RWSLzV4h"); [EOL]        [EOL]       String string1 = StringUtils.stripAccents(",-t8JJh/bUr{+$_DS"); [EOL]        [EOL]       String string2 = StringUtils.uncapitalize("uOcUk"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace("uOcUk"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       charSequenceArray0[0] = (CharSequence) "uOcUk"; [EOL]       charSequenceArray0[1] = (CharSequence) ",-t8JJh/bUr{+$_DS"; [EOL]       charSequenceArray0[2] = (CharSequence) ",-t8JJh/bUr{+$_DS"; [EOL]       String string3 = StringUtils.center("WDl?;hCf*= F", 13);hCf*= F ", string3); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "WDl?;hCf*= F "; [EOL]       String string4 = StringUtils.appendIfMissingIgnoreCase("Ha?BYN:B?", "WDl?;hCf*= F", charSequenceArray0);hCf*= F", string4); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (char[]) null); [EOL]        [EOL]       String string5 = StringUtils.join((Iterator<?>) null, 'z'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSummary()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       double[] doubleArray0 = new double[3]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         toStringStyle0.NO_FIELD_NAMES_STYLE.appendSummary((StringBuffer) null, "=ppP", doubleArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.ToStringStyle", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       boolean boolean0 = fraction0.equals("BN~jiW"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       boolean boolean0 = range0.isAfter((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_HALF; [EOL]       Fraction fraction1 = fraction0.ONE_QUARTER.reduce(); [EOL]       int int0 = fraction1.compareTo(fraction0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoStringBuilder()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[0]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]        [EOL]       char char0 = '2'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('2'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder", (Object[]) strBuilderArray0); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]        [EOL]       char char1 = ''; [EOL]       int int1 = 0; [EOL]       int int2 = strBuilder1.lastIndexOf('', 0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(108, (long) 41); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdefaultString()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       String string0 = StringUtils.join(shortArray0, '>', 2695, (-1115)); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '>'; [EOL]       charArray0[1] = '>'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = '>'; [EOL]       charArray0[4] = '>'; [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0); [EOL]        [EOL]       String string1 = StringUtils.defaultString(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "F7"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string2 = StringUtils.prependIfMissingIgnoreCase("F7", "", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       boolean boolean0 = true; [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = 'U'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random(2821, 0, (-337), true, true, charArray0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Parameter end (-337) must be greater than start (0) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.RandomStringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleft()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.left("", (-4855)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(289); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendClassName(stringBuffer0, "["); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((StringBuffer) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]       assertEquals(1210, strBuilder0.capacity()); [EOL]       assertEquals(1210, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(0); [EOL]       assertEquals(1210, strBuilder0.capacity()); [EOL]       assertEquals(1210, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendAll((Iterable<?>) null); [EOL]       assertEquals(1210, strBuilder0.capacity()); [EOL]       assertEquals(1210, strBuilder3.capacity()); [EOL]       assertEquals(1210, strBuilder4.capacity()); [EOL]        [EOL]       String string1 = strBuilder1.rightString(0); [EOL]       assertEquals(1210, strBuilder0.capacity()); [EOL]       assertEquals(1210, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testright()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]        [EOL]       String string3 = StringUtils.right(".ti')kKzb5J(cbBlh", 0); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = "org.apache.commons.lang3.StringUtils"; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSplitTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stopWatch0.getSplitTime(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Stopwatch must be split to get the split time.  [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.StopWatch", e); [EOL]       } [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceIn()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StrBuilder) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = 802; [EOL]       String string1 = strBuilder0.midString(802, 802); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('&', 4814); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int2 = strBuilder0.lastIndexOf('&', (-1)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string2 = "p*"; [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("p*"); [EOL]        [EOL]       int int3 = (-933); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replace((StrMatcher) strMatcher_StringMatcher0, (String) null, (-1), (-933), 4814); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('Y'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("L,!4&lfs}", "L,!4&lfs}"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder0.length(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(3); [EOL]       Date date0 = fastDateFormat0.parse("FastDateFormat[M/d/yy h:mm a,en,GMT]", parsePosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[4]; [EOL]       float[] floatArray1 = ArrayUtils.EMPTY_FLOAT_ARRAY; [EOL]       float[] floatArray2 = ArrayUtils.removeElements(floatArray0, floatArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       mutableDouble0.increment(); [EOL]       int int0 = mutableDouble0.intValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.appendContentStart(stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         standardToStringStyle0.MULTI_LINE_STYLE.appendFieldStart((StringBuffer) null, "1.4"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.ToStringStyle", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFixedWidthPadLeft()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '2'); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append((-176)); [EOL]        [EOL]       String string1 = strBuilder4.rightString((-700)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFixedWidthPadLeft()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(391); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'g'; [EOL]       charArray0[1] = 'T'; [EOL]       charArray0[2] = 'k'; [EOL]       charArray0[3] = 'g'; [EOL]       charArray0[4] = 'A'; [EOL]       charArray0[5] = 'j'; [EOL]       charArray0[6] = 'o'; [EOL]       charArray0[7] = '@'; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll((StrMatcher) strMatcher_NoMatcher0, "Y^Jmd^oJ=C+"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst(""); [EOL]        [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       objectArray0[0] = (Object) strMatcher_NoMatcher0; [EOL]       objectArray0[1] = (Object) 'T'; [EOL]       objectArray0[2] = (Object) strMatcher_NoMatcher0; [EOL]       objectArray0[3] = (Object) 'o'; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[4] = object0; [EOL]       objectArray0[5] = (Object) "Y^Jmd^oJ=C+"; [EOL]       objectArray0[6] = (Object) strBuilder1; [EOL]       objectArray0[7] = (Object) 'A'; [EOL]       objectArray0[8] = (Object) 'k'; [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators(objectArray0, "org.apache.commons.lang3.text.StrBuilder"); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf('E'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByCharacterType()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]       StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]       StringUtils.substring("t{", 0, 0); [EOL]       StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       arrayList0.add((Object) ""); [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]       StringUtils.join(doubleArray0, '}'); [EOL]       StringUtils.center("", 0); [EOL]       arrayList0.add((Object) "null comparator"); [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       StringUtils.isNumericSpace(stringBuffer0); [EOL]       StringUtils.left("", 0); [EOL]       StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]       StringUtils.join((Object[]) stringArray0, '}'); [EOL]       StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) ""); [EOL]       StringUtils.strip("0.0"); [EOL]       StringUtils.join((Iterable<?>) arrayList0, '}'); [EOL]       StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:"); [EOL]       StringUtils.startsWithAny("", stringArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Iterator<?>) listIterator0, '}'); [EOL]         fail("Expecting exception: ConcurrentModificationException"); [EOL]        [EOL]       } catch(ConcurrentModificationException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.ArrayList$Itr", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       JavaUnicodeEscaper javaUnicodeEscaper0 = JavaUnicodeEscaper.below(3477); [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(3477); [EOL]       String string0 = javaUnicodeEscaper0.translate((CharSequence) charBuffer0); [EOL]       StringWriter stringWriter0 = new StringWriter(3425); [EOL]       // Undeclared exception! [EOL]       javaUnicodeEscaper0.translate((CharSequence) string0, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-809)); [EOL]       short short0 = bitField0.setShortValue((short)1319, (short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddContextValue()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       ContextedException contextedException1 = contextedException0.addContextValue("org.apache.commons.lang3.exception.ContextedException", "org.apache.commons.lang3.exception.ContextedException"); [EOL]       String string0 = contextedException1.getMessage(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInDays()  throws Throwable  { [EOL]       Locale locale0 = Locale.FRENCH; [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "4"; [EOL]       Date date0 = DateUtils.parseDate("4", locale0, stringArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.getFragmentInDays(date0, 10); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The fragment 10 is not supported [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('2'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf('', 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhandleCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("OAaI}aKpDE"); [EOL]       MockError mockError0 = new MockError(mockThrowable0); [EOL]       ExecutionException executionException0 = new ExecutionException("", mockError0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.handleCauseUnchecked(executionException0); [EOL]         fail("Expecting exception: Error"); [EOL]        [EOL]       } catch(Error e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.left("F*ih6'Wv@Hv&-.Ni:q", (-2178)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", "F*ih6'Wv@Hv&-.Ni:q"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, ""); [EOL]        [EOL]       String string1 = StringUtils.stripStart("", (String) null); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.countMatches((CharSequence) null, ""); [EOL]        [EOL]       String string2 = StringUtils.stripToNull(""); [EOL]        [EOL]       String string3 = StringUtils.defaultString("", (String) null); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(575); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln((-1956.771F)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendFixedWidthPadLeft((-634), Integer.MAX_VALUE, 'P'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArraySeparator((String) null); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair0 = new MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>(); [EOL]       AbstractMap.SimpleImmutableEntry<String, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, String>("", ""); [EOL]       ImmutablePair<Integer, Integer> immutablePair0 = new ImmutablePair<Integer, Integer>(integer0, integer0); [EOL]       MutablePair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>> mutablePair1 = MutablePair.of(abstractMap_SimpleImmutableEntry0, immutablePair0); [EOL]       int int0 = mutablePair0.compareTo((Pair<AbstractMap.SimpleImmutableEntry<String, String>, ImmutablePair<Integer, Integer>>) mutablePair1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(6); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder("v@1?:{"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // dstOffset -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcloneReset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreformat()  throws Throwable  { [EOL]       MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(mockSimpleDateFormat0, mockSimpleDateFormat0); [EOL]       try {  [EOL]         compositeFormat0.reformat(""); [EOL]         fail("Expecting exception: ParseException"); [EOL]        [EOL]       } catch(ParseException e) { [EOL]          // [EOL]          // Format.parseObject(String) failed [EOL]          // [EOL]          verifyException("java.text.Format", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       boolean boolean0 = toStringStyle0.isUseFieldNames(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       char[] charArray0 = new char[1]; [EOL]       strBuilder_StrBuilderReader0.read(charArray0); [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       strBuilder_StrBuilderReader0.ready(); [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer.allocate(0); [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       strBuilder4.leftString(1); [EOL]       strBuilder3.size(); [EOL]       strBuilder3.appendln(true); [EOL]       strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       Locale locale0 = Locale.CANADA; [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       strBuilder4.appendAll((Iterable<?>) set0); [EOL]       strBuilder1.reverse(); [EOL]       strBuilder4.append((long) 81); [EOL]       assertEquals(95, strBuilder0.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(charSequenceArray0[2], ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf(charSequenceArray0[5], charSequenceArray0[3]); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("tA$dgqg-e4)j", '\"'); [EOL]        [EOL]       int[] intArray0 = new int[3]; [EOL]       intArray0[0] = 10; [EOL]       intArray0[1] = 2976; [EOL]       intArray0[2] = (int) '\"'; [EOL]       String string2 = StringUtils.join(intArray0, 'C'); [EOL]        [EOL]       long[] longArray0 = new long[0]; [EOL]       String string3 = StringUtils.join(longArray0, '3'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replacePattern("", (String) null, "Threshold must not be negative"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]       assertEquals(212, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]       assertEquals(212, strBuilder3.capacity()); [EOL]       assertEquals(212, strBuilder4.capacity()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder1.capacity()); [EOL]       assertEquals(212, strBuilder5.capacity()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]       assertEquals(212, strBuilder0.capacity()); [EOL]       assertEquals(212, strBuilder2.capacity()); [EOL]       assertEquals(212, strBuilder6.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setSummaryObjectEndText(""); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CompareToBuilder.reflectionCompare((Object) compareToBuilder0, object0); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripToNull()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       String string0 = StringUtils.toString(byteArray0, (String) null); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "\u0000", (CharSequence) "\u0000"); [EOL]        [EOL]       String string1 = StringUtils.strip(" ", (String) null); [EOL]        [EOL]       String string2 = StringUtils.rightPad(" ", 0, "BS3*65IG7>$ID)k%G"); [EOL]        [EOL]       String string3 = StringUtils.stripToNull(""); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) null, (int) (byte)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("Invalid offset: "); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'i'; [EOL]       charArray0[1] = '7'; [EOL]       charArray0[2] = '7'; [EOL]       charArray0[3] = '7'; [EOL]       charArray0[4] = '7'; [EOL]       charArray0[5] = '7'; [EOL]       charArray0[6] = '7'; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('7', 0); [EOL]        [EOL]       int int1 = strBuilder0.size(); [EOL]        [EOL]       int int2 = strBuilder1.indexOf(strMatcher0, 5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.center(", Length: ", 13); [EOL]        [EOL]       String string1 = StringUtils.rightPad("Z96z@\"", 13, ", Length: "); [EOL]        [EOL]       String string2 = StringUtils.substring("YC:1z-VJ%jvP$&", 0); [EOL]        [EOL]       String string3 = StringUtils.deleteWhitespace(""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("(?: s|[s&&[^ ]])s*", "YC:1z-VJ%jvP$&"); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte)49; [EOL]       byteArray0[2] = (byte) (-87); [EOL]       byteArray0[3] = (byte)0; [EOL]       byteArray0[4] = (byte)0; [EOL]       byteArray0[5] = (byte)0; [EOL]       byteArray0[6] = (byte) (-1); [EOL]       String string4 = StringUtils.join(byteArray0, '.'); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ", Length: ", (CharSequence) "", 722); [EOL]        [EOL]       int int1 = StringUtils.countMatches("YC:1z-VJ%jvP$&", "YC:1z-VJ%jvP$&"); [EOL]        [EOL]       String string5 = StringUtils.leftPad("", 13, "YC:1z-VJ%jvP$&"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = "0O5I%'`Y@3b7"; [EOL]       String[] stringArray0 = new String[8]; [EOL]       String string1 = ""; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[2] = "Z}3oacB,Bk)FR"; [EOL]       stringArray0[3] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[4] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[5] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[6] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[7] = "0O5I%'`Y@3b7"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replaceEachRepeatedly("0O5I%'`Y@3b7", stringArray0, stringArray0); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Aborting to protect against StackOverflowError - output of one loop is the input of another [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[0]; [EOL]       Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       ArrayUtils.reverse((Object[]) floatArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp((String) null, "U%Hs7' "); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace("U%Hs7' "); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("U%Hs7' "); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "U%Hs7'", 0); [EOL]        [EOL]       String string2 = StringUtils.reverse("U%Hs7'"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", 'P'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]        [EOL]       String string3 = StringUtils.lowerCase("The character ", locale0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0); [EOL]       assertEquals(2, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0); [EOL]       toStringBuilder0.append("", (-29L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.setQuoteChar('e'); [EOL]       assertEquals(1, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[6]; [EOL]       Double double0 = new Double(0.0); [EOL]       doubleArray0[0] = double0; [EOL]       double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0, 0.0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringBetween()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBetween("The Array must not be null", "The Array must not be null", "The Array must not be null"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string1 = StringUtils.stripStart((String) null, "The Array must not be null"); [EOL]        [EOL]       String string2 = StringUtils.stripStart(" in an array of ", "P`%\"P4Mt%2iJ"); [EOL]        [EOL]       String string3 = StringUtils.repeat("The Array must not be null", 18); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat(" is not in the range '0' - '9'", 1); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       String string1 = StringUtils.join(charArray0, 'x'); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.substringBetween(" is not in the range '0' - '9'", " is not in the range '0' - '9'"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.left("", (-4855)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhasPrevious()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[2] = 'B'; [EOL]       charArray0[3] = 'r'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.setDelimiterChar('B'); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\u0000'); [EOL]       boolean boolean0 = strTokenizer1.hasPrevious(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       char char0 = '3'; [EOL]       charArray0[0] = '3'; [EOL]       strBuilder0.buffer = charArray0; [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(3986.49F); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}"); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append("Y~"); [EOL]        [EOL]       IntStream intStream0 = strBuilder2.codePoints(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.toCharArray(724, 724); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("8N0V_]MYorW@{d", "8N0V_]MYorW@{d", 57); [EOL]        [EOL]       String string0 = StringUtils.remove("8N0V_]MYorW@{d", 'X'); [EOL]        [EOL]       String string1 = StringUtils.abbreviateMiddle("8N0V_]MYorW@{d", "Search and Replace array lengths don't match: ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotBlank("Search and Replace array lengths don't match: "); [EOL]        [EOL]       String string2 = StringUtils.repeat("6Q1c{m~hu", (-1328)); [EOL]        [EOL]       String string3 = StringUtils.leftPad("\r", 48, '.'); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "Search and Replace array lengths don't match: ", (-1826)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(289); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringAfter()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT"); [EOL]        [EOL]       String string0 = StringUtils.substringAfter("TT", "TT"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", ""); [EOL]        [EOL]       String string2 = StringUtils.repeat("", 116); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       String string3 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT");W-R>", string4); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122); [EOL]        [EOL]       String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("xQD3IhI"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) ""); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       String string5 = StringUtils.reverseDelimited("", ']'); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "xQD3IhI"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>"; [EOL]       int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean4 = StringUtils.isWhitespace("TT"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)0, (byte)0); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) null, (Collection<String>) linkedHashSet0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append(true, true); [EOL]        [EOL]       Class<Integer> class0 = Integer.class; [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = ""; [EOL]       equalsBuilder0.append((byte) (-1), (byte)2); [EOL]       stringArray0[1] = "The Array must not be null"; [EOL]       stringArray0[2] = "Q@a+w^PT*i"; [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       EqualsBuilder.getRegisterPair(boolean0, class0); [EOL]       Boolean boolean1 = equalsBuilder2.build(); [EOL]       float[] floatArray0 = new float[4]; [EOL]       floatArray0[0] = (float) (byte) (-1); [EOL]       floatArray0[1] = (float) (byte)2; [EOL]       floatArray0[2] = (float) (byte) (-1); [EOL]       floatArray0[3] = (float) (byte) (-1); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder1.append(floatArray0, floatArray0); [EOL]       EqualsBuilder.getRegisterPair("", equalsBuilder3); [EOL]       EqualsBuilder.reflectionEquals((Object) "Unexpected IllegalAccessException", (Object) boolean1, stringArray0); [EOL]       equalsBuilder1.appendSuper(true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testshortToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       byte[] byteArray1 = Conversion.shortToByteArray((short)1, (short)56, byteArray0, 1273, (short) (-110)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[1] = true; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       booleanArray0[4] = false; [EOL]       booleanArray0[5] = false; [EOL]       boolean[] booleanArray1 = new boolean[2]; [EOL]       booleanArray1[0] = false; [EOL]       booleanArray1[1] = true; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, booleanArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, true); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1865, 1865); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((double) 1865, (double) 1865); [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder5.append((long) 1865, (long) 1865); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 7); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0Nn2%azF )g$yM<;c"); [EOL]        [EOL]       String string0 = StringUtils.replaceChars("w", 'w', 'w'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "w", "w"); [EOL]        [EOL]       String string1 = StringUtils.deleteWhitespace("wz6d7vzJ$Nu"); [EOL]        [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)837; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)1628; [EOL]       shortArray0[3] = (short)4517; [EOL]       shortArray0[4] = (short) (-1910); [EOL]       shortArray0[5] = (short)1625; [EOL]       shortArray0[6] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'b'); [EOL]        [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1910); [EOL]       floatArray0[1] = (float) (short)0; [EOL]       floatArray0[2] = (float) 'w'; [EOL]       String string3 = StringUtils.join(floatArray0, 't'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-376)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(2302L); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]       assertEquals(5, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.ensureCapacity(114); [EOL]       assertEquals(5, strBuilder0.size()); [EOL]       assertEquals(5, strBuilder1.size()); [EOL]       assertEquals(5, strBuilder3.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("SzpQ!4 ;U"); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]       assertEquals(41, strBuilder1.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       mutableDouble0.getValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.reverse(", Length: 0"); [EOL]        [EOL]       String string1 = StringUtils.defaultString("N!c%7%Qc399PR"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "N!c%7%Qc399PR", (CharSequence) null); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "0 :htgneL ,"; [EOL]       charSequenceArray0[1] = null; [EOL]       charSequenceArray0[2] = (CharSequence) "0 :htgneL ,"; [EOL]       charSequenceArray0[3] = (CharSequence) "N!c%7%Qc399PR"; [EOL]       charSequenceArray0[4] = (CharSequence) "N!c%7%Qc399PR"; [EOL]       charSequenceArray0[5] = (CharSequence) "0 :htgneL ,"; [EOL]       int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("0 :htgneL ,", ">D<O)oa1X?)", (-924)); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.descendingIterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, "N!c%7%Qc399PR"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtruncatedEquals()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(0, 0, 0); [EOL]       Date date0 = DateUtils.addMinutes(mockDate0, 582); [EOL]       boolean boolean0 = DateUtils.truncatedEquals((Date) mockDate0, date0, 11); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetLength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int0 = (-302); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setLength((-302)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -302 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0QND2L"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredMatcher((StrMatcher) null); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTypeArguments()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[0]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getUpperBounds(); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("haqSW1h"); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = DurationFormatUtils.lexx("2.yCA&VIq3y*mz+}([3"); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("haqSW1h"); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1825, 3593, 1825, 0, 1825, 0, 1825, true); [EOL]       DurationFormatUtils.formatDurationWords(1L, true, true); [EOL]       DurationFormatUtils.formatPeriodISO(3699L, 0); [EOL]       DurationFormatUtils.format(durationFormatUtils_TokenArray1, 0, (-808), 0, (-1520), (-1520), 0, 1, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumeric()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byteArray0[0] = (byte)10; [EOL]       byteArray0[1] = (byte) (-104); [EOL]       byteArray0[2] = (byte)61; [EOL]       byteArray0[3] = (byte) (-92); [EOL]       byteArray0[4] = (byte)1; [EOL]       byteArray0[5] = (byte) (-66); [EOL]       byteArray0[6] = (byte) (-65); [EOL]       byteArray0[7] = (byte)0; [EOL]       byteArray0[8] = (byte)0; [EOL]       String string0 = StringUtils.join(byteArray0, 'e'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNumeric("10e-104e61e-92e1e-66e-65e0e0"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("10e-104e61e-92e1e-66e-65e0e0"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isEmpty("10e-104e61e-92e1e-66e-65e0e0"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isNotBlank("10e-104e61e-92e1e-66e-65e0e0"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableInt[] mutableIntArray0 = new MutableInt[7]; [EOL]       Float float0 = new Float(0.0F); [EOL]       MutableInt mutableInt0 = new MutableInt(float0); [EOL]       mutableIntArray0[0] = mutableInt0; [EOL]       MutableInt mutableInt1 = ObjectUtils.max(mutableIntArray0); [EOL]       assertEquals("0", mutableInt1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "Dy~{jBj&qu!T}=0k", "remove() is unsupported"); [EOL]       String string0 = strSubstitutor0.replace((Object) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder9.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder8.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder8.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder10.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder11 = strBuilder6.deleteFirst('\\'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder11.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.normalizeSpace((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = ""; [EOL]       String string3 = StringUtils.leftPad((String) null, 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) null, 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap((CharSequence) null, (-1520), 4452); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.StringCharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2); [EOL]        [EOL]       String string1 = StringUtils.chop(""); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(""); [EOL]        [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)947; [EOL]       shortArray0[1] = (short)7; [EOL]       String string2 = StringUtils.join(shortArray0, 'j'); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.replaceChars("", "org.apache.commons.lang3.ObjectUtils$Null", "(?: s|[s&&[^ ]])s*"); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringBeforeLast()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("BnJbN*", "ARM45"); [EOL]        [EOL]       String string1 = StringUtils.trimToEmpty("BnJbN*"); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "ARM45"); [EOL]        [EOL]       String string2 = StringUtils.swapCase("BnJbN*"); [EOL]        [EOL]       PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(); [EOL]        [EOL]       HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0); [EOL]        [EOL]       boolean boolean0 = hashSet0.add("BnJbN*"); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) hashSet0, 's'); [EOL]        [EOL]       String string4 = StringUtils.chomp("", "bNjBn*"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "java.lang.String@0000000001"; [EOL]       String string5 = StringUtils.join(objectArray0, 'x', (-1), (-1)); [EOL]        [EOL]       String string6 = StringUtils.strip("B,3", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("ARM45", "ARM45", 3207); [EOL]        [EOL]       String string7 = StringUtils.join((Iterator<?>) null, "A}&z47|p01e"); [EOL]        [EOL]       String string8 = StringUtils.removeStart("jh", "jh"); [EOL]        [EOL]       String string9 = StringUtils.abbreviate("", (-1), 3207); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils.randomNumeric(0); [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'Q'; [EOL]       charArray0[1] = '0'; [EOL]       charArray0[2] = ';'; [EOL]       charArray0[3] = 'd'; [EOL]       charArray0[4] = 'd'; [EOL]       charArray0[5] = '0'; [EOL]       MockRandom mockRandom0 = new MockRandom(); [EOL]       RandomStringUtils.random(0, 780, 0, false, false, charArray0, (Random) mockRandom0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("OgU68#7UbWI,wzq8", toStringStyle0, stringBuffer0); [EOL]       toStringBuilder0.append("OgU68#7UbWI,wzq8", (-3003.9)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "\"(k$", "", 64); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, (-913)); [EOL]        [EOL]       String string1 = StringUtils.leftPad("", (-1)); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("Minimum abbreviation width with offset is 7", "<"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+"; [EOL]       charSequenceArray0[2] = (CharSequence) "<"; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "\"(k$"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) "\"(k$"; [EOL]       charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys();2|T ")); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0);2|T ")); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsAny()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("'/sj", (String) null, (String) null, 16); [EOL]        [EOL]       String string1 = StringUtils.overlay("'/sj", (String) null, 16, 0); [EOL]        [EOL]       String string2 = StringUtils.trimToNull(""); [EOL]        [EOL]       String string3 = StringUtils.defaultString("Ga\"k:iU:"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) ""); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       String string4 = StringUtils.repeat(" vs ", 16); [EOL]        [EOL]       String string5 = StringUtils.replaceOnce(":z4/I#", "'/sj", "+e.9:pV6W"); [EOL]        [EOL]       String string6 = StringUtils.leftPad((String) null, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType((String) null); [EOL]        [EOL]       String string7 = StringUtils.substringBetween("Strings must not be null", "I3=", "The Array must not be null"); [EOL]        [EOL]       String string8 = StringUtils.join((Object[]) null, "I3="); [EOL]        [EOL]       int int0 = StringUtils.countMatches("Strings must not be null", "\r"); [EOL]        [EOL]       String string9 = StringUtils.lowerCase("B-|$%k)sj"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsWhitespace("'/sj"); [EOL]        [EOL]       short[] shortArray0 = new short[9]; [EOL]       shortArray0[0] = (short) (-2292); [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)0; [EOL]       shortArray0[3] = (short)16; [EOL]       shortArray0[4] = (short)4; [EOL]       shortArray0[5] = (short) (-713); [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short)2; [EOL]       shortArray0[8] = (short)0; [EOL]       String string10 = StringUtils.join(shortArray0, 'e'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('Y'); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("L,!4&lfs}", "L,!4&lfs}"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.length(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3235); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 656); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-495), (-495)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -495 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("D", charBuffer0.toString()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals("", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals("", charBuffer1.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.removePattern("m%I&V4M", "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       String string1 = StringUtils.chomp("m%I&V4M", "m%I&V4M"); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("", "fOXsK42LD`NC@(D>vyX"); [EOL]        [EOL]       String string3 = StringUtils.join((short[]) null, 'I'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "m%I&V4M"); [EOL]        [EOL]       Locale locale0 = Locale.CHINESE; [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-3190)); [EOL]        [EOL]       String string5 = StringUtils.stripEnd("", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsIgnoreCase("", ""); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'I'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap(charArray0, (-1), (-3190)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.CharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3235); [EOL]       assertEquals(3235, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 656); [EOL]       assertEquals(3235, strBuilder0.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-495), (-495)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -495 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("OgU68#7UbWI,wzq8", toStringStyle0, stringBuffer0); [EOL]       toStringBuilder0.append((short) (byte) (-108)); [EOL]       //  // Unstable assertion: assertEquals("-108", stringBuffer0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = " in an array of "; [EOL]       StrBuilder strBuilder0 = new StrBuilder(" in an array of "); [EOL]       assertEquals(16, strBuilder0.size()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(" in an array of ", 0, 0); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder1.size()); [EOL]        [EOL]       String string1 = strBuilder1.substring(0); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder1.size()); [EOL]        [EOL]       int int1 = (-860); [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(17, strBuilder0.size()); [EOL]       assertEquals(17, strBuilder1.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-860), (Object) " in an array of "); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -860 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetAcquireCount()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer()); [EOL]       MockThread mockThread0 = new MockThread(); [EOL]       MockThread mockThread1 = new MockThread(threadGroup0, mockThread0); [EOL]       MockThread mockThread2 = new MockThread(mockThread1, ""); [EOL]       MockThread mockThread3 = new MockThread(mockThread2); [EOL]       ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer()); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(501, threadFactory0); [EOL]       threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread3, scheduledThreadPoolExecutor0); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(501, threadPoolExecutor_DiscardPolicy0); [EOL]       TimeUnit timeUnit0 = TimeUnit.SECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor1, 501, timeUnit0, 501); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.getAverageCallsPerPeriod(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.startTimer(); [EOL]       assertEquals(1, timedSemaphore0.getAcquireCount()); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtrim()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.clear(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder7 = strBuilder5.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, ""); [EOL]        [EOL]       char char0 = 'W'; [EOL]       int int3 = strBuilder0.lastIndexOf('W', 7); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('e', 2132); [EOL]        [EOL]       String string1 = StringUtils.repeat("Threshold must not be negative", "v23$tb3VrRSS-kFn0", 928); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) string1; [EOL]       charSequenceArray0[1] = (CharSequence) "Threshold must not be negative"; [EOL]       String string2 = StringUtils.reverse((String) null); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) null; [EOL]       String string3 = StringUtils.prependIfMissingIgnoreCase(string1, string0, charSequenceArray0); [EOL]        [EOL]       String string4 = StringUtils.join((Object[]) charSequenceArray0, string1, 928, 928); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("length must be valid"); [EOL]       assertEquals(20, strBuilder0.length()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, '_'); [EOL]       assertEquals(21, strBuilder0.length()); [EOL]       assertEquals(21, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(".["); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(strBuilder2, 0, 0); [EOL]       assertEquals(21, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]       assertEquals(21, strBuilder3.length()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.substring(915, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(0.0, 2621.8501657804); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripAll()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.upperCase(""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4058)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 1813); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       String string4 = StringUtils.substringBetween("Strings must not be null", "ihdj\"taX4!C- GO", (String) null); [EOL]        [EOL]       boolean boolean5 = StringUtils.isNumeric("T"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfirstNonNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils"; [EOL]       Object object0 = ObjectUtils.firstNonNull(objectArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       String string0 = StringUtils.join(shortArray0, '>', 2695, (-1115)); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '>'; [EOL]       charArray0[1] = '>'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = '>'; [EOL]       charArray0[4] = '>'; [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0); [EOL]        [EOL]       String string1 = StringUtils.defaultString(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "F7"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string2 = StringUtils.prependIfMissingIgnoreCase("F7", "", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDateTimeInstance()  throws Throwable  { [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Illegal pattern character '"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, (TimeZone) simpleTimeZone0); [EOL]       FieldPosition fieldPosition0 = new FieldPosition(1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.format((Object) "Illegal pattern character '", (StringBuffer) null, fieldPosition0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Unknown class: java.lang.String [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCodeMulti()  throws Throwable  { [EOL]       int int0 = ObjectUtils.hashCodeMulti((Object[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad("", 4096, '4'); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", ""); [EOL]        [EOL]       String string1 = StringUtils.center(string0, 10, '4'); [EOL]        [EOL]       String[] stringArray0 = new String[0]; [EOL]       String string2 = StringUtils.replaceEach("", stringArray0, stringArray0); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]        [EOL]       String string3 = StringUtils.replace("T&7r}Cd@", string1, "", 0); [EOL]       assertFalse(string0.equals((Object)string2)); [EOL]       assertFalse(string1.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = "ARM45"; [EOL]       String string1 = StringUtils.substringBeforeLast("BnJbN*", "ARM45"); [EOL]        [EOL]       String string2 = StringUtils.trimToEmpty(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) ""); [EOL]        [EOL]       String string3 = StringUtils.swapCase("BnJbN*"); [EOL]        [EOL]       PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(); [EOL]       assertFalse(priorityQueue0.contains(string1)); [EOL]        [EOL]       HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0); [EOL]       assertFalse(priorityQueue0.contains(string1)); [EOL]       assertFalse(hashSet0.contains(string1)); [EOL]        [EOL]       boolean boolean0 = hashSet0.add("BnJbN*"); [EOL]       assertFalse(priorityQueue0.contains(string1)); [EOL]       assertTrue(hashSet0.contains(string1)); [EOL]       assertFalse(hashSet0.contains(string3)); [EOL]        [EOL]       String string4 = StringUtils.join((Iterable<?>) hashSet0, 's'); [EOL]       assertFalse(priorityQueue0.contains(string1)); [EOL]       assertTrue(hashSet0.contains(string1)); [EOL]       assertFalse(hashSet0.contains(string4)); [EOL]        [EOL]       String string5 = StringUtils.chomp("", "bNjBn*"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", 0); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "java.lang.String@0000000001"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(objectArray0, 'x', 0, 57); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       MutablePair<Integer, ImmutablePair<Integer, Object>> mutablePair0 = new MutablePair<Integer, ImmutablePair<Integer, Object>>(); [EOL]       MutablePair<Object, String> mutablePair1 = new MutablePair<Object, String>(); [EOL]       MutablePair<Integer, Integer> mutablePair2 = new MutablePair<Integer, Integer>(); [EOL]       MutablePair<MutablePair<Integer, Integer>, Object> mutablePair3 = new MutablePair<MutablePair<Integer, Integer>, Object>(mutablePair2, mutablePair0); [EOL]       Object object0 = mutablePair3.getRight(); [EOL]       boolean boolean0 = mutablePair1.equals(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer0.getFuture(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // start() must be called first! [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator("}G8MML|D5VDG@T^7j", "Invalid length: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1)); [EOL]       Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(integer0).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0); [EOL]       Integer integer1 = callableBackgroundInitializer0.initialize(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FastDateFormat.getInstance("Illegal pattern character '"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal pattern component: I [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.UTC; [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       Locale locale0 = Locale.FRENCH; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0); [EOL]       try {  [EOL]         fastDateParser0.parse("vroD"); [EOL]         fail("Expecting exception: ParseException"); [EOL]        [EOL]       } catch(ParseException e) { [EOL]          // [EOL]          // Unparseable date: \"vroD\" does not match \\Q,\\E [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[18]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString((-1)); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(false); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", (-1)); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2")); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertFalse(set0.contains("D:qv{0F`Yb3&H^f*N2")); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsAny()  throws Throwable  { [EOL]       String[] stringArray0 = new String[11]; [EOL]       stringArray0[7] = "hmQS;JGGOpUvFJ"; [EOL]       boolean boolean0 = CharSetUtils.containsAny("|", stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripToNull()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp((String) null, "U%Hs7' "); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace("U%Hs7' "); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("U%Hs7' "); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "U%Hs7'", 0); [EOL]        [EOL]       String string2 = StringUtils.reverse("U%Hs7'"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", 'P'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]        [EOL]       String string3 = StringUtils.lowerCase("The character ", locale0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       Integer integer0 = new Integer(676); [EOL]       Integer integer1 = new Integer(676); [EOL]       Integer integer2 = BooleanUtils.toIntegerObject(boolean0, integer0, integer1, integer1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtruncate()  throws Throwable  { [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = ""; [EOL]       Date date0 = DateUtils.parseDateStrictly("", (Locale) null, stringArray0); [EOL]       Date date1 = DateUtils.truncate((Object) date0, 12); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("X>2Y%"); [EOL]       long[] longArray0 = new long[5]; [EOL]       Boolean boolean0 = new Boolean(""); [EOL]       standardToStringStyle0.append(stringBuffer0, (String) null, longArray0, boolean0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('e'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, "F"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('#'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(598L); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.reverse(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'K'; [EOL]       charArray0[3] = 'e'; [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) null); [EOL]        [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = 'e'; [EOL]       charArray0[6] = 'e'; [EOL]       charArray0[7] = 'e'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       int int2 = 1354; [EOL]       strBuilder_StrBuilderReader0.mark(1354); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals("n", charBuffer0.toString()); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals("", charBuffer0.toString()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertEquals("", charBuffer1.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertEquals("en_CA", locale0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("F"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst('e'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, "F"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('#'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append(598L); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.reverse(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       charArray0[2] = 'K'; [EOL]       charArray0[3] = 'e'; [EOL]       int int0 = strBuilder2.indexOf((StrMatcher) null); [EOL]        [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = 'e'; [EOL]       charArray0[6] = 'e'; [EOL]       charArray0[7] = 'e'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       int int2 = 1354; [EOL]       strBuilder_StrBuilderReader0.mark(1354); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderTokenizer0.previous(); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrTokenizer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE_QUARTER; [EOL]       Fraction fraction1 = Fraction.getReducedFraction(367, 367); [EOL]       boolean boolean0 = fraction0.equals(fraction1); [EOL]       assertEquals(1, fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1)); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-1)); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]        [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(stringArray0); [EOL]       assertEquals(28, strBuilder0.length()); [EOL]       assertEquals(28, strBuilder2.length()); [EOL]       assertEquals(1, stringArray0.length); [EOL]        [EOL]       int int0 = strBuilder1.lastIndexOf('A'); [EOL]       assertEquals(28, strBuilder0.length()); [EOL]       assertEquals(28, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.replaceAll((StrMatcher) null, "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertEquals(28, strBuilder0.length()); [EOL]       assertEquals(28, strBuilder3.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisWhitespace()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean3 = arrayList0.add((Object) ""); [EOL]        [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string2 = StringUtils.join(doubleArray0, 'q'); [EOL]        [EOL]       String string3 = StringUtils.replace("t{", "g?PZ{DRa[O6upHJ", "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, 'q'); [EOL]        [EOL]       boolean boolean6 = StringUtils.contains((CharSequence) "*qKUqx7dwU3mi-y:", (CharSequence) "t{"); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.join((Iterable<?>) arrayList0, 'q'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*qKUqx7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean7 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Iterator<?>) listIterator0, 'q'); [EOL]         fail("Expecting exception: ConcurrentModificationException"); [EOL]        [EOL]       } catch(ConcurrentModificationException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.ArrayList$Itr", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " "); [EOL]        [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]        [EOL]       String string2 = StringUtils.remove(" ", '8'); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) charSequenceArray0, " "); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoLocale()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         LocaleUtils.toLocale("org.apache.commons.lang3.LocaleUtils$SyncAvoid"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Invalid locale format: org.apache.commons.lang3.LocaleUtils$SyncAvoid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.LocaleUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder.unregister(object0, object0); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) equalsBuilder0; [EOL]       Object object1 = new Object(); [EOL]       objectArray0[1] = object1; [EOL]       objectArray0[2] = object0; [EOL]       Object[] objectArray1 = new Object[3]; [EOL]       objectArray1[0] = (Object) equalsBuilder0; [EOL]       objectArray1[1] = (Object) equalsBuilder0; [EOL]       objectArray1[2] = object1; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(objectArray0, objectArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0.0F, 1.0F); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(false, false); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(objectArray0[0], object2); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) 0.0F; [EOL]       doubleArray0[1] = (double) 0.0F; [EOL]       doubleArray0[2] = (double) 0.0F; [EOL]       doubleArray0[3] = (double) 0.0F; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(doubleArray0, doubleArray0); [EOL]       equalsBuilder5.append((byte) (-72), (byte) (-72)); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[6]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFieldsIn()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("java.lang.String@1[value={h,],o,G,z,~,#,D,*,K},hash=-1470175597]", toStringStyle0, (StringBuffer) null); [EOL]       Class<Object> class0 = Object.class; [EOL]       reflectionToStringBuilder0.appendFieldsIn(class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringAfterLast()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("up", 'O', 'O'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "up", "up"); [EOL]        [EOL]       String string1 = StringUtils.substringAfterLast("_iVq9-<w--D+?HoA~d", "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)1; [EOL]       String string2 = StringUtils.join(byteArray0, 'O'); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       String string3 = StringUtils.chomp("1", "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "up", (CharSequence) "_iVq9-<w--D+?HoA~d", (int) (byte)1); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "up", (-1)); [EOL]        [EOL]       String string4 = StringUtils.substringAfter("", " vs "); [EOL]        [EOL]       String string5 = StringUtils.substringBeforeLast("1", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string6 = StringUtils.removePattern("1", "=P5R+AZe1"); [EOL]        [EOL]       String string7 = StringUtils.uncapitalize("_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.StringUtils", (CharSequence[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('Z'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4043)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 1885L; [EOL]       longArray0[1] = (long) 0; [EOL]       String string4 = StringUtils.join(longArray0, 'S', 285, 0); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043)); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)21; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)16; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte)3; [EOL]       byteArray0[5] = (byte)64; [EOL]       byteArray0[6] = (byte)36; [EOL]       try {  [EOL]         StringUtils.toString(byteArray0, ""); [EOL]         fail("Expecting exception: UnsupportedEncodingException"); [EOL]        [EOL]       } catch(UnsupportedEncodingException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripToEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.getCommonPrefix((String[]) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       String string1 = StringUtils.repeat("hZ'pC", (String) null, 1); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'r'; [EOL]       charArray0[1] = 't'; [EOL]       charArray0[2] = 'u'; [EOL]       charArray0[3] = 'O'; [EOL]       charArray0[4] = '+'; [EOL]       charArray0[5] = '*'; [EOL]       charArray0[6] = 'I'; [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "hZ'pC", charArray0); [EOL]        [EOL]       String string2 = StringUtils.stripToEmpty(""); [EOL]        [EOL]       String string3 = StringUtils.abbreviateMiddle("hZ'pC", "", 1); [EOL]        [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byteArray0[0] = (byte)1; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte) (-10); [EOL]       byteArray0[3] = (byte) (-127); [EOL]       byteArray0[4] = (byte)93; [EOL]       byteArray0[5] = (byte)52; [EOL]       byteArray0[6] = (byte) (-28); [EOL]       byteArray0[7] = (byte)56; [EOL]       byteArray0[8] = (byte) (-67); [EOL]       String string4 = StringUtils.join(byteArray0, 't'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = '='; [EOL]       charArray0[5] = '5'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       String string2 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[1] = (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[2] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[3] = (CharSequence) "Z|&xc}e&+;"; [EOL]       String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[5] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "', is neither of type Map.Entry nor an Array", charSequenceArray0); [EOL]        [EOL]       String string4 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "', is neither of type Map.Entry nor an Array", (-3245)); [EOL]        [EOL]       int int2 = StringUtils.indexOfAny(charSequenceArray0[1], charArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]        [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "', is neither of type Map.Entry nor an Array"; [EOL]       stringArray0[1] = "Z|&xc}e&+;"; [EOL]       StringUtils.replaceEach(" vs ", stringArray0, stringArray0); [EOL]       int int3 = StringUtils.indexOf((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) " vs "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.append((short[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetLength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = "0rn@[CM"; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder("0rn@[CM"); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = 2822; [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviateMiddle()  throws Throwable  { [EOL]       String string0 = StringUtils.strip("eviation width is 4"); [EOL]        [EOL]       int int0 = StringUtils.length("eviation width is 4"); [EOL]        [EOL]       String string1 = StringUtils.abbreviateMiddle("eviation width is 4", "!D{rz~", 19); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfAny("eviation width is 4", (CharSequence[]) null); [EOL]        [EOL]       String string2 = StringUtils.capitalize("\n"); [EOL]        [EOL]       String string3 = StringUtils.chop("clone"); [EOL]        [EOL]       double[] doubleArray0 = new double[2]; [EOL]       doubleArray0[0] = (double) 19; [EOL]       doubleArray0[1] = (double) 19; [EOL]       String string4 = StringUtils.join(doubleArray0, '>', 19, 5); [EOL]        [EOL]       String string5 = StringUtils.replace("eviation width is 4", "eviation width is 4", "clone", 992); [EOL]        [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = (int) '>'; [EOL]       intArray0[1] = 5; [EOL]       intArray0[2] = (int) '>'; [EOL]       intArray0[3] = (-1); [EOL]       String string6 = StringUtils.join(intArray0, '>', 1120, (-1)); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '>'; [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("eviation width is 4"); [EOL]        [EOL]       String string7 = StringUtils.removeEnd("clone", "Strings must not be null"); [EOL]        [EOL]       String string8 = StringUtils.chop("clon"); [EOL]        [EOL]       String string9 = StringUtils.substringBetween("RWSLzV4h", "\n", "\n"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]        [EOL]       standardToStringStyle0.setContentEnd(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseDate()  throws Throwable  { [EOL]       Locale locale0 = Locale.US; [EOL]       String[] stringArray0 = new String[5]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.parseDate("[kX_j'Z$Oo|{W", locale0, stringArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       double[] doubleArray1 = new double[2]; [EOL]       double[] doubleArray2 = ArrayUtils.removeElements(doubleArray0, doubleArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[8] = 244; [EOL]       String[] stringArray0 = new String[1]; [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) intArray0[1], (Object) intArray0[8], stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       int int0 = (-2195); [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-2195)); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-2195)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt((-2195)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2195 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setSizeEndText((String) null); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("SzpQ!4 ;U");U", strBuilder0.getNullText()); [EOL]       assertFalse(strBuilder0.isEmpty());U", strBuilder1.getNullText()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setCharAt((-2068), 'W'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2068 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteCharAt()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]        [EOL]       int int0 = StrBuilder.CAPACITY; [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((char[]) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append(strBuilder2, 0, 1103); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       Locale locale0 = Locale.KOREAN; [EOL]       DateFormat dateFormat0 = MockDateFormat.getTimeInstance(0, locale0); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(dateFormat0, dateFormat0); [EOL]       ParsePosition parsePosition0 = new ParsePosition((-1)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         compositeFormat0.parseObject("H-O<CeV5 ", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOfAny()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("Threshold must not be negative", ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFa", "s", ".ti')kKzb5J(cbBlh"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetShortCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortCanonicalName("[Long"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Object>) hashMap0); [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffixMatcher(strMatcher_NoMatcher0); [EOL]       assertEquals('$', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("{}", ''); [EOL]        [EOL]       String string0 = StringUtils.deleteWhitespace("{}"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("{}"); [EOL]        [EOL]       String string1 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank("{}"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string2 = StringUtils.chomp("Vk&zfkT%G?", "ANC_ZRi_!G%*zb*}00["); [EOL]        [EOL]       String string3 = StringUtils.replaceChars(".P12KH%T)16", '', ''); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("{}", "{}"); [EOL]        [EOL]       String string5 = StringUtils.repeat("=QaM7(XY12j6+", 0); [EOL]        [EOL]       String string6 = StringUtils.center("Vk&zfkT%G?", (-365), "PT??=;[n7'S"); [EOL]        [EOL]       String string7 = StringUtils.replaceChars("Minimum abbreviation width with offset is 7", "\"VIh+&E9[SAJY", "p{InCombiningDiacriticalMarks}+"); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Vk&zfkT%G?", "Vk&zfkT%G?", 0); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{}"); [EOL]        [EOL]       String[] stringArray3 = StringUtils.stripAll(stringArray0, ".P12KH%T)16"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "\"VIh+&E9[SAJY", (CharSequence) "Minimum abbreviation width with offset is 7", (-512)); [EOL]        [EOL]       String string8 = StringUtils.mid("Vk&zfkT%G?", 17, (-1543)); [EOL]        [EOL]       String string9 = StringUtils.stripToNull("qU"); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsAny((CharSequence) "qU", (CharSequence) "{}"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrightPad()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad((String) null, 1337); [EOL]        [EOL]       String string1 = StringUtils.chomp("", (String) null); [EOL]        [EOL]       String string2 = StringUtils.stripEnd("", (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(""); [EOL]        [EOL]       int[] intArray0 = new int[5]; [EOL]       intArray0[0] = 1337; [EOL]       intArray0[1] = 1337; [EOL]       intArray0[2] = 1337; [EOL]       intArray0[3] = 1337; [EOL]       intArray0[4] = 1337; [EOL]       String string3 = StringUtils.join(intArray0, '?'); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllLowerCase("1337?1337?1337?1337?1337"); [EOL]        [EOL]       String string4 = StringUtils.substring("", 1337, 1337); [EOL]        [EOL]       String string5 = StringUtils.mid("7>", 0, 4430); [EOL]        [EOL]       String[] stringArray1 = StringUtils.split("I`7=)^j"); [EOL]        [EOL]       int[] intArray1 = new int[2]; [EOL]        [EOL]       intArray1[0] = 0; [EOL]       intArray1[1] = 0; [EOL]       String string6 = StringUtils.join(intArray1, 'V'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte)0); [EOL]       mutableByte0.setValue((byte)124); [EOL]       int int0 = mutableByte0.intValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreate()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         EventListenerSupport.create((Class<Object>) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // Listener interface cannot be null. [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("-1"); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.priority(0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(3296).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range1 = Range.is((Object) range0, comparator1); [EOL]       Range<Object> range2 = Range.between((Object) "3P~}zBq", (Object) "", (Comparator<Object>) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         range1.isOverlappedBy(range2); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Range$ComparableComparator", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInDays()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(13, 13, 13, 13, 13); [EOL]       long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 13); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       int int0 = NumberUtils.max((-691), (-930), 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = " in an array of "; [EOL]       StrBuilder strBuilder0 = new StrBuilder(" in an array of "); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(" in an array of ", 0, 0); [EOL]        [EOL]       String string1 = strBuilder1.substring(0); [EOL]        [EOL]       int int1 = (-860); [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-860), (Object) " in an array of "); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -860 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp((String) null, "U%Hs7' "); [EOL]        [EOL]       boolean boolean0 = StringUtils.isWhitespace("U%Hs7' "); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("U%Hs7' "); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) "U%Hs7'", 0); [EOL]        [EOL]       String string2 = StringUtils.reverse("U%Hs7'"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", 'P'); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]       assertEquals("", locale0.toString()); [EOL]        [EOL]       String string3 = StringUtils.lowerCase("The character ", locale0); [EOL]       assertEquals("", locale0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandomAlphanumeric()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("omzdB-0;EZ}u;Zy1|)"); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ObjectUtils.identityToString(stringBuffer0, (Object) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // Cannot get the toString of a null identity [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.ObjectUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]        [EOL]       int int0 = StrBuilder.CAPACITY; [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((char[]) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.append(strBuilder2, 0, 1103); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2 = StringUtils.substring("", 0, 32); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string3 = StringUtils.join(floatArray0, 'L'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteFirst()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = "OS/2"; [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("OS/2"); [EOL]        [EOL]       String string1 = "java.awt.printerjob"; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("java.awt.printerjob"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(5, (Object) "OS/2"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 5 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(2134); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) null, ""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterator<?>) null); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       CharSequence charSequence0 = strBuilder2.subSequence(0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1198, 1198); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1198 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)95); [EOL]       MutableByte mutableByte0 = new MutableByte((Number) byte0); [EOL]       MutableByte mutableByte1 = new MutableByte((byte)95); [EOL]       mutableByte1.add((Number) byte0); [EOL]       int int0 = mutableByte0.compareTo(mutableByte1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(875); [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(boolean0); [EOL]       Boolean boolean1 = BooleanUtils.toBooleanObject(integer0, (Integer) null, (Integer) null, integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeHtml4()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml4("\"\""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       IDKey iDKey0 = new IDKey(equalsBuilder0); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) iDKey0, (Object) iDKey0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(281L, 281L); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((float[]) null, (float[]) null); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)85, (byte)85); [EOL]       short[] shortArray0 = new short[6]; [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '/'; [EOL]       char[] charArray1 = new char[1]; [EOL]       charArray1[0] = '/'; [EOL]       equalsBuilder4.append(charArray0, charArray1); [EOL]       shortArray0[0] = (short) (byte)85; [EOL]       shortArray0[1] = (short) (byte)85; [EOL]       shortArray0[2] = (short) (byte)85; [EOL]       shortArray0[3] = (short) (byte)85; [EOL]       shortArray0[4] = (short) (byte)85; [EOL]       shortArray0[5] = (short) (byte)85; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(shortArray0, shortArray0); [EOL]       equalsBuilder5.append((short)0, (short)85); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) equalsBuilder5, false); [EOL]       equalsBuilder4.append(charArray1, charArray1); [EOL]       equalsBuilder5.append((Object[]) null, (Object[]) null); [EOL]       assertFalse(equalsBuilder1.isEquals()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       int int0 = (-1994); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1994)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(""); [EOL]        [EOL]       int int1 = (-2242); [EOL]       int int2 = 5; [EOL]       strBuilder1.size = 5; [EOL]        [EOL]       strBuilder1.size = (-2242); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       int int3 = 20; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace((-2242), 20, "java.compiler"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2242 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Integer>) hashMap0, "ZFU$pUC", "ZFU$pUC"); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.setVariablePrefix("ZFU$pUC"); [EOL]       assertTrue(strSubstitutor0.isEnableSubstitutionInVariables()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 9, '>'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteAll('F'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append('F'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strBuilder_StrBuilderTokenizer0.getContent(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder_StrBuilderTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.replaceFirst((String) null, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(9); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendPadding((-414), '='); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.append(">>>>>>>>>F"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringsBetween()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("Threshold must not be negative", ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.substringsBetween("org.apache.commons.lang3.exception.CloneFa", "s", ".ti')kKzb5J(cbBlh"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.setSummaryObjectEndText("Windows 9"); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Conversion.longToByteArray((-2090), (-413), byteArray0, (-2090), (byte)20); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -2090 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Conversion", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '\\'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdefaultIfBlank()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(21); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(114, strBuilder1.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(114, strBuilder1.length()); [EOL]       assertEquals(114, strBuilder2.length()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       assertEquals(2, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       assertEquals(114, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) 104); [EOL]       assertEquals(117, strBuilder0.length()); [EOL]       assertEquals(117, strBuilder1.length()); [EOL]       assertEquals(117, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", (String) null); [EOL]       assertEquals(174, strBuilder0.length()); [EOL]       assertEquals(174, strBuilder1.length()); [EOL]       assertEquals(174, strBuilder3.length()); [EOL]       assertEquals(174, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104); [EOL]       assertEquals(174, strBuilder0.length()); [EOL]       assertEquals(174, strBuilder1.length()); [EOL]       assertEquals(174, strBuilder3.length()); [EOL]       assertEquals(174, strBuilder5.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertEquals(174, strBuilder0.length()); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       assertEquals(174, strBuilder0.length()); [EOL]       assertEquals(2, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       assertEquals(174, strBuilder0.length()); [EOL]       assertEquals(174, strBuilder6.length()); [EOL]       assertEquals(174, strBuilder1.length()); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]       assertEquals(177, strBuilder0.length()); [EOL]       assertEquals(177, strBuilder7.length()); [EOL]       assertEquals(2, charArray1.length); [EOL]        [EOL]       int int2 = strBuilder4.lastIndexOf('/'); [EOL]       assertEquals(177, strBuilder0.length()); [EOL]       assertEquals(177, strBuilder1.length()); [EOL]       assertEquals(177, strBuilder3.length()); [EOL]       assertEquals(177, strBuilder4.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       int[] intArray0 = new int[9]; [EOL]       compareToBuilder0.append((int[]) null, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         NumberUtils.max((short[]) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The Array must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.math.NumberUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone(""); [EOL]       Locale locale0 = Locale.US; [EOL]       FastDatePrinter fastDatePrinter0 = null; [EOL]       try { [EOL]         fastDatePrinter0 = new FastDatePrinter("[(X!^dLJgq", timeZone0, locale0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal pattern component: X [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append((short) (-2030), (short)0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandomAscii()  throws Throwable  { [EOL]       int int0 = 587; [EOL]       RandomStringUtils.randomAscii(587); [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       RandomStringUtils.random(587, false, false); [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.randomAlphanumeric(587); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst("5p&H0$B\".@l3|+@o", ""); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(4); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln(stringBuffer0); [EOL]       assertEquals(1, strBuilder1.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]       assertEquals(1, strBuilder3.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST_SHORT()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Class) null).when(annotation0).annotationType(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         AnnotationUtils.hashCode(annotation0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('9'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("'scT", ','); [EOL]        [EOL]       String string0 = StringUtils.appendIfMissing("'scT", "'scT", stringArray0); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "'scT", (CharSequence) "'scT", 90); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "'scT", 90); [EOL]        [EOL]       String string1 = StringUtils.replace((String) null, (String) null, "4b-XW*d)p:lJ", (-2705)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha((CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.lowerCase((String) null); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "4b-XW*d)p:lJ"); [EOL]        [EOL]       int int1 = StringUtils.lastOrdinalIndexOf((CharSequence) null, charBuffer0, 1531); [EOL]        [EOL]       String string3 = StringUtils.rightPad((String) null, 421); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1)); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       String string0 = "iVO"; [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher("iVO"); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher("x~DPyO[EG\"4:"); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher("iVO"); [EOL]       assertFalse(strMatcher3.equals((Object)strMatcher2)); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       StrMatcher strMatcher4 = StrMatcher.spaceMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst(strMatcher4, (String) null); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder2.equals((Object)strBuilder0)); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder2)); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder2)); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder2)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1), "%;$c19wXmzsg6Q"); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       Calendar calendar0 = MockCalendar.getInstance(); [EOL]       Calendar calendar1 = DateUtils.round(calendar0, 9); [EOL]       Calendar calendar2 = DateUtils.truncate(calendar1, 9); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar2.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       long[] longArray0 = new long[8]; [EOL]       long[] longArray1 = ArrayUtils.subarray(longArray0, 1, (-1022)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       short[] shortArray0 = new short[7]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, (short[]) null); [EOL]       compareToBuilder1.append((int) (short) (-76), (int) (byte) (-76)); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.MIN; [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       Locale locale0 = Locale.CHINA; [EOL]       FastDatePrinter fastDatePrinter0 = null; [EOL]       try { [EOL]         fastDatePrinter0 = new FastDatePrinter("va@p oC8_E4Io1qj0", timeZone0, locale0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal pattern component: v [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("-fdW. "); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = '~'; [EOL]       charArray0[2] = '5'; [EOL]       charArray0[3] = 'T'; [EOL]       strBuilder0.buffer = charArray0; [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('Q'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteAll(strMatcher0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("K6f"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       String string1 = ""; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("", (-1079)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null); [EOL]        [EOL]       String string1 = strBuilder4.rightString(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported"); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       boolean boolean0 = strTokenizer0.isEmptyTokenAsNull(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleft()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913); [EOL]        [EOL]       String string2 = StringUtils.normalizeSpace("The character must not be null"); [EOL]        [EOL]       String string3 = StringUtils.deleteWhitespace("The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null"); [EOL]        [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[0] = (double) 5; [EOL]       doubleArray0[1] = (double) 5; [EOL]       doubleArray0[2] = (double) 1913; [EOL]       doubleArray0[3] = (double) 1913; [EOL]       doubleArray0[4] = (double) 5; [EOL]       doubleArray0[5] = (double) 5; [EOL]       doubleArray0[6] = (double) 5; [EOL]       String string4 = StringUtils.join(doubleArray0, 'X'); [EOL]        [EOL]       String string5 = StringUtils.left("Thecharactermustnotbenull", (-2027)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumeric("The character must not be null"); [EOL]        [EOL]       Locale locale0 = Locale.GERMAN; [EOL]        [EOL]       String string6 = StringUtils.lowerCase("The character must not be null", locale0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'X'; [EOL]       charArray0[1] = 'X'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "the character must not be null", charArray0); [EOL]        [EOL]       int int1 = StringUtils.getLevenshteinDistance((CharSequence) "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0", (CharSequence) "the character must not be null"); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.iterator(); [EOL]        [EOL]       String string7 = StringUtils.join(iterator0, '2'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       stringBuffer0.setLength(2016); [EOL]        [EOL]       int int0 = 5; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(2); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendSeparator("", 32); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder4.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.append((-523.88385F)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(5); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.setNullText("/RDU5z0P,\u0001Ay"); [EOL]        [EOL]       String string1 = strBuilder2.build(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder3.append((Object) strBuilder6); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder0.append(object0); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder2.appendNewLine(); [EOL]        [EOL]       StringBuffer stringBuffer1 = strBuilder10.toStringBuffer(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'G'; [EOL]       strBuilder9.buffer = charArray0; [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.appendln(strBuilder4, 2, 2016); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = '='; [EOL]       charArray0[5] = '5'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]       assertEquals(6, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       String string2 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453)); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) "', is neither of type Map.Entry nor an Array"; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) "', is neither of type Map.Entry nor an Array"; [EOL]       objectArray0[3] = (Object) 'm'; [EOL]       objectArray0[4] = (Object) 'R'; [EOL]       objectArray0[5] = (Object) '5'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(objectArray0, (String) null, (-3453), 2241); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -3453 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'P'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'P'; [EOL]       charArray0[1] = 'P'; [EOL]       charArray0[2] = 'P'; [EOL]       char[] charArray1 = strBuilder1.getChars(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.appendln(stringBuffer0, 619, 619); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPeriod()  throws Throwable  { [EOL]       DurationFormatUtils.formatDuration(0L, ""); [EOL]       DurationFormatUtils.formatPeriodISO(836L, (-1184L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testconstantFuture()  throws Throwable  { [EOL]       ConcurrentUtils.constantFuture(""); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.checkedException((Throwable) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Not a checked exception: null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>(); [EOL]       TimeUnit timeUnit0 = TimeUnit.MICROSECONDS; [EOL]       delayQueue0.poll(0L, timeUnit0); [EOL]       ConcurrentUtils.ConstantFuture<Delayed> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Delayed>((Delayed) null); [EOL]       concurrentUtils_ConstantFuture0.get(0L, timeUnit0); [EOL]       ConcurrentSkipListMap<String, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<String, Integer>(); [EOL]       Integer integer0 = new Integer((-157)); [EOL]       ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>(integer0); [EOL]       Integer integer1 = new Integer((-157)); [EOL]       ConcurrentSkipListMap<Error, String> concurrentSkipListMap1 = new ConcurrentSkipListMap<Error, String>(); [EOL]       MockError mockError0 = new MockError((String) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentSkipListMap1, (Error) mockError0, ""); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // org.evosuite.runtime.mock.java.lang.MockError cannot be cast to java.lang.Comparable [EOL]          // [EOL]          verifyException("java.util.concurrent.ConcurrentSkipListMap", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append('Y'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       Double double0 = new Double((-30.60225976818994)); [EOL]       MutableLong mutableLong0 = new MutableLong(double0); [EOL]       mutableLong0.subtract((Number) double0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplacePattern()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) "JGbjVl3X9m!&2 XD"; [EOL]       String string0 = StringUtils.remove("5I<=Sp4`*rQ9Ey", '~'); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "5I<=Sp4`*rQ9Ey"; [EOL]       charSequenceArray0[2] = (CharSequence) "JGbjVl3X9m!&2 XD"; [EOL]       String string1 = StringUtils.appendIfMissing("JGbjVl3X9m!&2 XD", "JGbjVl3X9m!&2 XD", charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.join((Object[]) charSequenceArray0, 'y', 2303, (-405)); [EOL]        [EOL]       String string3 = StringUtils.substringBeforeLast("", ""); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[2], "", 2303); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.replacePattern((String) null, "C^~Zv[B=W<.aXJ]B2k", "org.apache.commons.lang3.StringUtils"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(".F_8~jr2_t 5y.4", 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(4004).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.isBeforeRange((Range<Object>) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisCancelled()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(integer0); [EOL]       boolean boolean0 = concurrentUtils_ConstantFuture0.isCancelled(); [EOL]        [EOL]       Integer integer1 = new Integer(0); [EOL]       ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Integer>(integer1); [EOL]       concurrentUtils_ConstantFuture1.get(); [EOL]       assertFalse(concurrentUtils_ConstantFuture1.isCancelled()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceIn()  throws Throwable  { [EOL]       HashMap<String, StrLookup<Object>> hashMap0 = new HashMap<String, StrLookup<Object>>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, StrLookup<Object>>) hashMap0, "Search and Replace array lengths don't match: ", ""); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       mutableBoolean0.setValue(true); [EOL]       boolean boolean0 = mutableBoolean0.isFalse(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "T"); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.removePattern("", ""); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.trim(""); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertFalse(stringArray1.equals((Object)stringArray0)); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = new Integer((-4035)); [EOL]        [EOL]       boolean boolean4 = StringUtils.startsWithIgnoreCase((CharSequence) null, charSequenceArray0[3]); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = "\\I\\uP%\\\"o+"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringEscapeUtils.unescapeJson(string0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Unable to parse unicode value: P%\\\" [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(107); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(""); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(289); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       char[] charArray0 = new char[6]; [EOL]       char[] charArray1 = new char[6]; [EOL]       charArray1[0] = 'g'; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(charArray0, charArray1); [EOL]       compareToBuilder1.append((byte)2, (byte)2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       Locale locale0 = Locale.UK; [EOL]       FastDateParser fastDateParser0 = null; [EOL]       try { [EOL]         fastDateParser0 = new FastDateParser("3RKKk*^ @/4u", timeZone0, locale0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Failed to parse \"3RKKk*^ @/4u\" ; gave up at index 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       boolean boolean1 = BooleanUtils.toBooleanDefaultIfNull(boolean0, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSplitNanoTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stopWatch0.getSplitNanoTime(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Stopwatch must be split to get the split time.  [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.StopWatch", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((long) 0); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]        [EOL]       Reader reader0 = strBuilder1.asReader(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertEquals(2, strBuilder0.length()); [EOL]       assertEquals(2, strBuilder2.length()); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader"); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, ""); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.minimizeCapacity(); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) ""; [EOL]       objectArray0[1] = (Object) ""; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder4.length()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder4.length()); [EOL]        [EOL]       objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY"); [EOL]       assertEquals(286, strBuilder0.length()); [EOL]       assertEquals(286, strBuilder5.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(0, 0, 0); [EOL]       Date date0 = DateUtils.round((Date) mockDate0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = IEEE754rUtils.max(0.0F, 0.0F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = Fraction.getFraction(938.1912073079151); [EOL]       Fraction fraction2 = fraction0.multiplyBy(fraction1); [EOL]       assertEquals(938.1912F, fraction2.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 2994; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.randomNumeric(2994); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(416, 'n'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Class) null).when(annotation0).annotationType(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         AnnotationUtils.toString(annotation0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll("SzpQ!4 ;U"); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       String[] stringArray0 = new String[4]; [EOL]       CharSet charSet0 = new CharSet(stringArray0); [EOL]       CharSet charSet1 = CharSet.getInstance(stringArray0); [EOL]       boolean boolean0 = charSet1.equals(charSet0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtrimToNull()  throws Throwable  { [EOL]       String string0 = StringUtils.remove(" vs ", 'h'); [EOL]        [EOL]       String string1 = StringUtils.removePattern(" vs ", " vs "); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty(" vs "); [EOL]        [EOL]       String string2 = StringUtils.replace("`4A!K;B`", "", " vs ", (-1));B`", string2); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumeric(""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumericSpace(" vs "); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "`4A!K;B`", (CharSequence) ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) "`4A!K;B`"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0); [EOL]        [EOL]       CharBuffer charBuffer1 = StringUtils.defaultIfBlank((CharBuffer) null, charBuffer0); [EOL]        [EOL]       String string3 = StringUtils.trimToNull(" vs "); [EOL]        [EOL]       String string4 = StringUtils.replaceChars("vs", "(0AV$B", "vd*+g.n+9W"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "vs", 0, (-1)); [EOL]        [EOL]       String string5 = StringUtils.center("", 121, 'h'); [EOL]        [EOL]       String string6 = StringUtils.substringAfter("\n", "?O<Ssm#PEN1-^/bq"); [EOL]        [EOL]       boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "vs"); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)53; [EOL]       byteArray0[1] = (byte) (-94); [EOL]       byteArray0[2] = (byte)11; [EOL]       byteArray0[3] = (byte)64; [EOL]       String string7 = StringUtils.join(byteArray0, 'N', 105, (-4848)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         toStringStyle0.appendDetail((StringBuffer) null, "Za5J2D$*3b", 'l'); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.ToStringStyle", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisWhitespace()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string1 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean3 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.removeStart(":lRC9;Q#I/x!xtF", ":lRC9;Q#I/x!xtF"); [EOL]        [EOL]       String string1 = StringUtils.chomp("2", ""); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "2"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "2"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "2"; [EOL]       charSequenceArray0[5] = (CharSequence) "2"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace(charSequenceArray0[2]); [EOL]        [EOL]       String string2 = StringUtils.removeEnd("2", (String) null); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "2", "4H*M`VvBKe5Oj^M&g;"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       long[] longArray0 = new long[1]; [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendSummary(stringBuffer0, "@O%nL,F", longArray0); [EOL]       //  // Unstable assertion: assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       String string0 = "\\u"; [EOL]       String string1 = StringUtils.repeat(string0, "Arguments cannot both be null", 32); [EOL]        [EOL]       String string2 = StringUtils.defaultString(string1); [EOL]        [EOL]       Locale locale0 = Locale.JAPANESE; [EOL]        [EOL]       String[] stringArray0 = Locale.getISOCountries(); [EOL]        [EOL]       String string3 = StringUtils.upperCase(string0, locale0); [EOL]        [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = 32; [EOL]       String string4 = StringUtils.join(intArray0, '7', 32, (-1106)); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)13; [EOL]       byteArray0[1] = (byte)28; [EOL]       byteArray0[2] = (byte)59; [EOL]       byteArray0[3] = (byte)0; [EOL]       String string5 = StringUtils.join(byteArray0, '7', 32, (-1451)); [EOL]        [EOL]       String string6 = StringUtils.repeat((String) null, (int) (byte)28); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-1193)); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder2.size()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter(); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder2.size()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-1573)); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder2.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.appendFixedWidthPadRight(2808, 0, '\\'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringWriter stringWriter1 = stringWriter0.append('M'); [EOL]        [EOL]       StringWriter stringWriter2 = stringWriter1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter2.getBuffer(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       stringBuffer0.ensureCapacity(0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.normalizeSpace(" "); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("The Array must not be null", 10); [EOL]        [EOL]       String string2 = StringUtils.repeat('', 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ""); [EOL]        [EOL]       String string3 = "\\u00"; [EOL]       String string4 = StringUtils.lowerCase(string3); [EOL]        [EOL]       String string5 = StringUtils.overlay("dyfY", "t", (-437), (-452)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("RWSLzV4h", 45, ""); [EOL]        [EOL]       String string1 = StringUtils.abbreviateMiddle("                                    RWSLzV4h", "RWSLzV4h", 974); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '7'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'v'; [EOL]       charArray0[3] = 't'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0, 460); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       int int0 = fraction0.compareTo(fraction1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdefaultIfEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");6z", string4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]       assertEquals(9, strBuilder0.size()); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]       assertEquals(106, strBuilder0.size()); [EOL]       assertEquals(106, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]       assertEquals(110, strBuilder0.size()); [EOL]       assertEquals(110, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]       assertEquals(114, strBuilder0.size()); [EOL]       assertEquals(114, strBuilder2.size()); [EOL]       assertEquals(114, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder1.size()); [EOL]       assertEquals(109, strBuilder4.size()); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]       assertEquals(109, strBuilder0.size()); [EOL]       assertEquals(109, strBuilder2.size()); [EOL]       assertEquals(109, strBuilder5.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = 'b'; [EOL]       charArray0[2] = '`'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '!'; [EOL]       charArray0[5] = '6'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '6'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, 2924, (-1)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousToken()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       strTokenizer1.previousToken(); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       int int0 = 0; [EOL]       int int1 = 2822; [EOL]       StrBuilder strBuilder4 = strBuilder3.append("0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.setLength(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       StrBuilder strBuilder6 = strBuilder5.deleteCharAt(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder5; [EOL]       objectArray0[1] = (Object) strBuilder5; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder7 = strBuilder5.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int2 = strBuilder8.lastIndexOf("0rn@[CM"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder0.append(false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder9.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder1.appendln(1490.882886748184); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder10.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder10.insert((-1378), (float) 2822); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1378 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(""); [EOL]       contextedRuntimeException0.setContextValue("", (Object) null); [EOL]       Set<String> set0 = contextedRuntimeException0.getContextLabels(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li"); [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       CharRange charRange1 = CharRange.isIn(']', '&'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]       assertEquals('&', charRange1.getStart()); [EOL]       assertEquals('6', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("LINUX"); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.chars(); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((String) null, 1, 1); [EOL]       assertEquals(37, strBuilder0.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetExcludeFieldNames()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) "<null>", toStringStyle0, (StringBuffer) null, (Class<? super Object>) class0, true, true); [EOL]       String[] stringArray0 = new String[0]; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0); [EOL]       reflectionToStringBuilder1.getExcludeFieldNames(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(416, 'n'); [EOL]       assertEquals(416, strBuilder0.length()); [EOL]       assertEquals(416, strBuilder1.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone(","); [EOL]       Locale locale0 = Locale.CHINA; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(",", timeZone0, locale0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parseObject((String) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       AbstractMap.SimpleImmutableEntry<String, Integer> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Integer>("", integer0); [EOL]       Pair<String, AbstractMap.SimpleImmutableEntry<String, Integer>> pair0 = Pair.of("", abstractMap_SimpleImmutableEntry0); [EOL]       pair0.hashCode(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.defaultString("\"SC8kO$zhPDHm{\"h"); [EOL]        [EOL]       String string1 = StringUtils.chomp("-_?p69BZA*nq+^k_X_", "L+sjZj<m|\rO)&dq"); [EOL]        [EOL]       String string2 = StringUtils.center("\"SC8kO$zhPDHm{\"h", (-804), 'z'); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'z'; [EOL]       charArray0[1] = 'z'; [EOL]       charArray0[2] = 'z'; [EOL]       charArray0[3] = 'z'; [EOL]       charArray0[4] = 'z'; [EOL]       charArray0[5] = 'z'; [EOL]       charArray0[6] = 'z'; [EOL]       charArray0[7] = 'z'; [EOL]       charArray0[8] = 'z'; [EOL]       String string3 = StringUtils.join(charArray0, 'z', (-804), (-2733)); [EOL]        [EOL]       String string4 = StringUtils.substring("", 0); [EOL]        [EOL]       String string5 = StringUtils.substringBetween("", "\"SC8kO$zhPDHm{\"h"); [EOL]        [EOL]       String string6 = StringUtils.replaceChars("L+sjZj<m|\rO)&dq", 'z', 'z'); [EOL]        [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte) (-125); [EOL]       byteArray0[3] = (byte)37; [EOL]       byteArray0[4] = (byte)13; [EOL]       byteArray0[5] = (byte)0; [EOL]       byteArray0[6] = (byte)0; [EOL]       byteArray0[7] = (byte)64; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(byteArray0, 'z', (-4796), 500); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -4796 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidateRange()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]        [EOL]       int int1 = strBuilder6.validateRange(0, 1320); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]        [EOL]       String string0 = strBuilder8.getNullText(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOfAny()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]        [EOL]       String string3 = StringUtils.right(".ti')kKzb5J(cbBlh", 0); [EOL]        [EOL]       String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".ti')kKzb5J(cbBlh"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = "org.apache.commons.lang3.StringUtils"; [EOL]       stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertEquals(7, strBuilder0.length()); [EOL]       assertEquals(7, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertEquals(13, strBuilder0.length()); [EOL]       assertEquals(13, strBuilder3.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertEquals(65, strBuilder0.length()); [EOL]       assertEquals(65, strBuilder1.length()); [EOL]       assertEquals(65, strBuilder3.length()); [EOL]       assertEquals(65, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('o'); [EOL]       assertEquals(62, strBuilder0.length()); [EOL]       assertEquals(62, strBuilder1.length()); [EOL]       assertEquals(62, strBuilder3.length()); [EOL]       assertEquals(62, strBuilder4.length()); [EOL]       assertEquals(62, strBuilder5.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertEquals(62, strBuilder0.length()); [EOL]       assertEquals(62, strBuilder1.length()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertEquals(124, strBuilder0.length()); [EOL]       assertEquals(124, strBuilder1.length()); [EOL]       assertEquals(124, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertEquals(124, strBuilder0.length()); [EOL]       assertEquals(124, strBuilder7.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       int int0 = mutableDouble0.intValue(); [EOL]       assertEquals(0L, mutableDouble0.longValue()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3725); [EOL]       long long0 = DateUtils.getFragmentInMinutes((Calendar) mockGregorianCalendar0, 13); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62401465735000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=9,MONTH=6,WEEK_OF_YEAR=31,WEEK_OF_MONTH=5,DAY_OF_MONTH=31,DAY_OF_YEAR=213,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=31,SECOND=5,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       float float0 = (-941.3923F); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       char char0 = 'S'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]       IDKey iDKey0 = new IDKey(boolean0); [EOL]       EqualsBuilder.isRegistered(equalsBuilder4, iDKey0); [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) '?'; [EOL]       floatArray0[1] = (float) '<'; [EOL]       equalsBuilder3.append(floatArray0, floatArray0); [EOL]       equalsBuilder1.append((byte) (-30), (byte) (-30)); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       EqualsBuilder.reflectionEquals((Object) 'S', (Object) 'S', (String[]) null); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       double double0 = (-1.0); [EOL]       doubleArray0[0] = double0; [EOL]       doubleArray0[1] = (double) char0; [EOL]       doubleArray0[2] = (double) float0; [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder2.append(doubleArray0, doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisRegistered()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-74), (-74)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (-74), (float) (-74)); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short)406, (short)406); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append((short[]) null, (short[]) null); [EOL]       Object object0 = new Object(); [EOL]       boolean boolean0 = EqualsBuilder.isRegistered(equalsBuilder4, object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testor()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         BooleanUtils.or(booleanArray0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Array is empty [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.BooleanUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(0, (-824), 32, 44, 44, (-1)); [EOL]       boolean boolean0 = ObjectUtils.equals((Object) mockDate0, (Object) ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetChars()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]        [EOL]       String string0 = strBuilder0.midString(34, (-1)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{"); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[2] = 'L'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '`'; [EOL]       charArray0[5] = '^'; [EOL]       charArray0[6] = 'V'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.getChars(3889, 0, charArray0, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitPreserveAllTokens()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n"); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '^'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-719); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendCyclicObject()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setContentStart((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append('L'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]        [EOL]       int int0 = 4284; [EOL]       String string0 = strBuilder1.rightString(4284); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]        [EOL]       int int1 = 32; [EOL]       StringBuilder stringBuilder0 = new StringBuilder("os.name"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder0.insert(4284, (float) 4284); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 4284 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendAll((Iterable<?>) null); [EOL]        [EOL]       String string1 = strBuilder1.rightString(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "E2"); [EOL]       Locale locale0 = Locale.CANADA; [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0); [EOL]       fastDatePrinter0.format((long) 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDateInstance()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FastDateFormat.getDateInstance((-2881)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal date style -2881 [EOL]          // [EOL]          verifyException("java.text.DateFormat", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null, 1L); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testkeep()  throws Throwable  { [EOL]       String[] stringArray0 = new String[11]; [EOL]       String string0 = CharSetUtils.keep("", stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append('?', 'h'); [EOL]       compareToBuilder0.append(false, true); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.round((Date) null, 2); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The date must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-2091)); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((-2091), (-2091), 0, 0); [EOL]       Integer integer1 = BooleanUtils.toIntegerObject(boolean0, integer0, integer0, integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       String string0 = "Gqi"; [EOL]       DurationFormatUtils.lexx("Gqi"); [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(mockGregorianCalendar0, 2835); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       String string1 = durationFormatUtils_Token0.toString(); [EOL]       long long0 = 0L; [EOL]       DurationFormatUtils.formatDurationHMS(0L); [EOL]       int int0 = 0; [EOL]       int int1 = (-1); [EOL]       mockGregorianCalendar0.set(13, 13, 2835, 0, (-1)); [EOL]       DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils(); [EOL]       // Undeclared exception! [EOL]       DurationFormatUtils.formatDuration((long) 2835, string1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("6n(.8{1r7", ", Length: 0"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha("6n(.8{1r7"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "6n(.8{1r7", (CharSequence) "6n(.8{1r7"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", "U4v=EwB5e'.{:hed"); [EOL]        [EOL]       String string1 = StringUtils.removeStartIgnoreCase((String) null, ";fN3eIB!Y<[m"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.priority(0); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Thread thread0 = MockThread.currentThread(); [EOL]       MockThread mockThread0 = new MockThread(thread0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         basicThreadFactory0.newThread(mockThread0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.lang.Thread", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("up", 'O', 'O'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "up", "up"); [EOL]        [EOL]       String string1 = StringUtils.substringAfterLast("_iVq9-<w--D+?HoA~d", "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)1; [EOL]       String string2 = StringUtils.join(byteArray0, 'O'); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       String string3 = StringUtils.chomp("1", "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "up", (CharSequence) "_iVq9-<w--D+?HoA~d", (int) (byte)1); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "up", (-1)); [EOL]        [EOL]       String string4 = StringUtils.substringAfter("", " vs "); [EOL]        [EOL]       String string5 = StringUtils.substringBeforeLast("1", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string6 = StringUtils.removePattern("1", "=P5R+AZe1"); [EOL]        [EOL]       String string7 = StringUtils.uncapitalize("_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.StringUtils", (CharSequence[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0, 0, 0, 4); [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]       Calendar calendar0 = MockCalendar.getInstance(locale0); [EOL]       int int0 = DateUtils.truncatedCompareTo((Calendar) mockGregorianCalendar0, calendar0, 0); [EOL]       assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       HashMap<Object, Long> hashMap0 = new HashMap<Object, Long>(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "e~/aXjk(\"-1QzZxGM", hashMap0); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlpha()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "p{InCombiningDiacriticalMarks}+"; [EOL]       stringArray0[1] = "~@!LXZ6YxCtw"; [EOL]       stringArray0[2] = "null comparator"; [EOL]       stringArray0[3] = "Threshold must not be negative"; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "~@!LXZ6YxCtw"; [EOL]       String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank("~@!LXZ6YxCtw"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[1]; [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) class0, stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isSameLength((byte[]) null, (byte[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("J"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("J", mockThrowable0); [EOL]       Class<String> class0 = String.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable1, (Class<?>) class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("^e"); [EOL]       standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition((-289)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd((String) null, (String) null); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, (String) null); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       int int1 = StringUtils.length("RWSLzV4h"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, 9); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendNewLine(); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1); [EOL]       assertEquals(51, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(51, strBuilder3.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer(); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher(); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0); [EOL]       assertEquals(51, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(51, strBuilder3.size()); [EOL]       assertEquals(0, strBuilder4.size()); [EOL]       assertEquals(51, strBuilder5.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-4587)); [EOL]       short short0 = bitField0.setShortValue((short)0, (short) (-1864)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetReducedFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(10000, (-39)); [EOL]       String string0 = fraction0.toProperString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln((Object) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.deleteAll('o'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 79, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('c'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = 226.07797F; [EOL]       floatArray0[1] = 1348.4321F; [EOL]       floatArray0[2] = (-1534.7029F); [EOL]       String string0 = StringUtils.join(floatArray0, 'c'); [EOL]       assertEquals(3, floatArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSplitTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitTime(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("&c_&"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterString("L=x.TI0z4D9"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder3.append(6); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-17)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateFormatUtils.format((Calendar) mockGregorianCalendar0, (String) null, timeZone0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // pattern must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FormatCache", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((short) (-1)); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (-152L); [EOL]       longArray0[1] = (long) (short) (-1); [EOL]       longArray0[2] = (long) (short) (-1); [EOL]       longArray0[3] = (long) (short) (-1); [EOL]       longArray0[4] = (-1L); [EOL]       longArray0[5] = (long) (short) (-1); [EOL]       longArray0[6] = (long) Integer.MAX_VALUE; [EOL]       longArray0[7] = (long) Integer.MAX_VALUE; [EOL]       HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(longArray0); [EOL]       HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, Integer.MAX_VALUE, (Object) hashCodeBuilder3); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, true); [EOL]       //  // Unstable assertion: assertEquals(952405261, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       byteArray0[0] = (byte) (-1); [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte) (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) " "; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " "); [EOL]        [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]       assertTrue(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.remove(" ", '8'); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) charSequenceArray0, " "); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertTrue(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)string0)); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " "); [EOL]        [EOL]       int int2 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Object[]) charSequenceArray0, "null comparatorMinimum abbreviation width with offset is 7Vkn-h;Vu", 0, 14); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "+[AQj^o1MB"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("+[AQj^o1MB"); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]        [EOL]       int int0 = 2860; [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(2860); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll('+', '6'); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]       assertEquals(10, strBuilder2.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.minimizeCapacity(); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]       assertEquals(10, strBuilder2.size()); [EOL]       assertEquals(10, strBuilder3.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.validateRange(2860, (-32768)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>(integer0, "org.apache.commons.lang3.tuple.Pair"); [EOL]       ImmutablePair<AbstractMap.SimpleEntry<Integer, String>, Integer> immutablePair0 = new ImmutablePair<AbstractMap.SimpleEntry<Integer, String>, Integer>(abstractMap_SimpleEntry0, integer0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         immutablePair0.toString("u,T~O!%&Qj$A;$[w{"); [EOL]         fail("Expecting exception: UnknownFormatConversionException"); [EOL]        [EOL]       } catch(UnknownFormatConversionException e) { [EOL]          // [EOL]          // Conversion = '&' [EOL]          // [EOL]          verifyException("java.util.Formatter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       StringUtils.stripStart("_fQY_af8", "_fQY_af8"); [EOL]       StringUtils.splitByWholeSeparator("jutEZ?8yc+", ""); [EOL]       StringUtils.countMatches("jutEZ?8yc+", "jutEZ?8yc+"); [EOL]       StringUtils.removeStart("9.2a=P+HRf`R's^w+eE", "org.apache.commons.lang3.CharSequenceUtils"); [EOL]       StringUtils.uncapitalize("_fQY_af8"); [EOL]       String string0 = "1_iVq9-<w--D+?HoA~d"; [EOL]       StringUtils.substringsBetween("", "1_iVq9-<w--D+?HoA~d", "\r"); [EOL]       String string1 = "1_iVq9-<w--D+?HoA~d"; [EOL]       StringUtils.chomp("1_iVq9-<w--D+?HoA~d"); [EOL]       char char0 = 'B'; [EOL]       StringUtils.center(" p_b2*\"Od&p8%", 1, 'B'); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("1_iVq9-<w--D+?HoA~d", 1, 1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetUseFieldNames()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       toStringStyle0.getNullText(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "<null>"); [EOL]       toStringStyle0.MULTI_LINE_STYLE.appendClassName(stringBuffer0, stringBuffer0); [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       toStringStyle0.appendEnd(stringBuffer0, byte0); [EOL]       toStringStyle0.SHORT_PREFIX_STYLE.appendContentEnd(stringBuffer0); [EOL]       toStringStyle0.setUseFieldNames(false); [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.isDefaultFullDetail(); [EOL]       standardToStringStyle0.setFieldSeparatorAtEnd(false); [EOL]       standardToStringStyle0.appendFieldEnd(stringBuffer0, "<null>"); [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle.register(object0); [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) (byte)0; [EOL]       StringBuffer stringBuffer1 = new StringBuffer(",Q!9"); [EOL]       Boolean boolean0 = new Boolean("+v=s>w"); [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[0] = false; [EOL]       booleanArray0[1] = false; [EOL]       booleanArray0[2] = false; [EOL]       booleanArray0[3] = true; [EOL]       booleanArray0[4] = false; [EOL]       booleanArray0[5] = true; [EOL]       booleanArray0[6] = true; [EOL]       booleanArray0[7] = false; [EOL]       booleanArray0[8] = false; [EOL]       Boolean boolean1 = Boolean.valueOf(false); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.append(stringBuffer0, "<null>", booleanArray0, boolean1); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendStart(stringBuffer1, boolean0); [EOL]       int[] intArray0 = new int[4]; [EOL]       intArray0[0] = (int) (byte)0; [EOL]       intArray0[1] = (int) (byte)0; [EOL]       intArray0[2] = (int) (byte)0; [EOL]       intArray0[3] = (int) (byte)0; [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendDetail(stringBuffer1, "k<tzI?E>:2lG", intArray0); [EOL]       standardToStringStyle0.appendDetail(stringBuffer0, ",Q!9", doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Validate.isTrue(true, "W>^;`wEmj@H;Ur", objectArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       int int2 = (-65); [EOL]       String string0 = strBuilder0.midString(62, (-65)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F)); [EOL]       assertEquals(10, strBuilder0.size()); [EOL]       assertEquals(10, strBuilder1.size()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), 62); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-3115)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringAfter()  throws Throwable  { [EOL]       String string0 = "Minimum abbreviation width with offset is 7"; [EOL]       String string1 = StringUtils.replaceChars("iB`Dd`m)wT", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "iB`Dd`m)wT", 0); [EOL]        [EOL]       char char0 = 'D'; [EOL]       String string2 = StringUtils.remove("iB`Dd`m)wT", 'D'); [EOL]        [EOL]       String string3 = StringUtils.substringAfter("...", ", Length: "); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("vH#$4G"); [EOL]        [EOL]       String string4 = StringUtils.chomp("on,/B?M*0;2fA");2fA", string4); [EOL]        [EOL]       String string5 = StringUtils.join((float[]) null, 'D'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.toString((byte[]) null, ""); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDone()  throws Throwable  { [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException("addInitializer() must not be called after start()!"); [EOL]       ConcurrentUtils.ConstantFuture<RuntimeException> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<RuntimeException>(mockRuntimeException0); [EOL]       concurrentUtils_ConstantFuture0.isDone(); [EOL]       concurrentUtils_ConstantFuture0.isCancelled(); [EOL]       ConcurrentHashMap<Object, Integer> concurrentHashMap0 = new ConcurrentHashMap<Object, Integer>(); [EOL]       int int0 = (-176); [EOL]       Integer integer0 = new Integer((-176)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.putIfAbsent((ConcurrentMap<Object, Integer>) concurrentHashMap0, (Object) null, integer0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.concurrent.ConcurrentHashMap", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatUTC()  throws Throwable  { [EOL]       String string0 = DateFormatUtils.formatUTC(0L, "$", (Locale) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       char[] charArray0 = new char[1]; [EOL]       strBuilder_StrBuilderReader0.read(charArray0); [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       strBuilder_StrBuilderReader0.ready(); [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer.allocate(0); [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       strBuilder4.leftString(1); [EOL]       strBuilder3.size(); [EOL]       strBuilder3.appendln(true); [EOL]       strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       Locale locale0 = Locale.CANADA; [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       strBuilder4.appendAll((Iterable<?>) set0); [EOL]       strBuilder1.reverse(); [EOL]       strBuilder4.append((long) 81); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('{', '~'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       // Undeclared exception! [EOL]       charRange0.forEach(consumer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       ForkJoinTask.getPool(); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0, (ExecutorService) null); [EOL]       callableBackgroundInitializer0.start(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer0.setExternalExecutor((ExecutorService) null); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Cannot set ExecutorService after start()! [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceFirst()  throws Throwable  { [EOL]       int int0 = 517; [EOL]       StrBuilder strBuilder0 = new StrBuilder(517); [EOL]        [EOL]       Object object0 = new Object(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append('S'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(object0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((long) 517); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceFirst("G1", "G1"); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.append((long) 517); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendSeparator("v5a", 517); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('S'); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.replaceFirst(strMatcher0, ""); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder1.appendln("v5a"); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadRight(517, 517, 'o'); [EOL]        [EOL]       int int1 = 2001; [EOL]       boolean boolean0 = true; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder9.append((CharSequence) strBuilder1, 517, 1738); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setSizeStartText(""); [EOL]       String string0 = standardToStringStyle0.getSizeStartText(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1230L)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = 108; [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = '<'; [EOL]       charArray0[2] = '%'; [EOL]       charArray0[3] = 'A'; [EOL]       charArray0[4] = '>'; [EOL]       charArray0[5] = '<'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '%'; [EOL]       charArray0[8] = 'b'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(108, charArray0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       int int0 = (-1890); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1890)); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert((-1890), 0.0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1890 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", ", element2="); [EOL]       Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("").when(comparator0).toString(); [EOL]       doReturn((-139), (-139), 0, (-139), (-1674)).when(comparator0).compare(nullable(org.apache.commons.lang3.Range.class) , nullable(org.apache.commons.lang3.Range.class)); [EOL]       Range<Range<String>> range1 = Range.between(range0, range0, comparator0); [EOL]       Range<Range<String>> range2 = range1.intersectionWith(range1); [EOL]       Comparator<Range<String>> comparator1 = range2.getComparator(); [EOL]       Range<Range<String>> range3 = Range.is(range0, comparator1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         range3.intersectionWith(range2); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Cannot calculate intersection with non-overlapping range [[.., element2=]..[.., element2=]] [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Range", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("%XX"); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'o'; [EOL]       charArray0[1] = 'o'; [EOL]       charArray0[2] = ';'; [EOL]       charArray0[3] = '`'; [EOL]       charArray0[4] = 'm'; [EOL]       charArray0[5] = 'X'; [EOL]       charArray0[6] = 'n'; [EOL]       charArray0[7] = 'G'; [EOL]       charArray0[8] = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(charArray0, 2731, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1230L)); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       int int0 = 108; [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = '<'; [EOL]       charArray0[2] = '%'; [EOL]       charArray0[3] = 'A'; [EOL]       charArray0[4] = '>'; [EOL]       charArray0[5] = '<'; [EOL]       charArray0[6] = ']'; [EOL]       charArray0[7] = '%'; [EOL]       charArray0[8] = 'b'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(108, charArray0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiNumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiNumeric('\n'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testupperCase()  throws Throwable  { [EOL]       String string0 = StringUtils.upperCase("!PqCj;?gGQ>vN/F{[r");?GGQ>VN/F{[R", string0); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '2'; [EOL]       charArray0[1] = '|'; [EOL]       charArray0[2] = 'x'; [EOL]       charArray0[3] = 'R'; [EOL]       charArray0[4] = 'u'; [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "!PQCJ;?GGQ>VN/F{[R", charArray0); [EOL]        [EOL]       String string1 = StringUtils.center(":{", 0, ":{"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprependIfMissingIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(",@ZB0lHp2{", 122); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", "[\tu"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 's'; [EOL]       charArray0[1] = '{'; [EOL]       charArray0[2] = '+'; [EOL]       charArray0[3] = 'I'; [EOL]       String string2 = StringUtils.join(charArray0, 's'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumeric(",@ZB0lHp2{                                                                                                                "); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SrIO", ",@ZB0lHp2{"); [EOL]        [EOL]       String string3 = StringUtils.rightPad("SrIO", 122); [EOL]        [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = (int) 'I'; [EOL]       String string4 = StringUtils.join(intArray0, 's'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("ss{s+sI", "ss{s+sI", 256); [EOL]        [EOL]       String string5 = StringUtils.prependIfMissingIgnoreCase("v", "SrIO                                                                                                                      ", stringArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setSizeEndText((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       String string1 = "1.4"; [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst("1.4", ""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0); [EOL]        [EOL]       Class<Object> class0 = Object.class; [EOL]       ServiceLoader<Object> serviceLoader0 = ServiceLoader.load(class0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) serviceLoader0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendSeparator('1'); [EOL]        [EOL]       char[] charArray0 = null; [EOL]       StrBuilder strBuilder5 = strBuilder4.append((char[]) null); [EOL]        [EOL]       ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(arrayDeque0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.appendAll((Iterable<?>) treeSet0); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder5.toStringBuffer(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder1.appendln(1831L); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.trim(); [EOL]        [EOL]       strBuilder8.size = (-1455); [EOL]        [EOL]       int int0 = 3; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setLength(3); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((Integer) null, integer0, (Integer) null, integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.mid("", 64, 64); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) ""; [EOL]       String string1 = StringUtils.substringAfter("r", ""); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) "r"; [EOL]       boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.equals(charSequenceArray0[1], (CharSequence) ""); [EOL]       assertEquals(9, charSequenceArray0.length); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = 64; [EOL]       intArray0[1] = 64; [EOL]       intArray0[2] = 64; [EOL]       intArray0[3] = 64; [EOL]       intArray0[4] = 64; [EOL]       intArray0[5] = 64; [EOL]       intArray0[6] = 64; [EOL]       intArray0[7] = 1076; [EOL]       String string2 = StringUtils.join(intArray0, 'q', 0, (-385)); [EOL]       assertEquals(8, intArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.get("1.3"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)1233; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float[]) null, (float[]) null); [EOL]       char[] charArray0 = new char[10]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = 'l'; [EOL]       charArray0[2] = '4'; [EOL]       charArray0[3] = 'm'; [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = '/'; [EOL]       charArray0[6] = '_'; [EOL]       charArray0[7] = 'y'; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0); [EOL]        [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = false; [EOL]       boolean[] booleanArray1 = new boolean[1]; [EOL]       booleanArray1[0] = true; [EOL]       equalsBuilder3.append(booleanArray0, booleanArray1); [EOL]       equalsBuilder0.build(); [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte) (-1); [EOL]       byteArray0[1] = (byte) (-15); [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       equalsBuilder1.append(byteArray0, byteArray0); [EOL]       assertFalse(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStackFrameList()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       StackTraceElement stackTraceElement0 = new StackTraceElement("^7", "at", "at", (byte)105); [EOL]       StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8]; [EOL]       stackTraceElementArray0[0] = stackTraceElement0; [EOL]       stackTraceElementArray0[1] = stackTraceElement0; [EOL]       StackTraceElement stackTraceElement1 = new StackTraceElement("at", "MockThrowable: ", "MockThrowable: ", (byte)0); [EOL]       stackTraceElementArray0[2] = stackTraceElement1; [EOL]       stackTraceElementArray0[3] = stackTraceElement0; [EOL]       stackTraceElementArray0[4] = stackTraceElement0; [EOL]       stackTraceElementArray0[5] = stackTraceElement0; [EOL]       stackTraceElementArray0[6] = stackTraceElement0; [EOL]       stackTraceElementArray0[7] = stackTraceElement0; [EOL]       mockThrowable0.setStackTrace(stackTraceElementArray0); [EOL]       List<String> list0 = ExceptionUtils.getStackFrameList(mockThrowable0); [EOL]        [EOL]       ExceptionUtils.removeCommonFrames(list0, list0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((String) null, 3954); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfDifference()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate((String) null, 127); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = null; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, "SVoEL5[sC"); [EOL]        [EOL]       String string1 = StringUtils.removePattern("N1f14qYs/]'O,hL|", "h2Xl"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("!yEh&eY6kB"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfAny("N1f14qYs/]'O,hL|", stringArray1); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray1); [EOL]        [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = (-1244L); [EOL]       longArray0[1] = (long) (-1); [EOL]       longArray0[2] = (long) (-1); [EOL]       longArray0[3] = (long) (-1); [EOL]       longArray0[4] = (long) (-1); [EOL]       longArray0[5] = (long) (-1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(longArray0, '^', (-1), 1); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = "\\u"; [EOL]       String string1 = StringEscapeUtils.unescapeXml(string0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringEscapeUtils.unescapeEcmaScript(string1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       Integer integer0 = new Integer(5); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(5); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) integer0, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, false, true); [EOL]       boolean boolean0 = reflectionToStringBuilder0.isAppendStatics(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('o'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]        [EOL]       standardToStringStyle0.setNullText((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, ""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteFirst(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder2, 32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.upperCase(""); [EOL]        [EOL]       String string1 = StringUtils.difference("", ""); [EOL]        [EOL]       String string2 = "\\u"; [EOL]       String string3 = StringUtils.chop(string2); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[0]; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string4 = StringUtils.substringAfterLast("", (String) null); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) charSequenceArray0, 'F', 591, 0); [EOL]        [EOL]       Class<String> class0 = String.class; [EOL]       ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0); [EOL]        [EOL]       Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       serviceLoader0.forEach(consumer0); [EOL]        [EOL]       String string6 = StringUtils.join((Iterable<?>) serviceLoader0, 'F'); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", (String) null); [EOL]        [EOL]       String string8 = StringUtils.center(" is not in the range '0' - '9'", 0, 'F'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 591); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteCharAt()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt(0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.swapCase((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'q'; [EOL]       charArray0[1] = 'o'; [EOL]       charArray0[2] = 'T'; [EOL]       charArray0[3] = 'T'; [EOL]       charArray0[4] = '_'; [EOL]       charArray0[5] = 'J'; [EOL]       charArray0[6] = '+'; [EOL]       charArray0[7] = '7'; [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) null, charArray0); [EOL]        [EOL]       String string1 = StringUtils.join((byte[]) null, 'T'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       charSequenceArray0[1] = (CharSequence) null; [EOL]       charSequenceArray0[2] = (CharSequence) null; [EOL]       charSequenceArray0[3] = (CharSequence) null; [EOL]       charSequenceArray0[4] = (CharSequence) null; [EOL]       charSequenceArray0[5] = (CharSequence) null; [EOL]       charSequenceArray0[6] = (CharSequence) null; [EOL]       charSequenceArray0[7] = (CharSequence) null; [EOL]       charSequenceArray0[8] = (CharSequence) null; [EOL]       boolean boolean2 = StringUtils.endsWithAny((CharSequence) null, charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       equalsBuilder0.append(0.0F, 1.7F); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-122), (short)143); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (short)143, (-1.0F)); [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (long) (short)143; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0); [EOL]       Object object0 = new Object(); [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(object0, (Object) "WQtm~X&IKh="); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-113), (byte) (-69)); [EOL]       Object object1 = new Object(); [EOL]       Integer integer0 = new Integer(7); [EOL]       EqualsBuilder.unregister(object1, integer0); [EOL]       equalsBuilder5.appendSuper(true); [EOL]       ImmutablePair<String, EqualsBuilder> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.builder.IDKey", equalsBuilder1); [EOL]       ImmutablePair<Object, String> immutablePair1 = new ImmutablePair<Object, String>("org.apache.commons.lang3.builder.IDKey", "4I1O{{U4N:-."); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = "4I1O{{U4N:-."; [EOL]       stringArray0[1] = "4I1O{{U4N:-."; [EOL]       stringArray0[2] = "4I1O{{U4N:-."; [EOL]       stringArray0[3] = "4I1O{{U4N:-."; [EOL]       stringArray0[4] = " DB)<kCgd%F="; [EOL]       stringArray0[5] = "WQtm~X&IKh="; [EOL]       stringArray0[6] = "WQtm~X&IKh="; [EOL]       stringArray0[7] = "WQtm~X&IKh="; [EOL]       stringArray0[8] = "4I1O{{U4N:-."; [EOL]       boolean boolean0 = EqualsBuilder.reflectionEquals((Object) immutablePair0, (Object) immutablePair1, true, (Class<?>) class0, stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((Object[]) null, 'z', 0, (-2270)); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 0); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.leftPad("", 0, 'z'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = 1424.4987F; [EOL]       floatArray0[1] = (-1.0F); [EOL]       String string0 = StringUtils.join(floatArray0, 'A', 0, 0); [EOL]        [EOL]       String string1 = StringUtils.rightPad(",,=9_", (-1182)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.substring("V[BQedlGTy?P=", 974); [EOL]        [EOL]       String string3 = StringUtils.upperCase("V[BQedlGTy?P="); [EOL]        [EOL]       String string4 = StringUtils.join((Object[]) charSequenceArray0, 'z'); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) ",,=9_", charSequenceArray0); [EOL]        [EOL]       String string5 = StringUtils.upperCase(""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable(""); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf(charSequenceArray0[0], (-1)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]); [EOL]        [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       String string6 = StringUtils.toString(byteArray0, (String) null); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'A'; [EOL]       charArray0[1] = 'z'; [EOL]       charArray0[2] = 'A'; [EOL]       boolean boolean2 = StringUtils.containsAny((CharSequence) ",,=9_", charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdefaultIfBlank()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right((String) null, (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string0 = "length must be valid"; [EOL]       StrBuilder strBuilder1 = new StrBuilder("length must be valid"); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append((CharSequence) strBuilder0, 187, 187); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       charRange0.iterator(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       String string0 = strTokenizer0.next(); [EOL]        [EOL]       strTokenizer0.setIgnoredChar('u'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       float[] floatArray0 = new float[2]; [EOL]       compareToBuilder0.append(floatArray0, (float[]) null); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         multiBackgroundInitializer_MultiBackgroundInitializerResults0.getInitializer("cv>mS57{Qx0}2EK4t"); [EOL]         fail("Expecting exception: NoSuchElementException"); [EOL]        [EOL]       } catch(NoSuchElementException e) { [EOL]          // [EOL]          // No child initializer with name cv>mS57{Qx0}2EK4t [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer$MultiBackgroundInitializerResults", e); [EOL]       } [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = "\\u"; [EOL]       String string1 = StringUtils.repeat(string0, "Arguments cannot both be null", 32); [EOL]        [EOL]       String string2 = StringUtils.defaultString(string1); [EOL]        [EOL]       Locale locale0 = Locale.JAPANESE; [EOL]        [EOL]       String[] stringArray0 = Locale.getISOCountries(); [EOL]        [EOL]       String string3 = StringUtils.upperCase(string0, locale0); [EOL]        [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = 32; [EOL]       String string4 = StringUtils.join(intArray0, '7', 32, (-1106)); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)13; [EOL]       byteArray0[1] = (byte)28; [EOL]       byteArray0[2] = (byte)59; [EOL]       byteArray0[3] = (byte)0; [EOL]       String string5 = StringUtils.join(byteArray0, '7', 32, (-1451)); [EOL]        [EOL]       String string6 = StringUtils.repeat((String) null, (int) (byte)28); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[23]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches("Z", false, (-1), charBuffer0, 140, (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoMap()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddDays()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.addDays(mockDate0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       charRange0.hashCode(); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((byte[]) null); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp("YU6:w]M?f:BLf)V"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '='; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "YU6:w]M?f:BLf)V", charArray0); [EOL]        [EOL]       String string1 = StringUtils.removeEndIgnoreCase((String) null, "Search and Replace array lengths don't match: "); [EOL]        [EOL]       double[] doubleArray0 = new double[9]; [EOL]       doubleArray0[0] = (double) '='; [EOL]       doubleArray0[1] = (double) '='; [EOL]       doubleArray0[2] = (double) '='; [EOL]       doubleArray0[3] = (double) '='; [EOL]       doubleArray0[4] = (double) '='; [EOL]       doubleArray0[5] = (double) '='; [EOL]       doubleArray0[6] = (double) '='; [EOL]       doubleArray0[7] = (double) '='; [EOL]       doubleArray0[8] = (double) '='; [EOL]       String string2 = StringUtils.join(doubleArray0, '=', 1039, 2); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.removeEndIgnoreCase("Search and Replace array lengths don't match: ", "YU6:w]M?f:BLf)V"); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("Strings must not be null", "Search and Replace array lengths don't match: "); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) 61.0; [EOL]       objectArray0[1] = (Object) 61.0; [EOL]       objectArray0[2] = (Object) ""; [EOL]       objectArray0[3] = (Object) '='; [EOL]       objectArray0[4] = (Object) 61.0; [EOL]       objectArray0[5] = (Object) 61.0; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[6] = object0; [EOL]       objectArray0[7] = (Object) 61.0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(objectArray0, "", 1039, 1832); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 1039 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[2]; [EOL]       doubleArray0[0] = (-1.0); [EOL]       doubleArray0[1] = 1.0; [EOL]       String string0 = StringUtils.join(doubleArray0, '', 4295, 4295); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "", 4295); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("Invalid offset: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'i'; [EOL]       charArray0[1] = '7'; [EOL]       charArray0[2] = '7'; [EOL]       charArray0[3] = '7'; [EOL]       charArray0[4] = '7'; [EOL]       charArray0[5] = '7'; [EOL]       charArray0[6] = '7'; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('7', 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.size(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int2 = strBuilder1.indexOf(strMatcher0, 5); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = StringUtils.join(charArray0, 'F'); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.join((byte[]) null, 'E', 13, 0); [EOL]        [EOL]       ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>(); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add(integer0); [EOL]        [EOL]       Integer integer1 = new Integer(122); [EOL]        [EOL]       boolean boolean1 = arrayDeque0.add(integer1); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) arrayDeque0, '<'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("`F fL", (String) null, 2067); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("0<122"); [EOL]        [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (float) 0; [EOL]       String string4 = StringUtils.join(floatArray0, 'f'); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "0<122", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitByWholeSeparator("", "0<122"); [EOL]        [EOL]       String[] stringArray3 = StringUtils.splitPreserveAllTokens("Strings must not be null", "`F fL"); [EOL]        [EOL]       double[] doubleArray0 = new double[8]; [EOL]       doubleArray0[0] = (double) 13; [EOL]       doubleArray0[1] = (double) 0; [EOL]       doubleArray0[2] = (double) 0.0F; [EOL]       doubleArray0[3] = (double) '<'; [EOL]       doubleArray0[4] = (double) 0; [EOL]       doubleArray0[5] = (double) 13; [EOL]       doubleArray0[6] = (double) 'E'; [EOL]       doubleArray0[7] = (double) 0; [EOL]       String string5 = StringUtils.join(doubleArray0, 'L', 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.uncapitalize((String) null, (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('c'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.negate((Boolean) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4387)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       LinkedHashSet<StrBuilder> linkedHashSet0 = new LinkedHashSet<StrBuilder>(); [EOL]        [EOL]       boolean boolean0 = linkedHashSet0.add(strBuilder0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll((Iterable<?>) linkedHashSet0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.ensureCapacity((-4387)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendPadding((-764), 'x'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInSeconds()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli((-6L)); [EOL]       Date date0 = Date.from(instant0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.getFragmentInSeconds(date0, 0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The fragment 0 is not supported [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("h2Xl", ", Length: 0"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "h2Xl", ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 604); [EOL]        [EOL]       String string1 = StringUtils.trim("..."); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "h2Xl", (CharSequence) "...", (-1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace("h2Xl"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "..."); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("..."); [EOL]        [EOL]       String string2 = StringUtils.repeat(", Length: 0", 604); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha("h2Xl"); [EOL]        [EOL]       String string3 = StringUtils.strip("h2Xl"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = ';'; [EOL]       String string4 = StringUtils.join(charArray0, '3');", string4);'}, charArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.endsWithAny(";", stringArray0); [EOL]        [EOL]       String string5 = StringUtils.removeStart(", Length: 0", "h2Xl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, charArray0.length); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]       assertEquals(5, strBuilder2.length()); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, charArray0.length); [EOL]        [EOL]       boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]       assertEquals(5, charArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)1233; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append((float[]) null, (float[]) null); [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '6'; [EOL]       charArray0[1] = 'l'; [EOL]       charArray0[2] = '4'; [EOL]       charArray0[3] = 'm'; [EOL]       charArray0[4] = 'e'; [EOL]       charArray0[5] = '/'; [EOL]       charArray0[6] = '_'; [EOL]       charArray0[7] = 'y'; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray0); [EOL]       assertTrue(equalsBuilder3.build()); [EOL]        [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte) (-1); [EOL]       byteArray0[1] = (byte) (-15); [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[1] = (byte)0; [EOL]       byte[] byteArray1 = new byte[4]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte)0; [EOL]       byteArray1[2] = (byte)0; [EOL]       byteArray1[3] = (byte) (-1); [EOL]       equalsBuilder1.append(byteArray0, byteArray1); [EOL]       assertFalse(equalsBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlexx()  throws Throwable  { [EOL]       String string0 = (String)DurationFormatUtils.y; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("y", (-3146)); [EOL]       DurationFormatUtils.formatDuration((long) (-3146), "I2^<@<M2=X", true); [EOL]       long long0 = 0L; [EOL]       DurationFormatUtils.formatDurationISO(0L); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       DurationFormatUtils.formatDurationHMS(670L); [EOL]       DurationFormatUtils.lexx("e"); [EOL]       durationFormatUtils_Token0.getCount(); [EOL]       DurationFormatUtils.formatPeriodISO((-3145), (-3146)); [EOL]       DurationFormatUtils.formatDuration(0L, "0java.lang.StringBuilder@000000003800java.lang.StringBuilder@000000003900java.lang.StringBuilder@0000000040670"); [EOL]       long long1 = (-2234L); [EOL]       DurationFormatUtils.formatDuration((-2234L), "", true); [EOL]       DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils(); [EOL]       // Undeclared exception! [EOL]       DurationFormatUtils.formatPeriod(670L, (long) (-3146), ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(Integer.MAX_VALUE); [EOL]       hashCodeBuilder1.append((-1)); [EOL]       assertEquals((-2147460413), hashCodeBuilder1.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongToIntArray()  throws Throwable  { [EOL]       int[] intArray0 = new int[7]; [EOL]       int[] intArray1 = Conversion.longToIntArray(1L, 1, intArray0, 1, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       boolean boolean0 = ArrayUtils.contains(longArray0, (long) 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[8]; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1464), (-1063)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("/UzT$c0PraLRBN}"); [EOL]       assertEquals(47, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '%'; [EOL]       charArray0[2] = ':'; [EOL]       charArray0[3] = 'y'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, 458, 458); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 458 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcheckedException()  throws Throwable  { [EOL]       ConcurrentHashMap<String, Integer> concurrentHashMap0 = new ConcurrentHashMap<String, Integer>(); [EOL]       ConcurrentInitializer<Integer> concurrentInitializer0 = null; [EOL]       ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<String, Integer>) concurrentHashMap0, ".Aux0`?&|!{Ttq", (ConcurrentInitializer<Integer>) null); [EOL]       String string0 = "org.apache.commons.lang3.concurrent.LazyInitializer"; [EOL]       MockError mockError0 = new MockError(); [EOL]       mockError0.getSuppressed(); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(mockError0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.checkedException(mockRuntimeException0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Not a checked exception: org.evosuite.runtime.mock.java.lang.MockThrowable: org.evosuite.runtime.mock.java.lang.MockThrowable [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.ConcurrentUtils", e); [EOL]       } [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhasNext()  throws Throwable  { [EOL]       Calendar calendar0 = MockCalendar.getInstance(); [EOL]       DateUtils.DateIterator dateUtils_DateIterator0 = new DateUtils.DateIterator(calendar0, calendar0); [EOL]       dateUtils_DateIterator0.hasNext(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder"); [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setTrimmerMatcher(strMatcher0); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "p{InCombiningDiacriticalMarks}+"; [EOL]       stringArray0[1] = "~@!LXZ6YxCtw"; [EOL]       stringArray0[2] = "null comparator"; [EOL]       stringArray0[3] = "Threshold must not be negative"; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "~@!LXZ6YxCtw"; [EOL]       String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank("~@!LXZ6YxCtw"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp("a2j]Xi`@l3"); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("g!8n`\u00059'AOnU9"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'y'; [EOL]       charArray0[1] = '1'; [EOL]       charArray0[2] = '.'; [EOL]       charArray0[3] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "g!8n`\u00059'AOnU9", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("ANC_ZRi_!G%*zb*}00[", "g!8n`\u00059'AOnU9", "Ra9BG/6$[B"); [EOL]        [EOL]       String string2 = StringUtils.replace("g!8n`\u00059'AOnU9", "g!8n`\u00059'AOnU9", "a?qyUXiDPS[", 8192); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       CharRange charRange1 = CharRange.is('#'); [EOL]       boolean boolean0 = charRange0.equals(charRange1); [EOL]       assertFalse(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclose()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((long) (-963)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.append((long) 104); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(charArray1); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) list0); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder3.appendAll((Iterator<?>) strBuilder_StrBuilderTokenizer0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       int[] intArray0 = new int[9]; [EOL]       compareToBuilder0.append(intArray0, (int[]) null); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.right("", 1); [EOL]        [EOL]       String string1 = StringUtils.stripToNull(""); [EOL]        [EOL]       String string2 = StringUtils.left("", (-2435)); [EOL]        [EOL]       String string3 = StringUtils.remove((String) null, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       int int0 = StringUtils.countMatches("", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string4 = StringUtils.trimToEmpty((String) null); [EOL]        [EOL]       short[] shortArray0 = new short[3]; [EOL]       shortArray0[0] = (short)0; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)4; [EOL]       String string5 = StringUtils.join(shortArray0, 'T'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", "org.apache.commons.lang3.StringUtils"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         BooleanUtils.toBooleanObject((String) null, "tQ", "Z,U}\"P(Dx3-HoQ:;d!L", "Z,U}\"P(Dx3-HoQ:;d!L"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The String did not match any specified value [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.BooleanUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(".F_8~jr2_t 5y.4", 0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhasPrevious()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "set() is unsupported"); [EOL]       strTokenizer0.next(); [EOL]       boolean boolean0 = strTokenizer0.hasPrevious(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetReducedFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(0, 798); [EOL]       int int0 = fraction0.getNumerator(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.removePattern("m%I&V4M", "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       String string1 = StringUtils.chomp("m%I&V4M", "m%I&V4M"); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("", "fOXsK42LD`NC@(D>vyX"); [EOL]        [EOL]       String string3 = StringUtils.join((short[]) null, 'I'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "m%I&V4M"); [EOL]        [EOL]       Locale locale0 = Locale.CHINESE; [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-3190)); [EOL]        [EOL]       String string5 = StringUtils.stripEnd("", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsIgnoreCase("", ""); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'I'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap(charArray0, (-1), (-3190)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.CharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintArrayToLong()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = 16; [EOL]       long long0 = Conversion.intArrayToLong(intArray0, 0, (byte) (-112), (-1852), 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char0 = 'j'; [EOL]       Iterable<Object> iterable0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) null, "b0}RRkoCl[.="); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]       assertEquals(0, strBuilder1.size()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('j', 815); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char char1 = '8'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('j', '8'); [EOL]       assertEquals(1, strBuilder0.size()); [EOL]       assertEquals(1, strBuilder1.size()); [EOL]       assertEquals(1, strBuilder2.size()); [EOL]        [EOL]       int int1 = 516; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.insert(516, false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 516 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinsert()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(objectArray0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append((long) 0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln('H'); [EOL]        [EOL]       Object[] objectArray1 = new Object[0]; [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(objectArray1); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteCharAt(0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.setLength(0); [EOL]        [EOL]       int int0 = 2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2, (double) 2); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOSMatch()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isOSMatch("JAVA_1_4", "6}{60&&WYF7m %9", "JAVA_1_5", "6}{60&&WYF7m %9"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0); [EOL]        [EOL]       int int1 = 924; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadLeft(0, 924, 'y'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((String) null); [EOL]        [EOL]       char char0 = '8'; [EOL]       int int2 = strBuilder0.indexOf('8'); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder((String) null); [EOL]        [EOL]       StringBuffer stringBuffer0 = null; [EOL]       try { [EOL]         stringBuffer0 = new StringBuffer((CharSequence) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst("5p&H0$B\".@l3|+@o", ""); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(4); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln(stringBuffer0); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2] = 'S'; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0); [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null); [EOL]       Object object2 = new Object(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null); [EOL]       Boolean boolean0 = equalsBuilder1.build(); [EOL]       IDKey iDKey0 = new IDKey(boolean0); [EOL]       EqualsBuilder.isRegistered(equalsBuilder4, iDKey0); [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) '?'; [EOL]       floatArray0[1] = (float) '<'; [EOL]       EqualsBuilder equalsBuilder6 = equalsBuilder3.append(floatArray0, floatArray0); [EOL]       EqualsBuilder equalsBuilder7 = equalsBuilder3.append(object2, (Object) equalsBuilder6); [EOL]       EqualsBuilder equalsBuilder8 = equalsBuilder1.append((byte) (-30), (byte) (-30)); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder6, (Object) equalsBuilder8, (Collection<String>) linkedHashSet0); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (-1.0); [EOL]       doubleArray0[1] = (double) '?'; [EOL]       doubleArray0[2] = (double) (-941.3923F); [EOL]       equalsBuilder7.append(doubleArray0, doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparatorPreserveAllTokens()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp(" ", " "); [EOL]        [EOL]       StringUtils.equalsIgnoreCase("", " "); [EOL]       String string1 = StringUtils.center(" ", 2340, 'd'); [EOL]       StringUtils.stripEnd("", "e"); [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) ""); [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]       StringUtils.contains((CharSequence) " ", 2340); [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, "", (-1)); [EOL]       StringUtils.join((Object[]) stringArray0, "", 1663, (-1)); [EOL]       String string2 = StringUtils.SPACE; [EOL]       String string3 = StringUtils.stripToEmpty("e"); [EOL]        [EOL]       String string4 = StringUtils.remove("e", "\n"); [EOL]        [EOL]       CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "e", (CharSequence) ""); [EOL]        [EOL]       StringUtils.getLevenshteinDistance((CharSequence) "e", (CharSequence) "e"); [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, ""); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", 1663, (-1)); [EOL]        [EOL]       StringUtils.difference("", ""); [EOL]       String string5 = StringUtils.reverse(" "); [EOL]        [EOL]       StringUtils.startsWith("\n", ""); [EOL]       StringUtils.endsWith(" ", ""); [EOL]       StringUtils.isNumericSpace(""); [EOL]       StringUtils.substringAfterLast("e", " "); [EOL]       StringUtils.swapCase((String) null); [EOL]       float[] floatArray0 = new float[7]; [EOL]       floatArray0[0] = (float) 0; [EOL]       floatArray0[1] = (float) 'd'; [EOL]       floatArray0[2] = (float) 2340; [EOL]       floatArray0[3] = (float) 0; [EOL]       floatArray0[4] = (float) 0; [EOL]       floatArray0[5] = (-982.0F); [EOL]       floatArray0[6] = (float) 1663; [EOL]       String string6 = StringUtils.join(floatArray0, 'd', 4516, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcenter()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "^).r{Hua2", (String) null); [EOL]        [EOL]       String string1 = StringUtils.abbreviate((String) null, 125); [EOL]        [EOL]       String string2 = StringUtils.substringBetween((String) null, ", '", (String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.repeat(')', 125); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null); [EOL]        [EOL]       String string5 = StringUtils.center((String) null, 125); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwriteField()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FieldUtils.writeField((Field) null, (Object) null, (Object) null, false); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The field must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.FieldUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBetween("b#7v\"Z6i?umpQU", "b#7v\"Z6i?umpQU"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       String string1 = "The character must not be null"; [EOL]       int int0 = 229; [EOL]       String string2 = StringUtils.abbreviate("The character must not be null", 229); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "The character must not be null"; [EOL]       charSequenceArray0[2] = (CharSequence) null; [EOL]       int int1 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsWhitespace(charSequenceArray0[0]); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("The character must not be null"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", 229, (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.substringsBetween(">6[jeJ<SAKbrgG+g7`", "KtUnGkJOKdUG25", "#|J|a=;l_S1^qmM"); [EOL]        [EOL]       String string0 = StringUtils.leftPad(">D<O)oa1X?)", (-1905), "Minimum abbreviation width is 4"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll((String[]) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "#|J|a=;l_S1^qmM", "Minimum abbreviation width is 4"); [EOL]        [EOL]       LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(); [EOL]        [EOL]       ListIterator<Locale.LanguageRange> listIterator0 = linkedList0.listIterator(); [EOL]        [EOL]       String string1 = StringUtils.join((Iterator<?>) listIterator0, 's'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexToLong()  throws Throwable  { [EOL]       long long0 = Conversion.hexToLong("sHv8iIW9[,1r@6", (-2673), (byte) (-109), (-1963), (-664)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripEnd()  throws Throwable  { [EOL]       String string0 = StringUtils.right("Threshold must not be negative", 2139); [EOL]        [EOL]       LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>(2139, 2139); [EOL]        [EOL]       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES; [EOL]       boolean boolean0 = linkedHashSet0.add(locale_FilteringMode0); [EOL]        [EOL]       Spliterator<Locale.FilteringMode> spliterator0 = linkedHashSet0.spliterator(); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "Threshold must not be negative"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isEmpty("Threshold must not be negative"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlphaSpace("Threshold must not be negative"); [EOL]        [EOL]       String string2 = StringUtils.repeat("-h0>", "#m(.AN4", 256); [EOL]        [EOL]       boolean boolean3 = StringUtils.isNumeric("Threshold must not be negative"); [EOL]        [EOL]       String string3 = StringUtils.stripEnd("U", "Threshold must not be negative"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "-h0>"; [EOL]       stringArray0[1] = "#m(.AN4"; [EOL]       stringArray0[2] = "Threshold must not be negative"; [EOL]       stringArray0[3] = "U"; [EOL]       stringArray0[4] = string2; [EOL]       stringArray0[5] = "java.util.Locale$FilteringMode@0000000001"; [EOL]       String string4 = StringUtils.getCommonPrefix(stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(5, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]       assertEquals(16, strBuilder3.length()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder2.length()); [EOL]       assertEquals(16, strBuilder3.length()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]       assertEquals(16, strBuilder4.length()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 0); [EOL]       assertEquals(16, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]       assertEquals(0, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder5 = new StrBuilder(0); [EOL]       assertEquals(0, strBuilder5.length()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = new StrBuilder((-1)); [EOL]       assertEquals(0, strBuilder6.length()); [EOL]        [EOL]       int int2 = StrBuilder.CAPACITY; [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendln((String) null, 0, 2255); [EOL]       assertEquals(1, strBuilder6.length()); [EOL]       assertEquals(1, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.appendPadding(6, '2'); [EOL]       assertEquals(7, strBuilder8.length()); [EOL]       assertEquals(7, strBuilder6.length()); [EOL]       assertEquals(7, strBuilder7.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder6.insert(137, (Object) strBuilder5); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 137 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)105); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       String string0 = BooleanUtils.toString(boolean0, "", "", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = fraction0.ONE_THIRD.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (int) '.'); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("null comparator", "null comparator"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replacePattern("", "", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       int int0 = 2994; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.randomNumeric(2994); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       Class<MockThrowable> class0 = MockThrowable.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, 1549); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>(); [EOL]       mutableTriple0.setLeft("wo?ME"); [EOL]       MutableTriple<Object, Object, Object> mutableTriple1 = new MutableTriple<Object, Object, Object>(); [EOL]       Integer integer0 = new Integer((-3184)); [EOL]       ImmutableTriple<Integer, Object, String> immutableTriple0 = ImmutableTriple.of(integer0, (Object) null, "wo?ME"); [EOL]       ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>> immutableTriple1 = new ImmutableTriple<Object, ImmutableTriple<Integer, Object, String>, Triple<Object, Object, Object>>("wo?ME", immutableTriple0, mutableTriple1); [EOL]       boolean boolean0 = immutableTriple1.equals(mutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       long[] longArray1 = ArrayUtils.nullToEmpty(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder6.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder7.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.replaceChars("Afh\"z$ulNc", "&S", "cK2@iqJ0FN"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]       assertTrue(charSequence0.equals((Object)string1)); [EOL]       assertFalse(charSequence0.equals((Object)string0)); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "Afh\"z$ulNc", 0); [EOL]        [EOL]       int int2 = StringUtils.ordinalIndexOf("cK2@iqJ0FN", charSequenceArray0[1], 0); [EOL]        [EOL]       String string2 = StringUtils.leftPad("8~?Y97L,", 0); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]       assertFalse(string2.equals((Object)charSequence0)); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOfAny("8~?Y97L,", charSequenceArray0); [EOL]        [EOL]       String string3 = StringUtils.stripEnd("Afh\"z$ulNc", "*W.W@X:"); [EOL]       assertTrue(string3.equals((Object)string1)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertTrue(string3.equals((Object)charSequence0)); [EOL]        [EOL]       String string4 = StringUtils.substringAfter("%f'c29(F`", ")P;=`iiS"); [EOL]       assertFalse(string4.equals((Object)charSequence0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinsert()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("e9EwrN.v3yrb0"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(645); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 645); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst(strMatcher0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendNull(); [EOL]        [EOL]       int int0 = (-3235); [EOL]       StrBuilder strBuilder5 = strBuilder1.appendSeparator('7', (-3235)); [EOL]        [EOL]       int int1 = 3; [EOL]       strBuilder0.validateIndex(3); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.appendln('y'); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert((-407), false); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -407 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder5.appendFixedWidthPadLeft((-2267), 604, 'n'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "nCIF=^XRVL:\t%AH&"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharSequenceUtils.lastIndexOf((CharSequence) null, 1894, 2825); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.CharSequenceUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceChars()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("', has a length less than 2", 'E', 'E'); [EOL]        [EOL]       String string1 = StringUtils.replace("', has a length less than 2", "', has a length less than 2", "', has a length less than 2"); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("', has a length less than 2"); [EOL]        [EOL]       String string2 = StringUtils.difference("', has a length less than 2", "', has a length less than 2"); [EOL]        [EOL]       String string3 = "', has a length less than 2"; [EOL]       String string4 = StringUtils.removeStart("", "', has a length less than 2"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       String string5 = StringUtils.substringAfterLast("', has a length less than 2", "', has a length less than 2"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("', has a length less than 2"); [EOL]        [EOL]       int int1 = (-76); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("x", (-76), (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequalsIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate((String) null, 10, 10); [EOL]        [EOL]       String string1 = StringUtils.defaultString("</[=a%spkSb/6M"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase((CharSequence) null, "</[=a%spkSb/6M"); [EOL]        [EOL]       int int0 = StringUtils.length("</[=a%spkSb/6M"); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       String string2 = StringUtils.right("", 10); [EOL]        [EOL]       String string3 = StringUtils.reverse("</[=a%spkSb/6M"); [EOL]        [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[0] = (-1458.16836053); [EOL]       doubleArray0[1] = (double) (-1); [EOL]       doubleArray0[2] = (double) 10; [EOL]       doubleArray0[3] = (double) 10; [EOL]       doubleArray0[4] = 0.0; [EOL]       doubleArray0[5] = (-779.41); [EOL]       String string4 = StringUtils.join(doubleArray0, 'm', 10, 0); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (-1457); [EOL]       intArray0[1] = 14; [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = (-1); [EOL]       intArray0[4] = 10; [EOL]       intArray0[5] = (int) 'm'; [EOL]       intArray0[6] = 14; [EOL]       intArray0[7] = 10; [EOL]       String string5 = StringUtils.join(intArray0, 'r'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: "); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5}%CW)%"); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]        [EOL]       int int0 = 537; [EOL]       StrBuilder strBuilder3 = new StrBuilder("Invalid startIndex: "); [EOL]       assertEquals(20, strBuilder3.length()); [EOL]        [EOL]       int int1 = 9; [EOL]       StrBuilder strBuilder4 = strBuilder2.appendFixedWidthPadRight((Object) strBuilder1, 9, '*'); [EOL]       assertEquals(9, strBuilder0.length()); [EOL]       assertEquals(9, strBuilder1.length()); [EOL]       assertEquals(9, strBuilder2.length()); [EOL]       assertEquals(9, strBuilder4.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(117, (long) 537); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 117 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils.random(0); [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '6'; [EOL]       RandomStringUtils.random(0, 807, 1, false, false, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendFieldStart(stringBuffer0, ""); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.setFieldSeparatorAtStart(true); [EOL]       standardToStringStyle0.appendStart(stringBuffer0, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("NIa|", ""); [EOL]        [EOL]       String string1 = StringUtils.join((long[]) null, '_'); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("NIa|", (CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.chop(""); [EOL]        [EOL]       String string3 = StringUtils.substring((String) null, Integer.MAX_VALUE, Integer.MAX_VALUE); [EOL]        [EOL]       String string4 = StringUtils.chomp("Array element "); [EOL]        [EOL]       String string5 = StringUtils.repeat("The Character must not be null", 4517); [EOL]        [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)0; [EOL]       String string6 = StringUtils.join(shortArray0, '_', Integer.MAX_VALUE, (int) (short)0); [EOL]       assertEquals(1, shortArray0.length); [EOL]        [EOL]       ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       String string7 = StringUtils.join(iterator0, '_'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = '_'; [EOL]       charArray0[2] = '_'; [EOL]       charArray0[3] = '_'; [EOL]       charArray0[4] = '_'; [EOL]       String string8 = StringUtils.join(charArray0, '_', (-1752), (-3540)); [EOL]       assertEquals(5, charArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); [EOL]       boolean boolean0 = TypeUtils.isAssignable(wildcardType0, wildcardType0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendAll((Iterable<?>) null); [EOL]        [EOL]       String string1 = strBuilder1.rightString(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       StringUtils.stripStart("_fQY_af8", "_fQY_af8"); [EOL]       StringUtils.splitByWholeSeparator("jutEZ?8yc+", ""); [EOL]       StringUtils.countMatches("jutEZ?8yc+", "jutEZ?8yc+"); [EOL]       StringUtils.removeStart("9.2a=P+HRf`R's^w+eE", "org.apache.commons.lang3.CharSequenceUtils"); [EOL]       StringUtils.uncapitalize("_fQY_af8"); [EOL]       String string0 = "1_iVq9-<w--D+?HoA~d"; [EOL]       StringUtils.substringsBetween("", "1_iVq9-<w--D+?HoA~d", "\r"); [EOL]       String string1 = "1_iVq9-<w--D+?HoA~d"; [EOL]       StringUtils.chomp("1_iVq9-<w--D+?HoA~d"); [EOL]       char char0 = 'B'; [EOL]       StringUtils.center(" p_b2*\"Od&p8%", 1, 'B'); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("1_iVq9-<w--D+?HoA~d", 1, 1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testchomp()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("BnJbN*", "ARM45"); [EOL]        [EOL]       String string1 = StringUtils.trimToEmpty("BnJbN*"); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "ARM45"); [EOL]        [EOL]       String string2 = StringUtils.swapCase("BnJbN*"); [EOL]        [EOL]       PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(); [EOL]        [EOL]       HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0); [EOL]        [EOL]       boolean boolean0 = hashSet0.add("BnJbN*"); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) hashSet0, 's'); [EOL]        [EOL]       String string4 = StringUtils.chomp("", "bNjBn*"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "java.lang.String@0000000001"; [EOL]       String string5 = StringUtils.join(objectArray0, 'x', (-1), (-1)); [EOL]        [EOL]       String string6 = StringUtils.strip("B,3", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("ARM45", "ARM45", 3207); [EOL]        [EOL]       String string7 = StringUtils.join((Iterator<?>) null, "A}&z47|p01e"); [EOL]        [EOL]       String string8 = StringUtils.removeStart("jh", "jh"); [EOL]        [EOL]       String string9 = StringUtils.abbreviate("", (-1), 3207); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.remove(" vs ", 'h'); [EOL]        [EOL]       String string1 = StringUtils.removePattern(" vs ", " vs "); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty(" vs "); [EOL]        [EOL]       String string2 = StringUtils.replace("`4A!K;B`", "", " vs ", (-1));B`", string2); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumeric(""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumericSpace(" vs "); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "`4A!K;B`", (CharSequence) ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) " vs ", (CharSequence) "`4A!K;B`"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0); [EOL]        [EOL]       CharBuffer charBuffer1 = StringUtils.defaultIfBlank((CharBuffer) null, charBuffer0); [EOL]        [EOL]       String string3 = StringUtils.trimToNull(" vs "); [EOL]        [EOL]       String string4 = StringUtils.replaceChars("vs", "(0AV$B", "vd*+g.n+9W"); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) "vs", 0, (-1)); [EOL]        [EOL]       String string5 = StringUtils.center("", 121, 'h'); [EOL]        [EOL]       String string6 = StringUtils.substringAfter("\n", "?O<Ssm#PEN1-^/bq"); [EOL]        [EOL]       boolean boolean3 = StringUtils.equals((CharSequence) "", (CharSequence) "vs"); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)53; [EOL]       byteArray0[1] = (byte) (-94); [EOL]       byteArray0[2] = (byte)11; [EOL]       byteArray0[3] = (byte)64; [EOL]       String string7 = StringUtils.join(byteArray0, 'N', 105, (-4848)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("BnJbN*", "ARM45"); [EOL]        [EOL]       String string1 = StringUtils.trimToEmpty("BnJbN*"); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "ARM45"); [EOL]        [EOL]       String string2 = StringUtils.swapCase("BnJbN*"); [EOL]        [EOL]       PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>(); [EOL]        [EOL]       HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0); [EOL]        [EOL]       boolean boolean0 = hashSet0.add("BnJbN*"); [EOL]        [EOL]       String string3 = StringUtils.join((Iterable<?>) hashSet0, 's'); [EOL]        [EOL]       String string4 = StringUtils.chomp("", "bNjBn*"); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-1)); [EOL]        [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) "java.lang.String@0000000001"; [EOL]       String string5 = StringUtils.join(objectArray0, 'x', (-1), (-1)); [EOL]        [EOL]       String string6 = StringUtils.strip("B,3", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("ARM45", "ARM45", 3207); [EOL]        [EOL]       String string7 = StringUtils.join((Iterator<?>) null, "A}&z47|p01e"); [EOL]        [EOL]       String string8 = StringUtils.removeStart("jh", "jh"); [EOL]        [EOL]       String string9 = StringUtils.abbreviate("", (-1), 3207); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-890)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append("$Ps-)|ysy>r47^"); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       objectArray0[0] = (Object) strBuilder1; [EOL]       objectArray0[1] = (Object) "$Ps-)|ysy>r47^"; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]        [EOL]       objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[5] = (Object) "$Ps-)|ysy>r47^"; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(objectArray0, "$Ps-)|ysy>r47^"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(4, (float) 4); [EOL]        [EOL]       String string0 = strBuilder1.midString((-3719), 97); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)96, 7); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, (String) null); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(0.0); [EOL]       assertEquals(4, strBuilder0.length()); [EOL]       assertEquals(4, strBuilder1.length()); [EOL]       assertEquals(4, strBuilder2.length()); [EOL]        [EOL]       int int0 = 556; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.substring(821, 556); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append('%', '%'); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[2]; [EOL]       doubleArray0[0] = 7301.0; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 688.97053, (double) (byte)7); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrappedFactory()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       basicThreadFactory_Builder0.wrappedFactory(basicThreadFactory0); [EOL]       BasicThreadFactory basicThreadFactory1 = basicThreadFactory_Builder0.build(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '/'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.subSequence((-1997), (-1997)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1997 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("K6f"); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]        [EOL]       String string1 = ""; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText(""); [EOL]       assertEquals(3, strBuilder0.length()); [EOL]       assertEquals(3, strBuilder1.length()); [EOL]       assertEquals(3, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder2.length()); [EOL]       assertEquals(6, strBuilder3.length()); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder4.length()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("", (-1079)); [EOL]       assertEquals(6, strBuilder0.length()); [EOL]       assertEquals(6, strBuilder1.length()); [EOL]       assertEquals(6, strBuilder4.length()); [EOL]       assertEquals(6, strBuilder5.length()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]       assertEquals(7, strBuilder0.length()); [EOL]       assertEquals(7, strBuilder1.length()); [EOL]       assertEquals(7, strBuilder2.length()); [EOL]       assertEquals(7, strBuilder3.length()); [EOL]       assertEquals(7, strBuilder6.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]       assertEquals(8, strBuilder0.length()); [EOL]       assertEquals(8, strBuilder1.length()); [EOL]       assertEquals(8, strBuilder2.length()); [EOL]       assertEquals(8, strBuilder3.length()); [EOL]       assertEquals(8, strBuilder6.length()); [EOL]       assertEquals(8, strBuilder7.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n"); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '^'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-719); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testright()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("", (-1269), 'r'); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf("", "", 3270); [EOL]        [EOL]       String string1 = StringUtils.removeStartIgnoreCase("", ""); [EOL]        [EOL]       String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithIgnoreCase("", ""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       String string3 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad("=(:!lN1$~&", 600, (String) null); [EOL]        [EOL]       float[] floatArray0 = new float[5]; [EOL]       floatArray0[0] = (float) 'r'; [EOL]       floatArray0[1] = (float) 3270; [EOL]       floatArray0[2] = (float) 600; [EOL]       floatArray0[3] = (float) 3270; [EOL]       floatArray0[4] = (-2778.0017F); [EOL]       String string5 = StringUtils.join(floatArray0, 'I'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseDateStrictly()  throws Throwable  { [EOL]       Locale locale0 = Locale.KOREAN; [EOL]       String[] stringArray0 = new String[9]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.parseDateStrictly("ZZ", locale0, stringArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprependIfMissing()  throws Throwable  { [EOL]       String string0 = "\\u0"; [EOL]       String string1 = StringUtils.center("!#uP", (-201), string0); [EOL]        [EOL]       String string2 = StringUtils.substringBefore((String) null, "TcBWicm1LpG#(Y%\"szP"); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'W'; [EOL]       charArray0[1] = 'A'; [EOL]       charArray0[2] = 'v'; [EOL]       charArray0[3] = 'p'; [EOL]       charArray0[4] = '/'; [EOL]       charArray0[5] = 'S'; [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       String string3 = StringUtils.center("!#uP", 0, 'B'); [EOL]        [EOL]       int int0 = StringUtils.countMatches((CharSequence) null, ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "!#uP", 0); [EOL]        [EOL]       String string4 = StringUtils.prependIfMissingIgnoreCase("\r", "\r", (CharSequence[]) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("$E#}"); [EOL]       Locale locale0 = Locale.KOREAN; [EOL]       FastDateParser fastDateParser0 = null; [EOL]       try { [EOL]         fastDateParser0 = new FastDateParser("", timeZone0, locale0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = '='; [EOL]       charArray0[5] = '5'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]       assertEquals(6, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       String string2 = StringUtils.LF; [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "\n"; [EOL]       charSequenceArray0[1] = (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[2] = (CharSequence) "\n"; [EOL]       charSequenceArray0[3] = (CharSequence) "Z|&xc}e&+;"; [EOL]       String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3494)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[5] = (CharSequence) "\n"; [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", charSequenceArray0[5], 3156); [EOL]       assertEquals(6, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace("\n"); [EOL]        [EOL]       String string4 = StringUtils.replace("=pE~G", "', is neither of type Map.Entry nor an Array", "iFcplQz6", (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-1L), 0L); [EOL]       double[] doubleArray0 = new double[0]; [EOL]       compareToBuilder1.append(doubleArray0, doubleArray0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("OYq"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.add((int[]) null, 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       CharRange charRange1 = CharRange.isNotIn('&', ''); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CompareToBuilder.reflectionCompare((Object) null, (Object) "Unexpected IllegalAccessException", false); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       DecimalFormat decimalFormat0 = new DecimalFormat(); [EOL]       DecimalFormat decimalFormat1 = (DecimalFormat)ObjectUtils.defaultIfNull((Object) decimalFormat0, objectArray0[1]); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean3 = arrayList0.add((Object) ""); [EOL]        [EOL]       int int1 = 0; [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       char char0 = '}'; [EOL]       String string2 = StringUtils.join(doubleArray0, '}'); [EOL]        [EOL]       String string3 = StringUtils.center("", 0); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, '}'); [EOL]        [EOL]       boolean boolean6 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.join((Iterable<?>) arrayList0, '}'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean7 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Iterator<?>) listIterator0, '}'); [EOL]         fail("Expecting exception: ConcurrentModificationException"); [EOL]        [EOL]       } catch(ConcurrentModificationException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.ArrayList$Itr", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringWriter stringWriter1 = stringWriter0.append('M'); [EOL]        [EOL]       StringWriter stringWriter2 = stringWriter1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter2.getBuffer(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       stringBuffer0.ensureCapacity(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(stringBuffer0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendNull(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stopWatch0.stop(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Stopwatch is not running.  [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.StopWatch", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za3z]++"); [EOL]       Locale locale0 = Locale.ITALY; [EOL]       FastDateParser fastDateParser0 = null; [EOL]       try { [EOL]         fastDateParser0 = new FastDateParser("D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za3z]++", timeZone0, locale0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Failed to parse \"D+|E+|F+|G+|H+|K+|M+|S+|W+|Z+|a+|d+|h+|k+|m+|s+|w+|y+|z+|''|'[^']++(''[^']*+)*+'|[^'A-Za3z]++\" ; gave up at index 83 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("2X:=4rf^>1T./&0xdS"); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder2.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       long long0 = NumberUtils.max((-1277L), (long) (short) (-1), (long) (short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       long long0 = ObjectUtils.CONST((-1556L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPeriod()  throws Throwable  { [EOL]       DurationFormatUtils.formatDurationHMS(0L); [EOL]       DurationFormatUtils.formatDurationHMS(2408L); [EOL]       DurationFormatUtils.formatDurationISO(0L); [EOL]       String string0 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN; [EOL]       DurationFormatUtils.lexx("java.lang.StringBuilder@00000000360java.lang.StringBuilder@00000000370java.lang.StringBuilder@00000000380java.lang.StringBuilder@00000000390java.lang.StringBuilder@00000000400java.lang.StringBuilder@00000000410java.lang.StringBuilder@0000000042000java.lang.StringBuilder@0000000043"); [EOL]       DurationFormatUtils.lexx("5({+>&Zs)R.'"); [EOL]       DurationFormatUtils.formatDurationHMS(1L); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("0java.lang.StringBuilder@000000001800java.lang.StringBuilder@000000001902java.lang.StringBuilder@0000000020408"); [EOL]       DurationFormatUtils.formatPeriodISO(0L, 0L); [EOL]       DurationFormatUtils.formatDurationWords(86399999L, true, false); [EOL]       DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, (Object) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testshutdown()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(97L, timeUnit0, (-1)); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.getExecutorService(); [EOL]       timedSemaphore0.getUnit(); [EOL]       timedSemaphore0.getAvailablePermits(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.shutdown(); [EOL]       timedSemaphore0.getPeriod(); [EOL]       timedSemaphore0.getAverageCallsPerPeriod(); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.shutdown(); [EOL]       timedSemaphore0.getExecutorService(); [EOL]       timedSemaphore0.shutdown(); [EOL]       timedSemaphore0.getPeriod(); [EOL]       timedSemaphore0.getUnit(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayComponentType()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Type type0 = TypeUtils.getArrayComponentType(class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(); [EOL]       Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Callable<Object>>(callable0); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       String string0 = "org.apache.commons.lang3.concurrent.MultiBackgroundInitializer"; [EOL]       multiBackgroundInitializer0.addInitializer("org.apache.commons.lang3.concurrent.MultiBackgroundInitializer", callableBackgroundInitializer0); [EOL]       Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable1).call(); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1); [EOL]       callableBackgroundInitializer1.start(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       Callable<Delayed> callable2 = (Callable<Delayed>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class)); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1, threadFactory0); [EOL]       CallableBackgroundInitializer<Delayed> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Delayed>(callable2, scheduledThreadPoolExecutor0); [EOL]       callableBackgroundInitializer2.getTaskCount(); [EOL]       multiBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer2.start(); [EOL]       scheduledThreadPoolExecutor0.setContinueExistingPeriodicTasksAfterShutdownPolicy(false); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer2.setExternalExecutor(scheduledThreadPoolExecutor0); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // Cannot set ExecutorService after start()! [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.BackgroundInitializer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("(?: s|[s&&[^ ]])s*", "(?: s|[s&&[^ ]])s*"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'K'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charArray0); [EOL]        [EOL]       String string1 = StringUtils.lowerCase("4QSejn\"zyIHEF~:m|C"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("+Xp"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("%XX"); [EOL]       assertEquals(35, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'o'; [EOL]       charArray0[1] = 'o'; [EOL]       charArray0[2] = ';'; [EOL]       charArray0[3] = '`'; [EOL]       charArray0[4] = 'm'; [EOL]       charArray0[5] = 'X'; [EOL]       charArray0[6] = 'n'; [EOL]       charArray0[7] = 'G'; [EOL]       charArray0[8] = '+'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(charArray0, 2731, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByCharacterType()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotBlank(""); [EOL]        [EOL]       Locale locale0 = new Locale("-yZ4W6V9Si:Zf`b=h", "-yZ4W6V9Si:Zf`b=h"); [EOL]        [EOL]       String string0 = StringUtils.lowerCase("", locale0); [EOL]        [EOL]       PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) priorityQueue0, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       Class<CharBuffer> class0 = CharBuffer.class; [EOL]       ClassLoader classLoader0 = ClassLoader.getSystemClassLoader(); [EOL]        [EOL]       classLoader0.clearAssertionStatus(); [EOL]       ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0, classLoader0); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = serviceLoader0.iterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, '~'); [EOL]        [EOL]       String string3 = StringUtils.chomp("", "-yZ4W6V9Si:Zf`b=h"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '~'; [EOL]       charArray0[1] = 'Q'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "-yZ4W6V9Si:Zf`b=h", charArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.repeat('~', (-1)); [EOL]         fail("Expecting exception: NegativeArraySizeException"); [EOL]        [EOL]       } catch(NegativeArraySizeException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-730)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll("pD;m\"Wg[Mj"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder4.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string1 = strBuilder3.leftString(32); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]        [EOL]       String string2 = "J%?^k/q>-%"; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("J%?^k/q>-%"); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteAll(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]       assertTrue(strBuilder2.isEmpty()); [EOL]       assertTrue(strBuilder3.isEmpty()); [EOL]       assertTrue(strBuilder5.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '&'; [EOL]       charArray0[1] = '\''; [EOL]       int int1 = 31; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(9, charArray0, 31, (-730)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 9 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[8]; [EOL]       int int0 = HashCodeBuilder.reflectionHashCode(37, 37, "y3#IQhpoO)vN>X~]\"", true, (Class<? super String>) class0, stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, "Array and element annot both be null", (String) null, "O`|q ?"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprependIfMissingIgnoreCase()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       charSequenceArray0[0] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[1] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[2] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[3] = (CharSequence) "rtU"; [EOL]       String string0 = StringUtils.remove("rtU", "ne8"); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[5] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[6] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[7] = (CharSequence) "rtU"; [EOL]       charSequenceArray0[8] = (CharSequence) "rtU"; [EOL]       String string1 = StringUtils.prependIfMissingIgnoreCase("rtU", "rtU", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       String string0 = StringUtils.join(byteArray0, 'E', (-2572), (-4337)); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha(charBuffer0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("0<.ZqmcE&?"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("0<.ZqmcE&?", "", "0<.ZqmcE&?"); [EOL]        [EOL]       ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(); [EOL]       assertFalse(arrayDeque0.contains(charBuffer0)); [EOL]        [EOL]       boolean boolean1 = arrayDeque0.offerLast(charBuffer0); [EOL]       assertTrue(arrayDeque0.contains(charBuffer0)); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) arrayDeque0, "O;WZp0oX~i"); [EOL]       assertTrue(arrayDeque0.contains(charBuffer0)); [EOL]        [EOL]       String string2 = StringUtils.replaceChars("bUY ;88G%>7Ft", 'k', 'u');88G%>7Ft", string2); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "bUY ;88G%>7Ft", 1); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNotBlank(charBuffer0); [EOL]        [EOL]       String string3 = StringUtils.join(byteArray0, '5'); [EOL]        [EOL]       String string4 = StringUtils.stripEnd("", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.removePattern("m%I&V4M", "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       String string1 = StringUtils.chomp("m%I&V4M", "m%I&V4M"); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("", "fOXsK42LD`NC@(D>vyX"); [EOL]        [EOL]       String string3 = StringUtils.join((short[]) null, 'I'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "m%I&V4M"); [EOL]        [EOL]       Locale locale0 = Locale.CHINESE; [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-3190)); [EOL]        [EOL]       String string5 = StringUtils.stripEnd("", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsIgnoreCase("", ""); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'I'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap(charArray0, (-1), (-3190)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.CharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinvokeMethod()  throws Throwable  { [EOL]       Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 7); [EOL]       try {  [EOL]         MethodUtils.invokeMethod((Object) "", "", (Object[]) null, (Class<?>[]) classArray0); [EOL]         fail("Expecting exception: NoSuchMethodException"); [EOL]        [EOL]       } catch(NoSuchMethodException e) { [EOL]          // [EOL]          // No such accessible method: () on object: java.lang.String [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.MethodUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 79; [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((double) 79); [EOL]       assertEquals(4, strBuilder0.length()); [EOL]       assertEquals(4, strBuilder1.length()); [EOL]        [EOL]       int int1 = (-2267); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0); [EOL]       assertEquals(56, strBuilder0.length()); [EOL]       assertEquals(56, strBuilder2.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll('o'); [EOL]       assertEquals(53, strBuilder0.length()); [EOL]       assertEquals(53, strBuilder2.length()); [EOL]       assertEquals(53, strBuilder3.length()); [EOL]        [EOL]       strBuilder3.buffer = null; [EOL]       assertEquals(53, strBuilder0.length()); [EOL]       assertEquals(53, strBuilder2.length()); [EOL]       assertEquals(53, strBuilder3.length()); [EOL]        [EOL]       String string0 = "nCIF=^XRVL:\\t%AH&"; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'U'; [EOL]       char[] charArray1 = new char[6]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       compareToBuilder0.append(objectArray0, objectArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       strSubstitutor0.getVariableResolver(); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgenerateBitVector()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         EnumUtils.generateBitVectors(class0, (Iterable<JavaVersion>) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // The validated object is null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("K6f"); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]        [EOL]       String string1 = ""; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText(""); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("", (-1079)); [EOL]       assertFalse(linkedList0.contains(int0)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnotBlank()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.notBlank((CharSequence) charBuffer0, (String) null, (Object[]) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-376)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(2302L); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.ensureCapacity(114); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.ceiling((Date) mockDate0, 5); [EOL]       boolean boolean0 = DateUtils.isSameDay(date0, (Date) mockDate0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       String string4 = StringUtils.left((String) null, 1896); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.trim(); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceEachRepeatedly()  throws Throwable  { [EOL]       CharSequence charSequence0 = null; [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, 0, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&,1fs'G.F7", 0); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '!'; [EOL]       charArray0[1] = '8'; [EOL]       charArray0[2] = '9'; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = ';'; [EOL]       charArray0[5] = 'B'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);', 'B'}, charArray0); [EOL]        [EOL]       String string0 = StringUtils.replaceEachRepeatedly((String) null, (String[]) null, (String[]) null); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("&,1fs'G.F7"); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) null, (CharSequence) "&,1fs'G.F7"); [EOL]        [EOL]       String string2 = StringUtils.substring("", 0); [EOL]        [EOL]       String string3 = StringUtils.repeat("&,1fs'G.F7", 2138); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithIgnoreCase("&,1fs'G.F7", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.trim(""); [EOL]        [EOL]       String string5 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("", 0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         TypeUtils.getRawType((Type) null, (Type) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // unknown type: null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StringBuffer stringBuffer0 = new StringBuffer("org.apache.commons.lang3.builder.ToStringStyle$DefaultToStringStyle"); [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.append(stringBuffer0, "", (double[]) null, (Boolean) booleanArray0[0]); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnotEmpty()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.notEmpty((Collection<BatchUpdateException>) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // The validated collection is empty [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.INDEX_NOT_FOUND; [EOL]        [EOL]       int int2 = StringUtils.ordinalIndexOf("cK2@iqJ0FN", charSequenceArray0[1], 0); [EOL]        [EOL]       String string2 = StringUtils.leftPad("8~?Y97L,", 0); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOfAny("8~?Y97L,", charSequenceArray0); [EOL]        [EOL]       String string3 = StringUtils.stripEnd("Afh\"z$ulNc", "*W.W@X:"); [EOL]        [EOL]       String string4 = StringUtils.substringAfter("%f'c29(F`", ")P;=`iiS"); [EOL]        [EOL]       String string5 = StringUtils.capitalize("&S"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "Afh\"z$ulNc", (CharSequence) "Afh\"z$ulNc"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.left("", (-4855)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Integer integer0 = mutableInt0.toInteger(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       strBuilder_StrBuilderReader0.read(); [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]       strBuilder1.deleteAll(strMatcher0); [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]       StrBuilder strBuilder2 = strBuilder1.append((long) 104); [EOL]       strBuilder2.ensureCapacity(104); [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316)); [EOL]       strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]       char[] charArray1 = new char[2]; [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       strBuilder0.appendln(charArray1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(46, (-693)); [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       assertEquals((-46), fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("h2Xl", ", Length: 0"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "h2Xl", ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", 604); [EOL]        [EOL]       String string1 = StringUtils.trim("..."); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "h2Xl", (CharSequence) "...", (-1)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace("h2Xl"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("...", "..."); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("..."); [EOL]        [EOL]       String string2 = StringUtils.repeat(", Length: 0", 604); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlpha("h2Xl"); [EOL]        [EOL]       String string3 = StringUtils.strip("h2Xl"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = ';'; [EOL]       String string4 = StringUtils.join(charArray0, '3');", string4);'}, charArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.endsWithAny(";", stringArray0); [EOL]        [EOL]       String string5 = StringUtils.removeStart(", Length: 0", "h2Xl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Object[] objectArray1 = ArrayUtils.removeElement(objectArray0, objectArray0[0]); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLocalTime()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-723), 2463, 12, 12, (-2393), 11); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.isSameLocalTime(mockGregorianCalendar0, (Calendar) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The date must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.addMinutes(mockDate0, 1868); [EOL]       Date date1 = DateUtils.setMinutes(date0, 1868); [EOL]       DateUtils.iterator(date1, 4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strSubstitutor0.replace("", (-1), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equals((Object) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (float) 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder1.capacity(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder2 = strBuilder1.append((CharSequence) strBuilder0, 0, 0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.append(strBuilder3); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]       assertNull(strBuilder3.getNewLineText()); [EOL]       assertNull(strBuilder4.getNewLineText()); [EOL]        [EOL]       char char0 = '|'; [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceAll('A', '|'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder5.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.validateRange(32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = Integer.MAX_VALUE; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatUTC()  throws Throwable  { [EOL]       Locale locale0 = Locale.ITALY; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateFormatUtils.formatUTC(1L, "ctYo~VWw6W,ib]T=Lqh", locale0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal pattern component: c [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetCommonPrefix()  throws Throwable  { [EOL]       String string0 = StringUtils.reverseDelimited("", '?'); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase(""); [EOL]        [EOL]       String string1 = StringUtils.remove("(?: s|[s&&[^ ]])s*", "{U1XEB(EJl"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "(?: s|[s&&[^ ]])s*", (String) null); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.descendingIterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, ""); [EOL]        [EOL]       String string3 = StringUtils.remove("XXt!*Tj,", ""); [EOL]        [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (double) '?'; [EOL]       doubleArray0[1] = (double) '?'; [EOL]       doubleArray0[2] = (double) '?'; [EOL]       String string4 = StringUtils.join(doubleArray0, '0', (-1), (-1)); [EOL]        [EOL]       String string5 = StringUtils.getCommonPrefix(stringArray0); [EOL]        [EOL]       String[] stringArray1 = new String[4]; [EOL]        [EOL]       stringArray1[0] = null; [EOL]       stringArray1[1] = "XXt!*Tj,"; [EOL]       stringArray1[2] = "XXt!*Tj,"; [EOL]       stringArray1[3] = ""; [EOL]       String string6 = StringUtils.replaceEachRepeatedly("XXt!*Tj,", stringArray0, stringArray1); [EOL]        [EOL]       float[] floatArray0 = new float[7]; [EOL]       floatArray0[0] = (float) '?'; [EOL]       floatArray0[1] = (float) (-1); [EOL]       floatArray0[2] = (float) '0'; [EOL]       floatArray0[3] = (float) '?'; [EOL]       floatArray0[4] = (float) (-1); [EOL]       floatArray0[5] = (float) '?'; [EOL]       floatArray0[6] = (float) (-1); [EOL]       String string7 = StringUtils.join(floatArray0, 'Q', (-1), (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(79); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 79); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln((-2267)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append((CharSequence) stringBuilder0, 2, (-211)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendPadding()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 0); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = new StrBuilder(0); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = new StrBuilder((-1)); [EOL]        [EOL]       int int2 = StrBuilder.CAPACITY; [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendln((String) null, 0, 2255); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder7.appendPadding(6, '2'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder6.insert(137, (Object) strBuilder5); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 137 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendSeparator('`'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendln(stringBuilder0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (float) '`'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = "Invalid length: "; [EOL]       StrBuilder strBuilder1 = new StrBuilder("Invalid length: "); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendFixedWidthPadRight((-3837), (-3837), 'G'); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append(446.287598279); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.clear(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.replaceFirst(strMatcher0, "WkQ~#i}[72*VY?A$2SN"); [EOL]        [EOL]       int int0 = 8; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.append(strBuilder5, 8, 8); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(toStringStyle0, toStringStyle0); [EOL]       boolean boolean0 = reflectionToStringBuilder0.isAppendStatics(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       charRange0.hashCode(); [EOL]       assertTrue(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Character character0 = CharUtils.toCharacterObject('9'); [EOL]       String string0 = CharUtils.toString(character0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       ChoiceFormat choiceFormat0 = new ChoiceFormat("HCTO]"); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(choiceFormat0, choiceFormat0); [EOL]       Integer integer0 = new Integer(0); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer()); [EOL]       FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         compositeFormat0.format((Object) integer0, stringBuffer0, fieldPosition0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 0 [EOL]          // [EOL]          verifyException("java.text.ChoiceFormat", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlowerCase()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("^d%8'te3y", 0); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'b'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "^d%8'te3y", charArray0); [EOL]        [EOL]       String string1 = StringUtils.lowerCase(""); [EOL]        [EOL]       String string2 = StringUtils.rightPad("", 0, ""); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string3 = StringUtils.replace("", "38=.b3p;aJ(sIMg", "", 1969); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 't'; [EOL]       charArray0[1] = 't'; [EOL]       charArray0[2] = '{'; [EOL]       String string4 = StringUtils.join(charArray0, 't'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'"); [EOL]        [EOL]       String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) ":;6z", (CharSequence) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.namingPattern("%?Jb{AE5_Own?9f"); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       MockThread mockThread0 = new MockThread("%?Jb{AE5_Own?9f"); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         basicThreadFactory0.newThread(mockThread0); [EOL]         fail("Expecting exception: UnknownFormatConversionException"); [EOL]        [EOL]       } catch(UnknownFormatConversionException e) { [EOL]          // [EOL]          // Conversion = '?' [EOL]          // [EOL]          verifyException("java.util.Formatter", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-5013.893423183)); [EOL]       long long0 = fraction0.longValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Class<Long> class0 = Long.class; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveStart()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("6n(.8{1r7", ", Length: 0"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha("6n(.8{1r7"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "6n(.8{1r7", (CharSequence) "6n(.8{1r7"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", "U4v=EwB5e'.{:hed"); [EOL]        [EOL]       String string1 = StringUtils.removeStartIgnoreCase((String) null, ";fN3eIB!Y<[m"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[2] = 'B'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('H'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]       assertTrue(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertTrue(strBuilder2.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNewLine(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.equals((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder3.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       charArray0[0] = ':'; [EOL]       String string0 = strBuilder0.substring(0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       charArray0[1] = ')'; [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder3.equals((Object)strBuilder1)); [EOL]        [EOL]       int int2 = strBuilder2.indexOf("=.j", 1810); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder1)); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.appendNull(); [EOL]       assertFalse(strBuilder0.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder3)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder0)); [EOL]       assertFalse(strBuilder1.equals((Object)strBuilder2)); [EOL]       assertFalse(strBuilder4.equals((Object)strBuilder1)); [EOL]       assertFalse(strBuilder2.equals((Object)strBuilder1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       int int1 = 0; [EOL]       boolean boolean0 = false; [EOL]       boolean boolean1 = true; [EOL]       char[] charArray0 = new char[0]; [EOL]       MockRandom mockRandom0 = new MockRandom(0); [EOL]       mockRandom0.nextLong(); [EOL]       mockRandom0.doubles(); [EOL]       mockRandom0.nextBoolean(); [EOL]       mockRandom0.setSeed(0L); [EOL]       mockRandom0.longs((long) 0); [EOL]       mockRandom0.nextBoolean(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random(732, 0, 0, false, true, charArray0, (Random) mockRandom0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The chars array must not be empty [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.RandomStringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteWhitespace()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 7); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0Nn2%azF )g$yM<;c"); [EOL]        [EOL]       String string0 = StringUtils.replaceChars("w", 'w', 'w'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "w", "w"); [EOL]        [EOL]       String string1 = StringUtils.deleteWhitespace("wz6d7vzJ$Nu"); [EOL]        [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)837; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)1628; [EOL]       shortArray0[3] = (short)4517; [EOL]       shortArray0[4] = (short) (-1910); [EOL]       shortArray0[5] = (short)1625; [EOL]       shortArray0[6] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'b'); [EOL]        [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1910); [EOL]       floatArray0[1] = (float) (short)0; [EOL]       floatArray0[2] = (float) 'w'; [EOL]       String string3 = StringUtils.join(floatArray0, 't'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-730)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText(""); [EOL]        [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.deleteAll("pD;m\"Wg[Mj"); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteFirst((StrMatcher) strMatcher_StringMatcher0); [EOL]        [EOL]       String string0 = strBuilder0.getNullText(); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]        [EOL]       String string1 = strBuilder3.leftString(32); [EOL]        [EOL]       String string2 = "J%?^k/q>-%"; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("J%?^k/q>-%"); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '&'; [EOL]       charArray0[1] = '\''; [EOL]       int int1 = 31; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(9, charArray0, 31, (-730)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 9 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(class0).when(parameterizedType0).getRawType(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         TypeUtils.determineTypeArguments((Class<?>) null, parameterizedType0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.TypeUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = 878; [EOL]       String[] stringArray0 = new String[14]; [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) intArray0[0], (Object) intArray0[2], stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testright()  throws Throwable  { [EOL]       String string0 = StringUtils.upperCase(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", (-23)); [EOL]        [EOL]       String string1 = StringUtils.center(".TI')KKZB5J(CBBLH", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".TI')KKZB5J(CBBLH"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       int int1 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13); [EOL]        [EOL]       String string3 = StringUtils.right("", 0); [EOL]        [EOL]       String string4 = StringUtils.repeat(".TI')KKZB5J(CBBLH", 13); [EOL]        [EOL]       String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils"); [EOL]        [EOL]       String string6 = StringUtils.lowerCase("s"); [EOL]        [EOL]       String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0); [EOL]        [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ".TI')KKZB5J(CBBLH"; [EOL]       stringArray0[1] = "s"; [EOL]       stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils"; [EOL]       stringArray0[3] = "s"; [EOL]       stringArray0[4] = "s"; [EOL]       stringArray0[5] = "{}"; [EOL]       stringArray0[6] = "{}"; [EOL]       stringArray0[7] = ""; [EOL]       stringArray0[8] = ".TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH"; [EOL]       String string8 = StringUtils.getCommonPrefix(stringArray0); [EOL]        [EOL]       String string9 = StringUtils.prependIfMissingIgnoreCase("n\"~!:", ".TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH.TI')KKZB5J(CBBLH", charSequenceArray0); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) ".TI')KKZB5J(CBBLH", (CharSequence) "{}"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '\\'; [EOL]       charArray0[1] = '2'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-620)); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(1L); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.markSupported(); [EOL]        [EOL]       TreeSet<Object> treeSet0 = new TreeSet<Object>(); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       Iterator<Object> iterator0 = treeSet0.descendingIterator(); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendAll(iterator0); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       boolean boolean1 = strBuilder2.equals((Object) null); [EOL]       assertFalse(treeSet0.contains((-620))); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteAll('J'); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.append(1L); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder5); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("?NYmW7afS>c]@v"); [EOL]        [EOL]       boolean boolean2 = strBuilder5.isEmpty(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.deleteFirst('\\'); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendWithSeparators(iterator0, "u"); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(strBuilder2); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.append(1.0F); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.append(stringBuffer0); [EOL]       assertFalse(treeSet0.contains('J')); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.subSequence((-900), (-620)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -900 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoMap()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       Short[] shortArray1 = ArrayUtils.toObject(shortArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ArrayUtils.toMap(shortArray1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Array element 0, '0', is neither of type Map.Entry nor an Array [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.ArrayUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreateLong()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         NumberUtils.createLong("A blank string is not a valid number"); [EOL]         fail("Expecting exception: NumberFormatException"); [EOL]        [EOL]       } catch(NumberFormatException e) { [EOL]          // [EOL]          // For input string: \"A blank string is not a valid number\" [EOL]          // [EOL]          verifyException("java.lang.NumberFormatException", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1072, "(p{IsNd}++)"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(1, 1, (TimeZone) simpleTimeZone0); [EOL]       StringWriter stringWriter0 = new StringWriter(1072); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       fastDateFormat0.format((long) 1, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp("a2j]Xi`@l3"); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("g!8n`\u00059'AOnU9"); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'y'; [EOL]       charArray0[1] = '1'; [EOL]       charArray0[2] = '.'; [EOL]       charArray0[3] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "g!8n`\u00059'AOnU9", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("ANC_ZRi_!G%*zb*}00[", "g!8n`\u00059'AOnU9", "Ra9BG/6$[B"); [EOL]        [EOL]       String string2 = StringUtils.replace("g!8n`\u00059'AOnU9", "g!8n`\u00059'AOnU9", "a?qyUXiDPS[", 8192); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean3 = arrayList0.add((Object) ""); [EOL]        [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string2 = StringUtils.join(doubleArray0, '}'); [EOL]        [EOL]       String string3 = StringUtils.center("", 0); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, '}'); [EOL]        [EOL]       boolean boolean6 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.substring("0.0", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean7 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       String string8 = StringUtils.leftPad("", (int) '}'); [EOL]        [EOL]       boolean boolean8 = StringUtils.isAllUpperCase("0.0"); [EOL]        [EOL]       boolean boolean9 = StringUtils.equalsIgnoreCase(stringBuffer0, (CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("}Ip)EDx!E"); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]       assertEquals(41, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.clear(); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]       assertEquals(41, strBuilder1.capacity()); [EOL]       assertEquals(41, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendNull(); [EOL]       assertEquals(41, strBuilder0.capacity()); [EOL]       assertEquals(41, strBuilder3.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.insert((-1874), (Object) null); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1874 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");6z", string4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDateTimeInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.format((Calendar) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprocessBitVectors()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         EnumUtils.processBitVectors(class0, (long[]) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // The validated object is null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       String string0 = strSubstitutor0.replace(strBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("java.library.path"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd'); [EOL]        [EOL]       int int0 = strBuilder0.indexOf('d'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd'); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'd'; [EOL]       charArray0[1] = '%'; [EOL]       IntStream intStream0 = strBuilder2.chars(); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]        [EOL]       charArray0[2] = 'd'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'd'; [EOL]       char[] charArray1 = strBuilder3.getChars(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5); [EOL]        [EOL]       IntStream intStream1 = strBuilder6.chars(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44)); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.setLength(18); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("*ShW|.PlM@"); [EOL]        [EOL]       String string0 = strBuilder0.leftString(Integer.MAX_VALUE); [EOL]        [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) "*ShW|.PlM@"; [EOL]       StrBuilder strBuilder1 = strBuilder0.append("*ShW|.PlM@", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       String string0 = StringUtils.capitalize(""); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]       assertEquals(5, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefixMatcher(strMatcher0); [EOL]       strSubstitutor1.setEnableSubstitutionInVariables(true); [EOL]       strSubstitutor0.replace("Variable prefix matcher must not be null!"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetChars()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'T'; [EOL]       charArray0[1] = '_'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.getChars(0, 546, charArray0, 546); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 546 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]        [EOL]       standardToStringStyle0.setArrayEnd(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripAll()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       // Undeclared exception! [EOL]       StringUtils.rightPad("Minimum abbreviation width with offset is 7", 32767, "=~%A6;?UjK"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       Short[] shortArray1 = ArrayUtils.toObject(shortArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ArrayUtils.toMap(shortArray1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Array element 0, '0', is neither of type Map.Entry nor an Array [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.ArrayUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       char[] charArray0 = new char[1]; [EOL]       strBuilder_StrBuilderReader0.read(charArray0); [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       strBuilder_StrBuilderReader0.ready(); [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer.allocate(0); [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]       strBuilder4.leftString(1); [EOL]       strBuilder3.size(); [EOL]       strBuilder3.appendln(true); [EOL]       strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]       Locale locale0 = Locale.CANADA; [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       strBuilder4.appendAll((Iterable<?>) set0); [EOL]       strBuilder1.reverse(); [EOL]       strBuilder4.append((long) 81); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       String string0 = strSubstitutor0.replace((CharSequence) ""); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAllUpperCase()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (int) '{', 0); [EOL]        [EOL]       int int1 = StringUtils.ordinalIndexOf("Nt{2P6~Pso'", (CharSequence) null, 0); [EOL]        [EOL]       int int2 = StringUtils.indexOfAny((CharSequence) "Nt{2P6~Pso'", "Supplied value must be a valid byte literal between -32768 and 32767: ["); [EOL]        [EOL]       String string4 = StringUtils.rightPad("Z<", (-1), '{'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartTimer()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.MINUTES; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(114L, timeUnit0, 1); [EOL]       timedSemaphore0.shutdown(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         timedSemaphore0.startTimer(); [EOL]         fail("Expecting exception: RejectedExecutionException"); [EOL]        [EOL]       } catch(RejectedExecutionException e) { [EOL]          // [EOL]          // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@4f3bb10d rejected from java.util.concurrent.ScheduledThreadPoolExecutor@70b8275c[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] [EOL]          // [EOL]          verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeEndText(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.setFieldSeparator("g>s"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringTrueFalse(false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddYears()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(362L); [EOL]       Date date0 = DateUtils.addYears(mockDate0, 4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder1); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       Writer writer0 = strBuilder0.asWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder1, 3005, 115); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null); [EOL]        [EOL]       String string1 = strBuilder4.rightString(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.add((-1L)); [EOL]       MutableLong mutableLong1 = new MutableLong("0"); [EOL]       boolean boolean0 = mutableLong0.equals(mutableLong1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFixedWidthPadLeft()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1'); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append(0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null); [EOL]        [EOL]       String string1 = strBuilder4.rightString(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(mockSimpleDateFormat0, mockSimpleDateFormat0); [EOL]       try {  [EOL]         compositeFormat0.reformat(""); [EOL]         fail("Expecting exception: ParseException"); [EOL]        [EOL]       } catch(ParseException e) { [EOL]          // [EOL]          // Format.parseObject(String) failed [EOL]          // [EOL]          verifyException("java.text.Format", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsNone()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToEmpty("/>.W_>OH(v"); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("/>.W_>OH(v", "/>.W_>OH(v"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNumeric("/>.W_>OH(v"); [EOL]        [EOL]       boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) "/>.W_>OH(v", "/>.W_>OH(v"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 448); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "/>.W_>OH(v", 16); [EOL]        [EOL]       String string2 = StringUtils.rightPad("hjTX0JT.]kFcpFD?ys!", 0, '2'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll((String[]) null, "/>.W_>OH(v"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "/>.W_>OH(v"); [EOL]        [EOL]       String string3 = StringUtils.substringBefore((String) null, (String) null); [EOL]        [EOL]       String string4 = StringUtils.mid("Threshold must not be negative", (-1), 448); [EOL]        [EOL]       String string5 = "\\u0"; [EOL]       Locale locale0 = new Locale("hjTX0JT.]kFcpFD?ys!"); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       String string6 = locale0.getDisplayCountry(); [EOL]        [EOL]       String string7 = StringUtils.lowerCase(string5, locale0); [EOL]        [EOL]       String string8 = StringUtils.repeat(' ', 0); [EOL]        [EOL]       int int2 = StringUtils.countMatches("", (CharSequence) null); [EOL]        [EOL]       String string9 = StringUtils.substring((String) null, 0); [EOL]        [EOL]       String string10 = StringUtils.chomp("JWIPE@-hNPn{!:Qj!~M"); [EOL]        [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte) (-128); [EOL]       String string11 = StringUtils.join(byteArray0, 'i'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdefaultString()  throws Throwable  { [EOL]       String string0 = StringUtils.left("F*ih6'Wv@Hv&-.Ni:q", (-2178)); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("", "F*ih6'Wv@Hv&-.Ni:q"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace((CharSequence) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, ""); [EOL]        [EOL]       String string1 = StringUtils.stripStart("", (String) null); [EOL]        [EOL]       int int0 = StringUtils.countMatches((CharSequence) null, ""); [EOL]        [EOL]       String string2 = StringUtils.stripToNull(""); [EOL]        [EOL]       String string3 = StringUtils.defaultString("", (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       LinkedHashSet<SQLNonTransientException> linkedHashSet0 = new LinkedHashSet<SQLNonTransientException>(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.validIndex(linkedHashSet0, 0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // The validated collection index is invalid: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidateRange()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3235); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 656); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-495), (-495)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -495 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("T"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "T", 0); [EOL]        [EOL]       boolean boolean3 = StringUtils.containsNone((CharSequence) "T", "{FakYXNQUOHZ"); [EOL]        [EOL]       boolean boolean4 = StringUtils.contains((CharSequence) "", 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("", 3214, '\''); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) string0, 4); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(" in an array of ", "3U", 1366); [EOL]        [EOL]       String string1 = StringUtils.overlay("", " in an array of ", 0, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank(" in an array of "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 34, 34, (-1)); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 34 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrMatcher$CharSetMatcher", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(""); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.insert(0, false); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = ':'; [EOL]       charArray0[1] = '.'; [EOL]       charArray0[2] = 'f'; [EOL]       charArray0[3] = '#'; [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, charArray0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuilder4, 0, 326); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = (-4136); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-4136)); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       int int1 = strBuilder0.indexOf((StrMatcher) strMatcher_NoMatcher0, (-4136)); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((Object) "_D]5>#kw<b6p@SuO"); [EOL]        [EOL]       Writer writer0 = strBuilder1.asWriter(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceAll("", ""); [EOL]        [EOL]       String string0 = strBuilder2.midString((-4136), (-4136)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(true); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.substring((-730), 938); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -730 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwriteDeclaredStaticField()  throws Throwable  { [EOL]       Class<Field> class0 = Field.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FieldUtils.writeDeclaredStaticField((Class<?>) class0, "", (Object) "", true); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Cannot locate declared field java.lang.reflect.Field. [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.FieldUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName((Object) null, (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       String string0 = "K6f"; [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.delete(0, 0); [EOL]        [EOL]       String string1 = "]*qbQ%"; [EOL]       StrBuilder strBuilder2 = strBuilder1.setNewLineText("]*qbQ%"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln(strBuilder0); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendAll(iterator0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.appendSeparator("]*qbQ%", (-1079)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendln('\''); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.append(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder0, (-286), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringAfter()  throws Throwable  { [EOL]       StringUtils.chop("u?7yJe4Zo*z"); [EOL]       StringUtils.indexOfAnyBut((CharSequence) "u?7yJe4Zo*", (CharSequence) "u?7yJe4Zo*z"); [EOL]       StringUtils.substringAfterLast("u?7yJe4Zo*z", "u?7yJe4Zo*"); [EOL]       char char0 = '?'; [EOL]       StringUtils.reverseDelimited("u?7yJe4Zo*", '?'); [EOL]       StringUtils.endsWith("7yJe4Zo*?u", "z"); [EOL]       StringUtils.isAlphanumericSpace("7yJe4Zo*?u"); [EOL]       StringUtils.isBlank("u?7yJe4Zo*"); [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) "7yJe4Zo*?u"; [EOL]       objectArray0[1] = (Object) "7yJe4Zo*?u"; [EOL]       objectArray0[2] = (Object) "7yJe4Zo*?u"; [EOL]       StringUtils.join(objectArray0, 'Y'); [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'Y'; [EOL]       charArray0[1] = 'Y'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(charArray0, 'F', 32, 256); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[1]; [EOL]       Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(785); [EOL]       int int0 = bitField0.getRawValue(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(3235); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4'; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 656); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-495), (-495)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -495 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       compareToBuilder0.append(0L, (-317L)); [EOL]       Object object0 = new Object(); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append((Object) "1&n", object0, (Comparator<?>) comparator0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer(895); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(integer0, toStringStyle0, stringBuffer0, (Class<? super Integer>) class0, true, true); [EOL]       boolean boolean0 = reflectionToStringBuilder0.isAppendTransients(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = ""; [EOL]       String string3 = StringUtils.leftPad((String) null, 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) null, 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap((CharSequence) null, (-1520), 4452); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.StringCharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetAverageCallsPerPeriod()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(2677L, timeUnit0, 2907); [EOL]       timedSemaphore0.setLimit((-840)); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.setLimit(2907); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.getPeriod(); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.getAcquireCount(); [EOL]       timedSemaphore0.getPeriod(); [EOL]       timedSemaphore0.getAverageCallsPerPeriod(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       JavaUnicodeEscaper javaUnicodeEscaper0 = new JavaUnicodeEscaper(57, 0, true); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         javaUnicodeEscaper0.toUtf16Escape(8); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.translate.JavaUnicodeEscaper", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       Boolean boolean0 = Boolean.TRUE; [EOL]       standardToStringStyle0.isFullDetail(boolean0); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder1 = new StrBuilder(0); [EOL]       assertTrue(strBuilder1.equals((Object)strBuilder0)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.setCharAt(0, 'Y'); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(""); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.insert(0, false); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = ':'; [EOL]       charArray0[1] = '.'; [EOL]       charArray0[2] = 'f'; [EOL]       charArray0[3] = '#'; [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, charArray0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.appendCodePoint(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuilder4, 0, 326); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       int int0 = (-1498); [EOL]       StrBuilder strBuilder0 = new StrBuilder((-1498)); [EOL]        [EOL]       char char0 = 'Y'; [EOL]       StrMatcher strMatcher0 = StrMatcher.commaMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('Y'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("I%EqwV7sG3W", "I%EqwV7sG3W"); [EOL]        [EOL]       int int1 = strBuilder0.lastIndexOf(strMatcher0, 116); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'Y'; [EOL]       int int2 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.validateRange((-738), (-1498)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -738 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(4); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(0); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append((-771.0)); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'k'; [EOL]       charArray0[1] = '$'; [EOL]       charArray0[2] = '?'; [EOL]       charArray0[3] = 'N'; [EOL]       StringBuilder stringBuilder3 = stringBuilder2.append(charArray0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder4); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write("'fe:RqN$"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-1729), (-1729)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.setNewLineText("'fe:RqN$"); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder3.subSequence((-1729), (-3524)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1729 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       short[] shortArray0 = new short[1]; [EOL]       short[] shortArray1 = ArrayUtils.subarray(shortArray0, 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoCharArray()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln('h'); [EOL]        [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteCharAt(0); [EOL]        [EOL]       int int1 = strBuilder3.capacity(); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderTokenizer0.hasPrevious(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.subSequence(44, 6); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 6 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionAppendArrayDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(1107); [EOL]       Integer integer0 = new Integer(1107); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         standardToStringStyle0.NO_FIELD_NAMES_STYLE.reflectionAppendArrayDetail(stringBuffer0, ".Qh<M!QGCW~y~RMx&", integer0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Argument is not an array [EOL]          // [EOL]          verifyException("java.lang.reflect.Array", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveStart()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replaceOnce("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       String string0 = StringUtils.reverseDelimited((String) null, 'K'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]       assertFalse(string2.equals((Object)string1)); [EOL]       assertTrue(string2.equals((Object)string0)); [EOL]        [EOL]       String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]       assertFalse(set0.contains(string0)); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]       assertFalse(set0.contains(string0)); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.FORMAT; [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) locale_Category0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char char0 = '\"'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendPadding(0, '\"'); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '\"'; [EOL]       charArray0[1] = '\"'; [EOL]       charArray0[2] = '\"'; [EOL]       charArray0[3] = '\"'; [EOL]       charArray0[4] = '\"'; [EOL]       charArray0[5] = '\"'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(charArray0, (-2049), 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.chomp((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null); [EOL]        [EOL]       String string2 = StringUtils.trimToNull("82!8rPa!1'CHof?Xqv>"); [EOL]        [EOL]       String string3 = StringUtils.EMPTY; [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = "82!8rPa!1'CHof?Xqv>"; [EOL]       String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0); [EOL]        [EOL]       String string5 = StringUtils.substringBefore("v#nOp!G", ""); [EOL]        [EOL]       String string6 = StringUtils.chop("v#nOp!G"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 307); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "82!8rPa!1'CHof?Xqv>"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) null; [EOL]       charSequenceArray0[4] = (CharSequence) "v#nOp!G"; [EOL]       String string7 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoCharArray()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "nCIF=^XRVL:\t%AH&"); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2); [EOL]        [EOL]       int int0 = strBuilder1.lastIndexOf('^'); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder4.insert((int) '#', false); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '$'; [EOL]       StrBuilder strBuilder10 = strBuilder7.append('^'); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher(']'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]        [EOL]       StrBuilder strBuilder11 = strBuilder3.deleteCharAt(2); [EOL]        [EOL]       StrBuilder strBuilder12 = strBuilder11.replaceFirst((StrMatcher) strMatcher_CharSetMatcher0, "j"); [EOL]        [EOL]       char[] charArray1 = strBuilder7.toCharArray(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 847, '{'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((Object) null); [EOL]        [EOL]       ArrayDeque<StrBuilder> arrayDeque0 = new ArrayDeque<StrBuilder>(847); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendWithSeparators((Iterable<?>) arrayDeque0, ""); [EOL]        [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher(""); [EOL]        [EOL]       int int0 = strBuilder4.lastIndexOf((StrMatcher) strMatcher_StringMatcher0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.charAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       double[] doubleArray0 = new double[4]; [EOL]       double[] doubleArray1 = new double[7]; [EOL]       compareToBuilder0.append(doubleArray0, doubleArray1); [EOL]       compareToBuilder0.appendSuper(0); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'a'; [EOL]       charArray0[1] = 'n'; [EOL]       charArray0[2] = '?'; [EOL]       charArray0[3] = 'K'; [EOL]       charArray0[4] = 'R'; [EOL]       charArray0[5] = 'A'; [EOL]       charArray0[6] = 'E'; [EOL]       MockRandom mockRandom0 = new MockRandom(); [EOL]       RandomStringUtils.random(4185, 0, 4185, true, true, charArray0, (Random) mockRandom0); [EOL]       char[] charArray1 = new char[2]; [EOL]       charArray1[0] = 'E'; [EOL]       charArray1[1] = '-'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random(1, 1, 0, false, true, charArray1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Parameter end (0) must be greater than start (1) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.RandomStringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Integer integer0 = new Integer(3); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null, (String) null, (String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.is((Object) integer0, comparator0); [EOL]       Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator1).compare(anyString() , anyString()); [EOL]       Range<String> range1 = Range.between("$VALUES", "$VALUES", comparator1); [EOL]       Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0, 0).when(comparator2).compare(any() , any()); [EOL]       Range<Object> range2 = Range.between((Object) range0, (Object) range1, comparator2); [EOL]       Range<Object> range3 = range0.intersectionWith(range2); [EOL]       Range<Integer> range4 = Range.is(integer0); [EOL]       boolean boolean0 = range3.equals(range4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       String string0 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string1 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertEquals(3, stringArray0.length); [EOL]       assertEquals(3, stringArray1.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean3 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.increment(); [EOL]       MutableLong mutableLong1 = new MutableLong("0"); [EOL]       boolean boolean0 = mutableLong0.equals(mutableLong1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int[] intArray1 = ArrayUtils.removeElement(intArray0, (int) (byte) (-3)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-484)); [EOL]       ImmutableTriple<Integer, String, Integer> immutableTriple0 = ImmutableTriple.of(integer0, "", integer0); [EOL]       int int0 = immutableTriple0.compareTo((Triple<Integer, String, Integer>) immutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(160, strBuilder0.capacity()); [EOL]       assertEquals(160, strBuilder1.capacity()); [EOL]       assertEquals(160, strBuilder2.capacity()); [EOL]       assertEquals(160, strBuilder3.capacity()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(5644, strBuilder0.capacity()); [EOL]       assertEquals(5644, strBuilder4.capacity()); [EOL]       assertEquals(5644, strBuilder5.capacity()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(11654, strBuilder7.capacity()); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder8.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder9.capacity()); [EOL]       assertEquals(11654, strBuilder1.capacity()); [EOL]       assertEquals(11654, strBuilder2.capacity()); [EOL]       assertEquals(11654, strBuilder3.capacity()); [EOL]       assertEquals(11654, strBuilder6.capacity()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder5.new StrBuilderReader(); [EOL]       assertEquals(11654, strBuilder0.capacity()); [EOL]       assertEquals(11654, strBuilder4.capacity()); [EOL]       assertEquals(11654, strBuilder5.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderReader0.read(charArray0, (-2133), (-915)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveEndIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("x"); [EOL]        [EOL]       String string1 = StringUtils.repeat("", 3082); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[0]; [EOL]       String string2 = StringUtils.prependIfMissingIgnoreCase("x", "", charSequenceArray0); [EOL]        [EOL]       String string3 = "\\u"; [EOL]       String string4 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", string3); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       char char0 = 'Y'; [EOL]       String string5 = StringUtils.join(charArray0, 'Y', 3082, (-784)); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", charArray0); [EOL]        [EOL]       int int0 = StringUtils.countMatches(string3, ""); [EOL]        [EOL]       String string6 = StringUtils.defaultIfBlank(string3, " has no clone method"); [EOL]        [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (long) 3082; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(longArray0, 'Y', 3, 3082); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 3 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.get("1.1"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("false"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(strBuilder0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       Integer integer0 = new Integer(10); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append((Object) integer0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'U'; [EOL]       charArray0[1] = 'C'; [EOL]       charArray0[2] = 'r'; [EOL]       charArray0[3] = 'g'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'p'; [EOL]       charArray0[6] = '('; [EOL]       charArray0[7] = 'P'; [EOL]       charArray0[8] = '@'; [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append(charArray0); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(10, (float) 10); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(stringBuilder3, 10, 10); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // length must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 377); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testendsWith()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "^).r{Hua2", (String) null); [EOL]        [EOL]       String string1 = StringUtils.abbreviate((String) null, 125); [EOL]        [EOL]       String string2 = StringUtils.substringBetween((String) null, ", '", (String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.repeat(')', 125); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null); [EOL]        [EOL]       String string5 = StringUtils.center((String) null, 125); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]       charArray0[7] = 'R'; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I["); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.replaceFirst('9', 'R'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       int int0 = strBuilder3.lastIndexOf('>', 228); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlpha()  throws Throwable  { [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = "X69]M!8$l}E@BGv1jB"; [EOL]       stringArray0[5] = ""; [EOL]       String string0 = StringUtils.replaceEach("", stringArray0, stringArray0); [EOL]        [EOL]       String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0); [EOL]        [EOL]       String string2 = StringUtils.substring("jS6+ObwFdd@<v/K", 0); [EOL]        [EOL]       String string3 = StringUtils.rightPad((String) null, 0, 'V'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("X69]M!8$l}E@BGv1jB", ""); [EOL]        [EOL]       String string4 = StringUtils.chomp((String) null, "-!*N;DIA"); [EOL]        [EOL]       String string5 = StringUtils.trim((String) null); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1514); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0); [EOL]        [EOL]       String string6 = StringUtils.substring((String) null, 1514); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       int int2 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha((CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.difference("-!*N;DIA", (String) null);DIA", string7); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace("-!*N;DIA"); [EOL]        [EOL]       String string8 = StringUtils.join((int[]) null, '\''); [EOL]        [EOL]       String string9 = StringUtils.defaultIfBlank("J(k87R7s&`_@", (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsAny()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("VOpJi9rzWU^:QGPk $", "VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       String string0 = StringUtils.lowerCase("VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase("VOpJi9rzWU^:QGPk $", "VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       int int0 = Integer.MAX_VALUE; [EOL]       int int1 = StringUtils.ordinalIndexOf("vopji9rzwu^:qgpk $", "vopji9rzwu^:qgpk $", Integer.MAX_VALUE); [EOL]        [EOL]       String string1 = ""; [EOL]       String string2 = StringUtils.removeEndIgnoreCase("", "VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       String string3 = StringUtils.substringAfterLast("VOpJi9rzWU^:QGPk $", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "vopji9rzwu^:qgpk $", (CharSequence) ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric(""); [EOL]        [EOL]       Vector<Object> vector0 = null; [EOL]       try { [EOL]         vector0 = new Vector<Object>((-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal Capacity: -1 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.center("/`!4nEk/", 64, ':'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       String string1 = StringUtils.substring((String) null, 64); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       charSequenceArray0[1] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::"; [EOL]       charSequenceArray0[2] = (CharSequence) "/`!4nEk/"; [EOL]       charSequenceArray0[3] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::"; [EOL]       charSequenceArray0[4] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::"; [EOL]       charSequenceArray0[5] = (CharSequence) "/`!4nEk/"; [EOL]       charSequenceArray0[6] = (CharSequence) "/`!4nEk/"; [EOL]       charSequenceArray0[7] = (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::"; [EOL]       charSequenceArray0[8] = (CharSequence) "/`!4nEk/"; [EOL]       boolean boolean0 = StringUtils.containsIgnoreCase(":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::", charSequenceArray0[7]); [EOL]        [EOL]       int int0 = StringUtils.indexOf(charSequenceArray0[5], 108); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::", (CharSequence) ":::::::::::::::::::::::::::/`!4nEk/::::::::::::::::::::::::::::"); [EOL]        [EOL]       String string2 = StringUtils.substringAfter((String) null, (String) null); [EOL]        [EOL]       String string3 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       String string4 = "\\u"; [EOL]       int int2 = StringUtils.indexOfAny(charSequenceArray0[0], string4); [EOL]        [EOL]       int int3 = StringUtils.indexOf(charSequenceArray0[1], charSequenceArray0[3], (-1)); [EOL]        [EOL]       int[] intArray0 = new int[7]; [EOL]       intArray0[0] = 0; [EOL]       intArray0[1] = (int) ':'; [EOL]       intArray0[2] = (-1); [EOL]       intArray0[3] = (-1); [EOL]       intArray0[4] = 32; [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable((CharSequence) null); [EOL]        [EOL]       String string5 = StringUtils.deleteWhitespace((String) null); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = ':'; [EOL]       charArray0[1] = ':'; [EOL]       boolean boolean2 = StringUtils.containsAny(charSequenceArray0[3], charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.remove((String) null, 'Y'); [EOL]        [EOL]       String string1 = StringUtils.removeStartIgnoreCase((String) null, "', is neither of type Map.Entry nor an Array"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("^d%8'te3y", 0); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'b'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "^d%8'te3y", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.lowerCase(""); [EOL]        [EOL]       String string2 = StringUtils.rightPad("", 0, ""); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string3 = StringUtils.replace("", "38=.b3p;aJ(sIMg", "", 1969); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(256); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(strMatcher0, ""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln("HDK1o:4z@EGXArn*_"); [EOL]        [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(strBuilder3, (-2074), (-2074)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.rightString(2822); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder4; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       Locale locale0 = Locale.JAPAN; [EOL]       timeZone0.getDisplayName(locale0); [EOL]       timeZone0.observesDaylightTime(); [EOL]       DurationFormatUtils.formatPeriod(3391L, 3391L, "", false, timeZone0); [EOL]       timeZone0.getDisplayName(false, 0); [EOL]       timeZone0.getDisplayName(); [EOL]       timeZone0.observesDaylightTime(); [EOL]       DurationFormatUtils.formatPeriod((-531L), (-531L), "oEedrL[OTv3s"); [EOL]       DurationFormatUtils.formatDurationWords((-531L), false, false); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(timeZone0, 0); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.formatDuration(0L, "0java.lang.StringBuilder@00000000150java.lang.StringBuilder@00000000160java.lang.StringBuilder@00000000170java.lang.StringBuilder@0000000018", false); [EOL]       DurationFormatUtils.formatPeriod((-2003L), 535L, ""); [EOL]       DurationFormatUtils.lexx("sun.util.calendar.ZoneInfo@0000000020sun.util.calendar.ZoneInfo@0000000020"); [EOL]       DurationFormatUtils.formatPeriodISO(60000L, 0L); [EOL]       DurationFormatUtils.formatDurationHMS(0); [EOL]       DurationFormatUtils.formatDurationISO((-5339L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       charRange0.hashCode(); [EOL]       assertEquals('#', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       assertTrue(equalsBuilder0.build()); [EOL]        [EOL]       long[] longArray0 = new long[6]; [EOL]       longArray0[0] = (-501L); [EOL]       longArray0[1] = (-1500L); [EOL]       longArray0[2] = 1L; [EOL]       longArray0[3] = 4647091106607819706L; [EOL]       longArray0[4] = 4634837335261839360L; [EOL]       longArray0[5] = 4573L; [EOL]       long[] longArray1 = new long[6]; [EOL]       longArray1[0] = 4573L; [EOL]       longArray1[1] = 4634837335261839360L; [EOL]       longArray1[2] = (-501L); [EOL]       longArray1[3] = 1L; [EOL]       longArray1[4] = (-501L); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (-501L), (float) (-501L)); [EOL]       float[] floatArray0 = new float[8]; [EOL]       floatArray0[0] = (-772.5231F); [EOL]       floatArray0[1] = (float) 4634837335261839360L; [EOL]       floatArray0[2] = (float) (-1500L); [EOL]       floatArray0[3] = (float) 1L; [EOL]       floatArray0[4] = 0.0F; [EOL]       floatArray0[5] = (float) 4634837335261839360L; [EOL]       floatArray0[6] = (float) 4647091106607819706L; [EOL]       floatArray0[7] = (float) (-501L); [EOL]       equalsBuilder2.append(floatArray0, floatArray0); [EOL]       assertFalse(equalsBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(); [EOL]       boolean boolean0 = strTokenizer0.isIgnoreEmptyTokens(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       strSubstitutor0.replace((StrBuilder) null); [EOL]       assertEquals('k', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.append('`'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'R'; [EOL]       boolean boolean0 = ArrayUtils.contains(charArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlphanumericSpace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string3 = StringUtils.replacePattern("", "", ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String string4 = StringUtils.deleteWhitespace("null comparator"); [EOL]        [EOL]       String string5 = StringUtils.getCommonPrefix((String[]) null); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAlphanumericSpace(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       boolean boolean0 = mutableLong0.equals(mutableLong0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlookup()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       hashMap0.put("", ""); [EOL]       String string0 = strLookup0.lookup(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("OMp</~5SIb#[E"); [EOL]        [EOL]       int int0 = 540; [EOL]       StrBuilder strBuilder1 = new StrBuilder(540); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(strBuilder1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) "OMp</~5SIb#[E"; [EOL]       objectArray0[1] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendWithSeparators(objectArray0, "OMp</~5SIb#[E"); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder4 = strBuilder2.deleteFirst(""); [EOL]        [EOL]       int int1 = (-2905); [EOL]       StrBuilder strBuilder5 = strBuilder1.deleteAll("OMp</~5SIb#[E"); [EOL]        [EOL]       int int2 = (-867); [EOL]       StrBuilder strBuilder6 = strBuilder1.appendFixedWidthPadRight((-2905), (-867), 'i'); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("OMp</~5SIb#[E"); [EOL]        [EOL]       String string1 = strBuilder6.getNewLineText(); [EOL]        [EOL]       String string2 = null; [EOL]       StringBuffer stringBuffer0 = null; [EOL]       try { [EOL]         stringBuffer0 = new StringBuffer((String) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1935.9095027)); [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(221, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('a'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       Reader reader0 = strBuilder0.asReader(); [EOL]       assertTrue(reader0.markSupported()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(115); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf((StrMatcher) null); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.subSequence(57, 117); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 117 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       String string0 = (String)DurationFormatUtils.d; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d", 1436); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 1436); [EOL]       DurationFormatUtils.formatPeriod((-3061L), (long) 1436, "^ipX1?>Wx8HIlS0?"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("', has a length less than 2", 'E', 'E'); [EOL]       assertEquals("', has a length less than 2", string0); [EOL]        [EOL]       String string1 = StringUtils.replace("', has a length less than 2", "', has a length less than 2", "', has a length less than 2"); [EOL]       assertEquals("', has a length less than 2", string1); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumericSpace("', has a length less than 2"); [EOL]        [EOL]       String string2 = StringUtils.difference("', has a length less than 2", "', has a length less than 2"); [EOL]        [EOL]       String string3 = "', has a length less than 2"; [EOL]       String string4 = StringUtils.removeStart("", "', has a length less than 2"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "', has a length less than 2", (CharSequence) "', has a length less than 2"); [EOL]        [EOL]       String string5 = StringUtils.substringAfterLast("', has a length less than 2", "', has a length less than 2"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("', has a length less than 2"); [EOL]        [EOL]       int int1 = (-76); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("x", (-76), (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrightPad()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split((String) null, 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.repeat("", (-240)); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'e'; [EOL]       charArray0[1] = 'e'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-700); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdecrement()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.decrement(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.noneMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = 'B'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: "); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf(strMatcher0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith(""); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(true); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.deleteCharAt((-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("$W8BC)fVnoVM,sZ]"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendNullText(stringBuffer0, "hJd3~IkyQU3Lzn0Z^Hs"); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfDifference()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[9]; [EOL]       ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955); [EOL]        [EOL]       String string0 = StringUtils.join((Iterable<?>) arrayList0, '5'); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.mid("", 955, 3); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       String string2 = StringUtils.upperCase(""); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       String string3 = StringUtils.removeStartIgnoreCase("\r", ""); [EOL]        [EOL]       charSequenceArray0[3] = (CharSequence) "\r"; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) charBuffer0; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]); [EOL]        [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[0] = (long) 3; [EOL]       longArray0[1] = 2587L; [EOL]       longArray0[2] = (long) 3; [EOL]       longArray0[3] = (long) 955; [EOL]       longArray0[4] = (long) 955; [EOL]       longArray0[5] = (long) 3; [EOL]       longArray0[6] = (-1L); [EOL]       String string4 = StringUtils.join(longArray0, '5', 8192, (-1515)); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string5 = StringUtils.chomp("\"N;ix%MK");ix%MK", string5); [EOL]        [EOL]       charSequenceArray0[7] = (CharSequence) "\"N;ix%MK"; [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = (float) 8192; [EOL]       floatArray0[1] = (float) 3L; [EOL]       String string6 = StringUtils.join(floatArray0, 'L', 32, 16); [EOL]        [EOL]       charSequenceArray0[8] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String string0 = StringUtils.strip(""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, 48); [EOL]        [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byteArray0[0] = (byte) (-3); [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)89; [EOL]       byteArray0[4] = (byte) (-85); [EOL]       byteArray0[5] = (byte) (-17); [EOL]       byteArray0[6] = (byte)26; [EOL]       byteArray0[7] = (byte)2; [EOL]       byteArray0[8] = (byte) (-3); [EOL]       String string1 = StringUtils.join(byteArray0, 'u', 48, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ';'); [EOL]        [EOL]       String string2 = StringUtils.replacePattern("", "}2NKtV<0;W;H!b/jjV", ""); [EOL]        [EOL]       String string3 = StringUtils.chomp(""); [EOL]        [EOL]       Locale locale0 = new Locale("", "Cannot store "); [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandomAscii()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.randomAscii(57343); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]       assertEquals(3, stringArray0.length); [EOL]       assertEquals(3, stringArray1.length); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       boolean boolean5 = StringUtils.equals(charSequenceArray0[1], (CharSequence) ""); [EOL]       assertEquals(8, charSequenceArray0.length); [EOL]        [EOL]       String string4 = StringUtils.stripAccents(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisWhitespace()  throws Throwable  { [EOL]       char char0 = ']'; [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n", ']'); [EOL]        [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (-1L); [EOL]       String string0 = StringUtils.join(longArray0, ']'); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       int int0 = 105; [EOL]       String string1 = StringUtils.join(charArray0, ']', 105, 105); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumeric("\n"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("\n"); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)64; [EOL]       byte byte0 = (byte) (-125); [EOL]       byteArray0[1] = (byte) (-125); [EOL]       byte byte1 = (byte) (-124); [EOL]       byteArray0[2] = (byte) (-124); [EOL]       byteArray0[3] = (byte) (-80); [EOL]       try {  [EOL]         StringUtils.toString(byteArray0, "Y|`SkG*M"); [EOL]         fail("Expecting exception: UnsupportedEncodingException"); [EOL]        [EOL]       } catch(UnsupportedEncodingException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetUserDir()  throws Throwable  { [EOL]       EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/sepehr/d4j-test-generation/Lang1b"); [EOL]       FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false); [EOL]       File file0 = SystemUtils.getUserDir(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripEnd()  throws Throwable  { [EOL]       String string0 = StringUtils.removePattern("m%I&V4M", "org.apache.commons.lang3.CharUtils"); [EOL]        [EOL]       String string1 = StringUtils.chomp("m%I&V4M", "m%I&V4M"); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("", "fOXsK42LD`NC@(D>vyX"); [EOL]        [EOL]       String string3 = StringUtils.join((short[]) null, 'I'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(""); [EOL]        [EOL]       int int0 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "m%I&V4M"); [EOL]        [EOL]       Locale locale0 = Locale.CHINESE; [EOL]        [EOL]       String string4 = StringUtils.lowerCase("", locale0); [EOL]        [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "", (-3190)); [EOL]        [EOL]       String string5 = StringUtils.stripEnd("", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsIgnoreCase("", ""); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'I'; [EOL]       charArray0[1] = 'I'; [EOL]       charArray0[2] = 'I'; [EOL]       charArray0[3] = 'I'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CharBuffer.wrap(charArray0, (-1), (-3190)); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.nio.CharBuffer", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         standardToStringStyle0.appendSummary((StringBuffer) null, "Gh04/cTDR=<C!`8o", (char[]) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.ToStringStyle", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutablePair<String, Object> mutablePair0 = new MutablePair<String, Object>(); [EOL]       Object object0 = new Object(); [EOL]       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>(mutablePair0, object0); [EOL]       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry1 = new AbstractMap.SimpleEntry<Object, Object>(mutablePair0); [EOL]       MutablePair<AbstractMap.SimpleEntry<Object, Object>, String> mutablePair1 = new MutablePair<AbstractMap.SimpleEntry<Object, Object>, String>(abstractMap_SimpleEntry1, "["); [EOL]       boolean boolean0 = mutablePair1.equals(abstractMap_SimpleEntry0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(4246.6, 0.0); [EOL]       compareToBuilder1.append(474.6547F, 474.6547F); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("'/sj", (String) null, (String) null, 16); [EOL]        [EOL]       String string1 = StringUtils.overlay("'/sj", (String) null, 16, 0); [EOL]        [EOL]       String string2 = StringUtils.trimToNull(""); [EOL]        [EOL]       String string3 = StringUtils.defaultString("Ga\"k:iU:"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) ""); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       String string4 = StringUtils.repeat(" vs ", 16); [EOL]        [EOL]       String string5 = StringUtils.replaceOnce(":z4/I#", "'/sj", "+e.9:pV6W"); [EOL]        [EOL]       String string6 = StringUtils.leftPad((String) null, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterType((String) null); [EOL]        [EOL]       String string7 = StringUtils.substringBetween("Strings must not be null", "I3=", "The Array must not be null"); [EOL]        [EOL]       String string8 = StringUtils.join((Object[]) null, "I3="); [EOL]        [EOL]       int int0 = StringUtils.countMatches("Strings must not be null", "\r"); [EOL]        [EOL]       String string9 = StringUtils.lowerCase("B-|$%k)sj"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsWhitespace("'/sj"); [EOL]        [EOL]       short[] shortArray0 = new short[9]; [EOL]       shortArray0[0] = (short) (-2292); [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)0; [EOL]       shortArray0[3] = (short)16; [EOL]       shortArray0[4] = (short)4; [EOL]       shortArray0[5] = (short) (-713); [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short)2; [EOL]       shortArray0[8] = (short)0; [EOL]       String string10 = StringUtils.join(shortArray0, 'e'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'm'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = 'M'; [EOL]       charArray0[4] = '='; [EOL]       charArray0[5] = '5'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0); [EOL]        [EOL]       String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1); [EOL]        [EOL]       String string2 = StringUtils.LF; [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "\n"; [EOL]       charSequenceArray0[1] = (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[2] = (CharSequence) "\n"; [EOL]       charSequenceArray0[3] = (CharSequence) "Z|&xc}e&+;"; [EOL]       String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3494)); [EOL]        [EOL]       charSequenceArray0[4] = (CharSequence) "', is neither of type Map.Entry nor an Array"; [EOL]       charSequenceArray0[5] = (CharSequence) "\n"; [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "\n", charSequenceArray0); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", charSequenceArray0[5], 3156); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace("\n"); [EOL]        [EOL]       String string4 = StringUtils.replace("=pE~G", "', is neither of type Map.Entry nor an Array", "iFcplQz6", (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       String string0 = StringUtils.defaultString("Vsr!q&]Z0x}ObR(|8eD"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("Vsr!q&]Z0x}ObR(|8eD"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsWhitespace("Vsr!q&]Z0x}ObR(|8eD"); [EOL]        [EOL]       String string1 = StringUtils.center("", 1497, "#(0@F"); [EOL]        [EOL]       String string2 = StringUtils.swapCase("Vsr!q&]Z0x}ObR(|8eD"); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) null, '_'); [EOL]        [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (double) (-1); [EOL]       doubleArray0[1] = 0.0; [EOL]       doubleArray0[2] = (double) (-1); [EOL]       String string4 = StringUtils.join(doubleArray0, 'Y', 1497, (-1)); [EOL]        [EOL]       String string5 = StringUtils.center("Vsr!q&]Z0x}ObR(|8eD", 1881, "Vsr!q&]Z0x}ObR(|8eD"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer0.getActiveExecutor(); [EOL]       Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Object>(callable1, executorService0); [EOL]       callableBackgroundInitializer1.isStarted(); [EOL]       Callable<Callable<Delayed>> callable2 = (Callable<Callable<Delayed>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Delayed>> callableBackgroundInitializer2 = new CallableBackgroundInitializer<Callable<Delayed>>(callable2); [EOL]       ExecutorService executorService1 = callableBackgroundInitializer2.getExternalExecutor(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-1759), (short) (-1759)); [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[2] = false; [EOL]       booleanArray0[1] = false; [EOL]       booleanArray0[2] = false; [EOL]       booleanArray0[3] = false; [EOL]       booleanArray0[4] = false; [EOL]       booleanArray0[6] = false; [EOL]       booleanArray0[7] = true; [EOL]       booleanArray0[8] = false; [EOL]       Object object0 = new Object(); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[2] = "C^F>gFJs/3KDD"; [EOL]       stringArray0[3] = ";J2t!!|]*=k9}"; [EOL]       stringArray0[4] = "7]~L5MTH7v9z+a3"; [EOL]       EqualsBuilder.reflectionEquals((Object) boolean0, object0, false, (Class<?>) class0, stringArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append(booleanArray0, booleanArray0); [EOL]       equalsBuilder2.append(booleanArray0, (boolean[]) null); [EOL]       EqualsBuilder equalsBuilder3 = new EqualsBuilder(); [EOL]       EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) equalsBuilder3, true); [EOL]        [EOL]       EqualsBuilder.reflectionEquals((Object) boolean0, (Object) boolean0, false); [EOL]       Boolean boolean1 = equalsBuilder1.build(); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("@uY"); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]        [EOL]       ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>(); [EOL]       assertEquals(0, arrayDeque0.size()); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J"); [EOL]       assertEquals(1, arrayDeque0.size()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = 'Q'; [EOL]       charArray0[1] = 'E'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '&'; [EOL]       charArray0[4] = 'D'; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       arrayDeque0.addFirst("@uY"); [EOL]       assertEquals(2, arrayDeque0.size()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]       assertEquals(3, strBuilder0.size()); [EOL]        [EOL]       ArrayDeque<String> arrayDeque1 = arrayDeque0.clone(); [EOL]       assertEquals(2, arrayDeque0.size()); [EOL]       assertEquals(2, arrayDeque1.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY"); [EOL]       assertEquals(84, strBuilder0.size()); [EOL]       assertEquals(2, arrayDeque0.size()); [EOL]       assertEquals(2, arrayDeque1.size()); [EOL]       assertEquals(84, strBuilder1.size()); [EOL]        [EOL]       boolean boolean1 = arrayDeque0.removeFirstOccurrence(strBuilder0); [EOL]       assertEquals(84, strBuilder0.size()); [EOL]       assertEquals(2, arrayDeque0.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(0.0); [EOL]       assertEquals(87, strBuilder2.size()); [EOL]       assertEquals(87, strBuilder0.size()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf('c'); [EOL]       assertEquals(87, strBuilder0.size()); [EOL]        [EOL]       int int2 = strBuilder0.lastIndexOf('c'); [EOL]       assertEquals(87, strBuilder0.size()); [EOL]        [EOL]       int int3 = strBuilder1.size(); [EOL]       assertEquals(87, strBuilder0.size()); [EOL]       assertEquals(2, arrayDeque0.size()); [EOL]       assertEquals(2, arrayDeque1.size()); [EOL]       assertEquals(87, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator("2qZ^>Qrw9g\"x/].J"); [EOL]       assertEquals(103, strBuilder0.size()); [EOL]       assertEquals(2, arrayDeque0.size()); [EOL]       assertEquals(103, strBuilder3.size()); [EOL]       assertEquals(2, arrayDeque1.size()); [EOL]       assertEquals(103, strBuilder1.size()); [EOL]        [EOL]       arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J"); [EOL]       assertEquals(3, arrayDeque0.size()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.append(2998); [EOL]       assertEquals(107, strBuilder0.size()); [EOL]       assertEquals(3, arrayDeque0.size()); [EOL]       assertEquals(107, strBuilder4.size()); [EOL]       assertEquals(2, arrayDeque1.size()); [EOL]       assertEquals(107, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.deleteAll(strMatcher0); [EOL]       assertEquals(107, strBuilder0.size()); [EOL]       assertEquals(3, arrayDeque0.size()); [EOL]       assertEquals(107, strBuilder5.size()); [EOL]       assertEquals(2, arrayDeque1.size()); [EOL]       assertEquals(107, strBuilder1.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetExcludeFieldNames()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(toStringStyle0, toStringStyle0); [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = ""; [EOL]       reflectionToStringBuilder0.setExcludeFieldNames(stringArray0); [EOL]       String[] stringArray1 = reflectionToStringBuilder0.getExcludeFieldNames(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisBefore()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-1202)); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-2566)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0); [EOL]       boolean boolean0 = range0.isBefore((Object) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToByte()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Conversion.binaryToByte((boolean[]) null, 2646, (byte) (-116), 5, 1014); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Conversion", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       mutableDouble0.subtract(1574.5204259); [EOL]       float float0 = mutableDouble0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetDelimiterMatcher()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.setQuoteChar('e'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0L); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '5'; [EOL]       charArray0[1] = '^'; [EOL]       charArray0[2] = '['; [EOL]       charArray0[3] = 'B'; [EOL]       charArray0[4] = 'a'; [EOL]       charArray0[5] = 'E'; [EOL]       charArray0[6] = 'x'; [EOL]       charArray0[7] = 'f'; [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(charArray0, 4, 4); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder0.append((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(stringBuilder2); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.replace((StrMatcher) strMatcher_TrimMatcher0, ">sKz5kRWT,j2qId$ ", 114, 0, (-1345)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableObject<String> mutableObject0 = new MutableObject<String>(); [EOL]       MutableObject<Object> mutableObject1 = new MutableObject<Object>(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         mutableObject1.equals(mutableObject0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[2] = '&'; [EOL]       charArray0[3] = '#'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[3]; [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonRequired; [EOL]       numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTION0; [EOL]       charBuffer0.put(4, 'a'); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       int int0 = numericEntityUnescaper0.translate((CharSequence) charBuffer0, 2, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("nFgu8hR=<", strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       assertEquals(1, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(0.0F); [EOL]       mutableFloat0.increment(); [EOL]       mutableFloat0.getValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       int int0 = strBuilder2.capacity(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((char[]) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StrBuilder strBuilder2 = strBuilder1.minimizeCapacity(); [EOL]        [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.setLength(2822); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder4, 0, 2822); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder8.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'E'; [EOL]       charArray0[1] = 'O'; [EOL]       charArray0[2] = '}'; [EOL]       charArray0[3] = 'G'; [EOL]       charArray0[4] = '@'; [EOL]       charArray0[5] = 'z'; [EOL]       charArray0[6] = 'F'; [EOL]       charArray0[7] = ''; [EOL]       charArray0[8] = 'P'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       String string0 = StringUtils.replaceOnce("", "", "o]az=-zkOjZ*SA.49m"); [EOL]        [EOL]       String string1 = StringUtils.capitalize("FI>R"); [EOL]        [EOL]       String string2 = StringUtils.removeStart((String) null, ""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "FI>R", charArray0); [EOL]        [EOL]       String string3 = StringUtils.reverseDelimited("", '2'); [EOL]        [EOL]       String string4 = StringUtils.leftPad("Index: ", 2428); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(""); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testordinalIndexOf()  throws Throwable  { [EOL]       int int0 = StringUtils.ordinalIndexOf((CharSequence) null, (CharSequence) null, (-2586)); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.center("6~L @37EEQ$", (-2586), "The character must not be null"); [EOL]        [EOL]       int int2 = StringUtils.length("6~L @37EEQ$"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "6~L @37EEQ$"; [EOL]       String string1 = StringUtils.appendIfMissingIgnoreCase("6~L @37EEQ$", "6~L @37EEQ$", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(""); [EOL]        [EOL]       boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceFirst("5p&H0$B\".@l3|+@o", ""); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(4); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln(stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumeric()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "^).r{Hua2", (String) null); [EOL]        [EOL]       String string1 = StringUtils.abbreviate((String) null, 125); [EOL]        [EOL]       String string2 = StringUtils.substringBetween((String) null, ", '", (String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.repeat(')', 125); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null); [EOL]        [EOL]       String string5 = StringUtils.center((String) null, 125); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = "org.apache.commons.lang3.text.StrBuilder"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder"); [EOL]       assertEquals(40, strBuilder0.length()); [EOL]        [EOL]       StrBuilder[] strBuilderArray0 = new StrBuilder[0]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0); [EOL]       assertEquals(40, strBuilder0.length()); [EOL]       assertEquals(40, strBuilder1.length()); [EOL]       assertEquals(0, strBuilderArray0.length); [EOL]        [EOL]       char char0 = '2'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator('2'); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder2.length()); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder2.toStringBuilder(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(41, strBuilder2.length()); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]       assertEquals(0, stringBuffer0.length()); [EOL]       assertEquals(41, strBuilder3.length()); [EOL]        [EOL]       strBuilder0.hashCode(); [EOL]       assertEquals(41, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder", (Object[]) strBuilderArray0); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]       assertEquals(82, strBuilder1.length()); [EOL]       assertEquals(82, strBuilder4.length()); [EOL]       assertEquals(0, strBuilderArray0.length); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]        [EOL]       char char1 = ''; [EOL]       int int1 = 0; [EOL]       int int2 = strBuilder1.lastIndexOf('', 0); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]       assertEquals(82, strBuilder1.length()); [EOL]       assertEquals(0, strBuilderArray0.length); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder4.insert(108, (long) 41); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 108 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(false, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, ""); [EOL]       Object object0 = immutablePair0.getLeft(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringTrueFalse((Boolean) null); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-2492)); [EOL]       byte byte0 = bitField0.setByte((byte)33); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       CharRange charRange1 = CharRange.isNot('#'); [EOL]       boolean boolean0 = charRange1.contains(charRange0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrappersToPrimitives()  throws Throwable  { [EOL]       Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2); [EOL]       Class<Double> class0 = Double.TYPE; [EOL]       classArray0[0] = class0; [EOL]       Class<?>[] classArray1 = ClassUtils.wrappersToPrimitives(classArray0); [EOL]        [EOL]       boolean boolean0 = ClassUtils.isAssignable(classArray1, classArray0, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("", 3214, '\''); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) string0, (CharSequence) string0); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) string0, 4); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(" in an array of ", "3U", 1366); [EOL]        [EOL]       String string1 = StringUtils.overlay("", " in an array of ", 0, 0); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank(" in an array of "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('6'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-1580.7)); [EOL]       assertEquals(7, strBuilder0.size()); [EOL]       assertEquals(7, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.append(0L); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]       assertEquals(8, strBuilder1.size()); [EOL]       assertEquals(8, strBuilder2.size()); [EOL]        [EOL]       String string0 = strBuilder0.midString(0, 0); [EOL]       assertEquals(8, strBuilder0.size()); [EOL]        [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(1458, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbyteArrayToInt()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Conversion.byteArrayToInt(byteArray0, 99, 99, 1048, (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // (nBytes-1)*8+dstPos is greather or equal to than 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Conversion", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlphaSpace()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[0] = (byte)1; [EOL]       byteArray0[1] = (byte) (-21); [EOL]       byteArray0[2] = (byte) (-121); [EOL]       byteArray0[3] = (byte)76; [EOL]       String string0 = StringUtils.join(byteArray0, '_'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("\n"); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL]        [EOL]       String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1)); [EOL]        [EOL]       String string5 = StringUtils.right("", (-240)); [EOL]        [EOL]       String string6 = StringUtils.difference((String) null, ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null); [EOL]        [EOL]       String string7 = StringUtils.reverse(" is not in the range '0' - '9'"); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '^'; [EOL]       charArray0[1] = '^'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0); [EOL]        [EOL]       short[] shortArray0 = new short[8]; [EOL]       shortArray0[0] = (short) (-719); [EOL]       shortArray0[1] = (short)2431; [EOL]       shortArray0[2] = (short)336; [EOL]       shortArray0[3] = (short) (-1905); [EOL]       shortArray0[4] = (short)2; [EOL]       shortArray0[5] = (short)16; [EOL]       shortArray0[6] = (short)0; [EOL]       shortArray0[7] = (short) (-2743); [EOL]       String string8 = StringUtils.join(shortArray0, ')'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\u001C'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetUnit()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.HOURS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(1556L, timeUnit0, (-1)); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.getAcquireCount(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.getAcquireCount(); [EOL]       timedSemaphore0.getUnit(); [EOL]       timedSemaphore0.getPeriod(); [EOL]       timedSemaphore0.acquire(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(337); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(337); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       IntStream intStream0 = strBuilder1.chars(); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.append(strBuilder1, 34, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendFieldStart(stringBuffer0, ""); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("(?: s|[s&&[^ ]])s*", 0, 0); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "(?: s|[s&&[^ ]])s*"; [EOL]       charSequenceArray0[1] = (CharSequence) "(?: s|[s&&[^ ]])s*"; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]        [EOL]       String string1 = StringUtils.upperCase((String) null, locale0); [EOL]        [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)4416; [EOL]       shortArray0[1] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'J'); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate((short)0); [EOL]        [EOL]       CharBuffer charBuffer1 = charBuffer0.compact(); [EOL]        [EOL]       CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0); [EOL]        [EOL]       String string3 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       String string4 = StringUtils.join((Object[]) charSequenceArray0, '9'); [EOL]        [EOL]       String string5 = StringUtils.difference("(?: s|[s&&[^ ]])s*", "4416J0"); [EOL]        [EOL]       String string6 = StringUtils.center("4416J0", 13, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("(?: s|[s&&[^ ]])s*", charSequenceArray0); [EOL]        [EOL]       String string7 = StringUtils.uncapitalize("A%"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(575); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln((-1956.771F)); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendFixedWidthPadLeft((-634), Integer.MAX_VALUE, 'P'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]       assertEquals(32, strBuilder3.capacity()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.trim(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]       assertEquals(32, strBuilder5.capacity()); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder6 = strBuilder4.append(6); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder4.capacity()); [EOL]       assertEquals(32, strBuilder6.capacity()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('\u000B'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.getCommonPrefix((String[]) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       String string1 = StringUtils.repeat("hZ'pC", (String) null, 1); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'r'; [EOL]       charArray0[1] = 't'; [EOL]       charArray0[2] = 'u'; [EOL]       charArray0[3] = 'O'; [EOL]       charArray0[4] = '+'; [EOL]       charArray0[5] = '*'; [EOL]       charArray0[6] = 'I'; [EOL]       boolean boolean1 = StringUtils.containsNone((CharSequence) "hZ'pC", charArray0); [EOL]        [EOL]       String string2 = StringUtils.stripToEmpty(""); [EOL]        [EOL]       String string3 = StringUtils.abbreviateMiddle("hZ'pC", "", 1); [EOL]        [EOL]       byte[] byteArray0 = new byte[9]; [EOL]       byteArray0[0] = (byte)1; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte) (-10); [EOL]       byteArray0[3] = (byte) (-127); [EOL]       byteArray0[4] = (byte)93; [EOL]       byteArray0[5] = (byte)52; [EOL]       byteArray0[6] = (byte) (-28); [EOL]       byteArray0[7] = (byte)56; [EOL]       byteArray0[8] = (byte) (-67); [EOL]       String string4 = StringUtils.join(byteArray0, 't'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]       charArray0[7] = 'R'; [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I["); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.replaceFirst('9', 'R'); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder("file.separator"); [EOL]       assertEquals("file.separator", stringBuilder0.toString()); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append((double) 0); [EOL]       assertEquals("file.separator0.0", stringBuilder1.toString()); [EOL]       assertEquals("file.separator0.0", stringBuilder0.toString()); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.append(false); [EOL]       assertEquals("file.separator0.0false", stringBuilder1.toString()); [EOL]       assertEquals("file.separator0.0false", stringBuilder2.toString()); [EOL]       assertEquals("file.separator0.0false", stringBuilder0.toString()); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.appendCodePoint(1932); [EOL]       assertEquals("file.separator0.0false\u078C", stringBuilder1.toString()); [EOL]       assertEquals("file.separator0.0false\u078C", stringBuilder2.toString()); [EOL]       assertEquals("file.separator0.0false\u078C", stringBuilder3.toString()); [EOL]       assertEquals("file.separator0.0false\u078C", stringBuilder0.toString()); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.reverse(); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder1.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder2.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder3.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder4.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder0.toString()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(stringBuilder4); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder1.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder2.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder3.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder4.toString()); [EOL]       assertEquals("\u078Ceslaf0.0rotarapes.elif", stringBuilder0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 'x'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = 'R'; [EOL]       charArray0[3] = '\\'; [EOL]       charArray0[4] = 'o'; [EOL]       charArray0[5] = '/'; [EOL]       charArray0[6] = 'S'; [EOL]       charArray0[7] = 'B'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random(56192, 2076, 56192, true, true, charArray0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDeclaredField()  throws Throwable  { [EOL]       Class<Field> class0 = Field.class; [EOL]       Field field0 = FieldUtils.getDeclaredField(class0, "", false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       String string1 = StringUtils.remove("x", ')'); [EOL]        [EOL]       String string2 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type "); [EOL]        [EOL]       String string3 = StringUtils.stripToNull("ptgNwtnxatzWXwA"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("Cannot clone Cloneable type ", "x", (-32768)); [EOL]        [EOL]       String string4 = StringUtils.removeEnd((String) null, "aEK60VM*X"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("Cannot clone Cloneable type "); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAlphanumericSpace("Cannot clone Cloneable type "); [EOL]        [EOL]       String string5 = StringUtils.substringBeforeLast((String) null, ""); [EOL]        [EOL]       String string6 = StringUtils.rightPad("aEK60VM*X", 25, 'D'); [EOL]        [EOL]       String string7 = StringUtils.abbreviateMiddle("Cannot clone Cloneable type ", "cnC6A#Qa.Kd}", (-32768)); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "Cannot clone Cloneable type ", 7, 19); [EOL]        [EOL]       String string8 = StringUtils.rightPad("x", 174, 'D'); [EOL]        [EOL]       String string9 = StringUtils.substringBetween("ptgNwtnxatzWXwA", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.previousToken(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplacePattern()  throws Throwable  { [EOL]       String string0 = StringUtils.replace((String) null, (String) null, "lP|u?m)YI{V6F9Wy", 8); [EOL]        [EOL]       String string1 = StringUtils.overlay((String) null, "The Character must not be null", 2, 5); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.substringBeforeLast(", Length: ", "Minimum a"); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Minimum a", 2278); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumeric("lP|u?m)YI{V6F9Wy"); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "Minimum a", (-1)); [EOL]        [EOL]       float[] floatArray0 = new float[5]; [EOL]       floatArray0[0] = (float) 2278; [EOL]       floatArray0[1] = (float) 2; [EOL]       floatArray0[2] = (float) (-1); [EOL]       floatArray0[3] = (float) (-1); [EOL]       floatArray0[4] = 0.0F; [EOL]       String string3 = StringUtils.join(floatArray0, '*', 74, 74); [EOL]        [EOL]       String string4 = StringUtils.defaultIfBlank("Minimum a", " nxVUwt{]P)hI'O%T"); [EOL]        [EOL]       String string5 = StringUtils.replacePattern("Minimum a", ",Ih!", " is not in the range '0' - '9'"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlpha((CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-777), 1, (-3251)); [EOL]       Date date0 = DateUtils.addMonths(mockDate0, (-3251)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, ""); [EOL]        [EOL]       String string1 = ""; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.append(stringBuffer0, 3, 0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldSeparatorAtEnd(true); [EOL]       boolean boolean0 = standardToStringStyle0.isFieldSeparatorAtEnd(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ArrayUtils.removeAll((byte[]) null, intArray0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // Index: 0, Length: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.ArrayUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("\"NaI"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Locale locale1 = fastDateParser0.getLocale(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append('d', '`'); [EOL]       long[] longArray0 = new long[2]; [EOL]       compareToBuilder1.append(longArray0, longArray0); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfDifference()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean3 = arrayList0.add((Object) ""); [EOL]        [EOL]       int int1 = 0; [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       char char0 = '}'; [EOL]       String string2 = StringUtils.join(doubleArray0, '}'); [EOL]        [EOL]       String string3 = StringUtils.center("", 0); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, '}'); [EOL]        [EOL]       boolean boolean6 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.join((Iterable<?>) arrayList0, '}'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean7 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join((Iterator<?>) listIterator0, '}'); [EOL]         fail("Expecting exception: ConcurrentModificationException"); [EOL]        [EOL]       } catch(ConcurrentModificationException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.util.ArrayList$Itr", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = fraction0.ONE_HALF.pow(0); [EOL]       assertEquals(2374, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("7:z*:8;OZM"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.add((-394)); [EOL]       mutableInt0.toInteger(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li"); [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(1065); [EOL]       MutablePair<Integer, MutablePair<Object, Object>> mutablePair0 = new MutablePair<Integer, MutablePair<Object, Object>>(integer0, (MutablePair<Object, Object>) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         mutablePair0.compareTo((Pair<Integer, MutablePair<Object, Object>>) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.tuple.Pair", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((byte[]) null); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]        [EOL]       String string2 = strBuilder1.leftString((-2254)); [EOL]        [EOL]       boolean boolean0 = strBuilder3.contains('`'); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder2.replaceAll("ekji", "ekji"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(2817, (-1.0F)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 2817 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) null, class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       String string0 = strBuilder0.midString(34, (-1)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator(">R<{"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = 'K'; [EOL]       charArray0[2] = 'L'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '`'; [EOL]       charArray0[5] = '^'; [EOL]       charArray0[6] = 'V'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.getChars(3889, 0, charArray0, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("W!M/5+USt", "STk88|Icg:Hg5", "STk88|Icg:Hg5", "W!M/5+USt"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatDurationWords()  throws Throwable  { [EOL]       DurationFormatUtils.formatPeriodISO(303L, 86400000L); [EOL]       boolean boolean0 = true; [EOL]       DurationFormatUtils.formatDurationWords(0L, true, true); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000320java.lang.StringBuilder@00000000330java.lang.StringBuilder@00000000340java.lang.StringBuilder@0000000035", (-2139)); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, (-2139)); [EOL]       durationFormatUtils_Token1.getValue(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = null; [EOL]       int int0 = 212; [EOL]       durationFormatUtils_Token1.toString(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DurationFormatUtils.format((DurationFormatUtils.Token[]) null, (-2139), 212, 212, (-147), 212, (-147), (-2139), true); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnumList()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       List<JavaVersion> list0 = EnumUtils.getEnumList(class0); [EOL]       long[] longArray0 = EnumUtils.generateBitVectors(class0, (Iterable<JavaVersion>) list0); [EOL]       EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.EMPTY; [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3426)); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("", ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("-&nd]JTIu9of_kp'Hb;", "Threshold must not be negative"); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.endsWith("Threshold must not be negative", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWithIgnoreCase("-&nd]JTIu9of_kp'Hb;", ""); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '2'; [EOL]       charArray0[1] = ''; [EOL]       boolean boolean2 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isNotBlank("Threshold must not be negative"); [EOL]        [EOL]       StringUtils stringUtils0 = new StringUtils(); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsWhitespace(""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "E"); [EOL]        [EOL]       boolean boolean5 = StringUtils.containsWhitespace((CharSequence) null); [EOL]        [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[0] = (double) (-1); [EOL]       doubleArray0[1] = (double) '2'; [EOL]       doubleArray0[2] = (double) 0; [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte) (-126); [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte) (-35); [EOL]       byteArray0[3] = (byte)32; [EOL]       byteArray0[4] = (byte)19; [EOL]       byteArray0[5] = (byte)7; [EOL]       byteArray0[6] = (byte)119; [EOL]       byteArray0[7] = (byte) (-115); [EOL]       String string2 = StringUtils.join(byteArray0, 'z', 3360, 0); [EOL]        [EOL]       doubleArray0[3] = (double) '2'; [EOL]       doubleArray0[4] = (double) ''; [EOL]       String string3 = StringUtils.join(doubleArray0, 'P'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setArrayEnd(""); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT"); [EOL]        [EOL]       String string0 = StringUtils.substringAfter("TT", "TT"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'E'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("", ""); [EOL]        [EOL]       String string2 = StringUtils.repeat("", 116); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens(""); [EOL]       assertEquals(0, stringArray1.length); [EOL]        [EOL]       String string3 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT");W-R>", string4); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122); [EOL]       assertEquals(0, stringArray2.length); [EOL]        [EOL]       String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric("xQD3IhI"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) ""); [EOL]        [EOL]       boolean boolean3 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[4]; [EOL]       String string5 = StringUtils.reverseDelimited("", ']'); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "xQD3IhI"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>"; [EOL]       int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0); [EOL]       assertEquals(4, charSequenceArray0.length); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean4 = StringUtils.isWhitespace("TT"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES; [EOL]       EnumSet<Locale.FilteringMode> enumSet0 = EnumSet.of(locale_FilteringMode0); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.validIndex(enumSet0, 916, "", objectArray0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          //  [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(true); [EOL]       HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append((short) (-1)); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[0] = (-152L); [EOL]       longArray0[1] = (long) (short) (-1); [EOL]       longArray0[2] = (long) (short) (-1); [EOL]       longArray0[3] = (long) (short) (-1); [EOL]       longArray0[4] = (-1L); [EOL]       longArray0[5] = (long) (short) (-1); [EOL]       longArray0[6] = (long) Integer.MAX_VALUE; [EOL]       longArray0[7] = (long) Integer.MAX_VALUE; [EOL]       HashCodeBuilder hashCodeBuilder3 = hashCodeBuilder2.append(longArray0); [EOL]       HashCodeBuilder.reflectionHashCode(Integer.MAX_VALUE, Integer.MAX_VALUE, (Object) hashCodeBuilder3); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder1, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('M', 'M'); [EOL]       CharRange charRange1 = CharRange.isNot('L'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]       assertTrue(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.replace("p{InCombiningDiacriticalMarks}+", "\"(k$", "", 64); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "", 0, (-913)); [EOL]        [EOL]       String string1 = StringUtils.leftPad("", (-1)); [EOL]        [EOL]       String string2 = StringUtils.substringAfter("Minimum abbreviation width with offset is 7", "<"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "p{InCombiningDiacriticalMarks}+"; [EOL]       charSequenceArray0[2] = (CharSequence) "<"; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "\"(k$"; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) "\"(k$"; [EOL]       charSequenceArray0[7] = (CharSequence) "p{InCombiningDiacriticalMarks}+"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = FormattableUtils.toString((Formattable) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 1; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.randomAlphabetic(1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("E!86"); [EOL]       Locale locale0 = new Locale("E!86", "E!86"); [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter("E!86", timeZone0, locale0); [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0); [EOL]       String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Fraction.getFraction((-1), 966902410, 2147483646); [EOL]         fail("Expecting exception: ArithmeticException"); [EOL]        [EOL]       } catch(ArithmeticException e) { [EOL]          // [EOL]          // Numerator too large to represent as an Integer. [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.math.Fraction", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.replaceChars("up", 'O', 'O'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "up", "up"); [EOL]        [EOL]       String string1 = StringUtils.substringAfterLast("_iVq9-<w--D+?HoA~d", "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)1; [EOL]       String string2 = StringUtils.join(byteArray0, 'O'); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       String string3 = StringUtils.chomp("1", "_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "up", (CharSequence) "_iVq9-<w--D+?HoA~d", (int) (byte)1); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "up", (-1)); [EOL]        [EOL]       String string4 = StringUtils.substringAfter("", " vs "); [EOL]        [EOL]       String string5 = StringUtils.substringBeforeLast("1", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string6 = StringUtils.removePattern("1", "=P5R+AZe1"); [EOL]        [EOL]       String string7 = StringUtils.uncapitalize("_iVq9-<w--D+?HoA~d"); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWithAny("org.apache.commons.lang3.StringUtils", (CharSequence[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder4.isEmpty()); [EOL]       assertFalse(strBuilder5.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertFalse(strBuilder7.isEmpty()); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder8.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder9.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]       assertFalse(strBuilder6.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder0.appendFixedWidthPadRight(2808, 0, '\\'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder10.isEmpty()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Conversion.binaryToHexDigitMsb0_4bits((boolean[]) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Conversion", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutableTriple<Integer, String, MutableTriple<String, Object, Object>> mutableTriple0 = new MutableTriple<Integer, String, MutableTriple<String, Object, Object>>(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         mutableTriple0.compareTo((Triple<Integer, String, MutableTriple<String, Object, Object>>) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.tuple.Triple", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsNone()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.repeat((String) null, "", (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[0] = (short)7; [EOL]       shortArray0[1] = (short) (-275); [EOL]       shortArray0[2] = (short)7; [EOL]       shortArray0[3] = (short)14; [EOL]       shortArray0[4] = (short)97; [EOL]       shortArray0[5] = (short)1101; [EOL]       String string4 = StringUtils.join(shortArray0, 'K'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeXml(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testasWriter()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(false); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher(':'); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.trim(); [EOL]        [EOL]       int int1 = 6; [EOL]       StrBuilder strBuilder5 = strBuilder3.append(6); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch(charArray0, 3954); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = 't'; [EOL]       charArray0[1] = '>'; [EOL]       charArray0[2] = ''; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = '^'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "d(!`<o?9g`N"); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]       assertTrue(strBuilder1.isEmpty()); [EOL]        [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'R'; [EOL]       charArray0[7] = ']'; [EOL]       Locale.Category locale_Category0 = Locale.Category.FORMAT; [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((Object) locale_Category0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = (-3745); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(charArray0, (-3745), (-3745)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid startIndex: -3745 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) compareToBuilder0, (Object) compareToBuilder0, false); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[3] = 1550; [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       int int0 = CompareToBuilder.reflectionCompare((Object) intArray0[3], (Object) intArray0[2], (Collection<String>) linkedList0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = "#Vd[("; [EOL]       StrBuilder strBuilder0 = new StrBuilder("#Vd[("); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       int int0 = 7; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.delete(7, 1542); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // end < start [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = CharSequenceUtils.indexOf("", (-1), 2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayEnd(); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((Object[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(0L); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, "]J;-oeCxj.", long0, false); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteWhitespace()  throws Throwable  { [EOL]       StringUtils.remove("null comparator", '.'); [EOL]       StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]       StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]       char[] charArray0 = new char[0]; [EOL]       StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]       StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]       StringUtils.removeStart("Minimum abbreviation width with offset is 7", "null comparator"); [EOL]       StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.replacePattern("", "", ""); [EOL]       boolean boolean0 = StringUtils.isAsciiPrintable("Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.deleteWhitespace("null comparator"); [EOL]       boolean boolean1 = StringUtils.contains((CharSequence) "null comparator", (CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-4569442781688233984L), (-4569442781688233984L)); [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byteArray0[0] = (byte)125; [EOL]       byteArray0[1] = (byte)1; [EOL]       byteArray0[2] = (byte) (-38); [EOL]       byteArray0[3] = (byte)107; [EOL]       byteArray0[4] = (byte) (-72); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(byteArray0, byteArray0); [EOL]       long[] longArray0 = new long[0]; [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0); [EOL]        [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[0] = (int) (byte)107; [EOL]       intArray0[1] = (int) (byte) (-38); [EOL]       intArray0[2] = (int) (byte) (-72); [EOL]       intArray0[3] = (int) (byte)1; [EOL]       intArray0[4] = (int) (byte)107; [EOL]       intArray0[5] = (int) (byte) (-38); [EOL]       intArray0[6] = (int) (byte) (-38); [EOL]       intArray0[7] = (int) (byte)125; [EOL]       EqualsBuilder equalsBuilder4 = equalsBuilder3.append(intArray0, (int[]) null); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       objectArray0[0] = (Object) 107; [EOL]       EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0); [EOL]       equalsBuilder5.append(objectArray0, objectArray0); [EOL]       assertFalse(equalsBuilder0.isEquals()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), (-1), '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = '/'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher("q=e;yKvV#~sM4D<2"); [EOL]        [EOL]       strBuilder_StrBuilderReader0.close(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append((long) (-1)); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.ensureCapacity((-1)); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));yKvV#~sM4D<2")); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.replaceFirst(strMatcher0, "Windows NT"); [EOL]        [EOL]       char[] charArray1 = new char[2]; [EOL]        [EOL]       charArray1[0] = '/'; [EOL]       charArray1[1] = '/'; [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(charArray1); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln("hZ3CNnc|]e", 101, 97); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphaLower()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('\u0085'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder6.trim(); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.getFuture(); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       Callable<Integer> callable1 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer1 = new CallableBackgroundInitializer<Integer>(callable1); [EOL]       ExecutorService executorService0 = callableBackgroundInitializer1.getExternalExecutor(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAllUpperCase()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, (int) 't'); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, (int) '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.stripEnd((String) null, (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringsBetween()  throws Throwable  { [EOL]       StringUtils.stripStart("_fQY_af8", "_fQY_af8"); [EOL]       StringUtils.splitByWholeSeparator("jutEZ?8yc+", ""); [EOL]       StringUtils.countMatches("jutEZ?8yc+", "jutEZ?8yc+"); [EOL]       StringUtils.removeStart("9.2a=P+HRf`R's^w+eE", "org.apache.commons.lang3.CharSequenceUtils"); [EOL]       StringUtils.uncapitalize("_fQY_af8"); [EOL]       String string0 = "1_iVq9-<w--D+?HoA~d"; [EOL]       StringUtils.substringsBetween("", "1_iVq9-<w--D+?HoA~d", "\r"); [EOL]       String string1 = "1_iVq9-<w--D+?HoA~d"; [EOL]       StringUtils.chomp("1_iVq9-<w--D+?HoA~d"); [EOL]       char char0 = 'B'; [EOL]       StringUtils.center(" p_b2*\"Od&p8%", 1, 'B'); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.abbreviate("1_iVq9-<w--D+?HoA~d", 1, 1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Minimum abbreviation width is 4 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("5T]_m"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-689.841F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       long long1 = strBuilder_StrBuilderReader0.skip(310L); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(1.0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(stringBuffer0, (-611), (-713)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleft()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("", (-1269), 'r'); [EOL]        [EOL]       int int0 = StringUtils.lastOrdinalIndexOf("", "", 3270); [EOL]        [EOL]       String string1 = StringUtils.removeStartIgnoreCase("", ""); [EOL]        [EOL]       String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithIgnoreCase("", ""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       String string3 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0); [EOL]        [EOL]       String string4 = StringUtils.rightPad("=(:!lN1$~&", 600, (String) null); [EOL]        [EOL]       float[] floatArray0 = new float[5]; [EOL]       floatArray0[0] = (float) 'r'; [EOL]       floatArray0[1] = (float) 3270; [EOL]       floatArray0[2] = (float) 600; [EOL]       floatArray0[3] = (float) 3270; [EOL]       floatArray0[4] = (-2778.0017F); [EOL]       String string5 = StringUtils.join(floatArray0, 'I'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[0] = (short)862; [EOL]       short[] shortArray1 = new short[6]; [EOL]       compareToBuilder0.append(shortArray0, shortArray1); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((-2091), (-2091), 0, 0); [EOL]       int int0 = BooleanUtils.toInteger(boolean0, (-2091), Integer.MAX_VALUE, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(1); [EOL]       charBuffer0.position(1); [EOL]       int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, (-1), 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1198, 1198); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1198 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviateMiddle()  throws Throwable  { [EOL]       String string0 = StringUtils.mid("on%35hx1", 775, 7); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) "on%35hx1", 775); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       String string1 = StringUtils.abbreviateMiddle("", "3", 2863); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) "on%35hx1"; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "on%35hx1"; [EOL]       String string2 = StringUtils.join((Iterator<?>) null, '}'); [EOL]        [EOL]       charSequenceArray0[6] = (CharSequence) null; [EOL]       boolean boolean1 = StringUtils.startsWithAny("on%35hx1", charSequenceArray0); [EOL]        [EOL]       String string3 = StringUtils.join((Iterator<?>) null, '$'); [EOL]        [EOL]       String string4 = StringUtils.repeat("3", 12); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '}'; [EOL]       charArray0[1] = 'J'; [EOL]       charArray0[2] = '}'; [EOL]       charArray0[3] = '}'; [EOL]       charArray0[4] = '}'; [EOL]       int int0 = StringUtils.indexOfAny(charSequenceArray0[6], charArray0); [EOL]        [EOL]       String string5 = StringUtils.chomp("333333333333"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumericSpace("333333333333"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.normalizeSpace(" "); [EOL]        [EOL]       String string1 = StringUtils.abbreviate("The Array must not be null", 10); [EOL]        [EOL]       String string2 = StringUtils.repeat('', 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("", ""); [EOL]       assertEquals(0, stringArray0.length); [EOL]        [EOL]       String string3 = "\\u00"; [EOL]       String string4 = StringUtils.lowerCase(string3); [EOL]        [EOL]       String string5 = StringUtils.overlay("dyfY", "t", (-437), (-452)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "JAVA_1_3"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequalsIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " "); [EOL]        [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]        [EOL]       String string2 = StringUtils.remove(" ", '8'); [EOL]        [EOL]       String string3 = StringUtils.join((Object[]) charSequenceArray0, " "); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlpha()  throws Throwable  { [EOL]       String string0 = StringUtils.chop(""); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha(""); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("VOpJi9rzWU^:QGPk $", "VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       String string0 = StringUtils.lowerCase("VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase("VOpJi9rzWU^:QGPk $", "VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       int int0 = Integer.MAX_VALUE; [EOL]       int int1 = StringUtils.ordinalIndexOf("vopji9rzwu^:qgpk $", "vopji9rzwu^:qgpk $", Integer.MAX_VALUE); [EOL]        [EOL]       String string1 = ""; [EOL]       String string2 = StringUtils.removeEndIgnoreCase("", "VOpJi9rzWU^:QGPk $"); [EOL]        [EOL]       String string3 = StringUtils.substringAfterLast("VOpJi9rzWU^:QGPk $", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "vopji9rzwu^:qgpk $", (CharSequence) ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.isNumeric(""); [EOL]        [EOL]       Vector<Object> vector0 = null; [EOL]       try { [EOL]         vector0 = new Vector<Object>((-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Illegal Capacity: -1 [EOL]          // [EOL]          verifyException("java.util.Vector", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.increment(); [EOL]       MutableLong mutableLong1 = new MutableLong("0"); [EOL]       int int0 = mutableLong0.compareTo(mutableLong1); [EOL]       assertEquals(1.0F, mutableLong0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMessage()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("d.m'y", (Throwable) null); [EOL]       BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null); [EOL]       MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, false); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable0, (PrintStream) mockPrintStream0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("java.io.BufferedOutputStream", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate("|Y$B-O?Px11WLnrt", 0, 16); [EOL]        [EOL]       String string1 = StringUtils.replace("|Y$B-O?Px11WLnrt", "|Y$B-O?Px11WLnrt", "", 396); [EOL]        [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "|Y$B-O?Px11WLnrt"; [EOL]       String string2 = StringUtils.replaceEach("", (String[]) null, stringArray0); [EOL]       assertEquals(2, stringArray0.length); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null); [EOL]        [EOL]       String string3 = StringUtils.replaceChars("]NX&9lFX~PS+8v6H", '9', '9'); [EOL]        [EOL]       ArrayList<Integer> arrayList0 = new ArrayList<Integer>(); [EOL]        [EOL]       LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>(arrayList0); [EOL]        [EOL]       String string4 = StringUtils.join((Iterable<?>) linkedHashSet0, '9'); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad("h-@cIQrb", 2, '~'); [EOL]        [EOL]       int int0 = StringUtils.length("h-@cIQrb"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "h-@cIQrb", (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviateMiddle()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "I+dex: "; [EOL]       stringArray0[2] = "t=$]1l^E"; [EOL]       stringArray0[3] = "R"; [EOL]       stringArray0[4] = "3 pZ(|hk3o"; [EOL]       stringArray0[5] = ""; [EOL]       String string0 = "\\u000"; [EOL]       stringArray0[6] = string0; [EOL]       stringArray0[7] = "V'4=.E,,{"; [EOL]       stringArray0[8] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3 pZ(|hk3o", (CharSequence) ""); [EOL]        [EOL]       String string1 = StringUtils.replaceOnce("VQ_N6", "", "z/#"); [EOL]        [EOL]       String string2 = StringUtils.overlay("", "", 2521, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("V'4=.E,,{", stringArray1); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitByCharacterType(stringArray0[6]); [EOL]        [EOL]       String string3 = StringUtils.abbreviateMiddle("!*", "#JFYM}vU \"],4Y", 1448); [EOL]        [EOL]       String string4 = StringUtils.leftPad("!*", 2521, 'X'); [EOL]        [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       doubleArray0[1] = (double) 2521; [EOL]       doubleArray0[2] = (double) 'X'; [EOL]       String string5 = StringUtils.join((double[]) null, 'X'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitPreserveAllTokens()  throws Throwable  { [EOL]       String string0 = StringUtils.difference("V=]Q0$", (String) null); [EOL]        [EOL]       String string1 = StringUtils.overlay("V=]Q0$", "V=]Q0$", (-4552), 1023); [EOL]        [EOL]       String string2 = StringUtils.defaultString("V=]Q0$", "V=]Q0$"); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "V=]Q0$", (CharSequence) "V=]Q0$"); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 'j'); [EOL]        [EOL]       String string4 = StringUtils.chomp("<"); [EOL]        [EOL]       String string5 = StringUtils.substringAfterLast("R>>*l'IFMXO\". 9$_}p", ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("V=]Q0$"); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]        [EOL]       String string6 = "\\u00"; [EOL]       String string7 = StringUtils.replaceOnce(string6, "VGy=h)l]<@t ", ""); [EOL]        [EOL]       String string8 = StringUtils.substringAfterLast("VGy=h)l]<@t ", "Array element "); [EOL]        [EOL]       String string9 = StringUtils.center("]", 13); [EOL]        [EOL]       String string10 = StringUtils.substring(";W|+SH!3", 4679); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty(""); [EOL]        [EOL]       String string11 = StringUtils.upperCase("I,[R:`}.3AU,WO"); [EOL]        [EOL]       String string12 = StringUtils.substring("I,[R:`}.3AU,WO", 0, (-4552)); [EOL]        [EOL]       int[] intArray0 = new int[9]; [EOL]       intArray0[0] = (-1); [EOL]       intArray0[1] = 13; [EOL]       intArray0[2] = 1023; [EOL]       intArray0[3] = (int) 'j'; [EOL]       intArray0[4] = (-1); [EOL]       intArray0[5] = (-1); [EOL]       intArray0[6] = 13; [EOL]       intArray0[7] = 790; [EOL]       intArray0[8] = 13; [EOL]       String string13 = StringUtils.join(intArray0, 'j'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       MutableDouble mutableDouble1 = new MutableDouble(mutableDouble0); [EOL]       mutableDouble0.increment(); [EOL]       boolean boolean0 = mutableDouble0.equals(mutableDouble1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]       assertTrue(charBuffer1.equals((Object)charBuffer0)); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) ""); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (-1.0F); [EOL]       EqualsBuilder equalsBuilder1 = new EqualsBuilder(); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "Zjr?BzN"; [EOL]       stringArray0[1] = "zP;SekJ@"; [EOL]       EqualsBuilder.reflectionEquals(object1, object0, stringArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append((byte) (-26), (byte) (-26)); [EOL]       ImmutablePair<String, String> immutablePair0 = new ImmutablePair<String, String>("Zjr?BzN", "Zjr?BzN"); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       EqualsBuilder.reflectionEquals((Object) "Zjr?BzN", (Object) immutablePair0, (Collection<String>) linkedHashSet0); [EOL]       EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder2, false); [EOL]       String[] stringArray1 = new String[8]; [EOL]       stringArray1[0] = "Unexpected IllegalAccessException"; [EOL]       stringArray1[1] = ""; [EOL]       stringArray1[2] = ""; [EOL]       stringArray1[3] = "<r@0{o"; [EOL]       stringArray1[4] = ""; [EOL]       stringArray1[5] = ""; [EOL]       String string0 = "KC?%YI}sH3,3PC"; [EOL]       stringArray1[6] = "KC?%YI}sH3,3PC"; [EOL]       stringArray1[7] = "eI9+2OG0.v"; [EOL]       boolean boolean0 = EqualsBuilder.reflectionEquals(object0, (Object) equalsBuilder1, stringArray1); [EOL]        [EOL]       boolean boolean1 = true; [EOL]       Class<Integer> class0 = Integer.class; [EOL]       boolean boolean2 = EqualsBuilder.reflectionEquals((Object) stringArray1[2], (Object) string0, boolean1, (Class<?>) class0, stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.reverse(", Length: 0"); [EOL]        [EOL]       String string1 = StringUtils.defaultString("N!c%7%Qc399PR"); [EOL]        [EOL]       boolean boolean0 = StringUtils.equals((CharSequence) "N!c%7%Qc399PR", (CharSequence) null); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[6]; [EOL]       charSequenceArray0[0] = (CharSequence) "0 :htgneL ,"; [EOL]       charSequenceArray0[1] = null; [EOL]       charSequenceArray0[2] = (CharSequence) "0 :htgneL ,"; [EOL]       charSequenceArray0[3] = (CharSequence) "N!c%7%Qc399PR"; [EOL]       charSequenceArray0[4] = (CharSequence) "N!c%7%Qc399PR"; [EOL]       charSequenceArray0[5] = (CharSequence) "0 :htgneL ,"; [EOL]       int int0 = StringUtils.lastIndexOfAny((CharSequence) null, charSequenceArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("0 :htgneL ,", ">D<O)oa1X?)", (-924)); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iterator<String> iterator0 = linkedList0.descendingIterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, "N!c%7%Qc399PR"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("X>2Y%"); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "org.apache.commons.lang3.builder.ToStringStyle", (byte)76); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.append(37); [EOL]       hashCodeBuilder0.append((short[]) null); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.defaultString("\"SC8kO$zhPDHm{\"h"); [EOL]        [EOL]       String string1 = StringUtils.chomp("-_?p69BZA*nq+^k_X_", "L+sjZj<m|\rO)&dq"); [EOL]        [EOL]       String string2 = StringUtils.center("\"SC8kO$zhPDHm{\"h", (-804), 'z'); [EOL]        [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'z'; [EOL]       charArray0[1] = 'z'; [EOL]       charArray0[2] = 'z'; [EOL]       charArray0[3] = 'z'; [EOL]       charArray0[4] = 'z'; [EOL]       charArray0[5] = 'z'; [EOL]       charArray0[6] = 'z'; [EOL]       charArray0[7] = 'z'; [EOL]       charArray0[8] = 'z'; [EOL]       String string3 = StringUtils.join(charArray0, 'z', (-804), (-2733)); [EOL]        [EOL]       String string4 = StringUtils.substring("", 0); [EOL]        [EOL]       String string5 = StringUtils.substringBetween("", "\"SC8kO$zhPDHm{\"h"); [EOL]        [EOL]       String string6 = StringUtils.replaceChars("L+sjZj<m|\rO)&dq", 'z', 'z'); [EOL]        [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte) (-125); [EOL]       byteArray0[3] = (byte)37; [EOL]       byteArray0[4] = (byte)13; [EOL]       byteArray0[5] = (byte)0; [EOL]       byteArray0[6] = (byte)0; [EOL]       byteArray0[7] = (byte)64; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(byteArray0, 'z', (-4796), 500); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -4796 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7"); [EOL]       StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913); [EOL]       StringUtils.normalizeSpace("The character must not be null"); [EOL]       String string1 = StringUtils.deleteWhitespace("The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null"); [EOL]        [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[0] = (double) 5; [EOL]       doubleArray0[1] = (double) 5; [EOL]       doubleArray0[2] = (double) 1913; [EOL]       doubleArray0[3] = (double) 1913; [EOL]       doubleArray0[4] = (double) 5; [EOL]       doubleArray0[5] = (double) 5; [EOL]       doubleArray0[6] = (double) 5; [EOL]       String string2 = StringUtils.join(doubleArray0, 'X'); [EOL]        [EOL]       StringUtils.left("Thecharactermustnotbenull", (-2027)); [EOL]       StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0"); [EOL]       boolean boolean0 = StringUtils.isNumeric("The character must not be null"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split(""); [EOL]        [EOL]       String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913); [EOL]        [EOL]       String string4 = StringUtils.abbreviate("V", 5); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "", 16); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]        [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder3 = new StrBuilder(); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder3.toStringBuilder(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.appendln((Object) strBuilder0); [EOL]        [EOL]       String string1 = strBuilder0.rightString(5); [EOL]        [EOL]       StringBuilder stringBuilder1 = strBuilder0.toStringBuilder(); [EOL]        [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       Object object0 = new Object(); [EOL]        [EOL]       objectArray0[0] = object0; [EOL]       objectArray0[1] = (Object) stringBuilder1; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]        [EOL]       objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       objectArray0[4] = (Object) stringBuffer1; [EOL]       objectArray0[5] = (Object) stringBuilder0; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]        [EOL]       objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer2; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         stringBuilder1.insert((-1), 1L); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("java.lang.AbstractStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       int int0 = strBuilder0.indexOf("2X:=4rf^>1T./&0xdS"); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder2.capacity()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = 1424.4987F; [EOL]       floatArray0[1] = (-1.0F); [EOL]       String string0 = StringUtils.CR; [EOL]        [EOL]       String string1 = StringUtils.rightPad(",,=9_", (-1182)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "\r"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.substring("V[BQedlGTy?P=", 974); [EOL]        [EOL]       String string3 = StringUtils.upperCase("V[BQedlGTy?P="); [EOL]        [EOL]       String string4 = StringUtils.join((Object[]) charSequenceArray0, 'j'); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) ",,=9_", charSequenceArray0); [EOL]        [EOL]       String string5 = StringUtils.upperCase("\r"); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly(charSequenceArray0[0], "V[BQedlGTy?P="); [EOL]        [EOL]       int int2 = new Integer((-1182)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]); [EOL]        [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       byteArray0[0] = (byte)0; [EOL]       String string6 = StringUtils.toString(byteArray0, (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[4]; [EOL]       float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.randomNumeric((-966)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Requested random string length -966 is less than 0. [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.RandomStringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = ArrayUtils.remove(booleanArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       String string1 = locale0.getDisplayVariant(); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder5.insert(1, charArray0, 31, 1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // Invalid offset: 31 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("CGnq5w2>W6Y47X"); [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("ahh'\u65F6'mm'\u5206'ss'\u79D2' z", parsePosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       JavaUnicodeEscaper javaUnicodeEscaper0 = JavaUnicodeEscaper.above(2125); [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(2125); [EOL]       String string0 = javaUnicodeEscaper0.translate((CharSequence) charBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendNull(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]       assertEquals(0, strBuilder1.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(1198, 1198); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1198 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("MB5;ul&m>&;SO<o"); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strMatcher0.isMatch((char[]) null, (-427), (-427), 1); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrMatcher$StringMatcher", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       MutablePair<String, Object> mutablePair0 = MutablePair.of("org.apache.commons.lang3.tuple.MutablePair", (Object) "org.apache.commons.lang3.tuple.MutablePair"); [EOL]       MutablePair<String, MutablePair<String, Object>> mutablePair1 = new MutablePair<String, MutablePair<String, Object>>("org.apache.commons.lang3.tuple.MutablePair", mutablePair0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         mutablePair1.toString((String) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       short[] shortArray0 = new short[13]; [EOL]       short[] shortArray1 = new short[8]; [EOL]       compareToBuilder0.append(shortArray0, shortArray1); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = "Aborting to protect against StackOverflowError - output of one loop is the input of another"; [EOL]       Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>(); [EOL]       assertEquals("[]", stack0.toString()); [EOL]        [EOL]       TreeSet<Locale> treeSet0 = new TreeSet<Locale>(); [EOL]        [EOL]       Locale locale0 = Locale.lookup(stack0, treeSet0); [EOL]       assertEquals("[]", stack0.toString()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.lowerCase("Aborting to protect against StackOverflowError - output of one loop is the input of another", (Locale) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(".F_8~jr2_t 5y.4", 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       char[] charArray1 = new char[0]; [EOL]       compareToBuilder0.append(charArray0, charArray1); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[8]; [EOL]       byteArray0[0] = (byte) (-103); [EOL]       byteArray0[1] = (byte)32; [EOL]       byteArray0[2] = (byte) (-100); [EOL]       byteArray0[3] = (byte)33; [EOL]       byteArray0[4] = (byte) (-126); [EOL]       byteArray0[5] = (byte) (-113); [EOL]       byteArray0[6] = (byte)1; [EOL]       byteArray0[7] = (byte)26; [EOL]       String string0 = StringUtils.join(byteArray0, '-', (int) (byte)33, (int) (byte) (-126)); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.replaceEach(" ", stringArray0, stringArray0); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("Threshold must not be negative", " ", (-375)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "Array and element cannot both be null", "Minimum abbreviation width with offset is 7"); [EOL]        [EOL]       String[] stringArray2 = StringUtils.substringsBetween("D75(_^ `&8i8(", ">D<O)oa1X?)", "Minimum abbreviation width with offset is 7"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1856.653), (-883.2121627171)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object[] objectArray0 = new Object[5]; [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(objectArray0, objectArray0); [EOL]       assertEquals(0, compareToBuilder1.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtruncate()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       Date date0 = mockGregorianCalendar0.getGregorianChange(); [EOL]       boolean boolean0 = DateUtils.truncatedEquals(date0, date0, 5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder("OgU68#7UbWI,wzq8", toStringStyle0, stringBuffer0); [EOL]       toStringBuilder0.append((short) (byte) (-108)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinvert()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1644.21609793616)); [EOL]       Fraction fraction1 = fraction0.invert(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fraction0.add(fraction1); [EOL]         fail("Expecting exception: ArithmeticException"); [EOL]        [EOL]       } catch(ArithmeticException e) { [EOL]          // [EOL]          // overflow: mul [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.math.Fraction", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 't'; [EOL]       charArray0[1] = 't'; [EOL]       charArray0[2] = '{'; [EOL]       String string4 = StringUtils.join(charArray0, 't'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'"); [EOL]        [EOL]       String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r"); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) ":;6z", (CharSequence) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       Byte byte0 = Byte.valueOf((byte) (-9)); [EOL]       MutableByte mutableByte0 = new MutableByte((Number) byte0); [EOL]       mutableByte0.hashCode(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       DurationFormatUtils.formatPeriodISO(303L, 86400000L); [EOL]       boolean boolean0 = true; [EOL]       DurationFormatUtils.formatDurationWords(0L, true, true); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000320java.lang.StringBuilder@00000000330java.lang.StringBuilder@00000000340java.lang.StringBuilder@0000000035", (-2139)); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, (-2139)); [EOL]       durationFormatUtils_Token1.getValue(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = null; [EOL]       int int0 = 212; [EOL]       durationFormatUtils_Token1.toString(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DurationFormatUtils.format((DurationFormatUtils.Token[]) null, (-2139), 212, 212, (-147), 212, (-147), (-2139), true); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DurationFormatUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(101); [EOL]       Formatter formatter0 = new Formatter(charBuffer0); [EOL]       // Undeclared exception! [EOL]       FormattableUtils.append((CharSequence) charBuffer0, formatter0, 101, 32767, 32767); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetCause()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(";RPVtn"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("H;VX W&W", mockThrowable0); [EOL]       Throwable throwable0 = ExceptionUtils.getCause((Throwable) mockThrowable1, (String[]) null);RPVtn", throwable0.getMessage()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Float float0 = new Float(0.0F); [EOL]       mutableInt0.setValue((Number) float0); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer2 = strTokenizer1.setIgnoredChar('5'); [EOL]       assertEquals((-1), strTokenizer2.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("", 121, 0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '}'; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("", "", "CReF|W$R'NGC&FC?"); [EOL]        [EOL]       boolean boolean1 = StringUtils.startsWith("", "CReF|W$R'NGC&FC?"); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 5164); [EOL]        [EOL]       String string1 = StringUtils.center("", 121); [EOL]       assertFalse(string1.equals((Object)string0)); [EOL]        [EOL]       String string2 = StringUtils.appendIfMissing("", "                                                                                                                         ", (CharSequence[]) null); [EOL]       assertTrue(string2.equals((Object)string1)); [EOL]       assertFalse(string2.equals((Object)string0)); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence[]) null); [EOL]        [EOL]       String string3 = StringUtils.overlay("'U-m|b?2SLByQr<S\"J", " vs ", 2029, 0); [EOL]       assertFalse(string3.equals((Object)string2)); [EOL]       assertFalse(string3.equals((Object)string0)); [EOL]       assertFalse(string3.equals((Object)string1)); [EOL]        [EOL]       String string4 = StringUtils.normalizeSpace("EgF@pTCq"); [EOL]       assertFalse(string4.equals((Object)string1)); [EOL]       assertFalse(string4.equals((Object)string2)); [EOL]       assertFalse(string4.equals((Object)string0)); [EOL]       assertFalse(string4.equals((Object)string3)); [EOL]        [EOL]       boolean boolean2 = StringUtils.isWhitespace("EgF@pTCq"); [EOL]        [EOL]       String string5 = StringUtils.trimToNull("M"); [EOL]       assertFalse(string5.equals((Object)string3)); [EOL]       assertFalse(string5.equals((Object)string2)); [EOL]       assertFalse(string5.equals((Object)string4)); [EOL]       assertFalse(string5.equals((Object)string0)); [EOL]       assertFalse(string5.equals((Object)string1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.remove("", 'o'); [EOL]       assertFalse(string6.equals((Object)string3)); [EOL]       assertFalse(string6.equals((Object)string4)); [EOL]       assertFalse(string6.equals((Object)string2)); [EOL]       assertFalse(string6.equals((Object)string5)); [EOL]       assertFalse(string6.equals((Object)string1)); [EOL]       assertTrue(string6.equals((Object)string0)); [EOL]        [EOL]       String string7 = StringUtils.repeat(" vs ", (-1)); [EOL]       assertFalse(string7.equals((Object)string3)); [EOL]       assertFalse(string7.equals((Object)string5)); [EOL]       assertFalse(string7.equals((Object)string1)); [EOL]       assertTrue(string7.equals((Object)string6)); [EOL]       assertFalse(string7.equals((Object)string4)); [EOL]       assertFalse(string7.equals((Object)string2)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.appendNewLine(); [EOL]       assertEquals(82, strBuilder0.length()); [EOL]       assertEquals(82, strBuilder1.length()); [EOL]       assertEquals(82, strBuilder2.length()); [EOL]       assertEquals(82, strBuilder3.length()); [EOL]       assertEquals(82, strBuilder4.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder5.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder5; [EOL]       objectArray0[1] = (Object) strBuilder5; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder6 = strBuilder5.appendAll(objectArray0); [EOL]       assertEquals(3005, strBuilder0.length()); [EOL]       assertEquals(3005, strBuilder5.length()); [EOL]       assertEquals(3005, strBuilder6.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertEquals(5828, strBuilder0.length()); [EOL]       assertEquals(5828, strBuilder1.length()); [EOL]       assertEquals(5828, strBuilder7.length()); [EOL]        [EOL]       int int0 = strBuilder7.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(5828, strBuilder0.length()); [EOL]       assertEquals(5828, strBuilder1.length()); [EOL]       assertEquals(5828, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder0.append(true); [EOL]       assertEquals(5832, strBuilder0.length()); [EOL]       assertEquals(5832, strBuilder8.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5850, strBuilder0.length()); [EOL]       assertEquals(5850, strBuilder9.length()); [EOL]       assertEquals(5850, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder10 = strBuilder7.append(strBuilder3, 0, 2822); [EOL]       assertEquals(8672, strBuilder0.length()); [EOL]       assertEquals(8672, strBuilder1.length()); [EOL]       assertEquals(8672, strBuilder10.length()); [EOL]       assertEquals(8672, strBuilder2.length()); [EOL]       assertEquals(8672, strBuilder3.length()); [EOL]       assertEquals(8672, strBuilder7.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       boolean boolean0 = strBuilder8.equalsIgnoreCase(strBuilder1); [EOL]       assertEquals(8672, strBuilder0.length()); [EOL]       assertEquals(8672, strBuilder8.length()); [EOL]       assertEquals(8672, strBuilder1.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       mutableDouble0.subtract(1574.5204259); [EOL]       float float0 = mutableDouble0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.splitPreserveAllTokens("", "T"); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       String string4 = StringUtils.replaceChars((String) null, "Vk&zfkT%G?ANC_ZRi_!G%*zb*}00[", ""); [EOL]        [EOL]       String[] stringArray2 = StringUtils.stripAll(stringArray0, (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       String string0 = StringUtils.join(iterator0, "The character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "The character must not be null", (CharSequence) "The character must not be null"); [EOL]        [EOL]       Integer integer0 = linkedList0.pollFirst(); [EOL]        [EOL]       String string1 = StringUtils.chomp(""); [EOL]        [EOL]       String string2 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "The character must not be null", ""); [EOL]        [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       stringArray0[3] = ""; [EOL]       stringArray0[4] = ""; [EOL]       String string3 = StringUtils.join(stringArray0); [EOL]       assertEquals(5, stringArray0.length); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0, (String) null); [EOL]       assertEquals(5, stringArray0.length); [EOL]       assertEquals(5, stringArray1.length); [EOL]        [EOL]       String string4 = StringUtils.substringBefore("kytsDAH*4", "kytsDAH*4"); [EOL]        [EOL]       String string5 = StringUtils.lowerCase(""); [EOL]        [EOL]       int int2 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.appendIfMissing("", "", stringArray0); [EOL]       assertEquals(5, stringArray0.length); [EOL]        [EOL]       int int3 = StringUtils.indexOfDifference((CharSequence[]) stringArray0); [EOL]       assertEquals(5, stringArray0.length); [EOL]        [EOL]       String string7 = StringUtils.removeEndIgnoreCase("", ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveStart()  throws Throwable  { [EOL]       String string0 = null; [EOL]       String string1 = StringUtils.removeStart("The Character must not be null", (String) null); [EOL]        [EOL]       String string2 = StringUtils.substring("l&A+FmHiJ)adt:FW", (-1848), 1129); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank("The Character must not be null"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "l&A+FmHiJ)adt:FW"); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(floatArray0, 'J', (-1848), 1129); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // -1848 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("."); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((StrBuilder) null); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-1193)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter"); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write((-1573)); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder2.getNewLineText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Fraction.getReducedFraction(Integer.MIN_VALUE, (-338)); [EOL]         fail("Expecting exception: ArithmeticException"); [EOL]        [EOL]       } catch(ArithmeticException e) { [EOL]          // [EOL]          // overflow: can't negate [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.math.Fraction", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(0); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendStart(stringBuffer0, (Object) null); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = ''; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches(charBuffer0, true, 0, charBuffer0, 1, ''); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", ""); [EOL]        [EOL]       String string3 = StringUtils.join((float[]) null, 't', (-1520), 0); [EOL]        [EOL]       String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");6z", string4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       int int0 = strTokenizer1.size(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-2912)); [EOL]       ImmutableTriple<String, Integer, String> immutableTriple0 = new ImmutableTriple<String, Integer, String>((String) null, integer0, (String) null); [EOL]       MutableTriple<ImmutableTriple<Integer, String, Object>, Integer, Object> mutableTriple0 = MutableTriple.of((ImmutableTriple<Integer, String, Object>) null, integer0, (Object) "null/empty items"); [EOL]       boolean boolean0 = immutableTriple0.equals(mutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       String string0 = "C#5,rw4FJ>B.4K$lilj"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("C#5,rw4FJ>B.4K$lilj"); [EOL]       assertEquals(19, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(0.0); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) strBuilder0, 0, 0); [EOL]       assertEquals(19, strBuilder0.size()); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.append('7'); [EOL]       assertEquals(19, strBuilder0.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(stringBuilder4, Integer.MAX_VALUE, (-1758)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnoNullElements()  throws Throwable  { [EOL]       SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException(); [EOL]       SQLNonTransientConnectionException sQLNonTransientConnectionException1 = Validate.noNullElements(sQLNonTransientConnectionException0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE; [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{"); [EOL]       toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((byte[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       StringUtils.chop("u?7yJe4Zo*z"); [EOL]       StringUtils.indexOfAnyBut((CharSequence) "u?7yJe4Zo*", (CharSequence) "u?7yJe4Zo*z"); [EOL]       StringUtils.substringAfterLast("u?7yJe4Zo*z", "u?7yJe4Zo*"); [EOL]       char char0 = '?'; [EOL]       StringUtils.reverseDelimited("u?7yJe4Zo*", '?'); [EOL]       StringUtils.endsWith("7yJe4Zo*?u", "z"); [EOL]       StringUtils.isAlphanumericSpace("7yJe4Zo*?u"); [EOL]       StringUtils.isBlank("u?7yJe4Zo*"); [EOL]       Object[] objectArray0 = new Object[3]; [EOL]       objectArray0[0] = (Object) "7yJe4Zo*?u"; [EOL]       objectArray0[1] = (Object) "7yJe4Zo*?u"; [EOL]       objectArray0[2] = (Object) "7yJe4Zo*?u"; [EOL]       StringUtils.join(objectArray0, 'Y'); [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'Y'; [EOL]       charArray0[1] = 'Y'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.join(charArray0, 'F', 32, 256); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V"); [EOL]        [EOL]       StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.Category locale_Category1 = Locale.Category.FORMAT; [EOL]       EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1); [EOL]        [EOL]       Iterator<Locale.Category> iterator0 = enumSet0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<"); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       String string0 = ""; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), ""); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       ImmutableTriple<String, String, Object> immutableTriple0 = ImmutableTriple.of((String) null, (String) null, (Object) "org.apache.commons.lang3.tuple.ImmutableTriple"); [EOL]       String string0 = immutableTriple0.getMiddle(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((-565)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       String string0 = strBuilder0.midString((-565), 5224); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.isEmpty(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '_'; [EOL]       charArray0[1] = ']'; [EOL]       charArray0[2] = 'p'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = 'f'; [EOL]       charArray0[5] = 'r'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.insert(5224, charArray0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 5224 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       doubleArray0[1] = Double.NaN; [EOL]       double double0 = NumberUtils.max(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2); [EOL]       StringWriter stringWriter0 = new StringWriter(2); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1225), ";3q^1Hv3rK6"); [EOL]       Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0); [EOL]       Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer()); [EOL]       FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 13); [EOL]       fastDateFormat0.format((Object) calendar0, stringBuffer0, fieldPosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateFormatUtils.format((Calendar) null, "yyyy-MM-dd'T'HH:mm:ss", timeZone0, (Locale) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('h'); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0"); [EOL]        [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone(); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5'); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1; [EOL]       objectArray0[3] = (Object) strMatcher0; [EOL]       objectArray0[4] = (Object) ", Length: 0"; [EOL]       objectArray0[5] = (Object) strMatcher0; [EOL]       StrBuilder strBuilder3 = strBuilder1.appendSeparator(""); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = 'h'; [EOL]       charArray0[1] = 'h'; [EOL]       charArray0[2] = 'h'; [EOL]       charArray0[3] = 'h'; [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'h'; [EOL]       int int0 = strBuilder0.indexOf(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, StrLookup.MapStrLookup<String>> hashMap0 = new HashMap<String, StrLookup.MapStrLookup<String>>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, StrLookup.MapStrLookup<String>>) hashMap0, "", "", 'A'); [EOL]       strSubstitutor0.replace((StringBuffer) null); [EOL]       assertEquals('A', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisBlank()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "Threshold must not be negative"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "p{InCombiningDiacriticalMarks}+"; [EOL]       stringArray0[1] = "~@!LXZ6YxCtw"; [EOL]       stringArray0[2] = "null comparator"; [EOL]       stringArray0[3] = "Threshold must not be negative"; [EOL]       stringArray0[4] = ""; [EOL]       stringArray0[5] = "~@!LXZ6YxCtw"; [EOL]       String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isBlank("~@!LXZ6YxCtw"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "^).r{Hua2", (String) null); [EOL]        [EOL]       String string1 = StringUtils.abbreviate((String) null, 125); [EOL]        [EOL]       String string2 = StringUtils.substringBetween((String) null, ", '", (String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.repeat(')', 125); [EOL]        [EOL]       String string4 = StringUtils.lowerCase((String) null); [EOL]        [EOL]       String string5 = StringUtils.center((String) null, 125); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append(4240); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.insert(0, 1278.456F); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append('d', '`'); [EOL]       long[] longArray0 = new long[2]; [EOL]       compareToBuilder1.append(longArray0, longArray0); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOfAny()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) " "; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]       int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " "); [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]       StringUtils.remove(" ", '8'); [EOL]       String string2 = StringUtils.join((Object[]) charSequenceArray0, " "); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " "); [EOL]        [EOL]       int int2 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]); [EOL]        [EOL]       int int3 = StringUtils.lastIndexOfAny(" ", charSequenceArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'E'; [EOL]       charArray0[1] = 'O'; [EOL]       charArray0[2] = '}'; [EOL]       charArray0[3] = 'G'; [EOL]       charArray0[4] = '@'; [EOL]       charArray0[5] = 'z'; [EOL]       charArray0[6] = 'F'; [EOL]       charArray0[7] = ''; [EOL]       charArray0[8] = 'P'; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) null, charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens(""); [EOL]        [EOL]       String string0 = StringUtils.replaceOnce("", "", "o]az=-zkOjZ*SA.49m"); [EOL]        [EOL]       String string1 = StringUtils.capitalize("FI>R"); [EOL]        [EOL]       String string2 = StringUtils.removeStart((String) null, ""); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "FI>R", charArray0); [EOL]        [EOL]       String string3 = StringUtils.reverseDelimited("", '2'); [EOL]        [EOL]       String string4 = StringUtils.leftPad("Index: ", 2428); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version"); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append('Y'); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testskip()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip(0L); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntValue()  throws Throwable  { [EOL]       int int0 = CharUtils.toIntValue('4', 3760); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3225.013)); [EOL]       boolean boolean0 = fraction0.equals("BN~jiW"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteFirst('2'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null); [EOL]        [EOL]       String string0 = strBuilder0.toString(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '2'); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.append((-176)); [EOL]        [EOL]       String string1 = strBuilder4.rightString((-700)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testendOfPeriod()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.MILLISECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(1462L, timeUnit0, 1); [EOL]       timedSemaphore0.setLimit((-675)); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.setLimit(1); [EOL]       timedSemaphore0.shutdown(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         timedSemaphore0.startTimer(); [EOL]         fail("Expecting exception: RejectedExecutionException"); [EOL]        [EOL]       } catch(RejectedExecutionException e) { [EOL]          // [EOL]          // Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@45bfb728 rejected from java.util.concurrent.ScheduledThreadPoolExecutor@65649c18[Terminated, pool size = 0, active threads = 0, queued tasks = 0, completed tasks = 0] [EOL]          // [EOL]          verifyException("java.util.concurrent.ThreadPoolExecutor$AbortPolicy", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7]; [EOL]       ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED; [EOL]       clientInfoStatusArray0[0] = clientInfoStatus0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.validIndex(clientInfoStatusArray0, 2508, "The validated array index is invalid: %d", (Object[]) clientInfoStatusArray0); [EOL]         fail("Expecting exception: IllegalFormatConversionException"); [EOL]        [EOL]       } catch(IllegalFormatConversionException e) { [EOL]          // [EOL]          // d != java.sql.ClientInfoStatus [EOL]          // [EOL]          verifyException("java.util.Formatter$FormatSpecifier", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[7]; [EOL]       String string0 = WordUtils.uncapitalize(" 4sF`|2a_?<0?w", charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPeriod()  throws Throwable  { [EOL]       DurationFormatUtils.formatPeriodISO((-4874L), 0L); [EOL]       DurationFormatUtils.formatDuration(1272L, "java.lang.StringBuilder@00000000160java.lang.StringBuilder@00000000170java.lang.StringBuilder@00000000180java.lang.StringBuilder@00000000190java.lang.StringBuilder@00000000200java.lang.StringBuilder@00000000214java.lang.StringBuilder@0000000022874java.lang.StringBuilder@0000000023"); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DurationFormatUtils.formatPeriod((-4874L), 327L, "java.lang.StringBuilder@00000000571272java.lang.StringBuilder@00000000580java.lang.StringBuilder@00000000591272java.lang.StringBuilder@00000000600java.lang.StringBuilder@00000000611272java.lang.StringBuilder@00000000620java.lang.StringBuilder@00000000631272java.lang.StringBuilder@00000000640java.lang.StringBuilder@00000000651272java.lang.StringBuilder@00000000660java.lang.StringBuilder@00000000671272java.lang.StringBuilder@00000000680java.lang.StringBuilder@00000000691272java.lang.StringBuilder@00000000700java.lang.StringBuilder@00000000711272java.lang.StringBuilder@00000000720java.lang.StringBuilder@0000000073", true, (TimeZone) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.stripToEmpty("-2+AJhSn#?.RX,#(^c="); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWith("-2+AJhSn#?.RX,#(^c=", "-2+AJhSn#?.RX,#(^c="); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       Iterator<Object> iterator0 = arrayList0.iterator(); [EOL]        [EOL]       String string1 = StringUtils.join(iterator0, ""); [EOL]        [EOL]       String[] stringArray0 = new String[0]; [EOL]       String string2 = StringUtils.replaceEach((String) null, stringArray0, stringArray0); [EOL]        [EOL]       boolean boolean1 = StringUtils.equalsIgnoreCase((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '|'; [EOL]       charArray0[1] = 'S'; [EOL]       charArray0[2] = '1'; [EOL]       charArray0[3] = 'l'; [EOL]       charArray0[4] = 'E'; [EOL]       boolean boolean2 = StringUtils.containsOnly((CharSequence) "", charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("-fdW. "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '`'; [EOL]       charArray0[1] = '~'; [EOL]       charArray0[2] = '5'; [EOL]       charArray0[3] = 'T'; [EOL]       strBuilder0.buffer = charArray0; [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('Q'); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteAll(strMatcher0); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.splitMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.stringMatcher("M?]bESD_=n"); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int1 = strBuilder0.indexOf(strMatcher0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       int int2 = (-65); [EOL]       String string0 = strBuilder0.midString(62, (-65)); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln((-2266.992F)); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert((-1), 62); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -1 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(2374, 0, 2374); [EOL]       Fraction fraction1 = fraction0.ONE_THIRD.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Locale locale0 = Locale.forLanguageTag("fHHU7%+T"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       fastDateFormat0.parse("12:00:00 AM GMT", parsePosition0); [EOL]       assertEquals("java.text.ParsePosition[index=15,errorIndex=-1]", parsePosition0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string1 = StringUtils.substring("t{", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{"); [EOL]        [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = (double) 0; [EOL]       boolean boolean3 = arrayList0.add((Object) ""); [EOL]        [EOL]       arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       String string2 = StringUtils.join(doubleArray0, '}'); [EOL]        [EOL]       String string3 = StringUtils.center("", 0); [EOL]        [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]        [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]        [EOL]       boolean boolean4 = StringUtils.isNumericSpace(stringBuffer0); [EOL]        [EOL]       String string4 = StringUtils.left("", 0); [EOL]        [EOL]       boolean boolean5 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ"); [EOL]        [EOL]       String string5 = StringUtils.join((Object[]) stringArray0, '}'); [EOL]        [EOL]       boolean boolean6 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) ""); [EOL]        [EOL]       String string6 = StringUtils.strip("0.0"); [EOL]        [EOL]       String string7 = StringUtils.substring("0.0", 0); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:"); [EOL]        [EOL]       boolean boolean7 = StringUtils.startsWithAny("", stringArray0); [EOL]        [EOL]       String string8 = StringUtils.leftPad("", (int) '}'); [EOL]        [EOL]       boolean boolean8 = StringUtils.isAllUpperCase("0.0"); [EOL]        [EOL]       boolean boolean9 = StringUtils.equalsIgnoreCase(stringBuffer0, (CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplacePattern()  throws Throwable  { [EOL]       String string0 = StringUtils.replacePattern(", '", ", '", "T=[4"); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("T=[4", ", '", 2419); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("zoJQZA&TlZ<", "zoJQZA&TlZ<", (-1)); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByWholeSeparator("T=[4", "Tc"); [EOL]        [EOL]       int int1 = StringUtils.length(", '"); [EOL]        [EOL]       String string1 = StringUtils.join((Object[]) stringArray1, "T=[4"); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '4'; [EOL]       charArray0[1] = ';'; [EOL]       charArray0[2] = 'M'; [EOL]       charArray0[3] = 'x'; [EOL]       charArray0[4] = '{'; [EOL]       charArray0[5] = '\\'; [EOL]       charArray0[6] = '\\'; [EOL]       charArray0[7] = '\"'; [EOL]       String string2 = StringUtils.join(charArray0, '\\');\\M\\x\\{\\\\\\\\\\\"", string2);', 'M', 'x', '{', '\\', '\\', '\"'}, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[1] = (Object) charBuffer0; [EOL]       objectArray0[2] = (Object) strBuilder0; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       CharBuffer charBuffer1 = CharBuffer.allocate(0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.append((Object) "[go_kPb1Q']x loR)ZZ"); [EOL]        [EOL]       String string0 = strBuilder4.leftString(1); [EOL]        [EOL]       int int2 = strBuilder3.size(); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder3.appendln(true); [EOL]        [EOL]       Locale locale0 = Locale.CANADA; [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder4.appendAll((Iterable<?>) set0); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.replace(strMatcher0, "D", 1, 1662, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(575); [EOL]       assertEquals(4, strBuilder0.size()); [EOL]       assertEquals(4, strBuilder1.size()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln((-1956.771F)); [EOL]       assertEquals(14, strBuilder0.size()); [EOL]       assertEquals(14, strBuilder1.size()); [EOL]       assertEquals(14, strBuilder2.size()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendFixedWidthPadLeft((-634), Integer.MAX_VALUE, 'P'); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 32 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Range<String> range0 = Range.is(""); [EOL]       boolean boolean0 = range0.isStartedBy((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.repeat((String) null, "", (-4035)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[0] = (short)7; [EOL]       shortArray0[1] = (short) (-275); [EOL]       shortArray0[2] = (short)7; [EOL]       shortArray0[3] = (short)14; [EOL]       shortArray0[4] = (short)97; [EOL]       shortArray0[5] = (short)1101; [EOL]       String string4 = StringUtils.join(shortArray0, 'K'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetIgnoredChar()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       String string0 = strTokenizer0.next(); [EOL]        [EOL]       strTokenizer0.setIgnoredChar('u'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatDurationISO()  throws Throwable  { [EOL]       DurationFormatUtils.formatDuration(0L, "", false); [EOL]       DurationFormatUtils.formatDurationHMS(0L); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(""); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token("YfC"); [EOL]       durationFormatUtils_Token0.equals(durationFormatUtils_Token1); [EOL]       DurationFormatUtils.lexx(""); [EOL]       DurationFormatUtils.formatDurationISO(0L); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[1]; [EOL]       String string0 = (String)DurationFormatUtils.y; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token("y"); [EOL]       durationFormatUtils_Token2.toString(); [EOL]       durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token2; [EOL]       durationFormatUtils_Token2.toString(); [EOL]       String string1 = (String)DurationFormatUtils.M; [EOL]       DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, "M"); [EOL]       DurationFormatUtils.formatDurationISO(0L); [EOL]       DurationFormatUtils.formatPeriod(2438L, 1L, "0java.lang.StringBuilder@000000000800java.lang.StringBuilder@000000000900java.lang.StringBuilder@0000000010000"); [EOL]       System.setCurrentTimeMillis(633L); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       String string0 = ObjectUtils.identityToString((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtrim()  throws Throwable  { [EOL]       String string0 = StringUtils.right("", 1); [EOL]        [EOL]       String string1 = StringUtils.stripToNull(""); [EOL]        [EOL]       String string2 = StringUtils.left("", (-2435)); [EOL]        [EOL]       String string3 = StringUtils.remove((String) null, "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       int int0 = StringUtils.countMatches("", "org.apache.commons.lang3.StringUtils"); [EOL]        [EOL]       String string4 = StringUtils.trimToEmpty((String) null); [EOL]        [EOL]       short[] shortArray0 = new short[3]; [EOL]       shortArray0[0] = (short)0; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)4; [EOL]       String string5 = StringUtils.join(shortArray0, 'T'); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", "org.apache.commons.lang3.StringUtils"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testiterator()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       DateUtils.iterator((Calendar) mockGregorianCalendar0, 6); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       stopWatch0.unsplit(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       CharRange charRange1 = CharRange.is('#'); [EOL]       boolean boolean0 = charRange0.equals(charRange1); [EOL]       assertEquals('#', charRange0.getStart()); [EOL]       assertEquals('#', charRange1.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdifference()  throws Throwable  { [EOL]       String string0 = StringUtils.substring("(?: s|[s&&[^ ]])s*", 0, 0); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "(?: s|[s&&[^ ]])s*"; [EOL]       charSequenceArray0[1] = (CharSequence) "(?: s|[s&&[^ ]])s*"; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", charSequenceArray0); [EOL]        [EOL]       Locale locale0 = Locale.ROOT; [EOL]        [EOL]       String string1 = StringUtils.upperCase((String) null, locale0); [EOL]        [EOL]       short[] shortArray0 = new short[2]; [EOL]       shortArray0[0] = (short)4416; [EOL]       shortArray0[1] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'J'); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate((short)0); [EOL]        [EOL]       CharBuffer charBuffer1 = charBuffer0.compact(); [EOL]        [EOL]       CharBuffer charBuffer2 = StringUtils.defaultIfBlank(charBuffer0, charBuffer0); [EOL]        [EOL]       String string3 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       String string4 = StringUtils.join((Object[]) charSequenceArray0, '9'); [EOL]        [EOL]       String string5 = StringUtils.difference("(?: s|[s&&[^ ]])s*", "4416J0"); [EOL]        [EOL]       String string6 = StringUtils.center("4416J0", 13, (String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.startsWithAny("(?: s|[s&&[^ ]])s*", charSequenceArray0); [EOL]        [EOL]       String string7 = StringUtils.uncapitalize("A%"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       int int0 = 102; [EOL]       StrBuilder strBuilder0 = new StrBuilder(102); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.chars(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       Writer writer0 = strBuilder_StrBuilderWriter0.append('H'); [EOL]       assertEquals(1, strBuilder0.length()); [EOL]        [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'H'; [EOL]       charArray0[1] = 'H'; [EOL]       charArray0[2] = 'H'; [EOL]       charArray0[3] = 'H'; [EOL]       strBuilder_StrBuilderWriter0.write(charArray0); [EOL]       assertEquals(5, strBuilder0.length()); [EOL]       assertEquals(4, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append((float) 102); [EOL]       assertEquals(10, strBuilder0.length()); [EOL]       assertEquals(10, strBuilder1.length()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder0, 102, (-1)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -103 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       String string0 = contextedRuntimeException0.getRawMessage(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       int int0 = strBuilder2.capacity(); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append((char[]) null); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strBuilder2.isEmpty()); [EOL]       assertFalse(strBuilder3.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.right("Threshold must not be negative", 2139); [EOL]        [EOL]       LinkedHashSet<Locale.FilteringMode> linkedHashSet0 = new LinkedHashSet<Locale.FilteringMode>(2139, 2139); [EOL]        [EOL]       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES; [EOL]       boolean boolean0 = linkedHashSet0.add(locale_FilteringMode0); [EOL]       assertTrue(linkedHashSet0.contains(locale_FilteringMode0)); [EOL]        [EOL]       Spliterator<Locale.FilteringMode> spliterator0 = linkedHashSet0.spliterator(); [EOL]       assertTrue(linkedHashSet0.contains(locale_FilteringMode0)); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, "Threshold must not be negative"); [EOL]       assertTrue(linkedHashSet0.contains(locale_FilteringMode0)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isEmpty("Threshold must not be negative"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlphaSpace("Threshold must not be negative"); [EOL]        [EOL]       String string2 = StringUtils.repeat("-h0>", "#m(.AN4", 256); [EOL]        [EOL]       boolean boolean3 = StringUtils.isNumeric("Threshold must not be negative"); [EOL]        [EOL]       String string3 = StringUtils.stripEnd("U", "Threshold must not be negative"); [EOL]        [EOL]       String[] stringArray0 = new String[6]; [EOL]       stringArray0[0] = "-h0>"; [EOL]       stringArray0[1] = "#m(.AN4"; [EOL]       stringArray0[2] = "Threshold must not be negative"; [EOL]       stringArray0[3] = "U"; [EOL]       stringArray0[4] = string2; [EOL]       stringArray0[5] = "java.util.Locale$FilteringMode@0000000001"; [EOL]       String string4 = StringUtils.getCommonPrefix(stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("", comparator0); [EOL]       boolean boolean0 = range0.contains((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(4388, 4388, (-636), (-636)); [EOL]       String string0 = BooleanUtils.toStringOnOff(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM"); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM"); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assertEquals(29, strBuilder1.length()); [EOL]       assertEquals(29, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertEquals(81, strBuilder0.length()); [EOL]       assertEquals(81, strBuilder1.length()); [EOL]       assertEquals(81, strBuilder2.length()); [EOL]       assertEquals(81, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.leftString(2822); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder4; [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder2.new StrBuilderTokenizer(); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder1.length()); [EOL]       assertEquals(2822, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getTrimmerMatcher(); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder1.length()); [EOL]       assertEquals(2822, strBuilder2.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       int int0 = strBuilder4.indexOf(strMatcher0); [EOL]       assertEquals(2822, strBuilder0.length()); [EOL]       assertEquals(2822, strBuilder1.length()); [EOL]       assertEquals(2822, strBuilder2.length()); [EOL]       assertEquals(2822, strBuilder4.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]        [EOL]       objectArray0[1] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder1; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertEquals(3005, strBuilder0.length()); [EOL]       assertEquals(3005, strBuilder5.length()); [EOL]       assertEquals(3005, strBuilder4.length()); [EOL]       assertEquals(4, objectArray0.length); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 10, 2822); [EOL]       assertEquals(5828, strBuilder0.length()); [EOL]       assertEquals(5828, strBuilder6.length()); [EOL]       assertEquals(5828, strBuilder1.length()); [EOL]        [EOL]       int int1 = strBuilder6.lastIndexOf("0rn@[CM"); [EOL]       assertEquals(5828, strBuilder0.length()); [EOL]       assertEquals(5828, strBuilder6.length()); [EOL]       assertEquals(5828, strBuilder1.length()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertEquals(5833, strBuilder0.length()); [EOL]       assertEquals(5833, strBuilder7.length()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertEquals(5851, strBuilder0.length()); [EOL]       assertEquals(5851, strBuilder1.length()); [EOL]       assertEquals(5851, strBuilder8.length()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 10, 2822); [EOL]       assertEquals(8673, strBuilder0.length()); [EOL]       assertEquals(8673, strBuilder6.length()); [EOL]       assertEquals(8673, strBuilder1.length()); [EOL]       assertEquals(8673, strBuilder2.length()); [EOL]       assertEquals(8673, strBuilder9.length()); [EOL]       assertEquals(8673, strBuilder3.length()); [EOL]       assertEquals(1, charArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumeric()  throws Throwable  { [EOL]       String string0 = StringUtils.replace((String) null, (String) null, "lP|u?m)YI{V6F9Wy", 8); [EOL]        [EOL]       String string1 = StringUtils.overlay((String) null, "The Character must not be null", 2, 5); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String string2 = StringUtils.substringBeforeLast(", Length: ", "Minimum a"); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Minimum a", 2278); [EOL]        [EOL]       boolean boolean1 = StringUtils.isNumeric("lP|u?m)YI{V6F9Wy"); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "Minimum a", (-1)); [EOL]        [EOL]       float[] floatArray0 = new float[5]; [EOL]       floatArray0[0] = (float) 2278; [EOL]       floatArray0[1] = (float) 2; [EOL]       floatArray0[2] = (float) (-1); [EOL]       floatArray0[3] = (float) (-1); [EOL]       floatArray0[4] = 0.0F; [EOL]       String string3 = StringUtils.join(floatArray0, '*', 74, 74); [EOL]        [EOL]       String string4 = StringUtils.defaultIfBlank("Minimum a", " nxVUwt{]P)hI'O%T"); [EOL]        [EOL]       String string5 = StringUtils.replacePattern("Minimum a", ",Ih!", " is not in the range '0' - '9'"); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAlpha((CharSequence) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       StrMatcher strMatcher2 = StrMatcher.charSetMatcher("^3U^;XUW^MhqPybj"); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendSeparator('w', 107); [EOL]        [EOL]       StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf(strMatcher0, (-2284)); [EOL]        [EOL]       IntStream intStream0 = strBuilder0.codePoints(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(289); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.deleteAll(strMatcher1); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder3.insert(0, charArray0); [EOL]        [EOL]       StrTokenizer strTokenizer0 = strBuilder3.asTokenizer(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.deleteCharAt(1027); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 1027 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = StringUtils.upperCase("qByd06^0e+"); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) "QBYD06^0E+", (CharSequence) "qByd06^0e+", 0); [EOL]        [EOL]       String string1 = StringUtils.capitalize("qByd06^0e+"); [EOL]        [EOL]       PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>(); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = priorityQueue0.iterator(); [EOL]        [EOL]       String string2 = StringUtils.join(iterator0, "QBYD06^0E+"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens("QBYD06^0E+", "qByd06^0e+", 16); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinvokeStaticMethod()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Class<Annotation>[] classArray0 = (Class<Annotation>[]) Array.newInstance(Class.class, 9); [EOL]       try {  [EOL]         MethodUtils.invokeStaticMethod(class0, "byteValue", objectArray0, classArray0); [EOL]         fail("Expecting exception: NoSuchMethodException"); [EOL]        [EOL]       } catch(NoSuchMethodException e) { [EOL]          // [EOL]          // No such accessible method: byteValue() on class: java.lang.Integer [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.MethodUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceChars()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) null, 7); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("0Nn2%azF )g$yM<;c"); [EOL]        [EOL]       String string0 = StringUtils.replaceChars("w", 'w', 'w'); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsNone((CharSequence) "w", "w"); [EOL]        [EOL]       String string1 = StringUtils.deleteWhitespace("wz6d7vzJ$Nu"); [EOL]        [EOL]       short[] shortArray0 = new short[7]; [EOL]       shortArray0[0] = (short)837; [EOL]       shortArray0[1] = (short)0; [EOL]       shortArray0[2] = (short)1628; [EOL]       shortArray0[3] = (short)4517; [EOL]       shortArray0[4] = (short) (-1910); [EOL]       shortArray0[5] = (short)1625; [EOL]       shortArray0[6] = (short)0; [EOL]       String string2 = StringUtils.join(shortArray0, 'b'); [EOL]        [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short) (-1910); [EOL]       floatArray0[1] = (float) (short)0; [EOL]       floatArray0[2] = (float) 'w'; [EOL]       String string3 = StringUtils.join(floatArray0, 't'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = Boolean.FALSE; [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-2091073820)); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrap()  throws Throwable  { [EOL]       String string0 = WordUtils.wrap("Pp_>H?BqR !1^", 3, "java.awt.graphicsenv", true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[0]; [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonOptional; [EOL]       boolean boolean0 = numericEntityUnescaper0.isSet(numericEntityUnescaper_OPTION0); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("$E#}"); [EOL]       Locale locale0 = Locale.ITALY; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("`", timeZone0, locale0); [EOL]       String string0 = fastDateParser0.toString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       StringWriter stringWriter1 = stringWriter0.append('\\'); [EOL]       StringBuffer stringBuffer0 = stringWriter1.getBuffer(); [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuffer0); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, compareToBuilder0.toComparison()); [EOL]        [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       compareToBuilder0.append((Object) compareToBuilder0, (Object) null, (Comparator<?>) comparator0); [EOL]       compareToBuilder0.append((-2103L), (-2103L)); [EOL]       assertEquals(1, compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-1), (-1)); [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper((-1)); [EOL]       hashCodeBuilder1.append(true); [EOL]       assertEquals(0, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsOnly()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.removePattern("", ""); [EOL]        [EOL]       String string2 = StringUtils.substring((String) null, (-4043)); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null); [EOL]        [EOL]       boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]); [EOL]        [EOL]       String[] stringArray0 = new String[3]; [EOL]       stringArray0[0] = "T"; [EOL]       stringArray0[1] = ""; [EOL]       stringArray0[2] = ""; [EOL]       String[] stringArray1 = StringUtils.stripAll(stringArray0); [EOL]        [EOL]       boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0); [EOL]        [EOL]       boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ"); [EOL]        [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[0] = 1885L; [EOL]       longArray0[1] = (long) 0; [EOL]       String string4 = StringUtils.join(longArray0, 'S', 285, 0); [EOL]        [EOL]       String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043)); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byteArray0[0] = (byte)21; [EOL]       byteArray0[1] = (byte)0; [EOL]       byteArray0[2] = (byte)16; [EOL]       byteArray0[3] = (byte) (-1); [EOL]       byteArray0[4] = (byte)3; [EOL]       byteArray0[5] = (byte)64; [EOL]       byteArray0[6] = (byte)36; [EOL]       try {  [EOL]         StringUtils.toString(byteArray0, ""); [EOL]         fail("Expecting exception: UnsupportedEncodingException"); [EOL]        [EOL]       } catch(UnsupportedEncodingException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       StrBuilder strBuilder0 = new StrBuilder(""); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       int int0 = (-2195); [EOL]       StrBuilder strBuilder1 = strBuilder0.append((-2195)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-2195)); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.deleteCharAt((-2195)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: -2195 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToEmpty("/>.W_>OH(v"); [EOL]        [EOL]       String string1 = StringUtils.substringBeforeLast("/>.W_>OH(v", "/>.W_>OH(v"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNumeric("/>.W_>OH(v"); [EOL]        [EOL]       boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) "/>.W_>OH(v", "/>.W_>OH(v"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 448); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "/>.W_>OH(v", 16); [EOL]        [EOL]       String string2 = StringUtils.rightPad("hjTX0JT.]kFcpFD?ys!", 0, '2'); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll((String[]) null, "/>.W_>OH(v"); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "/>.W_>OH(v"); [EOL]        [EOL]       String string3 = StringUtils.substringBefore((String) null, (String) null); [EOL]        [EOL]       String string4 = StringUtils.mid("Threshold must not be negative", (-1), 448); [EOL]        [EOL]       String string5 = "\\u0"; [EOL]       Locale locale0 = new Locale("hjTX0JT.]kFcpFD?ys!"); [EOL]        [EOL]       Set<String> set0 = locale0.getUnicodeLocaleKeys(); [EOL]        [EOL]       String string6 = locale0.getDisplayCountry(); [EOL]        [EOL]       String string7 = StringUtils.lowerCase(string5, locale0); [EOL]        [EOL]       String string8 = StringUtils.repeat(' ', 0); [EOL]        [EOL]       int int2 = StringUtils.countMatches("", (CharSequence) null); [EOL]        [EOL]       String string9 = StringUtils.substring((String) null, 0); [EOL]        [EOL]       String string10 = StringUtils.chomp("JWIPE@-hNPn{!:Qj!~M"); [EOL]        [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte)0; [EOL]       byteArray0[1] = (byte) (-128); [EOL]       String string11 = StringUtils.join(byteArray0, 'i'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatDuration()  throws Throwable  { [EOL]       Locale locale0 = Locale.CANADA_FRENCH; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0); [EOL]       mockGregorianCalendar0.setTimeInMillis(0L); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(mockGregorianCalendar0); [EOL]       locale0.getUnicodeLocaleKeys(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 1); [EOL]       durationFormatUtils_Token1.toString(); [EOL]       durationFormatUtils_Token1.equals(durationFormatUtils_Token0); [EOL]       DurationFormatUtils.formatDurationHMS(1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DurationFormatUtils.formatPeriod(0L, (-1L), (String) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       fraction0.ONE.toProperString(); [EOL]       fraction0.ONE_THIRD.toString(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("x,,H", 678); [EOL]        [EOL]       LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>(); [EOL]        [EOL]       boolean boolean0 = linkedHashSet0.add("Supplied value must be a valid byte literal between -128 and 127: ["); [EOL]        [EOL]       boolean boolean1 = linkedHashSet0.add("Supplied value must be a valid byte literal between -128 and 127: ["); [EOL]        [EOL]       boolean boolean2 = linkedHashSet0.contains("x,,H"); [EOL]        [EOL]       Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING; [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0, 82, 82); [EOL]        [EOL]       boolean boolean3 = linkedHashSet0.add(charBuffer0); [EOL]        [EOL]       boolean boolean4 = linkedHashSet0.add(locale_FilteringMode0); [EOL]        [EOL]       String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, string0); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) string1, (-1940)); [EOL]        [EOL]       String string2 = StringUtils.rightPad("Y)", 64, 'W'); [EOL]        [EOL]       boolean boolean5 = StringUtils.isBlank(string0); [EOL]        [EOL]       boolean boolean6 = StringUtils.isAlphaSpace("Y)"); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'W'; [EOL]       String string3 = StringUtils.join(charArray0, 'W'); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", charArray0); [EOL]        [EOL]       String string4 = StringUtils.leftPad("Afh\"z$ulNc", 1, 'W'); [EOL]        [EOL]       String string5 = StringUtils.difference("x,,H", "null$E=H15Rj\"k"); [EOL]        [EOL]       int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Y)WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", (CharSequence) string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.join((Object[]) null, 'z', 0, (-2270)); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 0); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) null; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.leftPad("", 0, 'z'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       String string0 = strBuilder4.rightString(2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]        [EOL]       objectArray0[0] = (Object) strBuilder0; [EOL]       objectArray0[2] = (Object) strBuilder4; [EOL]       objectArray0[2] = (Object) '\\'; [EOL]       objectArray0[3] = (Object) strBuilder4; [EOL]       StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder4.getNullText()); [EOL]       assertNull(strBuilder5.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       int int0 = strBuilder6.lastIndexOf("Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder7 = strBuilder0.append(false); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder7.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder8.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]       assertNull(strBuilder9.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]       assertNull(strBuilder6.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = ""; [EOL]       String string1 = StringUtils.uncapitalize(""); [EOL]        [EOL]       String string2 = ";7+{,\"0c"; [EOL]       String string3 = StringUtils.abbreviate(";7+{,\"0c", 4096);7+{,\"0c", string3); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf(";7+{,\"0c", "", 4096); [EOL]        [EOL]       CharSequence charSequence0 = null; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) ""); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Strings must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.StringUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Boolean boolean0 = basicThreadFactory0.getDaemonFlag(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'R'; [EOL]       charArray0[1] = 'L'; [EOL]       charArray0[2] = 'L'; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0); [EOL]        [EOL]       String string0 = strBuilder_StrBuilderTokenizer0.getContent(); [EOL]        [EOL]       char[] charArray1 = new char[4]; [EOL]        [EOL]       charArray1[0] = 'L'; [EOL]       charArray1[1] = 'L'; [EOL]       charArray1[2] = 'L'; [EOL]       charArray1[3] = '6'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray1, 0, 0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.insert(352, charArray1); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // String index out of range: 352 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 8); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       charArray0[0] = '+'; [EOL]       StrBuilder strBuilder1 = strBuilder0.append(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       charArray0[1] = 'd'; [EOL]       charArray0[2] = '8'; [EOL]       charArray0[3] = '='; [EOL]       charArray0[4] = 'H'; [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]       assertNull(strBuilder3.getNullText()); [EOL]        [EOL]       Writer writer0 = strBuilder2.asWriter(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder2.getNullText()); [EOL]        [EOL]       boolean boolean0 = strBuilder0.endsWith((String) null); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder2.append(strBuilder3, 2438, 2438); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.StrBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, false); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(); [EOL]        [EOL]       LinkedList<Integer> linkedList0 = new LinkedList<Integer>(); [EOL]        [EOL]       Iterator<Integer> iterator0 = linkedList0.iterator(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendAll(iterator0); [EOL]        [EOL]       StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0); [EOL]        [EOL]       boolean boolean0 = strBuilder1.contains((StrMatcher) strMatcher_CharSetMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ","); [EOL]       standardToStringStyle0.appendToString(stringBuffer0, ""); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]        [EOL]       standardToStringStyle0.setFieldSeparatorAtStart(true); [EOL]       assertTrue(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = null; [EOL]       String string1 = null; [EOL]       String string2 = StringUtils.stripStart((String) null, (String) null); [EOL]        [EOL]       String string3 = StringUtils.trim((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null); [EOL]        [EOL]       String string4 = StringUtils.repeat('S', 0); [EOL]        [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[0] = (double) 'S'; [EOL]       doubleArray0[1] = (double) 'S'; [EOL]       doubleArray0[2] = (double) 0; [EOL]       doubleArray0[3] = (double) 'S'; [EOL]       doubleArray0[4] = (double) 'S'; [EOL]       String string5 = StringUtils.join(doubleArray0, 'S'); [EOL]        [EOL]       String string6 = "8IT"; [EOL]       Locale locale0 = Locale.JAPAN; [EOL]       assertEquals("ja_JP", locale0.toString()); [EOL]        [EOL]       Locale.Category locale_Category0 = Locale.Category.DISPLAY; [EOL]       Locale.setDefault(locale_Category0, locale0); [EOL]       assertEquals("ja_JP", locale0.toString()); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         locale0.getUnicodeLocaleType(""); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Ill-formed Unicode locale key:  [EOL]          // [EOL]          verifyException("java.util.Locale", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", ""); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]   } [EOL]  [EOL]
