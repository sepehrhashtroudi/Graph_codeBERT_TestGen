@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("~dYL7CZ`YIZ7");	      assertEquals(12, strBuilder0.size());	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      assertEquals(12, strBuilder0.size());	      	      strBuilder_StrBuilderWriter0.close();	      assertEquals(12, strBuilder0.size());	  }
@Test  public void testGetNewConflicts() throws Exception {    given().expect().statusCode(HttpStatus.SC_BAD_REQUEST).when().post(rt.host("new/conflicts"));    given().formParam("metadata", "asdt").expect().statusCode(HttpStatus.SC_BAD_REQUEST).when()            .post(rt.host("new/conflicts"));    String expected = IOUtils.toString(getClass().getResource("/conflicts.json"));    String metadataString = IOUtils.toString(getClass().getResource("/conflictRequest.json"));    String result = given().formParam("metadata", metadataString).expect().statusCode(HttpStatus.SC_CONFLICT).when()            .post(rt.host("new/conflicts")).asString();    assertThat(expected, SameJSONAs.sameJSONAs(result));  }
@Test    public void testLoadCredentialsFromString() throws Exception {        Credentials credentials = WalletUtils.loadCredentials(                PASSWORD,                WalletUtilsTest.class.getResource(                        "/keyfiles/"                        + "UTC--2016-11-03T05-55-06."                        + "340672473Z--ef678007d18427e6022059dbc264f27507cd1ffc").getFile());        assertThat(credentials, equalTo(CREDENTIALS));    }
@Test(timeout = 4000)	  public void testtranslate()  throws Throwable  {	      AggregateTranslator aggregateTranslator0 = new AggregateTranslator((CharSequenceTranslator[]) null);	      StringWriter stringWriter0 = new StringWriter();	      // Undeclared exception!	      try { 	        aggregateTranslator0.translate((CharSequence) "FFFFFFFF", (Writer) stringWriter0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.translate.AggregateTranslator", e);	      }	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseIntervalMapDoubleBadFormat() {        IntervalsParser.parseIntervalMap(Double.class, "[1, 2, 4oe]");    }
@Test(expected = NullPointerException.class)    public void testEcmStoreNullFails() {        final InputStream stream = null;        storage.save(stream);    }
@Test  public void testConsistency() {    final Transaction tx = TransactionParseUtil.parseTransactionBytes(Hex.decode(TEST_TX));    final RawTransactionContainer reencoded = TransactionEncodeUtil.encodeTransaction(tx);    final ArrayList<Byte> bytes = new ArrayList<Byte>();    for (final Entry<TransactionPartType, byte[]> part : reencoded) {      for (final byte bite : part.getValue()) {        bytes.add(bite);      }    }    final byte[] primitiveBytes = new byte[bytes.size()];    int i = 0;    for(final byte bite : bytes) {      primitiveBytes[i++] = bite;    }    final byte[] encode = Hex.encode(primitiveBytes);    Assert.assertEquals(TEST_TX, new String(encode));  }
@Test  public void testCreanupWOHwithoutPreservedFlavor() throws WorkflowOperationException, MediaPackageException {    Map<String, String> wfInstConfig = new Hashtable<>();    wfInstConfig.put(CleanupWorkflowOperationHandler.DELETE_EXTERNAL, "true");    MediaPackageBuilder mpBuilder = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder();    MediaPackage mp = mpBuilder.createNew();    MediaPackageElement track1 = addElementToMediaPackage(mp, MediaPackageElement.Type.Track,            "presenter", "source", null);    track1.setURI(UrlSupport.uri(HOSTNAME_NODE1, WFR_URL_PREFIX, WorkingFileRepository.COLLECTION_PATH_PREFIX,            "asset", mp.getIdentifier().toString(), track1.getIdentifier(), "track.mp4"));    cleanupWOH.start(createWorkflowInstance(wfInstConfig, mp), null);    Assert.assertEquals("Media package shouldn't contain any elements", 0, mp.getElements().length);    Assert.assertEquals("One file wasn't deleted on remote repository", 1, deletedFilesURIs.size());  }
@Test(timeout = 4000)	  public void testtoBooleanObject()  throws Throwable  {	      Boolean boolean0 = BooleanUtils.toBooleanObject("0");	  }
@Test  public void testStartWebVtt() throws Exception {    EasyMock.expect(captionService.convert(EasyMock.anyObject(Attachment.class), EasyMock.anyObject(String.class),            EasyMock.anyObject(String.class), EasyMock.anyObject(String.class))).andReturn(job2);    EasyMock.replay(captionService);    operation.setConfiguration(GoogleSpeechAttachTranscriptionOperationHandler.TRANSCRIPTION_JOB_ID, "transcriptionJob");    operation.setConfiguration(GoogleSpeechAttachTranscriptionOperationHandler.TARGET_FLAVOR, "captions/timedtext");    operation.setConfiguration(GoogleSpeechAttachTranscriptionOperationHandler.TARGET_TAG, "tag1,tag2");    operation.setConfiguration(GoogleSpeechAttachTranscriptionOperationHandler.TARGET_CAPTION_FORMAT, "webvtt");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    MediaPackage updatedMp = result.getMediaPackage();    Attachment[] attachments = updatedMp.getAttachments(MediaPackageElementFlavor.parseFlavor("captions/timedtext"));    Assert.assertNotNull(attachments);    Assert.assertEquals(1, attachments.length);    Assert.assertNotNull(attachments[0].getTags());    Assert.assertEquals(2, attachments[0].getTags().length);    Assert.assertEquals("tag1", attachments[0].getTags()[0]);    Assert.assertEquals("tag2", attachments[0].getTags()[1]);  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNewLineText());	      	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      	      char[] charArray0 = new char[1];	      charArray0[0] = '\\';	      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      assertNull(strBuilder3.getNewLineText());	      	      StrBuilder strBuilder4 = strBuilder0.setLength(2822);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder4.getNewLineText());	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) strBuilder4;	      objectArray0[2] = (Object) strBuilder4;	      objectArray0[2] = (Object) '\\';	      objectArray0[3] = (Object) strBuilder1;	      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder4.getNewLineText());	      assertNull(strBuilder5.getNewLineText());	      	      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder6.getNewLineText());	      	      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder6.getNewLineText());	      	      StrBuilder strBuilder7 = strBuilder0.append(false);	      assertNull(strBuilder7.getNewLineText());	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder8.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      	      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder9.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      assertNull(strBuilder3.getNewLineText());	      assertNull(strBuilder6.getNewLineText());	      	      StrBuilder strBuilder10 = strBuilder0.appendFixedWidthPadRight(2808, 0, '\\');	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder10.getNewLineText());	      	      boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: ");	      assertNull(strBuilder0.getNewLineText());	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = StringUtils.EMPTY;	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3426));	      	      String string1 = StringUtils.substringAfter("", "");	      assertTrue(string1.equals((Object)string0));	      	      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("-&nd]JTIu9of_kp'Hb;", "Threshold must not be negative");	      	      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");	      	      boolean boolean0 = StringUtils.endsWith("Threshold must not be negative", "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase("-&nd]JTIu9of_kp'Hb;", "");	      	      char[] charArray0 = new char[2];	      charArray0[0] = '2';	      charArray0[1] = '';	      boolean boolean2 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);	      	      boolean boolean3 = StringUtils.isNotBlank("Threshold must not be negative");	      	      StringUtils stringUtils0 = new StringUtils();	      	      boolean boolean4 = StringUtils.containsWhitespace("");	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "E");	      	      boolean boolean5 = StringUtils.containsWhitespace((CharSequence) null);	      	      double[] doubleArray0 = new double[5];	      doubleArray0[0] = (double) (-1);	      doubleArray0[1] = (double) '2';	      doubleArray0[2] = (double) 0;	      byte[] byteArray0 = new byte[8];	      byteArray0[0] = (byte) (-126);	      byteArray0[1] = (byte)0;	      byteArray0[2] = (byte) (-35);	      byteArray0[3] = (byte)32;	      byteArray0[4] = (byte)19;	      byteArray0[5] = (byte)7;	      byteArray0[6] = (byte)119;	      byteArray0[7] = (byte) (-115);	      String string2 = StringUtils.join(byteArray0, 'z', 3360, 0);	      assertTrue(string2.equals((Object)string1));	      	      doubleArray0[3] = (double) '2';	      doubleArray0[4] = (double) '';	      String string3 = StringUtils.join(doubleArray0, 'P');	      assertFalse(string3.equals((Object)string1));	      assertFalse(string3.equals((Object)string2));	      assertFalse(string3.equals((Object)string0));	  }
@Test(timeout = 4000)	  public void testgetFieldSeparator()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      String string0 = standardToStringStyle0.getSummaryObjectStartText();	      assertEquals(",", standardToStringStyle0.getFieldSeparator());	  }
@Test  public void testUpdateEventComment() throws Exception {    String eventString = IOUtils.toString(getClass().getResource("/eventComment.json"));    String result = given().pathParam("eventId", "asdasd").pathParam("commentId", 33).contentType(ContentType.URLENC).expect()            .statusCode(HttpStatus.SC_OK).when().put(rt.host("{eventId}/comment/{commentId}")).asString();    assertThat(eventString, SameJSONAs.sameJSONAs(result));  }
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      TimeZone timeZone0 = TimeZone.getDefault();	      // Undeclared exception!	      try { 	        DateFormatUtils.format((-891L), "", timeZone0);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	      }	  }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("@uY");	      assertEquals(35, strBuilder0.capacity());	      	      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();	      	      boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J");	      	      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'Q';	      charArray0[1] = 'E';	      charArray0[2] = '8';	      charArray0[3] = '&';	      charArray0[4] = 'D';	      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);	      	      int int0 = strBuilder0.indexOf(strMatcher0);	      assertEquals(35, strBuilder0.capacity());	      	      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY");	      assertEquals(35, strBuilder0.capacity());	      assertEquals(35, strBuilder1.capacity());	      	      StrBuilder strBuilder2 = strBuilder0.append(0.0);	      assertEquals(35, strBuilder0.capacity());	      assertEquals(35, strBuilder2.capacity());	      	      int int1 = strBuilder0.indexOf('c');	      assertEquals(35, strBuilder0.capacity());	      	      int int2 = strBuilder0.lastIndexOf('c');	      assertEquals(35, strBuilder0.capacity());	      	      int int3 = strBuilder1.size();	      assertEquals(35, strBuilder0.capacity());	      assertEquals(35, strBuilder1.capacity());	      	      arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J");	      	      StrBuilder strBuilder3 = strBuilder1.append(2998);	      assertEquals(74, strBuilder0.capacity());	      assertEquals(74, strBuilder3.capacity());	      assertEquals(74, strBuilder1.capacity());	  }
@Test    public void unmapMemoryMappedFile() throws IOException {        // Make sure file is gone        File tmpFile = new File("Unsafe9RTest.tmp");        assertTrue("pre-create", !tmpFile.exists() || tmpFile.delete());        // Create new file        final FileChannel channel = new RandomAccessFile(tmpFile, "rw").getChannel();        assertTrue("post-create", tmpFile.exists());        // Map to memory        final ByteBuffer buffer = channel                .map(FileChannel.MapMode.READ_WRITE, 0, 1024)                .load();        if (PlatformInfo.isWindows()) {            // Windows keeps open files from being deleted            assertFalse("pre-close", tmpFile.delete());            channel.close();            assertFalse("post-close", tmpFile.delete());        } else {            // Linux doesn't            channel.close();        }        // Unmap memory        Unsafe9R.invokeCleaner(buffer);        assertTrue("post-free", tmpFile.delete());    }
@Test    public void testSelectLike() {        final List<List<Object>> res = _personDao.findAll(SQL.select( Person.NAME, Person.HEIGTH).from( Person.TABLE).where( Person.LASTNAME.like( "Pa%")).orderBy( Person.ID));        Assert.assertEquals(res, RESULT_LIKE);    }
@Test  public void testCopy() throws Exception {    StoragePath from = new StoragePath(ORG_ID, MP_ID, VERSION_2, MP_ELEM_ID);    StoragePath to = new StoragePath(ORG_ID, MP_ID, VERSION_1, MP_ELEM_ID);    assertTrue(repo.copy(from, to));    File srcFile = new File(PathSupport.concat(new String[] { tmpRoot.toString(), ORG_ID, MP_ID, VERSION_2.toString(),            MP_ELEM_ID + XML_EXTENSTION }));    File copyFile = new File(PathSupport.concat(new String[] { tmpRoot.toString(), ORG_ID, MP_ID, VERSION_1.toString(),            MP_ELEM_ID + XML_EXTENSTION }));    assertTrue(srcFile.exists());    assertTrue(copyFile.exists());    FileInputStream srcIn = null;    FileInputStream copyIn = null;    try {      srcIn = new FileInputStream(srcFile);      copyIn = new FileInputStream(copyFile);      byte[] bytesOriginal = IOUtils.toByteArray(srcIn);      byte[] bytesCopy = IOUtils.toByteArray(copyIn);      Assert.assertEquals(bytesCopy.length, bytesOriginal.length);    } finally {      IOUtils.closeQuietly(srcIn);      IOUtils.closeQuietly(copyIn);    }  }
@Test(expected = IllegalStateException.class)	public void testFindCurrentFragmentWhenDestroyed() {		// Arrange + Act:		createDestroyedController().findCurrentFragment();	}
@Test    public void testNameOverrideEnvironmentVariableOverridesSystemProperty() throws IOException, ServletException {        environmentVariables.set(SegmentNamingStrategy.NAME_OVERRIDE_ENVIRONMENT_VARIABLE_KEY, "pass");        System.setProperty(SegmentNamingStrategy.NAME_OVERRIDE_SYSTEM_PROPERTY_KEY, "fail");        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter("fail");        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(false);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mock(FilterChain.class);        servletFilter.doFilter(request, response, chain);        ArgumentCaptor<Segment> emittedSegment = ArgumentCaptor.forClass(Segment.class);        verify(AWSXRay.getGlobalRecorder().getEmitter(), Mockito.times(1)).sendSegment(emittedSegment.capture());        Assert.assertEquals("pass", emittedSegment.getValue().getName());        environmentVariables.set(SegmentNamingStrategy.NAME_OVERRIDE_ENVIRONMENT_VARIABLE_KEY, null);    }
@Test(timeout = 4000)	  public void testhashCode()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1));	      hashCodeBuilder0.append(37);	      hashCodeBuilder0.append((short[]) null);	      assertEquals(0, hashCodeBuilder0.toHashCode());	  }
@Test(timeout = 4000)	  public void testreplacePattern()  throws Throwable  {	      String string0 = StringUtils.replace((String) null, (String) null, "lP|u?m)YI{V6F9Wy", 8);	      	      String string1 = StringUtils.overlay((String) null, "The Character must not be null", 2, 5);	      	      int int0 = StringUtils.length((CharSequence) null);	      	      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);	      	      String string2 = StringUtils.substringBeforeLast(", Length: ", "Minimum a");	      	      int int1 = StringUtils.indexOf((CharSequence) "Minimum a", 2278);	      	      boolean boolean1 = StringUtils.isNumeric("lP|u?m)YI{V6F9Wy");	      	      int int2 = StringUtils.indexOf((CharSequence) "Minimum a", (-1));	      	      float[] floatArray0 = new float[5];	      floatArray0[0] = (float) 2278;	      floatArray0[1] = (float) 2;	      floatArray0[2] = (float) (-1);	      floatArray0[3] = (float) (-1);	      floatArray0[4] = 0.0F;	      String string3 = StringUtils.join(floatArray0, '*', 74, 74);	      	      String string4 = StringUtils.defaultIfBlank("Minimum a", " nxVUwt{]P)hI'O%T");	      	      String string5 = StringUtils.replacePattern("Minimum a", ",Ih!", " is not in the range '0' - '9'");	      	      boolean boolean2 = StringUtils.isAlpha((CharSequence) null);	  }
@Test    public void testEthGetFilterLogs() throws Exception {        web3j.platonGetFilterLogs(Numeric.toBigInt("0x16")).send();        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"platon_getFilterLogs\","                + "\"params\":[\"0x16\"],\"id\":1}");    }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(32, strBuilder0.capacity());	      	      Object[] objectArray0 = new Object[9];	      objectArray0[0] = (Object) strBuilder0;	      objectArray0[1] = (Object) strBuilder0;	      Object object0 = new Object();	      	      objectArray0[2] = object0;	      StrBuilder strBuilder1 = strBuilder0.replaceAll("end < start", "pfF EZ;^2\"6oMC");	      assertEquals(32, strBuilder0.capacity());	      assertEquals(32, strBuilder1.capacity());	      	      objectArray0[3] = (Object) strBuilder0;	      objectArray0[4] = (Object) strBuilder0;	      objectArray0[5] = (Object) strBuilder0;	      objectArray0[6] = (Object) strBuilder0;	      objectArray0[7] = (Object) strBuilder0;	      objectArray0[8] = (Object) strBuilder0;	      StrBuilder strBuilder2 = strBuilder0.appendWithSeparators(objectArray0, "q)_:r>uGfR^Dt^>K");	      assertEquals(1146, strBuilder0.capacity());	      assertEquals(1146, strBuilder2.capacity());	      	      StrBuilder strBuilder3 = strBuilder0.insert(3, (char[]) null);	      assertEquals(1146, strBuilder0.capacity());	      assertEquals(1146, strBuilder3.capacity());	      	      StrBuilder strBuilder4 = strBuilder3.replaceFirst((String) null, "q)_:r>uGfR^Dt^>K");	      assertEquals(1146, strBuilder0.capacity());	      assertEquals(1146, strBuilder3.capacity());	      assertEquals(1146, strBuilder4.capacity());	      	      StrBuilder strBuilder5 = strBuilder2.appendSeparator("pfF EZ;^2\"6oMC", 3);	      assertEquals(1146, strBuilder5.capacity());	      assertEquals(1146, strBuilder0.capacity());	      assertEquals(1146, strBuilder2.capacity());	      	      int int0 = strBuilder0.size();	      assertEquals(1146, strBuilder0.capacity());	  }
@Test public void testDispatchViewClick() {		// Arrange:		final TestFragment fragment = new TestFragment();		final View view = new Button(context);		// Act + Assert:		assertThat(fragment.dispatchViewClick(view), is(false));		assertThat(fragment.dispatchedClickedView, is(view));	}
@Test(timeout = 4000)	  public void testtranslate()  throws Throwable  {	      UnicodeEscaper unicodeEscaper0 = new UnicodeEscaper(255, 255, true);	      StringWriter stringWriter0 = new StringWriter();	      boolean boolean0 = unicodeEscaper0.translate(255, (Writer) stringWriter0);	  }
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);	      MockDate mockDate0 = new MockDate(3, 1, (-309), (-2011), (-2011), 3);	      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());	      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);	      // Undeclared exception!	      try { 	        fastDateFormat0.format((Object) mockDate0, (StringBuffer) null, fieldPosition0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);	      }	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      String string0 = StringUtils.chomp("YU6:w]M?f:BLf)V");	      	      char[] charArray0 = new char[1];	      charArray0[0] = '=';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "YU6:w]M?f:BLf)V", charArray0);	      	      String string1 = StringUtils.removeEndIgnoreCase((String) null, "Search and Replace array lengths don't match: ");	      	      double[] doubleArray0 = new double[9];	      doubleArray0[0] = (double) '=';	      doubleArray0[1] = (double) '=';	      doubleArray0[2] = (double) '=';	      doubleArray0[3] = (double) '=';	      doubleArray0[4] = (double) '=';	      doubleArray0[5] = (double) '=';	      doubleArray0[6] = (double) '=';	      doubleArray0[7] = (double) '=';	      doubleArray0[8] = (double) '=';	      String string2 = StringUtils.join(doubleArray0, '=', 1039, 2);	      	      String string3 = StringUtils.removeEndIgnoreCase("Search and Replace array lengths don't match: ", "YU6:w]M?f:BLf)V");	      	      String string4 = StringUtils.substringBefore("Strings must not be null", "Search and Replace array lengths don't match: ");	      	      Object[] objectArray0 = new Object[8];	      objectArray0[0] = (Object) 61.0;	      objectArray0[1] = (Object) 61.0;	      objectArray0[2] = (Object) "";	      objectArray0[3] = (Object) '=';	      objectArray0[4] = (Object) 61.0;	      objectArray0[5] = (Object) 61.0;	      Object object0 = new Object();	      	      objectArray0[6] = object0;	      objectArray0[7] = (Object) 61.0;	      // Undeclared exception!	      try { 	        StringUtils.join(objectArray0, "", 1039, 1832);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // 1039	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testisNegated()  throws Throwable  {	      CharRange charRange0 = CharRange.isNotIn('.', 'L');	      CharRange charRange1 = CharRange.is('.');	      boolean boolean0 = charRange0.equals(charRange1);	      assertFalse(charRange1.isNegated());	      assertTrue(charRange0.isNegated());	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      MockThrowable mockThrowable0 = new MockThrowable("J");	      MockThrowable mockThrowable1 = new MockThrowable("J", mockThrowable0);	      Class<String> class0 = String.class;	      int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable1, (Class<?>) class0);	  }
@Test public void testRunOnUiThread() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final BaseFragment fragment = new TestFragment();		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		Executors.newSingleThreadExecutor().execute(new Runnable() {			@Override public void run() {				// Act + Assert:				assertThat(fragment.runOnUiThread(new Runnable() {					@Override public void run() {						fragmentManager.beginTransaction().remove(fragment).commit();						fragmentManager.executePendingTransactions();					}				}), is(true));			}		});	}
@Test(timeout = 4000)	  public void testhashCode()  throws Throwable  {	      MutableBoolean mutableBoolean0 = new MutableBoolean(false);	      mutableBoolean0.hashCode();	  }
@Test(timeout = 4000)	  public void testgetInstance()  throws Throwable  {	      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();	      ParsePosition parsePosition0 = new ParsePosition(3);	      Date date0 = fastDateFormat0.parse("FastDateFormat[M/d/yy h:mm a,en,GMT]", parsePosition0);	  }
@Test    public void testUnion() {        GraphStore graphStore = GraphGenerator.generateTinyGraphStore();        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view1 = store.createView();        GraphViewImpl view2 = store.createView();        DirectedSubgraph graph1 = store.getDirectedGraph(view1);        DirectedSubgraph graph2 = store.getDirectedGraph(view2);        Node n1 = graphStore.getNode("1");        Node n2 = graphStore.getNode("2");        graph1.addNode(n1);        graph2.addNode(n2);        graph1.union(graph2);        Assert.assertTrue(graph1.contains(n2));    }
@Test    public void shouldAddExpenseIfConversionInformationIsConsistent() throws Exception {        final Nobt nobt = aNobt()                .withCurrency(new CurrencyKey("EUR"))                .build();        final ExpenseDraft expenseDraft = anExpenseDraft()                .withConversionInformation(new ConversionInformation(new CurrencyKey("USD"), BigDecimal.TEN))                .build();        nobt.createExpenseFrom(expenseDraft);    }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      double[] doubleArray0 = new double[4];	      double[] doubleArray1 = new double[7];	      compareToBuilder0.append(doubleArray0, doubleArray1);	      boolean[] booleanArray0 = new boolean[8];	      compareToBuilder0.append(booleanArray0, booleanArray0);	      assertEquals((-1), (int)compareToBuilder0.build());	  }
@Test    public void testWrapByteBuffer() throws Exception {        //given        final ByteBuffer byteBuffer = allocateDirect(5);        byteBuffer.put(new byte[]{                1, 1, 2, 3, 5        });        //when        final Pointer<Void> voidPointer = wrap(byteBuffer);        //then        final long address = voidPointer.address;        assertThat(address).isNotEqualTo(0L);    }
@Test(timeout = 4000)	  public void testsubstringAfter()  throws Throwable  {	      String string0 = ";.ve1iBQK8kNLBo]\"";	      String string1 = StringUtils.replaceChars(";.ve1iBQK8kNLBo]\"", '5', 'S');.ve1iBQK8kNLBo]\"", string1);	      	      String string2 = StringUtils.substringAfter(";.ve1iBQK8kNLBo]\"", ";.ve1iBQK8kNLBo]\"");	      	      boolean boolean0 = StringUtils.isNotEmpty(";.ve1iBQK8kNLBo]\"");	      	      boolean boolean1 = StringUtils.isAsciiPrintable(";.ve1iBQK8kNLBo]\"");	      	      // Undeclared exception!	      try { 	        CharBuffer.wrap((char[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.nio.CharBuffer", e);	      }	  }
@Test(timeout = 4000)	  public void testgetDateInstance()  throws Throwable  {	      Locale locale0 = Locale.ENGLISH;	      FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0);	      ParsePosition parsePosition0 = new ParsePosition(3);	      // Undeclared exception!	      try { 	        fastDateFormat0.parseObject((String) null, parsePosition0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.time.FastDateParser", e);	      }	  }
@Test    public void writeThemeFull()                            throws Exception {        final ByteArrayOutputStream bos = new ByteArrayOutputStream();        final XMLStreamWriter writer = newInstance().createXMLStreamWriter( bos );        writer.writeStartElement( "Layer" );        writer.writeNamespace( "", WMSNS );        writer.writeNamespace( "xlink", XLNNS );        XMLAdapter.writeElement( writer, "Title", "Container" );        final LayerMetadata layerMetadata = createLayerMetadata();        final DatasetMetadata datasetMetadata = createDatasetMetadataFull();        final DoublePair scaleDenominators = new DoublePair( 0.0, 999999.9 );        final Map<String, String> authorityNameToUrl = createAuthorityNameToUrlMap();        themeWriter.writeTheme( writer, layerMetadata, datasetMetadata, authorityNameToUrl, scaleDenominators, null );        writer.writeEndElement();        writer.flush();        bos.close();        final InputStream is = WmsCapabilities130ThemeWriterTest.class.getResourceAsStream( "wms130_layer_full.xml" );        final byte[] expected = IOUtils.readBytesAndClose( is, -1 );        assertValidity( new ByteArrayInputStream( bos.toByteArray() ), SCHEMA_URL );        assertArrayEquals( expected, bos.toByteArray() );    }
@Test    public void testPut() {        IndexImpl<Node> index = generateEmptyIndex();        Column column = index.columnStore.getColumn("age");        NodeImpl n = new NodeImpl(0);        Integer v = 10;        Assert.assertSame(index.put(column, v, n), v);        Assert.assertEquals(index.count(column, v), 1);        Assert.assertSame(index.put(column, v, n), v);        Assert.assertEquals(index.count(column, v), 1);    }
@Test(expected = IllegalStateException.class)    public void onViewCreatedWithNoChangeListener() throws Exception {        presenter.onViewCreated();    }
@Test(expected = IllegalStateException.class)	public void testNewRequestForFragmentWhenDestroyed() {		// Arrange + Act:		createDestroyedController().newRequest(new TestFragment());	}
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      	      char[] charArray0 = new char[8];	      char[] charArray1 = new char[0];	      compareToBuilder0.append(charArray0, charArray1);	  }
@SuppressWarnings("unchecked")    @Test    public void testParse_elevationValues()                            throws Exception {        GetMapParser getMapXMLAdapter = new GetMapParser();        XMLStreamReader xmlStreamReader = createXmlStreamReader( "wms-1.3.0-GetMap_elevationValues.xml" );        GetMap getMap = getMapXMLAdapter.parse( xmlStreamReader );        HashMap<String, List<?>> dimensions = getMap.getDimensions();        assertThat( dimensions.size(), is( 1 ) );        List<Double> elevationValues = (List<Double>) dimensions.get( "elevation" );        assertThat( elevationValues.size(), is( 5 ) );        assertThat( elevationValues, hasItems( -1.5, -0.5, 0d, 0.5, 1.5 ) );    }
@Test  public void testGetHumanReadableTimeStringInputHoursExpectsOnlyHours() {    assertEquals("2 hours", Log.getHumanReadableTimeString(7200));  }
@Test  public void testFailingOperationWithErrorHandler() throws Exception {    WorkflowInstance instance = startAndWait(failingDefinitionWithErrorHandler, mediapackage1, WorkflowState.FAILED);    Assert.assertEquals(WorkflowState.FAILED, service.getWorkflowById(instance.getId()).getState());    // The second operation should have failed    Assert.assertEquals(OperationState.FAILED, service.getWorkflowById(instance.getId()).getOperations().get(1)            .getState());    // Load a fresh copy    WorkflowInstance storedInstance = service.getWorkflowById(instance.getId());    // Make sure the error handler has been added    Assert.assertEquals(4, storedInstance.getOperations().size());    Assert.assertEquals("op1", storedInstance.getOperations().get(0).getTemplate());    Assert.assertEquals("op3", storedInstance.getOperations().get(1).getTemplate());    Assert.assertEquals("op1", storedInstance.getOperations().get(2).getTemplate());    Assert.assertEquals("op2", storedInstance.getOperations().get(3).getTemplate());  }
@Test(expected = XMLParsingException.class)    public void parseMixedIdFilter()                            throws XMLStreamException, FactoryConfigurationError, IOException {        parse( "testfilter_110_id_mixed.xml" );    }
@Test(expected = WorkflowOperationException.class)  public void testStartMissingTargetFlavor() throws Exception {    operationHandler.start(workflowInstance, null);  }
@Test    public void test_V100_EXAMPLE_2()                            throws Exception {        URL exampleURL = this.getClass().getResource( V100_EXAMPLE_2 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        FilterQuery filterQuery = (FilterQuery) getFeature.getQueries().get( 0 );        assertEquals( new QName( "INWATERA_1M" ), filterQuery.getTypeNames()[0].getFeatureTypeName() );        assertEquals( "INWATERA_1M/WKB_GEOM",                      ( (PropertyName) filterQuery.getProjectionClauses()[0] ).getPropertyName().getAsText() );        assertEquals( "INWATERA_1M/TILE_ID",                      ( (PropertyName) filterQuery.getProjectionClauses()[1] ).getPropertyName().getAsText() );    }
@Test    public void testAIXMCustomGeometryHierarchy()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaUrl = this.getClass().getResource( "../aixm/schema/message/AIXM_BasicMessage.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaUrl );        AppSchema schema = adapter.extractAppSchema();        // gml:Point        GMLObjectType pointType = schema.getGeometryType( valueOf( "{http://www.opengis.net/gml/3.2}Point" ) );        assertNotNull( pointType );        List<GMLObjectType> pointSubstitutions = schema.getSubstitutions( pointType.getName() );        assertEquals( 2, pointSubstitutions.size() );        // gml:Curve        GMLObjectType curveType = schema.getGeometryType( valueOf( "{http://www.opengis.net/gml/3.2}Curve" ) );        assertNotNull( curveType );        List<GMLObjectType> curveSubstitutions = schema.getSubstitutions( curveType.getName() );        assertEquals( 2, curveSubstitutions.size() );        // gml:Surface        GMLObjectType surfaceType = schema.getGeometryType( valueOf( "{http://www.opengis.net/gml/3.2}Surface" ) );        assertNotNull( surfaceType );        List<GMLObjectType> surfaceSubstitutions = schema.getSubstitutions( surfaceType.getName() );        assertEquals( 5, surfaceSubstitutions.size() );    }
@Test(timeout = 4000)	  public void testlowerCase()  throws Throwable  {	      boolean boolean0 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);	      	      String string0 = StringUtils.replace((String) null, "^).r{Hua2", (String) null);	      	      String string1 = StringUtils.abbreviate((String) null, 125);	      	      String string2 = StringUtils.substringBetween((String) null, ", '", (String) null);	      	      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);	      	      String string3 = StringUtils.repeat(')', 125);	      	      String string4 = StringUtils.lowerCase((String) null);	      	      String string5 = StringUtils.center((String) null, 125);	  }
@Test    public void testIterateStore() {        int[] n = {100, 1000, 5000};        double[] p = {0.01, 0.1, 0.3};        for (int nodes : n) {            for (double prob : p) {                int edges = (int) (nodes * (nodes - 1) * prob);                NanoBench.create().measurements(2).measure("iterate edge store nodes=" + nodes + " edges=" + edges, new EdgeStoreBenchmark().iterateEdgeStore(nodes, prob));            }        }    }
@Test(dataProvider = "medSlideWindosDP")    public void testMed(int[] nums, int k, double[] medWindows) {        double[] actual = SlidingWindow.medianSlidingWindow(nums, k);        assertEquals(actual, medWindows, String.format("actual = %s, expected = %s",                DoubleStream.of(actual).mapToObj(String::valueOf).collect(joining(",", "[", "]")),                DoubleStream.of(medWindows).mapToObj(String::valueOf).collect(joining(",", "[", "]"))                ));    }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      String string0 = StringUtils.uncapitalize((String) null);	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109));	      	      char[] charArray0 = new char[3];	      charArray0[0] = '-';	      charArray0[1] = 'Z';	      charArray0[2] = 'X';	      int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0);	      	      String string1 = StringUtils.uncapitalize((String) null);	      	      boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens(">D<O)oa1X?)");	      	      String string2 = StringUtils.prependIfMissingIgnoreCase((String) null, (CharSequence) null, stringArray0);	      	      int int2 = StringUtils.indexOfDifference((CharSequence) ">D<O)oa1X?)", (CharSequence) null);	      	      String string3 = StringUtils.mid((String) null, (-1), 0);	      	      boolean boolean1 = StringUtils.isNumericSpace((CharSequence) null);	      	      double[] doubleArray0 = new double[9];	      doubleArray0[0] = 1864.84706;	      doubleArray0[1] = (double) (-1);	      doubleArray0[2] = (double) '-';	      doubleArray0[3] = (double) (-1);	      doubleArray0[4] = (double) 'X';	      doubleArray0[5] = 0.0;	      doubleArray0[6] = (double) 'X';	      doubleArray0[7] = 0.0;	      doubleArray0[8] = (double) 'X';	      String string4 = StringUtils.join(doubleArray0, 'o', 692, (-1));	  }
@Test(timeout = 4000)	  public void testcountMatches()  throws Throwable  {	      String string0 = StringUtils.left("F*ih6'Wv@Hv&-.Ni:q", (-2178));	      	      boolean boolean0 = StringUtils.startsWith("", "F*ih6'Wv@Hv&-.Ni:q");	      	      boolean boolean1 = StringUtils.isWhitespace((CharSequence) null);	      	      boolean boolean2 = StringUtils.containsWhitespace("");	      	      String[] stringArray0 = StringUtils.split((String) null, "");	      	      String string1 = StringUtils.stripStart("", (String) null);	      	      int int0 = StringUtils.countMatches((CharSequence) null, "");	      	      String string2 = StringUtils.stripToNull("");	      	      String string3 = StringUtils.defaultString("", (String) null);	  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      short[] shortArray0 = new short[1];	      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0);	      assertEquals(0, (int)compareToBuilder1.build());	  }
@Test  public void testLazyTake() {    assertTrue(mlazy(asList(1, 2, 3, 4, 5)).take(0).eval().isEmpty());    assertEquals(3, mlazy(asList(1, 2, 3, 4, 5)).take(3).eval().size());    assertEquals(5, mlazy(asList(1, 2, 3, 4, 5)).take(5).eval().size());    assertEquals(5, mlazy(asList(1, 2, 3, 4, 5)).take(10).eval().size());    assertEquals(100, mlazy(constant(10)).take(100).eval().size());  }
@Test    public void testProcessDescription_1()                            throws OWSExceptionReport, IOException {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        WPSClient wpsClient = new WPSClient( new URL( demoWPSURL ) );        org.deegree.protocol.wps.client.process.Process p1 = wpsClient.getProcess( "Buffer" );        LiteralInputType literalInput = (LiteralInputType) p1.getInputTypes()[1];        Assert.assertEquals( "1", literalInput.getMinOccurs() );        Assert.assertEquals( "1", literalInput.getMaxOccurs() );        Assert.assertEquals( "double", literalInput.getDataType().getValue() );        Assert.assertEquals( "http://www.w3.org/TR/xmlschema-2/#double", literalInput.getDataType().getRef().toString() );        Assert.assertEquals( "unity", literalInput.getDefaultUom().getValue() );        Assert.assertEquals( "unity", literalInput.getSupportedUoms()[0].getValue() );        Assert.assertEquals( true, literalInput.isAnyValue() );        OutputType output = p1.getOutputTypes()[0];        ComplexOutputType complexData = (ComplexOutputType) output;        Assert.assertEquals( "UTF-8", complexData.getDefaultFormat().getEncoding() );        Assert.assertEquals( "text/xml", complexData.getDefaultFormat().getMimeType() );        Assert.assertTrue( complexData.getDefaultFormat().getSchema().startsWith("http://schemas.opengis.net/gml/3.1.1/base/") );        Assert.assertEquals( "UTF-8", complexData.getSupportedFormats()[0].getEncoding() );        Assert.assertEquals( "text/xml", complexData.getSupportedFormats()[0].getMimeType() );        Assert.assertTrue( complexData.getSupportedFormats()[0].getSchema().startsWith("http://schemas.opengis.net/gml/3.1.1/base/") );    }
@Test  public void testNoPropertiesEpisodeOverwriteParam() throws Exception {    Dictionary<String, String> properties = new Hashtable<>();    boolean isAddOnlyNew;    properties = new Hashtable<>();    service.updated(properties);    isAddOnlyNew = service.isAddOnlyNew;    Assert.assertTrue("Overwrite property defaults to true when param is commented out", isAddOnlyNew);  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      doReturn(0, 0, 0).when(comparator0).compare(anyString() , anyString());	      Range<String> range0 = Range.between("Xj=7cm$m", "oO", comparator0);	      boolean boolean0 = range0.contains("");	  }
@Test    public void given$isEnabled_whenQuery_thenShouldCallNativeApiAndReturnValue() {        // given        PowerMockito.mockStatic(Instabug.class);        PowerMockito.when(Instabug.isEnabled()).thenReturn(true);        // when        boolean isEnabled = rnModule.isEnabled();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Instabug.isEnabled();        Assert.assertTrue(isEnabled);    }
@Test(timeout = 4000)	  public void testendsWithAny()  throws Throwable  {	      String string0 = StringUtils.left("", 2);	      	      boolean boolean0 = StringUtils.endsWithAny("", (CharSequence[]) null);	  }
@Test(timeout = 4000)	  public void testreplaceFirst()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("&uiM4\"5g,@ppG");	      	      StrBuilder strBuilder1 = new StrBuilder("line.separator");	      	      StrBuilder strBuilder2 = strBuilder0.append(strBuilder1);	      	      Object[] objectArray0 = new Object[6];	      objectArray0[0] = (Object) "oIj {5P}vL!>";	      objectArray0[1] = (Object) "oIj {5P}vL!>";	      Object object0 = new Object();	      	      objectArray0[2] = object0;	      objectArray0[3] = (Object) "&uiM4\"5g,@ppG";	      objectArray0[4] = (Object) strBuilder0;	      objectArray0[5] = (Object) strBuilder1;	      StrBuilder strBuilder3 = strBuilder1.appendln("oIj {5P}vL!>", objectArray0);	      	      StrBuilder strBuilder4 = strBuilder2.replaceFirst("'l+&r7", "line.separator");	      	      int int0 = (-3301);	      StringBuilder stringBuilder0 = null;	      try {	        stringBuilder0 = new StringBuilder((-3301));	        fail("Expecting exception: NegativeArraySizeException");	      	      } catch(NegativeArraySizeException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.lang.AbstractStringBuilder", e);	      }	  }
@Test(expected = Exception.class)    public void getObject_noMatcher_invalidUrl()                            throws Exception {        GmlDocumentIdContext gmlDocumentIdContext = new GmlDocumentIdContext( GMLVersion.GML_32 );        gmlDocumentIdContext.getObject( "uri", null );    }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      BitField bitField0 = new BitField((-594));	      int int0 = bitField0.setBoolean((short)0, true);	  }
@Test   @Ignore   public void testParseAmbiguousTimes()   {      List<DateGroup> parse = new PrettyTimeParser().parseSyntax("let's get lunch at two");      Assert.assertFalse(parse.isEmpty());      Calendar calendar = Calendar.getInstance();      calendar.setTime(parse.get(0).getDates().get(0));      int hourOfDay = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);      if (hourOfDay >= 2 && hourOfDay < 14)         Assert.assertEquals(14, calendar.get(Calendar.HOUR_OF_DAY));      else         Assert.assertEquals(2, calendar.get(Calendar.HOUR_OF_DAY));   }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      	      char[] charArray0 = new char[1];	      StringBuffer stringBuffer1 = stringBuffer0.reverse();	      	      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();	      	      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0);	      	      charArray0[0] = '3';	      StrBuilder strBuilder2 = strBuilder0.append(3986.49F);	      	      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}");	      	      boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0);	      	      StrBuilder strBuilder4 = strBuilder0.append("");	      	      IntStream intStream0 = strBuilder2.codePoints();	      	      StrBuilder strBuilder5 = strBuilder2.appendln(stringBuffer0);	      	      StrBuilder strBuilder6 = strBuilder0.append(5305);	      	      StrBuilder strBuilder7 = strBuilder0.appendln('3');	      	      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-2104));	      	      StrBuilder strBuilder8 = strBuilder7.appendln("");	  }
@Test  public void testExtractImageContentTypeFromCollection() throws Exception {    InputStream in = null;    try {      in = getClass().getResourceAsStream("/opencast_header.gif");      endpoint.putInCollection("collection-2", "opencast_header.gif", in);    } finally {      IOUtils.closeQuietly(in);    }    // execute gets, and ensure that the content types are correct    Response response = endpoint.restGetFromCollection("collection-2", "opencast_header.gif");    Assert.assertEquals("Gif content type", "image/gif", response.getMetadata().getFirst("Content-Type"));  }
@Test    public void validate_with_transports_null_test() {        WebAuthnRegistrationRequestValidator target = new WebAuthnRegistrationRequestValidator(                webAuthnManager, serverPropertyProvider        );        ServerProperty serverProperty = mock(ServerProperty.class);        when(serverPropertyProvider.provide(any())).thenReturn(serverProperty);        CollectedClientData collectedClientData = mock(CollectedClientData.class);        AttestationObject attestationObject = mock(AttestationObject.class);        AuthenticationExtensionsClientOutputs<RegistrationExtensionClientOutput> clientExtensionOutputs = new AuthenticationExtensionsClientOutputs<>();        when(webAuthnManager.validate(any(RegistrationRequest.class), any(RegistrationParameters.class))).thenReturn(                new RegistrationData(attestationObject, null, collectedClientData, null, clientExtensionOutputs, null));        MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest();        mockHttpServletRequest.setScheme("https");        mockHttpServletRequest.setServerName("example.com");        mockHttpServletRequest.setServerPort(443);        String clientDataBase64 = "clientDataBase64";        String attestationObjectBase64 = "attestationObjectBase64";        String clientExtensionsJSON = "clientExtensionsJSON";        target.validate(mockHttpServletRequest, clientDataBase64, attestationObjectBase64, null, clientExtensionsJSON);        ArgumentCaptor<RegistrationRequest> registrationRequestArgumentCaptor = ArgumentCaptor.forClass(RegistrationRequest.class);        ArgumentCaptor<RegistrationParameters> registrationParametersArgumentCaptor = ArgumentCaptor.forClass(RegistrationParameters.class);        verify(webAuthnManager).validate(registrationRequestArgumentCaptor.capture(), registrationParametersArgumentCaptor.capture());        RegistrationRequest registrationRequest = registrationRequestArgumentCaptor.getValue();        RegistrationParameters registrationParameters = registrationParametersArgumentCaptor.getValue();        assertThat(registrationRequest.getClientDataJSON()).isEqualTo(Base64UrlUtil.decode(clientDataBase64));        assertThat(registrationRequest.getAttestationObject()).isEqualTo(Base64UrlUtil.decode(attestationObjectBase64));        assertThat(registrationRequest.getClientExtensionsJSON()).isEqualTo(clientExtensionsJSON);        assertThat(registrationParameters.getServerProperty()).isEqualTo(serverProperty);    }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      String string0 = StringUtils.strip("xlj[0BAT3@1");	      	      charSequenceArray0[0] = (CharSequence) "xlj[0BAT3@1";	      String string1 = StringUtils.removeStart("xlj[0BAT3@1", "&r");	      	      charSequenceArray0[1] = (CharSequence) "xlj[0BAT3@1";	      String string2 = StringUtils.leftPad("xlj[0BAT3@1", 8192, "}^M");	      	      charSequenceArray0[2] = (CharSequence) string2;	      String string3 = StringUtils.replaceChars("xlj[0BAT3@1", (String) null, "xlj[0BAT3@1");	      	      charSequenceArray0[3] = (CharSequence) "xlj[0BAT3@1";	      String string4 = StringUtils.stripToNull("Minimum abbreviation width is 4");	      	      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is 4";	      String string5 = StringUtils.EMPTY;	      	      charSequenceArray0[5] = (CharSequence) "";	      String string6 = StringUtils.difference("", (String) null);	      	      charSequenceArray0[6] = (CharSequence) "";	      String string7 = StringUtils.substringBefore("", "Index: ");	      	      charSequenceArray0[7] = (CharSequence) "";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	  }
@Test    void sendingSegmentShouldNotThrowExceptions() throws SocketException {        DaemonConfiguration config = getDaemonConfiguration("__udpemittertest_unresolvable__:1234");        UDPEmitter emitter = new UDPEmitter(config);        boolean success = emitter.sendSegment(new DummySegment(getGlobalRecorder()));        assertThat(success).isFalse();    }
@Test(timeout = 4000)	  public void testshutdown()  throws Throwable  {	      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;	      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, (-2622));	      timedSemaphore0.startTimer();	      timedSemaphore0.shutdown();	      timedSemaphore0.endOfPeriod();	      timedSemaphore0.getLimit();	      // Undeclared exception!	      try { 	        timedSemaphore0.acquire();	        fail("Expecting exception: IllegalStateException");	      	      } catch(IllegalStateException e) {	         //	         // TimedSemaphore is shut down!	         //	         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);	      }	  }
@Test    public void testGetNodeEdgesMixedUnusedEdgeType() {        GraphStore graphStore = GraphGenerator.generateSmallMixedGraphStore(2);        for (EdgeImpl e : graphStore.edgeStore.toArray()) {            testEdgeIterable(graphStore.getEdges(e.source, e.target), new EdgeImpl[] {});            testEdgeIterable(graphStore.getEdges(e.source, e.target, e.type), new EdgeImpl[] { e });        }    }
@Test  public void testResolveEventComment() throws Exception {    String eventString = IOUtils.toString(getClass().getResource("/eventCommentResolved.json"));    given().pathParam("eventId", "notExists").pathParam("commentId", 33).expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().post(rt.host("{eventId}/comment/{commentId}"));    String result = given().pathParam("eventId", "asdasd").pathParam("commentId", 33).expect()            .statusCode(HttpStatus.SC_OK).when().post(rt.host("{eventId}/comment/{commentId}")).asString();    assertThat(eventString, SameJSONAs.sameJSONAs(result));  }
@Test    void testValidLaterLineCgroupFile() throws IOException {        DockerUtils dockerUtils = new DockerUtils(DockerUtilsTest.class.getResource(            "/com/amazonaws/xray/utils/validSecondCgroup"));        String id = dockerUtils.getContainerId();        Assertions.assertEquals(DOCKER_ID, id);    }
@Test  public void testGetEventWorkflow() throws Exception {    String eventMetadataString = IOUtils.toString(getClass().getResource("/eventWorkflow.json"));    String path = "{eventId}/workflows/{workflowId}";    given().pathParam("eventId", "notExists").pathParam("workflowId", "asdasd").expect()            .statusCode(HttpStatus.SC_NOT_FOUND).when().get(rt.host(path));    given().pathParam("eventId", "asdasd").pathParam("workflowId", "asdasd").expect()            .statusCode(HttpStatus.SC_BAD_REQUEST).when().get(rt.host(path));    given().pathParam("eventId", "asdasd").pathParam("workflowId", "9999").expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().get(rt.host(path));    String result = given().pathParam("eventId", "asdasd").pathParam("workflowId", "1").expect()            .statusCode(HttpStatus.SC_OK).when().get(rt.host(path)).asString();    assertThat(eventMetadataString, SameJSONAs.sameJSONAs(result));  }
@Test    public void test200Example13()                            throws Exception {        GetFeature request = parse( "wfs200/example13.kvp" );    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseTimestampSetBadDateFormat1() {        TimestampsParser.parseTimestampSet("[2015-13-01, 2015-01-31]");    }
@Test(timeout = 4000)	  public void testrightPad()  throws Throwable  {	      String string0 = StringUtils.leftPad("", (-1269), 'r');	      	      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3270);	      	      String string1 = StringUtils.removeStartIgnoreCase("", "");	      	      String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", "");	      	      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");	      	      CharSequence[] charSequenceArray0 = new CharSequence[6];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "";	      charSequenceArray0[5] = (CharSequence) "";	      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);	      	      String string4 = StringUtils.rightPad("=(:!lN1$~&", 600, (String) null);	      	      float[] floatArray0 = new float[5];	      floatArray0[0] = (float) 'r';	      floatArray0[1] = (float) 3270;	      floatArray0[2] = (float) 600;	      floatArray0[3] = (float) 3270;	      floatArray0[4] = (-2778.0017F);	      String string5 = StringUtils.join(floatArray0, 'I');	  }
@Test(timeout = 4000)	  public void testCONST_SHORT()  throws Throwable  {	      try { 	        ObjectUtils.CONST_SHORT(1680043104);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Supplied value must be a valid byte literal between -32768 and 32767: [1680043104]	         //	         verifyException("org.apache.commons.lang3.ObjectUtils", e);	      }	  }
@Test    public void testAIXMTimeSlicePropertyDeclarations()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaUrl = this.getClass().getResource( "../aixm/schema/message/AIXM_BasicMessage.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaUrl );        AppSchema schema = adapter.extractAppSchema();        GMLSchemaInfoSet gmlSchema = schema.getGMLSchema();        String aixmNs = "http://www.aixm.aero/schema/5.1";        QName ftName = new QName( aixmNs, "Unit" );        FeatureType ft = schema.getFeatureType( ftName );        QName propName = new QName( aixmNs, "timeSlice" );        PropertyType pt = ft.getPropertyDeclaration( propName );        XSElementDeclaration propDecl = pt.getElementDecl();        GMLPropertySemantics propertySemantics = gmlSchema.getTimeSlicePropertySemantics( propDecl );        assertNotNull( propertySemantics );        propName = new QName( GML3_2_NS, "identifier" );        pt = ft.getPropertyDeclaration( propName );        propDecl = pt.getElementDecl();        propertySemantics = gmlSchema.getTimeSlicePropertySemantics( propDecl );        assertNull( propertySemantics );    }
@Test  public void should_save_an_authorized_customer() {    Customer savedCustomer = service.save(new Customer("Alice", "Smith"));    assertThat(savedCustomer.getLastName()).isEqualTo("Smith");  }
@Test    public void test_V110_EXAMPLE03()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE03 );        XMLAdapter xmlAdapter = new XMLAdapter( exampleURL );        GetFeatureXMLAdapter getFeatureAdapter = new GetFeatureXMLAdapter();        getFeatureAdapter.setRootElement( xmlAdapter.getRootElement() );        GetFeature getFeature = getFeatureAdapter.parse();        List<Query> queries = getFeature.getQueries();        FilterQuery filterQuery = (FilterQuery) queries.get( 0 );        IdFilter filter = (IdFilter) filterQuery.getFilter();        Set<String> ids = filter.getMatchingIds();        assertEquals( ids.size(), 3 );        assertTrue( ids.contains( "InWaterA1M.1013" ) );        assertTrue( ids.contains( "InWaterA1M.1014" ) );        assertTrue( ids.contains( "InWaterA1M.1015" ) );    }
@Test    public void evaluateInstantPeriod() {        assertFalse( before.evaluate( instant( "2014-01-01T00:00:01" ),                                      period( "2014-01-01T00:00:01", "2014-01-01T00:00:01" ) ) );        assertFalse( before.evaluate( instant( "2014-01-01T00:00:01" ),                                      period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ) ) );        assertFalse( before.evaluate( instant( "2014-01-01T00:00:02" ),                                      period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ) ) );        assertFalse( before.evaluate( instant( "2014-01-01T00:00:03" ),                                      period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ) ) );        assertFalse( before.evaluate( instant( "2014-01-01T00:00:04" ),                                      period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ) ) );        assertTrue( before.evaluate( instant( "2014-01-01T00:00:00" ),                                     period( "2014-01-01T00:00:01", "2014-01-01T00:00:03" ) ) );    }
@Config(sdk = Build.VERSION_CODES.JELLY_BEAN)	@Test public void testInflateTransitionOnJellyBeanApiLevel() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final BaseFragment fragment = new TestFragment();		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		// Act + Assert:		assertThat(fragment.inflateTransition(1), is(nullValue()));	}
@Test(timeout = 4000)	  public void testgetStart()  throws Throwable  {	      CharRange charRange0 = CharRange.is('6');	      charRange0.hashCode();	      assertEquals('6', charRange0.getStart());	  }
@Test    public void testParseTimestampMapFloat() {        TimestampFloatMap expected = new TimestampFloatMap();        expected.put(1.0, 1f);        expected.put(3.0, 2f);        expected.put(5.0, 3f);        expected.put(6.0, 4f);        assertEqualTimestampMaps(expected, TimestampsParser.parseTimestampMap(Float.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]"));        assertEqualTimestampMaps(expected, TimestampsParser.parseTimestampMap(float.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]"));    }
@Test(timeout = 4000)	  public void testisTrue()  throws Throwable  {	      // Undeclared exception!	      try { 	        Validate.isTrue(false, "", 0.0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // 	         //	         verifyException("org.apache.commons.lang3.Validate", e);	      }	  }
@Test(timeout = 4000)	  public void testserialize()  throws Throwable  {	      Integer integer0 = new Integer(1);	      byte[] byteArray0 = SerializationUtils.serialize((Serializable) integer0);	      Object object0 = SerializationUtils.deserialize(byteArray0);	  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(0, strBuilder0.size());	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      assertEquals(0, strBuilder0.size());	      	      StringBuilder stringBuilder0 = new StringBuilder(4);	      	      StringBuilder stringBuilder1 = stringBuilder0.append(0);	      	      StringBuilder stringBuilder2 = stringBuilder1.append((-771.0));	      	      char[] charArray0 = new char[4];	      charArray0[0] = 'k';	      charArray0[1] = '$';	      charArray0[2] = '?';	      charArray0[3] = 'N';	      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);	      	      StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0);	      	      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder4);	      assertEquals(15, strBuilder0.size());	      assertEquals(15, strBuilder1.size());	      	      strBuilder_StrBuilderWriter0.write("'fe:RqN$");	      assertEquals(23, strBuilder0.size());	      	      strBuilder_StrBuilderWriter0.write("");	      assertEquals(23, strBuilder0.size());	      	      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-1729), (-1729));	      assertEquals(23, strBuilder0.size());	      assertEquals(23, strBuilder2.size());	      	      StrBuilder strBuilder3 = strBuilder0.setNewLineText("'fe:RqN$");	      assertEquals(23, strBuilder3.size());	      assertEquals(23, strBuilder0.size());	      	      // Undeclared exception!	      try { 	        strBuilder3.subSequence((-1729), (-3524));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1729	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void nonExistantAgent() {    try {      service.getAgent("doesNotExist");      fail("Agent has been found");    } catch (NotFoundException e) {      assertNotNull(e);    }  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("F47@g0~|IH&t");	      assertEquals(12, strBuilder0.size());	      	      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();	      	      char[] charArray0 = new char[2];	      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);	      	      charArray0[0] = 'n';	      char[] charArray1 = new char[8];	      	      charArray1[0] = 'n';	      charArray1[1] = 'n';	      charArray1[2] = 'S';	      charArray1[3] = 'n';	      charArray1[4] = 'S';	      charArray1[5] = 'S';	      charArray1[6] = 'S';	      charArray1[7] = 'S';	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1);	      	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-1), 207, 'S');	      assertEquals(219, strBuilder0.size());	      assertEquals(219, strBuilder1.size());	      	      charArray0[1] = 'S';	      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);	      	      StrMatcher strMatcher4 = StrMatcher.stringMatcher("");	      	      int int0 = strBuilder0.indexOf(strMatcher0, 0);	      assertEquals(219, strBuilder0.size());	      	      boolean boolean0 = strBuilder0.equals((Object) null);	      assertEquals(219, strBuilder0.size());	  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("%.uP-XC6m9");	      assertNull(strBuilder0.getNewLineText());	      	      StringBuffer stringBuffer0 = new StringBuffer(strBuilder0);	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	  }
@Test    public void testSkip() throws IOException {        byte[] src = "HELLO MINA!".getBytes();        ByteBuffer bb = ByteBuffer.wrap(src);        InputStream is = new ByteBufferInputStream(bb);        is.skip(6);        assertEquals(5, is.available());        assertEquals('M', is.read());        assertEquals('I', is.read());        assertEquals('N', is.read());        assertEquals('A', is.read());        is.skip((long) Integer.MAX_VALUE + 1);        assertEquals(-1, is.read());        is.close();    }
@Test(timeout = 4000)	  public void testisAssignable()  throws Throwable  {	      Class<Double>[] classArray0 = (Class<Double>[]) Array.newInstance(Class.class, 2);	      boolean boolean0 = ClassUtils.isAssignable(classArray0[0], classArray0[1], false);	  }
@Test(timeout = 4000)	  public void testatLeast()  throws Throwable  {	      JavaVersion javaVersion0 = JavaVersion.JAVA_1_1;	      // Undeclared exception!	      try { 	        javaVersion0.atLeast((JavaVersion) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.JavaVersion", e);	      }	  }
@Test    public void testUnzipFileItem() throws Exception {        final ConfigurationFileManager subject = getTestJenkinsConfiguration();        final FileItem file = mock(FileItem.class);        when(file.getInputStream()).thenReturn(getExampleInputStream());        subject.unzipFilesFrom(file);        assertTrue(new File(tempDir.getRoot(), "example.txt").exists());    }
@Test    public void should_rhs_not_be_evaluated_when_OR_operator_and_lhs_is_true___weak_ref() {        when(lhs.isGranted(any(), any(), any(), anyString())).thenReturn(true);        GrantEvaluator grantEvaluator = composer.or(lhs, rhs);        boolean granted = grantEvaluator.isGranted(null, null, 1L, "my_type");        verify(lhs).isGranted(any(), any(), any(), anyString());        verifyZeroInteractions(rhs);        assertThat(granted).isTrue();    }
@Test(timeout = 4000)	  public void testgetCSVInstance()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f");	      String string0 = strTokenizer0.nextToken();	      	      int int0 = strTokenizer0.nextIndex();	  }
@Test    public void testNearestPowerOfTwo() {        assertEquals( 9, MathUtils.previousPowerOfTwo( 511 ) );        assertEquals( 9, MathUtils.previousPowerOfTwo( 512 ) );        assertEquals( 10, MathUtils.previousPowerOfTwo( 513 ) );    }
@Test    public void testParseTimestampMapInteger() {        TimestampIntegerMap expected = new TimestampIntegerMap();        expected.put(1.0, 1);        expected.put(3.0, 2);        expected.put(5.0, 3);        expected.put(6.0, 4);        assertEqualTimestampMaps(expected, TimestampsParser.parseTimestampMap(Integer.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]"));        assertEqualTimestampMaps(expected, TimestampsParser.parseTimestampMap(int.class, "[1, 1]; [3, 2]; [5, '3']; [6, \"4\"]"));    }
@Test(timeout = 4000)	  public void testformatDurationISO()  throws Throwable  {	      DurationFormatUtils.formatDurationISO(2024L);	      DurationFormatUtils.formatDurationHMS(2024L);	      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[2];	      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@000000003100java.lang.StringBuilder@000000003202java.lang.StringBuilder@0000000033024", 0);	      durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0;	      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);	      durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token1;	      DurationFormatUtils.format(durationFormatUtils_TokenArray0, 0, 0, 0, 935, 0, 0, 0, true);	  }
@Test(timeout = 4000)	  public void testchomp()  throws Throwable  {	      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");	      	      boolean boolean0 = StringUtils.isNotBlank("");	      	      Locale locale0 = new Locale("-yZ4W6V9Si:Zf`b=h", "-yZ4W6V9Si:Zf`b=h");	      	      String string0 = StringUtils.lowerCase("", locale0);	      	      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();	      	      String string1 = StringUtils.join((Iterable<?>) priorityQueue0, "");	      	      boolean boolean1 = StringUtils.containsAny((CharSequence) "", (CharSequence) "");	      	      Class<CharBuffer> class0 = CharBuffer.class;	      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();	      	      classLoader0.clearAssertionStatus();	      ServiceLoader<CharBuffer> serviceLoader0 = ServiceLoader.load(class0, classLoader0);	      	      Iterator<CharBuffer> iterator0 = serviceLoader0.iterator();	      	      String string2 = StringUtils.join(iterator0, '~');	      	      String string3 = StringUtils.chomp("", "-yZ4W6V9Si:Zf`b=h");	      	      char[] charArray0 = new char[2];	      charArray0[0] = '~';	      charArray0[1] = 'Q';	      int int0 = StringUtils.indexOfAny((CharSequence) "-yZ4W6V9Si:Zf`b=h", charArray0);	      	      // Undeclared exception!	      try { 	        StringUtils.repeat('~', (-1));	        fail("Expecting exception: NegativeArraySizeException");	      	      } catch(NegativeArraySizeException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      int int0 = strBuilder_StrBuilderReader0.read();	      	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');	      	      StrMatcher strMatcher0 = StrMatcher.tabMatcher();	      	      StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0);	      	      char[] charArray0 = new char[2];	      charArray0[0] = '/';	      charArray0[1] = '/';	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      	      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);	      	      strBuilder_StrBuilderReader0.close();	      	      StrBuilder strBuilder3 = strBuilder1.append((long) 104);	      	      StrBuilder strBuilder4 = strBuilder3.appendSeparator("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", (String) null);	      	      StrBuilder strBuilder5 = strBuilder3.ensureCapacity(104);	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      	      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));	      	      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT");	      	      char[] charArray1 = new char[2];	      	      charArray1[0] = '/';	      charArray1[1] = '/';	      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);	      	      int int2 = strBuilder4.lastIndexOf('/');	      	      // Undeclared exception!	      try { 	        strBuilder0.appendln("hZ3CNnc|]e", 101, 97);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test public void testOnCreateWhenAnnotationsAreDisabled() {		// Arrange:		FragmentAnnotations.setEnabled(false);		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final WebFragment fragment = new WebFragment();		// Act:		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		// Assert:		assertThat(fragment.getContent(), is(nullValue()));	}
@Test(timeout = 4000)	  public void testremoveEndIgnoreCase()  throws Throwable  {	      String string0 = StringUtils.substringBeforeLast("?M%I", "?M%I");	      	      String string1 = StringUtils.removeEndIgnoreCase("", "");	      	      boolean boolean0 = StringUtils.equalsIgnoreCase("?M%I", "?M%I");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "C#a0VQ>;6gU>XB", 0);	      	      String string2 = StringUtils.abbreviateMiddle((String) null, (String) null, 0);	      	      String string3 = StringUtils.capitalize("\"1}*rsaeIJHr>>");	      	      int int0 = StringUtils.indexOfAnyBut((CharSequence) "\"1}*rsaeIJHr>>", (CharSequence) "");	      	      String string4 = StringUtils.substringBeforeLast("", "");	  }
@Test    public void testGetDataSourceInstanceConstructor()                            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,                            InvocationTargetException, InstantiationException {        DataSourceConnectionProvider.DataSource config = new DataSourceConnectionProvider.DataSource();        config.setJavaClass( DataSourceMock.class.getCanonicalName() );        DataSource ds = initializer.getDataSourceInstance( config );        assertNotNull( ds );        assertTrue( ds instanceof DataSourceMock );    }
@Test(timeout = 4000)	  public void testdeleteWhitespace()  throws Throwable  {	      String string0 = "zBg";	      String[] stringArray0 = StringUtils.splitPreserveAllTokens("zBg");	      	      char char0 = '~';	      String string1 = StringUtils.leftPad("zBg", (-2770), '~');	      	      String string2 = StringUtils.deleteWhitespace("zBg");	      	      String string3 = StringUtils.join((Object[]) stringArray0, 'g');	      	      String string4 = "', is neither of type Map.Entry nor an Array";	      String string5 = StringUtils.right("', is neither of type Map.Entry nor an Array", (-4112));	      	      PriorityQueue<Object> priorityQueue0 = null;	      try {	        priorityQueue0 = new PriorityQueue<Object>((SortedSet<?>) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.util.PriorityQueue", e);	      }	  }
@Test(timeout = 4000)	  public void testtoChar()  throws Throwable  {	      Character character0 = CharUtils.toCharacterObject("");	  }
@Test  public void testArbitraryAction() throws Exception {    createAndVerifyUserAction("arbitraryType", "session123", "mp", "me", "127.0.0.1", 10, 20);    Assert.assertEquals(1, service.getViews("mp"));    Assert.assertEquals(0, service.getViews("other"));    //Test various limit and offset combinations    //https://bugs.eclipse.org/bugs/show_bug.cgi?id=328730    verifyUserActionLists(1, 0, 0, 1);    verifyUserActionLists(1, 0, 1, 1);    verifyUserActionLists(0, 1, 0, 1);    verifyUserActionLists(0, 1, 1, 1);    verifyUserActionLists(1, 0, 10, 1);  }
@Test    void testEmptyManifestSize() {        CentralizedManifest manifest = new CentralizedManifest();        Assertions.assertEquals(0, manifest.size());    }
@Test    public void readWriteDoubleNDim() throws Exception {        MatFile input = MatTestUtil.readMat("arrays/multiDimMatrix.mat");        compressedWriter.writeMat(input);        buffer.flip();        MatFile output = Mat5.newReader(Sources.wrap(buffer)).readMat();        Matrix expected = input.getArray("in");        Matrix actual = output.getArray("in");        Assert.assertEquals(expected.getType(), actual.getType());        Assert.assertArrayEquals(expected.getDimensions(), actual.getDimensions());        // Access sequentially using raw store        int numElements = expected.getNumElements();        for (int i = 0; i < numElements; i++) {            Assert.assertEquals(expected.getDouble(i), actual.getDouble(i), 0);        }    }
@Test    public void testGetDatasetMetadata()                            throws Exception {        DefaultOWSMetadataProvider metadataProvider = createProvider();        List<DatasetMetadata> datasetMetadata = metadataProvider.getDatasetMetadata();        assertThat( datasetMetadata.size(), is( 3 ) );    }
@Test(timeout = 4000)	  public void testis()  throws Throwable  {	      Integer integer0 = new Integer((-43));	      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      doReturn((-2081), (-1)).when(comparator0).compare(any() , any());	      Range<Object> range0 = Range.is((Object) integer0, comparator0);	      boolean boolean0 = range0.isStartedBy(integer0);	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testGetColumnByIndexUnknown() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        store.getColumnByIndex(10);    }
@Test  public void testToMapWith() throws Exception {    JSONObject json = new JSONObject();    json.put("boolean", true);    json.put("string", "String");    json.put("double", 1.3);    Map<String, String> map = JSONUtils.toMap(json);    assertEquals("true", map.get("boolean"));    assertEquals("String", map.get("string"));    assertEquals("1.3", map.get("double"));  }
@Test public void testIsPowerSaveModeActive() {		// Act + Assert:		assertThat(FragmentUtils.isPowerSaveModeActive(context), is(false));	}
@Test(timeout = 4000)	  public void testtoStringBuffer()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      int int0 = strBuilder0.indexOf("2X:=4rf^>1T./&0xdS");	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      	      StrBuilder strBuilder1 = strBuilder0.trim();	      	      StrBuilder strBuilder2 = strBuilder0.deleteFirst((StrMatcher) null);	  }
@Test(timeout = 4000)	  public void testreverse()  throws Throwable  {	      float[] floatArray0 = new float[8];	      ArrayUtils.reverse(floatArray0);	  }
@Test    public void testParsingPhilosopherAndWFS()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaURL = this.getClass().getResource( "../misc/schema/Philosopher.xsd" ).toString();        String schemaURL2 = "http://schemas.opengis.net/wfs/1.1.0/wfs.xsd";        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaURL, schemaURL2 );        List<FeatureType> fts = adapter.extractAppSchema().getFeatureTypes( "http://www.deegree.org/app", false, false );        Assert.assertEquals( 4, fts.size() );    }
@SuppressWarnings("ResourceType")	@Test public void testOnCreateOptionsMenu() {		// Arrange:		final ActionBarFragment fragment = new TestFragmentWithMenuOptions();		final Menu mockMenu = mock(Menu.class);		final MenuInflater mockMenuInflater = mock(MenuInflater.class);		// Act:		fragment.onCreateOptionsMenu(mockMenu, mockMenuInflater);		// Assert:		verify(mockMenuInflater).inflate(TestFragmentWithMenuOptions.MENU_RESOURCE, mockMenu);		verifyNoMoreInteractions(mockMenuInflater);		verifyZeroInteractions(mockMenu);	}
@Test(timeout = 4000)	  public void teststripEnd()  throws Throwable  {	      String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj");	      	      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ");	      	      String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");	      	      String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN");	  }
@Test(timeout = 4000)	  public void testintToHex()  throws Throwable  {	      char char0 = Conversion.intToHexDigitMsb0(0);	  }
@Test(timeout = 4000)	  public void testappendSeparator()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(718);	      	      StrBuilder strBuilder1 = strBuilder0.appendln((long) 718);	      	      Object[] objectArray0 = new Object[1];	      objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter";	      StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0);	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();	      	      int int0 = strBuilder_StrBuilderReader0.read();	      	      StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z');	      	      StrBuilder strBuilder4 = new StrBuilder();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();	      	      strBuilder4.size = 55;	      	      char[] charArray0 = new char[0];	      // Undeclared exception!	      try { 	        strBuilder4.toString();	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	      }	  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      assertNull(strBuilder0.getNewLineText());	      	      StringBuilder stringBuilder0 = new StringBuilder(4);	      	      StringBuilder stringBuilder1 = stringBuilder0.append(0);	      	      StringBuilder stringBuilder2 = stringBuilder1.append((-771.0));	      	      char[] charArray0 = new char[4];	      charArray0[0] = 'k';	      charArray0[1] = '$';	      charArray0[2] = '?';	      charArray0[3] = 'N';	      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);	      	      StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0);	      	      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder4);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      	      strBuilder_StrBuilderWriter0.write("'fe:RqN$");	      assertNull(strBuilder0.getNewLineText());	      	      strBuilder_StrBuilderWriter0.write("");	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-1729), (-1729));	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      	      StrBuilder strBuilder3 = strBuilder0.setNewLineText("'fe:RqN$");	      assertEquals("'fe:RqN$", strBuilder3.getNewLineText());	      assertEquals("'fe:RqN$", strBuilder0.getNewLineText());	      	      // Undeclared exception!	      try { 	        strBuilder3.subSequence((-1729), (-3524));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1729	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testappendSeparator()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");	      	      StrBuilder strBuilder1 = strBuilder0.appendSeparator('2');	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      	      StringWriter stringWriter0 = new StringWriter();	      	      StringBuffer stringBuffer0 = stringWriter0.getBuffer();	      	      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);	      	      strBuilder0.hashCode();	      	      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870);	      	      int int1 = strBuilder0.lastIndexOf('', 0);	  }
@Test  public void testGetParentJobId() throws Exception {    assertEquals((Long) 3L, job.getParentJobId());  }
@Test    public void testClear() {        NodeStore nodeStore = new NodeStore();        nodeStore.clear();        NodeImpl node = new NodeImpl("0");        nodeStore.add(node);        nodeStore.clear();        Assert.assertTrue(nodeStore.isEmpty());        Assert.assertEquals(nodeStore.size(), 0);        Assert.assertFalse(nodeStore.contains(node));        Assert.assertEquals(node.getStoreId(), NodeStore.NULL_ID);    }
@Test    public void testSize() {        NodeStore nodeStore = new NodeStore();        NodeImpl n1 = new NodeImpl("0");        NodeImpl n2 = new NodeImpl("1");        nodeStore.add(n1);        nodeStore.add(n2);        Assert.assertEquals(nodeStore.size(), 2);        nodeStore.remove(n1);        Assert.assertEquals(nodeStore.size(), 1);        nodeStore.remove(n2);        Assert.assertEquals(nodeStore.size(), 0);        Assert.assertTrue(nodeStore.isEmpty());    }
@Test(timeout = 4000)	  public void testhashCode()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();	      hashCodeBuilder0.append((Object) null);	      assertEquals(629, hashCodeBuilder0.toHashCode());	  }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      char[] charArray0 = new char[5];	      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, "Invalid offset: ");	      List<String> list0 = strTokenizer0.getTokenList();	  }	}
@Test(timeout = 4000)	  public void testtoStringExclude()  throws Throwable  {	      Integer integer0 = new Integer((-74));	      String string0 = ReflectionToStringBuilder.toStringExclude((Object) integer0, (Collection<String>) null);	  }
@Test    public void testIteratorEmpty() {        EdgeStore edgeStore = new EdgeStore();        EdgeStore.EdgeStoreIterator itr = edgeStore.iterator();        Assert.assertFalse(itr.hasNext());    }
@Test(timeout = 4000)	  public void testcompareTo()  throws Throwable  {	      MutableInt mutableInt0 = new MutableInt((-2587));	      MutableInt mutableInt1 = new MutableInt(mutableInt0);	      mutableInt1.add((Number) mutableInt0);	      int int0 = mutableInt0.compareTo(mutableInt1);	  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      String string0 = StringUtils.replace("Z|&xc}e&+;", "Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 5021);	      	      char[] charArray0 = new char[6];	      charArray0[0] = 'h';	      charArray0[1] = 'm';	      charArray0[2] = 'R';	      charArray0[3] = 'M';	      charArray0[4] = '=';	      charArray0[5] = '5';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "', is neither of type Map.Entry nor an Array", charArray0);	      assertEquals(6, charArray0.length);	      	      String string1 = StringUtils.overlay("Z|&xc}e&+;", "', is neither of type Map.Entry nor an Array", 3156, 3156);', is neither of type Map.Entry nor an Array", string1);	      	      String string2 = StringUtils.defaultString("', is neither of type Map.Entry nor an Array");	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "', is neither of type Map.Entry nor an Array", (CharSequence) "Z|&xc}e&+;', is neither of type Map.Entry nor an Array", 3156);	      	      String string3 = StringUtils.substring("', is neither of type Map.Entry nor an Array", (-3453));	      	      Object[] objectArray0 = new Object[6];	      objectArray0[0] = (Object) "', is neither of type Map.Entry nor an Array";	      Object object0 = new Object();	      	      objectArray0[1] = object0;	      objectArray0[2] = (Object) "', is neither of type Map.Entry nor an Array";	      objectArray0[3] = (Object) 'm';	      objectArray0[4] = (Object) 'R';	      objectArray0[5] = (Object) '5';	      // Undeclared exception!	      try { 	        StringUtils.join(objectArray0, (String) null, (-3453), 2241);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // -3453	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      int int0 = 79;	      StrBuilder strBuilder0 = new StrBuilder(79);	      assertTrue(strBuilder0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.append((double) 79);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      int int1 = (-2267);	      StrBuilder strBuilder2 = strBuilder0.appendln((Object) strBuilder0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      StrBuilder strBuilder3 = strBuilder2.deleteAll('o');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      	      strBuilder3.buffer = null;	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      	      String string0 = "nCIF=^XRVL:\\t%AH&";	      // Undeclared exception!	      try { 	        strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testjoin()  throws Throwable  {	      String string0 = StringUtils.join((Object[]) null, 'z', 0, (-2270));	      	      String string1 = StringUtils.substring((String) null, 0);	      	      CharSequence[] charSequenceArray0 = new CharSequence[1];	      charSequenceArray0[0] = (CharSequence) null;	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	      	      String string2 = StringUtils.leftPad("", 0, 'z');	  }
@Test(timeout = 4000)	  public void testtrim()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2");	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      char[] charArray0 = new char[1];	      int int0 = strBuilder_StrBuilderReader0.read(charArray0);	      	      charArray0[0] = 'n';	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      	      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);	      	      boolean boolean0 = strBuilder_StrBuilderReader0.ready();	      	      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();	      	      StrBuilder strBuilder1 = strBuilder0.replaceFirst(strMatcher0, "D:qv{0F`Yb3&H^f*N2");	      	      StrBuilder strBuilder2 = strBuilder0.appendSeparator("D:qv{0F`Yb3&H^f*N2", 1);	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) strBuilder0;	      objectArray0[1] = (Object) charBuffer0;	      objectArray0[2] = (Object) strBuilder0;	      objectArray0[3] = (Object) strBuilder1;	      CharBuffer charBuffer1 = CharBuffer.allocate(0);	      	      StrBuilder strBuilder3 = strBuilder2.append("D:qv{0F`Yb3&H^f*N2", objectArray0);	      	      StrBuilder strBuilder4 = strBuilder0.append((Object) "");	      	      String string0 = strBuilder4.leftString(1);	      	      int int2 = strBuilder3.size();	      	      StrBuilder strBuilder5 = strBuilder3.appendln(true);	      	      StrBuilder strBuilder6 = strBuilder3.appendSeparator("~G;2|T ", 1);	      	      StrBuilder strBuilder7 = strBuilder6.trim();	      	      Locale locale0 = Locale.CANADA;	      	      Set<String> set0 = locale0.getUnicodeLocaleKeys();	      	      StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) set0);	  }
@Test    public void parseLinearRing()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        GMLStreamReader gmlReader = getParser( "LinearRing.gml" );        XMLStreamReader xmlReader = gmlReader.getXMLReader();        Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "LinearRing" ), xmlReader.getName() );        Ring ring = (Ring) gmlReader.readGeometry();        Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "LinearRing" ), xmlReader.getName() );        Assert.assertEquals( 1, ring.getMembers().size() );        Assert.assertEquals( 1, ring.getMembers().get( 0 ).getCurveSegments().size() );        Assert.assertTrue( ring.getMembers().get( 0 ).getCurveSegments().get( 0 ) instanceof LineStringSegment );        Assert.assertEquals( 7, ring.getMembers().get( 0 ).getAsLineString().getControlPoints().size() );    }
@Test public void testStartActionMode() {		// Arrange:		final ActionBarFragment fragment = new TestFragment();		final ActivityDelegate mockActivityDelegate = mock(ActivityDelegate.class);		final ActionMode mockActionMode = mock(ActionMode.class);		when(mockActivityDelegate.startActionMode(any(ActionMode.Callback.class))).thenReturn(mockActionMode);		fragment.activityDelegate = mockActivityDelegate;		// Act + Assert:		assertThat(fragment.startActionMode(), is(true));		assertThat(fragment.isInActionMode(), is(true));		assertThat(fragment.getActionMode(), is(mockActionMode));	}
@Test  public void testHigherLimitThanSources() {    smartIterator = new SmartIterator(10, 0);    Map<String, Object> unfilteredList = createMap(5);    Map<String, Object> filteredList = smartIterator.applyLimitAndOffset(unfilteredList);    assertMapContainsOnly(filteredList, 0, 1, 2, 3, 4);  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      Object object0 = new Object();	      ToStringStyle toStringStyle0 = ToStringStyle.NO_FIELD_NAMES_STYLE;	      StringBuffer stringBuffer0 = new StringBuffer();	      ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0);	      float[] floatArray0 = new float[7];	      toStringBuilder0.append("", floatArray0, true);	  }
@Test(timeout = 4000)	  public void testremoveStart()  throws Throwable  {	      String string0 = StringUtils.substringBeforeLast("BnJbN*", "ARM45");	      	      String string1 = StringUtils.trimToEmpty("BnJbN*");	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "ARM45");	      	      String string2 = StringUtils.swapCase("BnJbN*");	      	      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();	      	      HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0);	      	      boolean boolean0 = hashSet0.add("BnJbN*");	      	      String string3 = StringUtils.join((Iterable<?>) hashSet0, 's');	      	      String string4 = StringUtils.chomp("", "bNjBn*");	      	      boolean boolean1 = StringUtils.contains((CharSequence) "", (-1));	      	      Object[] objectArray0 = new Object[1];	      objectArray0[0] = (Object) "java.lang.String@0000000001";	      String string5 = StringUtils.join(objectArray0, 'x', (-1), (-1));	      	      String string6 = StringUtils.strip("B,3", "");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("ARM45", "ARM45", 3207);	      	      String string7 = StringUtils.join((Iterator<?>) null, "A}&z47|p01e");	      	      String string8 = StringUtils.removeStart("jh", "jh");	      	      String string9 = StringUtils.abbreviate("", (-1), 3207);	  }
@Test  public void readFromNode() throws Exception {    final DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();    dbf.setNamespaceAware(true);    final Document doc = dbf.newDocumentBuilder().parse(        IoSupport.classPathResourceAsFile("/matterhorn-inlined-list-records-response.xml").get());    final NamespaceContext ctx = XmlNamespaceContext.mk(        XmlNamespaceBinding.mk("inlined", "http://www.opencastproject.org/oai/matterhorn-inlined"),        XmlNamespaceBinding.mk("mp", "http://mediapackage.opencastproject.org"),        XmlNamespaceBinding.mk("dc", DublinCores.OC_DC_CATALOG_NS_URI));    // extract media package    final Node mpNode = Xpath.mk(doc, ctx).node("//inlined:inlined/mp:mediapackage").get();    final MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder().loadFromXml(mpNode);    assertNotNull(mp);    assertEquals("10.0000/5820", mp.getIdentifier().toString());    // extract episode DublinCore    final Node dcNode = Xpath.mk(doc, ctx).node("//inlined:inlined/inlined:episode-dc/dc:dublincore").get();    final DublinCoreCatalog dc = DublinCoreXmlFormat.read(dcNode);    assertNotNull(dc);    assertEquals("10.0000/5820", DublinCores.mkOpencastEpisode(dc).getDcIdentifier().get());  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      assertNull(strBuilder0.getNullText());	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      assertNull(strBuilder0.getNullText());	      	      char[] charArray0 = new char[8];	      charArray0[0] = '9';	      charArray0[1] = '2';	      charArray0[2] = '>';	      charArray0[3] = 'C';	      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString("");	      assertNull(strBuilder0.getNullText());	      	      charArray0[4] = 'h';	      charArray0[5] = 'g';	      charArray0[6] = 'T';	      charArray0[7] = 'R';	      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, 0, 0);	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder1 = strBuilder0.replaceAll("w0cT", "w'+#G1I[");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StrBuilder strBuilder2 = strBuilder1.appendln(strBuilder0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      StrBuilder strBuilder3 = strBuilder0.replaceFirst('9', 'R');	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder3.getNullText());	      	      int int0 = strBuilder3.lastIndexOf('>', 228);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder3.getNullText());	  }
@Test    public void getEffectiveRpId() {        RpIdProviderImpl rpIdProvider = new RpIdProviderImpl();        MockHttpServletRequest httpServletRequest = new MockHttpServletRequest();        httpServletRequest.setScheme("https");        httpServletRequest.setServerName("example.com");        httpServletRequest.setServerPort(8080);        assertThat(rpIdProvider.provide(httpServletRequest)).isEqualTo("example.com");    }
@Test  public void testGetEventScheduling() throws IOException {    String expectedJson = IOUtils.toString(getClass().getResource("/event-scheduling-expected.json"), UTF_8);    String eventId = TestEventsEndpoint.SCHEDULING_GET_EVENT;    String result = given().pathParam("event_id", eventId).expect().statusCode(SC_OK).when()        .get(env.host("{event_id}/scheduling")).asString();    assertThat(result, SameJSONAs.sameJSONAs(expectedJson).allowingAnyArrayOrdering());  }
@Test    public void convertImagePathsToBase64WithoutAltLowerCase() throws Exception {        String result3 = repository.cacheFileFromArchive(module, "<p><IMG SRC= \"theatre_seats.jpg\"> ".toLowerCase());        assertNotNull(result3);        assertEquals(27879, result3.length());    }
@Test(timeout = 4000)	  public void testread()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(718);	      	      StrBuilder strBuilder1 = strBuilder0.appendln((long) 718);	      	      Object[] objectArray0 = new Object[1];	      objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter";	      StrBuilder strBuilder2 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder$StrBuilderWriter", objectArray0);	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      int int0 = strBuilder_StrBuilderReader0.read();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      StrBuilder strBuilder3 = strBuilder2.appendSeparator('d', 'Z');	      	      StrBuilder strBuilder4 = new StrBuilder();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();	      	      strBuilder4.size = 55;	      	      char[] charArray0 = new char[0];	      // Undeclared exception!	      try { 	        strBuilder4.toString();	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	      }	  }
@Test    public void testsetByte() throws Exception {        //given        final byte b0 = 0x45;        final byte b1 = 0x67;        final byte b2 = 0x76;        //when        final Pointer<Byte> bytePointer = Pointer.nref(b0,                                                       b1,                                                       b2);        //then        assertThat(JNITestUtil.getByte(bytePointer.address)).isEqualTo(b0);        assertThat(JNITestUtil.getByte(bytePointer.address + 1)).isEqualTo(b1);        assertThat(JNITestUtil.getByte(bytePointer.address + 2)).isEqualTo(b2);    }
@Test(timeout = 4000)	  public void testremoveEnd()  throws Throwable  {	      String string0 = StringUtils.removeEndIgnoreCase("Sn", "");	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "Sn";	      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'Z';	      charArray0[1] = '';	      charArray0[2] = '-';	      charArray0[3] = 'v';	      charArray0[4] = 'F';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("FXDeiw%p~");	      	      char char0 = '\"';	      char[] charArray0 = new char[5];	      charArray0[0] = '\"';	      charArray0[1] = '\"';	      charArray0[2] = '\"';	      IntStream intStream0 = strBuilder0.codePoints();	      	      charArray0[3] = '\"';	      charArray0[4] = '\"';	      StrBuilder strBuilder1 = strBuilder0.append(charArray0);	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) strBuilder0;	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();	      	      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1;	      objectArray0[2] = (Object) "FXDeiw%p~";	      Object object0 = new Object();	      	      objectArray0[3] = object0;	      // Undeclared exception!	      try { 	        strBuilder1.append("FXDeiw%p~", objectArray0);	        fail("Expecting exception: UnknownFormatConversionException");	      	      } catch(UnknownFormatConversionException e) {	         //	         // Conversion = 'p'	         //	         verifyException("java.util.Formatter$FormatSpecifier", e);	      }	  }
@Test(timeout = 4000)	  public void testgetLevenshteinDistance()  throws Throwable  {	      String string0 = StringUtils.chop("T");	      	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      charSequenceArray0[0] = (CharSequence) "T";	      charSequenceArray0[1] = (CharSequence) "T";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "T";	      charSequenceArray0[5] = (CharSequence) "T";	      charSequenceArray0[6] = (CharSequence) "";	      charSequenceArray0[7] = (CharSequence) "T";	      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);	      	      String string1 = StringUtils.removePattern("", "");	      	      String string2 = StringUtils.substring((String) null, (-4035));	      	      String string3 = StringUtils.trim((String) null);	      	      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);	      	      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);	      	      String[] stringArray0 = new String[3];	      stringArray0[0] = "T";	      stringArray0[1] = "";	      stringArray0[2] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);	      	      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");	      	      // Undeclared exception!	      StringUtils.rightPad("Minimum abbreviation width with offset is 7", 32767, "=~%A6;?UjK");	  }
@Test  public void testAudioVideo() throws Exception {    operationInstance.setConfiguration("source-tags", "");    operationInstance.setConfiguration("source-flavor", "*/video-audio");    operationInstance.setConfiguration("source-flavors", "");    operationInstance.setConfiguration("target-flavor", "*/normalized");    operationInstance.setConfiguration("target-tags", "norm");    operationInstance.setConfiguration("force-transcode", "false");    operationInstance.setConfiguration("target-decibel", "-30");    WorkflowOperationResult result = operationHandler.start(instance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 4, result.getMediaPackage()            .getElements().length);    Track[] tracks = result.getMediaPackage().getTracks(new MediaPackageElementFlavor("presentation", "normalized"));    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 1, tracks.length);    Assert.assertTrue(tracks[0].containsTag("norm"));    TrackImpl audioVideo = (TrackImpl) tracks[0];    Assert.assertEquals(-30f, audioVideo.getAudio().get(0).getRmsLevDb().floatValue(), 0.001d);    tracks = result.getMediaPackage().getTracks(new MediaPackageElementFlavor("presentation", "video-audio"));    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 1, tracks.length);    audioVideo = (TrackImpl) tracks[0];    Assert.assertNull(audioVideo.getAudio().get(0).getRmsLevDb());  }
@Test  public void testParseDFSURI() throws Exception {    // warehouse hdfs, path /    assertEquals("hdfs://namenode:8020/tmp/hive-user", PathUtils.      parseDFSURI("hdfs://namenode:8020/user/hive/warehouse", "/tmp/hive-user"));    // warehouse hdfs, path hdfs    assertEquals("hdfs://namenode:8020/tmp/hive-user", PathUtils.      parseDFSURI("hdfs://namenode:8020/user/hive/warehouse", "hdfs://namenode:8020/tmp/hive-user"));    try {      PathUtils.parseDFSURI("hdfs://namenode:8020/user/hive/warehouse", "tmp/hive-user");      fail("IllegalArgumentException should be thrown");    } catch (IllegalArgumentException ue) {    }    // warehouse swift, path /    assertEquals("swift://namenode:8020/tmp/hive-user",        PathUtils.parseDFSURI("swift://namenode:8020/user/hive/warehouse", "/tmp/hive-user"));    // warehouse swift, path swift    assertEquals("swift://namenode:8020/tmp/hive-user", PathUtils.parseDFSURI(        "swift://namenode:8020/user/hive/warehouse", "swift://namenode:8020/tmp/hive-user"));    try {      PathUtils.parseDFSURI("swift://namenode:8020/user/hive/warehouse", "tmp/hive-user");      fail("IllegalArgumentException should be thrown");    } catch (IllegalArgumentException ue) {    }    // warehouse file:///, path /    assertEquals("file:///tmp/hive-user", PathUtils.      parseDFSURI("file:///tmp/hive-warehouse", "/tmp/hive-user"));    // warehouse file:///, path file:/    assertEquals("file:///tmp/hive-user", PathUtils.      parseDFSURI("file:///tmp/hive-warehouse", "file:/tmp/hive-user"));    // warehouse file:///, path file:///    assertEquals("file:///tmp/hive-user", PathUtils.      parseDFSURI("file:///tmp/hive-warehouse", "file:///tmp/hive-user"));    try {      PathUtils.parseDFSURI("file:///hive-warehouse", "tmp/hive-user");      fail("IllegalArgumentException should be thrown");    } catch (IllegalArgumentException ue) {    }    // warehouse file:/, path /    assertEquals("file:///tmp/hive-user", PathUtils.      parseDFSURI("file:/tmp/hive-warehouse", "/tmp/hive-user"));    // warehouse file:/, path file:/    assertEquals("file:///tmp/hive-user", PathUtils.      parseDFSURI("file:/tmp/hive-warehouse", "file:/tmp/hive-user"));    // warehouse file:/, path file:///    assertEquals("file:///tmp/hive-user", PathUtils.      parseDFSURI("file:/tmp/hive-warehouse", "file:///tmp/hive-user"));    // for local test case    assertEquals("file:///tmp/hive-user",        PathUtils.parseURI("testLocal:///tmp/hive-warehouse", "/tmp/hive-user", true));    try {      PathUtils.parseURI("testLocal:///tmp/hive-warehouse", "tmp/hive-user", true);      fail("IllegalStateException should be thrown");    } catch (IllegalArgumentException ue) {    }    // warehouse /, path /    assertEquals("file:///tmp/hive-user",        PathUtils.parseDFSURI("/tmp/hive-warehouse", "/tmp/hive-user"));  }
@Test(expected = SentryNoSuchObjectException.class)  public void testAddDeleteGroupsNonExistantRole()      throws Exception {    String roleName = "non-existant-role";    String grantor = "g1";    Set<TSentryGroup> groups = Sets.newHashSet();    sentryStore.alterSentryRoleAddGroups(grantor, roleName, groups);  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNullText());	      	      strBuilder0.size = 6;	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder1 = strBuilder0.replaceFirst('#', '#');	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      String string0 = strBuilder1.toString();	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StrBuilder strBuilder2 = strBuilder1.append(6);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      boolean boolean0 = strBuilder2.equals((Object) strBuilder0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      StrBuilder strBuilder3 = strBuilder0.append((String) null, 6, 1077);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder3.getNullText());	      	      boolean boolean1 = strBuilder2.equals(strBuilder3);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      assertNull(strBuilder3.getNullText());	      	      char[] charArray0 = new char[5];	      charArray0[0] = '#';	      charArray0[1] = '#';	      charArray0[2] = '#';	      charArray0[3] = '#';	      StrBuilder strBuilder4 = strBuilder1.appendln(0L);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder4.getNullText());	      	      StrBuilder strBuilder5 = strBuilder1.replaceAll("", "\u0000\u0000\u0000\u0000\u0000\u0000");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder5.getNullText());	      	      charArray0[4] = '#';	      StrBuilder strBuilder6 = strBuilder2.appendln(charArray0, 0, 0);	      assertNull(strBuilder6.getNullText());	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder6.new StrBuilderReader();	      assertNull(strBuilder6.getNullText());	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      // Undeclared exception!	      try { 	        strBuilder_StrBuilderReader0.read(charArray0, 1724, 0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);	      }	  }
@Test(timeout = 4000)	  public void testrightPad()  throws Throwable  {	      String string0 = StringUtils.leftPad((String) null, 114);	      	      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));	      	      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);	      	      String[] stringArray0 = StringUtils.split("\n", 'e');	      	      String string1 = StringUtils.removeStart((String) null, "}%");	      	      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");	      	      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);	      	      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");	      	      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));	      	      String string5 = StringUtils.right("", (-240));	      	      String string6 = StringUtils.difference((String) null, "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);	      	      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");	      	      char[] charArray0 = new char[2];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);	      	      short[] shortArray0 = new short[8];	      shortArray0[0] = (short) (-700);	      shortArray0[1] = (short)2431;	      shortArray0[2] = (short)336;	      shortArray0[3] = (short) (-1905);	      shortArray0[4] = (short)2;	      shortArray0[5] = (short)16;	      shortArray0[6] = (short)0;	      shortArray0[7] = (short) (-2743);	      String string8 = StringUtils.join(shortArray0, ')');	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      Locale locale0 = Locale.JAPANESE;	      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);	      MockDate mockDate0 = new MockDate(0, 0, 0, 1, 0, 1);	      StringBuffer stringBuffer0 = new StringBuffer();	      fastDateFormat0.format((Date) mockDate0, stringBuffer0);	      assertEquals("1899\u5E7412\u670831\u65E5 1\u664200\u520601\u79D2 GMT", stringBuffer0.toString());	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseTimestampMapShortBadFormat() {        TimestampsParser.parseTimestampMap(Short.class, "[1, a]");    }
@Test(timeout = 4000)	  public void testclearByte()  throws Throwable  {	      BitField bitField0 = new BitField(0);	      byte byte0 = bitField0.clearByte((byte)25);	  }
@SuppressWarnings("unchecked")  @Test  public void KafkaDestination() throws Exception {    createKafkaTopic(TOPIC);    KafkaProducerConfiguration configs = new KafkaProducerConfiguration(this.bootstrapServers());    KafkaDestination kafkaDestination = new KafkaDestination(null, configs, x -> x, metrics, 0L);    List<Mutation> messages = new ArrayList<>();    messages.add(createMutation(MutationType.INSERT));    messages.add(createMutation(MutationType.UPDATE));    messages.add(createMutation(MutationType.DELETE));    kafkaDestination.publish(messages);    Properties props = new Properties();    props.setProperty("bootstrap.servers", this.bootstrapServers());    props.setProperty(        "key.deserializer", "org.apache.kafka.common.serialization.ByteArrayDeserializer");    props.setProperty(        "value.deserializer", "org.apache.kafka.common.serialization.ByteArrayDeserializer");    KafkaConsumer<byte[], byte[]> kafkaConsumer = new KafkaConsumer<>(props);    kafkaConsumer.assign(Collections.singletonList(new TopicPartition(TOPIC, 0)));    kafkaConsumer.seekToBeginning(new TopicPartition(TOPIC, 0));    List<ConsumerRecords<byte[], byte[]>> records = new ArrayList<>();    ConsumerRecords<byte[], byte[]> record;    long startMs = current();    while (current() - startMs <= 10000L) {      record = kafkaConsumer.poll(1000L);      records.add(record);      if (records.size() == 3) break;    }    Assert.assertEquals(records.size(), 3);    for (ConsumerRecords<byte[], byte[]> consumerRecords : records) {      for (ConsumerRecord<byte[], byte[]> consumerRecord : consumerRecords) {        com.airbnb.jitney.event.spinaltap.v1.Mutation mutation =            getMutation(consumerRecord.value());        switch (mutation.getType()) {          case INSERT:            Assert.assertEquals(mutation, createMutation(MutationType.INSERT));            break;          case UPDATE:            Assert.assertEquals(mutation, createMutation(MutationType.UPDATE));            break;          case DELETE:            Assert.assertEquals(mutation, createMutation(MutationType.DELETE));            break;        }      }    }    kafkaDestination.close();    kafkaConsumer.close();  }
@Test(timeout = 4000)	  public void testhexDigitToBinary()  throws Throwable  {	      // Undeclared exception!	      try { 	        Conversion.hexDigitToBinary('I');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Cannot interpret 'I' as a hexadecimal digit	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test(timeout = 4000)	  public void testatLeast()  throws Throwable  {	      JavaVersion javaVersion0 = JavaVersion.get("1.8");	      	      JavaVersion javaVersion1 = JavaVersion.JAVA_1_6;	      boolean boolean0 = javaVersion0.atLeast(javaVersion1);	  }
@Test  public void testEquals() {    assertEquals("Leading or trailing whitespace in the flavor type should be trimmed",            flavor(" \r \n \t type \t \n \r ", "subtype"), flavor("type", "subtype"));    assertEquals("Leading or trailing whitespace in the flavor subtype should be ignored",            flavor("type", " \r \n \t subtype \t \n \r "), flavor("type", "subtype"));    assertEquals("Leading or trailing whitespace in both the flavor type and subtype should be trimmed",            flavor(" \r \n \t type \t \n \r ", " \r \n \t subtype \t \n \r "), flavor("type", "subtype"));    assertEquals("Flavor type should be case-insensitive", flavor("TYPE", "subtype"), flavor("type", "subtype"));    assertEquals("Flavor type should be case-insensitive", flavor("type", "SUBTYPE"), flavor("type", "subtype"));    assertEquals("Flavor parts should be case-insensitive", flavor("TYPE", "SUBTYPE"), flavor("type", "subtype"));  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");	      assertFalse(strBuilder0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.appendSeparator('2');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      StringWriter stringWriter0 = new StringWriter();	      	      StringBuffer stringBuffer0 = stringWriter0.getBuffer();	      	      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      strBuilder0.hashCode();	      assertFalse(strBuilder0.isEmpty());	      	      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870);	      assertFalse(strBuilder0.isEmpty());	      	      int int1 = strBuilder0.lastIndexOf('', 0);	      assertFalse(strBuilder0.isEmpty());	  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNewLineText());	      	      StringBuilder stringBuilder0 = strBuilder0.toStringBuilder();	      assertNull(strBuilder0.getNewLineText());	      	      int int0 = 102;	      StrBuilder strBuilder1 = strBuilder0.append(102);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      	      char char0 = 'q';	      StrBuilder strBuilder2 = strBuilder1.append((double) 117);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      	      String string0 = strBuilder2.leftString(102);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      	      StrBuilder strBuilder3 = strBuilder0.appendSeparator('q', 117);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder3.getNewLineText());	      	      StrBuilder strBuilder4 = strBuilder1.append(stringBuilder0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder4.getNewLineText());	      	      // Undeclared exception!	      try { 	        strBuilder1.appendln(strBuilder3, 117, 1);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      String string0 = StringUtils.removeEndIgnoreCase("", "");	      	      CharSequence[] charSequenceArray0 = new CharSequence[0];	      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);	      	      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");	      	      boolean boolean1 = StringUtils.isAlpha("");	      	      TreeSet<String> treeSet0 = new TreeSet<String>();	      	      Iterator<String> iterator0 = treeSet0.descendingIterator();	      	      Locale locale0 = Locale.FRENCH;	      	      Set<String> set0 = locale0.getUnicodeLocaleKeys();	      	      boolean boolean2 = treeSet0.addAll(set0);	      	      String string1 = StringUtils.join(iterator0, "y)eN");	      	      String string2 = StringUtils.leftPad("", 16, 'c');	  }
@Test    public void testPushStore() {        int[] n = {100, 1000, 5000};        double[] p = {0.01, 0.1, 0.3};        for (int nodes : n) {            for (double prob : p) {                int edges = (int) (nodes * (nodes - 1) * prob);                NanoBench.create().measurements(2).measure("push edge store nodes=" + nodes + " edges=" + edges, new EdgeStoreBenchmark().pushEdgeStore(nodes, prob));            }        }    }
@Test(timeout = 4000)	  public void testjoin()  throws Throwable  {	      String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2);	      	      String string1 = StringUtils.chop("");	      	      boolean boolean0 = StringUtils.isAllLowerCase("");	      	      short[] shortArray0 = new short[2];	      shortArray0[0] = (short)947;	      shortArray0[1] = (short)7;	      String string2 = StringUtils.join(shortArray0, 'j');	      	      String[] stringArray0 = new String[6];	      stringArray0[0] = null;	      stringArray0[1] = "(?: s|[s&&[^ ]])s*";	      stringArray0[2] = "";	      stringArray0[3] = "Y&WlANKSO=(p&";	      stringArray0[4] = "";	      stringArray0[5] = "947j7";	      String[] stringArray1 = new String[8];	      	      stringArray1[0] = "Y&WlANKSO=(p&";	      stringArray1[1] = "(?: s|[s&&[^ ]])s*";	      stringArray1[2] = "";	      stringArray1[3] = "947j7";	      stringArray1[4] = "(?: s|[s&&[^ ]])s*";	      stringArray1[5] = "(?: s|[s&&[^ ]])s*";	      stringArray1[6] = "947j7";	      stringArray1[7] = "(?: s|[s&&[^ ]])s*";	      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray1);	      	      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, (-1599));	  }
@Test(timeout = 4000)	  public void testof()  throws Throwable  {	      Integer integer0 = new Integer((-1));	      Pair<Object, Object> pair0 = Pair.of((Object) integer0, (Object) integer0);	      Object object0 = pair0.getLeft();	  }
@Test    public void testGetDataSourceInstanceStaticFactoryWithArguments()                            throws ClassNotFoundException, NoSuchMethodException, IllegalAccessException,                            InvocationTargetException, InstantiationException {        DataSourceConnectionProvider.DataSource config = new DataSourceConnectionProvider.DataSource();        config.setJavaClass( DataSourceMockFactory.class.getCanonicalName() );        config.setFactoryMethod( "create" );        DataSourceConnectionProvider.DataSource.Argument stringArgument = new DataSourceConnectionProvider.DataSource.Argument();        stringArgument.setJavaClass( "java.lang.String" );        stringArgument.setValue( "aeiou" );        config.getArgument().add( stringArgument );        DataSourceConnectionProvider.DataSource.Argument intArgument = new DataSourceConnectionProvider.DataSource.Argument();        intArgument.setJavaClass( "java.lang.Integer" );        intArgument.setValue( "4711" );        config.getArgument().add( intArgument );        DataSourceMock ds = (DataSourceMock) initializer.getDataSourceInstance( config );        assertNotNull( ds );        assertTrue( ds instanceof DataSourceMock );        Assert.assertEquals( "aeiou", ds.getStringConstructorArg() );        Assert.assertEquals( 4711, ds.getIntConstructorArg() );    }
@Test  public void testNonStrictResourceChecking() throws Exception {    DateTime before = new DateTime(DateTimeZone.UTC);    before = before.plus(2 * 60 * 60 * 1000L);    String hostname = "signed.host.com";    String path = "/path/to/resource";    String rtmpResource = "rtmp://" + hostname + path;    String httpResource = "http://" + hostname + path;    String portResource = "rtmp://" + hostname + ":8080" + path;    String differentHostnameResource = "rtmp://different.host.com" + path;    Policy differentScheme = Policy.mkSimplePolicy(rtmpResource, before);    String signature = PolicyUtils.getPolicySignature(differentScheme, key);    String differentSchemeQueryString = ResourceRequest.ENCRYPTION_ID_KEY + "=default&" + ResourceRequest.POLICY_KEY + "="            + PolicyUtils.toBase64EncodedPolicy(differentScheme) + "&" + ResourceRequest.SIGNATURE_KEY + "="            + signature;    assertEquals(Status.Ok, ResourceRequestUtil            .resourceRequestFromQueryString(differentSchemeQueryString, clientIp, httpResource, properties, false).getStatus());    assertEquals(Status.Forbidden, ResourceRequestUtil            .resourceRequestFromQueryString(differentSchemeQueryString, clientIp, httpResource, properties, true).getStatus());    assertEquals(Status.Ok, ResourceRequestUtil            .resourceRequestFromQueryString(differentSchemeQueryString, clientIp, portResource, properties, false).getStatus());    assertEquals(Status.Forbidden, ResourceRequestUtil            .resourceRequestFromQueryString(differentSchemeQueryString, clientIp, portResource, properties, true).getStatus());    assertEquals(Status.Ok, ResourceRequestUtil            .resourceRequestFromQueryString(differentSchemeQueryString, clientIp, differentHostnameResource, properties, false).getStatus());    assertEquals(Status.Forbidden, ResourceRequestUtil            .resourceRequestFromQueryString(differentSchemeQueryString, clientIp, differentHostnameResource, properties, true).getStatus());  }
@Test    public void givenArg$showWelcomeMessageWithMode_whenQuery_thenShouldCallNativeApiWithArg() {        // given        PowerMockito.mockStatic(Instabug.class);        Map<String, Object> args = new HashMap<>();        ArgsRegistry.registerWelcomeMessageArgs(args);        final String[] keysArray = args.keySet().toArray(new String[0]);        // when        for (String key : keysArray) {            rnModule.showWelcomeMessageWithMode(key);        }        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        for (String key : keysArray) {            WelcomeMessage.State state = (WelcomeMessage.State) args.get(key);            Instabug.showWelcomeMessage(state);        }    }
@Test(timeout = 4000)	  public void testgetStart()  throws Throwable  {	      CharRange charRange0 = CharRange.isNotIn('{', '~');	      char char0 = charRange0.getEnd();	      assertEquals('{', charRange0.getStart());	  }
@Test    public void indexOfWithOffset() throws Exception {        int index = new BoyerMoorAlgorithm("abbad").indexOf("abeabbadccaabadbabbad", 4);        assertThat(index, equalTo(16));    }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      String string0 = "+[AQj^o1MB";	      StrBuilder strBuilder0 = new StrBuilder("+[AQj^o1MB");	      assertEquals(42, strBuilder0.capacity());	      	      int int0 = 2860;	      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(2860);	      assertEquals(5720, strBuilder0.capacity());	      assertEquals(5720, strBuilder1.capacity());	      	      StrBuilder strBuilder2 = strBuilder1.replaceAll('+', '6');	      assertEquals(5720, strBuilder0.capacity());	      assertEquals(5720, strBuilder1.capacity());	      assertEquals(5720, strBuilder2.capacity());	      	      StrBuilder strBuilder3 = strBuilder2.minimizeCapacity();	      assertEquals(10, strBuilder0.capacity());	      assertEquals(10, strBuilder1.capacity());	      assertEquals(10, strBuilder2.capacity());	      assertEquals(10, strBuilder3.capacity());	      	      // Undeclared exception!	      try { 	        strBuilder1.validateRange(2860, (-32768));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // end < start	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test	public void testValidRegister(){		assertEquals(user, userController.register(user));	}
@Test(timeout = 4000)	  public void testpreviousIndex()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");	      StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/.");	      strTokenizer0.next();	      strTokenizer0.setDelimiterMatcher(strMatcher0);	      assertEquals(0, strTokenizer0.previousIndex());	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");	      	      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");	      	      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);	      	      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');	      assertTrue(string1.equals((Object)string0));	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";	      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";	      int int1 = StringUtils.indexOfDifference(charSequenceArray0);	      	      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);	      assertFalse(string2.equals((Object)string0));	      assertFalse(string2.equals((Object)string1));	      	      String string3 = StringUtils.right("", 0);	      assertFalse(string3.equals((Object)string2));	      assertFalse(string3.equals((Object)string0));	      assertFalse(string3.equals((Object)string1));	      	      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);	      assertFalse(string4.equals((Object)string3));	      assertFalse(string4.equals((Object)string0));	      assertFalse(string4.equals((Object)string1));	      assertFalse(string4.equals((Object)string2));	      	      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");	      assertFalse(string5.equals((Object)string3));	      assertFalse(string5.equals((Object)string0));	      assertFalse(string5.equals((Object)string1));	      assertFalse(string5.equals((Object)string4));	      assertFalse(string5.equals((Object)string2));	      	      int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);	      	      String string6 = StringUtils.lowerCase("s");	      assertFalse(string6.equals((Object)string1));	      assertFalse(string6.equals((Object)string5));	      assertFalse(string6.equals((Object)string2));	      assertFalse(string6.equals((Object)string0));	      assertFalse(string6.equals((Object)string4));	      assertFalse(string6.equals((Object)string3));	      	      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);	      assertFalse(string7.equals((Object)string4));	      assertFalse(string7.equals((Object)string0));	      assertFalse(string7.equals((Object)string6));	      assertFalse(string7.equals((Object)string3));	      assertFalse(string7.equals((Object)string5));	      assertFalse(string7.equals((Object)string1));	      assertFalse(string7.equals((Object)string2));	      	      String[] stringArray0 = new String[9];	      stringArray0[0] = ".ti')kKzb5J(cbBlh";	      stringArray0[1] = "s";	      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";	      stringArray0[3] = "s";	      stringArray0[4] = "s";	      stringArray0[5] = "{}";	      stringArray0[6] = "{}";	      stringArray0[7] = "";	      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";	      String string8 = StringUtils.getCommonPrefix(stringArray0);	      assertFalse(string8.equals((Object)string7));	      assertFalse(string8.equals((Object)string4));	      assertFalse(string8.equals((Object)string2));	      assertFalse(string8.equals((Object)string6));	      assertTrue(string8.equals((Object)string3));	      assertFalse(string8.equals((Object)string0));	      assertFalse(string8.equals((Object)string1));	      assertFalse(string8.equals((Object)string5));	      	      boolean boolean1 = StringUtils.startsWithAny("{}", charSequenceArray0);	  }
@Test    public void testDeepHashCode() {        EdgeTypeStore edgeTypeStore1 = new EdgeTypeStore();        edgeTypeStore1.addType("Foo");        edgeTypeStore1.addType("Bar");        edgeTypeStore1.removeType("Foo");        EdgeTypeStore edgeTypeStore2 = new EdgeTypeStore();        edgeTypeStore2.addType("Foo");        edgeTypeStore2.addType("Bar");        edgeTypeStore2.removeType("Foo");        EdgeTypeStore edgeTypeStore3 = new EdgeTypeStore();        edgeTypeStore3.addType("Foo");        Assert.assertEquals(edgeTypeStore1.deepHashCode(), edgeTypeStore2.deepHashCode());        Assert.assertNotEquals(edgeTypeStore1.deepHashCode(), edgeTypeStore3.deepHashCode());    }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = StringUtils.leftPad((String) null, 114);	      	      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));	      	      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);	      	      String[] stringArray0 = StringUtils.split((String) null, 'e');	      	      String string1 = StringUtils.removeStart((String) null, "}%");	      	      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");	      	      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);	      	      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");	      assertFalse(string4.equals((Object)string2));	      	      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);	      assertFalse(string4.equals((Object)string2));	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));	      	      String string5 = StringUtils.right("", (-240));	      assertFalse(string5.equals((Object)string4));	      assertFalse(string5.equals((Object)string2));	      	      String string6 = StringUtils.repeat("", (-240));	      assertFalse(string6.equals((Object)string4));	      assertFalse(string6.equals((Object)string2));	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);	      assertFalse(string4.equals((Object)string6));	      assertFalse(string4.equals((Object)string2));	      assertFalse(string4.equals((Object)string5));	      	      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");	      assertFalse(string7.equals((Object)string6));	      assertFalse(string7.equals((Object)string4));	      assertFalse(string7.equals((Object)string2));	      assertFalse(string7.equals((Object)string5));	      	      char[] charArray0 = new char[2];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);	      	      short[] shortArray0 = new short[8];	      shortArray0[0] = (short) (-700);	      shortArray0[1] = (short)2431;	      shortArray0[2] = (short)336;	      shortArray0[3] = (short) (-1905);	      shortArray0[4] = (short)2;	      shortArray0[5] = (short)16;	      shortArray0[6] = (short)0;	      shortArray0[7] = (short) (-2743);	      String string8 = StringUtils.join(shortArray0, ')');	      assertFalse(string8.equals((Object)string6));	      assertFalse(string8.equals((Object)string4));	      assertFalse(string8.equals((Object)string2));	      assertFalse(string8.equals((Object)string7));	      assertFalse(string8.equals((Object)string5));	  }
@Test(timeout = 4000)	  public void testwrap()  throws Throwable  {	      char[] charArray0 = new char[8];	      String string0 = WordUtils.wrap("VYoR'Q]DXC.]J.nI", (-180), "^^+Ha77:)gARnl^eta+^+Ha77:)gARnl^etaH^+Ha77:)gARnl^etaa^+Ha77:)gARnl^eta7^+Ha77:)gARnl^eta7^+Ha77:)gARnl^eta:^+Ha77:)gARnl^eta)^+Ha77:)gARnl^eta^+Ha77:)gARnl^etag^+Ha77:)gARnl^etaA^+Ha77:)gARnl^etaR^+Ha77:)gARnl^etan^+Ha77:)gARnl^etal^+Ha77:)gARnl^eta^^+Ha77:)gARnl^etae^+Ha77:)gARnl^etat^+Ha77:)gARnl^etaa", true);	      // Undeclared exception!	      WordUtils.initials(string0, charArray0);	  }
@Test    public void execute_open_events() throws InterruptedException {        // prepare        executor = new OrderedHandlerExecutor(1, 1);        IoSession session = mock(IoSession.class);        when(session.getId()).thenReturn(12345L);        Event evt = mock(Event.class);        when(evt.getSession()).thenReturn(session);        // run        executor.execute(evt);        // verify        verify(session).getId();        verify(evt).getSession();        Thread.sleep(200);        verify(evt).visit(any(EventVisitor.class));        verifyNoMoreInteractions(evt, session);    }
@Test(timeout = 4000)	  public void testisAssignable()  throws Throwable  {	      Class<Long> class0 = Long.TYPE;	      Class<Boolean> class1 = Boolean.TYPE;	      boolean boolean0 = ClassUtils.isAssignable(class1, class0, true);	  }
@Test  public void testUpdateEventMetadata() throws Exception {    String metadataJson = IOUtils.toString(getClass().getResource("/eventMetadata.json"));    given().pathParam("eventId", "notExists").formParam("metadata", "metadata").expect()            .statusCode(HttpStatus.SC_NOT_FOUND).when().put(rt.host("{eventId}/metadata"));    given().pathParam("eventId", "asdasd").formParam("metadata", metadataJson).expect().statusCode(HttpStatus.SC_OK)            .when().put(rt.host("{eventId}/metadata"));  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = StringUtils.chomp("YU6:w]M?f:BLf)V");	      	      char[] charArray0 = new char[1];	      charArray0[0] = '=';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "YU6:w]M?f:BLf)V", charArray0);	      	      String string1 = StringUtils.removeEndIgnoreCase((String) null, "Search and Replace array lengths don't match: ");	      	      double[] doubleArray0 = new double[9];	      doubleArray0[0] = (double) '=';	      doubleArray0[1] = (double) '=';	      doubleArray0[2] = (double) '=';	      doubleArray0[3] = (double) '=';	      doubleArray0[4] = (double) '=';	      doubleArray0[5] = (double) '=';	      doubleArray0[6] = (double) '=';	      doubleArray0[7] = (double) '=';	      doubleArray0[8] = (double) '=';	      String string2 = StringUtils.join(doubleArray0, '=', 1039, 2);	      assertFalse(string2.equals((Object)string0));	      	      String string3 = StringUtils.removeEndIgnoreCase("Search and Replace array lengths don't match: ", "YU6:w]M?f:BLf)V");	      assertFalse(string3.equals((Object)string0));	      assertFalse(string3.equals((Object)string2));	      	      String string4 = StringUtils.substringBefore("Strings must not be null", "Search and Replace array lengths don't match: ");	      assertFalse(string4.equals((Object)string0));	      assertFalse(string4.equals((Object)string2));	      assertFalse(string4.equals((Object)string3));	      	      Object[] objectArray0 = new Object[8];	      objectArray0[0] = (Object) 61.0;	      objectArray0[1] = (Object) 61.0;	      objectArray0[2] = (Object) "";	      objectArray0[3] = (Object) '=';	      objectArray0[4] = (Object) 61.0;	      objectArray0[5] = (Object) 61.0;	      Object object0 = new Object();	      	      objectArray0[6] = object0;	      objectArray0[7] = (Object) 61.0;	      // Undeclared exception!	      try { 	        StringUtils.join(objectArray0, "", 1039, 1832);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // 1039	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test    public void given$clearAllUserAttributes_whenQuery_thenShouldCallNativeApi() {        // given        PowerMockito.mockStatic(Instabug.class);        // when        rnModule.clearAllUserAttributes();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Instabug.clearAllUserAttributes();    }
@Test(timeout = 4000)	  public void testbinaryBeMsb0ToHexDigit()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[9];	      booleanArray0[5] = true;	      booleanArray0[7] = true;	      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0, (int) (short)0);	  }
@Test(timeout = 4000)	  public void testtoProperString()  throws Throwable  {	      Fraction fraction0 = Fraction.getReducedFraction(10000, (-39));	      String string0 = fraction0.toProperString();	  }
@Test public void testUnregisterOnBackStackChangeListenerNotRegistered() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentController controller = new FragmentController(activity.getSupportFragmentManager());		final FragmentController.OnBackStackChangeListener mockListener = mock(FragmentController.OnBackStackChangeListener.class);		// Act:		// Only ensure that un-registering not registered listener does not cause any troubles.		controller.unregisterOnBackStackChangeListener(mockListener);	}
@Test(expected = NullPointerException.class)    public void evaluateInstantInstant_BothNull() {        compareEndWithBegin( null, null );    }
@Test(timeout = 4000)	  public void teststripStart()  throws Throwable  {	      String string0 = null;	      String string1 = null;	      String string2 = StringUtils.stripStart((String) null, (String) null);	      	      String string3 = StringUtils.trim((String) null);	      	      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);	      	      String string4 = StringUtils.repeat('S', 0);	      	      double[] doubleArray0 = new double[5];	      doubleArray0[0] = (double) 'S';	      doubleArray0[1] = (double) 'S';	      doubleArray0[2] = (double) 0;	      doubleArray0[3] = (double) 'S';	      doubleArray0[4] = (double) 'S';	      String string5 = StringUtils.join(doubleArray0, 'S');	      	      String string6 = "8IT";	      Locale locale0 = Locale.JAPAN;	      	      Locale.Category locale_Category0 = Locale.Category.DISPLAY;	      Locale.setDefault(locale_Category0, locale0);	      	      // Undeclared exception!	      try { 	        locale0.getUnicodeLocaleType("");	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Ill-formed Unicode locale key: 	         //	         verifyException("java.util.Locale", e);	      }	  }
@Test  public void should_use_default_handler_when_unknown_defined() {    assertThat(jpaSpecProvider.jpaSpecFor(UnknownStrategyObject.class)).isSameAs(defaultAclSpecification);  }
@Test(timeout = 4000)	  public void testdelete()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      	      char[] charArray0 = new char[1];	      StringBuffer stringBuffer1 = stringBuffer0.reverse();	      	      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();	      	      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0);	      	      charArray0[0] = '3';	      StrBuilder strBuilder2 = strBuilder0.append(3986.49F);	      	      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}");	      	      boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0);	      	      StrBuilder strBuilder4 = strBuilder0.append("");	      	      IntStream intStream0 = strBuilder2.codePoints();	      	      StrBuilder strBuilder5 = strBuilder2.appendln(stringBuffer0);	      	      StrBuilder strBuilder6 = strBuilder0.append(5305);	      	      StrBuilder strBuilder7 = strBuilder0.appendln('3');	      	      int int0 = strBuilder0.lastIndexOf((StrMatcher) strMatcher_NoMatcher0, (-2104));	      	      StrBuilder strBuilder8 = strBuilder7.appendln("");	  }
@Test(timeout = 4000)	  public void testtoStringBuilder()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(1920);	      	      StrBuilder strBuilder1 = strBuilder0.append(0.0F);	      	      StrBuilder strBuilder2 = strBuilder0.append((double) 1920);	      	      StrBuilder strBuilder3 = strBuilder0.appendln(1920);	      	      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);	      	      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      	      int int0 = 2;	      StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1);	      	      StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");	      	      StrBuilder strBuilder8 = strBuilder2.append((CharSequence) stringBuilder0, 2, 2);	      	      char char0 = '^';	      int int1 = strBuilder1.lastIndexOf('^');	      	      // Undeclared exception!	      try { 	        strBuilder4.insert(1575, false);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 1575	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testinvert()  throws Throwable  {	      String[][] stringArray0 = new String[0][8];	      String[][] stringArray1 = EntityArrays.invert(stringArray0);	  }
@Test	public void testGetEmail() {		assertEquals("test@gmail.com", user.getEmail());	}
@Test(timeout = 4000)	  public void testgetFieldNameValueSeparator()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      Class<Long> class0 = Long.class;	      standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0);	      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());	  }
@Test    public void testExample2Wfs200()                            throws Exception {        URL example2 = this.getClass().getResource( EXAMPLE2WFS200 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( example2 );        GetFeatureWithLock getFeatureWL = GetFeatureWithLockKVPAdapter.parse( kvpMap );        assertEquals( new BigInteger( "300" ), getFeatureWL.getExpiryInSeconds() );        assertFalse( getFeatureWL.getLockAll() );    }
@Test(timeout = 4000)	  public void testsplit()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      String string0 = StringUtils.join(byteArray0, 'E', (-2572), (-4337));	      	      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");	      	      boolean boolean0 = StringUtils.isAlpha(charBuffer0);	      	      String[] stringArray0 = StringUtils.split("0<.ZqmcE&?");	      	      String[] stringArray1 = StringUtils.substringsBetween("0<.ZqmcE&?", "", "0<.ZqmcE&?");	      	      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();	      	      boolean boolean1 = arrayDeque0.offerLast(charBuffer0);	      	      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, "O;WZp0oX~i");	      	      String string2 = StringUtils.replaceChars("bUY ;88G%>7Ft", 'k', 'u');88G%>7Ft", string2);	      	      int int0 = StringUtils.lastIndexOf((CharSequence) "bUY ;88G%>7Ft", 1);	      	      boolean boolean2 = StringUtils.isNotBlank(charBuffer0);	      	      String string3 = StringUtils.join(byteArray0, '5');	      	      String string4 = StringUtils.stripEnd("", "");	  }
@Test  public void testSave() throws Exception {    MysqlSourceState state = mock(MysqlSourceState.class);    MysqlSourceState nextState = mock(MysqlSourceState.class);    AtomicReference<MysqlSourceState> updatedState = new AtomicReference<>();    when(state.getCurrentLeaderEpoch()).thenReturn(5l);    doAnswer(            new Answer<MysqlSourceState>() {              @Override              public MysqlSourceState answer(InvocationOnMock invocation) throws Throwable {                Object[] args = invocation.getArguments();                MysqlSourceState newState = (MysqlSourceState) args[0];                Repository.DataUpdater<MysqlSourceState> updater =                    (Repository.DataUpdater<MysqlSourceState>) args[1];                updatedState.set(updater.apply(state, newState));                return null;              }            })        .when(repository)        .update(any(MysqlSourceState.class), any(Repository.DataUpdater.class));    // Test new leader epoch leader less than current    when(nextState.getCurrentLeaderEpoch()).thenReturn(4l);    stateRepository.save(nextState);    assertEquals(state, updatedState.get());    // Test new leader epoch leader same as current    when(nextState.getCurrentLeaderEpoch()).thenReturn(5l);    stateRepository.save(nextState);    assertEquals(nextState, updatedState.get());    // Test new leader epoch leader greather current    when(nextState.getCurrentLeaderEpoch()).thenReturn(6l);    stateRepository.save(nextState);    assertEquals(nextState, updatedState.get());  }
@Test  public void testGetPeriodsWeekly() {    for (int i = 0; i < repetitions; i++) {      final Instant a = randomInstant();      final Instant b = randomInstant();      final Instant from = Ordering.natural().min(a, b);      final Instant to = Ordering.natural().max(a, b);      logger.info("from {} to {} {}", from, to, DataResolution.WEEKLY.name());      final List<Tuple<Instant, Instant>> periods = InfluxStatisticsProvider.getPeriods(from, to, DataResolution.WEEKLY,          ZoneId.of("Z"));      assertEquals(1, periods.size());      assertEquals(from, periods.get(0).getA());      assertEquals(to, periods.get(0).getB());    }  }
@Test    public void testSerializeException_ContentType()                            throws Exception {        XsltExceptionSerializer xsltExceptionSerializer = createXsltExceptionSerializer();        ByteArrayOutputStream os = new ByteArrayOutputStream();        OWSException ex = new OWSException( EXCEPTION, NO_APPLICABLE_CODE );        XMLExceptionSerializer exceptionSerializer = exceptionSerializer();        HttpResponseBuffer response = responseBuffer( os );        xsltExceptionSerializer.serializeException( response, ex, exceptionSerializer, null );        serialize( xsltExceptionSerializer, os, ex );        verify( response ).setContentType( eq( CONTENT_TYPE ) );    }
@Test    public void eightFM() {        Assert.assertEquals(RxComprehensions                .doFlatMap(zero(1), one(true), two("result"), three("other"), four("other".length()),                        five("other".length() < 5), six(Boolean.toString(false)), seven("true"), eight(Long.class))                .toBlocking().first(), Long.class);    }
@Test    void testSingleWildcardNegative() throws Exception {        final String pat = "f?o";        final String str = "boo";        Assertions.assertFalse(SearchPattern.wildcardMatch(pat, str));    }
@Test  public void findUserSettingsInputOneSettingsOneSignaturesExpectsProperUserSettings()          throws UserSettingsServiceException {    int offset = 0;    int limit = 1;    EntityManagerFactory emf = setupEntityManagerFactory(limit, limit, limit, limit, offset, limit);    UserSettingsService userSettingsService = setupUserSettingsService(emf);    userSettingsService.findUserSettings(limit, offset);  }
@Test    void testPartialRequestMismatch() {        SamplingRule rule = new SamplingRule()            .withAttributes(null)            .withHost("192.168.1.1")            .withServiceName("www.foo.com")            .withHTTPMethod("POST")            .withResourceARN("arn:aws:service:us-east-1:111111111111:resource")            .withURLPath("/bar/123")            .withServiceType("AWS::EC2::Instance");        SamplingRequest req = new SamplingRequest(            "role-arn",            "arn:aws:service:us-east-1:111111111111:resource",            "www.bar.com",            null,            "POST",            "/bar/123",            "AWS::EC2::Instance",            null        );        Matchers m = new Matchers(rule);        Assertions.assertFalse(m.match(req));    }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      Object object0 = new Object();	      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;	      StringBuffer stringBuffer0 = new StringBuffer("Jj^%^wj");	      ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0, stringBuffer0);	      StringBuffer stringBuffer1 = toStringBuilder0.getStringBuffer();	  }
@Test  public void testProcessByIdAndDate() throws NotFoundException, ServiceRegistryException {    String[] mp = createAndAddMediaPackagesSimple(2, 2, 2, Opt.<String>none());    //Non terminal query, but internal test so we create terminal expectations    List<Job> jobs = createDateTriggerJob(mp, 2);    EasyMock.replay(sr);    for (Job j : jobs) {      Assert.assertEquals("OK", tsamjp.process(j));    }    EasyMock.verify(sr);  }
@Test(timeout = 4000)	  public void testvalidIndex()  throws Throwable  {	      Object[] objectArray0 = new Object[4];	      // Undeclared exception!	      try { 	        Validate.validIndex("i%xg", (-1), "i%xg", objectArray0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // inullg	         //	         verifyException("org.apache.commons.lang3.Validate", e);	      }	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      String string0 = StringUtils.difference(",-t8JJh/bUr{+$_DS", "WDl?;hCf*= F");hCf*= F", string0);	      	      int int0 = StringUtils.indexOfAny((CharSequence) "WDl?;hCf*= F", "RWSLzV4h");	      	      String string1 = StringUtils.stripAccents(",-t8JJh/bUr{+$_DS");	      	      String string2 = StringUtils.uncapitalize("uOcUk");	      	      boolean boolean0 = StringUtils.isAlphaSpace("uOcUk");	      	      CharSequence[] charSequenceArray0 = new CharSequence[4];	      charSequenceArray0[0] = (CharSequence) "uOcUk";	      charSequenceArray0[1] = (CharSequence) ",-t8JJh/bUr{+$_DS";	      charSequenceArray0[2] = (CharSequence) ",-t8JJh/bUr{+$_DS";	      String string3 = StringUtils.center("WDl?;hCf*= F", 13);hCf*= F ", string3);	      	      charSequenceArray0[3] = (CharSequence) "WDl?;hCf*= F ";	      String string4 = StringUtils.appendIfMissingIgnoreCase("Ha?BYN:B?", "WDl?;hCf*= F", charSequenceArray0);hCf*= F", string4);	      	      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (char[]) null);	      	      String string5 = StringUtils.join((Iterator<?>) null, 'z');	      	      int int1 = StringUtils.lastIndexOf((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (CharSequence) null);	  }
@Test  public void testDeleteNoneVersion() throws Exception {    DeletionSelector noneVersionSelector = DeletionSelector.deleteAll(ORG_ID, MP_ID);    assertTrue(repo.delete(noneVersionSelector));    assertFalse(sampleElemDir.exists());    File file = new File(PathSupport.concat(new String[] { tmpRoot.toString(), ORG_ID, MP_ID }));    assertFalse(file.exists());  }
@Test(timeout = 4000)	  public void testgetEscapeChar()  throws Throwable  {	      HashMap<String, String> hashMap0 = new HashMap<String, String>();	      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "", "$!$](1CnP-5;", 'J');	      strSubstitutor0.isEnableSubstitutionInVariables();	      assertEquals('J', strSubstitutor0.getEscapeChar());	  }
@Test(timeout = 4000)	  public void testprependIfMissing()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[1];	      charSequenceArray0[0] = (CharSequence) "iLTc!P.z84";	      String string0 = StringUtils.appendIfMissing("iLTc!P.z84", "iLTc!P.z84", charSequenceArray0);	      	      boolean boolean0 = StringUtils.isAlpha(charSequenceArray0[0]);	      	      String string1 = StringUtils.chomp("iLTc!P.z84");	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens("iLTc!P.z84");	      	      String string2 = StringUtils.substring("iLTc!P.z84", (-757), (-757));	      	      String string3 = StringUtils.replace("org.apache.commons.lang3.ArrayUtils", "iLTc!P.z84", "YC:1z-VJ%jvP$&", (-1099));	      	      int[] intArray0 = new int[8];	      intArray0[0] = (-757);	      intArray0[1] = (-2969);	      intArray0[2] = (-1099);	      intArray0[3] = (-757);	      intArray0[4] = (-1099);	      intArray0[5] = (-1099);	      intArray0[6] = (-757);	      intArray0[7] = (-1099);	      String string4 = StringUtils.join(intArray0, 'v');	      	      boolean boolean1 = StringUtils.isAlpha("iLTc!P.z84");	      	      CharSequence[] charSequenceArray1 = new CharSequence[9];	      	      charSequenceArray1[0] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";	      charSequenceArray1[1] = (CharSequence) "iLTc!P.z84";	      charSequenceArray1[2] = (CharSequence) "";	      charSequenceArray1[3] = (CharSequence) "YC:1z-VJ%jvP$&";	      charSequenceArray1[4] = (CharSequence) "";	      charSequenceArray1[5] = (CharSequence) "org.apache.commons.lang3.ArrayUtils";	      charSequenceArray1[6] = (CharSequence) "iLTc!P.z84";	      charSequenceArray1[7] = (CharSequence) "";	      charSequenceArray1[8] = (CharSequence) "YC:1z-VJ%jvP$&";	      String string5 = StringUtils.prependIfMissingIgnoreCase("iLTc!P.z84", "", charSequenceArray1);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[8];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(booleanArray0, (-1229));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1229, Length: 8	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test  public void testGetTheme() throws ParseException {    String foundId = "1";    String seriesNotFound = "11";    String themeNotFound = "2";    String result = given().pathParam("seriesId", foundId).expect().statusCode(HttpStatus.SC_OK).when()            .get(rt.host("/{seriesId}/theme.json")).asString();    JSONObject theme = ((JSONObject) parser.parse(result));    assertEquals("theme-1-name", theme.get(foundId));    given().pathParam("seriesId", seriesNotFound).expect().statusCode(HttpStatus.SC_NOT_FOUND).when()            .get(rt.host("/{seriesId}/theme.json")).asString();    result = given().pathParam("seriesId", themeNotFound).expect().statusCode(HttpStatus.SC_OK).when()            .get(rt.host("/{seriesId}/theme.json")).asString();    assertEquals("{}", result);  }
@Test(expected = NoSuchElementException.class)  public void testIterator1() {    Iterator<Integer> i = iterator(new Integer[0]);    assertFalse(i.hasNext());    i.next();  }
@Test(timeout = 4000)	  public void testtrim()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder strBuilder1 = strBuilder0.appendln(true);	      	      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));	      	      String string0 = null;	      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);	      	      Writer writer0 = strBuilder3.asWriter();	      	      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();	      	      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');	      	      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);	      	      char[] charArray0 = new char[0];	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);	      	      StrBuilder strBuilder5 = strBuilder4.trim();	      	      int int1 = 6;	      StrBuilder strBuilder6 = strBuilder4.append(6);	      	      // Undeclared exception!	      try { 	        strMatcher0.isMatch(charArray0, 3954);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	      }	  }
@Test(timeout = 4000)	  public void testisAlphanumeric()  throws Throwable  {	      String string0 = StringUtils.strip("eviation width is 4");	      	      int int0 = StringUtils.length("eviation width is 4");	      	      String string1 = StringUtils.abbreviateMiddle("eviation width is 4", "!D{rz~", 19);	      	      int int1 = StringUtils.lastIndexOfAny("eviation width is 4", (CharSequence[]) null);	      	      String string2 = StringUtils.capitalize("\n");	      	      String string3 = StringUtils.chop("clone");	      	      double[] doubleArray0 = new double[2];	      doubleArray0[0] = (double) 19;	      doubleArray0[1] = (double) 19;	      String string4 = StringUtils.join(doubleArray0, '>', 19, 5);	      	      String string5 = StringUtils.replace("eviation width is 4", "eviation width is 4", "clone", 992);	      	      int[] intArray0 = new int[4];	      intArray0[0] = (int) '>';	      intArray0[1] = 5;	      intArray0[2] = (int) '>';	      intArray0[3] = (-1);	      String string6 = StringUtils.join(intArray0, '>', 1120, (-1));	      	      char[] charArray0 = new char[1];	      charArray0[0] = '>';	      boolean boolean0 = StringUtils.containsNone((CharSequence) "", charArray0);	      	      boolean boolean1 = StringUtils.isAlphanumericSpace("eviation width is 4");	      	      String string7 = StringUtils.removeEnd("clone", "Strings must not be null");	      	      String string8 = StringUtils.chop("clon");	      	      String string9 = StringUtils.substringBetween("RWSLzV4h", "\n", "\n");	  }
@Test(timeout = 4000)	  public void testmid()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[9];	      ArrayList<Integer> arrayList0 = new ArrayList<Integer>(955);	      StringUtils.join((Iterable<?>) arrayList0, '5');	      charSequenceArray0[0] = (CharSequence) "";	      StringUtils.mid("", 955, 3);	      charSequenceArray0[1] = (CharSequence) "";	      StringUtils.upperCase("");	      charSequenceArray0[2] = (CharSequence) "";	      String string0 = StringUtils.removeStartIgnoreCase("\r", "");	      	      charSequenceArray0[3] = (CharSequence) "\r";	      CharBuffer charBuffer0 = CharBuffer.wrap(charSequenceArray0[2]);	      charSequenceArray0[4] = (CharSequence) charBuffer0;	      StringUtils.defaultIfEmpty(charSequenceArray0[0], charSequenceArray0[0]);	      charSequenceArray0[5] = (CharSequence) "";	      long[] longArray0 = new long[7];	      longArray0[0] = (long) 3;	      longArray0[1] = 2587L;	      longArray0[2] = (long) 3;	      longArray0[3] = (long) 955;	      longArray0[4] = (long) 955;	      longArray0[5] = (long) 3;	      longArray0[6] = (-1L);	      String string1 = StringUtils.join(longArray0, '5', 8192, (-1515));	      	      charSequenceArray0[6] = (CharSequence) "";	      String string2 = StringUtils.chomp("\"N;ix%MK");ix%MK", string2);	      	      charSequenceArray0[4] = (CharSequence) "\"N;ix%MK";	      float[] floatArray0 = new float[2];	      floatArray0[0] = (float) 8192;	      floatArray0[1] = (float) 3L;	      String string3 = StringUtils.join(floatArray0, 'L', 69, 16);	      	      charSequenceArray0[8] = (CharSequence) "";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	  }
@Test    public void testGetSetErrors() {        RuntimeException testRuntimeException = new RuntimeException("Something went wrong");        Event testEvent = new Event(testRuntimeException, config,            handledState, NoopLogger.INSTANCE);        List<Error> errors = testEvent.getErrors();        // First error should match the testException        assertEquals(testRuntimeException.getClass().getName(), errors.get(0).getErrorClass());        assertEquals(testRuntimeException.getMessage(), errors.get(0).getErrorMessage());    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseIntervalMapByteBadFormat() {        IntervalsParser.parseIntervalMap(Byte.class, "[1, 2, a]");    }
@Test(timeout = 4000)	  public void testdelete()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(117);	      	      StrBuilder strBuilder1 = strBuilder0.trim();	      	      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();	      	      StrBuilder strBuilder2 = strBuilder0.deleteAll(strMatcher0);	      	      StrBuilder strBuilder3 = strBuilder1.reverse();	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder2.new StrBuilderWriter();	      	      strBuilder_StrBuilderWriter0.write((char[]) null, 117, (-3048));	      	      Object[] objectArray0 = new Object[9];	      objectArray0[0] = (Object) strBuilder3;	      objectArray0[1] = (Object) strBuilder3;	      objectArray0[2] = (Object) "Invalid startIndex: ";	      objectArray0[3] = (Object) strMatcher0;	      StrBuilder strBuilder4 = new StrBuilder(117);	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();	      	      objectArray0[4] = (Object) strBuilder_StrBuilderTokenizer1;	      Object object0 = new Object();	      	      objectArray0[5] = object0;	      objectArray0[6] = (Object) "Invalid startIndex: ";	      objectArray0[7] = (Object) strBuilder_StrBuilderWriter0;	      objectArray0[8] = (Object) strMatcher0;	      StrBuilder strBuilder5 = strBuilder2.appendln("Invalid startIndex: ", objectArray0);	  }
@Test(timeout = 4000)	  public void testreplaceChars()  throws Throwable  {	      String string0 = StringUtils.capitalize("Supplied value must be a valid byte literal between -32768 and 32767: [");	      	      int int0 = StringUtils.indexOf((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", 392);	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("The Array must not be null", "Supplied value must be a valid byte literal between -32768 and 32767: [");	      	      char[] charArray0 = new char[5];	      charArray0[0] = '|';	      charArray0[1] = '/';	      charArray0[2] = ',';	      charArray0[3] = 'B';	      charArray0[4] = 'b';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", charArray0);	      	      String string1 = StringUtils.abbreviate("\r", 392, 392);	      	      String string2 = StringUtils.replaceChars("R\"?33Lrbm5Y?s", "Minimum abbreviation width with offset is 7", "Supplied value must be a valid byte literal between -32768 and 32767: [");	      	      int int1 = StringUtils.indexOfAnyBut((CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [", (CharSequence) "Supplied value must be a valid byte literal between -32768 and 32767: [");	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens("R\"?33Llvl5Y? ");	      	      String string3 = StringUtils.strip((String) null, "_iVq9-<w--D+?HoA~d");	  }
@Test(timeout = 4000)	  public void testrightPad()  throws Throwable  {	      String string0 = StringUtils.repeat("x,,H", 678);	      	      LinkedHashSet<Object> linkedHashSet0 = new LinkedHashSet<Object>();	      	      boolean boolean0 = linkedHashSet0.add("Supplied value must be a valid byte literal between -128 and 127: [");	      	      boolean boolean1 = linkedHashSet0.add("Supplied value must be a valid byte literal between -128 and 127: [");	      	      boolean boolean2 = linkedHashSet0.contains("x,,H");	      	      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;	      	      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) string0, 82, 82);	      	      boolean boolean3 = linkedHashSet0.add(charBuffer0);	      	      boolean boolean4 = linkedHashSet0.add(locale_FilteringMode0);	      	      String string1 = StringUtils.join((Iterable<?>) linkedHashSet0, string0);	      	      int int0 = StringUtils.indexOf((CharSequence) string1, (-1940));	      	      String string2 = StringUtils.rightPad("Y)", 64, 'W');	      	      boolean boolean5 = StringUtils.isBlank(string0);	      	      boolean boolean6 = StringUtils.isAlphaSpace("Y)");	      	      char[] charArray0 = new char[1];	      charArray0[0] = 'W';	      String string3 = StringUtils.join(charArray0, 'W');	      	      int int1 = StringUtils.indexOfAny((CharSequence) "Supplied value must be a valid byte literal between -128 and 127: [", charArray0);	      	      String string4 = StringUtils.leftPad("Afh\"z$ulNc", 1, 'W');	      	      String string5 = StringUtils.difference("x,,H", "null$E=H15Rj\"k");	      	      int int2 = StringUtils.indexOfIgnoreCase((CharSequence) "Y)WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW", (CharSequence) string0);	  }
@SuppressLint("ValidFragment")	@Test public void testOnBackPress() {		// Arrange:		final BaseFragment fragment = new BaseFragment() {};		// Act + Assert:		assertThat(fragment.onBackPress(), is(false));	}
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("%XX");	      assertEquals(3, strBuilder0.size());	      	      char[] charArray0 = new char[9];	      charArray0[0] = 'o';	      charArray0[1] = 'o';	      charArray0[2] = ';';	      charArray0[3] = '`';	      charArray0[4] = 'm';	      charArray0[5] = 'X';	      charArray0[6] = 'n';	      charArray0[7] = 'G';	      charArray0[8] = '+';	      // Undeclared exception!	      try { 	        strBuilder0.append(charArray0, 2731, 0);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // Invalid startIndex: 0	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      String string0 = "SzpQ!4 ;U";	      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");	      	      char char0 = '`';	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');	      	      StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U");	      	      StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817);	      	      StrBuilder strBuilder4 = strBuilder3.append('`');	      	      StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U");	      	      String string1 = strBuilder0.getNullText();	      	      StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U");	      	      // Undeclared exception!	      try { 	        strBuilder0.insert(2817, (-1.0F));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 2817	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testisStartedBy()  throws Throwable  {	      Integer integer0 = new Integer((-43));	      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      doReturn((-2081), (-1)).when(comparator0).compare(any() , any());	      Range<Object> range0 = Range.is((Object) integer0, comparator0);	      boolean boolean0 = range0.isStartedBy(integer0);	  }
@Test(timeout = 4000)	  public void testgetLeft()  throws Throwable  {	      Integer integer0 = new Integer(36);	      ImmutableTriple<Object, Integer, String> immutableTriple0 = ImmutableTriple.of((Object) "", integer0, (String) null);	      Object object0 = immutableTriple0.getLeft();	  }
@Test public void testOnViewCreatedWithBackgroundResource() {		// Arrange:		final BaseFragment fragment = new TestFragmentWithContentViewWithBackgroundResource();		final View mockView = mock(FrameLayout.class);		// Act:		fragment.onViewCreated(mockView, null);		// Assert:		verify(mockView).setBackgroundResource(TestFragmentWithContentViewWithBackgroundResource.BACKGROUND_RESOURCE);		verifyNoMoreInteractions(mockView);	}
@Test(timeout = 4000)	  public void testhexDigitToBinary()  throws Throwable  {	      // Undeclared exception!	      try { 	        Conversion.hexDigitToBinary('M');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Cannot interpret 'M' as a hexadecimal digit	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test    public void test05() {        List<Object> expectedResult = new ArrayList<>();        expectedResult.add("\'");        expectedResult.add("\"");        expectedResult.add(1);        expectedResult.add(2);        expectedResult.add("3");        expectedResult.add("a");        expectedResult.add("b");        expectedResult.add("c");        expectedResult.add("d");        expectedResult.add("ef\\");        expectedResult.add("gh");        final List<Object> result = new ArrayList<>();        new RangeExpressionParser("['\\'',\"\\\"\",1..2,'3','a'..'b',\"c\"..\"d\",'\\ef\\\\',\"\\gh\"]").visit(new RangeExpressionItemVisitor() {            @Override            public void visit(Object val) {                result.add(val);            }        });        Assert.equals(result, expectedResult);    }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      Object object0 = new Object();	      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;	      String string0 = ToStringBuilder.reflectionToString(object0, toStringStyle0);	  }
@Test(timeout = 4000)	  public void testread()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("F");	      	      StrBuilder strBuilder1 = strBuilder0.deleteFirst('e');	      	      StrBuilder strBuilder2 = strBuilder0.insert(0, "F");	      	      StrBuilder strBuilder3 = strBuilder2.deleteAll('#');	      	      StrBuilder strBuilder4 = strBuilder0.append(598L);	      	      String string0 = strBuilder0.toString();	      	      StrBuilder strBuilder5 = strBuilder4.reverse();	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      char[] charArray0 = new char[8];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      charArray0[2] = 'K';	      charArray0[3] = 'e';	      int int0 = strBuilder2.indexOf((StrMatcher) null);	      	      charArray0[4] = 'e';	      charArray0[5] = 'e';	      charArray0[6] = 'e';	      charArray0[7] = 'e';	      int int1 = strBuilder_StrBuilderReader0.read(charArray0);	      assertFalse(strBuilder_StrBuilderReader0.ready());	      	      int int2 = 1354;	      strBuilder_StrBuilderReader0.mark(1354);	      assertFalse(strBuilder_StrBuilderReader0.ready());	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();	      	      // Undeclared exception!	      try { 	        strBuilder_StrBuilderTokenizer0.previous();	        fail("Expecting exception: NoSuchElementException");	      	      } catch(NoSuchElementException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);	      }	  }
@SuppressWarnings("unchecked")    @Test    public void testFilter8()                            throws XMLStreamException, FactoryConfigurationError, IOException {        Filter result = parse( "v100/testfilter8.xml" );        OperatorFilter opFilter = (OperatorFilter) result;        PropertyIsEqualTo prop = (PropertyIsEqualTo) opFilter.getOperator();        Function func = (Function) prop.getParameter1();        assertEquals( "SIN", func.getName() );        List<Expression> params = func.getParameters();        ValueReference propName = (ValueReference) params.get( 0 );        assertEquals( "DISPERSION_ANGLE", propName.getAsText() );        Literal<PrimitiveValue> lit = (Literal<PrimitiveValue>) prop.getParameter2();        assertEquals( "1", lit.getValue().toString() );    }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      MutableFloat mutableFloat0 = new MutableFloat();	      Integer integer0 = new Integer((-629));	      mutableFloat0.setValue((Number) integer0);	      mutableFloat0.add((float) (-629));	      Float float0 = mutableFloat0.toFloat();	  }
@Test(timeout = 4000)	  public void testisAvailableLocale()  throws Throwable  {	      Locale locale0 = Locale.ROOT;	      boolean boolean0 = LocaleUtils.isAvailableLocale(locale0);	  }
@Test(timeout = 4000)	  public void testremoveStartIgnoreCase()  throws Throwable  {	      String string0 = StringUtils.remove((String) null, 'Y');	      	      String string1 = StringUtils.removeStartIgnoreCase((String) null, "', is neither of type Map.Entry nor an Array");	  }
@Test(expected = NoSuchElementException.class)  public void testIntRangeE2() {    intRangeE(0, 0).next();  }
@Test(expectedExceptions = RuntimeException.class)    public void testAddDirectTypeDifferentId() {        EdgeTypeStore edgeTypeStore = new EdgeTypeStore();        Assert.assertEquals(edgeTypeStore.addType("foo"), 1);        edgeTypeStore.addType("foo", 2);    }
@Test    public void testingBasicStreamingFunctionality() {        DefaultStreamingStrategy defaultStreamingStrategy = new DefaultStreamingStrategy(1);        TraceID traceId = new TraceID();        Segment segment = new SegmentImpl(AWSXRay.getGlobalRecorder(), "test", traceId);        Subsegment subsegment = new SubsegmentImpl(AWSXRay.getGlobalRecorder(), "test", segment);        Subsegment subsegment1 = new SubsegmentImpl(AWSXRay.getGlobalRecorder(), "test", segment);        segment.addSubsegment(subsegment);        segment.addSubsegment(subsegment1);        segment.setStartTime(1.0);        subsegment.setStartTime(1.0);        subsegment1.setStartTime(1.0);        subsegment.end();        defaultStreamingStrategy.streamSome(segment, AWSXRay.getGlobalRecorder().getEmitter());        Assert.assertTrue(segment.getTotalSize().intValue() == 1);    }
@Test  public void testAddLivePublicationChannel() throws Exception {    URI mpURI = LiveScheduleServiceImplTest.class.getResource("/assetmanager-mp.xml").toURI();    MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder()            .loadFromXml(mpURI.toURL().openStream());    replayServices();    service.addLivePublicationChannel(org, mp, new HashMap<String, Track>());    Publication[] publications = mp.getPublications();    Assert.assertEquals(1, publications.length);    Assert.assertEquals(LiveScheduleService.CHANNEL_ID, publications[0].getChannel());    Assert.assertEquals("text/html", publications[0].getMimeType().toString());    Assert.assertEquals(ENGAGE_URL + "/play/" + MP_ID, publications[0].getURI().toString());  }
@Test    public void testCollectAndSortFeatureTypesToExport_LimitedConfiguredFeatureTypes() {        List<FeatureType> featureTypes = featureTypes();        StoredQueryHandler storedQueryHandler = new StoredQueryHandler( mockWFS( featureTypes ), new ArrayList<URL>(),                                                                        managedStoredQueries );        List<QName> configuredFeatureTypeNames = configuredFeatureTypeNames();        List<QName> featureTypeNamesToExport = storedQueryHandler.collectAndSortFeatureTypesToExport( configuredFeatureTypeNames );        assertThat( featureTypeNamesToExport.size(), is( 1 ) );        QName featureTypeNameToExport = featureTypeNamesToExport.get( 0 );        assertThat( featureTypeNameToExport.getLocalPart(), is( "one" ) );        assertThat( featureTypeNameToExport.getNamespaceURI(), is( "" ) );        assertThat( featureTypeNameToExport.getPrefix(), is( "" ) );    }
@Test    public void testCatchUpToLatestAndSubscribeToNewBlockObservable() throws Exception {        List<PlatonBlock> expected = Arrays.asList(                createBlock(0), createBlock(1), createBlock(2),                createBlock(3), createBlock(4), createBlock(5),                createBlock(6));        List<PlatonBlock> ethBlocks = Arrays.asList(                expected.get(2),  // greatest block                expected.get(0), expected.get(1), expected.get(2),                expected.get(4), // greatest block                expected.get(3), expected.get(4),                expected.get(4),  // greatest block                expected.get(5),  // initial response from platonGetFilterLogs call                expected.get(6)); // subsequent block from new block observable        OngoingStubbing<PlatonBlock> stubbing =                when(web3jService.send(any(Request.class), eq(PlatonBlock.class)));        for (PlatonBlock ethBlock : ethBlocks) {            stubbing = stubbing.thenReturn(ethBlock);        }        PlatonFilter ethFilter = objectMapper.readValue(                "{\n"                        + "  \"id\":1,\n"                        + "  \"jsonrpc\": \"2.0\",\n"                        + "  \"result\": \"0x1\"\n"                        + "}", PlatonFilter.class);        PlatonLog ethLog = objectMapper.readValue(                "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":["                        + "\"0x31c2342b1e0b8ffda1507fbffddf213c4b3c1e819ff6a84b943faabb0ebf2403\""                        + "]}",                PlatonLog.class);        PlatonUninstallFilter ethUninstallFilter = objectMapper.readValue(                "{\"jsonrpc\":\"2.0\",\"id\":1,\"result\":true}", PlatonUninstallFilter.class);        when(web3jService.send(any(Request.class), eq(PlatonFilter.class)))                .thenReturn(ethFilter);        when(web3jService.send(any(Request.class), eq(PlatonLog.class)))                .thenReturn(ethLog);        when(web3jService.send(any(Request.class), eq(PlatonUninstallFilter.class)))                .thenReturn(ethUninstallFilter);        Observable<PlatonBlock> observable = web3j.catchUpToLatestAndSubscribeToNewBlocksObservable(                new DefaultBlockParameterNumber(BigInteger.ZERO),                false);        final CountDownLatch transactionLatch = new CountDownLatch(expected.size());        final CountDownLatch completedLatch = new CountDownLatch(1);        final List<PlatonBlock> results = new ArrayList<PlatonBlock>(expected.size());        Subscription subscription = observable.subscribe(                new Action1<PlatonBlock>() {                    @Override                    public void call(PlatonBlock result) {                        results.add(result);                        transactionLatch.countDown();                    }                },                new Action1<Throwable>() {                    @Override                    public void call(Throwable throwable) {                        fail(throwable.getMessage());                    }                },                new Action0() {                    @Override                    public void call() {                        completedLatch.countDown();                    }                });        transactionLatch.await(1250, TimeUnit.MILLISECONDS);        assertThat(results, equalTo(expected));        subscription.unsubscribe();        completedLatch.await(1, TimeUnit.SECONDS);        assertTrue(subscription.isUnsubscribed());    }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      String string0 = StringUtils.chomp((String) null);	      	      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);	      	      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);	      	      String string2 = StringUtils.trimToNull("82!8rPa!1'CHof?Xqv>");	      	      String string3 = StringUtils.EMPTY;	      	      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) null);	      	      String[] stringArray0 = new String[1];	      stringArray0[0] = "82!8rPa!1'CHof?Xqv>";	      String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);	      	      String string5 = StringUtils.substringBefore("v#nOp!G", "");	      	      String string6 = StringUtils.chop("v#nOp!G");	      	      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 307);	      	      CharSequence[] charSequenceArray0 = new CharSequence[5];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "82!8rPa!1'CHof?Xqv>";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) null;	      charSequenceArray0[4] = (CharSequence) "v#nOp!G";	      String string7 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      // Undeclared exception!	      try { 	        CharSequenceUtils.lastIndexOf((CharSequence) null, 1894, 2825);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.CharSequenceUtils", e);	      }	  }
@Test    void testPureWildcard() throws Exception {        final String pat = "*";        final String str = "foo";        assertTrue(SearchPattern.wildcardMatch(pat, str));    }
@Test(timeout = 4000)	  public void testacquire()  throws Throwable  {	      TimeUnit timeUnit0 = TimeUnit.DAYS;	      TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, (-1));	      timedSemaphore0.startTimer();	      timedSemaphore0.setLimit((-1));	      timedSemaphore0.shutdown();	      int int0 = 0;	      // Undeclared exception!	      try { 	        timedSemaphore0.acquire();	        fail("Expecting exception: IllegalStateException");	      	      } catch(IllegalStateException e) {	         //	         // TimedSemaphore is shut down!	         //	         verifyException("org.apache.commons.lang3.concurrent.TimedSemaphore", e);	      }	  }
@SuppressWarnings("ConstantConditions")	@Test public void testOnBackPress() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final WebFragment fragment = new WebFragment();		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		final WebView webView = fragment.getWebView();		webView.loadUrl("http://www.google.com");		// Act + Assert:		assertThat(fragment.onBackPress(), is(true));	}
@Test    public void shouldRemoveExpenseById() throws Exception {        final Nobt nobt = aNobt()                .withExpenses(anExpense().withId(1L))                .build();        nobt.deleteExpense(1L);        assertThat(nobt, allOf(                hasExpenses(iterableWithSize(0)),                hasDeletedExpenses(iterableWithSize(1))        ));    }
@Test  public void testGetAspectRatio() {    List<Fraction> a = operationHandler.getAspectRatio("4/3,16/9");    assertEquals(Fraction.getFraction(4, 3), a.get(0));    assertEquals(Fraction.getFraction(16, 9), a.get(1));    assertTrue(operationHandler.getAspectRatio("").isEmpty());  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      // Undeclared exception!	      try { 	        DateUtils.addYears((Date) null, 0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The date must not be null	         //	         verifyException("org.apache.commons.lang3.time.DateUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testdelete()  throws Throwable  {	      int int0 = 107;	      StrBuilder strBuilder0 = new StrBuilder(107);	      	      int int1 = 0;	      StrBuilder strBuilder1 = strBuilder0.insert(0, false);	      	      StrMatcher strMatcher0 = StrMatcher.trimMatcher();	      	      char char0 = 'w';	      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');	      	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("");	      	      char[] charArray0 = new char[0];	      StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107);	      	      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);	      	      int int2 = strBuilder0.indexOf(strMatcher0, (-2284));	      	      IntStream intStream0 = strBuilder0.codePoints();	      	      StrBuilder strBuilder3 = strBuilder0.appendln(289);	      	      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1);	      	      // Undeclared exception!	      try { 	        strBuilder3.deleteCharAt(1027);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 1027	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void testGetPeriodsMonthly() {    for (int i = 0; i < repetitions; i++) {      final Instant a = randomInstant();      final Instant b = randomInstant();      final Instant from = Ordering.natural().min(a, b);      final Instant to = Ordering.natural().max(a, b);      logger.info("from {} to {} {}", from, to, DataResolution.MONTHLY.name());      final List<Tuple<Instant, Instant>> periods = InfluxStatisticsProvider.getPeriods(from, to, DataResolution.MONTHLY,          ZoneId.of("Z"));      assertEquals(from, periods.get(0).getA());      if (periods.size() > 1) {        assertEquals(            LocalDateTime                .ofInstant(from, ZoneOffset.UTC)                .plusMonths(1)                .withDayOfMonth(1)                .withHour(0)                .withMinute(0)                .withSecond(0)                .withNano(0)                .minusNanos(1)                .toInstant(ZoneOffset.UTC),            periods.get(0).getB());      } else {        assertEquals(to, periods.get(0).getB());        continue;      }      assertEquals(to, periods.get(periods.size() - 1).getB());      assertEquals(LocalDateTime              .ofInstant(to, ZoneOffset.UTC)              .withDayOfMonth(1)              .withHour(0)              .withMinute(0)              .withSecond(0)              .withNano(0)              .toInstant(ZoneOffset.UTC),          periods.get(periods.size() - 1).getA());    }  }
@Test    void testCreateSubsegmentWhenConnectionThrowsException() throws SQLException {        when(connection.getMetaData()).thenThrow(new SQLException());        Subsegment sub = SqlSubsegments.forQuery(connection, SQL);        assertThat(AWSXRay.getCurrentSubsegment()).isEqualTo(sub);        assertThat(sub.getName()).isEqualTo(SqlSubsegments.DEFAULT_DATABASE_NAME);        assertThat(sub.isInProgress()).isTrue();        assertThat(sub.getParentSegment().getSubsegments()).contains(sub);    }
@Test  public void testTranscriptionDone() throws Exception {    service.activate(cc);    InputStream stream = IBMWatsonTranscriptionServiceTest.class.getResourceAsStream("/" + PUSHED_TRANSCRIPTION_FILE);    database.storeJobControl(MP_ID, TRACK_ID, JOB_ID, TranscriptionJobControl.Status.InProgress.name(), TRACK_DURATION, DATE_EXPECTED, PROVIDER);    JSONObject obj = (JSONObject) jsonParser.parse(new InputStreamReader(stream));    Capture<String> capturedCollection = Capture.newInstance();    Capture<String> capturedFileName = Capture.newInstance();    EasyMock.expect(workspace.putInCollection(EasyMock.capture(capturedCollection), EasyMock.capture(capturedFileName),            EasyMock.anyObject(InputStream.class))).andReturn(new URI("http://anything"));    EasyMock.replay(workspace);    long before = System.currentTimeMillis();    service.transcriptionDone(MP_ID, obj);    long after = System.currentTimeMillis();    // Check if status and date in db was updated    TranscriptionJobControl job = database.findByJob(JOB_ID);    Assert.assertNotNull(job);    Assert.assertEquals(TranscriptionJobControl.Status.TranscriptionComplete.name(), job.getStatus());    Assert.assertNotNull(job.getDateCompleted());    Assert.assertTrue(before <= job.getDateCompleted().getTime() && job.getDateCompleted().getTime() <= after);    // Check if results were saved into a collection    Assert.assertEquals(IBMWatsonTranscriptionService.TRANSCRIPT_COLLECTION, capturedCollection.getValue());    Assert.assertEquals(JOB_ID + ".json", capturedFileName.getValue());  }
@Test    public void testMin() {        final Integer minHeight = _personDao.min(Person.HEIGTH);        Assert.assertEquals(minHeight, Integer.valueOf(158));    }
@Test    public void testCreate_DuplicatedNamespace()                            throws Exception {        XMLStreamReader xmlStream = createStream( "metadataRecord_namespaceDuplicated.xml" );        MetadataRecord record = MetadataRecordFactory.create( xmlStream );        assertThat( record, instanceOf( ISORecord.class ) );        assertThat( record.getIdentifier(), is( "655e5998-a20e-66b5-c888-00005553499" ) );    }
@Test  public void testCustomCmdArgs() throws Exception {    EasyMock.expect(instance.getConfiguration("animation-file")).andReturn(file.getAbsolutePath()).anyTimes();    EasyMock.expect(instance.getConfiguration("cmd-args")).andReturn("-t ffmpeg -w 160 -h 90").anyTimes();    EasyMock.replay(instance);    Assert.assertTrue(handler.start(workflow, null).allowsContinue());  }
@Test(timeout = 4000)	  public void testreplaceFirst()  throws Throwable  {	      String string0 = "SzpQ!4 ;U";	      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");	      	      char char0 = '`';	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');	      	      StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U");	      	      StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817);	      	      StrBuilder strBuilder4 = strBuilder3.append('`');	      	      StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U");	      	      String string1 = strBuilder0.getNullText();	      	      StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U");	      	      // Undeclared exception!	      try { 	        strBuilder0.insert(2817, (-1.0F));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 2817	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@SuppressWarnings("SelfEquals")    @Test    void testEqualityPositive() {        Assertions.assertTrue(referenceA.equals(referenceB));        Assertions.assertTrue(referenceB.equals(referenceA));        Assertions.assertTrue(referenceA.equals(referenceA));    }
@Test    public void testAddAllColumns() {        ColumnStore<Node> columnStore = generateEmptyNodeStore();        IndexImpl<Node> index = columnStore.indexStore.mainIndex;        ColumnImpl col1 = new ColumnImpl("1", String.class, "1", null, Origin.DATA, true, false);        ColumnImpl col2 = new ColumnImpl("2", String.class, "2", null, Origin.DATA, false, false);        ColumnImpl col3 = new ColumnImpl("3", String.class, "3", null, Origin.DATA, true, false);        col1.setStoreId(0);        col2.setStoreId(1);        col3.setStoreId(2);        index.addAllColumns(new ColumnImpl[] { col1, col2, col3 });        Assert.assertEquals(index.size(), 2);    }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = (String)DurationFormatUtils.M;	      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("M", 121);	      DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 0);	      DurationFormatUtils.Token durationFormatUtils_Token2 = new DurationFormatUtils.Token(durationFormatUtils_Token1);	      durationFormatUtils_Token1.equals(durationFormatUtils_Token2);	      durationFormatUtils_Token1.toString();	      durationFormatUtils_Token2.toString();	      durationFormatUtils_Token2.increment();	      durationFormatUtils_Token1.toString();	      int int0 = 1648;	      durationFormatUtils_Token0.toString();	      DurationFormatUtils.Token durationFormatUtils_Token3 = new DurationFormatUtils.Token(durationFormatUtils_Token2, 1648);	      DurationFormatUtils.formatPeriodISO(1L, 1880L);	      durationFormatUtils_Token1.getValue();	      durationFormatUtils_Token2.toString();	      durationFormatUtils_Token0.increment();	      TimeZone timeZone0 = null;	      // Undeclared exception!	      try { 	        DurationFormatUtils.formatPeriod((-1L), (long) 121, "(Hns96Q", false, (TimeZone) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	      }	  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[9];	      charSequenceArray0[0] = (CharSequence) "rtU";	      charSequenceArray0[1] = (CharSequence) "rtU";	      charSequenceArray0[2] = (CharSequence) "rtU";	      charSequenceArray0[3] = (CharSequence) "rtU";	      String string0 = StringUtils.remove("rtU", "ne8");	      	      charSequenceArray0[4] = (CharSequence) "rtU";	      charSequenceArray0[5] = (CharSequence) "rtU";	      charSequenceArray0[6] = (CharSequence) "rtU";	      charSequenceArray0[7] = (CharSequence) "rtU";	      charSequenceArray0[8] = (CharSequence) "rtU";	      String string1 = StringUtils.prependIfMissingIgnoreCase("rtU", "rtU", charSequenceArray0);	      assertEquals(9, charSequenceArray0.length);	  }
@Test public void testW() {		// Arrange:		final Logger mockLogger = mock(Logger.class);		FragmentsLogging.setLogger(mockLogger);		// Act:		FragmentsLogging.w(LOG_TAG, "message.warn");		FragmentsLogging.w(LOG_TAG, "message.warn", null);		FragmentsLogging.w(LOG_TAG, (Throwable) null);		// Assert:		verify(mockLogger).w(LOG_TAG, "message.warn");		verify(mockLogger).w(LOG_TAG, "message.warn", null);		verify(mockLogger).w(LOG_TAG, (Throwable) null);		verifyNoMoreInteractions(mockLogger);	}
@Test  public void testACLEquality4() {    AccessControlList a = new AccessControlList(            new AccessControlEntry("b", Permissions.Action.WRITE.toString(), false));    AccessControlList b = new AccessControlList(new AccessControlEntry("b", Permissions.Action.WRITE.toString(), false),            new AccessControlEntry("b", Permissions.Action.READ.toString(), false));    assertFalse(AccessControlUtil.equals(a, b));  }
@Test(timeout = 4000)	  public void testappendWithSeparators()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder((String) null);	      	      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);	      	      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterable<?>) null, (String) null);	      	      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null);	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher('L');	      	      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterable<?>) null, "");	      	      StrMatcher strMatcher2 = StrMatcher.stringMatcher("r8T0ER3M!z7l6zL5!");	      	      StrBuilder strBuilder4 = strBuilder0.append((double) 0);	      	      String string0 = strBuilder4.build();	      	      StrBuilder strBuilder5 = strBuilder0.deleteFirst((String) null);	      	      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "os.arch");	      	      boolean boolean0 = strBuilder0.isEmpty();	      	      boolean boolean1 = strBuilder2.equals(strBuilder4);	      	      String string1 = strBuilder1.getNullText();	      	      StrBuilder strBuilder7 = strBuilder0.appendSeparator(", Length: ");	      	      StrBuilder strBuilder8 = strBuilder0.insert(0, false);	      	      char[] charArray0 = new char[3];	      charArray0[0] = 'L';	      charArray0[1] = 'L';	      charArray0[2] = 'L';	      // Undeclared exception!	      try { 	        strBuilder5.append(charArray0, 1898, 1898);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // Invalid startIndex: 1898	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testisEquals()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false);	      	      double[] doubleArray0 = new double[4];	      doubleArray0[0] = 1.0;	      doubleArray0[1] = (-690.4802009552836);	      doubleArray0[2] = 765.3743487472304;	      doubleArray0[3] = 0.0;	      double[] doubleArray1 = new double[4];	      doubleArray1[0] = 0.0;	      doubleArray1[1] = 0.0;	      doubleArray1[2] = (-690.4802009552836);	      doubleArray1[3] = 1.0;	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(doubleArray0, doubleArray1);	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-690.4802009552836), (-1445.7440248));	      Integer integer0 = new Integer((-4784));	      EqualsBuilder.isRegistered(integer0, "]lEx>?>");	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(1.1F, 1.1F);	      equalsBuilder4.append(406, 406);	      assertFalse(equalsBuilder4.isEquals());	  }
@Test(timeout = 4000)	  public void testformatUTC()  throws Throwable  {	      Locale locale0 = Locale.CHINA;	      // Undeclared exception!	      try { 	        DateFormatUtils.formatUTC((-853L), (String) null, locale0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // pattern must not be null	         //	         verifyException("org.apache.commons.lang3.time.FormatCache", e);	      }	  }
@Test(timeout = 4000)	  public void testisIgnoreEmptyTokens()  throws Throwable  {	      StrTokenizer strTokenizer0 = new StrTokenizer("O;I", 'U', 'r');	      assertTrue(strTokenizer0.isIgnoreEmptyTokens());	  }
@Test    public void testFactoryCreatesFileStorage() {        assertTrue(StorageFactory.createStorage() instanceof FileStorage);    }
@Test(timeout = 4000)	  public void testreflectionHashCode()  throws Throwable  {	      Object[] objectArray0 = new Object[7];	      objectArray0[3] = (Object) '@';	      String[] stringArray0 = new String[8];	      int int0 = HashCodeBuilder.reflectionHashCode(objectArray0[3], stringArray0);	  }
@Test(timeout = 4000)	  public void testisUseIdentityHashCode()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer();	      standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0);	      assertTrue(standardToStringStyle0.isUseIdentityHashCode());	  }
@Test    public void toPinyin() throws Exception {        Set<String> words = mDict.mapping().keySet();        for (String word : words) {            String[] pinyins = mDict.mapping().get(word);            assertThat(word.length(), is(pinyins.length));        }    }
@Test(expected = WorkflowOperationException.class)  public void testUserNoEmail() throws Exception {    operation.setConfiguration(EmailWorkflowOperationHandler.TO_PROPERTY, USER_NAME_NO_EMAIL);    operation.setConfiguration(EmailWorkflowOperationHandler.CC_PROPERTY, USER_NAME_NO_EMAIL);    operation.setConfiguration(EmailWorkflowOperationHandler.BCC_PROPERTY, USER_NAME_NO_EMAIL);    operation.setConfiguration(EmailWorkflowOperationHandler.SUBJECT_PROPERTY, DEFAULT_SUBJECT);    operation.setConfiguration(EmailWorkflowOperationHandler.BODY_PROPERTY,            "This is the media package: ${mediaPackage.identifier}");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals(DEFAULT_TO, capturedTo.getValue());    Assert.assertEquals(DEFAULT_TO, capturedCC.getValue());    Assert.assertEquals(DEFAULT_TO, capturedBCC.getValue());    Assert.assertEquals(DEFAULT_SUBJECT, capturedSubject.getValue());    Assert.assertEquals("This is the media package: 3e7bb56d-2fcc-4efe-9f0e-d6e56422f557", capturedBody.getValue());  }
@Test  public void testGetTracksInitiallyEmpty() throws Exception {    assertEquals(0, pub.getTracks().length);  }
@Test(timeout = 4000)	  public void testinvokeExactMethod()  throws Throwable  {	      Object[] objectArray0 = new Object[1];	      // Undeclared exception!	      try { 	        MethodUtils.invokeExactMethod((Object) "endsWith", "toCharArray", objectArray0, (Class<?>[]) null);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	      }	  }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      Locale locale0 = Locale.JAPAN;	      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);	      DateUtils.iterator((Calendar) mockGregorianCalendar0, 1);	      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());	  }
@Test    public void test110Example1()                            throws IOException {        Map<String, String> kvpParams = readFileIntoMap( this.getClass().getResource( "wfs110/example1.kvp" ) );        DescribeFeatureType dft = parse( kvpParams );        assertEquals( dft.getHandle(), null );        assertEquals( dft.getOutputFormat(), null );        assertEquals( dft.getTypeNames().length, 1 );        assertEquals( dft.getTypeNames()[0], new QName( "TreesA_1M" ) );        assertEquals( dft.getVersion(), WFSConstants.VERSION_110 );    }
@Test(timeout = 4000)	  public void testrandomAlphanumeric()  throws Throwable  {	      String string0 = RandomStringUtils.randomAlphanumeric(0);	      	      int int0 = 56191;	      boolean boolean0 = true;	      char[] charArray0 = new char[3];	      charArray0[0] = 'D';	      charArray0[1] = 'A';	      charArray0[2] = ':';	      // Undeclared exception!	      try { 	        RandomStringUtils.random(56191, 56191, 0, true, true, charArray0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Parameter end (0) must be greater than start (56191)	         //	         verifyException("org.apache.commons.lang3.RandomStringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testinsert()  throws Throwable  {	      String string0 = "C#5,rw4FJ>B.4K$lilj";	      StrBuilder strBuilder0 = new StrBuilder("C#5,rw4FJ>B.4K$lilj");	      	      StringBuilder stringBuilder0 = new StringBuilder();	      	      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);	      	      StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0);	      	      StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) strBuilder0, 0, 0);	      	      StringBuilder stringBuilder4 = stringBuilder3.append('7');	      	      // Undeclared exception!	      try { 	        strBuilder0.appendln(stringBuilder4, Integer.MAX_VALUE, (-1758));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("");	      assertTrue(strBuilder0.isEmpty());	      	      ArrayDeque<Object> arrayDeque0 = new ArrayDeque<Object>();	      assertTrue(arrayDeque0.isEmpty());	      	      Iterator<Object> iterator0 = arrayDeque0.descendingIterator();	      assertTrue(arrayDeque0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators(iterator0, "java.class.version");	      assertTrue(strBuilder0.isEmpty());	      assertTrue(arrayDeque0.isEmpty());	      assertTrue(strBuilder1.isEmpty());	      	      StrBuilder strBuilder2 = strBuilder0.append('Y');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	  }
@Test(timeout = 4000)	  public void testfirstNonNull()  throws Throwable  {	      Object[] objectArray0 = new Object[7];	      objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils";	      Object object0 = ObjectUtils.firstNonNull(objectArray0);	  }
@Test  public void testByDateAndId() throws ServiceRegistryException {    String[] mp = createAndAddMediaPackagesSimple(1, 2, 2, Opt.<String>none());    Date start = new Date(-10000L);    Date end = new Date(new Date().getTime() + 10000L);    //Non terminal query, non terminal expectations    createIdAndDateExpectation(mp[0], start, end);    EasyMock.replay(sr);    tsamjp.moveByIdAndDate(mp[0], start, end, REMOTE_STORE_1_ID);    EasyMock.verify(sr);  }
@Test(timeout = 4000)	  public void testrandom()  throws Throwable  {	      String string0 = RandomStringUtils.randomAlphabetic(0);	      	      RandomStringUtils randomStringUtils0 = new RandomStringUtils();	      assertNotNull(randomStringUtils0);	      	      char[] charArray0 = new char[6];	      charArray0[0] = 'K';	      charArray0[1] = 'b';	      charArray0[2] = ';';	      charArray0[3] = '0';	      charArray0[4] = 'k';	      charArray0[5] = 'V';	      MockRandom mockRandom0 = new MockRandom((-1298L));	      	      String string1 = RandomStringUtils.random(2190, 0, 1551, false, false, charArray0, (Random) mockRandom0);', '0', 'k', 'V'}, charArray0);	      	      String string2 = RandomStringUtils.randomAscii(32);	      	      char[] charArray1 = new char[2];	      	      charArray1[0] = '1';	      charArray1[1] = 'I';	      String string3 = RandomStringUtils.random(2052, charArray1);	      	      String string4 = RandomStringUtils.random(2439);	      	      // Undeclared exception!	      try { 	        RandomStringUtils.randomNumeric((-557));	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Requested random string length -557 is less than 0.	         //	         verifyException("org.apache.commons.lang3.RandomStringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      BitField bitField0 = new BitField((-896));	      int int0 = bitField0.setValue((-896), (byte) (-128));	  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(0, strBuilder0.size());	      	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");	      assertEquals(27, strBuilder0.size());	      assertEquals(27, strBuilder1.size());	      	      char[] charArray0 = new char[1];	      charArray0[0] = '\\';	      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);	      assertEquals(29, strBuilder0.size());	      assertEquals(29, strBuilder1.size());	      assertEquals(29, strBuilder2.size());	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      assertEquals(81, strBuilder0.size());	      assertEquals(81, strBuilder1.size());	      assertEquals(81, strBuilder2.size());	      assertEquals(81, strBuilder3.size());	      	      StrBuilder strBuilder4 = strBuilder0.setLength(2822);	      assertEquals(2822, strBuilder0.size());	      assertEquals(2822, strBuilder4.size());	      	      Object[] objectArray0 = new Object[4];	      String string0 = strBuilder4.rightString(2822);	      assertEquals(2822, strBuilder0.size());	      assertEquals(2822, strBuilder4.size());	      	      objectArray0[0] = (Object) strBuilder0;	      objectArray0[2] = (Object) strBuilder4;	      objectArray0[2] = (Object) '\\';	      objectArray0[3] = (Object) strBuilder4;	      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);	      assertEquals(2954, strBuilder0.size());	      assertEquals(2954, strBuilder4.size());	      assertEquals(2954, strBuilder5.size());	      	      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);	      assertEquals(5777, strBuilder0.size());	      assertEquals(5777, strBuilder1.size());	      assertEquals(5777, strBuilder6.size());	      	      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");	      assertEquals(5777, strBuilder0.size());	      assertEquals(5777, strBuilder1.size());	      assertEquals(5777, strBuilder6.size());	      	      StrBuilder strBuilder7 = strBuilder0.append(false);	      assertEquals(5782, strBuilder0.size());	      assertEquals(5782, strBuilder7.size());	      	      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);	      assertEquals(5800, strBuilder0.size());	      assertEquals(5800, strBuilder8.size());	      assertEquals(5800, strBuilder1.size());	      	      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);	      assertEquals(8622, strBuilder0.size());	      assertEquals(8622, strBuilder1.size());	      assertEquals(8622, strBuilder9.size());	      assertEquals(8622, strBuilder2.size());	      assertEquals(8622, strBuilder3.size());	      assertEquals(8622, strBuilder6.size());	  }
@Test  public void testCast() {    Misc.cast(1, Integer.class);    Misc.cast(1.0, Double.class);    Misc.cast(1, Double.class);    Misc.cast(1, Short.class);    Misc.cast(1, Byte.class);    Misc.cast(1.0, Float.class);    Misc.cast(1, Float.class);    Misc.cast(1, Double.class);    Misc.cast(1, Number.class);    Misc.cast("1", String.class);  }
@Test  public void testGetPublication() throws Exception {    String expected = IOUtils.toString(getClass().getResource("/publication.json"));    given().pathParam("eventId", "notExists").pathParam("id", "notExists").expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().get(rt.host("{eventId}/asset/publication/{id}.json"));    given().pathParam("eventId", "asdasd").pathParam("id", "notExists").expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().get(rt.host("{eventId}/asset/publication/{id}.json"));    String result = given().pathParam("eventId", "asdasd").pathParam("id", "presentation-1").expect()            .statusCode(HttpStatus.SC_OK).when().get(rt.host("{eventId}/asset/publication/{id}.json")).asString();    assertThat(expected, SameJSONAs.sameJSONAs(result));  }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      assertTrue(strBuilder0.isEmpty());	      	      String string0 = strBuilder0.build();	      assertTrue(strBuilder0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.appendln('N');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      StrBuilder strBuilder2 = strBuilder1.replaceAll("", (String) null);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      String string1 = strBuilder0.rightString((-2383));	      assertFalse(strBuilder0.isEmpty());	  }
@Test(timeout = 4000)	  public void testhexDigitToBinary()  throws Throwable  {	      boolean[] booleanArray0 = Conversion.hexDigitToBinary('2');	  }
@Test    public void testParsingXPlanGML20()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaURL = TestProperties.getProperty( "schema_xplan2" );        if ( schemaURL == null ) {            return;        }        GMLAppSchemaReader adapter = new GMLAppSchemaReader( GMLVersion.GML_31, null, schemaURL );        AppSchema schema = adapter.extractAppSchema();        Assert.assertEquals( 132, schema.getFeatureTypes().length );    }
@Test  public void testExtractImageContentType() throws Exception {    String mediaPackageId = "mp";    String image = "element1";    InputStream in = null;    InputStream responseIn = null;    try {      in = getClass().getResourceAsStream("/opencast_header.gif");      endpoint.put(mediaPackageId, image, "opencast_header.gif", in);    } finally {      IOUtils.closeQuietly(in);    }    // execute gets, and ensure that the content types are correct    Response response = endpoint.restGet(mediaPackageId, image, null);    Assert.assertEquals("Gif content type", "image/gif", response.getMetadata().getFirst("Content-Type"));    // Make sure the image byte stream was not modified by the content type detection    try {      in = getClass().getResourceAsStream("/opencast_header.gif");      byte[] bytesFromClasspath = IOUtils.toByteArray(in);      responseIn = (InputStream) response.getEntity();      byte[] bytesFromRepo = IOUtils.toByteArray(responseIn);      Assert.assertTrue(Arrays.equals(bytesFromClasspath, bytesFromRepo));    } finally {      IOUtils.closeQuietly(in);      IOUtils.closeQuietly(responseIn);    }  }
@Test    public void testIsSelfLoop() {        GraphStore graphStore = GraphGenerator.generateTinyGraphStore();        NodeImpl n1 = graphStore.getNode("1");        Edge edge = graphStore.factory.newEdge("edge", n1, n1, EdgeTypeStore.NULL_LABEL, 1.0, true);        graphStore.addEdge(edge);        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view = store.createView();        view.fill();        DirectedSubgraph graph = store.getDirectedGraph(view);        Assert.assertTrue(graph.isSelfLoop(edge));        Assert.assertFalse(graph.isSelfLoop(graph.getEdge("0")));    }
@Test   public void testHoursFromNow() throws Exception   {      PrettyTime t = new PrettyTime(new Date(0));      Assert.assertEquals("3 hours from now", t.format(new Date(1000 * 60 * 60 * 3)));   }
@Test    public void test_pinyin_only_contains_letters() throws Exception {        Set<String> words = mDict.mapping().keySet();        for (String word : words) {            String[] pinyins = mDict.mapping().get(word);            for (String pinyin : pinyins) {                assertThat(pinyin.matches("[a-zA-Z]+"), is(true));            }        }    }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      short[] shortArray0 = new short[8];	      int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1464), (-1063));	  }
@Test(timeout = 4000)	  public void testisFieldSeparatorAtEnd()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      Boolean boolean0 = Boolean.valueOf("&=$L/rFw]D");	      standardToStringStyle0.isFullDetail(boolean0);	      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());	  }
@Test  public void testFindRoles() throws Exception {    // Static role from a list    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("ROLE_TWO%", Role.Target.ACL, 0, 2)).size());    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("ROLE_TWO", Role.Target.ACL, 0, 2)).size());    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("ROLE_ONE", Role.Target.ACL, 0, 2)).size());    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("ROLE_THREE", Role.Target.ACL, 0, 2)).size());    // Role matching a pattern    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("123_Learner", Role.Target.ACL, 0, 2)).size());    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("123_Instructor", Role.Target.ACL, 0, 2)).size());    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("456_Learner%", Role.Target.ACL, 0, 2)).size());    assertEquals(1, IteratorUtils.toList(customRoleProvider.findRoles("1b1b6e5d-34ac-4370-9b20-8d649df9878c_Instructor", Role.Target.ACL, 0, 2)).size());    // Role does not exist    assertEquals(0, IteratorUtils.toList(customRoleProvider.findRoles("unknown%", Role.Target.ACL, 0, 1)).size());    assertEquals(0, IteratorUtils.toList(customRoleProvider.findRoles("987_Admin", Role.Target.ACL, 0, 1)).size());    assertEquals(0, IteratorUtils.toList(customRoleProvider.findRoles("ROLE_ONE_", Role.Target.ACL, 0, 2)).size());  }
@Test    public void testWrite() throws IOException {        byte[] src = "HELLO MINA!".getBytes();        ByteBufferOutputStream bbos = new ByteBufferOutputStream(1024);        bbos.write(src);        bbos.close();        assertEquals(src.length, bbos.getByteBuffer().remaining());        assertEquals(ByteBuffer.wrap(src), bbos.getByteBuffer());    }
@Test(timeout = 4000)	  public void testsplitByWholeSeparator()  throws Throwable  {	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=.");	      	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null);	      	      String[] stringArray1 = StringUtils.splitByCharacterType("g");	      	      String string0 = StringUtils.swapCase("");	      	      String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z');	      	      String[] stringArray2 = StringUtils.split("Y-#fu$T?im");	      	      String string2 = StringUtils.substring("", 0, 32);	      	      float[] floatArray0 = new float[0];	      String string3 = StringUtils.join(floatArray0, 'L');	  }
@Test    public void testClearEdges() {        GraphStore graphStore = GraphGenerator.generateTinyGraphStore();        Node n1 = graphStore.getNode("1");        graphStore.clearEdges(n1);        Assert.assertEquals(graphStore.getEdgeCount(), 0);    }
@Test  public void testGetUserRoles() throws Exception {    final String response = given().log().all().expect().statusCode(SC_OK).when().get(env.host("/info/me/roles"))            .asString();    JSONArray json = (JSONArray) parser.parse(response);    assertTrue("User does not have role 'ROLE_USER_92623987_OPENCAST_ORG'",            json.contains("ROLE_USER_92623987_OPENCAST_ORG"));    assertTrue("User does not have role 'ROLE_STUDENT'", json.contains("ROLE_STUDENT"));    assertEquals(2, json.size());  }
@Test(timeout = 4000)	  public void testappendDetail()  throws Throwable  {	      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;	      // Undeclared exception!	      try { 	        toStringStyle0.appendDetail((StringBuffer) null, "Za5J2D$*3b", 'l');	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.builder.ToStringStyle", e);	      }	  }
@Test(timeout = 4000)	  public void testpreviousIndex()  throws Throwable  {	      char[] charArray0 = new char[9];	      charArray0[0] = 'u';	      charArray0[6] = '0';	      StrMatcher strMatcher0 = StrMatcher.trimMatcher();	      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);	      strTokenizer0.next();	      strTokenizer0.next();	      int int0 = strTokenizer0.previousIndex();	  }
@Test  public void testGetPublicationList() throws Exception {    given().pathParam("eventId", "notExists").expect().statusCode(HttpStatus.SC_NOT_FOUND).when()            .get(rt.host("{eventId}/asset/publication/publications.json"));    String expected = IOUtils.toString(getClass().getResource("/publications.json"));    String result = given().pathParam("eventId", "asdasd").expect().statusCode(HttpStatus.SC_OK).when()      .get(rt.host("{eventId}/asset/publication/publications.json")).asString();    assertThat(expected, SameJSONAs.sameJSONAs(result));  }
@Test    public void testSinglePathToString() {        List<String> list = new ArrayList<String>();        list.add("a");        assertEquals("a", writer.pathToString(list));    }
@Test(timeout = 4000)	  public void testdefaultString()  throws Throwable  {	      String string0 = StringUtils.defaultString("Vsr!q&]Z0x}ObR(|8eD");	      	      boolean boolean0 = StringUtils.isAsciiPrintable("Vsr!q&]Z0x}ObR(|8eD");	      	      boolean boolean1 = StringUtils.containsWhitespace("Vsr!q&]Z0x}ObR(|8eD");	      	      String string1 = StringUtils.center("", 1497, "#(0@F");	      	      String string2 = StringUtils.swapCase("Vsr!q&]Z0x}ObR(|8eD");	      	      StringUtils stringUtils0 = new StringUtils();	      	      String string3 = StringUtils.join((Object[]) null, '_');	      	      double[] doubleArray0 = new double[3];	      doubleArray0[0] = (double) (-1);	      doubleArray0[1] = 0.0;	      doubleArray0[2] = (double) (-1);	      String string4 = StringUtils.join(doubleArray0, 'Y', 1497, (-1));	      	      String string5 = StringUtils.center("Vsr!q&]Z0x}ObR(|8eD", 1881, "Vsr!q&]Z0x}ObR(|8eD");	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      boolean boolean0 = StringUtils.isBlank((CharSequence) null);	      	      boolean boolean1 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);	      	      String string0 = StringUtils.defaultString("fXNk|L<");	      	      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Search and Replace array lengths don't match: ");	  }
@Test  public void testIgnoredEvents() {    eventHeader.setEventType(EventType.UNKNOWN);    XAPrepareEventData eventData = new XAPrepareEventData();    Optional<BinlogEvent> binlogEvent =        BinaryLogConnectorEventMapper.INSTANCE.map(            new Event(eventHeader, eventData), BINLOG_FILE_POS);    assertFalse(binlogEvent.isPresent());  }
@Test  public void testLastHarvested() {    PersistenceEnv penv = newPenv();    assertEquals(Option.none(), LastHarvested.getLastHarvestDate(penv, "bla"));    DateTime now = new DateTime();    Date a = now.toDate();    // save    LastHarvested.update(penv, new LastHarvested("url-1", a));    assertEquals(some(a), LastHarvested.getLastHarvestDate(penv, "url-1"));    // now update    Date b = now.plusMinutes(1).toDate();    LastHarvested.update(penv, new LastHarvested("url-1", b));    assertEquals(some(b), LastHarvested.getLastHarvestDate(penv, "url-1"));    // save another    LastHarvested.update(penv, new LastHarvested("url-2", a));    assertEquals(some(a), LastHarvested.getLastHarvestDate(penv, "url-2"));    // cleanup 1    LastHarvested.cleanup(penv, "url-1 url-2".split(" "));    assertTrue(LastHarvested.getLastHarvestDate(penv, "url-1").isSome());    assertTrue(LastHarvested.getLastHarvestDate(penv, "url-2").isSome());    // cleanup 2    LastHarvested.cleanup(penv, "url-2".split(" "));    assertTrue(LastHarvested.getLastHarvestDate(penv, "url-1").isNone());    assertTrue(LastHarvested.getLastHarvestDate(penv, "url-2").isSome());  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      short[] shortArray0 = new short[1];	      CompareToBuilder compareToBuilder1 = compareToBuilder0.append(shortArray0, shortArray0);	  }
@Test    void checkNotNull_notNull() {        assertThat(checkNotNull("bar", "foo")).isTrue();    }
@Test    public void testAddMetadata() {        Configuration configuration = generateConfiguration();        configuration.addMetadata("keyVal", "foo", "bar");        HashMap<String, Object> testMap = new HashMap<>();        testMap.put("key1", "val1");        testMap.put("key2", "val2");        configuration.addMetadata("mapVal", testMap);        assertEquals("bar", configuration.getMetadata("keyVal", "foo"));        assertEquals("val1", configuration.getMetadata("mapVal", "key1"));        assertEquals("val2", configuration.getMetadata("mapVal", "key2"));    }
@Test(timeout = 4000)	  public void testdecrement()  throws Throwable  {	      MutableDouble mutableDouble0 = new MutableDouble((-447.178917));	      mutableDouble0.decrement();	      mutableDouble0.increment();	      mutableDouble0.subtract((-447.178917));	      Double double0 = mutableDouble0.getValue();	  }
@Test(timeout = 4000)	  public void testregister()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      equalsBuilder0.append(0.0F, 1.7F);	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-122), (short)143);	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (short)143, (-1.0F));	      long[] longArray0 = new long[1];	      longArray0[0] = (long) (short)143;	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);	      Object object0 = new Object();	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(object0, (Object) "WQtm~X&IKh=");	      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-113), (byte) (-69));	      Object object1 = new Object();	      Integer integer0 = new Integer(7);	      EqualsBuilder.unregister(object1, integer0);	      equalsBuilder5.appendSuper(true);	      ImmutablePair<String, EqualsBuilder> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.builder.IDKey", equalsBuilder1);	      ImmutablePair<Object, String> immutablePair1 = new ImmutablePair<Object, String>("org.apache.commons.lang3.builder.IDKey", "4I1O{{U4N:-.");	      Class<Object> class0 = Object.class;	      String[] stringArray0 = new String[9];	      stringArray0[0] = "4I1O{{U4N:-.";	      stringArray0[1] = "4I1O{{U4N:-.";	      stringArray0[2] = "4I1O{{U4N:-.";	      stringArray0[3] = "4I1O{{U4N:-.";	      stringArray0[4] = " DB)<kCgd%F=";	      stringArray0[5] = "WQtm~X&IKh=";	      stringArray0[6] = "WQtm~X&IKh=";	      stringArray0[7] = "WQtm~X&IKh=";	      stringArray0[8] = "4I1O{{U4N:-.";	      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) immutablePair0, (Object) immutablePair1, true, (Class<?>) class0, stringArray0);	  }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      String string0 = "hZ3CNnc|]e";	      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");	      assertEquals(42, strBuilder0.capacity());	      	      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();	      assertEquals(10, strBuilder0.capacity());	      assertEquals(10, strBuilder1.capacity());	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertEquals(10, strBuilder0.capacity());	      	      int int0 = strBuilder_StrBuilderReader0.read();	      assertEquals(10, strBuilder0.capacity());	      	      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');	      assertEquals(228, strBuilder0.capacity());	      assertEquals(228, strBuilder2.capacity());	      	      StrMatcher strMatcher0 = StrMatcher.tabMatcher();	      	      StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0);	      assertEquals(228, strBuilder0.capacity());	      assertEquals(228, strBuilder2.capacity());	      assertEquals(228, strBuilder3.capacity());	      	      char[] charArray0 = new char[2];	      charArray0[0] = '/';	      charArray0[1] = '/';	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      assertEquals(2, charBuffer0.capacity());	      	      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);	      assertEquals(228, strBuilder0.capacity());	      assertEquals(2, charBuffer0.capacity());	      	      strBuilder_StrBuilderReader0.close();	      assertEquals(228, strBuilder0.capacity());	      	      StrBuilder strBuilder4 = strBuilder2.append((long) 104);	      assertEquals(228, strBuilder0.capacity());	      assertEquals(228, strBuilder2.capacity());	      assertEquals(228, strBuilder4.capacity());	      	      StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104);	      assertEquals(228, strBuilder0.capacity());	      assertEquals(228, strBuilder2.capacity());	      assertEquals(228, strBuilder4.capacity());	      assertEquals(228, strBuilder5.capacity());	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      assertEquals(228, strBuilder0.capacity());	      	      List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList();	      assertEquals(228, strBuilder0.capacity());	      	      List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));	      assertEquals(228, strBuilder0.capacity());	      	      StrBuilder strBuilder6 = new StrBuilder();	      assertEquals(32, strBuilder6.capacity());	      	      char[] charArray1 = new char[2];	      	      charArray1[0] = '/';	      charArray1[1] = '/';	      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);	      assertEquals(228, strBuilder0.capacity());	      assertEquals(228, strBuilder7.capacity());	      	      int int2 = 101;	      // Undeclared exception!	      try { 	        strBuilder2.append("/t@?VM", (-775), (-3316));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test public void testGetAnnotationHandler() {		// Arrange:		final WebFragment fragment = new WebFragment();		// Act + Assert:		assertThat(fragment.getAnnotationHandler(), is(notNullValue()));	}
@Test(timeout = 4000)	  public void testisUseIdentityHashCode()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      boolean boolean0 = standardToStringStyle0.isUseClassName();	      assertTrue(standardToStringStyle0.isUseIdentityHashCode());	  }
@Test  public void testListSimple() throws ListProviderException {    Map<String, String> list = usersListProvider.getList(UsersListProvider.NAME_ONLY, null);    Assert.assertTrue(list.containsKey(user1.getName()));    Assert.assertTrue(list.containsKey(user2.getName()));    Assert.assertTrue(list.containsKey(user3.getName()));    Assert.assertEquals(3, list.size());    list = usersListProvider.getList(UsersListProvider.USERNAME, null);    Assert.assertTrue(list.containsKey(user1.getUsername()));    Assert.assertTrue(list.containsKey(user2.getUsername()));    Assert.assertTrue(list.containsKey(user3.getUsername()));    Assert.assertTrue(list.containsKey(user4.getUsername()));    Assert.assertEquals(4, list.size());    list = usersListProvider.getList(UsersListProvider.EMAIL_ONLY, null);    Assert.assertTrue(list.containsKey(user1.getEmail()));    Assert.assertTrue(list.containsKey(user4.getEmail()));    Assert.assertEquals(2, list.size());    list = usersListProvider.getList(UsersListProvider.USERDIRECTORY_ONLY, null);    Assert.assertTrue(list.containsKey(user1.getProvider()));    Assert.assertEquals(1, list.size());  }
@Test    public void testSetUser() {        String firstId = "123";        String firstEmail = "fake@example.com";        String firstName = "Bob Swaggins";        event.setUser(firstId, firstEmail, firstName);        assertEquals(firstId, event.getUser().getId());        assertEquals(firstEmail, event.getUser().getEmail());        assertEquals(firstName, event.getUser().getName());        String userId = "foo";        event.setUser(userId, event.getUser().getEmail(), event.getUser().getName());        assertEquals(userId, event.getUser().getId());        assertEquals(firstEmail, event.getUser().getEmail());        assertEquals(firstName, event.getUser().getName());        String userEmail = "another@example.com";        event.setUser(event.getUser().getId(), userEmail, event.getUser().getName());        assertEquals(userId, event.getUser().getId());        assertEquals(userEmail, event.getUser().getEmail());        assertEquals(firstName, event.getUser().getName());        String userName = "Isaac";        event.setUser(event.getUser().getId(), event.getUser().getEmail(), userName);        assertEquals(userId, event.getUser().getId());        assertEquals(userEmail, event.getUser().getEmail());        assertEquals(userName, event.getUser().getName());    }
@Test    public void testExample2Wfs110()                            throws Exception {        URL example = this.getClass().getResource( EXAMPLE2_WFS110 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( example );        LockFeature lockFeature = LockFeatureKVPAdapter.parse( kvpMap );        FeatureIdQuery featureLock = (FeatureIdQuery) lockFeature.getQueries().get( 0 );        assertEquals( "RoadL_1M.1013", featureLock.getFeatureIds()[0] );    }
@Test	public void testGetPassword() {		assertEquals("test12", user.getPassword());	}
@Test(expected = SentryNoSuchObjectException.class)  public void testAddGroupsNonExistantRole()      throws Exception {    String roleName = "non-existant-role";    String grantor = "grantor";    sentryStore.alterRoleAddGroups(SEARCH, roleName, Sets.newHashSet("g1"), grantor);  }
@Test    public void testDeepEqualsEmpty() {        EdgeTypeStore edgeTypeStore1 = new EdgeTypeStore();        Assert.assertTrue(edgeTypeStore1.deepEquals(edgeTypeStore1));        EdgeTypeStore edgeTypeStore2 = new EdgeTypeStore();        Assert.assertTrue(edgeTypeStore1.deepEquals(edgeTypeStore2));    }
@Test(timeout = 4000)	  public void testgetSummaryObjectEndText()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer();	      byte[] byteArray0 = new byte[0];	      standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0);	      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());	  }
@Test(timeout = 4000)	  public void testtoComparison()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      compareToBuilder0.append((-1L), 0L);	      compareToBuilder0.append(0L, (long) 0);	      assertEquals((-1), compareToBuilder0.toComparison());	  }
@Test    public void testParseIntervalMapBoolean() {        IntervalBooleanMap expected = new IntervalBooleanMap();        expected.put(new Interval(1, 2), true);        expected.put(new Interval(3, 5), false);        expected.put(new Interval(5, 6), false);        expected.put(new Interval(6, 7), true);        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(Boolean.class, "[1, 2, true]; [3, 5, false]; [5, 6, '0']; [6, 7, \"1\"]"));        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(boolean.class, "[1, 2, true]; [3, 5, false]; [5, 6, 0]; [6, 7, 1]"));    }
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      Double[] doubleArray0 = new Double[1];	      int[] intArray0 = new int[5];	      Object[] objectArray0 = ArrayUtils.removeAll((Object[]) doubleArray0, intArray0);	  }
@Test(timeout = 4000)	  public void testgetRawType()  throws Throwable  {	      Class<Object> class0 = Object.class;	      Class<?> class1 = TypeUtils.getRawType(class0, class0);	      boolean boolean0 = TypeUtils.isArrayType(class1);	  }
@Test(timeout = 4000)	  public void testindexOfDifference()  throws Throwable  {	      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");	      	      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");	      	      StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);	      StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";	      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	      	      StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);	      StringUtils.right("", 0);	      String string1 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);	      	      String string2 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");	      	      StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);	      StringUtils.lowerCase("s");	      String string3 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);	      	      String[] stringArray0 = new String[9];	      stringArray0[0] = ".ti')kKzb5J(cbBlh";	      stringArray0[1] = "s";	      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";	      stringArray0[3] = "s";	      stringArray0[4] = "s";	      stringArray0[5] = "{}";	      stringArray0[6] = "{}";	      stringArray0[7] = "";	      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";	      String string4 = StringUtils.getCommonPrefix(stringArray0);	      	      String string5 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "Kby.&&D(~k)>=");	      	      StringUtils.join((Object[]) stringArray0, 'p', 1114, (-1));	      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.cosmmons.lang3.StringUtils", (CharSequence) "", (-3630));	  }
@Test(timeout = 4000)	  public void testgetAllFieldsList()  throws Throwable  {	      Class<Field> class0 = Field.class;	      List<Field> list0 = FieldUtils.getAllFieldsList(class0);	      // Undeclared exception!	      try { 	        FieldUtils.readField((Object) list0, "");	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Cannot locate field  on class java.util.ArrayList	         //	         verifyException("org.apache.commons.lang3.reflect.FieldUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;	      StringBuffer stringBuffer0 = new StringBuffer();	      Boolean boolean0 = Boolean.FALSE;	      toStringStyle0.NO_FIELD_NAMES_STYLE.append(stringBuffer0, "<null>", (int[]) null, boolean0);	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      String string0 = BooleanUtils.toStringYesNo(true);	  }
@Test(timeout = 4000)	  public void testright()  throws Throwable  {	      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");	      	      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");	      	      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);	      	      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, ')');	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";	      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";	      int int1 = StringUtils.indexOfDifference(charSequenceArray0);	      	      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);	      	      String string3 = StringUtils.right("", 0);	      	      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);	      	      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");	      	      int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);	      	      String string6 = StringUtils.lowerCase("s");	      	      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);	      	      String[] stringArray0 = new String[26];	      stringArray0[0] = ".ti')kKzb5J(cbBlh";	      stringArray0[1] = "s";	      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";	      stringArray0[3] = "s";	      stringArray0[4] = "s";	      stringArray0[5] = "{}";	      stringArray0[6] = "{}";	      stringArray0[7] = "";	      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";	      String string8 = StringUtils.getCommonPrefix(stringArray0);	      	      String string9 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "Kby.&&D(~k)>=");	      	      String string10 = StringUtils.removeEnd("{}", "s");	      	      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.cosmmons.lang3.StringUtils", (CharSequence) "{}", (-3630));	  }
@Test(timeout = 4000)	  public void testsubstringAfter()  throws Throwable  {	      Locale locale0 = Locale.SIMPLIFIED_CHINESE;	      	      String string0 = StringUtils.upperCase("", locale0);	      	      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");	      	      int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5);	      	      int int2 = StringUtils.indexOf((CharSequence) "", 236, 0);	      	      boolean boolean0 = StringUtils.isEmpty("");	      	      LinkedList<String> linkedList0 = new LinkedList<String>();	      	      Iterator<String> iterator0 = linkedList0.descendingIterator();	      	      String string1 = StringUtils.join(iterator0, '+');	      	      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "");	      	      String string2 = StringUtils.join((float[]) null, '+');	      	      String string3 = StringUtils.upperCase("iCQh");	      	      char[] charArray0 = new char[2];	      charArray0[0] = '+';	      charArray0[1] = '\"';	      boolean boolean2 = StringUtils.containsNone((CharSequence) "ICQH", charArray0);	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens("w+Pf>Zb");	      	      Locale locale1 = Locale.TRADITIONAL_CHINESE;	      	      boolean boolean3 = locale1.hasExtensions();	      	      String string4 = StringUtils.lowerCase((String) null, locale1);	      	      boolean boolean4 = StringUtils.isNumeric((CharSequence) null);	      	      short[] shortArray0 = new short[1];	      shortArray0[0] = (short)0;	      String string5 = StringUtils.join(shortArray0, '\"');	      	      String string6 = StringUtils.substringAfter("", "*=");	      	      boolean boolean5 = StringUtils.containsIgnoreCase("*=", (CharSequence) null);	  }
@Test    public void convertImagePathsToBase64WithoutAlt() throws Exception {        String result3 = repository.cacheFileFromArchive(module, "test string with <img src='bible.png'> and other symbols");        assertNotNull(result3);        assertEquals(27909, result3.length());    }
@Test    public void dictsToTrie_null_should_return_null() throws Exception {        assertThat(Utils.dictsToTrie(null), nullValue());    }
@Test    public void givenString$setVideoRecordingFloatingButtonPosition_whenQuery_thenShouldCallNativeApi() {        // given        PowerMockito.mockStatic(BugReporting.class);        final Map<String, Object> args = new HashMap<>();        ArgsRegistry.registerInstabugVideoRecordingFloatingButtonPositionArgs(args);        final String[] keysArray = args.keySet().toArray(new String[0]);        // when        bugReportingModule.setVideoRecordingFloatingButtonPosition(keysArray[0]);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        InstabugVideoRecordingButtonPosition position = (InstabugVideoRecordingButtonPosition) args.get(keysArray[0]);        BugReporting.setVideoRecordingFloatingButtonPosition(position);    }
@SuppressLint("CommitTransaction")	@Test public void testCreateTransaction() {		// Arrange:		final FragmentManager mockManager = mock(FragmentManager.class);		final FragmentTransaction mockTransaction = mock(FragmentTransaction.class);		final Fragment mockFragment = mock(TestFragment.class);		final FragmentController controller = new FragmentController(mockManager);		controller.setViewContainerId(TestActivity.CONTENT_VIEW_ID);		final FragmentRequest request = controller.newRequest(mockFragment);		when(mockManager.beginTransaction()).thenReturn(mockTransaction);		// Act:		final FragmentTransaction transaction = controller.createTransaction(request);		// Assert:		assertThat(transaction, is(notNullValue()));		verify(mockFragment, times(0)).setArguments(any(Bundle.class));		verify(mockTransaction, times(0)).setCustomAnimations(anyInt(), anyInt(), anyInt(), anyInt());		verify(mockTransaction, times(0)).setCustomAnimations(anyInt(), anyInt());		verify(mockTransaction, times(0)).setTransitionStyle(anyInt());		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {			verify(mockTransaction, times(0)).addSharedElement(any(View.class), anyString());		}		verify(mockTransaction, times(0)).addToBackStack(anyString());	}
@Test  public void testParseXacml() throws Exception {    assertEquals(acl.getEntries(), XACMLUtils.parseXacml(this.getClass().getResourceAsStream("/xacml.xml")).getEntries());  }
@Test(timeout = 4000)	  public void testendsWith()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      char[] charArray0 = new char[5];	      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);	      	      int int0 = strBuilder0.indexOf((StrMatcher) strMatcher_CharSetMatcher0, 8);	      	      charArray0[0] = '+';	      StrBuilder strBuilder1 = strBuilder0.append(charArray0);	      	      charArray0[1] = 'd';	      charArray0[2] = '8';	      charArray0[3] = '=';	      charArray0[4] = 'H';	      StrBuilder strBuilder2 = strBuilder0.appendln(charArray0);	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      	      Writer writer0 = strBuilder2.asWriter();	      	      boolean boolean0 = strBuilder0.endsWith((String) null);	      	      // Undeclared exception!	      try { 	        strBuilder2.append(strBuilder3, 2438, 2438);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      String string0 = strBuilder0.build();	      	      StrBuilder strBuilder1 = strBuilder0.appendln('N');	      	      StrBuilder strBuilder2 = strBuilder1.replaceAll("", (String) null);	      	      String string1 = strBuilder0.rightString((-2383));	  }
@Test(timeout = 4000)	  public void teststripToEmpty()  throws Throwable  {	      int int0 = 0;	      String string0 = StringUtils.center("org.apache.commons.lang3.StringUtils", 0, "org.apache.commons.lang3.StringUtils");	      	      String string1 = StringUtils.stripToEmpty("org.apache.commons.lang3.StringUtils");	      	      char char0 = 'R';	      String string2 = StringUtils.center("JL_O}", 0, 'R');	      	      String string3 = StringUtils.center((String) null, 0, "org.apache.commons.lang3.StringUtils");	      	      char char1 = '}';	      String string4 = StringUtils.rightPad((String) null, 2185, '}');	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 2185);	      	      Stack<Object> stack0 = new Stack<Object>();	      	      // Undeclared exception!	      try { 	        stack0.listIterator((-1));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1	         //	         verifyException("java.util.Vector", e);	      }	  }
@Test  public void testGetAndSaveJobResultsError503() throws Exception {    CloseableHttpResponse response = EasyMock.createNiceMock(CloseableHttpResponse.class);    StatusLine status = EasyMock.createNiceMock(StatusLine.class);    EasyMock.expect(response.getStatusLine()).andReturn(status).anyTimes();    EasyMock.expect(status.getStatusCode()).andReturn(HttpStatus.SC_SERVICE_UNAVAILABLE).anyTimes();    EasyMock.replay(response, status);    Capture<HttpGet> capturedGet = Capture.newInstance();    EasyMock.expect(httpClient.execute(EasyMock.capture(capturedGet))).andReturn(response).anyTimes();    EasyMock.replay(httpClient);    try {      service.getAndSaveJobResults(JOB_ID);    } catch (TranscriptionServiceException e) {      Assert.assertEquals(503, e.getCode());    }  }
@Test(timeout = 4000)	  public void testparseObject()  throws Throwable  {	      FastDateFormat fastDateFormat0 = FastDateFormat.getInstance();	      ParsePosition parsePosition0 = new ParsePosition(0);	      Object object0 = fastDateFormat0.parseObject("1/1/70 12:00 AM", parsePosition0);	  }
@Test    public void test02() {        List<String> expectedResult = new ArrayList();        expectedResult.add("db_00.user_0000");        expectedResult.add("db_01.user_0001");        expectedResult.add("db_02.user_0002");        expectedResult.add("db_03.user_0003");        expectedResult.add("db_00.user_0004");        expectedResult.add("db_01.user_0005");        expectedResult.add("db_02.user_0006");        expectedResult.add("db_03.user_0007");        expectedResult.add("db_00.user_0008");        expectedResult.add("db_01.user_0009");        expectedResult.add("db_02.user_0010");        expectedResult.add("db_03.user_0011");        expectedResult.add("db_00.user_0012");        expectedResult.add("db_01.user_0013");        expectedResult.add("db_02.user_0014");        expectedResult.add("db_03.user_0015");        List<SimpleShardRouteRuleBinding> bindings = new ArrayList<SimpleShardRouteRuleBinding>();        SpelShardRouteRule numRule = new SpelShardRouteRule("{scName}_{format('%02d', sdValue % 4)}",                                                            "{tbName}_{format('%04d', sdValue % 16)}");        SimpleShardRouteRuleBinding user = new SimpleShardRouteRuleBinding();        user.setScName("db");        user.setTbName("user");        user.setSdKey("id");        user.setSdValues("[0..15]");        user.setRule(numRule);        bindings.add(user);        SimpleShardRouter shardRouter = new SimpleShardRouter(bindings);        List<ShardRouteInfo> routeInfos = shardRouter.getRouteInfos("db", "user");        int count = 0;        for (ShardRouteInfo si : routeInfos) {            Assert.equals(si.toString(), expectedResult.get(count));            count++;        }    }
@Test  public void testLimit() {    assertTrue(limit(track(1511), l.mk(sec(-1), sec(1511), sec(1512))).isEmpty());    assertTrue(limit(track(1511), l.mk(percent(-0.2), percent(101))).isEmpty());    assertEquals(4, limit(track(1511), l.mk(percent(0), percent(100), sec(0), sec(1510))).size());    assertEquals(4, limit(track(1511), l.mk(percent(0), percent(10), sec(10), sec(1500), percent(200))).size());  }
@Test    public void testEmptyPathToString() {        List<String> list = new ArrayList<String>();        list.add("");        assertEquals("", writer.pathToString(list));    }
@Test(timeout = 4000)	  public void testtrimToEmpty()  throws Throwable  {	      String string0 = "ARM45";	      String string1 = StringUtils.substringBeforeLast("BnJbN*", "ARM45");	      	      String string2 = StringUtils.trimToEmpty("");	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "BnJbN*", (CharSequence) "");	      	      String string3 = StringUtils.swapCase("BnJbN*");	      	      PriorityQueue<String> priorityQueue0 = new PriorityQueue<String>();	      	      HashSet<String> hashSet0 = new HashSet<String>(priorityQueue0);	      	      boolean boolean0 = hashSet0.add("BnJbN*");	      	      String string4 = StringUtils.join((Iterable<?>) hashSet0, 's');	      	      String string5 = StringUtils.chomp("", "bNjBn*");	      	      boolean boolean1 = StringUtils.contains((CharSequence) "", 0);	      	      Object[] objectArray0 = new Object[1];	      objectArray0[0] = (Object) "java.lang.String@0000000001";	      // Undeclared exception!	      try { 	        StringUtils.join(objectArray0, 'x', 0, 57);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // 1	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testreadField()  throws Throwable  {	      // Undeclared exception!	      try { 	        FieldUtils.readField((Object) null, "className must not be null.", false);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // target object must not be null	         //	         verifyException("org.apache.commons.lang3.reflect.FieldUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testpreviousIndex()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");	      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());	      strTokenizer0.forEachRemaining(consumer0);	      strTokenizer0.toString();	      assertEquals(0, strTokenizer0.previousIndex());	  }
@Test(timeout = 4000)	  public void testasWriter()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder strBuilder1 = strBuilder0.appendln(true);	      	      StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F));	      	      StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null);	      	      Writer writer0 = strBuilder3.asWriter();	      	      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();	      	      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0);	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');	      	      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 0);	      	      char[] charArray0 = new char[0];	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray0);	      	      StrBuilder strBuilder5 = new StrBuilder(0);	      	      int int1 = 6;	      StrBuilder strBuilder6 = new StrBuilder((-1));	      	      int int2 = StrBuilder.CAPACITY;	      	      StrBuilder strBuilder7 = strBuilder6.appendln((String) null, 0, 2255);	      	      StrBuilder strBuilder8 = strBuilder7.appendPadding(6, '2');	      	      // Undeclared exception!	      try { 	        strBuilder6.insert(137, (Object) strBuilder5);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 137	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void searchTwoWord() throws Exception {        BookSearchProcessor<String, BaseModule> searchProcessor = new BookSearchProcessor<>(repository, module, "Gen", "авел каин");        Map<String, String> results = searchProcessor.search();        assertThat(results.size(), equalTo(3));        Set<String> references = results.keySet();        assertTrue(references.contains("RST.Gen.4.2"));        assertTrue(references.contains("RST.Gen.4.8"));        assertTrue(references.contains("RST.Gen.4.25"));    }
@Test  public void testStartSelectByFlavor() throws Exception {    operation.setConfiguration(StartTranscriptionOperationHandler.SOURCE_FLAVOR, "audio/ogg");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals("audioTrack1", capturedTrack.getValue().getIdentifier());  }
@Test(timeout = 4000)	  public void testreflectionCompare()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      Integer integer0 = compareToBuilder0.build();	      Class<String> class0 = String.class;	      String[] stringArray0 = new String[6];	      // Undeclared exception!	      try { 	        CompareToBuilder.reflectionCompare((Object) integer0, (Object) null, false, (Class<?>) class0, stringArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);	      }	  }
@Test  public void testAddMediaPackagePartialTrack() throws Exception {    String mediaPackage = MediaPackageParser.getAsXml(((MediaPackage) restService.createMediaPackage().getEntity()));    Response response = restService.addMediaPackagePartialTrack("http://foo/av.mov", "presenter/source+partial", 1000L,            mediaPackage);    Assert.assertEquals(Status.OK.getStatusCode(), response.getStatus());    response = restService.addMediaPackagePartialTrack(newPartialMockRequest());    Assert.assertEquals(Status.OK.getStatusCode(), response.getStatus());  }
@Test    public void goAwayAdditionalData() {        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.GOAWAY_DATA_BUFFER);        Http2GoAwayFrame frame = (Http2GoAwayFrame) decoder.decode(buffer, context);        assertNotNull(frame);        assertEquals(9, frame.getLength());        assertEquals(7, frame.getType());        assertEquals(0, frame.getFlags());        assertEquals(1, frame.getStreamID());        assertEquals(256, frame.getLastStreamID());        assertEquals(0x00010203, frame.getErrorCode());        assertArrayEquals(new byte[] {0x01}, frame.getData());    }
@Test  public void testWorkflowDispatcherRunTranscriptionCompletedState() throws Exception {    service.activate(cc);    database.storeJobControl(MP_ID, TRACK_ID, JOB_ID, TranscriptionJobControl.Status.InProgress.name(), TRACK_DURATION, DATE_EXPECTED, PROVIDER);    database.storeJobControl("mpId2", "audioTrack2", "jobId2", TranscriptionJobControl.Status.InProgress.name(),            TRACK_DURATION, DATE_EXPECTED, PROVIDER);    database.updateJobControl(JOB_ID, TranscriptionJobControl.Status.TranscriptionComplete.name());    Capture<Set<String>> capturedMpIds = mockAssetManagerAndWorkflow(IBMWatsonTranscriptionService.DEFAULT_WF_DEF,            true);    WorkflowDispatcher dispatcher = service.new WorkflowDispatcher();    dispatcher.run();    // Check if only one mp has a workflow created for it    Assert.assertEquals(1, capturedMpIds.getValue().size());    // And if it was the correct one    Assert.assertEquals(MP_ID, capturedMpIds.getValue().iterator().next());    // Check if status in db was updated    TranscriptionJobControl job = database.findByJob(JOB_ID);    Assert.assertNotNull(job);    Assert.assertEquals(TranscriptionJobControl.Status.Closed.name(), job.getStatus());  }
@Test(timeout = 4000)	  public void testgetChars()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("2g");	      	      int int0 = (-1287);	      char[] charArray0 = new char[7];	      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);	      	      StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0);	      	      StrMatcher strMatcher1 = StrMatcher.charSetMatcher("2g");	      	      boolean boolean0 = strBuilder0.contains((StrMatcher) strMatcher_CharSetMatcher0);	      	      charArray0[0] = 'n';	      charArray0[1] = '=';	      charArray0[2] = '$';	      charArray0[3] = 'W';	      charArray0[4] = 'X';	      charArray0[5] = 'j';	      charArray0[6] = 'Q';	      // Undeclared exception!	      try { 	        strBuilder0.getChars((-1287), (-1287), charArray0, (-1287));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1287	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void testVCell2() {    final VCell<String> c = cell("hello");    final Object change1 = c.change().getB();    c.set("hello");    assertEquals(change1, c.change().getB());    c.set("goodbye");    assertNotSame(change1, c.change().getB());  }
@Test(timeout = 4000)	  public void testinvert()  throws Throwable  {	      Fraction fraction0 = Fraction.getFraction((-1644.21609793616));	      Fraction fraction1 = fraction0.invert();	      // Undeclared exception!	      try { 	        fraction0.add(fraction1);	        fail("Expecting exception: ArithmeticException");	      	      } catch(ArithmeticException e) {	         //	         // overflow: mul	         //	         verifyException("org.apache.commons.lang3.math.Fraction", e);	      }	  }
@Test    public void testBeginSegmentWhenMissingContext() {        AWSXRayRecorder recorder = AWSXRayRecorderBuilder.standard()                                                         .withSegmentContextResolverChain(new SegmentContextResolverChain())                                                         .withContextMissingStrategy(new IgnoreErrorContextMissingStrategy())                                                         .build();        Segment segment = recorder.beginSegment("hello");        assertThat(segment).isNotNull();        assertThat(segment.getNamespace()).isEmpty();        // No-op        segment.setNamespace("foo");        assertThat(segment.getNamespace()).isEmpty();    }
@Test(timeout = 4000)	  public void testisUseShortClassName()  throws Throwable  {	      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "{");	      toStringStyle0.appendEnd(stringBuffer0, standardToStringStyle0);	      assertFalse(standardToStringStyle0.isUseShortClassName());	  }
@Test  public void testGetGeneratedTranscriptionNotInWorkspace() throws Exception {    InputStream stream = GoogleSpeechTranscriptionServiceTest.class.getResourceAsStream("/" + PULLED_TRANSCRIPTION_FILE);    database.storeJobControl(MP_ID, TRACK_ID, JOB_ID, TranscriptionJobControl.Status.InProgress.name(), TRACK_DURATION, DATE_EXPECTED, PROVIDER);    URI uri = new URI("http://ADMIN_SERVER/collection/" + GoogleSpeechTranscriptionService.TRANSCRIPT_COLLECTION + "/"            + JOB_ID + ".json");    EasyMock.expect(workspace.getCollectionURI(GoogleSpeechTranscriptionService.TRANSCRIPT_COLLECTION, JOB_ID + ".json"))            .andReturn(uri);    EasyMock.expect(workspace.get(uri)).andThrow(new NotFoundException());    EasyMock.expect(workspace.putInCollection(EasyMock.anyObject(String.class), EasyMock.anyObject(String.class),            EasyMock.anyObject(InputStream.class))).andReturn(uri);    EasyMock.replay(workspace);    HttpEntity httpEntity = EasyMock.createNiceMock(HttpEntity.class);    EasyMock.expect(httpEntity.getContent()).andReturn(stream);    CloseableHttpResponse response = EasyMock.createNiceMock(CloseableHttpResponse.class);    StatusLine status = EasyMock.createNiceMock(StatusLine.class);    EasyMock.expect(response.getStatusLine()).andReturn(status).anyTimes();    EasyMock.expect(response.getEntity()).andReturn(httpEntity).anyTimes();    EasyMock.expect(status.getStatusCode()).andReturn(HttpStatus.SC_OK).anyTimes();    EasyMock.replay(httpEntity, response, status);    EasyMock.expect(httpClient.execute(EasyMock.anyObject(HttpGet.class))).andReturn(response).anyTimes();    EasyMock.replay(httpClient);    MediaPackageElement mpe = service.getGeneratedTranscription(MP_ID, JOB_ID);    Assert.assertEquals("captions", mpe.getFlavor().getType());    Assert.assertEquals("google-speech-json", mpe.getFlavor().getSubtype());    Assert.assertEquals(uri.toString(), mpe.getURI().toString());  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      ToStringBuilder toStringBuilder0 = new ToStringBuilder("h@Gb#OU9ny:c[nqu.", standardToStringStyle0);	      ToStringBuilder toStringBuilder1 = toStringBuilder0.append((float[]) null);	      assertSame(toStringBuilder0, toStringBuilder1);	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testNodeAdjacentInvalid() {        EdgeStore edgeStore = new EdgeStore();        NodeImpl node1 = new NodeImpl("0");        NodeImpl node2 = new NodeImpl("1");        edgeStore.isAdjacent(node1, node2, 0);    }
@Test(timeout = 4000)	  public void testisAllSet()  throws Throwable  {	      BitField bitField0 = new BitField(403);	      boolean boolean0 = bitField0.isAllSet((byte)14);	  }
@Test(timeout = 4000)	  public void testappendSuper()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();	      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(Integer.MAX_VALUE);	      hashCodeBuilder1.append((-1));	  }
@Test    public void testPrim() {        MST mst = new MST();        Set<WeightEdge<Integer>> minCut = mst.prim(graph);        assertEquals(expected, minCut);    }
@Test(timeout = 4000)	  public void testtranslate()  throws Throwable  {	      StringWriter stringWriter0 = new StringWriter();	      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(1, 1);	      boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0);	  }
@Test  public void testLazyExists() {    assertTrue(mlazy(intRangeE(0, 10)).exists(Booleans.gt(5)));    assertFalse(mlazy(intRangeE(0, 10)).exists(Booleans.gt(9)));  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      equalsBuilder0.append(0.0F, 1.7F);	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((short) (-122), (short)143);	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (short)143, (-1.0F));	      long[] longArray0 = new long[1];	      longArray0[0] = (long) (short)143;	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(longArray0, longArray0);	      Object object0 = new Object();	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(object0, (Object) "WQtm~X&IKh=");	      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((byte) (-113), (byte) (-69));	      Object object1 = new Object();	      Integer integer0 = new Integer(7);	      EqualsBuilder.unregister(object1, integer0);	      equalsBuilder5.appendSuper(true);	      ImmutablePair<String, EqualsBuilder> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.builder.IDKey", equalsBuilder1);	      ImmutablePair<Object, String> immutablePair1 = new ImmutablePair<Object, String>("org.apache.commons.lang3.builder.IDKey", "4I1O{{U4N:-.");	      Class<Object> class0 = Object.class;	      String[] stringArray0 = new String[9];	      stringArray0[0] = "4I1O{{U4N:-.";	      stringArray0[1] = "4I1O{{U4N:-.";	      stringArray0[2] = "4I1O{{U4N:-.";	      stringArray0[3] = "4I1O{{U4N:-.";	      stringArray0[4] = " DB)<kCgd%F=";	      stringArray0[5] = "WQtm~X&IKh=";	      stringArray0[6] = "WQtm~X&IKh=";	      stringArray0[7] = "WQtm~X&IKh=";	      stringArray0[8] = "4I1O{{U4N:-.";	      boolean boolean0 = EqualsBuilder.reflectionEquals((Object) immutablePair0, (Object) immutablePair1, true, (Class<?>) class0, stringArray0);	  }
@Test(timeout = 4000)	  public void testsplit()  throws Throwable  {	      String string0 = ", '";	      String string1 = StringUtils.trimToEmpty(", '");	      	      String string2 = "Search and Replace array lengths don't match: ";	      char char0 = '{';	      String[] stringArray0 = StringUtils.splitPreserveAllTokens("Search and Replace array lengths don't match: ", '{');	      	      int int0 = 0;	      int int1 = StringUtils.indexOf((CharSequence) ", '", 0);	      	      Locale locale0 = Locale.FRENCH;	      	      Locale locale1 = (Locale)locale0.clone();	      	      Set<String> set0 = locale0.getUnicodeLocaleKeys();	      	      String string3 = StringUtils.upperCase("g1p(?Y6E\"bQ0_G", locale0);	      	      long[] longArray0 = new long[5];	      longArray0[0] = (long) '{';	      longArray0[1] = (long) (-1);	      longArray0[2] = (long) (-1);	      longArray0[3] = (long) 0;	      longArray0[4] = (long) (-1);	      String string4 = StringUtils.join(longArray0, '{');	      	      String string5 = StringUtils.replaceChars("G1P(?Y6E\"BQ0_G", "g1p(?Y6E\"bQ0_G", ", '");	      	      // Undeclared exception!	      try { 	        StringUtils.abbreviate("Search and Replace array lengths don't match: ", (-1));	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Minimum abbreviation width is 4	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testgetTrimmerMatcher()  throws Throwable  {	      StrTokenizer strTokenizer0 = new StrTokenizer();	      strTokenizer0.getTrimmerMatcher();	  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      boolean boolean0 = StringUtils.isAlphaSpace((CharSequence) null);	      	      byte[] byteArray0 = new byte[4];	      byteArray0[0] = (byte)1;	      byteArray0[1] = (byte) (-21);	      byteArray0[2] = (byte) (-121);	      byteArray0[3] = (byte)76;	      String string0 = StringUtils.join(byteArray0, '_');	      assertEquals(4, byteArray0.length);	  }
@Test(timeout = 4000)	  public void testpreviousToken()  throws Throwable  {	      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");	      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i');	      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());	      strTokenizer1.forEachRemaining(consumer0);	      strTokenizer1.previousToken();	      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();	      strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0);	  }
@Test    public void test_V110_EXAMPLE_1()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE_1 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        List<Query> queries = getFeature.getQueries();        assertEquals( ( (FilterQuery) queries.get( 0 ) ).getTypeNames()[0].getFeatureTypeName(),                      new QName( "InWaterA_1M" ) );    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testRemoveColumnNotExist() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        ColumnImpl col = new ColumnImpl("0", Integer.class, null, null, Origin.DATA, false, false);        store.removeColumn(col);    }
@Test public void testOnDetach() {		// Arrange:		final TestFragment fragment = new TestFragment();		fragment.onAttach(new Activity());		// Act:		fragment.onDetach();		// Assert:		assertThat(fragment.hasLifecycleFlag(BaseFragment.LIFECYCLE_DETACHED), is(true));		assertThat(fragment.isAttached(), is(false));	}
@Test(timeout = 4000)	  public void testisAllLowerCase()  throws Throwable  {	      String string0 = StringUtils.chop("T");	      	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      charSequenceArray0[0] = (CharSequence) "T";	      charSequenceArray0[1] = (CharSequence) "T";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "T";	      charSequenceArray0[5] = (CharSequence) "T";	      charSequenceArray0[6] = (CharSequence) "";	      charSequenceArray0[7] = (CharSequence) "T";	      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);	      	      String string1 = StringUtils.removePattern("", "");	      	      String string2 = StringUtils.substring((String) null, (-4035));	      	      String string3 = StringUtils.trim((String) null);	      	      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);	      	      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);	      	      String[] stringArray0 = new String[3];	      stringArray0[0] = "T";	      stringArray0[1] = "";	      stringArray0[2] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);	      	      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");	      	      // Undeclared exception!	      StringUtils.rightPad("Minimum abbreviation width with offset is 7", 32767, "=~%A6;?UjK");	  }
@Test(timeout = 4000)	  public void testindexOfIgnoreCase()  throws Throwable  {	      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");	      	      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");	      	      int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);	      	      String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, ')');	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";	      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";	      int int1 = StringUtils.indexOfDifference(charSequenceArray0);	      	      String string2 = StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);	      	      String string3 = StringUtils.right("", 0);	      	      String string4 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);	      	      String string5 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");	      	      int int2 = StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);	      	      String string6 = StringUtils.lowerCase("s");	      	      String string7 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);	      	      String[] stringArray0 = new String[26];	      stringArray0[0] = ".ti')kKzb5J(cbBlh";	      stringArray0[1] = "s";	      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";	      stringArray0[3] = "s";	      stringArray0[4] = "s";	      stringArray0[5] = "{}";	      stringArray0[6] = "{}";	      stringArray0[7] = "";	      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";	      String string8 = StringUtils.getCommonPrefix(stringArray0);	      	      String string9 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "Kby.&&D(~k)>=");	      	      String string10 = StringUtils.removeEnd("{}", "s");	      	      int int3 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.cosmmons.lang3.StringUtils", (CharSequence) "{}", (-3630));	  }
@Test    public void testCapabilitiesExtraction100()                            throws Exception {        String wfsUtahDemo100Url = TestProperties.getProperty( WFS_UTAH_DEMO_100_URL );        if ( wfsUtahDemo100Url == null ) {            LOG.warn( "Skipping test, property '" + WFS_UTAH_DEMO_100_URL + "' not found in ~/.deegree-test.properties" );            return;        }        URL wfsCapaUrl = new URL( wfsUtahDemo100Url );        WFSClient client = new WFSClient( wfsCapaUrl );        assertEquals( WFS_100, client.getServiceVersion() );        // ServiceIdentification        ServiceIdentification si = client.getIdentification();        assertEquals( "deegree 3 Utah Demo", si.getName() );        assertEquals( 1, si.getTitles().size() );        assertEquals( "deegree 3 Utah Demo", si.getTitles().get( 0 ).getString() );        assertEquals( null, si.getTitles().get( 0 ).getLanguage() );        assertEquals( 1, si.getAbstracts().size() );        assertEquals( "WMS and WFS demonstration with Utah data", si.getAbstracts().get( 0 ).getString() );        assertEquals( null, si.getAbstracts().get( 0 ).getLanguage() );        assertEquals( 0, si.getKeywords().size() );        assertNull( si.getFees() );        // ServiceProvider        assertEquals( "http://www.lat-lon.de", client.getProvider().getProviderSite() );        // OperationMetadata (TODO)    }
@Test    public void testEKSOriginResolvesOverECSOrigin() {        //given        ECSPlugin ecsPlugin = Mockito.mock(ECSPlugin.class);        EKSPlugin eksPlugin = Mockito.mock(EKSPlugin.class);        Map<String, Object> runtimeContext = new HashMap<>();        runtimeContext.put("key", "value");        Mockito.doReturn(true).when(ecsPlugin).isEnabled();        Mockito.doReturn(runtimeContext).when(ecsPlugin).getRuntimeContext();        Mockito.doReturn("ecs").when(ecsPlugin).getServiceName();        Mockito.doReturn(ECSPlugin.ORIGIN).when(ecsPlugin).getOrigin();        Mockito.doReturn(true).when(eksPlugin).isEnabled();        Mockito.doReturn(runtimeContext).when(eksPlugin).getRuntimeContext();        Mockito.doReturn("eks").when(eksPlugin).getServiceName();        Mockito.doReturn(EKSPlugin.ORIGIN).when(eksPlugin).getOrigin();        AWSXRayRecorder recorder = AWSXRayRecorderBuilder.standard()                                                         .withPlugin(eksPlugin)                                                         .withPlugin(ecsPlugin)                                                         .build();        // when        Assert.assertEquals(EKSPlugin.ORIGIN, recorder.getOrigin());    }
@Test    public void testResetEdgeStore() {        int[] n = {100, 1000, 5000};        double[] p = {0.01, 0.1, 0.3};        for (int nodes : n) {            for (double prob : p) {                int edges = (int) (nodes * (nodes - 1) * prob);                NanoBench.create().measurements(2).measure("reset edge store nodes=" + nodes + " edges=" + edges, new EdgeStoreBenchmark().resetEdgeStore(nodes, prob));            }        }    }
@Test(timeout = 4000)	  public void testsubstring()  throws Throwable  {	      String string0 = StringUtils.defaultString("\"SC8kO$zhPDHm{\"h");	      	      String string1 = StringUtils.chomp("-_?p69BZA*nq+^k_X_", "L+sjZj<m|\rO)&dq");	      	      String string2 = StringUtils.center("\"SC8kO$zhPDHm{\"h", (-804), 'z');	      	      char[] charArray0 = new char[9];	      charArray0[0] = 'z';	      charArray0[1] = 'z';	      charArray0[2] = 'z';	      charArray0[3] = 'z';	      charArray0[4] = 'z';	      charArray0[5] = 'z';	      charArray0[6] = 'z';	      charArray0[7] = 'z';	      charArray0[8] = 'z';	      String string3 = StringUtils.join(charArray0, 'z', (-804), (-2733));	      	      String string4 = StringUtils.substring("", 0);	      	      String string5 = StringUtils.substringBetween("", "\"SC8kO$zhPDHm{\"h");	      	      String string6 = StringUtils.replaceChars("L+sjZj<m|\rO)&dq", 'z', 'z');	      	      byte[] byteArray0 = new byte[8];	      byteArray0[0] = (byte)0;	      byteArray0[1] = (byte)0;	      byteArray0[2] = (byte) (-125);	      byteArray0[3] = (byte)37;	      byteArray0[4] = (byte)13;	      byteArray0[5] = (byte)0;	      byteArray0[6] = (byte)0;	      byteArray0[7] = (byte)64;	      // Undeclared exception!	      try { 	        StringUtils.join(byteArray0, 'z', (-4796), 500);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // -4796	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test  @Parameters  public void testTakeSnapshot(final AccessControlList acl, User user,                               final boolean assertAccess) throws Exception {    createSnapshot(acl, user, assertAccess);  }
@Test(timeout = 4000)	  public void testcontainsWhitespace()  throws Throwable  {	      String string0 = StringUtils.replace("'/sj", (String) null, (String) null, 16);	      	      String string1 = StringUtils.overlay("'/sj", (String) null, 16, 0);	      	      String string2 = StringUtils.trimToNull("");	      	      String string3 = StringUtils.defaultString("Ga\"k:iU:");	      	      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) "");	      	      StringUtils stringUtils0 = new StringUtils();	      	      String string4 = StringUtils.repeat(" vs ", 16);	      	      String string5 = StringUtils.replaceOnce(":z4/I#", "'/sj", "+e.9:pV6W");	      	      String string6 = StringUtils.leftPad((String) null, 0);	      	      String[] stringArray0 = StringUtils.splitByCharacterType((String) null);	      	      String string7 = StringUtils.substringBetween("Strings must not be null", "I3=", "The Array must not be null");	      	      String string8 = StringUtils.join((Object[]) null, "I3=");	      	      int int0 = StringUtils.countMatches("Strings must not be null", "\r");	      	      String string9 = StringUtils.lowerCase("B-|$%k)sj");	      	      boolean boolean1 = StringUtils.containsWhitespace("'/sj");	      	      short[] shortArray0 = new short[9];	      shortArray0[0] = (short) (-2292);	      shortArray0[1] = (short)0;	      shortArray0[2] = (short)0;	      shortArray0[3] = (short)16;	      shortArray0[4] = (short)4;	      shortArray0[5] = (short) (-713);	      shortArray0[6] = (short)0;	      shortArray0[7] = (short)2;	      shortArray0[8] = (short)0;	      String string10 = StringUtils.join(shortArray0, 'e');	  }
@Test    public void givenCallback$hasChats_whenQuery_thenShouldCallNativeApiAndInvokeCallback() {        // given        PowerMockito.mockStatic(Replies.class);        // when        Callback callback = mock(Callback.class);        rnModule.hasChats(callback);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Replies.hasChats();        verify(callback).invoke(any());    }
@Test(timeout = 4000)	  public void testready()  throws Throwable  {	      String string0 = "hZ3CNnc|]e";	      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");	      	      StrBuilder strBuilder1 = strBuilder0.minimizeCapacity();	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      int int0 = strBuilder_StrBuilderReader0.read();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');	      	      StrMatcher strMatcher0 = StrMatcher.tabMatcher();	      	      StrBuilder strBuilder3 = strBuilder2.deleteAll(strMatcher0);	      	      char[] charArray0 = new char[2];	      charArray0[0] = '/';	      charArray0[1] = '/';	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      	      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      strBuilder_StrBuilderReader0.close();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      StrBuilder strBuilder4 = strBuilder2.append((long) 104);	      	      StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104);	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      	      List<String> list0 = strBuilder_StrBuilderTokenizer0.getTokenList();	      	      List<String> list1 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));	      	      StrBuilder strBuilder6 = new StrBuilder();	      	      char[] charArray1 = new char[2];	      	      charArray1[0] = '/';	      charArray1[1] = '/';	      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);	      	      int int2 = 101;	      // Undeclared exception!	      try { 	        strBuilder2.append("/t@?VM", (-775), (-3316));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void checkLayerCountInRange()                            throws OWSException {        checker.checkLayerCount( 10, 10 );    }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      doubleArray0[0] = 7301.0;	      boolean boolean0 = ArrayUtils.contains(doubleArray0, 688.97053, (double) (byte)7);	  }
@Test  public void testAddingSeriesWithoutID() throws Exception {    testCatalog.remove(DublinCore.PROPERTY_IDENTIFIER);    DublinCoreCatalog newSeries = seriesService.updateSeries(testCatalog);    Assert.assertNotNull("New series DC should be returned", newSeries);    String id = newSeries.getFirst(DublinCore.PROPERTY_IDENTIFIER);    Assert.assertNotNull("New series should have id set", id);  }
@Test    public void shouldAssignIdToExpense() throws Exception {        final Nobt nobt = aNobt().build();        nobt.createExpenseFrom(anExpenseDraft().build());        assertThat(nobt, hasExpenses(                allOf(                        iterableWithSize(greaterThan(0)),                        everyItem(                                hasId(notNullValue(Long.class))                        )                )        ));    }
@Test(timeout = 4000)	  public void testnormalizeSpace()  throws Throwable  {	      String string0 = StringUtils.substringBeforeLast("Minimum abbreviation width with offset is 7", "Minimum abbreviation width with offset is 7");	      StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913, 1913);	      StringUtils.normalizeSpace("The character must not be null");	      String string1 = StringUtils.deleteWhitespace("The character must not be null");	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "Thecharactermustnotbenull", (CharSequence) "The character must not be null");	      	      double[] doubleArray0 = new double[7];	      doubleArray0[0] = (double) 5;	      doubleArray0[1] = (double) 5;	      doubleArray0[2] = (double) 1913;	      doubleArray0[3] = (double) 1913;	      doubleArray0[4] = (double) 5;	      doubleArray0[5] = (double) 5;	      doubleArray0[6] = (double) 5;	      String string2 = StringUtils.join(doubleArray0, 'X');	      	      StringUtils.left("Thecharactermustnotbenull", (-2027));	      StringUtils.startsWith("Thecharactermustnotbenull", "5.0X5.0X1913.0X1913.0X5.0X5.0X5.0");	      boolean boolean0 = StringUtils.isNumeric("The character must not be null");	      	      String[] stringArray0 = StringUtils.split("");	      	      String string3 = StringUtils.abbreviate("Minimum abbreviation width with offset is 7", 1913);	      	      String string4 = StringUtils.abbreviate("V", 5);	  }	}
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      String string0 = StringUtils.repeat("^d%8'te3y", 0);	      	      char[] charArray0 = new char[1];	      charArray0[0] = 'b';	      int int0 = StringUtils.indexOfAny((CharSequence) "^d%8'te3y", charArray0);	      	      String string1 = StringUtils.lowerCase("");	      	      String string2 = StringUtils.rightPad("", 0, "");	      	      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "");	      	      String string3 = StringUtils.replace("", "38=.b3p;aJ(sIMg", "", 1969);	  }
@Test(timeout = 4000)	  public void testreplace()  throws Throwable  {	      HashMap<String, String> hashMap0 = new HashMap<String, String>();	      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, String>) hashMap0, "Dy~{jBj&qu!T}=0k", "remove() is unsupported");	      String string0 = strSubstitutor0.replace((Object) null);	  }
@Test(expected = ConfigurationException.class)  public void testMissingXmlRootElementName() {    configProperties.remove(CatalogUIAdapterConfiguration.KEY_XML_ROOT_ELEMENT_NAME);    CatalogUIAdapterConfiguration.loadFromDictionary(configProperties);  }
@Test  public void interpretNumericalGreaterThan() {    assertTrue(WorkflowConditionInterpreter.interpret("3.5 > 2"));  }
@Test(timeout = 4000)	  public void testsubstringBefore()  throws Throwable  {	      String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768));	      	      boolean boolean0 = StringUtils.isAllUpperCase("");	      	      StringUtils.remove("x", ')');	      String string1 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768));	      	      boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type ");	      String string2 = StringUtils.stripToNull("ptgNwtnxatzWXwA");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("ptgNwtnxatzWXwA", "ptgNwtnxatzWXwA");	      	      StringUtils.removeEnd((String) null, "aEK60VM*X");	      boolean boolean2 = StringUtils.isNumeric("Cannot clone Cloneable type ");	      	      boolean boolean3 = StringUtils.isAlphanumericSpace("Cannot clone Cloneable type ");	      	      StringUtils.substringBeforeLast((String) null, "");	      StringUtils.rightPad("aEK60VM*X", 25, 'D');	      StringUtils.abbreviateMiddle("Cannot clone Cloneable type ", "cnC6A#Qa.Kd}", (-32768));	      StringUtils.indexOf((CharSequence) "Cannot clone Cloneable type ", 7, 19);	      String string3 = StringUtils.rightPad("x", 174, 'D');	      	      String string4 = StringUtils.substringBetween("ptgNwtnxatzWXwA", "");	  }
@Test public void testOnCreateViewToBeAttachedToTheContainer() {		// Arrange:		final Activity activity = Robolectric.buildActivity(TestActivity.class).create().start().resume().get();		final BaseFragment fragment = new TestFragmentWithContentViewToBeAttachedToContainer();		final ViewGroup container = new FrameLayout(activity);		// Act:		final View view = fragment.onCreateView(activity.getLayoutInflater(), container, null);		// Assert:		assertThat(view, is(nullValue()));		assertThat(container.getChildCount(), is(1));	}
@Test(timeout = 4000)	  public void testremoveAll()  throws Throwable  {	      float[] floatArray0 = new float[1];	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll(floatArray0, (int[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test  public void testHelloName() throws Exception {    Response response = rest.helloName("Peter");    Assert.assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());    Assert.assertEquals("Hello Peter!", response.getEntity());  }
@Test    public void parseOffsetCurve()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        OffsetCurve segment = (OffsetCurve) getParser().parseCurveSegment( getReader( "OffsetCurve.gml" ),                                                                           CRSManager.getCRSRef( "EPSG:4326" ) );        Assert.assertEquals( 1.0, segment.getDistance( null ).getValueAsDouble() );        Assert.assertEquals( 0.0, segment.getDirection().get0() );        Assert.assertEquals( 1.0, segment.getDirection().get1() );    }
@Test  public void testSequenceOpt() {    assertTrue(eqListSorted(list(1, 2, 3), sequenceOpt(list(some(1), none(-1), some(2), some(3), none(-1))).get()));    assertTrue(eqListSorted(list(), sequenceOpt(list(none(-1), none(-1))).get()));  }
@Test    public void testEmptyRepositoryProvidesDefaultConfiguration() throws IOException {        final Storage storage = setupMockStorage(null);        final InputStream configuration = new StoredOrDefaultConfigurationProvider(storage).getConfigurationStream();        final InputStream expectedStream = getClass().getResourceAsStream("cloud-jenkins-defaults-assembly.zip");        assertArrayEquals(IOUtils.toByteArray(expectedStream), IOUtils.toByteArray(configuration));    }
@Test    public void testTypeNameAttribute()                            throws JaxenException {        OMElement root = adapter.getRootElement();        AXIOMXPath xpath = new AXIOMXPath( "wfs:Query" );        xpath.addNamespace( "wfs", WFS_NS );        OMElement queryElement = (OMElement) xpath.selectSingleNode( root );        OMAttribute typeNameAttr = queryElement.getAttribute( new QName( "typeName" ) );        QName ftName = queryElement.resolveQName( typeNameAttr.getAttributeValue() );        assertEquals( new QName( APP_NS, "Philosopher" ), ftName );    }
@Test    public void testGetAttributesTimestampEmpty() {        GraphStore store = new GraphStore();        Column column = generateTimestampColumn(store);        NodeImpl node = new NodeImpl("0", store);        Iterator<Map.Entry> itr = node.getAttributes(column).iterator();        Assert.assertFalse(itr.hasNext());    }
@Test    public void indexOfWithoutStartAndEnd() throws Exception {        int index = new SimpleSearchAlgorithm("abbad").indexOf("abeccaabadbabbad");        assertThat(index, equalTo(11));    }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (-207), 2701);	  }
@Test(timeout = 4000)	  public void testnext()  throws Throwable  {	      char[] charArray0 = new char[9];	      charArray0[0] = 'u';	      charArray0[2] = 'B';	      StrMatcher strMatcher0 = StrMatcher.trimMatcher();	      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);	      strTokenizer0.next();	      strTokenizer0.next();	      StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0);	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      float[] floatArray0 = new float[8];	      int int0 = ArrayUtils.indexOf((Object[]) null, (Object) floatArray0[4]);	  }
@Test    public void fiveSM() {        Assert.assertEquals(RxComprehensions.doSwitchMap(zero(1), one(true), two("result"), three("other"), four("other".length()), five("other".length() < 5)).blockingFirst(), false);    }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      String string0 = StringUtils.leftPad("", (-1269), 'r');	      	      int int0 = StringUtils.lastOrdinalIndexOf("", "", 3270);	      	      String string1 = StringUtils.removeStartIgnoreCase("", "");	      	      String string2 = StringUtils.substringAfterLast("org.apache.commons.lang3.StringUtils", "");	      	      boolean boolean0 = StringUtils.startsWithIgnoreCase("", "");	      	      CharSequence[] charSequenceArray0 = new CharSequence[6];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "org.apache.commons.lang3.StringUtils";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "";	      charSequenceArray0[5] = (CharSequence) "";	      String string3 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);	      	      String string4 = StringUtils.rightPad("=(:!lN1$~&", 600, (String) null);	      	      float[] floatArray0 = new float[5];	      floatArray0[0] = (float) 'r';	      floatArray0[1] = (float) 3270;	      floatArray0[2] = (float) 600;	      floatArray0[3] = (float) 3270;	      floatArray0[4] = (-2778.0017F);	      String string5 = StringUtils.join(floatArray0, 'I');	  }
@Test(timeout = 4000)	  public void testor()  throws Throwable  {	      Boolean[] booleanArray0 = new Boolean[0];	      // Undeclared exception!	      try { 	        BooleanUtils.xor(booleanArray0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Array is empty	         //	         verifyException("org.apache.commons.lang3.BooleanUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testtoBoolean()  throws Throwable  {	      boolean boolean0 = BooleanUtils.toBoolean(85, 85, 85);	  }
@Test    public void shouldCreateUri() {        final NobtLinkFactory nobtLinkFactory = new NobtLinkFactory(new BasePath("http", "localhost:1234"));        final Nobt nobt = aNobt().withId(new NobtId("foo")).build();        final URI linkToNobt = nobtLinkFactory.createLinkTo(nobt);        Assert.assertEquals("http://localhost:1234/nobts/foo", linkToNobt.toString());    }
@Test(timeout = 4000)	  public void testleftPad()  throws Throwable  {	      String string0 = StringUtils.join((int[]) null, 't', 0, 0);	      	      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, (String) null);	      	      String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1);	      	      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");	      	      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");	      	      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);	      	      char[] charArray0 = new char[3];	      charArray0[0] = 't';	      charArray0[1] = 't';	      charArray0[2] = '{';	      String string4 = StringUtils.join(charArray0, 't');	      	      String[] stringArray2 = StringUtils.splitPreserveAllTokens("Nt{2P6~Pso'");	      	      String string5 = StringUtils.substringAfter("Hdl6An@o)]mG1*(G5r", "Hdl6An@o)]mG1*(G5r");	      	      String string6 = StringUtils.defaultString((String) null);	  }
@Test(timeout = 4000)	  public void testreplace()  throws Throwable  {	      String string0 = "SzpQ!4 ;U";	      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");	      	      char char0 = '`';	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`');	      	      StrBuilder strBuilder2 = strBuilder0.appendSeparator("SzpQ!4 ;U");	      	      StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817);	      	      StrBuilder strBuilder4 = strBuilder3.append('`');	      	      StrBuilder strBuilder5 = strBuilder1.replaceFirst("SzpQ!4 ;U", "SzpQ!4 ;U");	      	      String string1 = strBuilder0.getNullText();	      	      StrBuilder strBuilder6 = strBuilder2.replaceAll("SzpQ!4 ;U", "SzpQ!4 ;U");	      	      // Undeclared exception!	      try { 	        strBuilder0.insert(2817, (-1.0F));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 2817	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void givenBoolean$setInAppNotificationsEnabled_whenQuery_thenShouldCallNativeApi() {        // given        PowerMockito.mockStatic(Replies.class);        // when        rnModule.setInAppNotificationEnabled(true);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Replies.setInAppNotificationEnabled(true);    }
@Test(timeout = 4000)	  public void testgetTimeZoneDisplay()  throws Throwable  {	      TimeZone timeZone0 = TimeZone.getDefault();	      Locale locale0 = Locale.ROOT;	      // Undeclared exception!	      try { 	        FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 320, locale0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Illegal style: 320	         //	         verifyException("java.util.TimeZone", e);	      }	  }
@Test  public void testIfThen() {    assertEquals(some("hallo"), some("hello").map(ifThen("hello", "hallo")));    assertEquals(some(-1), some("none").map(ifThen("none", "-1")).bind(Strings.toInt).orError(new RuntimeException()));    assertEquals(some(300), some("300").map(ifThen("none", "-1")).bind(Strings.toInt).orError(new RuntimeException()));  }
@Test  public void testFoldl() {    String fold = mlist(new Integer[]{1, 2, 3}).foldl("", new Function2<String, Integer, String>() {      @Override      public String apply(String s, Integer a) {        return s + a + a;      }    });    assertEquals("112233", fold);  }
@Test  public void testGetId() throws Exception {    assertEquals(3L, job.getId());  }
@Test  public void testToMapWithNull() throws Exception {    assertEquals(0, JSONUtils.toMap(null).size());  }
@Test(timeout = 4000)	  public void testsetSummaryObjectStartText()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      standardToStringStyle0.setSummaryObjectStartText("");	      String string0 = standardToStringStyle0.getSummaryObjectStartText();	  }
@Test    public void testAddEdge() {        GraphStore store = GraphGenerator.generateTinyUndirectedGraphStore();        UndirectedGraph graph = store.undirectedDecorator;        Assert.assertNotNull(graph.getNode("1"));        Assert.assertNotNull(graph.getNode("2"));        Assert.assertNotNull(graph.getEdge("0"));    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testSetAttributeOtherStoreColumn() {        GraphStore otherStore = new GraphStore();        Column column = generateBasicColumn(otherStore);        GraphStore store = new GraphStore();        NodeImpl node = new NodeImpl("0", store);        node.setAttribute(column, "0");    }
@Test(timeout = 4000)	  public void testinitializeUnchecked()  throws Throwable  {	      Integer integer0 = new Integer(0);	      ConcurrentUtils.ConstantFuture<Integer> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Integer>(integer0);	      TimeUnit timeUnit0 = TimeUnit.DAYS;	      concurrentUtils_ConstantFuture0.get((long) 0, timeUnit0);	      ConcurrentHashMap<Error, String> concurrentHashMap0 = new ConcurrentHashMap<Error, String>(0);	      MockError mockError0 = new MockError(":IC?TWffvYqDnT");	      ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, String>) concurrentHashMap0, (Error) mockError0, "Kh*+5b4@&oFsn");	      ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Error>) null);	      ConcurrentUtils.initialize((ConcurrentInitializer<Error>) null);	      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>((Object) null);	      concurrentUtils_ConstantFuture1.get();	      ConcurrentSkipListMap<RuntimeException, Delayed> concurrentSkipListMap0 = new ConcurrentSkipListMap<RuntimeException, Delayed>();	      ExecutionException executionException0 = new ExecutionException("Naming pattern must not be null!", (Throwable) null);	      ConcurrentUtils.extractCauseUnchecked(executionException0);	      Delayed delayed0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Delayed>) concurrentSkipListMap0, (RuntimeException) null, (ConcurrentInitializer<Delayed>) null);	  }
@Test public void testIsActionBarAvailable() {		// Arrange:		final ActionBarFragment fragment = new TestFragment();		fragment.actionBarDelegate = mock(ActionBarDelegate.class);		// Act + Assert:		assertThat(fragment.isActionBarAvailable(), is(true));	}
@Test(timeout = 4000)	  public void testgetSummaryObjectEndText()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      boolean boolean0 = standardToStringStyle0.isUseClassName();	      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());	  }
@Test    public void test_V110_EXAMPLE_11()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE_11 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        FeatureIdQuery query = (FeatureIdQuery) getFeature.getQueries().get( 0 );        assertEquals( "InWaterA_1M.1013", query.getFeatureIds()[0] );        assertEquals( "BUILTUP_1M.3456", query.getFeatureIds()[1] );    }
@Test public void testOnSaveInstanceState() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final WebFragment fragment = new WebFragment();		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		final Bundle state = new Bundle();		// Act:		fragment.onSaveInstanceState(state);		// Assert:		assertThat(state.containsKey(WebFragment.BUNDLE_OPTIONS), is(true));		assertThat(state.containsKey(WebFragment.BUNDLE_CONTENT), is(true));		assertThat(state.containsKey(WebFragment.BUNDLE_PRIVATE_FLAGS), is(true));	}
@Test(timeout = 4000)	  public void testvalidIndex()  throws Throwable  {	      CharBuffer charBuffer0 = CharBuffer.allocate(2);	      Object[] objectArray0 = new Object[0];	      // Undeclared exception!	      try { 	        Validate.validIndex(charBuffer0, 2, "The value %s is not in the specified exclusive range of %s to %s", objectArray0);	        fail("Expecting exception: MissingFormatArgumentException");	      	      } catch(MissingFormatArgumentException e) {	         //	         // Format specifier '%s'	         //	         verifyException("java.util.Formatter", e);	      }	  }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported");	      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i');	      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());	      strTokenizer1.forEachRemaining(consumer0);	      strTokenizer1.previousToken();	      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();	      strTokenizer0.setTrimmerMatcher(strMatcher_TrimMatcher0);	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testSetAttributeUnknownColumn() {        GraphStore store = new GraphStore();        ColumnImpl columnImpl = new ColumnImpl("0", String.class, "title", "", Origin.DATA, false, false);        NodeImpl node = new NodeImpl("0", store);        node.setAttribute(columnImpl, "0");    }
@Test(timeout = 4000)	  public void testgetEnd()  throws Throwable  {	      CharRange charRange0 = CharRange.is('6');	      CharRange charRange1 = CharRange.isIn(']', '&');	      boolean boolean0 = charRange1.contains(charRange0);	      assertEquals('6', charRange0.getEnd());	      assertEquals(']', charRange1.getEnd());	  }
@Test(expectedExceptions = NullPointerException.class)    public void testOriginCantBeNull() {        TableImpl<Node> table = new TableImpl<Node>(Node.class, false);        table.addColumn("Id", null, Integer.class, null, 0, false);    }
@Test    public void test() {        Child son = new Child();        son.add(1);        son.add(2);        son.add(3);        Set<Integer> out = son.getSet();        int result = 0;        for (Integer i : out) {            result += i;        }        assertEquals("sum", 6, result);    }
@Test  public void testOffset() {    smartIterator = new SmartIterator(0, 2);    Map<String, Object> unfilteredList = createMap(5);    Map<String, Object> filteredList = smartIterator.applyLimitAndOffset(unfilteredList);    assertMapContainsOnly(filteredList, 2, 3, 4);  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder strBuilder1 = strBuilder0.appendln("rn$e:");	      	      Vector<String> vector0 = new Vector<String>();	      	      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0);	      	      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0);	      	      StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) treeSet0);	      	      StrBuilder strBuilder3 = strBuilder1.appendSeparator("rn$e:", 1);	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      	      Integer[] integerArray0 = new Integer[5];	      Integer integer0 = new Integer(1);	      	      integerArray0[0] = integer0;	      Integer integer1 = new Integer(862);	      assertFalse(integer1.equals((Object)integer0));	      	      integerArray0[1] = integer1;	      int int0 = 0;	      Integer integer2 = new Integer(0);	      assertFalse(integer2.equals((Object)integer1));	      assertTrue(integer2.equals((Object)int0));	      assertFalse(integer2.equals((Object)integer0));	      	      integerArray0[2] = integer2;	      Integer integer3 = new Integer(862);	      assertFalse(integer3.equals((Object)int0));	      assertTrue(integer3.equals((Object)integer1));	      assertFalse(integer3.equals((Object)integer2));	      assertFalse(integer3.equals((Object)integer0));	      	      integerArray0[3] = integer3;	      Integer integer4 = new Integer(int0);	      assertFalse(integer4.equals((Object)integer1));	      assertFalse(integer4.equals((Object)integer3));	      assertFalse(integer4.equals((Object)integer0));	      assertTrue(integer4.equals((Object)integer2));	      assertTrue(integer4.equals((Object)int0));	      	      integerArray0[4] = integer4;	      StrBuilder strBuilder4 = strBuilder3.appendAll(integerArray0);	  }
@Test(expectedExceptions = UnsupportedOperationException.class)    public void testMinValueNoNumber() {        IndexImpl<Node> index = generateEmptyIndex();        index.getMinValue(index.columnStore.getColumn("foo"));    }
@Test(expected = IllegalArgumentException.class)    public void resources_not_configured_test() {        target.provide();    }
@Test	public void testAddPlan() {		when(planRepository.save(plan)).thenReturn(plan);		assertEquals(plan, planService.addPlan(plan));	}
@Test    public void outsideRight() {        RasterRect first = new RasterRect( 2, 2, 2, 2 );        RasterRect second = new RasterRect( 5, 3, 1, 5 );        RasterRect result = RasterRect.intersection( first, second );        Assert.assertNull( result );    }
@Test(timeout = 4000)	  public void testvalidateRange()  throws Throwable  {	      int int0 = (-1498);	      StrBuilder strBuilder0 = new StrBuilder((-1498));	      	      char char0 = 'Y';	      StrMatcher strMatcher0 = StrMatcher.commaMatcher();	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher('Y');	      	      StrBuilder strBuilder1 = strBuilder0.replaceAll("I%EqwV7sG3W", "I%EqwV7sG3W");	      	      int int1 = strBuilder0.lastIndexOf(strMatcher0, 116);	      	      char[] charArray0 = new char[1];	      charArray0[0] = 'Y';	      int int2 = 7;	      // Undeclared exception!	      try { 	        strBuilder0.validateRange((-738), (-1498));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -738	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void testOption() {    Option<String> s = some("test");    Option<String> n = none();    assertTrue(s.isSome());    assertTrue(n.isNone());    assertEquals("a test", s.fold(new Match<String, String>() {      public String some(String s) {        return "a " + s;      }      public String none() {        return "";      }    }));    assertEquals("none", n.fold(new Match<String, String>() {      public String some(String s) {        return s;      }      public String none() {        return "none";      }    }));    for (String x : n) {      fail("should not happen");    }    String r = null;    for (String x : s) {      r = x;    }    assertEquals("test", r);    assertEquals("test", s.getOrElse(""));    assertEquals("", n.getOrElse(""));    Function<String, Integer> len = new Function<String, Integer>() {      @Override      public Integer apply(String s) {        return s.length();      }    };    assertTrue(s.map(len).getOrElse(-1) == 4);    assertTrue(n.map(len).getOrElse(-1) == -1);  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      String string0 = StringUtils.defaultString("Vsr!q&]Z0x}ObR(|8eD");	      	      boolean boolean0 = StringUtils.isAsciiPrintable("Vsr!q&]Z0x}ObR(|8eD");	      	      boolean boolean1 = StringUtils.containsWhitespace("Vsr!q&]Z0x}ObR(|8eD");	      	      String string1 = StringUtils.center("", 1497, "#(0@F");	      	      String string2 = StringUtils.swapCase("Vsr!q&]Z0x}ObR(|8eD");	      	      StringUtils stringUtils0 = new StringUtils();	      	      String string3 = StringUtils.join((Object[]) null, '_');	      	      double[] doubleArray0 = new double[3];	      doubleArray0[0] = (double) (-1);	      doubleArray0[1] = 0.0;	      doubleArray0[2] = (double) (-1);	      String string4 = StringUtils.join(doubleArray0, 'Y', 1497, (-1));	      	      String string5 = StringUtils.center("Vsr!q&]Z0x}ObR(|8eD", 1881, "Vsr!q&]Z0x}ObR(|8eD");	  }
@Test    public void testGetMax() {        Configuration config = new Configuration();        config.setTimeRepresentation(TimeRepresentation.INTERVAL);        GraphModelImpl graphModel = new GraphModelImpl(config);        TimeStore timeStore = graphModel.store.timeStore;        IntervalIndexStore store = (IntervalIndexStore) timeStore.nodeIndexStore;        Assert.assertEquals(store.mainIndex.getMaxTimestamp(), Double.POSITIVE_INFINITY);        store.add(new Interval(1.0, 3.0));        Assert.assertEquals(store.mainIndex.getMaxTimestamp(), 3.0);        store.add(new Interval(1.0, 2.0));        Assert.assertEquals(store.mainIndex.getMaxTimestamp(), 3.0);        store.remove(new Interval(1.0, 3.0));        Assert.assertEquals(store.mainIndex.getMaxTimestamp(), 2.0);    }
@Test(timeout = 4000)	  public void testreplaceIn()  throws Throwable  {	      HashMap<String, StrLookup<Object>> hashMap0 = new HashMap<String, StrLookup<Object>>();	      StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, StrLookup<Object>>) hashMap0, "Search and Replace array lengths don't match: ", "");	      boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null);	  }
@Test(timeout = 4000)	  public void testreflectionHashCode()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1));	      int int0 = HashCodeBuilder.reflectionHashCode((-2563), (-2563), (Object) hashCodeBuilder0, true);	      	      String[] stringArray0 = new String[3];	      int int1 = HashCodeBuilder.reflectionHashCode((Object) hashCodeBuilder0, stringArray0);	  }
@Test(timeout = 4000)	  public void testinsert()  throws Throwable  {	      int int0 = (-334);	      StrBuilder strBuilder0 = new StrBuilder((-334));	      	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-334), 117, 'P');	      	      int int1 = strBuilder0.indexOf('P');	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      strBuilder_StrBuilderReader0.close();	      	      StringBuilder stringBuilder0 = new StringBuilder(117);	      	      // Undeclared exception!	      try { 	        stringBuilder0.insert((-334), false);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -334	         //	         verifyException("java.lang.AbstractStringBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testsubtract()  throws Throwable  {	      MutableByte mutableByte0 = new MutableByte();	      mutableByte0.subtract((byte) (-18));	      long long0 = mutableByte0.longValue();	  }
@Test(timeout = 4000)	  public void testcompare()  throws Throwable  {	      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      doReturn(0).when(comparator0).compare(anyString() , anyString());	      Range<String> range0 = Range.is("", comparator0);	      boolean boolean0 = range0.contains((String) null);	  }
@Test(timeout = 4000)	  public void testindexOfDifference()  throws Throwable  {	      String[] stringArray0 = new String[6];	      stringArray0[0] = "";	      stringArray0[1] = "";	      stringArray0[2] = "";	      stringArray0[3] = "";	      stringArray0[4] = "X69]M!8$l}E@BGv1jB";	      stringArray0[5] = "";	      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);	      	      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);	      	      String string2 = StringUtils.substring("jS6+ObwFdd@<v/K", 0);	      	      String string3 = StringUtils.rightPad((String) null, 0, 'V');	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens("X69]M!8$l}E@BGv1jB", "");	      	      String string4 = StringUtils.chomp((String) null, "-!*N;DIA");	      	      String string5 = StringUtils.trim((String) null);	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1514);	      	      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);	      	      String string6 = StringUtils.substring((String) null, 1514);	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "";	      int int2 = StringUtils.indexOfDifference(charSequenceArray0);	      	      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);	      	      String string7 = StringUtils.difference("-!*N;DIA", (String) null);DIA", string7);	      	      boolean boolean1 = StringUtils.isNumericSpace("-!*N;DIA");	      	      String string8 = StringUtils.join((int[]) null, '\'');	      	      String string9 = StringUtils.defaultIfBlank("J(k87R7s&`_@", (String) null);	  }
@Test    public void testShouldAddExtraInstance() throws Exception {        when(deployConfiguration.getMaxCapacity()).thenReturn(4);        when(autoScalingGroup.getMaxSize()).thenReturn(4);        when(instances.size()).thenReturn(1);        when(autoScalingGroup.getInstances()).thenReturn(instances);        AwsAutoScalingDeployUtils utils = new AwsAutoScalingDeployUtils("eu-west-1", deployConfiguration, null);        Assert.assertTrue(utils.shouldAddExtraInstance(autoScalingGroup));    }
@Test  public void testImportCaptionPull() throws Exception {    inputStream = IBMWatsonCaptionConverterTest.class.getResourceAsStream("/pushed_transcription.json");    importCaption();  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      String string0 = StringUtils.removeEndIgnoreCase("Sn", "");	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "Sn";	      String string1 = StringUtils.prependIfMissingIgnoreCase("", "", charSequenceArray0);	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'Z';	      charArray0[1] = '';	      charArray0[2] = '-';	      charArray0[3] = 'v';	      charArray0[4] = 'F';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);	  }
@Test  public void testTemplateUsingCatalogFields() throws Exception {    String templateName = "templateCatalog";    String templateContent = null;    String result = service.applyTemplate(templateName, templateContent, workflowInstance);    Assert.assertEquals("EPISODE creator: Rute Santos, isPartOf: 20140119997, "            + "title: Test Media Package, created: 2013-11-19T15:20:00Z, "            + "SERIES creator: Harvard Extension School, description: http://extension.harvard.edu, "            + "subject: TEST E-19997", result);  }
@Test(timeout = 4000)	  public void testdefaultString()  throws Throwable  {	      String string0 = StringUtils.deleteWhitespace((String) null);	      	      boolean boolean0 = StringUtils.isAlphanumeric((CharSequence) null);	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);	      	      boolean boolean2 = StringUtils.isAllUpperCase((CharSequence) null);	      	      char[] charArray0 = new char[4];	      charArray0[0] = '';	      charArray0[1] = 'X';	      charArray0[2] = 'X';	      charArray0[3] = '9';	      boolean boolean3 = StringUtils.containsNone((CharSequence) null, charArray0);	      	      String string1 = StringUtils.defaultString("", "H)PFuo;Qc-CROf|");	      	      String string2 = StringUtils.rightPad("R~F2pS(6", 0, 'e');	      	      String string3 = StringUtils.substring("H)PFuo;Qc-CROf|", 0);Qc-CROf|", string3);	      	      String string4 = StringUtils.join(charArray0, 'X', 0, 0);	  }
@Test(dataProvider = "wiggleSortArray")    public void testWiggleSortN(int[] nums) {        new WiggleSort().wiggleSortN(nums);        assertTrue(String.format("%s is not wiggle sorted", IntStream.of(nums).mapToObj(String::valueOf).                        collect(joining(",", "[", "]"))),                wiggleSortedN(nums));    }
@Test    public void testGetNameWithEscapedTableAndColumnName() {        String identifier = "\"table.column\"";        String expected = "\"column\"";        SQLIdentifier actual = new SQLIdentifier( identifier );        Assert.assertEquals( expected, actual.getName() );    }
@Test(timeout = 4000)	  public void testcontainsOnly()  throws Throwable  {	      String string0 = StringUtils.reverseDelimited("", '?');	      	      int int0 = StringUtils.indexOfAny((CharSequence) "", "");	      	      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");	      	      String string1 = StringUtils.remove("(?: s|[s&&[^ ]])s*", "{U1XEB(EJl");	      	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "(?: s|[s&&[^ ]])s*", (String) null);	      	      LinkedList<String> linkedList0 = new LinkedList<String>();	      	      Iterator<String> iterator0 = linkedList0.descendingIterator();	      	      String string2 = StringUtils.join(iterator0, "");	      	      String string3 = StringUtils.remove("XXt!*Tj,", "");	      	      double[] doubleArray0 = new double[3];	      doubleArray0[0] = (double) '?';	      doubleArray0[1] = (double) '?';	      doubleArray0[2] = (double) '?';	      String string4 = StringUtils.join(doubleArray0, '0', (-1), (-1));	      	      String string5 = StringUtils.getCommonPrefix(stringArray0);	      	      String[] stringArray1 = new String[4];	      	      stringArray1[0] = null;	      stringArray1[1] = "XXt!*Tj,";	      stringArray1[2] = "XXt!*Tj,";	      stringArray1[3] = "";	      String string6 = StringUtils.replaceEachRepeatedly("XXt!*Tj,", stringArray0, stringArray1);	      	      float[] floatArray0 = new float[7];	      floatArray0[0] = (float) '?';	      floatArray0[1] = (float) (-1);	      floatArray0[2] = (float) '0';	      floatArray0[3] = (float) '?';	      floatArray0[4] = (float) (-1);	      floatArray0[5] = (float) '?';	      floatArray0[6] = (float) (-1);	      String string7 = StringUtils.join(floatArray0, 'Q', (-1), (-1));	  }
@Test(timeout = 4000)	  public void testisUseFieldNames()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      String string0 = standardToStringStyle0.getContentStart();	      assertTrue(standardToStringStyle0.isUseFieldNames());	  }
@Test  public void testInstallInputOrgInPropertiesFileExpectsAddedToService() throws Exception {    Organization org1 = EasyMock.createMock(Organization.class);    EasyMock.expect(org1.getId()).andReturn("org1").anyTimes();    EasyMock.replay(org1);    Organization org2 = EasyMock.createMock(Organization.class);    EasyMock.expect(org2.getId()).andReturn("org2").anyTimes();    EasyMock.replay(org2);    EasyMock.expect(securityService.getOrganization()).andReturn(org1).anyTimes();    EasyMock.replay(securityService);    File file = getResourceFile("/ListProvidersScannerTest-WithOrg.properties");    listProvidersScanner.install(file);    ResourceListQuery query = new ResourceListQueryImpl();    assertEquals(1, listProvidersService.getAvailableProviders().size());    assertEquals(listName, listProvidersService.getAvailableProviders().get(0));    assertEquals("org1", org1.getId());    assertTrue("Provider is not registered", listProvidersService.hasProvider(listName, org1.getId()));    Map<String, String> dictionary = listProvidersService.getList(listName, query, false);    assertEquals(3, dictionary.size());    assertEquals("TEST.VALUE.1", dictionary.get("TEST.KEY.1"));    assertEquals("TEST.VALUE.2", dictionary.get("TEST.KEY.2"));    assertEquals("TEST.VALUE.3", dictionary.get("TEST.KEY.3"));  }
@Test(timeout = 4000)	  public void testcreateIfAbsent()  throws Throwable  {	      Object object0 = new Object();	      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(object0);	      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());	      Future<Callable<Object>> future0 = ConcurrentUtils.constantFuture(callable0);	      Thread thread0 = MockThread.currentThread();	      ForkJoinTask<String> forkJoinTask0 = ForkJoinTask.adapt((Runnable) thread0, "I");	      forkJoinTask0.isCancelled();	      ConcurrentUtils.ConstantFuture<ForkJoinTask<String>> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<ForkJoinTask<String>>(forkJoinTask0);	      concurrentUtils_ConstantFuture1.isCancelled();	      ExecutionException executionException0 = new ExecutionException((Throwable) null);	      ConcurrentUtils.handleCause(executionException0);	      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      ConcurrentSkipListMap<Object, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Integer>(comparator0);	      ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>((Integer) null);	      // Undeclared exception!	      try { 	        ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Integer>) concurrentSkipListMap0, (Object) future0, (ConcurrentInitializer<Integer>) constantInitializer0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);	      }	  }
@Test  public void testEncodeDuration() {    Long d1 = 2743414L;    assertEquals(d1, decodeDuration(encodeDuration(d1).getValue()));    Long d2 = 78534795325L;    assertEquals(d2, decodeDuration(encodeDuration(d2).getValue()));    Long d3 = 234L;    assertEquals(d3, decodeDuration(encodeDuration(d3).getValue()));    assertEquals(new Long(1 * 1000 * 60 * 60 + 10 * 1000 * 60 + 5 * 1000), decodeDuration("01:10:05"));    assertEquals(Opt.some(DublinCore.ENC_SCHEME_ISO8601), encodeDuration(d3).getEncodingScheme());    assertNull(decodeDuration(DublinCoreValue.mk("bla")));    assertNull(decodeDuration(DublinCoreValue.mk(encodeDuration(d1).getValue(), DublinCore.LANGUAGE_UNDEFINED,            DublinCore.ENC_SCHEME_BOX)));  }
@Test(dataProvider = "rotatedArray")    public void test1(int[] nums, int target, int expectedIndex){        assertEquals(new RotateSearch().search1(nums, target), expectedIndex);    }
@Test    public void threeCM() {        Assert.assertEquals(                RxComprehensions.doConcatMap(zero(3), one(true), two("result"), three("other")).toBlocking().first(),                "other");    }
@Test    public void evaluateTContainsInstant3() {        expectedException.expect( IllegalArgumentException.class );        expectedException.expectMessage( "Invalid arguments for SplitBy" );        splitBy.evaluate( period( null, "00:00:05" ), instant( "00:00:03" ) );    }
@Test(dataProvider = "longestIncreasingSubsequenceTestObjects")    public void test(int[] testArray, int longestSubsequenceLength) {        assertEquals(LongestIncreasingSubsequence.longest(testArray), longestSubsequenceLength);    }
@Test    public void testXslt10()                            throws Exception {        InputStream docToTransform = XsltUtilsTest.class.getResourceAsStream( "feature.gml" );        URL xslt = XsltUtilsTest.class.getResource( "featureToHtml-Xslt10.xslt" );        ByteArrayOutputStream bos = new ByteArrayOutputStream();        XsltUtils.transform( docToTransform, xslt, bos );        bos.close();        assertThat( bos.toString(), containsString( "Identifier: i1 Name: feature name 1 Props: 1a, 1b" ) );        assertThat( bos.toString(), containsString( "Identifier: i2 Name: feature name 2 Props: 2a, 2b, 2c" ) );    }
@Test public void testRegisterOnBackStackChangeListener() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentController controller = new FragmentController(activity.getSupportFragmentManager());		final FragmentController.OnBackStackChangeListener firstMockListener = mock(FragmentController.OnBackStackChangeListener.class);		final FragmentController.OnBackStackChangeListener secondMockListener = mock(FragmentController.OnBackStackChangeListener.class);		// Act:		controller.registerOnBackStackChangeListener(firstMockListener);		controller.registerOnBackStackChangeListener(firstMockListener);		controller.registerOnBackStackChangeListener(secondMockListener);		// Assert:		final FragmentManager.BackStackEntry mockBackStackEntry = mock(FragmentManager.BackStackEntry.class);		controller.notifyBackStackEntryChange(mockBackStackEntry, true);		verify(firstMockListener).onFragmentsBackStackChanged(mockBackStackEntry, true);		verify(secondMockListener).onFragmentsBackStackChanged(mockBackStackEntry, true);		verifyNoMoreInteractions(firstMockListener, secondMockListener);	}
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      byte[] byteArray0 = new byte[1];	      // Undeclared exception!	      try { 	        ArrayUtils.remove(byteArray0, (-1875));	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: -1875, Length: 1	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test    public void testAddAll() {        EdgeStore edgeStore = new EdgeStore();        EdgeImpl[] edges = GraphGenerator.generateLargeEdgeList();        boolean a = edgeStore.addAll(Arrays.asList(edges));        Assert.assertEquals(edgeStore.size(), edges.length);        Assert.assertTrue(a);        testContainsOnly(edgeStore, Arrays.asList(edges));        boolean b = edgeStore.addAll(Arrays.asList(edges));        Assert.assertFalse(b);        boolean c = edgeStore.addAll(new ArrayList<Edge>());        Assert.assertFalse(c);    }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(32, strBuilder0.capacity());	      	      StrMatcher strMatcher0 = StrMatcher.noneMatcher();	      	      char[] charArray0 = new char[2];	      charArray0[0] = '$';	      charArray0[1] = 'B';	      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);	      	      StrMatcher strMatcher2 = StrMatcher.stringMatcher("Invalid startIndex: ");	      	      int int0 = strBuilder0.lastIndexOf(strMatcher0);	      assertEquals(32, strBuilder0.capacity());	      	      boolean boolean0 = strBuilder0.startsWith("");	      assertEquals(32, strBuilder0.capacity());	      	      StrBuilder strBuilder1 = strBuilder0.append(true);	      assertEquals(32, strBuilder0.capacity());	      assertEquals(32, strBuilder1.capacity());	      	      // Undeclared exception!	      try { 	        strBuilder1.deleteCharAt((-1));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void testReplaceAndDistributeAcl() throws Exception {    URI mpURI = LiveScheduleServiceImplTest.class.getResource("/live-mp.xml").toURI();    MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder()            .loadFromXml(mpURI.toURL().openStream());    Job job = createJob(1L, "anything", "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>"            + "<attachment id=\"security-policy-episode\" type=\"security/xacml+episode\" xmlns=\"http://mediapackage.opencastproject.org\">"            + "<mimetype>text/xml</mimetype><url>http://host/security-policy-episode.xml</url></attachment>");    EasyMock.expect(downloadDistributionService.distribute(EasyMock.anyString(), EasyMock.anyObject(MediaPackage.class),            EasyMock.anyObject(String.class), EasyMock.anyBoolean())).andReturn(job).once();    EasyMock.expect(serviceRegistry.getJob(1L)).andReturn(job).anyTimes();    replayServices();    service.setDownloadDistributionService(downloadDistributionService);    AccessControlList acl = new AccessControlList(new AccessControlEntry("user", "read", true));    MediaPackage mp1 = service.replaceAndDistributeAcl(mp, acl);    Attachment[] atts = mp1.getAttachments(MediaPackageElements.XACML_POLICY_EPISODE);    Assert.assertNotNull(atts);    Assert.assertEquals(1, atts.length);    Attachment att = atts[0];    Assert.assertEquals("http://host/security-policy-episode.xml", att.getURI().toString());    Assert.assertEquals("security/xacml+episode", att.getFlavor().toString());    EasyMock.verify(downloadDistributionService);  }
@Test    public void testMetadata()                            throws OWSExceptionReport, IOException {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        URL serviceUrl = new URL( demoWPSURL );        WPSClient client = new WPSClient( serviceUrl );        Assert.assertNotNull( client );        ServiceIdentification serviceId = client.getMetadata().getServiceIdentification();        Assert.assertNotNull( serviceId );        Assert.assertEquals( 1, serviceId.getTitles().size() );        Assert.assertNotNull( serviceId.getTitles().get( 0 ).getString() );         Assert.assertEquals( 1, serviceId.getAbstracts().size() );        Assert.assertNotNull( serviceId.getAbstracts().get( 0 ).getString() );        Assert.assertEquals( "WPS", serviceId.getServiceType().getCode() );        Assert.assertEquals( "1.0.0", serviceId.getServiceTypeVersion().get( 0 ).toString() );        ServiceProvider serviceProvider = client.getMetadata().getServiceProvider();        Assert.assertEquals( "lat/lon GmbH", serviceProvider.getProviderName() );        Assert.assertEquals( "http://www.lat-lon.de", serviceProvider.getProviderSite() );        ResponsibleParty serviceContact = serviceProvider.getServiceContact();        Assert.assertNotNull( serviceContact.getIndividualName() );        Assert.assertNotNull( serviceContact.getPositionName() );        ContactInfo contactInfo = serviceContact.getContactInfo();        Assert.assertEquals( "0228/18496-0", contactInfo.getPhone().getVoice().get( 0 ) );        Assert.assertEquals( "0228/18496-29", contactInfo.getPhone().getFacsimile().get( 0 ) );        Assert.assertEquals( "Aennchenstr. 19", contactInfo.getAddress().getDeliveryPoint().get( 0 ) );        Assert.assertEquals( "Bonn", contactInfo.getAddress().getCity() );        Assert.assertEquals( "NRW", contactInfo.getAddress().getAdministrativeArea() );        Assert.assertEquals( "53177", contactInfo.getAddress().getPostalCode() );        Assert.assertEquals( "Germany", contactInfo.getAddress().getCountry() );        Assert.assertNotNull( contactInfo.getAddress().getElectronicMailAddress().get( 0 ) );        Assert.assertEquals( "http://www.deegree.org", contactInfo.getOnlineResource().toExternalForm() );        Assert.assertEquals( "24x7", contactInfo.getHoursOfService() );        Assert.assertEquals( "Do not hesitate to call", contactInfo.getContactInstruction() );        Assert.assertEquals( "PointOfContact", serviceContact.getRole().getCode() );        OperationsMetadata opMetadata = client.getMetadata().getOperationsMetadata();        Operation op;                 op = opMetadata.getOperation("GetCapabilities");         Assert.assertNotNull( op.getGetUrls().get( 0 ).toExternalForm() );        Assert.assertNotNull( op.getPostUrls().get( 0 ).toExternalForm() );                op = opMetadata.getOperation("DescribeProcess");         Assert.assertNotNull( op.getGetUrls().get( 0 ).toExternalForm() );        Assert.assertNotNull( op.getPostUrls().get( 0 ).toExternalForm() );                op = opMetadata.getOperation("Execute");         Assert.assertNotNull( op.getGetUrls().get( 0 ).toExternalForm() );        Assert.assertNotNull( op.getPostUrls().get( 0 ).toExternalForm() );    }
@Test(timeout = 4000)	  public void testreplacePattern()  throws Throwable  {	      String string0 = StringUtils.replacePattern("<#_}Yb\"", "<#_}Yb\"", "");	      	      String string1 = StringUtils.removeStartIgnoreCase("Array element ", "<#_}Yb\"");	      	      boolean boolean0 = StringUtils.containsAny((CharSequence) "", (CharSequence) "Array element ");	      	      boolean boolean1 = StringUtils.isNotEmpty("");	      	      String string2 = StringUtils.right("", 0);	      	      String string3 = StringUtils.defaultString("=k\"Us_J-Cx*Q", "Array element ");	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      short[] shortArray0 = new short[3];	      short[] shortArray1 = ArrayUtils.subarray(shortArray0, 2, 377);	  }
@Test(timeout = 4000)	  public void testgetFragment()  throws Throwable  {	      Locale locale0 = Locale.US;	      String[] stringArray0 = new String[4];	      stringArray0[0] = "% ";	      Date date0 = DateUtils.parseDateStrictly("% ", locale0, stringArray0);	      long long0 = DateUtils.getFragmentInMilliseconds(date0, 5);	  }
@Test(timeout = 4000)	  public void testsetDelimiterChar()  throws Throwable  {	      char[] charArray0 = new char[9];	      charArray0[0] = 'u';	      charArray0[2] = 'B';	      StrMatcher strMatcher0 = StrMatcher.trimMatcher();	      StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0);	      strTokenizer0.next();	      strTokenizer0.next();	      StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('H');	  }
@Test(expected = IllegalStateException.class)    public void onViewCreatedWithoutChangeListener() throws Exception {        presenter.onViewCreated();    }
@Test    void testSimpleMismatch() {        SamplingRule rule = new SamplingRule()            .withAttributes(null)            .withHost("192.168.1.1")            .withServiceName("www.foo.com")            .withHTTPMethod("POST")            .withResourceARN("arn:aws:service:us-east-1:111111111111:resource")            .withURLPath("/bar/123")            .withServiceType("AWS::EC2::Instance");        SamplingRequest req = new SamplingRequest(            "role-arn",            "arn:aws:service:us-east-1:111111111111:resource",            "www.bar.com",            "192.168.1.1",            "POST",            "/bar/123",            "AWS::EC2::Instance",            null        );        Matchers m = new Matchers(rule);        Assertions.assertFalse(m.match(req));    }
@Test    public void should_rhs_be_evaluated_when_AND_operator_and_lhs_is_true___strong_ref() {        when(lhs.isGranted(any(), any(), any())).thenReturn(true);        when(rhs.isGranted(any(), any(), any())).thenReturn(false);        GrantEvaluator grantEvaluator = composer.and(lhs, rhs);        boolean granted = grantEvaluator.isGranted(null, null, "fake");        verify(lhs).isGranted(any(), any(), any());        verify(rhs).isGranted(any(), any(), any());        assertThat(granted).isFalse();    }
@Test    public void goAwayNoAdditionalData() {        Http2Frame frame = TestMessages.GOAWAY_NO_DATA_FRAME;        assertArrayEquals(TestMessages.GOAWAY_NO_DATA_BUFFER, toByteArray(encoder.encode(frame, null)));    }
@Test(timeout = 4000)	  public void testconvertClassNamesToClasses()  throws Throwable  {	      List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses((List<String>) null);	  }
@Test    public void testEthAccounts() throws Exception {        web3j.platonAccounts().send();        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"platon_accounts\",\"params\":[],\"id\":1}");    }
@Test(expected = IllegalArgumentException.class)    public void testAllocateDirectNegative() {        IoBuffer.allocate(-1);    }
@Test(timeout = 2500)    public void testPolygonStylingWithCirclesSmallClipping()                            throws Exception {        BufferedImage img = new BufferedImage( 100, 100, TYPE_INT_ARGB );        long time = currentTimeMillis();        Graphics2D g = img.createGraphics();        GeometryFactory geomFac = new GeometryFactory();        Java2DRenderer r = new Java2DRenderer( g, img.getWidth(), img.getHeight(),                                               geomFac.createEnvelope( new double[] { 0, 0 },                                                                       new double[] { 600d, 600d }, mapcs ) );        Envelope envelope = geomFac.createEnvelope( 10, 10, 100000000, 100000000, null );        PolygonStyling styling = new PolygonStyling();        styling.stroke = new Stroke();        styling.stroke.strokeGap = 7;        styling.stroke.width = 1;        styling.stroke.stroke = new Graphic();        styling.stroke.stroke.size = 5;        styling.stroke.stroke.mark.fill.color = red;        styling.stroke.stroke.mark.wellKnown = SimpleMark.CIRCLE;        styling.stroke.stroke.mark.stroke.color = red;        styling.stroke.stroke.mark.stroke.width = 0;        styling.fill = new Fill();        styling.fill.color = white;        r.render( styling, envelope );        g.dispose();        long time2 = currentTimeMillis();        List<String> texts = new LinkedList<String>();        texts.add( "polygon: black line with circles stroke vertical on the left and horizontal on the bottom" );        validateImage( img, time2 - time, "polygonstylingwithcircelssmallclipping" );    }
@Test(timeout = 4000)	  public void testisAscii()  throws Throwable  {	      boolean boolean0 = CharUtils.isAsciiPrintable('\u001C');	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      int int0 = 0;	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      	      char[] charArray0 = new char[3];	      charArray0[0] = 'R';	      charArray0[1] = 'L';	      charArray0[2] = 'L';	      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(charArray0);	      	      String string0 = strBuilder_StrBuilderTokenizer0.getContent();	      	      char[] charArray1 = new char[4];	      assertFalse(charArray1.equals((Object)charArray0));	      	      charArray1[0] = 'L';	      charArray1[1] = 'L';	      charArray1[2] = 'L';	      charArray1[3] = '6';	      StrBuilder strBuilder1 = strBuilder0.append(charArray1, 0, 0);	      assertFalse(charArray1.equals((Object)charArray0));	      	      // Undeclared exception!	      try { 	        strBuilder1.insert(352, charArray1);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 352	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testreplaceEach()  throws Throwable  {	      String string0 = StringUtils.chomp((String) null);	      	      boolean boolean0 = StringUtils.containsAny((CharSequence) null, (CharSequence) null);	      	      String string1 = StringUtils.prependIfMissing((String) null, (CharSequence) null, (CharSequence[]) null);	      	      String string2 = StringUtils.trimToNull("82!8rPa!1'CHof?Xqv>");	      	      String string3 = StringUtils.EMPTY;	      	      boolean boolean1 = StringUtils.contains((CharSequence) "", (CharSequence) null);	      	      String[] stringArray0 = new String[1];	      stringArray0[0] = "82!8rPa!1'CHof?Xqv>";	      String string4 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray0);	      	      String string5 = StringUtils.substringBefore("v#nOp!G", "");	      	      String string6 = StringUtils.chop("v#nOp!G");	      	      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 307);	      	      CharSequence[] charSequenceArray0 = new CharSequence[5];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "82!8rPa!1'CHof?Xqv>";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) null;	      charSequenceArray0[4] = (CharSequence) "v#nOp!G";	      String string7 = StringUtils.appendIfMissingIgnoreCase("", (CharSequence) null, charSequenceArray0);	  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      String string0 = StringUtils.leftPad((String) null, 114);	      	      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));	      	      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);	      	      String[] stringArray0 = StringUtils.split("\n", 'e');	      assertEquals(1, stringArray0.length);	      	      String string1 = StringUtils.removeStart((String) null, "}%");	      	      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");	      	      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);	      assertEquals(1, stringArray0.length);	      	      String string4 = StringUtils.rightPad((String) null, 1124, "");	      	      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", (CharSequence) null);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));	      	      String string5 = StringUtils.right("", (-240));	      	      String string6 = StringUtils.difference((String) null, "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);	      	      String string7 = StringUtils.reverse((String) null);	      	      char[] charArray0 = new char[2];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      boolean boolean2 = StringUtils.containsOnly((CharSequence) null, charArray0);	      assertEquals(2, charArray0.length);	      	      short[] shortArray0 = new short[8];	      shortArray0[0] = (short) (-700);	      shortArray0[1] = (short)2431;	      shortArray0[2] = (short)336;	      shortArray0[0] = (short) (-1905);	      shortArray0[4] = (short)2;	      shortArray0[5] = (short)16;	      shortArray0[6] = (short)0;	      shortArray0[7] = (short) (-2743);	      String string8 = StringUtils.join(shortArray0, ')');	      assertEquals(8, shortArray0.length);	  }
@Test    public void testStandardizePrimitiveType() {        TableImpl<Node> table = new TableImpl<Node>(Node.class, false);        Column col = table.addColumn("Id", int.class);        Assert.assertEquals(col.getTypeClass(), Integer.class);    }
@Test    public void compareTo() throws Exception {        List<Migration> migrations = new ArrayList<>();        migrations.add(new MigrationStub(2, 3));        migrations.add(new MigrationStub(1, 2));        migrations.add(new MigrationStub(1, 3));        migrations.add(new MigrationStub(3, 4));        Collections.sort(migrations);        assertThat(migrations.get(0), equalTo(new MigrationStub(1, 3)));        assertThat(migrations.get(1), equalTo(new MigrationStub(1, 2)));        assertThat(migrations.get(2), equalTo(new MigrationStub(2, 3)));        assertThat(migrations.get(3), equalTo(new MigrationStub(3, 4)));    }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      booleanArray0[0] = true;	      int int0 = ArrayUtils.indexOf(booleanArray0, false);	  }
@Test(expected = IllegalArgumentException.class)  public void testParseWithOnlyOnePart() throws Exception {    SortCriterionImpl.parse("name:");  }
@Test  public void testSimpleAction() throws Exception {    //host    assertFalse(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_READ));    assertFalse(KAFKA_HOST1_READ.implies(KAFKA_HOST1_WRITE));    //consumer group    assertFalse(KAFKA_HOST1_GROUP1_WRITE.implies(KAFKA_HOST1_GROUP1_READ));    assertFalse(KAFKA_HOST1_GROUP1_READ.implies(KAFKA_HOST1_GROUP1_WRITE));    //topic    assertFalse(KAFKA_HOST1_TOPIC1_READ.implies(KAFKA_HOST1_TOPIC1_WRITE));    assertFalse(KAFKA_HOST1_TOPIC1_WRITE.implies(KAFKA_HOST1_TOPIC1_READ));    //cluster    assertFalse(KAFKA_HOST1_CLUSTER1_READ.implies(KAFKA_HOST1_CLUSTER1_WRITE));    assertFalse(KAFKA_HOST1_CLUSTER1_WRITE.implies(KAFKA_HOST1_CLUSTER1_READ));  }
@Test(dataProvider = "islandsAndResult")    public void testNumber(char[][] islands, int expectedNumber) {        assertEquals(new NumberOfIslands().numIslands(islands), expectedNumber);    }
@Test(timeout = 4000)	  public void testgetFieldNameValueSeparator()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      Boolean boolean0 = Boolean.valueOf("&=$L/rFw]D");	      standardToStringStyle0.isFullDetail(boolean0);	      assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator());	  }
@Test    public void initFlows() {        String flows = snakerEngineFacets.initFlows();        Assert.assertNotNull(flows);    }
@Test public void testOnCreateOptionsMenuForFragmentWithoutMenu() {		// Arrange:		final ActionBarFragment fragment = new TestFragmentWithoutAnnotation();		final Menu mockMenu = mock(Menu.class);		final MenuInflater mockMenuInflater = mock(MenuInflater.class);		// Act:		fragment.onCreateOptionsMenu(mockMenu, mockMenuInflater);		// Assert:		verifyZeroInteractions(mockMenu, mockMenuInflater);	}
@Test(timeout = 4000)	  public void testfloatValue()  throws Throwable  {	      Fraction fraction0 = Fraction.ONE;	      Fraction fraction1 = Fraction.getFraction(938.1912073079151);	      Fraction fraction2 = fraction0.multiplyBy(fraction1);	      assertEquals(938.1912F, fraction2.floatValue(), 0.01F);	  }
@Test    public void test200ExampleBboxExplicitCrs()                            throws Exception {        final GetFeature request = parse( "wfs200/example_bbox_explicit_crs.kvp" );        final BBoxQuery query = (BBoxQuery) request.getQueries().get( 0 );        final ICRS crs = query.getBBox().getCoordinateSystem();        assertEquals( "EPSG:4326", crs.getAlias() );    }
@Test    public void oneCo() {        Assert.assertEquals((RxComprehensions.doCompose(zero(0), intIncrementToString()).blockingFirst()), "1");    }
@Test    void testInvalidCgroupFile() throws IOException {        DockerUtils dockerUtils = new DockerUtils(DockerUtilsTest.class.getResource("/com/amazonaws/xray/utils/invalidCgroup"));        String id = dockerUtils.getContainerId();        Assertions.assertNull(id);    }
@Test  public void testScriptSize() throws DecoderException {    final Transaction parsedTransaction = TransactionParseUtil.parseTransactionBytes(Hex.decode(TX_NORMAL_HEX));    Assert.assertEquals(108, parsedTransaction.getInputs().get(0).getScriptSize().getValue());  }
@Test    public void testEthEstimateGasContractCreation() throws Exception {        web3j.platonEstimateGas(                Transaction.createContractTransaction(                        "0x52b93c80364dc2dd4444c146d73b9836bbbb2b3f", BigInteger.ONE,                        BigInteger.TEN, "")).send();        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"platon_estimateGas\","                + "\"params\":[{\"from\":\"0x52b93c80364dc2dd4444c146d73b9836bbbb2b3f\","                + "\"gasPrice\":\"0xa\",\"data\":\"0x\",\"nonce\":\"0x1\"}],\"id\":1}");    }
@Test(timeout = 4000)	  public void testtoHashCode()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(73, (-1));	      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(73);	      boolean[] booleanArray0 = new boolean[6];	      booleanArray0[1] = true;	      booleanArray0[4] = true;	      hashCodeBuilder1.append(booleanArray0);	      assertEquals(0, hashCodeBuilder0.toHashCode());	  }
@Test   public void testParseTimes()   {      List<Date> parse = new PrettyTimeParser().parse("let's get lunch at two pm");      Assert.assertFalse(parse.isEmpty());      Calendar calendar = Calendar.getInstance();      calendar.setTime(parse.get(0));      Assert.assertEquals(14, calendar.get(Calendar.HOUR_OF_DAY));   }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      int int0 = (-1994);	      StrBuilder strBuilder0 = new StrBuilder((-1994));	      assertTrue(strBuilder0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.appendln("");	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      int int1 = (-2242);	      int int2 = 5;	      strBuilder1.size = 5;	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      strBuilder1.size = (-2242);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertFalse(strBuilder0.isEmpty());	      	      boolean boolean0 = strBuilder_StrBuilderReader0.ready();	      assertFalse(strBuilder0.isEmpty());	      	      int int3 = 20;	      // Undeclared exception!	      try { 	        strBuilder1.replace((-2242), 20, "java.compiler");	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -2242	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void testToProtoSQLPropertyIsLikeRequiredEscapeClausePresent()                            throws UnmappableException, FilterEvaluationException {        Expression testValue = new ValueReference( "shortdesc", CommonNamespaces.getNamespaceContext() );        Expression pattern = new Literal<PrimitiveValue>( "HOWELLCITY" );        String wildCard = "*";        String singleChar = "#";        String escapeChar = "!";        Boolean matchCase = true;        MatchAction matchAction = MatchAction.ALL;        PropertyIsLike op = new PropertyIsLike( testValue, pattern, wildCard, singleChar, escapeChar, matchCase,                                                matchAction );        SQLOperation protoSQL = whereBuilder.toProtoSQL( op );        StringBuilder sql = protoSQL.getSQL();        Assert.assertEquals( "table.shortdesc LIKE 'HOWELLCITY' ESCAPE '\\'", sql.toString() );    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseTimestampMapCharBadFormat() {        TimestampsParser.parseTimestampMap(Character.class, "[1, abc]");    }
@Test  public void testTargetFlavourWithTypeAndSubtypeWildcard() throws Exception {    WorkflowInstanceImpl instance = new WorkflowInstanceImpl();    List<WorkflowOperationInstance> ops = new ArrayList<WorkflowOperationInstance>();    WorkflowOperationInstanceImpl operation = new WorkflowOperationInstanceImpl("test", OperationState.INSTANTIATED);    ops.add(operation);    instance.setOperations(ops);    instance.setMediaPackage(mp);    operation.setConfiguration(TagWorkflowOperationHandler.SOURCE_FLAVORS_PROPERTY, "*/source");    operation.setConfiguration(TagWorkflowOperationHandler.TARGET_FLAVOR_PROPERTY, "*/*");    operation.setConfiguration(TagWorkflowOperationHandler.TARGET_TAGS_PROPERTY, "tag1, tag2");    operation.setConfiguration(TagWorkflowOperationHandler.COPY_PROPERTY, "false");    WorkflowOperationResult result = operationHandler.start(instance, null);    MediaPackage resultingMediapackage = result.getMediaPackage();    Track track1 = resultingMediapackage.getTrack("track-1");    Track track2 = resultingMediapackage.getTrack("track-2");    Assert.assertEquals("presentation/source", track1.getFlavor().toString());    Assert.assertEquals("presenter/source", track2.getFlavor().toString());  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      short[] shortArray0 = new short[4];	      short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short)154);	  }
@Test    public void testEmpty() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        Assert.assertEquals(store.size(), 0);    }
@Test    public void testBBoxFilter()                            throws Exception {        LOG.info( "START Test: testInsert" );        initStore( TstConstants.configURL );        Assume.assumeNotNull( store );        TstUtils.insertMetadata( store, TstConstants.tst_9, TstConstants.tst_10, TstConstants.tst_1 );        GeometryFactory gf = new GeometryFactory();        ValueReference pn = new ValueReference( "ows:BoundingBox", nsContext );        Operator op = new BBOX( pn, gf.createEnvelope( 7.30, 49.30, 10.70, 51.70, CRSUtils.EPSG_4326 ) );        Filter filter = new OperatorFilter( op );        MetadataQuery query = new MetadataQuery( null, null, filter, null, 1, 10 );        store.getRecordCount( query );    }
@Test(timeout = 4000)	  public void testformatDuration()  throws Throwable  {	      long long0 = 2626L;	      String string0 = null;	      // Undeclared exception!	      try { 	        DurationFormatUtils.formatDuration(2626L, (String) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	      }	  }
@Test(timeout = 4000)	  public void testdifference()  throws Throwable  {	      String string0 = StringUtils.leftPad((String) null, 114);	      	      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));	      	      int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124);	      	      String[] stringArray0 = StringUtils.split("\n", 'e');	      	      String string1 = StringUtils.removeStart((String) null, "}%");	      	      String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN");	      	      String string3 = StringUtils.prependIfMissing((String) null, (CharSequence) null, stringArray0);	      	      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");	      	      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator((String) null, (String) null, (-1));	      	      String string5 = StringUtils.right("", (-240));	      	      String string6 = StringUtils.difference((String) null, "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, (CharSequence) null);	      	      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");	      	      char[] charArray0 = new char[2];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);	      	      short[] shortArray0 = new short[8];	      shortArray0[0] = (short) (-700);	      shortArray0[1] = (short)2431;	      shortArray0[2] = (short)336;	      shortArray0[3] = (short) (-1905);	      shortArray0[4] = (short)2;	      shortArray0[5] = (short)16;	      shortArray0[6] = (short)0;	      shortArray0[7] = (short) (-2743);	      String string8 = StringUtils.join(shortArray0, ')');	  }
@Test(timeout = 4000)	  public void testnotEmpty()  throws Throwable  {	      // Undeclared exception!	      try { 	        Validate.notEmpty((Collection<BatchUpdateException>) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // The validated collection is empty	         //	         verifyException("org.apache.commons.lang3.Validate", e);	      }	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = "\\u0";	      String string1 = StringUtils.center("!#uP", (-201), string0);	      assertFalse(string1.equals((Object)string0));	      	      String string2 = StringUtils.substringBefore((String) null, "TcBWicm1LpG#(Y%\"szP");	      	      char[] charArray0 = new char[6];	      charArray0[0] = 'W';	      charArray0[1] = 'A';	      charArray0[2] = 'v';	      charArray0[3] = 'p';	      charArray0[4] = '/';	      charArray0[5] = 'S';	      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);	      	      StringUtils stringUtils0 = new StringUtils();	      	      String string3 = StringUtils.center("!#uP", 0, 'B');	      assertTrue(string3.equals((Object)string1));	      assertFalse(string3.equals((Object)string0));	      	      int int0 = StringUtils.countMatches((CharSequence) null, "");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "!#uP", 0);	      	      String string4 = StringUtils.prependIfMissingIgnoreCase("\r", "\r", (CharSequence[]) null);	      assertFalse(string4.equals((Object)string3));	      assertFalse(string4.equals((Object)string0));	      assertFalse(string4.equals((Object)string1));	      	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	  }
@Test    public void parseAndExportFilterDocument()                            throws XMLStreamException, FactoryConfigurationError, IOException, UnknownCRSException,                            TransformationException {        Filter filter = testImportExportImport( "testfilter_110_operator.xml" );        XMLMemoryStreamWriter writer = new XMLMemoryStreamWriter();        Filter110XMLEncoder.export( filter, writer.getXMLStreamWriter() );        String schemaLocation = "http://schemas.opengis.net/filter/1.1.0/filter.xsd";        XMLAssert.assertValidity( writer.getReader(), schemaLocation );    }
@Test    public void testCreateStandard() throws Exception {        WalletFile walletFile =  Wallet.createStandard(SampleKeys.PASSWORD, SampleKeys.KEY_PAIR);        System.out.println("------ mainnet:" + walletFile.getAddress().getMainnet());        System.out.println("------ testnet:" + walletFile.getAddress().getTestnet());        //testCreate(Wallet.createStandard(SampleKeys.PASSWORD, SampleKeys.KEY_PAIR));    }
@Test(expected = IllegalArgumentException.class)  public void testGetWhenRequired() {    YouTubeUtils.get(new XProperties(), YouTubeKey.clientSecretsV3, true);  }
@Test    public void testParseIntervalMapLong() {        IntervalLongMap expected = new IntervalLongMap();        expected.put(new Interval(1, 2), 1l);        expected.put(new Interval(3, 5), 2l);        expected.put(new Interval(5, 6), 3l);        expected.put(new Interval(6, 7), 4l);        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(Long.class, "[1, 2, 1.0]; [3, 5, 2]; [5, 6, '3']; [6, 7, \"4\"]"));// Decimals                                                                                                                                              // are                                                                                                                                              // ignored        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(long.class, "[1, 2, 1.0]; [3, 5, 2]; [5, 6, '3']; [6, 7, \"4\"]"));// Decimals                                                                                                                                              // are                                                                                                                                              // ignored    }
@Test    public void testGetCurrentAsString() {        Date date = new Date();        String dateAsString = DateUtil.getCurrentAsString();        DateFormat dateFormat = new SimpleDateFormat("EEE, dd MMM yyyy HH:mm:ss zzz", Locale.US);        dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));        String testConvertedDate = dateFormat.format(date);        Assert.assertEquals(testConvertedDate, dateAsString);    }
@Test(timeout = 4000)	  public void testis()  throws Throwable  {	      CharRange charRange0 = CharRange.is('o');	      char char0 = charRange0.getEnd();	      assertFalse(charRange0.isNegated());	  }
@Test    public void testGetAttributeTimestampColumnNull() {        GraphStore store = new GraphStore();        Column column = generateTimestampColumn(store);        NodeImpl node = new NodeImpl("0", store);        Assert.assertNull(node.getAttribute(column, 1.0));    }
@Test(dataProvider = "mine1")    public void testSweeper1(int[][] matrix, boolean expected) {        assertEquals(new MineSweeper().minesweeper1(matrix), expected);    }
@Test  public void testBuildNegativeStateQuery() throws Exception {    WorkflowQuery q = new WorkflowQuery().withSeriesId("series1").withoutState(WorkflowState.RUNNING);    String solrQuery = dao.createQuery(q, Permissions.Action.READ.toString(), true);    String expected = "oc_org:mh_default_org AND seriesid:series1 AND (-state:running AND *:*)";    assertEquals(expected, solrQuery);  }
@Test(timeout = 4000)	  public void testisAlphanumericSpace()  throws Throwable  {	      String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768));	      	      boolean boolean0 = StringUtils.isAllUpperCase("");	      	      StringUtils.remove("x", ')');	      String string1 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768));	      	      boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type ");	      String string2 = StringUtils.stripToNull("ptgNwtnxatzWXwA");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("ptgNwtnxatzWXwA", "ptgNwtnxatzWXwA");	      	      StringUtils.removeEnd((String) null, "aEK60VM*X");	      boolean boolean2 = StringUtils.isNumeric("Cannot clone Cloneable type ");	      	      boolean boolean3 = StringUtils.isAlphanumericSpace("Cannot clone Cloneable type ");	      	      StringUtils.substringBeforeLast((String) null, "");	      StringUtils.rightPad("aEK60VM*X", 25, 'D');	      StringUtils.abbreviateMiddle("Cannot clone Cloneable type ", "cnC6A#Qa.Kd}", (-32768));	      StringUtils.indexOf((CharSequence) "Cannot clone Cloneable type ", 7, 19);	      String string3 = StringUtils.rightPad("x", 174, 'D');	      	      String string4 = StringUtils.substringBetween("ptgNwtnxatzWXwA", "");	  }
@Test(timeout = 4000)	  public void testgetSummaryObjectStartText()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ",");	      standardToStringStyle0.appendToString(stringBuffer0, "");	      assertEquals("<", standardToStringStyle0.getSummaryObjectStartText());	  }
@Test    public void test_V110_EXAMPLE_13()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE_13 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        FilterQuery query0 = (FilterQuery) getFeature.getQueries().get( 0 );        OperatorFilter filter = (OperatorFilter) query0.getFilter();        assertTrue( filter.getOperator() instanceof Within );        Within within = (Within) filter.getOperator();        assertEquals( "InWaterA_1M/wkbGeom", within.getPropName().getAsText() );        Envelope env = (Envelope) within.getGeometry();        verifyEnvelope( env, 10.0, 10.0, 20.0, 20.0 );        FilterQuery query1 = (FilterQuery) getFeature.getQueries().get( 1 );        filter = (OperatorFilter) query1.getFilter();        assertTrue( filter.getOperator() instanceof Within );        within = (Within) filter.getOperator();        assertEquals( "BuiltUpA_1M/wkbGeom", within.getPropName().getAsText() );        env = (Envelope) within.getGeometry();        verifyEnvelope( env, 10.0, 10.0, 20.0, 20.0 );    }
@Test(timeout = 4000)	  public void testreset()  throws Throwable  {	      String string0 = "htoXU5/8-3A+";	      StrBuilder strBuilder0 = new StrBuilder("htoXU5/8-3A+");	      	      StrBuilder strBuilder1 = strBuilder0.reverse();	      	      char[] charArray0 = strBuilder0.toCharArray();	      	      char char0 = 'X';	      StrBuilder strBuilder2 = strBuilder1.appendln('X');	      	      int int0 = 8;	      StrBuilder strBuilder3 = strBuilder1.setLength(8);	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder1.new StrBuilderReader();	      	      CharBuffer charBuffer0 = CharBuffer.allocate(8);	      	      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);	      	      strBuilder_StrBuilderReader0.reset();	      	      // Undeclared exception!	      try { 	        strBuilder0.appendln(charArray0, 0, 3125);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // Invalid length: 3125	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testisAlpha()  throws Throwable  {	      String string0 = StringUtils.substring("|LF{gwG0AA/0)Uqh", 1488);	      	      boolean boolean0 = StringUtils.isAlphanumeric("");	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "|LF{gwG0AA/0)Uqh");	      	      PriorityQueue<CharBuffer> priorityQueue0 = new PriorityQueue<CharBuffer>();	      	      Iterator<CharBuffer> iterator0 = priorityQueue0.iterator();	      	      String string1 = StringUtils.join(iterator0, '$');	      	      char[] charArray0 = new char[7];	      charArray0[0] = '$';	      charArray0[1] = '$';	      charArray0[2] = '$';	      charArray0[3] = '$';	      charArray0[4] = '$';	      charArray0[5] = '$';	      charArray0[6] = '$';	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      	      boolean boolean1 = priorityQueue0.add(charBuffer0);	      	      String[] stringArray0 = StringUtils.substringsBetween("z0<DvlX4Nh[/'dsQn!", "{|v SEl 7n", "");	      	      String string2 = StringUtils.chop("");	      	      String string3 = StringUtils.appendIfMissingIgnoreCase("", "", (CharSequence[]) null);	      	      String string4 = StringUtils.right((String) null, 1488);	      	      String string5 = StringUtils.prependIfMissing("", "z0<DvlX4Nh[/'dsQn!", (CharSequence[]) null);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator("k@0-A6V|", "\"N;ix%MK", (-1));	  }
@Test(timeout = 4000)	  public void testread()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("5T]_m");	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      StrBuilder strBuilder1 = strBuilder0.append((-689.841F));	      	      long long0 = strBuilder_StrBuilderReader0.skip(0L);	      assertTrue(strBuilder_StrBuilderReader0.ready());	      	      long long1 = strBuilder_StrBuilderReader0.skip(310L);	      assertFalse(strBuilder_StrBuilderReader0.ready());	      	      StrBuilder strBuilder2 = strBuilder0.append(1.0);	      	      StringBuffer stringBuffer0 = new StringBuffer();	      	      // Undeclared exception!	      try { 	        strBuilder2.append(stringBuffer0, (-611), (-713));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testround()  throws Throwable  {	      String[] stringArray0 = new String[6];	      stringArray0[0] = "Could not round ";	      // Undeclared exception!	      try { 	        DateUtils.parseDateStrictly("Could not round ", stringArray0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Illegal pattern character 'C'	         //	         verifyException("java.text.SimpleDateFormat", e);	      }	  }
@Test  public void testNoTracks() throws Exception {    EasyMock.expect(instance.getConfiguration("source-flavor")).andReturn("*/nothing").anyTimes();    EasyMock.replay(instance);    Assert.assertTrue(handler.start(workflow, null).allowsContinue());  }
@Test  public void testShorterThanRequest() throws Exception {    //topic    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_TOPIC1_ALL));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_TOPIC1_READ));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_TOPIC1_WRITE));    assertFalse(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_READ));    assertTrue(KAFKA_HOST1_READ.implies(KAFKA_HOST1_TOPIC1_READ));    assertTrue(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_TOPIC1_WRITE));    //cluster    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_CLUSTER1_ALL));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_CLUSTER1_READ));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_CLUSTER1_WRITE));    assertTrue(KAFKA_HOST1_READ.implies(KAFKA_HOST1_CLUSTER1_READ));    assertTrue(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_CLUSTER1_WRITE));    //consumer group    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_GROUP1_ALL));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_GROUP1_READ));    assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_GROUP1_WRITE));    assertTrue(KAFKA_HOST1_READ.implies(KAFKA_HOST1_GROUP1_READ));    assertTrue(KAFKA_HOST1_WRITE.implies(KAFKA_HOST1_GROUP1_WRITE));  }
@Test(timeout = 4000)	  public void testcompare()  throws Throwable  {	      Integer integer0 = new Integer(1);	      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      doReturn(0, 0).when(comparator0).compare(any() , any());	      Range<Object> range0 = Range.between((Object) integer0, (Object) "", comparator0);	      boolean boolean0 = range0.isEndedBy("Elements in a range must not be null: element1=");	  }
@Test    public void select_multi_hit_with_overlap() throws Exception {        List<Emit> list = new ArrayList<Emit>();        list.add(new Emit(0, 4, null));        list.add(new Emit(0, 4, null));        list.add(new Emit(0, 5, null));        list.add(new Emit(2, 3, null));        list.add(new Emit(2, 10, null));        list.add(new Emit(5, 7, null));        list.add(new Emit(7, 8, null));        list.add(new Emit(8, 9, null));        List<Emit> result = mSelector.select(list);        assertThat(result.size(), is(2));        assertThat(result.get(0).getStart(), is(0));        assertThat(result.get(0).getEnd(), is(5));        assertThat(result.get(1).getStart(), is(7));        assertThat(result.get(1).getEnd(), is(8));    }
@Test    public void testPutNull() {        for (IntervalMap set : getAllInstances()) {            boolean thrown = false;            try {                set.put(new Interval(1.0, 2.0), null);            } catch (NullPointerException e) {                thrown = true;            }            if (!thrown) {                Assert.fail("Didn't throw an exception for " + set.getClass());            }        }    }
@Test    public void validate_test() {        WebAuthnRegistrationRequestValidator target = new WebAuthnRegistrationRequestValidator(                webAuthnManager, serverPropertyProvider        );        ServerProperty serverProperty = mock(ServerProperty.class);        when(serverPropertyProvider.provide(any())).thenReturn(serverProperty);        CollectedClientData collectedClientData = mock(CollectedClientData.class);        AttestationObject attestationObject = mock(AttestationObject.class);        AuthenticationExtensionsClientOutputs<RegistrationExtensionClientOutput> clientExtensionOutputs = new AuthenticationExtensionsClientOutputs<>();        when(webAuthnManager.validate(any(RegistrationRequest.class), any(RegistrationParameters.class))).thenReturn(                new RegistrationData(attestationObject, null, collectedClientData, null, clientExtensionOutputs, null));        MockHttpServletRequest mockHttpServletRequest = new MockHttpServletRequest();        mockHttpServletRequest.setScheme("https");        mockHttpServletRequest.setServerName("example.com");        mockHttpServletRequest.setServerPort(443);        String clientDataBase64 = "clientDataBase64";        String attestationObjectBase64 = "attestationObjectBase64";        Set<String> transports = Collections.emptySet();        String clientExtensionsJSON = "clientExtensionsJSON";        target.validate(mockHttpServletRequest, clientDataBase64, attestationObjectBase64, transports, clientExtensionsJSON);        ArgumentCaptor<RegistrationRequest> registrationRequestArgumentCaptor = ArgumentCaptor.forClass(RegistrationRequest.class);        ArgumentCaptor<RegistrationParameters> registrationParametersArgumentCaptor = ArgumentCaptor.forClass(RegistrationParameters.class);        verify(webAuthnManager).validate(registrationRequestArgumentCaptor.capture(), registrationParametersArgumentCaptor.capture());        RegistrationRequest registrationRequest = registrationRequestArgumentCaptor.getValue();        RegistrationParameters registrationParameters = registrationParametersArgumentCaptor.getValue();        assertThat(registrationRequest.getClientDataJSON()).isEqualTo(Base64UrlUtil.decode(clientDataBase64));        assertThat(registrationRequest.getAttestationObject()).isEqualTo(Base64UrlUtil.decode(attestationObjectBase64));        assertThat(registrationRequest.getClientExtensionsJSON()).isEqualTo(clientExtensionsJSON);        assertThat(registrationParameters.getServerProperty()).isEqualTo(serverProperty);    }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(0, strBuilder0.length());	      	      StrBuilder strBuilder1 = new StrBuilder();	      assertEquals(0, strBuilder1.length());	      	      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((-648), (-176), '2');	      assertEquals(0, strBuilder0.length());	      assertEquals(0, strBuilder2.length());	      	      StrBuilder strBuilder3 = strBuilder0.deleteFirst('2');	      assertEquals(0, strBuilder0.length());	      assertEquals(0, strBuilder3.length());	      	      StrBuilder strBuilder4 = strBuilder0.appendln((StringBuffer) null);	      assertEquals(1, strBuilder0.length());	      assertEquals(1, strBuilder4.length());	      	      String string0 = strBuilder0.toString();	      assertEquals(1, strBuilder0.length());	      	      StrBuilder strBuilder5 = strBuilder0.appendFixedWidthPadLeft((-700), 604, '1');	      assertEquals(605, strBuilder0.length());	      assertEquals(605, strBuilder5.length());	      	      StrBuilder strBuilder6 = strBuilder0.append(0);	      assertEquals(606, strBuilder0.length());	      assertEquals(606, strBuilder6.length());	      	      StrBuilder strBuilder7 = strBuilder6.appendAll((Iterable<?>) null);	      assertEquals(606, strBuilder0.length());	      assertEquals(606, strBuilder6.length());	      assertEquals(606, strBuilder7.length());	      	      String string1 = strBuilder4.rightString(0);	      assertEquals(606, strBuilder0.length());	      assertEquals(606, strBuilder4.length());	  }
@Test(timeout = 4000)	  public void testisNotIn()  throws Throwable  {	      CharRange charRange0 = CharRange.is('6');	      CharRange charRange1 = CharRange.isNotIn('&', '');	      boolean boolean0 = charRange1.contains(charRange0);	  }
@Test	public void testValidLoginUser(){		when(userRepository.findByEmailAndPassword(user.getEmail(), user.getPassword())).thenReturn(user);		assertEquals(user, userService.loginUser(user));	}
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      String string0 = StringUtils.chop("T");	      	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      charSequenceArray0[0] = (CharSequence) "T";	      charSequenceArray0[1] = (CharSequence) "T";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "T";	      charSequenceArray0[5] = (CharSequence) "T";	      charSequenceArray0[6] = (CharSequence) "";	      charSequenceArray0[7] = (CharSequence) "T";	      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);	      assertEquals(8, charSequenceArray0.length);	      	      String string1 = StringUtils.removePattern("", "");	      	      String string2 = StringUtils.substring((String) null, (-4035));	      	      String string3 = StringUtils.trim((String) null);	      	      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);	      assertEquals(8, charSequenceArray0.length);	      	      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);	      assertEquals(8, charSequenceArray0.length);	      	      String[] stringArray0 = new String[3];	      stringArray0[0] = "T";	      stringArray0[1] = "";	      stringArray0[2] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      assertEquals(3, stringArray0.length);	      assertEquals(3, stringArray1.length);	      	      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);	      assertEquals(8, charSequenceArray0.length);	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);	      assertEquals(8, charSequenceArray0.length);	      	      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");	      assertEquals(8, charSequenceArray0.length);	      	      // Undeclared exception!	      StringUtils.rightPad("Minimum abbreviation width with offset is 7", 32767, "=~%A6;?UjK");	  }
@Test(timeout = 4000)	  public void testgetDateTimeInstance()  throws Throwable  {	      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0);	      // Undeclared exception!	      try { 	        fastDateFormat0.format((Calendar) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);	      }	  }
@Test(timeout = 4000)	  public void testclose()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(101);	      	      StrBuilder[] strBuilderArray0 = new StrBuilder[7];	      strBuilderArray0[0] = strBuilder0;	      strBuilderArray0[1] = strBuilder0;	      strBuilderArray0[2] = strBuilder0;	      strBuilderArray0[3] = strBuilder0;	      strBuilderArray0[4] = strBuilder0;	      strBuilderArray0[5] = strBuilder0;	      strBuilderArray0[6] = strBuilder0;	      StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0);	      	      StrBuilder strBuilder2 = strBuilder0.setNewLineText("");	      	      int int0 = strBuilder0.capacity();	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      	      strBuilder_StrBuilderWriter0.close();	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      	      StrBuilder strBuilder3 = strBuilder0.appendln(true);	  }
@Test(timeout = 4000)	  public void testadd()  throws Throwable  {	      short[] shortArray0 = new short[6];	      // Undeclared exception!	      try { 	        ArrayUtils.add(shortArray0, (int) (short)8, (short)0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // Index: 8, Length: 6	         //	         verifyException("org.apache.commons.lang3.ArrayUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testrepeat()  throws Throwable  {	      String[] stringArray0 = StringUtils.split("{}", '');	      	      String string0 = StringUtils.deleteWhitespace("{}");	      	      boolean boolean0 = StringUtils.isAsciiPrintable("{}");	      	      String string1 = StringUtils.trimToEmpty("Minimum abbreviation width with offset is 7");	      	      boolean boolean1 = StringUtils.isBlank("{}");	      	      String[] stringArray1 = StringUtils.split("p{InCombiningDiacriticalMarks}+", "p{InCombiningDiacriticalMarks}+");	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "{}", (CharSequence) "Minimum abbreviation width with offset is 7");	      	      String string2 = StringUtils.chomp("Vk&zfkT%G?", "ANC_ZRi_!G%*zb*}00[");	      	      String string3 = StringUtils.replaceChars(".P12KH%T)16", '', '');	      	      String string4 = StringUtils.substringBefore("{}", "{}");	      	      String string5 = StringUtils.repeat("=QaM7(XY12j6+", 0);	      	      String string6 = StringUtils.center("Vk&zfkT%G?", (-365), "PT??=;[n7'S");	      	      String string7 = StringUtils.replaceChars("Minimum abbreviation width with offset is 7", "\"VIh+&E9[SAJY", "p{InCombiningDiacriticalMarks}+");	      	      String[] stringArray2 = StringUtils.splitByWholeSeparatorPreserveAllTokens("Vk&zfkT%G?", "Vk&zfkT%G?", 0);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) "{}");	      	      String[] stringArray3 = StringUtils.stripAll(stringArray0, ".P12KH%T)16");	      	      int int2 = StringUtils.lastIndexOf((CharSequence) "\"VIh+&E9[SAJY", (CharSequence) "Minimum abbreviation width with offset is 7", (-512));	      	      String string8 = StringUtils.mid("Vk&zfkT%G?", 17, (-1543));	      	      String string9 = StringUtils.stripToNull("qU");	      	      boolean boolean2 = StringUtils.containsAny((CharSequence) "qU", (CharSequence) "{}");	  }
@Test(timeout = 4000)	  public void testcompare()  throws Throwable  {	      Integer integer0 = Integer.valueOf(0);	      int int0 = ObjectUtils.compare(integer0, integer0);	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      MutableShort mutableShort0 = new MutableShort((short) (-1));	      Short short0 = mutableShort0.toShort();	      assertEquals("-1", mutableShort0.toString());	      	      mutableShort0.subtract((Number) short0);	  }
@Test public void testOnPause() {		// Arrange:		final BaseFragment fragment = new TestFragment();		fragment.onResume();		// Act:		fragment.onPause();		// Assert:		assertThat(fragment.isPaused(), is(true));		assertThat(fragment.isResumed(), is(false));	}
@Test    public void testWriteElement_NamespaceBindingToDefaultAndPrefix()                            throws Exception {        ByteArrayOutputStream writeIn = new ByteArrayOutputStream();        XMLStreamWriter writer = XMLOutputFactory.newInstance().createXMLStreamWriter( writeIn );        String xmlToWrite = "<test:me xmlns:test='http://deegree.org/test' xmlns='http://deegree.org/test' ><test:abc/></test:me>";        XMLStreamReader readFrom = createReader( xmlToWrite );        XMLAdapter.writeElement( writer, readFrom );        writer.close();        assertThatXmlIsReadable( writeIn );    }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder((String) null);	      assertTrue(strBuilder0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.appendSeparator((String) null, (String) null);	      assertTrue(strBuilder0.isEmpty());	      assertTrue(strBuilder1.isEmpty());	      	      StrBuilder strBuilder2 = strBuilder1.appendln(0.0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      int int0 = 556;	      // Undeclared exception!	      try { 	        strBuilder1.substring(821, 556);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // end < start	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void testStartOperation() throws WorkflowOperationException, SilenceDetectionFailedException,          NotFoundException, ServiceRegistryException, MediaPackageException, SmilException, MalformedURLException, JAXBException, SAXException, IOException {    Smil smil = smilService.fromXml(new File(smilURI)).getSmil();    Job job = EasyMock.createNiceMock(Job.class);    EasyMock.expect(job.getPayload()).andReturn(smil.toXML()).anyTimes();    EasyMock.expect(job.getStatus()).andReturn(Job.Status.FINISHED);    EasyMock.expect(silenceDetectionServiceMock.detect(            (Track) EasyMock.anyObject(),            (Track[]) EasyMock.anyObject()))            .andReturn(job);    EasyMock.expect(workspaceMock.put(            (String) EasyMock.anyObject(),            (String) EasyMock.anyObject(),            (String) EasyMock.anyObject(),            (InputStream) EasyMock.anyObject()))            .andReturn(smilURI);    ServiceRegistry serviceRegistry = EasyMock.createNiceMock(ServiceRegistry.class);    silenceDetectionOperationHandler.setServiceRegistry(serviceRegistry);    EasyMock.expect(serviceRegistry.getJob(EasyMock.anyLong())).andReturn(job);    EasyMock.replay(job, serviceRegistry, silenceDetectionServiceMock, workspaceMock);    WorkflowInstanceImpl workflowInstance = getWorkflowInstance(mp, getDefaultConfiguration());    WorkflowOperationResult result = silenceDetectionOperationHandler.start(workflowInstance, null);    Assert.assertNotNull("SilenceDetectionWorkflowOperationHandler workflow operation returns null "            + "but should be an instantiated WorkflowOperationResult", result);    EasyMock.verify(silenceDetectionServiceMock, workspaceMock);    WorkflowOperationInstance worflowOperationInstance = workflowInstance.getCurrentOperation();    String smilFlavorSubtypeProperty = worflowOperationInstance.getConfiguration("smil-flavor-subtype");    // test media package contains new smil catalog    MediaPackageElementFlavor smilPartialFlavor = new MediaPackageElementFlavor("*", smilFlavorSubtypeProperty);    Catalog[] smilCatalogs = mp.getCatalogs(smilPartialFlavor);    Assert.assertTrue("Media package should contain a smil catalog",            smilCatalogs != null && smilCatalogs.length > 0);  }
@Test(timeout = 4000)	  public void testappendSuper()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte)0, (byte)0);	      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();	      EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) null, (Collection<String>) linkedHashSet0);	      EqualsBuilder equalsBuilder2 = equalsBuilder0.append(true, true);	      	      Class<Integer> class0 = Integer.class;	      String[] stringArray0 = new String[3];	      stringArray0[0] = "";	      equalsBuilder0.append((byte) (-1), (byte)2);	      stringArray0[1] = "The Array must not be null";	      stringArray0[2] = "Q@a+w^PT*i";	      EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0);	      Boolean boolean0 = Boolean.FALSE;	      EqualsBuilder.getRegisterPair(boolean0, class0);	      Boolean boolean1 = equalsBuilder2.build();	      float[] floatArray0 = new float[4];	      floatArray0[0] = (float) (byte) (-1);	      floatArray0[1] = (float) (byte)2;	      floatArray0[2] = (float) (byte) (-1);	      floatArray0[3] = (float) (byte) (-1);	      EqualsBuilder equalsBuilder3 = equalsBuilder1.append(floatArray0, floatArray0);	      EqualsBuilder.getRegisterPair("", equalsBuilder3);	      EqualsBuilder.reflectionEquals((Object) "Unexpected IllegalAccessException", (Object) boolean1, stringArray0);	      equalsBuilder1.appendSuper(true);	  }
@Test    public void parseRing()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        GMLStreamReader gmlReader = getParser( "Ring.gml" );        XMLStreamReader xmlReader = gmlReader.getXMLReader();        Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Ring" ), xmlReader.getName() );        Ring ring = (Ring) gmlReader.readGeometry();        Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Ring" ), xmlReader.getName() );        Assert.assertEquals( 2, ring.getMembers().size() );        Assert.assertEquals( 2, ring.getMembers().get( 0 ).getCurveSegments().size() );        Assert.assertTrue( ring.getMembers().get( 0 ).getCurveSegments().get( 0 ) instanceof Arc );        Assert.assertTrue( ring.getMembers().get( 0 ).getCurveSegments().get( 1 ) instanceof Arc );        Assert.assertEquals( 1, ring.getMembers().get( 1 ).getCurveSegments().size() );        Assert.assertTrue( ring.getMembers().get( 1 ).getCurveSegments().get( 0 ) instanceof LineStringSegment );    }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh");	      	      boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh");	      	      StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10);	      StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3');	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh";	      charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	      	      StringUtils.overlay("org.apache.commons.lang3.StringUtils", "s", 13, 13);	      StringUtils.right("", 0);	      String string1 = StringUtils.repeat(".ti')kKzb5J(cbBlh", 13);	      	      String string2 = StringUtils.chop("org.apache.cosmmons.lang3.StringUtils");	      	      StringUtils.lastIndexOfAny("org.apache.commons.lang3.StringUtils", charSequenceArray0);	      StringUtils.lowerCase("s");	      String string3 = StringUtils.overlay("org.apache.cosmmons.lang3.StringUtil", "{}", 13, 0);	      	      String[] stringArray0 = new String[9];	      stringArray0[0] = ".ti')kKzb5J(cbBlh";	      stringArray0[1] = "s";	      stringArray0[2] = "org.apache.cosmmons.lang3.StringUtils";	      stringArray0[3] = "s";	      stringArray0[4] = "s";	      stringArray0[5] = "{}";	      stringArray0[6] = "{}";	      stringArray0[7] = "";	      stringArray0[8] = ".ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh.ti')kKzb5J(cbBlh";	      String string4 = StringUtils.getCommonPrefix(stringArray0);	      	      String string5 = StringUtils.difference("org.apache.commons.lang3.exception.CloneFailedException", "Kby.&&D(~k)>=");	      	      StringUtils.join((Object[]) stringArray0, 'p', 1114, (-1));	      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) "org.apache.cosmmons.lang3.StringUtils", (CharSequence) "", (-3630));	  }
@Test    public void errorTest00() {        try {            final List<String> result = new ArrayList<>();            new RangeExpressionParser("[\\\\,\\[\\],\\],\\,,\\.,\\s]").visit(new RangeExpressionItemVisitor() {                @Override                public void visit(Object val) {                    result.add((String) val);                }            });            throw new Error();        } catch (RuntimeException e) {        }    }
@Test  public void testStoreMapping() throws Exception {    StoragePath path = new StoragePath(ORG, MP_ID, new VersionImpl(1L), ASSET1_ID);    database.storeMapping(path, "archive_path/" + ASSET1_ID, AWS_VERSION_1);    AwsAssetMapping mapping = database.findMapping(path);    Assert.assertNotNull(mapping);    Assert.assertEquals("archive_path/" + ASSET1_ID, mapping.getObjectKey());    Assert.assertEquals(AWS_VERSION_1, mapping.getObjectVersion());    Assert.assertNull(mapping.getDeletionDate());  }
@Test(timeout = 4000)	  public void testtruncatedEquals()  throws Throwable  {	      // Undeclared exception!	      try { 	        DateUtils.truncatedEquals((Calendar) null, (Calendar) null, 0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The date must not be null	         //	         verifyException("org.apache.commons.lang3.time.DateUtils", e);	      }	  }
@Test    public void givenShakingThreshold$setShakingThresholdForAndroid_whenQuery_thenShouldCallNativeApiWithShakingThreshold() {        // given        PowerMockito.mockStatic(BugReporting.class);        int shakingThreshold = 30;        // when        bugReportingModule.setShakingThresholdForAndroid(shakingThreshold);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        BugReporting.setShakingThreshold(shakingThreshold);    }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("UQ&ZFv0Je_(b+/.");	      strTokenizer0.setQuoteChar('e');	      char[] charArray0 = new char[5];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      charArray0[3] = 'e';	      charArray0[4] = 'e';	      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);	      boolean boolean0 = strTokenizer1.hasPrevious();	  }
@Test    public void threeCo() {        Assert.assertEquals((RxComprehensions.doCompose(zero(0), intIncrementToString(), stringToInt(), intIncrementToString()).blockingFirst()), "2");    }
@Test(timeout = 4000)	  public void testis()  throws Throwable  {	      CharRange charRange0 = CharRange.isIn('&', 'L');	      CharRange charRange1 = CharRange.is('&');	      boolean boolean0 = charRange1.equals(charRange0);	      assertFalse(charRange1.isNegated());	  }
@Test    public void parseSolid()                            throws XMLStreamException, FactoryConfigurationError, IOException, UnknownCRSException {        GMLStreamReader gmlReader = getParser( "Solid.gml" );        XMLStreamReader xmlReader = gmlReader.getXMLReader();        Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Solid" ), xmlReader.getName() );        Solid solid = (Solid) gmlReader.readGeometry();        Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() );        Assert.assertEquals( new QName( "http://www.opengis.net/gml", "Solid" ), xmlReader.getName() );        Assert.assertEquals( SolidType.Solid, solid.getSolidType() );        Assert.assertEquals( CRSManager.lookup( "EPSG:31466" ), solid.getCoordinateSystem() );        Assert.assertEquals( 8, solid.getExteriorSurface().getPatches().size() );        Assert.assertEquals( 2568786.096,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getStartPoint().get0(),                             DELTA );        Assert.assertEquals( 5662881.386,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getStartPoint().get1(),                             DELTA );        Assert.assertEquals( 60.3842642785516,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getStartPoint().get2(),                             DELTA );        Assert.assertEquals( 2568786.096,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getEndPoint().get0(),                             DELTA );        Assert.assertEquals( 5662881.386,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getEndPoint().get1(),                             DELTA );        Assert.assertEquals( 60.3842642785516,                             ( (PolygonPatch) solid.getExteriorSurface().getPatches().get( 7 ) ).getExteriorRing().getEndPoint().get2(),                             DELTA );    }
@Test(timeout = 4000)	  public void testdifference()  throws Throwable  {	      String string0 = StringUtils.stripToEmpty((String) null);	      	      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 114);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));	      	      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 1124);	      	      String[] stringArray0 = StringUtils.split("\n", 'e');	      	      String string1 = StringUtils.removeStart("", "}%");	      	      String string2 = StringUtils.defaultIfBlank("", "3::s0DFSZzQA>V_CN");	      	      String string3 = StringUtils.prependIfMissing("", (CharSequence) null, stringArray0);	      	      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");	      	      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator(string4, (String) null, (-1));	      	      String string5 = StringUtils.right("", (-240));	      	      String string6 = StringUtils.difference("", "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, "");	      	      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");	      	      char[] charArray0 = new char[2];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);	      	      short[] shortArray0 = new short[8];	      shortArray0[0] = (short) (-700);	      shortArray0[1] = (short)2431;	      shortArray0[2] = (short)336;	      shortArray0[0] = (short) (-1905);	      shortArray0[4] = (short)2;	      shortArray0[5] = (short)16;	      shortArray0[6] = (short)0;	      shortArray0[7] = (short) (-2743);	      String string8 = StringUtils.join(shortArray0, ')');	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      float[] floatArray0 = new float[5];	      CompareToBuilder compareToBuilder1 = compareToBuilder0.append((float[]) null, floatArray0);	      compareToBuilder1.append(0.0, 2621.8501657804);	  }
@Test    public void givenArgs$getUserAttribute_whenQuery_thenShouldCallNativeApiAndInvokeCallback() {        // given        PowerMockito.mockStatic(Instabug.class);        Callback callback = mock(Callback.class);        // when        String key = "company";        String value = "Instabug";        PowerMockito.when(Instabug.getUserAttribute(key)).thenReturn(value);        rnModule.getUserAttribute(key, callback);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Instabug.getUserAttribute(key);        verify(callback).invoke(value);    }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String[] stringArray0 = StringUtils.splitByWholeSeparator("'U TLe$1Bk", "");	      	      boolean boolean0 = StringUtils.isAlphanumericSpace("");	      	      Locale locale0 = Locale.JAPAN;	      	      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();	      	      Vector<String> vector1 = new Vector<String>();	      	      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1);	      	      String string0 = StringUtils.upperCase("", locale0);	      	      Vector<Object> vector2 = new Vector<Object>(10, 10);	      	      String string1 = StringUtils.join((Iterable<?>) vector2, 'o');	      assertTrue(string1.equals((Object)string0));	      	      String[] stringArray1 = StringUtils.split("'U TLe$1Bk", "", 0);	      assertFalse(stringArray1.equals((Object)stringArray0));	  }
@Test  public void testBrokenEncodingOptions() throws Exception {    URI animation = getClass().getResource("/synfig-test-animation.sif").toURI();    Map<String, String> metadata = new HashMap<>();    List<String> options = new ArrayList<>(0);    options.add("-t");    options.add("santa-claus");    Job job = null;    try {      job = animateService.animate(animation, metadata, options);      logger.error("The test should have never reached this.");    } catch (Exception e) {      // we expect this    }    Assert.assertNull(job);  }
@Test   public void testComparingOrder() throws Exception   {      TimeUnitComparator comparator = new TimeUnitComparator();      assertEquals(-1, comparator.compare(new Hour(), new Day()));   }
@Test(timeout = 4000)	  public void testgetUserDir()  throws Throwable  {	      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/sepehr/d4j-test-generation/Lang1b");	      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);	      File file0 = SystemUtils.getUserDir();	  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(0, strBuilder0.size());	      	      StrBuilder strBuilder1 = strBuilder0.appendln(true);	      assertEquals(5, strBuilder0.size());	      assertEquals(5, strBuilder1.size());	      	      char[] charArray0 = new char[4];	      charArray0[0] = '^';	      charArray0[1] = '?';	      charArray0[2] = 'U';	      charArray0[3] = '4';	      StrBuilder strBuilder2 = strBuilder1.insert(2, charArray0);	      assertEquals(9, strBuilder0.size());	      assertEquals(9, strBuilder1.size());	      assertEquals(9, strBuilder2.size());	      	      StrBuilder strBuilder3 = strBuilder0.appendln((-3134.9556F));	      assertEquals(20, strBuilder0.size());	      assertEquals(20, strBuilder3.size());	      	      String string0 = null;	      StrBuilder strBuilder4 = strBuilder3.insert(0, (String) null);	      assertEquals(20, strBuilder0.size());	      assertEquals(20, strBuilder3.size());	      assertEquals(20, strBuilder4.size());	      	      Writer writer0 = strBuilder4.asWriter();	      assertEquals(20, strBuilder0.size());	      assertEquals(20, strBuilder3.size());	      assertEquals(20, strBuilder4.size());	      	      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();	      	      StrBuilder strBuilder5 = strBuilder0.deleteAll(strMatcher0);	      assertEquals(20, strBuilder0.size());	      assertEquals(20, strBuilder5.size());	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher(':');	      	      int int0 = strBuilder0.lastIndexOf("vSi.a.bur[", 3954);	      assertEquals(20, strBuilder0.size());	      	      char[] charArray1 = new char[0];	      	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher(charArray1);	      	      StrBuilder strBuilder6 = strBuilder5.trim();	      assertEquals(19, strBuilder0.size());	      assertEquals(19, strBuilder6.size());	      assertEquals(19, strBuilder5.size());	      	      int int1 = 6;	      StrBuilder strBuilder7 = strBuilder5.append(6);	      assertEquals(20, strBuilder0.size());	      assertEquals(20, strBuilder7.size());	      assertEquals(20, strBuilder5.size());	      	      // Undeclared exception!	      try { 	        strMatcher0.isMatch(charArray1, 3954);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	      }	  }
@Ignore("Requires access to referenced schema")    @Test    public void testWriteSoapWmsExtendedCapabilites_SchemaValid()                            throws Exception {        Wms130SoapExtendedCapabilitesWriter writer = new Wms130SoapExtendedCapabilitesWriter();        ByteArrayOutputStream stream = new ByteArrayOutputStream();        XMLStreamWriter streamWriter = XMLOutputFactory.newInstance().createXMLStreamWriter( stream );        SupportedEncodings supportedEncodings = mockSupportedEncodings();        writer.writeSoapWmsExtendedCapabilites( streamWriter, "http://post.url/soap", supportedEncodings );        streamWriter.close();        assertThat( xml( stream.toString() ), XmlMatchers.conformsTo( schema() ) );    }
@Test(timeout = 4000)	  public void testappendln()  throws Throwable  {	      String string0 = "org.apache.commons.lang3.text.StrBuilder";	      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");	      	      StrBuilder[] strBuilderArray0 = new StrBuilder[0];	      StrBuilder strBuilder1 = strBuilder0.appendAll(strBuilderArray0);	      	      char char0 = '2';	      StrBuilder strBuilder2 = strBuilder0.appendSeparator('2');	      	      StringBuilder stringBuilder0 = strBuilder2.toStringBuilder();	      	      StringWriter stringWriter0 = new StringWriter();	      	      StringBuffer stringBuffer0 = stringWriter0.getBuffer();	      	      StrBuilder strBuilder3 = strBuilder0.append(stringBuffer0);	      	      strBuilder0.hashCode();	      	      StrBuilder strBuilder4 = strBuilder1.appendln("org.apache.commons.lang3.text.StrBuilder", (Object[]) strBuilderArray0);	      	      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870);	      	      char char1 = '';	      int int1 = 0;	      int int2 = strBuilder1.lastIndexOf('', 0);	      	      // Undeclared exception!	      try { 	        strBuilder4.insert(108, (long) 41);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 108	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      int int0 = 0;	      StrBuilder strBuilder0 = new StrBuilder(0);	      assertNull(strBuilder0.getNullText());	      	      StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V");	      	      StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0);	      assertNull(strBuilder0.getNullText());	      	      Locale.Category locale_Category0 = Locale.Category.DISPLAY;	      Locale.Category locale_Category1 = Locale.Category.FORMAT;	      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);	      	      Iterator<Locale.Category> iterator0 = enumSet0.iterator();	      	      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      String string0 = "";	      // Undeclared exception!	      try { 	        strBuilder1.insert((-1), "");	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void observe_message() {        Assert.assertEquals(OBSERVE, decoder.decode(ByteBufferDumper.fromHexString(OBSERVE_HEX), null));    }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      String[] stringArray0 = new String[9];	      stringArray0[0] = "";	      stringArray0[1] = "Index: ";	      stringArray0[2] = "t=$]1l^E";	      stringArray0[3] = "R";	      stringArray0[4] = "3 pZ(|hk3o";	      stringArray0[5] = "";	      String string0 = "\\u000";	      stringArray0[6] = string0;	      stringArray0[7] = "V'4=.E,,{";	      stringArray0[8] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3 pZ(|hk3o", (CharSequence) "");	      	      String string1 = StringUtils.replaceOnce("VQ_N6", "", "z/c");	      	      String string2 = StringUtils.overlay("", "", 2521, 0);	      	      boolean boolean0 = StringUtils.startsWithAny("V'4=.E,,{", stringArray1);	      	      String[] stringArray2 = StringUtils.splitByCharacterType(stringArray0[6]);	      	      String string3 = StringUtils.abbreviateMiddle("!*", "#JFYM}vU \"],4Y", 1448);	      	      String string4 = StringUtils.leftPad("!*", 2521, 'X');	      	      double[] doubleArray0 = new double[3];	      doubleArray0[0] = (double) 0;	      doubleArray0[1] = (double) 2521;	      doubleArray0[2] = (double) 'X';	      String string5 = StringUtils.join(doubleArray0, 'X');	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e");	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      int int0 = strBuilder_StrBuilderReader0.read();	      	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/');	      	      StrMatcher strMatcher0 = StrMatcher.tabMatcher();	      	      StrBuilder strBuilder2 = strBuilder1.append((long) (-963));	      	      StrBuilder strBuilder3 = strBuilder1.deleteAll(strMatcher0);	      	      char[] charArray0 = new char[2];	      charArray0[0] = '/';	      charArray0[1] = '/';	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      	      int int1 = strBuilder_StrBuilderReader0.read(charBuffer0);	      	      strBuilder_StrBuilderReader0.close();	      	      StrBuilder strBuilder4 = strBuilder1.append((long) 104);	      	      StrBuilder strBuilder5 = strBuilder4.ensureCapacity(104);	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      	      List<String> list0 = strBuilder_StrBuilderTokenizer0.tokenize(charArray0, (-963), (-3316));	      	      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "Windows NT");	      	      char[] charArray1 = new char[2];	      assertFalse(charArray1.equals((Object)charArray0));	      	      charArray1[0] = '/';	      charArray1[1] = '/';	      StrBuilder strBuilder7 = strBuilder0.appendln(charArray1);	      assertFalse(charArray1.equals((Object)charArray0));	      	      StrBuilder strBuilder8 = strBuilder4.appendAll((Iterable<?>) list0);	      assertFalse(charArray0.equals((Object)charArray1));	      	      StrBuilder strBuilder9 = strBuilder3.appendAll((Iterator<?>) strBuilder_StrBuilderTokenizer0);	      	      // Undeclared exception!	      try { 	        strBuilder0.appendln("hZ3CNnc|]e", 101, 97);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void twoCM() {        Assert.assertEquals(RxComprehensions.doConcatMap(zero(2), one(true), two("result")).toBlocking().first(), "result");    }
@Test(timeout = 4000)	  public void testremoveStart()  throws Throwable  {	      String string0 = StringUtils.remove((String) null, 'Y');	      	      String string1 = StringUtils.removeStartIgnoreCase((String) null, "', is neither of type Map.Entry nor an Array");	  }
@Test(timeout = 4000)	  public void testsubstring()  throws Throwable  {	      String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "Threshold must not be negative");	      	      String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ");	      	      String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw");	      	      String[] stringArray0 = new String[6];	      stringArray0[0] = "p{InCombiningDiacriticalMarks}+";	      stringArray0[1] = "~@!LXZ6YxCtw";	      stringArray0[2] = "null comparator";	      stringArray0[3] = "Threshold must not be negative";	      stringArray0[4] = "";	      stringArray0[5] = "~@!LXZ6YxCtw";	      String string3 = StringUtils.replaceEach((String) null, stringArray0, stringArray0);	      	      boolean boolean0 = StringUtils.isAlphanumericSpace((CharSequence) null);	      	      boolean boolean1 = StringUtils.isBlank("~@!LXZ6YxCtw");	  }
@Test	public void testInvalidGetReviewByPlace(){		when(repository.findReviewsByPlace(review.getPlace())).thenReturn(reviews);		when(repository.findReviewsByPlace(review2.getPlace())).thenReturn(reviews);		assertEquals(service.getReviewsByPlace(review2.getPlace()), service.getReviewsByPlace(review.getPlace()));	}
@Test    public void sixCo() throws Exception {        Assert.assertEquals((long)RxComprehensions.doCompose(zero(0), intIncrementToString(), stringToInt(), intIncrementToString(), stringToInt(), intIncrementToString(), stringToInt()).toBlocking().first(), 3);    }
@Test    public void testIsAdjacent() {        GraphStore graphStore = GraphGenerator.generateSmallGraphStore();        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view = store.createView();        addSomeElements(graphStore, view);        DirectedSubgraph graph = store.getDirectedGraph(view);        for (Edge e : graphStore.getEdges()) {            if (graph.contains(e)) {                Assert.assertTrue(graph.isAdjacent(e.getSource(), e.getTarget()));            } else if (graph.contains(e.getSource()) && graph.contains(e.getTarget())) {                Assert.assertFalse(graph.isAdjacent(e.getSource(), e.getTarget()));            }        }        graph.clearEdges();        Node[] nodes = graph.getNodes().toArray();        Assert.assertFalse(graph.isAdjacent(nodes[0], nodes[1]));    }
@Test public void testTransaction() {		// Arrange:		final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		// Act + Assert:		assertThat(request.transaction(FragmentRequest.REMOVE), is(request));		assertThat(request.transaction(), is(FragmentRequest.REMOVE));	}
@Test(timeout = 4000)	  public void testnotBlank()  throws Throwable  {	      CharBuffer charBuffer0 = CharBuffer.allocate(0);	      // Undeclared exception!	      try { 	        Validate.notBlank((CharSequence) charBuffer0, (String) null, (Object[]) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	      }	  }
@Test(timeout = 4000)	  public void testgetNanoTime()  throws Throwable  {	      StopWatch stopWatch0 = new StopWatch();	      stopWatch0.start();	      System.setCurrentTimeMillis(1057L);	      stopWatch0.stop();	      long long0 = stopWatch0.getNanoTime();	  }
@Test(timeout = 4000)	  public void testvalidIndex()  throws Throwable  {	      ClientInfoStatus[] clientInfoStatusArray0 = new ClientInfoStatus[7];	      ClientInfoStatus clientInfoStatus0 = ClientInfoStatus.REASON_VALUE_TRUNCATED;	      clientInfoStatusArray0[0] = clientInfoStatus0;	      // Undeclared exception!	      try { 	        Validate.validIndex(clientInfoStatusArray0, 2508, "The validated array index is invalid: %d", (Object[]) clientInfoStatusArray0);	        fail("Expecting exception: IllegalFormatConversionException");	      	      } catch(IllegalFormatConversionException e) {	         //	         // d != java.sql.ClientInfoStatus	         //	         verifyException("java.util.Formatter$FormatSpecifier", e);	      }	  }
@Test    public void test200Example5()                            throws Exception {        GetFeature request = parse( "wfs200/example5.kvp" );        assertEquals( VERSION_200, request.getVersion() );        assertNull( request.getPresentationParams().getOutputFormat() );        assertNull( request.getPresentationParams().getCount() );        assertNull( request.getPresentationParams().getResultType() );        assertNull( request.getPresentationParams().getStartIndex() );        assertNull( request.getResolveParams().getDepth() );        assertNull( request.getResolveParams().getMode() );        assertNull( request.getResolveParams().getTimeout() );        assertEquals( 1, request.getQueries().size() );        BBoxQuery query = (BBoxQuery) request.getQueries().get( 0 );        assertNull( query.getFeatureVersion() );        assertNull( query.getHandle() );        assertEquals( 0, query.getProjectionClauses().length );        assertEquals( 0, query.getSortBy().length );        assertNull( query.getSrsName() );        assertEquals( 1, query.getTypeNames().length );        assertEquals( QName.valueOf( "InWaterA_1M" ), query.getTypeNames()[0].getFeatureTypeName() );        assertNull( query.getTypeNames()[0].getAlias() );        assertEquals( null, query.getBBox().getCoordinateSystem() );        assertEquals( 18.54, query.getBBox().getMin().get0(), 0.0000001 );        assertEquals( -72.3544, query.getBBox().getMin().get1(), 0.0000001 );        assertEquals( 18.62, query.getBBox().getMax().get0(), 0.0000001 );        assertEquals( -72.2564, query.getBBox().getMax().get1(), 0.0000001 );    }
@Test(timeout = 4000)	  public void testand()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[17];	      boolean boolean0 = BooleanUtils.and(booleanArray0);	  }
@Test(timeout = 4000)	  public void testgetChars()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");	      	      StrBuilder strBuilder1 = strBuilder0.appendPadding(0, 'P');	      	      char[] charArray0 = new char[3];	      charArray0[0] = 'P';	      charArray0[1] = 'P';	      charArray0[2] = 'P';	      char[] charArray1 = strBuilder1.getChars(charArray0);	      	      StringBuffer stringBuffer0 = new StringBuffer(0);	      	      // Undeclared exception!	      try { 	        strBuilder1.appendln(stringBuffer0, 619, 619);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testmid()  throws Throwable  {	      String string0 = StringUtils.rightPad((String) null, 1337);	      	      String string1 = StringUtils.chomp("", (String) null);	      	      String string2 = StringUtils.stripEnd("", (String) null);	      	      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");	      	      int[] intArray0 = new int[5];	      intArray0[0] = 1337;	      intArray0[1] = 1337;	      intArray0[2] = 1337;	      intArray0[3] = 1337;	      intArray0[4] = 1337;	      String string3 = StringUtils.join(intArray0, '?');	      	      boolean boolean2 = StringUtils.isAllLowerCase("1337?1337?1337?1337?1337");	      	      String string4 = StringUtils.substring("", 1337, 1337);	      	      String string5 = StringUtils.mid("7>", 0, 4430);	      	      String[] stringArray1 = StringUtils.split("I`7=)^j");	      	      int[] intArray1 = new int[2];	      	      intArray1[0] = 0;	      intArray1[1] = 0;	      String string6 = StringUtils.join(intArray1, 'V');	  }
@Test public void testGetAnnotatedClass() {	    // Arrange:	    final TestHandler handler = new TestHandler(Fragment.class);	    // Act + Assert:		assertSame(handler.getAnnotatedClass(), Fragment.class);	}
@Test(timeout = 4000)	  public void testhasPrevious()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/.");	      strTokenizer0.setQuoteChar('e');	      char[] charArray0 = new char[10];	      charArray0[2] = 'e';	      charArray0[3] = 'e';	      StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0);	      boolean boolean0 = strTokenizer1.hasPrevious();	  }
@Test(timeout = 4000)	  public void testappendln()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(79);	      	      StrBuilder strBuilder1 = strBuilder0.append(0.0F);	      	      StrBuilder strBuilder2 = strBuilder0.append((double) 79);	      	      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));	      	      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);	      	      StrBuilder strBuilder5 = strBuilder4.deleteAll('o');	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      	      int int0 = 2;	      StrBuilder strBuilder6 = strBuilder0.append((CharSequence) strBuilder1);	      	      StrBuilder strBuilder7 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");	      	      // Undeclared exception!	      try { 	        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // length must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      String string0 = "Gqi";	      DurationFormatUtils.lexx("Gqi");	      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();	      DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(mockGregorianCalendar0, 2835);	      durationFormatUtils_Token0.increment();	      durationFormatUtils_Token0.toString();	      String string1 = durationFormatUtils_Token0.toString();	      long long0 = 0L;	      DurationFormatUtils.formatDurationHMS(0L);	      int int0 = 0;	      int int1 = (-1);	      mockGregorianCalendar0.set(13, 13, 2835, 0, (-1));	      DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils();	      // Undeclared exception!	      DurationFormatUtils.formatDuration((long) 2835, string1);	  }
@Test	public void testCreateBlockWithEmptyQueueWithException() throws FailedVerificationException {		testRemoveAllQueueOperationsIfQueueNotEmpty();		exceptionRule.expect(BlockchainValidationException.class);		blc.createBlock(serverName, serverKeyPair);	}
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      int int0 = (-1994);	      StrBuilder strBuilder0 = new StrBuilder((-1994));	      assertEquals(0, strBuilder0.length());	      	      StrBuilder strBuilder1 = strBuilder0.appendln("");	      assertEquals(1, strBuilder0.length());	      assertEquals(1, strBuilder1.length());	      	      int int1 = (-2242);	      int int2 = 5;	      strBuilder1.size = 5;	      assertEquals(5, strBuilder0.length());	      assertEquals(5, strBuilder1.length());	      	      strBuilder1.size = (-2242);	      assertEquals((-2242), strBuilder0.length());	      assertEquals((-2242), strBuilder1.length());	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertEquals((-2242), strBuilder0.length());	      	      boolean boolean0 = strBuilder_StrBuilderReader0.ready();	      assertEquals((-2242), strBuilder0.length());	      	      int int3 = 20;	      // Undeclared exception!	      try { 	        strBuilder1.replace((-2242), 20, "java.compiler");	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -2242	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test  public void testDecodeTemporal() {    Temporal.Match<Integer> match = new Temporal.Match<Integer>() {      @Override      public Integer period(DCMIPeriod period) {        return 1;  }      @Override      public Integer instant(Date instant) {        return 2;      }      @Override      public Integer duration(long duration) {        return 3;      }    };    Temporal.Match<Long> durationMatch = new Temporal.Match<Long>() {      @Override      public Long period(DCMIPeriod period) {        throw new RuntimeException();      }      @Override      public Long instant(Date instant) {        throw new RuntimeException();      }      @Override      public Long duration(long duration) {        return duration;      }    };    assertSame(1, decodeTemporal(DublinCoreValue.mk("start=2008-10-01; end=2009-01-01;")).fold(match));    assertSame(2, decodeTemporal(DublinCoreValue.mk("2008-10-01")).fold(match));    assertSame(2, decodeTemporal(DublinCoreValue.mk("2008-10-01T10:30:05Z")).fold(match));    assertSame(1, decodeTemporal(DublinCoreValue.mk("start=2008-10-01T10:20Z; end=2009-01-01; scheme=W3C-DTF")).fold(match));    assertSame(3, decodeTemporal(DublinCoreValue.mk("PT10H5M")).fold(match));    assertEquals(10L * 60 * 60 * 1000 + 5 * 60 * 1000,            (long) decodeTemporal(DublinCoreValue.mk("PT10H5M")).fold(durationMatch));    assertEquals(10L * 60 * 60 * 1000 + 5 * 60 * 1000 + 28 * 1000,            (long) decodeTemporal(DublinCoreValue.mk("PT10H5M28S")).fold(durationMatch));  }
@Test    public void testDestroy() {        ColumnStore<Node> columnStore = generateEmptyNodeStore();        IndexImpl<Node> index = columnStore.indexStore.mainIndex;        ColumnImpl col = new ColumnImpl("1", String.class, "1", null, Origin.DATA, true, false);        col.setStoreId(0);        index.addColumn(col);        index.destroy();        Assert.assertEquals(index.size(), 0);        Assert.assertNull(index.getIndex(col));    }
@Test(timeout = 4000)	  public void testescapeJson()  throws Throwable  {	      String string0 = StringEscapeUtils.escapeJson("+?<yD%*Y<8,_>0%/vc");	  }
@Test(timeout = 4000)	  public void testshortValue()  throws Throwable  {	      MutableShort mutableShort0 = new MutableShort((short) (-1));	      Short short0 = mutableShort0.toShort();	      	      mutableShort0.subtract((Number) short0);	      assertEquals((short)0, mutableShort0.shortValue());	  }
@Test(timeout = 4000)	  public void testsubstringBeforeLast()  throws Throwable  {	      String[] stringArray0 = StringUtils.stripAll((String[]) null, "TT");	      	      String string0 = StringUtils.substringAfter("TT", "TT");	      	      char[] charArray0 = new char[1];	      charArray0[0] = 'E';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);	      	      String string1 = StringUtils.substringBeforeLast("", "");	      	      String string2 = StringUtils.repeat("", 116);	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens("");	      	      String string3 = StringUtils.removePattern("", "");	      	      String string4 = StringUtils.stripStart("pG$0h;W-R>", "TT");W-R>", string4);	      	      String[] stringArray2 = StringUtils.splitPreserveAllTokens("", ",FQU3=\"q$yCb$a\"_=Cm", 122);	      	      String[] stringArray3 = StringUtils.substringsBetween("LS", "Cannot store ", "xQD3IhI");	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "pG$0h;W-R>");	      	      boolean boolean1 = StringUtils.containsOnly((CharSequence) "LS", charArray0);	      	      boolean boolean2 = StringUtils.isNumeric("xQD3IhI");	      	      int int1 = StringUtils.indexOfAnyBut((CharSequence) ",FQU3=\"q$yCb$a\"_=Cm", (CharSequence) "");	      	      boolean boolean3 = StringUtils.isAllUpperCase("");	      	      CharSequence[] charSequenceArray0 = new CharSequence[4];	      String string5 = StringUtils.reverseDelimited("", ']');	      	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "xQD3IhI";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "pG$0h;W-R>";	      int int2 = StringUtils.lastIndexOfAny("pG$0h;W-R>", charSequenceArray0);	      	      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) "");	      	      boolean boolean4 = StringUtils.isWhitespace("TT");	  }
@Test(timeout = 4000)	  public void testsubstring()  throws Throwable  {	      String string0 = StringUtils.remove("Q`c14Ks-S", '#');	      	      String string1 = StringUtils.substringAfterLast("Q`c14Ks-S", " is not in the range '0' - '9'");	      	      boolean boolean0 = StringUtils.startsWith("", "");	      	      String string2 = StringUtils.trimToEmpty("");	      	      boolean boolean1 = StringUtils.endsWith("", "Q`c14Ks-S");	      	      String string3 = StringUtils.replaceOnce("Q`c14Ks-S", "Q`c14Ks-S", "");	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");	      	      String string4 = StringUtils.replaceChars("", 'K', '#');	  }
@Test(expected = XMLParsingException.class)    public void parsePropertyIsLessThanOrEuqlToWithLiteralContainingUnexpectedGeometry()                            throws Exception {        InputStream filterAsStream = this.getClass().getResourceAsStream( "v200/unexectedTestfilter.xml" );        XMLStreamReader xmlStream = XMLInputFactory.newInstance().createXMLStreamReader( filterAsStream );        XMLStreamUtils.skipStartDocument( xmlStream );        Filter200XMLDecoder.parse( xmlStream );    }
@Test  public void testGetJobType() throws Exception {    assertEquals("simple", job.getJobType());  }
@Test(timeout = 4000)	  public void testindexOfDifference()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      String string0 = StringUtils.mid("-", (-385), (-385));	      	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[5] = (CharSequence) "|qO{l0uUU|R8lUrfn";	      long[] longArray0 = new long[9];	      longArray0[0] = (long) (-385);	      longArray0[1] = (long) (-385);	      longArray0[2] = (long) (-385);	      longArray0[3] = (long) (-385);	      longArray0[4] = 3213L;	      longArray0[5] = (long) (-385);	      longArray0[6] = (long) (-385);	      longArray0[7] = (long) (-385);	      String string1 = StringUtils.join(longArray0, 'D');	      	      charSequenceArray0[6] = (CharSequence) "-385D-385D-385D-385D3213D-385D-385D-385D0";	      charSequenceArray0[7] = (CharSequence) "|qO{l0uUU|R8lUrfn";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	  }
@Test    public void testNameOverrideEnvironmentVariable() throws IOException, ServletException {        environmentVariables.set(SegmentNamingStrategy.NAME_OVERRIDE_ENVIRONMENT_VARIABLE_KEY, "pass");        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter("fail");        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(false);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mock(FilterChain.class);        servletFilter.doFilter(request, response, chain);        ArgumentCaptor<Segment> emittedSegment = ArgumentCaptor.forClass(Segment.class);        verify(AWSXRay.getGlobalRecorder().getEmitter(), Mockito.times(1)).sendSegment(emittedSegment.capture());        Assert.assertEquals("pass", emittedSegment.getValue().getName());        environmentVariables.set(SegmentNamingStrategy.NAME_OVERRIDE_ENVIRONMENT_VARIABLE_KEY, null);    }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      char[] charArray0 = new char[6];	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      Formatter formatter0 = new Formatter(charBuffer0);	      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);	      charBuffer0.append((CharSequence) charBuffer1);	      // Undeclared exception!	      try { 	        FormattableUtils.append((CharSequence) charBuffer1, formatter0, 2570, 958, 958);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.nio.Buffer", e);	      }	  }
@Test    public void test01() {        List<String> expectedResult = new ArrayList<String>();        expectedResult.add("");        expectedResult.add("ab");        expectedResult.add("");        expectedResult.add("cd");        expectedResult.add("");        expectedResult.add("e f");        expectedResult.add("\\hijk");        expectedResult.add("");        final List<String> result = new ArrayList<>();        new RangeExpressionParser(",ab,,cd,  , e f , \\hijk ,").visit(new RangeExpressionItemVisitor() {            @Override            public void visit(Object val) {                result.add((String) val);            }        });        Assert.equals(result, expectedResult);    }
@SuppressWarnings("ConstantConditions")	@Test public void testNewFragmentInstanceWithArguments() {		// Arrange:		final Bundle args = new Bundle();		final FragmentItem item = new FragmentItem(1, TestFragment.class);		// Act:		final Fragment fragment = item.newFragmentInstance(args);		// Assert:		assertThat(fragment, is(notNullValue()));		assertThat(fragment.getArguments(), is(args));	}
@Test  public void testStartSelectByTag() throws Exception {    operation.setConfiguration(GoogleSpeechStartTranscriptionOperationHandler.SOURCE_TAG, "transcript");    WorkflowOperationResult result = operationHandler.start(workflowInstance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals("audioTrack1", capturedTrack.getValue().getIdentifier());  }
@Test    public void testEip155Encode() {        assertThat(TransactionEncoder.encode(createEip155RawTransaction(), (byte) 1),                is(Numeric.hexStringToByteArray(                        "0xec098504a817c800825208943535353535353535353535353535353535353535880de0"                                + "b6b3a764000080018080")));    }
@Test    public void convert_test() {        CollectedClientData expected = TestDataUtil.createClientData(ClientDataType.GET);        String source = new CollectedClientDataConverter(objectConverter).convertToBase64UrlString(expected);        CollectedClientData result = new Base64UrlStringToCollectedClientDataConverter(objectConverter).convert(source);        assertThat(result).isEqualTo(expected);    }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V");	      	      StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);	      	      int int0 = strBuilder0.indexOf("x,OEdUuh6_<", 0);	      	      Locale.Category locale_Category0 = Locale.Category.DISPLAY;	      Locale.Category locale_Category1 = Locale.Category.FORMAT;	      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);	      assertTrue(enumSet0.contains(locale_Category1));	      	      Iterator<Locale.Category> iterator0 = enumSet0.iterator();	      assertTrue(enumSet0.contains(locale_Category1));	      	      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<");	      assertTrue(enumSet0.contains(locale_Category1));	      	      String string0 = "";	      StrBuilder strBuilder3 = new StrBuilder();	      	      StringBuilder stringBuilder0 = strBuilder3.toStringBuilder();	      	      StrBuilder strBuilder4 = strBuilder0.appendln(0);	      	      StrBuilder strBuilder5 = strBuilder1.appendln((Object) strBuilder0);	      	      String string1 = strBuilder0.rightString(5);	      	      StringBuilder stringBuilder1 = strBuilder0.toStringBuilder();	      	      Object[] objectArray0 = new Object[8];	      Object object0 = new Object();	      	      objectArray0[0] = object0;	      objectArray0[1] = (Object) stringBuilder1;	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();	      	      objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1;	      objectArray0[3] = (Object) strBuilder1;	      objectArray0[4] = (Object) stringBuffer1;	      objectArray0[5] = (Object) stringBuilder0;	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();	      	      objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer2;	      // Undeclared exception!	      try { 	        stringBuilder1.insert((-1), 1L);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1	         //	         verifyException("java.lang.AbstractStringBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testcontainsNone()  throws Throwable  {	      String string0 = StringUtils.getCommonPrefix((String[]) null);	      	      boolean boolean0 = StringUtils.isAllUpperCase("");	      	      String string1 = StringUtils.repeat("hZ'pC", (String) null, 1);	      	      char[] charArray0 = new char[7];	      charArray0[0] = 'r';	      charArray0[1] = 't';	      charArray0[2] = 'u';	      charArray0[3] = 'O';	      charArray0[4] = '+';	      charArray0[5] = '*';	      charArray0[6] = 'I';	      boolean boolean1 = StringUtils.containsNone((CharSequence) "hZ'pC", charArray0);	      	      String string2 = StringUtils.stripToEmpty("");	      	      String string3 = StringUtils.abbreviateMiddle("hZ'pC", "", 1);	      	      byte[] byteArray0 = new byte[9];	      byteArray0[0] = (byte)1;	      byteArray0[1] = (byte)0;	      byteArray0[2] = (byte) (-10);	      byteArray0[3] = (byte) (-127);	      byteArray0[4] = (byte)93;	      byteArray0[5] = (byte)52;	      byteArray0[6] = (byte) (-28);	      byteArray0[7] = (byte)56;	      byteArray0[8] = (byte) (-67);	      String string4 = StringUtils.join(byteArray0, 't');	  }
@Test(timeout = 4000)	  public void testparse()  throws Throwable  {	      Locale locale0 = Locale.TRADITIONAL_CHINESE;	      TimeZone timeZone0 = TimeZone.getDefault();	      FastDateParser fastDateParser0 = null;	      try {	        fastDateParser0 = new FastDateParser(".kvx$lwJ]hM,S8%x", timeZone0, locale0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Failed to parse \".kvx$lwJ]hM,S8%x\" ; gave up at index 2	         //	         verifyException("org.apache.commons.lang3.time.FastDateParser", e);	      }	  }
@Test  public void testSortingMap() {    Map<String, String> testMap = getTestMap();    // Test ascent sorting    Map<String, String> sortedMap = sortMapByValue(testMap, true);    assertEquals(testMap.size(), sortedMap.size());    TreeSet<Object> sortedValues = new TreeSet<>((s1, s2) -> {      if (s1 instanceof Comparable && s2 instanceof Comparable) {        return ((Comparable) s1).compareTo(s2);      } else        return -1;    });    sortedValues.addAll(testMap.values());    Iterator<Entry<String, String>> iteratorSortedMap = sortedMap.entrySet().iterator();    Iterator<Object> iteratorSortedValues = sortedValues.iterator();    while (iteratorSortedMap.hasNext()) {      Entry<String, String> entry = iteratorSortedMap.next();      Object value = iteratorSortedValues.next();      assertEquals(value, entry.getValue());    }    // Test descent sorting    sortedMap = sortMapByValue(testMap, false);    assertEquals(testMap.size(), sortedMap.size());    sortedValues = new TreeSet<>((s1, s2) -> -((Comparable) s1).compareTo(s2));    sortedValues.addAll(testMap.values());    iteratorSortedMap = sortedMap.entrySet().iterator();    iteratorSortedValues = sortedValues.iterator();    while (iteratorSortedMap.hasNext()) {      Entry<String, String> entry = iteratorSortedMap.next();      Object value = iteratorSortedValues.next();      assertEquals(value, entry.getValue());    }  }
@Test(timeout = 4000)	  public void testgetDateTimeInstance()  throws Throwable  {	      Locale locale0 = Locale.JAPANESE;	      FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0);	      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 2, 1, 0);	      String string0 = fastDateFormat0.format((Calendar) mockGregorianCalendar0);	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      ToStringStyle toStringStyle0 = ToStringStyle.MULTI_LINE_STYLE;	      // Undeclared exception!	      try { 	        toStringStyle0.DEFAULT_STYLE.append((StringBuffer) null, "", 3);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.builder.ToStringStyle", e);	      }	  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(8);	      assertNull(strBuilder0.getNewLineText());	      	      StringBuilder stringBuilder0 = new StringBuilder(strBuilder0);	      assertNull(strBuilder0.getNewLineText());	      	      StringBuffer stringBuffer0 = new StringBuffer();	      	      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);	      assertNull(strBuilder0.getNewLineText());	      	      StringBuilder stringBuilder2 = stringBuilder1.insert(0, 3482.0);	      assertNull(strBuilder0.getNewLineText());	      	      StringBuilder stringBuilder3 = stringBuilder2.append(5L);	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuilder3);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      	      int int0 = strBuilder0.size();	      assertNull(strBuilder0.getNewLineText());	  }
@Test(timeout = 4000)	  public void testbetween()  throws Throwable  {	      StringWriter stringWriter0 = new StringWriter();	      UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.between(0, (-300));	      boolean boolean0 = unicodeEscaper0.translate(0, (Writer) stringWriter0);	  }
@Test   public void testDaysAgo() throws Exception   {      PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 24 * 3));      Assert.assertEquals("3 days ago", t.format(new Date(0)));   }
@Test(timeout = 4000)	  public void testisUseFieldNames()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      String string0 = standardToStringStyle0.getSummaryObjectStartText();	      assertTrue(standardToStringStyle0.isUseFieldNames());	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      Object object0 = new Object();	      ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE;	      Class<Object> class0 = Object.class;	      String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0, true, true, (Class<? super Object>) class0);	  }
@Test  public void testIndexer() throws Exception {    Indexer indexer = (Indexer)IndexerModelAuthorizables.from("InDexEr=indexer1");    assertEquals("indexer1", indexer.getName());  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      String string0 = StringUtils.chop("T");	      	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "T";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "T";	      charSequenceArray0[5] = (CharSequence) "T";	      charSequenceArray0[6] = (CharSequence) "";	      charSequenceArray0[7] = (CharSequence) "T";	      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);	      	      String string1 = StringUtils.removePattern("", "");	      	      String string2 = StringUtils.substring((String) null, (-4035));	      	      String string3 = StringUtils.trim((String) null);	      	      boolean boolean1 = StringUtils.isAllLowerCase(charSequenceArray0[4]);	      	      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);	      	      String[] stringArray0 = new String[3];	      stringArray0[0] = "T";	      stringArray0[1] = "";	      stringArray0[2] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);	      	      String string4 = StringUtils.left((String) null, 1896);	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      byte[] byteArray0 = new byte[7];	      byteArray0[0] = (byte)51;	      byteArray0[1] = (byte)127;	      byteArray0[2] = (byte)25;	      byteArray0[3] = (byte)14;	      byteArray0[4] = (byte)65;	      byteArray0[5] = (byte) (-1);	      byteArray0[6] = (byte)32;	      String string0 = StringUtils.join(byteArray0, '[');	      	      boolean boolean0 = StringUtils.equals((CharSequence) "51[127[25[14[65[-1[32", (CharSequence) "51[127[25[14[65[-1[32");	  }
@Test    public void testStoreStreamUpdatesExistingDocumentAndDoesNotTryToCreateNewOne() throws Exception {        final ByteArrayInputStream input = new ByteArrayInputStream("hello".getBytes());        makeConfigurationExisting("huch".getBytes());        storage.save(input);        final File configFile = new File(tempDir.getRoot(), "configuration.zip");        assertTrue(configFile.exists());        assertArrayEquals("hello".getBytes(), FileUtils.readFileToByteArray(configFile));    }
@Test  public void testMisMatchDefaultDCTerm() throws Exception {    // Match != Default Value    operation.setConfiguration(TagByDublinCoreTermWOH.SOURCE_FLAVORS_PROPERTY, "dublincore/*");    operation.setConfiguration(TagByDublinCoreTermWOH.DCCATALOG_PROPERTY, "episode");    operation.setConfiguration(TagByDublinCoreTermWOH.DCTERM_PROPERTY, "source");    operation.setConfiguration(TagByDublinCoreTermWOH.DEFAULT_VALUE_PROPERTY, "Cairo");    operation.setConfiguration(TagByDublinCoreTermWOH.MATCH_VALUE_PROPERTY, "Timbuktu");    operation.setConfiguration(TagByDublinCoreTermWOH.TARGET_TAGS_PROPERTY, "tag1,tag2");    operation.setConfiguration(TagByDublinCoreTermWOH.COPY_PROPERTY, "false");    WorkflowOperationResult result = operationHandler.start(instance, null);    MediaPackage resultingMediapackage = result.getMediaPackage();    Catalog catalog = resultingMediapackage.getCatalog("catalog-1");    Assert.assertEquals(1, catalog.getTags().length);    Assert.assertEquals("archive", catalog.getTags()[0]);  }
@Test(timeout = 4000)	  public void testhexDigitMsb0ToBinary()  throws Throwable  {	      boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('c');	      // Undeclared exception!	      try { 	        Conversion.intToBinary(99, (-3637), booleanArray0, (-3637), 2);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // -3637	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test(timeout = 4000)	  public void testisAsciiControl()  throws Throwable  {	      boolean boolean0 = CharUtils.isAsciiControl('');	  }
@Test	public void testGetHotel() {		assertEquals("test", plan.getHotel());	}
@Test(timeout = 4000)	  public void testhexDigitMsb0ToInt()  throws Throwable  {	      // Undeclared exception!	      try { 	        Conversion.hexDigitMsb0ToInt('T');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Cannot interpret 'T' as a hexadecimal digit	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test  public void testDefaultUninstall() throws Exception {    File file = getResourceFile("/ListProvidersScannerTest-GoodProperties.properties");    listProvidersScanner.uninstall(file);    assertFalse("Provider was not removed", listProvidersService.hasProvider(listName));  }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U");	      assertEquals(41, strBuilder0.capacity());	      	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 66, '\"');	      assertEquals(150, strBuilder0.capacity());	      assertEquals(150, strBuilder1.capacity());	      	      StrBuilder strBuilder2 = strBuilder0.deleteAll("SzpQ!4 ;U");	      assertEquals(150, strBuilder0.capacity());	      assertEquals(150, strBuilder2.capacity());	  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder((String) null);	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder1 = strBuilder0.insert(0, (Object) null);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators((Iterable<?>) null, (String) null);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      StrMatcher strMatcher0 = StrMatcher.charSetMatcher((String) null);	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher('L');	      	      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Iterable<?>) null, "");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      assertNull(strBuilder3.getNullText());	      	      StrMatcher strMatcher2 = StrMatcher.stringMatcher("r8T0ER3M!z7l6zL5!");	      	      StrBuilder strBuilder4 = strBuilder0.append((double) 0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder4.getNullText());	      	      String string0 = strBuilder4.build();	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder4.getNullText());	      	      StrBuilder strBuilder5 = strBuilder0.deleteFirst((String) null);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder5.getNullText());	      	      StrBuilder strBuilder6 = strBuilder1.replaceFirst(strMatcher0, "os.arch");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder6.getNullText());	      	      boolean boolean0 = strBuilder0.isEmpty();	      assertNull(strBuilder0.getNullText());	      	      boolean boolean1 = strBuilder2.equals(strBuilder4);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      assertNull(strBuilder4.getNullText());	      	      String string1 = strBuilder1.getNullText();	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StrBuilder strBuilder7 = strBuilder0.appendSeparator(", Length: ");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder7.getNullText());	      	      StrBuilder strBuilder8 = strBuilder0.insert(0, false);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder8.getNullText());	      	      char[] charArray0 = new char[3];	      charArray0[0] = 'L';	      charArray0[1] = 'L';	      charArray0[2] = 'L';	      // Undeclared exception!	      try { 	        strBuilder5.append(charArray0, 1898, 1898);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // Invalid startIndex: 1898	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test public void testOnCreate() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final ActionBarFragment fragment = new TestFragment();		// Act:		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();	}
@Test    public void dataNoPayloadNoPadding() {        Http2Frame frame = TestMessages.DATA_NO_PAYLOAD_NO_PADDING_FRAME;        assertArrayEquals(TestMessages.DATA_NO_PAYLOAD_NO_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));    }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNullText());	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      assertNull(strBuilder0.getNullText());	      	      char[] charArray0 = new char[1];	      StringBuffer stringBuffer1 = stringBuffer0.reverse();	      assertNull(strBuilder0.getNullText());	      	      StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher();	      	      StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      char char0 = '3';	      charArray0[0] = '3';	      strBuilder0.buffer = charArray0;	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder2 = strBuilder0.append(3986.49F);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      	      StrBuilder strBuilder3 = strBuilder2.appendWithSeparators((Object[]) null, "rXB\u0003WVlNWF<}");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      assertNull(strBuilder3.getNullText());	      	      boolean boolean0 = strBuilder3.contains((StrMatcher) strMatcher_NoMatcher0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      assertNull(strBuilder3.getNullText());	      	      StrBuilder strBuilder4 = strBuilder0.append("Y~");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder4.getNullText());	      	      IntStream intStream0 = strBuilder2.codePoints();	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      	      // Undeclared exception!	      try { 	        strBuilder0.toCharArray(724, 724);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // end < start	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("org.apache.commons.lang3.text.StrBuilder");	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder1 = strBuilder0.appendSeparator('2');	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StringWriter stringWriter0 = new StringWriter();	      	      StringBuffer stringBuffer0 = stringWriter0.getBuffer();	      	      StrBuilder strBuilder2 = strBuilder0.append(stringBuffer0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      	      strBuilder0.hashCode();	      assertNull(strBuilder0.getNullText());	      	      int int0 = strBuilder0.lastIndexOf("org.apache.commons.lang3.text.StrBuilder", 870);	      assertNull(strBuilder0.getNullText());	      	      int int1 = strBuilder0.lastIndexOf('', 0);	      assertNull(strBuilder0.getNullText());	  }
@Test(timeout = 4000)	  public void testrightString()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V");	      	      StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);	      	      int int0 = strBuilder0.indexOf("x,OEdUuh6_<", 0);	      	      Locale.Category locale_Category0 = Locale.Category.DISPLAY;	      Locale.Category locale_Category1 = Locale.Category.FORMAT;	      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);	      	      Iterator<Locale.Category> iterator0 = enumSet0.iterator();	      	      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<");	      	      String string0 = "";	      StrBuilder strBuilder3 = new StrBuilder();	      	      StringBuilder stringBuilder0 = strBuilder3.toStringBuilder();	      	      StrBuilder strBuilder4 = strBuilder0.appendln(0);	      	      StrBuilder strBuilder5 = strBuilder1.appendln((Object) strBuilder0);	      	      String string1 = strBuilder0.rightString(5);	      	      StringBuilder stringBuilder1 = strBuilder0.toStringBuilder();	      	      Object[] objectArray0 = new Object[8];	      Object object0 = new Object();	      	      objectArray0[0] = object0;	      objectArray0[1] = (Object) stringBuilder1;	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder1.new StrBuilderTokenizer();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();	      	      objectArray0[2] = (Object) strBuilder_StrBuilderTokenizer1;	      objectArray0[3] = (Object) strBuilder1;	      objectArray0[4] = (Object) stringBuffer1;	      objectArray0[5] = (Object) stringBuilder0;	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();	      	      objectArray0[6] = (Object) strBuilder_StrBuilderTokenizer2;	      // Undeclared exception!	      try { 	        stringBuilder1.insert((-1), 1L);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1	         //	         verifyException("java.lang.AbstractStringBuilder", e);	      }	  }
@Test    public void addEmpytEdgeToBuilderTest() {        int before = builder.build().getEdges().size();        yasgl.addEdgesToBuilder(emptyfile, builder);        int after = builder.build().getEdges().size();        assertEquals(before, after);    }
@Test(timeout = 4000)	  public void testclone()  throws Throwable  {	      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();	      DateFormatSymbols dateFormatSymbols1 = ObjectUtils.cloneIfPossible(dateFormatSymbols0);	  }
@Test(expectedExceptions = NullPointerException.class)    public void testRemoveNull() {        EdgeStore edgeStore = new EdgeStore();        edgeStore.remove(null);    }
@Test  public void testGetMedia() throws Exception {    String expected = IOUtils.toString(getClass().getResource("/eventMediaDetail.json"));    given().pathParam("eventId", "asdasd").pathParam("id", "notFound").expect().statusCode(HttpStatus.SC_NOT_FOUND)            .when().get(rt.host("{eventId}/asset/media/{id}.json"));    String result = given().pathParam("eventId", "asdasd").pathParam("id", "publish-track-1").expect()            .statusCode(HttpStatus.SC_OK).when().get(rt.host("{eventId}/asset/media/{id}.json")).asString();    assertThat(expected, SameJSONAs.sameJSONAs(result).allowingAnyArrayOrdering());  }
@Test(timeout = 4000)	  public void testisFieldSeparatorAtEnd()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z");	      standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0);	      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());	  }
@Test  public void testGetScopes() {    final ClientCredentials cc = new ClientCredentials();    for (final String scope : cc.getScopes()) {      if (!scope.startsWith("https://www.googleapis.com/auth/youtube")) {        fail("Invalid YouTube v3 auth configuration where scope = " + scope);      }    }  }
@Test(timeout = 4000)	  public void testisDefaultFullDetail()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      boolean boolean0 = standardToStringStyle0.isUseFieldNames();	      assertTrue(standardToStringStyle0.isDefaultFullDetail());	  }
@Test(timeout = 4000)	  public void testdefaultIfBlank()  throws Throwable  {	      String string0 = StringUtils.chop("x");	      	      String string1 = StringUtils.repeat("", 3082);	      	      CharSequence[] charSequenceArray0 = new CharSequence[0];	      String string2 = StringUtils.prependIfMissingIgnoreCase("x", "", charSequenceArray0);	      	      String string3 = "\\u";	      String string4 = StringUtils.removeEndIgnoreCase("org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", string3);	      	      char[] charArray0 = new char[0];	      char char0 = 'Y';	      String string5 = StringUtils.join(charArray0, 'Y', 3082, (-784));	      	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "org.apache.commons.lang3.CharSequenceUtilsorg.apache.commons.lang3.exception.CloneFailedException", charArray0);	      	      int int0 = StringUtils.countMatches(string3, "");	      	      String string6 = StringUtils.defaultIfBlank(string3, " has no clone method");	      	      long[] longArray0 = new long[1];	      longArray0[0] = (long) 3082;	      // Undeclared exception!	      try { 	        StringUtils.join(longArray0, 'Y', 3, 3082);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // 3	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNullText());	      	      StrMatcher strMatcher0 = StrMatcher.charMatcher('h');	      	      StrBuilder strBuilder1 = strBuilder0.replaceAll(", Length: 0", ", Length: 0");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      Object[] objectArray0 = new Object[6];	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      assertNull(strBuilder0.getNullText());	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();	      assertNull(strBuilder0.getNullText());	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer2 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.cloneReset();	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder2 = strBuilder0.appendFixedWidthPadLeft((Object) strBuilder_StrBuilderTokenizer2, 773, '5');	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      	      objectArray0[1] = (Object) strBuilder_StrBuilderTokenizer1;	      objectArray0[3] = (Object) strMatcher0;	      objectArray0[4] = (Object) ", Length: 0";	      objectArray0[5] = (Object) strMatcher0;	      StrBuilder strBuilder3 = strBuilder1.appendSeparator("");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder3.getNullText());	      	      char[] charArray0 = new char[6];	      charArray0[0] = 'h';	      charArray0[1] = 'h';	      charArray0[2] = 'h';	      charArray0[3] = 'h';	      charArray0[4] = 'h';	      charArray0[5] = 'h';	      int int0 = strBuilder0.indexOf(strMatcher0);	      assertNull(strBuilder0.getNullText());	  }
@Test(timeout = 4000)	  public void testtoObject()  throws Throwable  {	      double[] doubleArray0 = new double[7];	      Double[] doubleArray1 = ArrayUtils.toObject(doubleArray0);	      Double[] doubleArray2 = ArrayUtils.addAll(doubleArray1, doubleArray1);	  }
@Test(timeout = 4000)	  public void testnext()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("\"Li");	      String string0 = strTokenizer0.getContent();	      assertEquals(0, strTokenizer0.nextIndex());	  }
@Test    public void testJoinList() {        List<String> list1 = new LinkedList<String>();        list1.add( "foo" );        list1.add( "bar" );        list1.add( "baz" );        assertEquals( "foo|bar|baz", join( "|", list1 ) );        List<String> list2 = new ArrayList<String>( 3 );        list2.add( "foo" );        list2.add( "bar" );        list2.add( "baz" );        assertEquals( "foo | bar | baz", join( " | ", list2 ) );    }
@Test(timeout = 4000)	  public void testdeleteCharAt()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      String string0 = strBuilder0.build();	      	      char[] charArray0 = strBuilder0.toCharArray(0, 0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln('h');	      	      StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0);	      	      int int0 = strBuilder2.capacity();	      	      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");	      	      int int1 = strBuilder2.lastIndexOf('b', 0);	      	      StrBuilder strBuilder3 = strBuilder2.append((char[]) null);	  }
@Test(timeout = 4000)	  public void testgetRight()  throws Throwable  {	      MutableTriple<Integer, String, String> mutableTriple0 = MutableTriple.of((Integer) null, "org.apache.commons.lang3.tuple.Triple", ",DUN");	      String string0 = mutableTriple0.getRight();	  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      Object[] objectArray0 = new Object[8];	      objectArray0[0] = (Object) comparator0;	      Object[] objectArray1 = new Object[8];	      objectArray1[0] = (Object) compareToBuilder0;	      // Undeclared exception!	      try { 	        compareToBuilder0.append(objectArray0, objectArray1, (Comparator<?>) null);	        fail("Expecting exception: ClassCastException");	      	      } catch(ClassCastException e) {	         //	         // codegen.java.util.Comparator$MockitoMock$374700374 cannot be cast to java.lang.Comparable	         //	         verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testisSameLength()  throws Throwable  {	      boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null);	  }
@Test(timeout = 4000)	  public void testdelete()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      String string0 = strBuilder0.build();	      	      char[] charArray0 = strBuilder0.toCharArray(0, 0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln('h');	      	      StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0);	      	      int int0 = strBuilder2.capacity();	      	      StrMatcher strMatcher0 = StrMatcher.stringMatcher("");	      	      int int1 = strBuilder2.lastIndexOf('b', 0);	      	      StrBuilder strBuilder3 = strBuilder2.append((char[]) null);	  }
@Test(timeout = 4000)	  public void testrandomAlphabetic()  throws Throwable  {	      RandomStringUtils.random(0, ".-Ld0IjUUr");	      RandomStringUtils.randomAlphanumeric(0);	      boolean boolean0 = true;	      char[] charArray0 = null;	      MockRandom mockRandom0 = new MockRandom();	      byte[] byteArray0 = new byte[4];	      mockRandom0.nextLong();	      byte byte0 = (byte) (-1);	      byteArray0[0] = (byte) (-1);	      byteArray0[1] = (byte)0;	      byteArray0[2] = (byte)100;	      byteArray0[3] = (byte) (-60);	      mockRandom0.nextBytes(byteArray0);	      mockRandom0.nextBoolean();	      RandomStringUtils.random(0, 1116, 0, true, true, (char[]) null, (Random) mockRandom0);	      int int0 = (-2215);	      // Undeclared exception!	      try { 	        RandomStringUtils.randomAlphabetic((-2215));	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Requested random string length -2215 is less than 0.	         //	         verifyException("org.apache.commons.lang3.RandomStringUtils", e);	      }	  }
@Test    public void prevChapter() throws Exception {        when(librarian.isOSISLinkValid(any())).thenReturn(false);        presenter.prevChapter();        verify(librarian).getCurrentOSISLink();        verify(view).disableActionMode();        verify(view).openLibraryActivity();    }
@Test(timeout = 4000)	  public void testcenter()  throws Throwable  {	      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);	      	      boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");	      	      ArrayList<Object> arrayList0 = new ArrayList<Object>();	      	      ListIterator<Object> listIterator0 = arrayList0.listIterator();	      	      String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");	      	      boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");	      	      boolean boolean2 = StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");	      	      String string1 = StringUtils.substring("t{", 0, 0);	      	      boolean boolean3 = arrayList0.add((Object) listIterator0);	      	      int int0 = StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");	      	      double[] doubleArray0 = new double[1];	      doubleArray0[0] = (double) 0;	      boolean boolean4 = arrayList0.add((Object) "");	      	      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");	      	      String string2 = StringUtils.join(doubleArray0, '}');	      	      String string3 = StringUtils.center("", 0);	      	      StringWriter stringWriter0 = new StringWriter(0);	      	      StringBuffer stringBuffer0 = stringWriter0.getBuffer();	      	      boolean boolean5 = StringUtils.isNumericSpace(stringBuffer0);	      	      String string4 = StringUtils.left("", 0);	      	      boolean boolean6 = StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");	      	      String string5 = StringUtils.join((Object[]) stringArray0, '}');	      	      boolean boolean7 = StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) "");	      	      String string6 = StringUtils.strip("0.0");	      	      String string7 = StringUtils.join((Iterable<?>) arrayList0, '}');	      	      String[] stringArray1 = StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:");	      	      boolean boolean8 = StringUtils.startsWithAny("", stringArray0);	      	      String string8 = StringUtils.rightPad("", (-1), '3');	      	      // Undeclared exception!	      try { 	        StringUtils.join((Iterator<?>) listIterator0, '}');	        fail("Expecting exception: ConcurrentModificationException");	      	      } catch(ConcurrentModificationException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.util.ArrayList$Itr", e);	      }	  }
@Test(timeout = 4000)	  public void testsplit()  throws Throwable  {	      String string0 = StringUtils.join((int[]) null, 't', 0, 0);	      	      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');	      	      String string1 = StringUtils.stripEnd((String) null, (String) null);	      	      String string2 = StringUtils.leftPad("RWSLzV4h", 0, (String) null);	      	      int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) "RWSLzV4h", 0);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");	      	      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);	      	      int int1 = StringUtils.length("RWSLzV4h");	      	      int int2 = StringUtils.lastIndexOf((CharSequence) null, 9);	      	      int int3 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) null);	      	      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (char[]) null);	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder();	      Object[] objectArray0 = new Object[5];	      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(objectArray0);	      hashCodeBuilder1.append(299.14006215581);	      HashCodeBuilder hashCodeBuilder2 = hashCodeBuilder0.append(3296.5503F);	      int int0 = hashCodeBuilder2.toHashCode();	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testGetAttributeIntervalStringUnknown() {        GraphStore store = new GraphStore();        NodeImpl node = new NodeImpl("0", store);        node.getAttribute("foo", new Interval(1.0, 2.0));    }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      String string0 = StringUtils.removePattern("Minimum abbreviation width is 4", "Minimum abbreviation width is 4");	      	      String string1 = StringUtils.removeEnd("Minimum abbreviation width is 4", "9.2a=P+HRf`R's^w+eE");	      	      char[] charArray0 = new char[3];	      charArray0[0] = '^';	      charArray0[1] = '<';	      charArray0[2] = 'u';	      boolean boolean0 = StringUtils.containsNone((CharSequence) "Minimum abbreviation width is 4", charArray0);	      	      String string2 = StringUtils.abbreviateMiddle("}uKvEH|OB1F+ML", " ", 1749);	      	      int[] intArray0 = new int[0];	      String string3 = StringUtils.join(intArray0, 'Z');	      	      String string4 = StringUtils.rightPad("Minimum abbreviation width is 4", 1749, 'P');	  }
@Test    public void testSize() {        EdgeStore edgeStore = new EdgeStore();        EdgeImpl[] edges = GraphGenerator.generateEdgeList(2);        EdgeImpl e1 = edges[0];        EdgeImpl e2 = edges[1];        edgeStore.add(e1);        edgeStore.add(e2);        Assert.assertEquals(edgeStore.size(), 2);        Assert.assertEquals(edgeStore.size(0), 2);        Assert.assertEquals(edgeStore.size(99), 0);        edgeStore.remove(e1);        Assert.assertEquals(edgeStore.size(), 1);        edgeStore.remove(e2);        Assert.assertEquals(edgeStore.size(), 0);        Assert.assertTrue(edgeStore.isEmpty());    }
@Test(timeout = 4000)	  public void testbinaryToInt()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      // Undeclared exception!	      try { 	        Conversion.binaryToInt(booleanArray0, 1, 1, 1, 1);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // 1	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test    public void testRemove() {        for (IntervalMap set : getAllInstances()) {            Object[] defaultValues = getTestValues(set);            set.put(new Interval(1.0, 2.0), defaultValues[0]);            set.put(new Interval(3.0, 4.0), defaultValues[1]);            Assert.assertTrue(set.remove(new Interval(1.0, 2.0)));            Assert.assertFalse(set.contains(new Interval(1.0, 2.0)));            Assert.assertEquals(set.get(new Interval(3.0, 4.0), defaultValues[0]), defaultValues[1]);            Assert.assertTrue(set.remove(new Interval(3.0, 4.0)));            Assert.assertTrue(set.isEmpty());            Assert.assertFalse(set.contains(new Interval(1.0, 2.0)));        }    }
@Test(timeout = 4000)	  public void testsetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(65);	      	      StrBuilder strBuilder1 = strBuilder0.setNullText("0H+6+X");	      	      char[] charArray0 = strBuilder0.getChars((char[]) null);	  }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("}Ip)EDx!E");	      assertEquals(41, strBuilder0.capacity());	      	      StrBuilder strBuilder1 = strBuilder0.appendln((char[]) null);	      assertEquals(41, strBuilder0.capacity());	      assertEquals(41, strBuilder1.capacity());	      	      StrBuilder strBuilder2 = strBuilder1.clear();	      assertEquals(41, strBuilder0.capacity());	      assertEquals(41, strBuilder1.capacity());	      assertEquals(41, strBuilder2.capacity());	      	      StrBuilder strBuilder3 = strBuilder0.appendNull();	      assertEquals(41, strBuilder0.capacity());	      assertEquals(41, strBuilder3.capacity());	      	      // Undeclared exception!	      try { 	        strBuilder3.insert((-1874), (Object) null);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1874	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testrandomAlphabetic()  throws Throwable  {	      String string0 = RandomStringUtils.randomAlphabetic(0);	      	      RandomStringUtils randomStringUtils0 = new RandomStringUtils();	      	      char[] charArray0 = new char[6];	      charArray0[0] = 'K';	      charArray0[1] = 'b';	      charArray0[2] = ';';	      charArray0[3] = '0';	      charArray0[4] = 'k';	      charArray0[5] = 'V';	      MockRandom mockRandom0 = new MockRandom((-1298L));	      	      String string1 = RandomStringUtils.random(2190, 0, 1551, false, false, charArray0, (Random) mockRandom0);', '0', 'k', 'V'}, charArray0);	      	      String string2 = RandomStringUtils.randomAscii(32);	      	      char[] charArray1 = new char[2];	      	      charArray1[0] = '1';	      charArray1[1] = 'I';	      String string3 = RandomStringUtils.random(2052, charArray1);	      	      String string4 = RandomStringUtils.random(2439);	      	      // Undeclared exception!	      try { 	        RandomStringUtils.randomNumeric((-557));	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Requested random string length -557 is less than 0.	         //	         verifyException("org.apache.commons.lang3.RandomStringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testisDefaultFullDetail()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      Boolean boolean0 = Boolean.valueOf("&=$L/rFw]D");	      standardToStringStyle0.isFullDetail(boolean0);	      assertTrue(standardToStringStyle0.isDefaultFullDetail());	  }
@Test    void testPartialGlobMismatch() {        SamplingRule rule = new SamplingRule()            .withAttributes(null)            .withHost("*")            .withServiceName("*.foo.*")            .withHTTPMethod("*")            .withResourceARN("*")            .withURLPath("/bar/*")            .withServiceType("AWS::EC2::Instance");        SamplingRequest req = new SamplingRequest(            "role-arn",            "arn:aws:service:us-east-1:111111111111:resource",            "www.bar.com",            "192.168.1.1",            "GET",            "/foo/baz",            "AWS::EC2::Instance",            null        );        Matchers m = new Matchers(rule);        Assertions.assertFalse(m.match(req));    }
@Test    public void testFill() {        GraphStore graphStore = GraphGenerator.generateSmallMultiTypeGraphStore();        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view = store.createView();        DirectedSubgraph graph = store.getDirectedGraph(view);        UndirectedSubgraph unGraph = store.getUndirectedGraph(view);        view.fill();        Assert.assertEquals(view.getNodeCount(), graphStore.getNodeCount());        Assert.assertEquals(view.getEdgeCount(), graphStore.getEdgeCount());        for (Edge e : graphStore.getEdges()) {            Assert.assertTrue(graph.contains(e));        }        for (Node n : graphStore.getNodes()) {            Assert.assertTrue(graph.contains(n));        }        for (int i = 0; i < graphStore.edgeTypeStore.length; i++) {            Assert.assertEquals(graph.getEdgeCount(i), graphStore.getEdgeCount(i));        }        for (Edge e : graphStore.undirectedDecorator.getEdges()) {            Assert.assertTrue(unGraph.contains(e));        }        for (Node n : graphStore.undirectedDecorator.getNodes()) {            Assert.assertTrue(unGraph.contains(n));        }        for (int i = 0; i < graphStore.edgeTypeStore.length; i++) {            Assert.assertEquals(unGraph.getEdgeCount(i), graphStore.undirectedDecorator.getEdgeCount(i));        }    }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSizeStartText((String) null);	      assertEquals("<null>", standardToStringStyle0.getNullText());	  }
@Test  public void testCalculateChecksum() throws Exception {    String extendedFlavorType = "extended";    DublinCoreCatalog dc = SchedulerServiceImplTest.generateExtendedEvent(Opt.<String> none(), extendedFlavorType);    FileUtils.writeStringToFile(workspaceFile, dc.toXmlString(), "UTF-8");    List<MediaPackageElementFlavor> catalogAdapterFlavors = new ArrayList<>();    catalogAdapterFlavors.add(new MediaPackageElementFlavor(extendedFlavorType, "episode"));    AccessControlList acl = new AccessControlList(new AccessControlEntry("ROLE_ADMIN", "write", true));    Date start = new Date(DateTimeSupport.fromUTC("2008-03-16T14:00:00Z"));    Date end = new Date(DateTimeSupport.fromUTC("2008-03-16T15:00:00Z"));    String captureDeviceID = "demo";    String seriesId = "series1";    Set<String> userIds = new HashSet<>();    userIds.add("user2");    userIds.add("user1");    MediaPackage mp = SchedulerServiceImplTest.generateEvent(Opt.<String> none());    mp.setSeries(seriesId);    DublinCoreCatalog event = SchedulerServiceImplTest.generateEvent(captureDeviceID, start, end);    event.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(start, Precision.Minute));    String catalogId = UUID.randomUUID().toString();    MediaPackageElement catalog = mp.add(new URI("location" + catalogId), Type.Catalog, event.getFlavor());    catalog.setIdentifier(catalogId);    String extendedCatalogId = UUID.randomUUID().toString();    MediaPackageElement extendedCatalog = mp.add(new URI("location" + extendedCatalogId), Type.Catalog, dc.getFlavor());    extendedCatalog.setIdentifier(extendedCatalogId);    Map<String, String> caProperties = SchedulerServiceImplTest.generateCaptureAgentMetadata("demo");    Map<String, String> wfProperties = new HashMap<String, String>();    wfProperties.put("test", "true");    wfProperties.put("clear", "all");    String expectedChecksum = "2d5398c961f0784a13eaad323ebc43f3";    String checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID,            userIds, mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertEquals(expectedChecksum, checksum);    // change start date    start = new Date();    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change end date    start = new Date(DateTimeSupport.fromUTC("2008-03-16T14:00:00Z"));    end = new Date();    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change device    end = new Date(DateTimeSupport.fromUTC("2008-03-16T15:00:00Z"));    captureDeviceID = "demo1";    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change users    captureDeviceID = "demo";    userIds.add("test");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change episode dublincore    userIds.remove("test");    catalog.setChecksum(null);    event.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(end, Precision.Minute));    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change extended dublincore    catalog.setChecksum(null);    event.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(start, Precision.Minute));    extendedCatalog.setChecksum(null);    dc.set(PROPERTY_CREATED, EncodingSchemeUtils.encodeDate(start, Precision.Minute));    FileUtils.writeStringToFile(workspaceFile, dc.toXmlString(), "UTF-8");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change wf properties    extendedCatalog.setChecksum(null);    dc.remove(PROPERTY_CREATED);    FileUtils.writeStringToFile(workspaceFile, dc.toXmlString(), "UTF-8");    wfProperties.put("change", "change");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change ca properties    wfProperties.remove("change");    caProperties.put("change", "change");    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties, acl);    Assert.assertNotEquals(expectedChecksum, checksum);    // change access control list    checksum = SchedulerUtil.calculateChecksum(workspace, catalogAdapterFlavors, start, end, captureDeviceID, userIds,            mp, Opt.some(event), wfProperties, caProperties,            new AccessControlList(new AccessControlEntry("ROLE_ADMIN", "write", false)));    Assert.assertNotEquals(expectedChecksum, checksum);  }
@Test(timeout = 4000)	  public void testtoBooleanObject()  throws Throwable  {	      Boolean boolean0 = BooleanUtils.toBooleanObject("yes");	      Boolean[] booleanArray0 = new Boolean[4];	      booleanArray0[0] = boolean0;	      booleanArray0[1] = boolean0;	      booleanArray0[2] = boolean0;	      booleanArray0[3] = boolean0;	      Boolean boolean1 = BooleanUtils.and(booleanArray0);	  }
@Test    public void testParseNull() {        Boolean[] a1 = ArraysParser.parseArray(Boolean[].class, "[false, null, false]");        String[] a2 = ArraysParser.parseArray(String[].class, "[\"null\", null, 'null', value]");        Assert.assertEquals(new Boolean[] { false, null, false }, a1);        Assert.assertEquals(new String[] { "null", null, "null", "value" }, a2);    }
@Test    public void segmentExecutor() {        runSegmentExecutorTest(SegmentContextExecutors.newSegmentContextExecutor(manual), manual);    }
@Test    public void testIsSelfLoop() {        GraphStore graphStore = GraphGenerator.generateTinyGraphStore();        NodeImpl n1 = graphStore.getNode("1");        Edge edge = graphStore.factory.newEdge("edge", n1, n1, EdgeTypeStore.NULL_LABEL, 1.0, true);        graphStore.addEdge(edge);        GraphViewStore store = graphStore.viewStore;        GraphViewImpl view = store.createView();        view.fill();        DirectedSubgraph graph = store.getDirectedGraph(view);        Assert.assertTrue(graph.isSelfLoop(edge));        Assert.assertFalse(graph.isSelfLoop(graph.getEdge("0")));    }
@Test    public void parsePolygonPatch()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        XMLStreamReaderWrapper parser = getParser( "PolygonPatch.gml" );        PolygonPatch patch = (PolygonPatch) getPatchParser().parseSurfacePatch( parser,                                                                                CRSManager.getCRSRef( "EPSG:4326" ) );        Assert.assertEquals( 2.0, patch.getExteriorRing().getStartPoint().get0() );        Assert.assertEquals( 0.0, patch.getExteriorRing().getStartPoint().get1() );        Assert.assertEquals( 2.0, patch.getExteriorRing().getEndPoint().get0() );        Assert.assertEquals( 0.0, patch.getExteriorRing().getEndPoint().get1() );        Assert.assertEquals( 2, patch.getInteriorRings().size() );    }
@Test(expected = OWSExceptionReport.class)    public void testFailedExecute()                            throws Exception {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        WPSClient wpsClient = new WPSClient( new URL( demoWPSURL ) );        Process proc = wpsClient.getProcess( "Centroid", null );        ProcessExecution execution = proc.prepareExecution();        // omitting required input parameter        execution.addOutput( "Centroid", null, null, true, null, null, null );        execution.execute();        Assert.assertTrue(execution.getState() != ExecutionState.SUCCEEDED); // we shouldn't arrive here    }
@Test(timeout = 4000)	  public void testisNotEmpty()  throws Throwable  {	      String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0);	      StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{");	      ArrayList<Object> arrayList0 = new ArrayList<Object>();	      ListIterator<Object> listIterator0 = arrayList0.listIterator();	      StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{");	      StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{");	      StringUtils.isAllUpperCase("*aKUDx7dwU3mi-y:{");	      StringUtils.substring("t{", 0, 0);	      StringUtils.indexOfDifference((CharSequence) "*aKUDx7dwU3mi-y:{", (CharSequence) "t{");	      double[] doubleArray0 = new double[1];	      doubleArray0[0] = (double) 0;	      arrayList0.add((Object) "");	      arrayList0.add(0, (Object) "*aKUDx7dwU3mi-y:{");	      StringUtils.join(doubleArray0, '}');	      StringUtils.center("", 0);	      arrayList0.add((Object) "null comparator");	      StringWriter stringWriter0 = new StringWriter(0);	      StringBuffer stringBuffer0 = stringWriter0.getBuffer();	      StringUtils.isNumericSpace(stringBuffer0);	      StringUtils.left("", 0);	      StringUtils.startsWith("", "g?PZ{DRa[O6upHJ");	      StringUtils.join((Object[]) stringArray0, '}');	      StringUtils.contains((CharSequence) "*}KU}x7dwU3mi-y:", (CharSequence) "");	      StringUtils.strip("0.0");	      StringUtils.join((Iterable<?>) arrayList0, '}');	      StringUtils.splitByCharacterType("*}KU}x7dwU3mi-y:");	      StringUtils.startsWithAny("", stringArray0);	      // Undeclared exception!	      try { 	        StringUtils.join((Iterator<?>) listIterator0, '}');	        fail("Expecting exception: ConcurrentModificationException");	      	      } catch(ConcurrentModificationException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.util.ArrayList$Itr", e);	      }	  }
@Test  public void testRetryStrategyNone() throws Exception {    WorkflowDefinitionImpl def = new WorkflowDefinitionImpl();    def.setId("workflow-definition-1");    def.setTitle("workflow-definition-1");    def.setDescription("workflow-definition-1");    WorkflowOperationDefinitionImpl opDef = new WorkflowOperationDefinitionImpl("failOneTime", "fails once", null, true);    def.add(opDef);    MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder().createNew();    WorkflowInstance workflow = startAndWait(def, mp, WorkflowState.FAILED);    Assert.assertTrue(service.getWorkflowById(workflow.getId()).getOperations().get(0).getState() == OperationState.FAILED);    Assert.assertTrue(service.getWorkflowById(workflow.getId()).getOperations().get(0).getMaxAttempts() == 1);    Assert.assertTrue(service.getWorkflowById(workflow.getId()).getOperations().get(0).getFailedAttempts() == 1);  }
@Test	public void classMapTest1() throws Exception {		Mapper mapper = new Mapper("global-pro.xml");		Book book = new Book();		InnerBook innerBook = new InnerBook();		innerBook.setName("123");		book.setDate(new Date());		book.setAge(23);		book.setExclude("summary");		book.setInnerBook(innerBook);		Book targetBook = new Book();		targetBook.setAge(100);		InnerBook targetInnerBook = new InnerBook();		targetInnerBook.setName("999");		targetBook.setInnerBook(targetInnerBook);		targetBook = mapper.map(book, targetBook);		Assert.assertEquals(23, targetBook.getAge().intValue());		Assert.assertEquals("123", targetBook.getInnerBook().getName());		Assert.assertEquals("summary", targetBook.getExclude());	}
@Test    void testEqualityNegativeBecauseGroup() {        Assertions.assertEquals(false, referenceA.equals(differentGroup));        Assertions.assertEquals(false, differentGroup.equals(referenceA));    }
@Test  public void testGrantPrivilege() throws Exception {    testGrantPrivilege(sentryStore, SEARCH);  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder((-466));	      assertNull(strBuilder0.getNewLineText());	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";	      objectArray0[1] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";	      objectArray0[2] = (Object) strBuilder0;	      objectArray0[3] = (Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader";	      StrBuilder strBuilder1 = strBuilder0.append("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", objectArray0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	  }
@Test    public void openLastLink() throws Exception {        when(librarian.isOSISLinkValid(any())).thenReturn(false);        when(preferenceHelper.getLastRead()).thenReturn("RST.Gen.1");        presenter.openLastLink();        verify(preferenceHelper).getLastRead();        verify(librarian).isOSISLinkValid(any());        verify(view).openLibraryActivity();    }
@Test(timeout = 4000)	  public void testcapitalize()  throws Throwable  {	      char[] charArray0 = new char[5];	      String string0 = WordUtils.capitalize((String) null, charArray0);	  }
@Test public void testNotifyLoadingFinishedWithoutRegisteredListener() {		// Arrange:		final WebFragment fragment = new WebFragment();		// Act:		// Only ensure that calling this method without registered listener does not cause any troubles.		fragment.notifyLoadingFinished("test_url");	}
@Test  public void testEquivalence() throws Exception {    final Date now = new Date();    Map<String, String> parameters = new HashMap<>();    parameters.put("param", "value");    parameters.put("param-2", "value-2");    final JaxbIncident dto = new JaxbIncident(new IncidentImpl(            1, 2, "service", "localhost", now, Severity.FAILURE, "code",            Arrays.asList(tuple("detail-1", "value-1"), tuple("detail-2", "detail-2")),            parameters));    final Incident incident = dto.toIncident();    run(Incident.class, new Incident() {      @Override public long getId() {        assertEquals("id transferred", 1L, incident.getId());        return 0;      }      @Override public long getJobId() {        assertEquals("jobId transferred", 2L, incident.getJobId());        return 0;      }      @Override public String getServiceType() {        assertEquals("serviceType transferred", "service", incident.getServiceType());        return null;      }      @Override public String getProcessingHost() {        assertEquals("processingHost transferred", "localhost", incident.getProcessingHost());        return null;      }      @Override public Date getTimestamp() {        assertEquals("timestamp transferred", now, incident.getTimestamp());        return null;      }      @Override public Severity getSeverity() {        assertEquals("severity transferred", Severity.FAILURE, incident.getSeverity());        return null;      }      @Override public String getCode() {        assertEquals("code transferred", "code", incident.getCode());        return null;      }      @Override public List<Tuple<String, String>> getDetails() {        assertEquals("details transferred",                     Arrays.asList(tuple("detail-1", "value-1"), tuple("detail-2", "detail-2")),                     incident.getDetails());        return null;      }      @Override public Map<String, String> getDescriptionParameters() {        Map<String, String> parameters = new HashMap<>();        parameters.put("param", "value");        parameters.put("param-2", "value-2");        assertEquals("decriptionParameters transferred",                     parameters,                     incident.getDescriptionParameters());        return null;      }    });  }
@Test(timeout = 4000)	  public void testgetContentEnd()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null);	      assertEquals("]", standardToStringStyle0.getContentEnd());	  }
@Test(timeout = 4000)	  public void testgetTokenList()  throws Throwable  {	      StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance();	      List<String> list0 = strTokenizer0.getTokenList();	  }
@SuppressWarnings("boxing")    @Test    public void testFilter13()                            throws XMLStreamException, FactoryConfigurationError, IOException {        Filter result = parse( "v100/testfilter13.xml" );        OperatorFilter opFilter = (OperatorFilter) result;        Overlaps overlaps = (Overlaps) opFilter.getOperator();        Object[] params = overlaps.getParams();        ValueReference propName = (ValueReference) params[0];        assertEquals( "Geometry", propName.getAsText() );        Polygon polygon = (Polygon) params[1];        LinearRing linearRing = (LinearRing) polygon.getExteriorRing();        Points points = linearRing.getControlPoints();        assertEquals( 0.0, points.get( 0 ).get0() );        assertEquals( 0.0, points.get( 0 ).get1() );        assertEquals( 1.0, points.get( 1 ).get0() );        assertEquals( 1.0, points.get( 1 ).get1() );        assertEquals( 1.0, points.get( 2 ).get0() );        assertEquals( 2.0, points.get( 2 ).get1() );        assertEquals( 2.0, points.get( 3 ).get0() );        assertEquals( 2.0, points.get( 3 ).get1() );    }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder((-1));	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      	      StrMatcher strMatcher0 = StrMatcher.spaceMatcher();	      	      String string0 = "iVO";	      StrMatcher strMatcher1 = StrMatcher.stringMatcher("iVO");	      	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("x~DPyO[EG\"4:");	      	      StrMatcher strMatcher3 = StrMatcher.charSetMatcher("iVO");	      	      int int0 = strBuilder0.indexOf(strMatcher0);	      	      StrBuilder strBuilder1 = new StrBuilder(0);	      	      StrMatcher strMatcher4 = StrMatcher.spaceMatcher();	      	      StrBuilder strBuilder2 = strBuilder1.replaceFirst(strMatcher4, (String) null);	      	      boolean boolean0 = strBuilder0.equalsIgnoreCase(strBuilder1);	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      int int1 = strBuilder_StrBuilderReader0.read();	      	      // Undeclared exception!	      try { 	        strBuilder0.insert((-1), "%;$c19wXmzsg6Q");	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testsubarray()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      boolean[] booleanArray1 = ArrayUtils.subarray(booleanArray0, 0, (-3115));	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      double[] doubleArray0 = new double[4];	      doubleArray0[0] = (-1123.413941);	      doubleArray0[1] = 0.0;	      doubleArray0[2] = 6273.6721243;	      doubleArray0[3] = 0.0;	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(doubleArray0, (double[]) null);	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int[]) null, (int[]) null);	      char[] charArray0 = new char[1];	      charArray0[0] = '0';	      char[] charArray1 = new char[4];	      charArray1[0] = '0';	      charArray1[1] = '0';	      charArray1[2] = '0';	      charArray1[3] = '0';	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(charArray0, charArray1);	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(false, true);	      EqualsBuilder equalsBuilder5 = equalsBuilder4.append((Object) "Cannot get the toString of a null identity", (Object) equalsBuilder2);	      EqualsBuilder equalsBuilder6 = equalsBuilder5.append((byte)31, (byte)101);	  }
@Test  public void testRemoveLivePublicationChannel() throws Exception {    URI mpURI = LiveScheduleServiceImplTest.class.getResource("/assetmanager-mp-with-live.xml").toURI();    MediaPackage mp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder()            .loadFromXml(mpURI.toURL().openStream());    replayServices();    service.removeLivePublicationChannel(mp);    Publication[] publications = mp.getPublications();    Assert.assertEquals(0, publications.length);  }
@Config(sdk = {Build.VERSION_CODES.JELLY_BEAN, Build.VERSION_CODES.LOLLIPOP})	@Test public void testSharedElementEnterTransition() {		// Arrange:    	final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		final Object transition = createTestTransition();		// Act + Assert:		assertThat(request.sharedElementEnterTransition(transition), is(request));		assertThat(request.sharedElementEnterTransition(), is(transition));		assertThat(request.hasTransition(FragmentRequest.TRANSITION_SHARED_ELEMENT_ENTER), is(true));	}
@Test(timeout = 4000)	  public void testjoin()  throws Throwable  {	      byte[] byteArray0 = new byte[7];	      byteArray0[0] = (byte)51;	      byteArray0[1] = (byte)127;	      byteArray0[2] = (byte)25;	      byteArray0[3] = (byte)14;	      byteArray0[4] = (byte)65;	      byteArray0[5] = (byte) (-1);	      byteArray0[6] = (byte)32;	      String string0 = StringUtils.join(byteArray0, '[');	      	      boolean boolean0 = StringUtils.equals((CharSequence) "51[127[25[14[65[-1[32", (CharSequence) "51[127[25[14[65[-1[32");	  }
@Test(expected=IllegalArgumentException.class)  public void testEmptyValue() throws Exception {    System.out.println(KafkaModelAuthorizables.from("HOST="));  }
@Test(timeout = 4000)	  public void testreset()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      boolean[] booleanArray0 = new boolean[2];	      booleanArray0[0] = true;	      booleanArray0[1] = false;	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(booleanArray0, (boolean[]) null);	      Class<String> class0 = String.class;	      String[] stringArray0 = new String[0];	      EqualsBuilder.reflectionEquals((Object) equalsBuilder1, (Object) equalsBuilder1, true, (Class<?>) class0, stringArray0);	      EqualsBuilder equalsBuilder2 = equalsBuilder1.appendSuper(true);	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(0L, 0L);	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append('E', 'E');	      Object[] objectArray0 = new Object[3];	      equalsBuilder2.append((float[]) null, (float[]) null);	      objectArray0[0] = (Object) equalsBuilder0;	      objectArray0[1] = (Object) true;	      objectArray0[2] = (Object) equalsBuilder4;	      EqualsBuilder.reflectionEquals((Object) null, (Object) null, false);	      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(objectArray0, objectArray0);	      equalsBuilder5.appendSuper(true);	      	      EqualsBuilder.getRegistry();	      equalsBuilder1.reset();	      IDKey iDKey0 = new IDKey((Object) null);	      Object object0 = new Object();	      EqualsBuilder.isRegistered(iDKey0, object0);	      equalsBuilder2.append((byte)73, (byte)73);	  }
@Test(timeout = 4000)	  public void testsplit()  throws Throwable  {	      String string0 = StringUtils.repeat((String) null, 2752);	      	      String string1 = StringUtils.stripEnd("O~Lg/6aBF", "");	      	      String[] stringArray0 = StringUtils.split((String) null, "_:", (-712));	      	      String string2 = StringUtils.upperCase("Threshold must not be negative");	      	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "O~Lg/6aBF", "Index: ");	      	      String[] stringArray1 = new String[8];	      stringArray1[0] = "Threshold must not be negative";	      stringArray1[1] = "";	      stringArray1[2] = "_:";	      stringArray1[3] = "KRy1cy(Ak\u001B";	      stringArray1[4] = null;	      stringArray1[5] = "THRESHOLD MUST NOT BE NEGATIVE";	      stringArray1[6] = ",8#)2v.^6f";	      stringArray1[7] = null;	      String string3 = StringUtils.getCommonPrefix(stringArray1);	      	      float[] floatArray0 = new float[5];	      floatArray0[0] = (float) 2752;	      floatArray0[1] = (-1.0F);	      floatArray0[2] = (float) (-712);	      floatArray0[3] = (float) (-712);	      floatArray0[4] = (float) (-712);	      String string4 = StringUtils.join(floatArray0, ';');-1.0;-712.0;-712.0;-712.0", string4);	      	      // Undeclared exception!	      try { 	        StringUtils.join((Object[]) stringArray1, "", (-2164), 1116);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // -2164	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testdeleteAll()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) null, 9, '>');	      	      StrBuilder strBuilder2 = strBuilder0.deleteAll('F');	      	      StrBuilder strBuilder3 = strBuilder2.append('F');	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      	      String string0 = strBuilder_StrBuilderTokenizer0.getContent();	      	      StrBuilder strBuilder4 = strBuilder0.replaceFirst((String) null, (String) null);	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder1.new StrBuilderWriter();	      	      strBuilder_StrBuilderWriter0.write(9);	      	      StrBuilder strBuilder5 = strBuilder1.appendPadding((-414), '=');	      	      StrBuilder strBuilder6 = strBuilder1.append(">>>>>>>>>F");	  }
@Test  public void testRenameTable() {    String sql = "RENAME TABLE db2.table3 TO db2.table4";    QueryEvent event = new QueryEvent(1L, TIMESTAMP, BINLOG_FILE_POS, "db2", sql);    when(schemaDatabase.getColumnsForAllTables("db2"))        .thenReturn(ImmutableMap.of("table4", TABLE3_COLUMNS));    schemaManager.processDDL(event, GTID);    verify(schemaDatabase).applyDDL(sql, "db2");    verify(schemaStore)        .put(            new MysqlTableSchema(                0,                "db2",                "table3",                BINLOG_FILE_POS,                GTID,                sql,                TIMESTAMP,                Collections.emptyList(),                Collections.emptyMap()));    verify(schemaStore)        .put(            new MysqlTableSchema(                0,                "db2",                "table4",                BINLOG_FILE_POS,                GTID,                sql,                TIMESTAMP,                TABLE3_COLUMNS,                Collections.emptyMap()));  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("F");	      	      StrBuilder strBuilder1 = strBuilder0.deleteFirst('e');	      	      StrBuilder strBuilder2 = strBuilder0.insert(0, "F");	      	      StrBuilder strBuilder3 = strBuilder2.deleteAll('#');	      	      StrBuilder strBuilder4 = strBuilder0.append(598L);	      	      String string0 = strBuilder0.toString();	      	      StrBuilder strBuilder5 = strBuilder4.reverse();	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      char[] charArray0 = new char[8];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      charArray0[2] = 'K';	      charArray0[3] = 'e';	      int int0 = strBuilder2.indexOf((StrMatcher) null);	      	      charArray0[4] = 'e';	      charArray0[5] = 'e';	      charArray0[6] = 'e';	      charArray0[7] = 'e';	      int int1 = strBuilder_StrBuilderReader0.read(charArray0);	      	      int int2 = 1354;	      strBuilder_StrBuilderReader0.mark(1354);	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder3.new StrBuilderTokenizer();	      	      // Undeclared exception!	      try { 	        strBuilder_StrBuilderTokenizer0.previous();	        fail("Expecting exception: NoSuchElementException");	      	      } catch(NoSuchElementException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.StrTokenizer", e);	      }	  }
@Test(timeout = 4000)	  public void testCONST()  throws Throwable  {	      short short0 = ObjectUtils.CONST((short) (-1480));	  }
@Test    public void testPolygonStylingPerpendicularOffset()                            throws Exception {        BufferedImage img = new BufferedImage( 100, 100, TYPE_INT_ARGB );        long time = currentTimeMillis();        Graphics2D g = img.createGraphics();        GeometryFactory geomFac = new GeometryFactory();        Java2DRenderer r = new Java2DRenderer( g, img.getWidth(), img.getHeight(),                                               geomFac.createEnvelope( new double[] { 0, 0 },                                                                       new double[] { 100d, 100d }, mapcs ) );        PolygonStyling styling = new PolygonStyling();        styling.stroke = new Stroke();        styling.stroke.strokeGap = 7;        styling.stroke.width = 1;        styling.stroke.stroke = new Graphic();        styling.stroke.stroke.size = 5;        styling.stroke.stroke.mark.fill.color = red;        styling.stroke.stroke.mark.wellKnown = SimpleMark.TRIANGLE;        styling.stroke.stroke.mark.stroke.color = red;        styling.stroke.stroke.mark.stroke.width = 0;        styling.fill = new Fill();        styling.fill.color = white;        styling.perpendicularOffset = -4;        Envelope envelope = geomFac.createEnvelope( 10, 10, 300, 300, null );        r.render( styling, envelope );        g.dispose();        long time2 = currentTimeMillis();        List<String> texts = new LinkedList<String>();        texts.add( "polygon: white rectangle with red triangle stroke and perpendicular offest of -4. Expected: triangles points to the INSIDE of the geometry!" );        validateImage( img, time2 - time, "polygonstylingperpendicularoffset" );    }
@Test(timeout = 4000)	  public void testis()  throws Throwable  {	      CharRange charRange0 = CharRange.is('6');	      boolean boolean0 = charRange0.contains(charRange0);	      assertFalse(charRange0.isNegated());	  }
@Test    public void shouldHaveChanges() throws Exception {        assertThat(new IllegalCombination(), hasChanges(equalTo(true)));    }
@Test    public void testEqualKeywordFilter()                            throws Exception {        LOG.info( "START Test: testInsert" );        initStore( TstConstants.configURL );        Assume.assumeNotNull( store );        TstUtils.insertMetadata( store, TstConstants.tst_9, TstConstants.tst_10 );        Literal<PrimitiveValue> lit2 = new Literal<PrimitiveValue>( "SPOT 5" );        Operator op = new PropertyIsEqualTo( new ValueReference( "Subject", nsContext ), lit2, true, null );        Filter filter = new OperatorFilter( op );        MetadataQuery query = new MetadataQuery( null, null, filter, null, 1, 10 );        int recordCount = store.getRecordCount( query );        Assert.assertEquals( 1, recordCount );    }
@Test    public void givenStringTheme$setColorTheme_whenQuery_thenShouldCallNativeApiWithTheme() {        // given        PowerMockito.mockStatic(Instabug.class);        Map<String, Object> themesArgs = new HashMap<>();        ArgsRegistry.registerColorThemeArgs(themesArgs);        final String[] keysArray = themesArgs.keySet().toArray(new String[0]);        // when        for (String key: keysArray) {            rnModule.setColorTheme(key);        }        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        for (String key : keysArray) {            InstabugColorTheme theme = (InstabugColorTheme) themesArgs.get(key);            Instabug.setColorTheme(theme);        }    }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("java.library.path");	      assertFalse(strBuilder0.isEmpty());	      	      StrBuilder strBuilder1 = strBuilder0.appendSeparator('h');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      int int0 = strBuilder0.indexOf('d');	      assertFalse(strBuilder0.isEmpty());	      	      StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      	      StrBuilder strBuilder4 = strBuilder1.appendln('h');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder4.isEmpty());	      	      StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd');	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      assertFalse(strBuilder5.isEmpty());	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'd';	      charArray0[1] = '%';	      IntStream intStream0 = strBuilder2.chars();	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      Reader reader0 = strBuilder0.asReader();	      assertFalse(strBuilder0.isEmpty());	      	      charArray0[2] = 'd';	      charArray0[3] = 'h';	      charArray0[4] = 'd';	      char[] charArray1 = strBuilder3.getChars(charArray0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      	      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();	      	      StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder6.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      IntStream intStream1 = strBuilder6.chars();	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder6.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44));	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder7.isEmpty());	      	      StrBuilder strBuilder8 = strBuilder2.setLength(18);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      assertFalse(strBuilder8.isEmpty());	      	      StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path");	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder7.isEmpty());	      assertFalse(strBuilder9.isEmpty());	  }
@Test  public void testRollOver() throws Throwable {    if (dataDir == null) {      fail("Excepted temp folder for audit log is created.");    }    RollingFileWithoutDeleteAppender appender = new RollingFileWithoutDeleteAppender(        new PatternLayout("%m%n"), dataDir.getPath() + "/auditLog.log");    appender.setMaximumFileSize(100);    sentryLogger.addAppender(appender);    // Write exactly 10 bytes with each log    for (int i = 0; i < 99; i++) {      if (i < 10) {        sentryLogger.debug("Hello---" + i);      } else if (i < 100) {        sentryLogger.debug("Hello--" + i);      }    }    if (dataDir != null) {      File[] files = dataDir.listFiles();      if (files != null) {        assertEquals(files.length, 10);      } else {        fail("Excepted 10 log files.");      }    } else {      fail("Excepted 10 log files.");    }  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      String string0 = StringUtils.replace("(?: s|[s&&[^ ]])s*", (String) null, (String) null, 2);	      	      String string1 = StringUtils.chop("");	      	      boolean boolean0 = StringUtils.isAllLowerCase("");	      	      short[] shortArray0 = new short[2];	      shortArray0[0] = (short)947;	      shortArray0[1] = (short)7;	      String string2 = StringUtils.join(shortArray0, 'j');	      assertEquals(2, shortArray0.length);	      	      String[] stringArray0 = new String[6];	      stringArray0[0] = null;	      stringArray0[1] = "(?: s|[s&&[^ ]])s*";	      stringArray0[2] = "";	      stringArray0[3] = "Y&WlANKSO=(p&";	      stringArray0[4] = "";	      stringArray0[5] = "947j7";	      String[] stringArray1 = new String[8];	      	      stringArray1[0] = "Y&WlANKSO=(p&";	      stringArray1[1] = "(?: s|[s&&[^ ]])s*";	      stringArray1[2] = "";	      stringArray1[3] = "947j7";	      stringArray1[4] = "(?: s|[s&&[^ ]])s*";	      stringArray1[5] = "(?: s|[s&&[^ ]])s*";	      stringArray1[6] = "947j7";	      stringArray1[7] = "(?: s|[s&&[^ ]])s*";	      String string3 = StringUtils.replaceEachRepeatedly((String) null, stringArray0, stringArray1);	      assertEquals(6, stringArray0.length);	      assertEquals(8, stringArray1.length);	      	      int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) null, (-1599));	  }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      int int0 = ArrayUtils.indexOf((int[]) null, (-3070), (-3070));	  }
@Test(timeout = 4000)	  public void testadjustYear()  throws Throwable  {	      ZoneOffset zoneOffset0 = ZoneOffset.MAX;	      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);	      Locale locale0 = new Locale("hw!%y", "hw!%y", "");	      FastDateParser fastDateParser0 = new FastDateParser("hw!%y", timeZone0, locale0);	      int int0 = fastDateParser0.adjustYear((-173));	  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(0, strBuilder0.size());	      	      strBuilder0.size = 6;	      assertEquals(6, strBuilder0.size());	      	      StrBuilder strBuilder1 = strBuilder0.replaceFirst('#', '#');	      assertEquals(6, strBuilder0.size());	      assertEquals(6, strBuilder1.size());	      	      String string0 = strBuilder1.toString();	      assertEquals(6, strBuilder0.size());	      assertEquals(6, strBuilder1.size());	      	      StrBuilder strBuilder2 = strBuilder1.append(6);	      assertEquals(7, strBuilder0.size());	      assertEquals(7, strBuilder1.size());	      assertEquals(7, strBuilder2.size());	      	      boolean boolean0 = strBuilder2.equals((Object) strBuilder0);	      assertEquals(7, strBuilder0.size());	      assertEquals(7, strBuilder1.size());	      assertEquals(7, strBuilder2.size());	      	      StrBuilder strBuilder3 = strBuilder0.append((String) null, 6, 1077);	      assertEquals(7, strBuilder0.size());	      assertEquals(7, strBuilder3.size());	      	      boolean boolean1 = strBuilder2.equals(strBuilder3);	      assertEquals(7, strBuilder0.size());	      assertEquals(7, strBuilder1.size());	      assertEquals(7, strBuilder2.size());	      assertEquals(7, strBuilder3.size());	      	      char[] charArray0 = new char[5];	      charArray0[0] = '#';	      charArray0[1] = '#';	      charArray0[2] = '#';	      charArray0[3] = '#';	      StrBuilder strBuilder4 = strBuilder1.appendln(0L);	      assertEquals(9, strBuilder0.size());	      assertEquals(9, strBuilder1.size());	      assertEquals(9, strBuilder4.size());	      	      StrBuilder strBuilder5 = strBuilder1.replaceAll("", "\u0000\u0000\u0000\u0000\u0000\u0000");	      assertEquals(9, strBuilder0.size());	      assertEquals(9, strBuilder1.size());	      assertEquals(9, strBuilder5.size());	      	      charArray0[4] = '#';	      StrBuilder strBuilder6 = strBuilder2.appendln(charArray0, 0, 0);	      assertEquals(10, strBuilder6.size());	      assertEquals(10, strBuilder0.size());	      assertEquals(10, strBuilder1.size());	      assertEquals(10, strBuilder2.size());	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder6.new StrBuilderReader();	      assertEquals(10, strBuilder6.size());	      assertEquals(10, strBuilder0.size());	      assertEquals(10, strBuilder1.size());	      assertEquals(10, strBuilder2.size());	      	      // Undeclared exception!	      try { 	        strBuilder_StrBuilderReader0.read(charArray0, 1724, 0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder$StrBuilderReader", e);	      }	  }
@Test(timeout = 4000)	  public void testready()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("java.library.path");	      	      StrBuilder strBuilder1 = strBuilder0.appendSeparator('h');	      	      StrBuilder strBuilder2 = strBuilder0.appendPadding(5, 'd');	      	      int int0 = strBuilder0.indexOf('d');	      	      StrBuilder strBuilder3 = strBuilder0.append((CharSequence) strBuilder1);	      	      StrBuilder strBuilder4 = strBuilder1.appendln('h');	      	      StrBuilder strBuilder5 = strBuilder3.appendFixedWidthPadRight((Object) strBuilder2, (-1089), 'd');	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'd';	      charArray0[1] = '%';	      IntStream intStream0 = strBuilder2.chars();	      	      Reader reader0 = strBuilder0.asReader();	      assertTrue(reader0.ready());	      	      charArray0[2] = 'd';	      charArray0[3] = 'h';	      charArray0[4] = 'd';	      char[] charArray1 = strBuilder3.getChars(charArray0);	      	      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();	      	      StrBuilder strBuilder6 = strBuilder2.replace(strMatcher0, "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer", 5, 5, 5);	      	      IntStream intStream1 = strBuilder6.chars();	      	      StrBuilder strBuilder7 = strBuilder0.insert(18, (-1835.44));	      	      StrBuilder strBuilder8 = strBuilder2.setLength(18);	      	      StrBuilder strBuilder9 = strBuilder7.appendWithSeparators((Iterator<?>) null, "java.library.path");	  }
@Test(timeout = 4000)	  public void testtoComparison()  throws Throwable  {	      CompareToBuilder compareToBuilder0 = new CompareToBuilder();	      	      compareToBuilder0.append((short) (byte)89, (short)1);	      compareToBuilder0.append('2', '2');	      assertEquals(1, compareToBuilder0.toComparison());	  }
@Test public void testOnCreateAnnotationHandler() {		// Arrange:		final WebFragment fragment = new WebFragment();		// Act:		final WebFragmentAnnotationHandler annotationHandler = fragment.onCreateAnnotationHandler();		// Assert:		assertThat(annotationHandler, is(notNullValue()));		assertThat(annotationHandler, is(fragment.onCreateAnnotationHandler()));	}
@Test(timeout = 4000)	  public void testlastOrdinalIndexOf()  throws Throwable  {	      String string0 = StringUtils.replace("8k6QxtK(M7Eg", "8k6QxtK(M7Eg", "8k6QxtK(M7Eg", (-185));	      	      CharSequence[] charSequenceArray0 = new CharSequence[9];	      charSequenceArray0[0] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[1] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[2] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[3] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[4] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[5] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[6] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[7] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[8] = (CharSequence) "8k6QxtK(M7Eg";	      int int0 = StringUtils.lastIndexOfAny("8k6QxtK(M7Eg", charSequenceArray0);	      	      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[8], "8k6QxtK(M7Eg");	      	      String string1 = StringUtils.substringAfterLast("8k6QxtK(M7Eg", "8k6QxtK(M7Eg");	      	      int int1 = StringUtils.countMatches(charSequenceArray0[6], charSequenceArray0[4]);	      	      int int2 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[3], "8k6QxtK(M7Eg", 0);	      	      String[] stringArray0 = new String[9];	      stringArray0[0] = "";	      stringArray0[1] = "8k6QxtK(M7Eg";	      stringArray0[2] = "";	      stringArray0[3] = "8k6QxtK(M7Eg";	      stringArray0[4] = "8k6QxtK(M7Eg";	      stringArray0[5] = "8k6QxtK(M7Eg";	      stringArray0[6] = "";	      stringArray0[7] = "";	      stringArray0[8] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	  }
@SuppressWarnings("ConstantConditions")	@Test public void testSharedElement() {		// Arrange:    	final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		final View firstElement = new View(context);		final View secondElement = new View(context);		final View thirdElement = new View(context);		// Act:		request.sharedElement(firstElement, "first_element");		request.sharedElement(secondElement, "second_element");		request.sharedElement(thirdElement, "third_element");		// Assert:		final List<Pair<View, String>> sharedElements = request.sharedElements();		assertThat(sharedElements, is(notNullValue()));		assertThat(sharedElements.size(), is(3));		assertThat(sharedElements.get(0).first, is(firstElement));		assertThat(sharedElements.get(0).second, is("first_element"));		assertThat(sharedElements.get(1).first, is(secondElement));		assertThat(sharedElements.get(1).second, is("second_element"));		assertThat(sharedElements.get(2).first, is(thirdElement));		assertThat(sharedElements.get(2).second, is("third_element"));	}
@Test    public void testSetAttributeWeightTimestamp() {        Configuration config = new Configuration();        config.setEdgeWeightType(TimestampDoubleMap.class);        GraphStore graphStore = GraphGenerator.generateTinyGraphStore(config);        Edge e = graphStore.getEdge("0");        Column col = graphStore.edgeTable.getColumn(GraphStoreConfiguration.EDGE_WEIGHT_INDEX);        TimestampDoubleMap wm = new TimestampDoubleMap();        wm.put(1.0, 10.0);        wm.put(2.0, 20.0);        e.setAttribute(col, wm);        Assert.assertEquals(e.getWeight(1.0), 10.0);        Assert.assertEquals(e.getWeight(2.0), 20.0);    }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      StrBuilder strBuilder1 = new StrBuilder((String) null);	      	      char[] charArray0 = new char[8];	      charArray0[0] = 'i';	      charArray0[1] = '~';	      charArray0[2] = 'i';	      charArray0[3] = 'i';	      charArray0[4] = 'i';	      charArray0[5] = 'i';	      charArray0[6] = 'i';	      charArray0[7] = 'i';	      StrMatcher.CharSetMatcher strMatcher_CharSetMatcher0 = new StrMatcher.CharSetMatcher(charArray0);	      	      StrBuilder strBuilder2 = strBuilder0.deleteAll((StrMatcher) strMatcher_CharSetMatcher0);	      	      StrBuilder strBuilder3 = strBuilder0.appendFixedWidthPadRight((Object) strBuilder1, 0, 'i');	      	      StrBuilder strBuilder4 = strBuilder1.appendln((double) 0);	      	      int int0 = strBuilder4.lastIndexOf('l', 103);	      	      StrBuilder strBuilder5 = strBuilder0.appendAll((Iterable<?>) null);	      	      StrBuilder strBuilder6 = strBuilder0.appendSeparator((String) null);	  }
@Test    public void testIsValidPrivateKey() {        assertTrue(isValidPrivateKey(SampleKeys.PRIVATE_KEY_STRING));        assertTrue(isValidPrivateKey(Numeric.prependHexPrefix(SampleKeys.PRIVATE_KEY_STRING)));        assertFalse(isValidPrivateKey(""));        assertFalse(isValidPrivateKey(SampleKeys.PRIVATE_KEY_STRING + "a"));        assertFalse(isValidPrivateKey(SampleKeys.PRIVATE_KEY_STRING.substring(1)));    }
@Test  public void testCollection() throws Exception {    Collection coll = (Collection)SearchModelAuthorizables.from("CoLleCtiOn=collection1");    assertEquals("collection1", coll.getName());  }
@Test    public void test_V100_EXAMPLE_5()                            throws Exception {        URL exampleURL = this.getClass().getResource( V100_EXAMPLE_5 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        List<Query> queries = getFeature.getQueries();        FeatureIdQuery query = (FeatureIdQuery) queries.get( 0 );        assertEquals( "INWATERA_1M.1013", query.getFeatureIds()[0] );        assertEquals( "INWATERA_1M.1014", query.getFeatureIds()[1] );        assertEquals( "INWATERA_1M.1015", query.getFeatureIds()[2] );    }
@Test(timeout = 4000)	  public void testisEmptyTokenAsNull()  throws Throwable  {	      StrMatcher strMatcher0 = StrMatcher.doubleQuoteMatcher();	      StrTokenizer strTokenizer0 = new StrTokenizer("`<j[.Hj#z$ak.1\"Rd", strMatcher0);	      strTokenizer0.getQuoteMatcher();	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	  }
@Test(timeout = 4000)	  public void testsplitPreserveAllTokens()  throws Throwable  {	      String string0 = StringUtils.upperCase("(?: s|[s&&[^ ]])s*");	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens("", "(?: s|[s&&[^ ]])s*");	      	      String string1 = StringUtils.abbreviate("3IuE><k!zXW;MqbjZL", 8192);MqbjZL", string1);	      	      String string2 = StringUtils.chomp("(?: s|[s&&[^ ]])s*");	      	      String string3 = StringUtils.left("}b 4x", 90);	      	      String string4 = StringUtils.stripStart("3IuE><k!zXW;MqbjZL", "");MqbjZL", string4);	      	      float[] floatArray0 = new float[4];	      floatArray0[0] = (float) 8192;	      floatArray0[1] = (float) 90;	      floatArray0[2] = (float) 90;	      floatArray0[3] = (float) 8192;	      String string5 = StringUtils.join(floatArray0, '{');	      	      String string6 = StringUtils.replaceChars("kX#", '?', 'l');	      	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "kX#", "(?: S|[S&&[^ ]])S*");	      	      int int0 = StringUtils.ordinalIndexOf("3IuE><k!zXW;MqbjZL", "(?: S|[S&&[^ ]])S*", 8192);	      	      TreeSet<String> treeSet0 = new TreeSet<String>();	      	      Iterator<String> iterator0 = treeSet0.descendingIterator();	      	      String string7 = StringUtils.join(iterator0, "");	      	      String string8 = StringUtils.normalizeSpace(" ");	  }
@Test(timeout = 4000)	  public void testisUseIdentityHashCode()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      standardToStringStyle0.SIMPLE_STYLE.setContentEnd((String) null);	      assertTrue(standardToStringStyle0.isUseIdentityHashCode());	  }
@Test(timeout = 4000)	  public void testconstantFuture()  throws Throwable  {	      Object object0 = new Object();	      ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Object>(object0);	      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());	      Future<Callable<Object>> future0 = ConcurrentUtils.constantFuture(callable0);	      Thread thread0 = MockThread.currentThread();	      ForkJoinTask<String> forkJoinTask0 = ForkJoinTask.adapt((Runnable) thread0, "I");	      forkJoinTask0.isCancelled();	      ConcurrentUtils.ConstantFuture<ForkJoinTask<String>> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<ForkJoinTask<String>>(forkJoinTask0);	      concurrentUtils_ConstantFuture1.isCancelled();	      ExecutionException executionException0 = new ExecutionException((Throwable) null);	      ConcurrentUtils.handleCause(executionException0);	      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      ConcurrentSkipListMap<Object, Integer> concurrentSkipListMap0 = new ConcurrentSkipListMap<Object, Integer>(comparator0);	      ConstantInitializer<Integer> constantInitializer0 = new ConstantInitializer<Integer>((Integer) null);	      // Undeclared exception!	      try { 	        ConcurrentUtils.createIfAbsent((ConcurrentMap<Object, Integer>) concurrentSkipListMap0, (Object) future0, (ConcurrentInitializer<Integer>) constantInitializer0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.util.concurrent.ConcurrentSkipListMap", e);	      }	  }
@Test(timeout = 4000)	  public void testsubstringBeforeLast()  throws Throwable  {	      String string0 = StringUtils.trimToEmpty("/>.W_>OH(v");	      	      String string1 = StringUtils.substringBeforeLast("/>.W_>OH(v", "/>.W_>OH(v");	      	      boolean boolean0 = StringUtils.isNumeric("/>.W_>OH(v");	      	      boolean boolean1 = StringUtils.equals((CharSequence) "", (CharSequence) "");	      	      boolean boolean2 = StringUtils.containsNone((CharSequence) "/>.W_>OH(v", "/>.W_>OH(v");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, (String) null, 448);	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "/>.W_>OH(v", 16);	      	      String string2 = StringUtils.rightPad("hjTX0JT.]kFcpFD?ys!", 0, '2');	      	      String[] stringArray1 = StringUtils.stripAll((String[]) null, "/>.W_>OH(v");	      	      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "/>.W_>OH(v");	      	      String string3 = StringUtils.substringBefore((String) null, (String) null);	      	      String string4 = StringUtils.mid("Threshold must not be negative", (-1), 448);	      	      String string5 = "\\u0";	      Locale locale0 = new Locale("hjTX0JT.]kFcpFD?ys!");	      	      Set<String> set0 = locale0.getUnicodeLocaleKeys();	      	      String string6 = locale0.getDisplayCountry();	      	      String string7 = StringUtils.lowerCase(string5, locale0);	      	      String string8 = StringUtils.repeat(' ', 0);	      	      int int2 = StringUtils.countMatches("", (CharSequence) null);	      	      String string9 = StringUtils.substring((String) null, 0);	      	      String string10 = StringUtils.chomp("JWIPE@-hNPn{!:Qj!~M");	      	      byte[] byteArray0 = new byte[2];	      byteArray0[0] = (byte)0;	      byteArray0[1] = (byte) (-128);	      String string11 = StringUtils.join(byteArray0, 'i');	  }
@Test  public void testUpdated() throws Exception {    Dictionary<String, String> properties = new Hashtable<>();    properties.put(TimelinePreviewsServiceImpl.OPT_RESOLUTION_X, "200");    properties.put(TimelinePreviewsServiceImpl.OPT_RESOLUTION_Y, "90");    properties.put(TimelinePreviewsServiceImpl.OPT_OUTPUT_FORMAT, ".jpg");    properties.put(TimelinePreviewsServiceImpl.OPT_MIMETYPE, "image/jpg");    ServiceRegistry serviceRegistry = EasyMock.createNiceMock(ServiceRegistry.class);    EasyMock.expect(serviceRegistry.getHostRegistrations()).andReturn(new ArrayList());    EasyMock.replay(serviceRegistry);    TimelinePreviewsServiceImpl instance = new TimelinePreviewsServiceImpl();    instance.setServiceRegistry(serviceRegistry);    try {      instance.updated(properties);      // we cannot check private fields but it should not throw any exception      assertEquals(200, instance.resolutionX);      assertEquals(90, instance.resolutionY);      assertEquals(".jpg", instance.outputFormat);      assertEquals("image/jpg", instance.mimetype);    } catch (Exception e) {      fail("updated method should not throw any exceptions but has thrown: " + ExceptionUtils.getStackTrace(e));    }  }
@Test(timeout = 4000)	  public void testgetSummaryObjectEndText()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer("AEhzPmLst|m|:e7J{Z");	      standardToStringStyle0.SHORT_PREFIX_STYLE.appendFieldSeparator(stringBuffer0);	      assertEquals(">", standardToStringStyle0.getSummaryObjectEndText());	  }
@Test    public void testEthSign() throws Exception {        web3j.platonSign("0x8a3106a3e50576d4b6794a0e74d3bb5f8c9acaab",                "0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470").send();        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"platon_sign\","                + "\"params\":[\"0x8a3106a3e50576d4b6794a0e74d3bb5f8c9acaab\","                + "\"0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\"],"                + "\"id\":1}");    }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 0, 0, 211, 0, 0, 90);	      Locale locale0 = Locale.TAIWAN;	      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("2ym", simpleTimeZone0, locale0);	      fastDatePrinter0.toString();	  }
@Test(timeout = 4000)	  public void testreplace()  throws Throwable  {	      int int0 = 7;	      StrBuilder strBuilder0 = new StrBuilder(7);	      	      StrBuilder strBuilder1 = strBuilder0.trim();	      	      int int1 = 0;	      int int2 = 32;	      StrBuilder strBuilder2 = strBuilder0.insert(0, 32);	      	      StrBuilder strBuilder3 = strBuilder1.append('r');	      	      StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version");	      	      Integer integer0 = new Integer(0);	      	      StrBuilder strBuilder5 = strBuilder1.insert(0, (Object) integer0);	      	      StrBuilder strBuilder6 = strBuilder0.clear();	      	      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();	      	      String string0 = "";	      boolean boolean0 = false;	      StrBuilder strBuilder7 = strBuilder5.appendln(false);	      	      StrBuilder strBuilder8 = strBuilder6.replaceAll(strMatcher0, "");	      	      char char0 = 'a';	      int int3 = strBuilder0.lastIndexOf('a', 7);	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder5.new StrBuilderWriter();	      	      // Undeclared exception!	      try { 	        strBuilder_StrBuilderWriter0.write("J~TQzXP^tZ:~", 7, 519);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // length must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testcompare()  throws Throwable  {	      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());	      doReturn(0).when(comparator0).compare(anyString() , anyString());	      Range<String> range0 = Range.is("bXp[o%De<Cq", comparator0);	      // Undeclared exception!	      try { 	        range0.toString("bXp[o%De<Cq");	        fail("Expecting exception: UnknownFormatConversionException");	      	      } catch(UnknownFormatConversionException e) {	         //	         // Conversion = 'D'	         //	         verifyException("java.util.Formatter$FormatSpecifier", e);	      }	  }
@Test(timeout = 4000)	  public void testisWhitespace()  throws Throwable  {	      String string0 = StringUtils.substring("", 121, 0);	      	      char[] charArray0 = new char[2];	      charArray0[0] = '<';	      charArray0[1] = '}';	      boolean boolean0 = StringUtils.containsOnly((CharSequence) "", charArray0);	      	      String[] stringArray0 = StringUtils.substringsBetween("", "", "CReF|W$R'NGC&FC?");	      	      boolean boolean1 = StringUtils.startsWith("", "CReF|W$R'NGC&FC?");	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) "", 5164);	      	      String string1 = StringUtils.center("", 121);	      	      String string2 = StringUtils.appendIfMissing("", "                                                                                                                         ", (CharSequence[]) null);	      	      int int1 = StringUtils.indexOfDifference((CharSequence[]) null);	      	      String string3 = StringUtils.overlay("'U-m|b?2SLByQr<S\"J", " vs ", 2029, 0);	      	      String string4 = StringUtils.normalizeSpace("EgF@pTCq");	      	      boolean boolean2 = StringUtils.isWhitespace("EgF@pTCq");	      	      String string5 = StringUtils.trimToNull("M");	      	      int int2 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) "");	      	      String string6 = StringUtils.remove("", 'o');	      	      String string7 = StringUtils.repeat(" vs ", (-1));	  }
@Test    public void testIsValid() throws Exception {        prepareEthGetCode(TEST_CONTRACT_BINARY);        Contract contract = deployContract(createTransactionReceipt());        assertTrue(contract.isValid());    }
@Test  public void testFail() throws WorkflowOperationException {    // setup    operation.setConfiguration("catalog-flavor", "flavor/test");    operation.setConfiguration("catalog-type-collision-behavior", "fail");    // execution    operationHandler.start(instance, null);    expectedException.expect(WorkflowOperationException.class);    operationHandler.start(instance, null);  }
@Test(timeout = 4000)	  public void teststrip()  throws Throwable  {	      byte[] byteArray0 = new byte[0];	      String string0 = StringUtils.join(byteArray0, 'E', (-2572), (-4337));	      	      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "");	      	      boolean boolean0 = StringUtils.isAlpha(charBuffer0);	      	      String[] stringArray0 = StringUtils.split("0<.ZqmcE&?");	      	      String[] stringArray1 = StringUtils.substringsBetween("0<.ZqmcE&?", "", "0<.ZqmcE&?");	      	      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();	      	      boolean boolean1 = arrayDeque0.offerLast(charBuffer0);	      	      String string1 = StringUtils.join((Iterable<?>) arrayDeque0, "O;WZp0oX~i");	      	      String string2 = StringUtils.replaceChars("bUY ;88G%>7Ft", 'k', 'u');88G%>7Ft", string2);	      	      int int0 = StringUtils.lastIndexOf((CharSequence) "bUY ;88G%>7Ft", 1);	      	      boolean boolean2 = StringUtils.isNotBlank(charBuffer0);	      	      String string3 = StringUtils.join(byteArray0, '5');	      	      String string4 = StringUtils.stripEnd("", "");	  }
@Test(timeout = 4000)	  public void testsubstringBefore()  throws Throwable  {	      String string0 = StringUtils.substringBefore("", "s/eB&ED@mIB");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0);	      	      String string1 = StringUtils.rightPad("", 0);	  }
@Test  public void testRetractPreviousElements() throws Exception {    URI mpURI = LiveScheduleServiceImplTest.class.getResource("/live-mp.xml").toURI();    MediaPackage previousMp = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder()            .loadFromXml(mpURI.toURL().openStream());    MediaPackage newMp = (MediaPackage) previousMp.clone();    // Change element url    Catalog catalog = newMp.getCatalog("episode-dc-published");    catalog.setURI(new URI("CHANGED/episode_dublincore.xml"));    Job job = createJob(1L, "anything", "anything");    Capture<Set<String>> capturedElementId = Capture.newInstance();    EasyMock.expect(downloadDistributionService.retract(EasyMock.anyString(), EasyMock.anyObject(MediaPackage.class),            EasyMock.capture(capturedElementId))).andReturn(job);    EasyMock.expect(serviceRegistry.getJob(1L)).andReturn(job).anyTimes();    replayServices();    service.setDownloadDistributionService(downloadDistributionService);    service.retractPreviousElements(previousMp, newMp);    Set<String> ids = capturedElementId.getValue();    Assert.assertEquals(1, ids.size());    Assert.assertEquals("episode-dc-published", ids.iterator().next());    EasyMock.verify(downloadDistributionService);  }
@Test(timeout = 4000)	  public void testisEmptyTokenAsNull()  throws Throwable  {	      StrMatcher strMatcher0 = StrMatcher.quoteMatcher();	      StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0);	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      	      strTokenizer0.setEmptyTokenAsNull(true);	      strTokenizer0.setDelimiterChar('*');	      assertTrue(strTokenizer0.isEmptyTokenAsNull());	  }
@Test    public void pushPromisePadding() {        Http2Frame frame = TestMessages.PUSH_PROMISE_PADDING_FRAME;        assertArrayEquals(TestMessages.PUSH_PROMISE_PADDING_BUFFER, toByteArray(encoder.encode(frame, null)));    }
@Test    public void testColumnVersion() {        ColumnImpl col = new ColumnImpl("c1", int[].class, null, null, Origin.DATA, true, false);        ColumnVersion columnVersion = new ColumnVersion(col);        Assert.assertSame(columnVersion.column, col);        Assert.assertEquals(columnVersion.version.get(), Integer.MIN_VALUE);        Assert.assertEquals(columnVersion.incrementAndGetVersion(), Integer.MIN_VALUE + 1l);        columnVersion.version.set(Integer.MAX_VALUE);        Assert.assertEquals(columnVersion.incrementAndGetVersion(), Integer.MIN_VALUE);    }
@Test(expected = OWSExceptionReport.class)    public void testFailedExecute_2()                            throws Exception {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        WPSClient wpsClient = new WPSClient( new URL( demoWPSURL ) );        Process proc = wpsClient.getProcess( "Centroid" );        ProcessExecution execution = proc.prepareExecution();        // adding invalid input parameter        execution.addLiteralInput( "ThisDoesNotExist", null, "5", "sortOfInteger", "reallyBigUnit" );        execution.executeAsync();        Assert.assertTrue(execution.getState() != ExecutionState.SUCCEEDED); // we shouldn't arrive here    }
@Test(expected = IllegalStateException.class)	public void testGetAnnotationHandlerWhenAnnotationsAreDisabled() {		// Arrange:		FragmentAnnotations.setEnabled(false);		final TestFactory factory = new TestFactory();		// Act:		factory.getAnnotationHandler();	}
@Test(timeout = 4000)	  public void teststripAccents()  throws Throwable  {	      String[] stringArray0 = new String[9];	      stringArray0[0] = "m%v5xStXNflN\"<nkY";	      stringArray0[1] = "m%v5xStXNflN\"<nkY";	      stringArray0[2] = "m%v5xStXNflN\"<nkY";	      stringArray0[3] = "m%v5xStXNflN\"<nkY";	      stringArray0[4] = "m%v5xStXNflN\"<nkY";	      stringArray0[5] = "m%v5xStXNflN\"<nkY";	      stringArray0[6] = "m%v5xStXNflN\"<nkY";	      stringArray0[7] = "m%v5xStXNflN\"<nkY";	      stringArray0[8] = "m%v5xStXNflN\"<nkY";	      String string0 = StringUtils.replaceEach("m%v5xStXNflN\"<nkY", stringArray0, stringArray0);	      	      String string1 = StringUtils.stripAccents("m%v5xStXNflN\"<nkY");	      	      String string2 = StringUtils.join((Object[]) stringArray0, ')', 0, (-2433));	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "m%v5xStXNflN\"<nkY", (CharSequence) "m%v5xStXNflN\"<nkY", (-2433));	  }
@Test    public void testExportSchema()                    throws Exception {        String schemaURL = this.getClass().getResource( "../cite/schema/cite-gmlsf0.xsd" ).toURI().toString();        GMLSchemaInfoSet gmlSchemaInfoSet = new GMLSchemaInfoSet( null, schemaURL );        GMLAppSchemaReader adapter = new GMLAppSchemaReader( GMLVersion.GML_31, null, schemaURL );        AppSchema schema = adapter.extractAppSchema();        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();        outputFactory.setProperty( XMLOutputFactory.IS_REPAIRING_NAMESPACES, true );        ByteArrayOutputStream os = new ByteArrayOutputStream();        XMLStreamWriter writer = new IndentingXMLStreamWriter( outputFactory.createXMLStreamWriter( os ) );        GMLAppSchemaWriter encoder = new GMLAppSchemaWriter( GMLVersion.GML_31, "http://cite.opengeospatial.org/gmlsf",                                                             null, schema.getNamespaceBindings() );        encoder.export( writer, gmlSchemaInfoSet, "http://cite.opengeospatial.org/gmlsf", uri -> uri );        writer.close();        System.out.println( os.toString() );    }
@Test    public void testReexportCiteSF1()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException, XMLStreamException, FactoryConfigurationError, IOException {        String schemaURL = this.getClass().getResource( "../cite/schema/cite-gmlsf1.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( GMLVersion.GML_31, null, schemaURL );        AppSchema schema = adapter.extractAppSchema();        XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();        outputFactory.setProperty( XMLOutputFactory.IS_REPAIRING_NAMESPACES, true );        OutputStream os = new FileOutputStream( System.getProperty( "java.io.tmpdir" ) + File.separatorChar + "out.xml" );        XMLStreamWriter writer = new IndentingXMLStreamWriter( outputFactory.createXMLStreamWriter( os ) );        GMLAppSchemaWriter encoder = new GMLAppSchemaWriter( GMLVersion.GML_31, "http://cite.opengeospatial.org/gmlsf",                                                             null, schema.getNamespaceBindings() );        encoder.export( writer, schema );        writer.close();    }
@Test(timeout = 4000)	  public void teststop()  throws Throwable  {	      StopWatch stopWatch0 = new StopWatch();	      stopWatch0.start();	      System.setCurrentTimeMillis(1057L);	      stopWatch0.stop();	      long long0 = stopWatch0.getNanoTime();	  }
@Test    public void testClearInView() {        GraphStore graphStore = generateBasicGraphStoreWithColumns();        GraphView view = graphStore.viewStore.createView();        Graph graph = graphStore.viewStore.getGraph(view);        Column column = graphStore.nodeTable.store.getColumn("foo");        Node n1 = graphStore.factory.newNode("1");        n1.setAttribute(column, "bar");        graphStore.addNode(n1);        graph.addNode(n1);        IndexStore<Node> indexStore = graphStore.nodeTable.store.indexStore;        IndexImpl index = indexStore.createViewIndex(graphStore.viewStore.getGraph(view));        graph.removeNode(n1);        Assert.assertEquals(index.countElements(column), 0);        Assert.assertEquals(index.countValues(column), 0);        Assert.assertEquals(index.count(column, "bar"), 0);    }
@Test(timeout = 4000)	  public void testappendSuper()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(73, (-1));	      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(73);	      boolean[] booleanArray0 = new boolean[6];	      booleanArray0[1] = true;	      booleanArray0[4] = true;	      hashCodeBuilder1.append(booleanArray0);	  }
@Test(timeout = 4000)	  public void testunregister()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      Boolean boolean0 = Boolean.valueOf(false);	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((Object) boolean0, (Object) boolean0);	      byte[] byteArray0 = new byte[6];	      byteArray0[0] = (byte)14;	      byteArray0[1] = (byte)8;	      byteArray0[2] = (byte) (-79);	      byteArray0[3] = (byte) (-1);	      byteArray0[4] = (byte) (-87);	      byteArray0[5] = (byte)0;	      equalsBuilder1.append(byteArray0, byteArray0);	      Boolean.compare(true, false);	      Boolean.logicalXor(true, false);	      equalsBuilder1.append('W', 'E');	      double[] doubleArray0 = new double[3];	      doubleArray0[2] = (double) 'E';	      EqualsBuilder.unregister(boolean0, (Object) null);	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((long) 1, 110L);	  }
@Test(expectedExceptions = NullPointerException.class)    public void testRemoveColumnNull() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        store.removeColumn((Column) null);    }
@Test  public void testGetPrefix() throws Exception {    testGetPrefix(new XmlNamespaceContext(Collections.map(            tuple("foo", "http://foo.org"),            tuple("bar", "http://bar.org"))));    testGetPrefix(XmlNamespaceContext.mk(asList(            new XmlNamespaceBinding("foo", "http://foo.org"),            new XmlNamespaceBinding("bar", "http://bar.org"))));  }
@Test(timeout = 4000)	  public void testformat()  throws Throwable  {	      Locale locale0 = Locale.ITALY;	      // Undeclared exception!	      try { 	        DateFormatUtils.formatUTC(1L, "ctYo~VWw6W,ib]T=Lqh", locale0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Illegal pattern component: c	         //	         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);	      }	  }
@Test  public void testUpdateMutation() throws Exception {    Serializable[] old = new Serializable[4];    old[0] = 12131L;    old[1] = "test_user";    old[2] = 25;    old[3] = 0;    Serializable[] current = new Serializable[4];    current[0] = old[0];    current[1] = old[1];    current[2] = 26;    current[3] = old[3];    Serializable[] old2 = new Serializable[4];    old2[0] = 12334L;    old2[1] = "test_user2";    old2[2] = 30;    old2[3] = 1;    Serializable[] current2 = new Serializable[4];    current2[0] = old2[0];    current2[1] = old2[1];    current2[2] = 31;    current2[3] = old2[3];    Map.Entry<Serializable[], Serializable[]> change = new AbstractMap.SimpleEntry<>(old, current);    Map.Entry<Serializable[], Serializable[]> change2 =        new AbstractMap.SimpleEntry<>(old2, current2);    BinlogEvent event =        new UpdateEvent(            TABLE_ID, SERVER_ID, TIMESTAMP, BINLOG_FILE_POS, ImmutableList.of(change, change2));    List<? extends Mutation> mutations = eventMapper.map(event);    assertEquals(2, mutations.size());    assertTrue(mutations.get(0) instanceof MysqlUpdateMutation);    MysqlUpdateMutation mutation = (MysqlUpdateMutation) mutations.get(0);    validateMetadata(mutation, 0);    Row oldRow = mutation.getPreviousRow();    Row newRow = mutation.getRow();    assertEquals(12131L, oldRow.getColumns().get("id").getValue());    assertEquals("test_user", oldRow.getColumns().get("name").getValue());    assertEquals(25, oldRow.getColumns().get("age").getValue());    assertEquals(0, oldRow.getColumns().get("sex").getValue());    assertEquals(12131L, newRow.getColumns().get("id").getValue());    assertEquals("test_user", newRow.getColumns().get("name").getValue());    assertEquals(26, newRow.getColumns().get("age").getValue());    assertEquals(0, newRow.getColumns().get("sex").getValue());    assertTrue(mutations.get(1) instanceof MysqlUpdateMutation);    mutation = (MysqlUpdateMutation) mutations.get(1);    validateMetadata(mutation, 1);    oldRow = mutation.getPreviousRow();    newRow = mutation.getRow();    assertEquals(12334L, oldRow.getColumns().get("id").getValue());    assertEquals("test_user2", oldRow.getColumns().get("name").getValue());    assertEquals(30, oldRow.getColumns().get("age").getValue());    assertEquals(1, oldRow.getColumns().get("sex").getValue());    assertEquals(12334L, newRow.getColumns().get("id").getValue());    assertEquals("test_user2", newRow.getColumns().get("name").getValue());    assertEquals(31, newRow.getColumns().get("age").getValue());    assertEquals(1, newRow.getColumns().get("sex").getValue());  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNewLineText());	      	      strBuilder0.size = 0;	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder strBuilder1 = strBuilder0.setNewLineText("h)s;1V;.*L`~Xja^");1V;.*L`~Xja^", strBuilder0.getNewLineText());1V;.*L`~Xja^", strBuilder1.getNewLineText());	  }
@Test    public void testRenameInternalType() {        // a descriptor is not left untouched        assertEquals("Lorg.blah.New;", mOuter.renameInternalType("Lcom.pack.Old;"));        assertEquals("Lorg.blah.New$Inner;", mOuter.renameInternalType("Lcom.pack.Old$Inner;"));        // an actual FQCN        assertEquals("org.blah.New", mOuter.renameInternalType("com.pack.Old"));        assertEquals("org.blah.New$Inner", mOuter.renameInternalType("com.pack.Old$Inner"));        assertEquals("org.blah.New$Other", mInner.renameInternalType("com.pack.Old$Other"));        assertEquals("org.blah.New$Other", mInner.renameInternalType("com.pack.Old$Other"));    }
@Test    public void test_V110_EXAMPLE10()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE10 );        XMLAdapter xmlAdapter = new XMLAdapter( exampleURL );        GetFeatureXMLAdapter getFeatureAdapter = new GetFeatureXMLAdapter();        getFeatureAdapter.setRootElement( xmlAdapter.getRootElement() );        GetFeature getFeature = getFeatureAdapter.parse();        List<Query> queries = getFeature.getQueries();        FilterQuery filterQuery = (FilterQuery) queries.get( 0 );        ProjectionClause[] propNames = filterQuery.getProjectionClauses();        assertEquals( propNames.length, 2 );        assertEquals( ( (PropertyName) propNames[0] ).getPropertyName().getAsText(), "gml:name" );        assertEquals( ( (PropertyName) propNames[1] ).getPropertyName().getAsText(), "gml:directedNode" );        IdFilter filter = (IdFilter) filterQuery.getFilter();        Set<String> ids = filter.getMatchingIds();        assertEquals( ids.size(), 1 );        assertTrue( ids.contains( "t1" ) );    }
@Test    void testEdgeCaseGlobs() throws Exception {        assertTrue(SearchPattern.wildcardMatch("", ""));        assertTrue(SearchPattern.wildcardMatch("a", "a"));        assertTrue(SearchPattern.wildcardMatch("*a", "a"));        assertTrue(SearchPattern.wildcardMatch("*a", "ba"));        assertTrue(SearchPattern.wildcardMatch("a*", "a"));        assertTrue(SearchPattern.wildcardMatch("a*", "ab"));        assertTrue(SearchPattern.wildcardMatch("a*a", "aa"));        assertTrue(SearchPattern.wildcardMatch("a*a", "aba"));        assertTrue(SearchPattern.wildcardMatch("a*a", "aaa"));        assertTrue(SearchPattern.wildcardMatch("a*a*", "aa"));        assertTrue(SearchPattern.wildcardMatch("a*a*", "aba"));        assertTrue(SearchPattern.wildcardMatch("a*a*", "aaa"));        assertTrue(SearchPattern.wildcardMatch("a*a*", "aaaaaaaaaaaaaaaaaaaaaaa"));        assertTrue(SearchPattern.wildcardMatch(            "a*b*a*b*a*b*a*b*a*",            "akljd9gsdfbkjhaabajkhbbyiaahkjbjhbuykjakjhabkjhbabjhkaabbabbaaakljdfsjklababkjbsdabab"));        Assertions.assertFalse(SearchPattern.wildcardMatch("a*na*ha", "anananahahanahana"));    }
@Test(timeout = 4000)	  public void testprocessBitVectors()  throws Throwable  {	      Class<JavaVersion> class0 = JavaVersion.class;	      long[] longArray0 = new long[4];	      EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0);	  }
@Test  public void testBuildObjectName() {    MediaPackageElement element = mp.getElementById("presenter-delivery");    Assert.assertEquals(            "channelId/efd6e4df-63b6-49af-be5f-15f598778877/presenter-delivery/video-presenter-delivery.mp4",            service.buildObjectName("channelId", mp.getIdentifier().toString(), element));  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      String string0 = null;	      String string1 = StringUtils.removeStart("The Character must not be null", (String) null);	      	      String string2 = StringUtils.substring("l&A+FmHiJ)adt:FW", (-1848), 1129);	      	      boolean boolean0 = StringUtils.isBlank("The Character must not be null");	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) null, (CharSequence) "l&A+FmHiJ)adt:FW");	      	      float[] floatArray0 = new float[0];	      // Undeclared exception!	      try { 	        StringUtils.join(floatArray0, 'J', (-1848), 1129);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // -1848	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testisEquals()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      byte[] byteArray0 = new byte[2];	      byteArray0[0] = (byte)0;	      byteArray0[1] = (byte) (-105);	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(byteArray0, (byte[]) null);	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(0, 4134);	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((short) (byte) (-105), (short) (-1));	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append((byte)0, (byte)0);	      float[] floatArray0 = new float[3];	      floatArray0[0] = (float) (short) (-1);	      floatArray0[1] = (float) 0;	      floatArray0[2] = 0.0F;	      EqualsBuilder equalsBuilder5 = equalsBuilder4.append(floatArray0, floatArray0);	      assertFalse(equalsBuilder0.isEquals());	      	      short[] shortArray0 = new short[1];	      equalsBuilder4.reset();	      shortArray0[0] = (short) (byte)0;	      equalsBuilder0.append(shortArray0, shortArray0);	      equalsBuilder5.append((Object) "", (Object) "");	  }
@Test(dataProvider = "anagramString")    public void testIsAnagram(String s1, String s2, boolean expected) {        assertEquals(ValidAnagram.isAnagram(s1, s2), expected);    }
@Test(timeout = 4000)	  public void testtoBoolean()  throws Throwable  {	      Boolean boolean0 = BooleanUtils.toBooleanObject((String) null, (String) null, (String) null, (String) null);	  }
@Test    public void testJoin() {        final List<List<Object>> res = _personDao.findAll(SQL.select( Person.NAME).from( Person.TABLE, Address.TABLE).where( Person.NAME.eq( Address.CITY)));        Assert.assertEquals(res, RESULT_JOIN);    }
@Test public void testGetAnnotationHandler() {		// Arrange:		final TestFragment fragment = new TestFragment();		// Act + Assert:		assertThat(fragment.getAnnotationHandler(), is(notNullValue()));	}
@Test  public void testMutationOutOfOrder() throws Exception {    List<Mutation> unorderedMutations = Lists.newArrayList();    when(firstMetadata.getId()).thenReturn(2L);    when(secondMetadata.getId()).thenReturn(1L);    MutationOrderValidator validator = new MutationOrderValidator(unorderedMutations::add);    validator.validate(firstMutation);    validator.validate(secondMutation);    assertEquals(Arrays.asList(secondMutation), unorderedMutations);  }
@Test(timeout = 4000)	  public void teststripAll()  throws Throwable  {	      String string0 = StringUtils.replace("8k6QxtK(M7Eg", "8k6QxtK(M7Eg", "8k6QxtK(M7Eg", (-185));	      	      CharSequence[] charSequenceArray0 = new CharSequence[9];	      charSequenceArray0[0] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[1] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[2] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[3] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[4] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[5] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[6] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[7] = (CharSequence) "8k6QxtK(M7Eg";	      charSequenceArray0[8] = (CharSequence) "8k6QxtK(M7Eg";	      int int0 = StringUtils.lastIndexOfAny("8k6QxtK(M7Eg", charSequenceArray0);	      	      boolean boolean0 = StringUtils.startsWithIgnoreCase(charSequenceArray0[8], "8k6QxtK(M7Eg");	      	      String string1 = StringUtils.substringAfterLast("8k6QxtK(M7Eg", "8k6QxtK(M7Eg");	      	      int int1 = StringUtils.countMatches(charSequenceArray0[6], charSequenceArray0[4]);	      	      int int2 = StringUtils.lastOrdinalIndexOf(charSequenceArray0[3], "8k6QxtK(M7Eg", 0);	      	      String[] stringArray0 = new String[9];	      stringArray0[0] = "";	      stringArray0[1] = "8k6QxtK(M7Eg";	      stringArray0[2] = "";	      stringArray0[3] = "8k6QxtK(M7Eg";	      stringArray0[4] = "8k6QxtK(M7Eg";	      stringArray0[5] = "8k6QxtK(M7Eg";	      stringArray0[6] = "";	      stringArray0[7] = "";	      stringArray0[8] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	  }
@Test    public void debug() throws Exception {        StaticLogger.debug(TAG, MESSAGE);        verify(logger).debug(eq(TAG), eq(MESSAGE));    }
@Test(expected = RuntimeException.class)    public void testLocalizedSamplingStrategyWithOneRuleMissingAttributesThrowsRuntimeException() {        URL emptySamplingRules = LocalizedSamplingStrategyTest.class.getResource(            "/com/amazonaws/xray/strategy/sampling/OneRuleMissingAttributesSamplingRules.json");        LocalizedSamplingStrategy localizedSamplingStrategy = new LocalizedSamplingStrategy(emptySamplingRules);        SamplingRequest samplingRequest = new SamplingRequest("", "test", "/test", "test", "");        SamplingResponse sr = localizedSamplingStrategy.shouldTrace(samplingRequest);        Assert.assertFalse(sr.isSampled());    }
@Test  public void testIsAuthorized() throws Exception {    AccessControlList acl = new AccessControlList();    acl.getEntries().add(new AccessControlEntry("role1", "action1", true));    acl.getEntries().add(new AccessControlEntry("role1", "action2", true));    acl.getEntries().add(new AccessControlEntry("role1", "action3", false));    acl.getEntries().add(new AccessControlEntry("role2", "action1", false));    acl.getEntries().add(new AccessControlEntry("role2", "action2", false));    acl.getEntries().add(new AccessControlEntry("role2", "action3", true));    JaxbOrganization org = new DefaultOrganization();    User user1 = new JaxbUser("user1", "test", org, new JaxbRole("role1", org), new JaxbRole("someRole", org));    User user2 = new JaxbUser("user2", "test", org, new JaxbRole("role2", org), new JaxbRole("someRole", org));    User localAdmin = new JaxbUser("localAdmin", "test", org, new JaxbRole(org.getAdminRole(), org), new JaxbRole(            "someRole", org));    User globalAdmin = new JaxbUser("globalAdmin", "test", org, new JaxbRole(GLOBAL_ADMIN_ROLE, org));    assertTrue(AccessControlUtil.isAuthorized(acl, user1, org, "action1"));    assertTrue(AccessControlUtil.isAuthorized(acl, user1, org, "action2"));    assertFalse(AccessControlUtil.isAuthorized(acl, user1, org, "action3"));    assertFalse(AccessControlUtil.isAuthorized(acl, user2, org, "action1"));    assertFalse(AccessControlUtil.isAuthorized(acl, user2, org, "action2"));    assertTrue(AccessControlUtil.isAuthorized(acl, user2, org, "action3"));    assertTrue(AccessControlUtil.isAuthorized(acl, localAdmin, org, "action1"));    assertTrue(AccessControlUtil.isAuthorized(acl, localAdmin, org, "action2"));    assertTrue(AccessControlUtil.isAuthorized(acl, localAdmin, org, "action3"));    assertTrue(AccessControlUtil.isAuthorized(acl, globalAdmin, org, "action1"));    assertTrue(AccessControlUtil.isAuthorized(acl, globalAdmin, org, "action2"));    assertTrue(AccessControlUtil.isAuthorized(acl, globalAdmin, org, "action3"));    assertTrue(AccessControlUtil.isAuthorizedAll(acl, globalAdmin, org, "action1", "action2", "action3"));    assertFalse(AccessControlUtil.isAuthorizedAll(acl, user1, org, "action1", "action2", "action3"));    assertTrue(AccessControlUtil.isAuthorizedAll(acl, user1, org, "action1", "action2"));    assertTrue(AccessControlUtil.isAuthorizedOne(acl, globalAdmin, org, "action1", "action2", "action3"));    assertFalse(AccessControlUtil.isAuthorizedOne(acl, user1, org, "action3", "action4", "action5"));    assertTrue(AccessControlUtil.isAuthorizedOne(acl, user1, org, "action1", "action3"));    assertFalse(AccessControlUtil.isProhibitedAll(acl, globalAdmin, org, "action1", "action2", "action3"));    assertFalse(AccessControlUtil.isProhibitedAll(acl, user1, org, "action1", "action2", "action3"));    assertTrue(AccessControlUtil.isProhibitedAll(acl, user1, org, "action3", "action4"));    assertFalse(AccessControlUtil.isProhibitedOne(acl, globalAdmin, org, "action1", "action2", "action3"));    assertFalse(AccessControlUtil.isProhibitedOne(acl, user1, org, "action1", "action2"));    assertTrue(AccessControlUtil.isProhibitedOne(acl, user1, org, "action1", "action2", "action3"));  }
@Test(timeout = 4000)	  public void testisUseFieldNames()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      boolean boolean0 = standardToStringStyle0.isUseFieldNames();	  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1));	      HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.appendSuper(37);	      double[] doubleArray0 = new double[3];	      hashCodeBuilder1.append((double) (-1));	      doubleArray0[0] = (double) (-2563);	      doubleArray0[1] = (double) (-2563);	      doubleArray0[2] = (double) (-1);	      hashCodeBuilder0.append(doubleArray0);	      assertEquals(0, (int)hashCodeBuilder0.build());	  }
@Test  public void testGetMediaList() throws Exception {    String expected = IOUtils.toString(getClass().getResource("/eventMedia.json"));    given().pathParam("eventId", "notExists").expect().statusCode(HttpStatus.SC_NOT_FOUND).when()            .get(rt.host("{eventId}/asset/media/media.json"));    String result = given().pathParam("eventId", "asdasd").expect().statusCode(HttpStatus.SC_OK).when()            .get(rt.host("{eventId}/asset/media/media.json")).asString();    assertThat(expected, SameJSONAs.sameJSONAs(result).allowingAnyArrayOrdering());  }
@Test(timeout = 4000)	  public void testinsert()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      	      StringBuilder stringBuilder0 = new StringBuilder(4);	      	      StringBuilder stringBuilder1 = stringBuilder0.append(0);	      	      StringBuilder stringBuilder2 = stringBuilder1.append((-771.0));	      	      char[] charArray0 = new char[4];	      charArray0[0] = 'k';	      charArray0[1] = '$';	      charArray0[2] = '?';	      charArray0[3] = 'N';	      StringBuilder stringBuilder3 = stringBuilder2.append(charArray0);	      	      StringBuilder stringBuilder4 = stringBuilder3.insert(2, charArray0);	      	      StrBuilder strBuilder1 = strBuilder0.append((CharSequence) stringBuilder4);	      	      strBuilder_StrBuilderWriter0.write("'fe:RqN$");	      	      strBuilder_StrBuilderWriter0.write("");	      	      StrBuilder strBuilder2 = strBuilder0.append((StringBuffer) null, (-1729), (-1729));	      	      StrBuilder strBuilder3 = strBuilder0.setNewLineText("'fe:RqN$");	      	      // Undeclared exception!	      try { 	        strBuilder3.subSequence((-1729), (-3524));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1729	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test public void testOnCreate() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final BaseFragment fragment = new TestFragment();		// Act:		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		fragmentManager.beginTransaction().remove(fragment).commit();		fragmentManager.executePendingTransactions();		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		// Assert:		assertThat(fragment.isCreated(), is(true));		assertThat(fragment.isDestroyed(), is(false));	}
@Test(timeout = 4000)	  public void testgetArraySeparator()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer(234);	      standardToStringStyle0.SIMPLE_STYLE.append(stringBuffer0, "I", (byte)75);	      assertEquals(",", standardToStringStyle0.getArraySeparator());	  }
@Test    public void testGetAttributesIntervalEmpty() {        GraphStore store = getIntervalGraphStore();        Column column = generateIntervalColumn(store);        NodeImpl node = new NodeImpl("0", store);        Iterator<Map.Entry> itr = node.getAttributes(column).iterator();        Assert.assertFalse(itr.hasNext());    }
@Test(timeout = 4000)	  public void testsplit()  throws Throwable  {	      String string0 = StringUtils.rightPad(",@ZB0lHp2{", 122);	      	      String string1 = StringUtils.substringBeforeLast("", "[\tu");	      	      char[] charArray0 = new char[4];	      charArray0[0] = 's';	      charArray0[1] = '{';	      charArray0[2] = '+';	      charArray0[3] = 'I';	      String string2 = StringUtils.join(charArray0, 's');	      	      boolean boolean0 = StringUtils.isAlphanumeric(",@ZB0lHp2{                                                                                                                ");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SrIO", ",@ZB0lHp2{");	      	      String string3 = StringUtils.rightPad("SrIO", 122);	      	      int[] intArray0 = new int[1];	      intArray0[0] = (int) 'I';	      String string4 = StringUtils.join(intArray0, 's');	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens("ss{s+sI", "ss{s+sI", 256);	      	      String string5 = StringUtils.prependIfMissingIgnoreCase("v", "SrIO                                                                                                                      ", stringArray1);	  }
@Test    public void test_V110_EXAMPLE_15()                            throws Exception {        URL exampleURL = this.getClass().getResource( V110_EXAMPLE_15 );        Map<String, String> kvpMap = KVPUtils.readFileIntoMap( exampleURL );        GetFeature getFeature = GetFeatureKVPAdapter.parse( kvpMap, null );        FeatureIdQuery featureQuery = (FeatureIdQuery) getFeature.getQueries().get( 0 );        ProjectionClause[] propNames = featureQuery.getProjectionClauses();        assertEquals( "uk:Town/gml:name", ( (PropertyName) propNames[0] ).getPropertyName().getAsText() );        assertEquals( "uk:Town/gml:directedNode", ( (PropertyName) propNames[1] ).getPropertyName().getAsText() );        String[] featureId = featureQuery.getFeatureIds();        assertEquals( "t1", featureId[0] );        TypeName[] typeName = featureQuery.getTypeNames();        assertEquals( new QName( "http://www.theuknamespace.uk", "Town" ), typeName[0].getFeatureTypeName() );    }
@Test	public void testValidateOp() throws FailedVerificationException {		String id = "openplacereviews", oauthMethod = "oauth";		OpObject opObject = new OpObject();		opObject.setId(id + 1);		opObject.putStringValue(F_AUTH_METHOD, oauthMethod);		OpOperation opOperation = new OpOperation();		opOperation.setType(OpBlockchainRules.OP_SIGNUP);		opOperation.addCreated(opObject);		generateHashAndSignForOperation(opOperation, blc, true, serverKeyPair);		opOperation.makeImmutable();		assertTrue(blc.validateOperation(opOperation));	}
@Test(timeout = 4000)	  public void testappendWithSeparators()  throws Throwable  {	      int int0 = 0;	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      StringBuffer stringBuffer0 = new StringBuffer("':EFAEb.O7[9#R/\"[V");	      	      StringBuffer stringBuffer1 = stringBuffer0.delete(0, 0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0);	      	      int int1 = strBuilder0.indexOf("x,OEdUuh6_<", 0);	      	      Locale.Category locale_Category0 = Locale.Category.DISPLAY;	      Locale.Category locale_Category1 = Locale.Category.FORMAT;	      EnumSet<Locale.Category> enumSet0 = EnumSet.of(locale_Category0, locale_Category0, locale_Category0, locale_Category1);	      	      Iterator<Locale.Category> iterator0 = enumSet0.iterator();	      	      StrBuilder strBuilder2 = strBuilder1.appendWithSeparators(iterator0, "x,OEdUuh6_<");	      	      String string0 = "";	      // Undeclared exception!	      try { 	        strBuilder1.insert((-1), "");	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -1	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void teststringMatcher()  throws Throwable  {	      StrMatcher strMatcher0 = StrMatcher.stringMatcher(";.Wv4!3f/");	      char[] charArray0 = new char[9];	      charArray0[0] = 'B';	      int int0 = strMatcher0.isMatch(charArray0, 0);	  }
@Test(timeout = 4000)	  public void testappendNull()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder strBuilder1 = strBuilder0.appendNull();	      	      // Undeclared exception!	      try { 	        strBuilder0.insert(1198, 1198);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 1198	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void should_rhs_not_be_evaluated_when_OR_operator_and_lhs_is_true___strong_ref() {        when(lhs.isGranted(any(), any(), any())).thenReturn(true);        GrantEvaluator grantEvaluator = composer.or(lhs, rhs);        boolean granted = grantEvaluator.isGranted(null, null, "fake");        verify(lhs).isGranted(any(), any(), any());        verifyZeroInteractions(rhs);        assertThat(granted).isTrue();    }
@Test    public void toLowerCase() {        Assert.isTrue(DDRStringUtils.toLowerCase(null) == null);        Assert.isTrue(DDRStringUtils.toLowerCase("") == null);        Assert.isTrue(DDRStringUtils.toLowerCase(" ") == null);        Assert.isTrue(DDRStringUtils.toLowerCase("   ") == null);        Assert.isTrue(DDRStringUtils.toLowerCase("   ") == null);        Assert.equals(DDRStringUtils.toLowerCase("  ab "), "ab");        Assert.equals(DDRStringUtils.toLowerCase("ab"), "ab");        Assert.equals(DDRStringUtils.toLowerCase("  aB "), "ab");        Assert.isTrue(!DDRStringUtils.trimToNull("aB").equals("ac"));    }
@Test(timeout = 4000)	  public void testgetField()  throws Throwable  {	      // Undeclared exception!	      try { 	        FieldUtils.getField((Class<?>) null, "^xe4vQ)P!", false);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The class must not be null	         //	         verifyException("org.apache.commons.lang3.reflect.FieldUtils", e);	      }	  }
@Test    public void testEthCall() throws Exception {        web3j.platonCall(Transaction.createEthCallTransaction(                "0xa70e8dd61c5d32be8058bb8eb970870f07233155",                "0xb60e8dd61c5d32be8058bb8eb970870f07233155",                        "0x0"),                DefaultBlockParameterName.fromString("latest")).send();        verifyResult("{\"jsonrpc\":\"2.0\",\"method\":\"platon_call\","                + "\"params\":[{\"from\":\"0xa70e8dd61c5d32be8058bb8eb970870f07233155\","                + "\"to\":\"0xb60e8dd61c5d32be8058bb8eb970870f07233155\",\"data\":\"0x0\"},"                + "\"latest\"],\"id\":1}");    }
@Test    public void test00() {        List<String> expectedResult = new ArrayList<String>();        expectedResult.add("");        final List<String> result = new ArrayList<>();        new RangeExpressionParser("").visit(new RangeExpressionItemVisitor() {            @Override            public void visit(Object val) {                result.add((String) val);            }        });        Assert.equals(result, expectedResult);        expectedResult = new ArrayList<String>();        expectedResult.add("0");        final List<String> result1 = new ArrayList<>();        new RangeExpressionParser("0").visit(new RangeExpressionItemVisitor() {            @Override            public void visit(Object val) {                result1.add((String) val);            }        });        Assert.equals(result1, expectedResult);    }
@Test    public void testParsingCite110SF2()                            throws ClassCastException, ClassNotFoundException, InstantiationException,                            IllegalAccessException {        String schemaURL = this.getClass().getResource( "../cite/schema/cite-gmlsf2.xsd" ).toString();        GMLAppSchemaReader adapter = new GMLAppSchemaReader( null, null, schemaURL );        FeatureType[] fts = adapter.extractAppSchema().getFeatureTypes();        Assert.assertEquals( 6, fts.length );    }
@Test(timeout = 4000)	  public void testcontainsNone()  throws Throwable  {	      String[] stringArray0 = StringUtils.split("0?H#M#5-x2HzIU=Zy\u0002", "0?H#M#5-x2HzIU=Zy\u0002", (-327));	      	      String string0 = StringUtils.replace(" ", "0?H#M#5-x2HzIU=Zy\u0002", "0?H#M#5-x2HzIU=Zy\u0002", (-327));	      	      String string1 = StringUtils.lowerCase("");	      	      String string2 = StringUtils.removeEnd("", (String) null);	      	      String string3 = StringUtils.center("j(!(srj", (-327));	      	      boolean boolean0 = StringUtils.isAsciiPrintable("0?H#M#5-x2HzIU=Zy\u0002");	      	      String string4 = StringUtils.chomp("");	      	      boolean boolean1 = StringUtils.containsNone((CharSequence) "", "fRD(uQ'Re+?M|94=dx");	  }
@Test(timeout = 4000)	  public void testintToHexDigitMsb0()  throws Throwable  {	      char char0 = Conversion.intToHexDigitMsb0(2);	  }
@Test public void testClearBackStackOnEmptyBackStack() {		// Arrange:		final FragmentManager mockManager = mock(FragmentManager.class);		final FragmentController controller = new FragmentController(mockManager);		when(mockManager.getBackStackEntryCount()).thenReturn(0);		// Act:		controller.clearBackStack();		// Assert:		verify(mockManager, times(2)).getBackStackEntryCount();	}
@Test  public void testSingleVideoStream() throws URISyntaxException, MalformedURLException, MediaPackageException, IOException, IllegalArgumentException, NotFoundException, ServiceRegistryException {    MediaPackageBuilder builder = MediaPackageBuilderFactory.newInstance().newMediaPackageBuilder();    // test resources    URI uriMP = InspectWorkflowOperationHandler.class.getResource("/composite_mediapackage.xml").toURI();    URI uriMPEncode = InspectWorkflowOperationHandler.class.getResource("/compound_mediapackage.xml").toURI();    mp = builder.loadFromXml(uriMP.toURL().openStream());    mpEncode = builder.loadFromXml(uriMPEncode.toURL().openStream());    encodedTracks = mpEncode.getTracks();    // set up mock workspace    workspace = EasyMock.createNiceMock(Workspace.class);    EasyMock.expect(            workspace.moveTo((URI) EasyMock.anyObject(), (String) EasyMock.anyObject(), (String) EasyMock.anyObject(),                    (String) EasyMock.anyObject())).andReturn(uriMPEncode);    EasyMock.expect(workspace.get((URI) EasyMock.anyObject())).andReturn(            new File(getClass().getResource("/watermark.jpg").toURI()));    EasyMock.replay(workspace);    // set up mock receipt    job = EasyMock.createNiceMock(Job.class);    EasyMock.expect(job.getPayload()).andReturn(MediaPackageElementParser.getAsXml(encodedTracks[0])).anyTimes();    EasyMock.expect(job.getStatus()).andReturn(Job.Status.FINISHED);    EasyMock.expect(job.getDateCreated()).andReturn(new Date());    EasyMock.expect(job.getDateStarted()).andReturn(new Date());    EasyMock.expect(job.getQueueTime()).andReturn(new Long(0));    EasyMock.replay(job);    // set up mock service registry    ServiceRegistry serviceRegistry = EasyMock.createNiceMock(ServiceRegistry.class);    EasyMock.expect(serviceRegistry.getJob(EasyMock.anyLong())).andReturn(job);    EasyMock.replay(serviceRegistry);    // set up service    operationHandler = new CompositeWorkflowOperationHandler();    operationHandler.setWorkspace(workspace);    operationHandler.setServiceRegistry(serviceRegistry);  }
@Test(timeout = 4000)	  public void testisNumeric()  throws Throwable  {	      String string0 = StringUtils.chomp(" ", " ");	      	      StringUtils.equalsIgnoreCase("", " ");	      String string1 = StringUtils.center(" ", 2340, 'd');	      StringUtils.stripEnd("", "e");	      int int0 = StringUtils.indexOfDifference((CharSequence) " ", (CharSequence) "");	      StringUtils stringUtils0 = new StringUtils();	      StringUtils.contains((CharSequence) " ", 2340);	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens(string1, "", (-1));	      StringUtils.join((Object[]) stringArray0, "", 1663, (-1));	      String string2 = StringUtils.SPACE;	      String string3 = StringUtils.stripToEmpty("e");	      	      String string4 = StringUtils.remove("e", "\n");	      	      CharSequence charSequence0 = StringUtils.defaultIfBlank((CharSequence) "e", (CharSequence) "");	      	      StringUtils.getLevenshteinDistance((CharSequence) "e", (CharSequence) "e");	      String[] stringArray1 = StringUtils.stripAll(stringArray0, "");	      	      int int1 = StringUtils.lastIndexOf((CharSequence) "", 1663, (-1));	      	      StringUtils.difference("", "");	      String string5 = StringUtils.reverse(" ");	      	      StringUtils.startsWith("\n", "");	      StringUtils.endsWith(" ", "");	      StringUtils.isNumericSpace("");	      StringUtils.substringAfterLast("e", " ");	      StringUtils.swapCase((String) null);	      float[] floatArray0 = new float[7];	      floatArray0[0] = (float) 0;	      floatArray0[1] = (float) 'd';	      floatArray0[2] = (float) 2340;	      floatArray0[3] = (float) 0;	      floatArray0[4] = (float) 0;	      floatArray0[5] = (-982.0F);	      floatArray0[6] = (float) 1663;	      String string6 = StringUtils.join(floatArray0, 'd', 4516, 0);	  }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(32, strBuilder0.capacity());	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      assertEquals(32, strBuilder0.capacity());	      	      strBuilder_StrBuilderWriter0.write((-5438));	      assertEquals(32, strBuilder0.capacity());	  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      String string0 = StringUtils.join((int[]) null, 't', 0, 0);	      	      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');	      	      String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1);	      	      String string2 = "";	      String string3 = StringUtils.leftPad((String) null, 0, "");	      	      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) null, 0);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");	      assertEquals(1, stringArray1.length);	      	      // Undeclared exception!	      try { 	        CharBuffer.wrap((CharSequence) null, (-1520), 4452);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.nio.StringCharBuffer", e);	      }	  }
@Test    public void testExampleConfigurationProvidesExampleFiles() throws Exception {        final ConfigurationFileManager subject = getTestJenkinsConfiguration();        subject.initConfiguration();        for (final String expectedFileName : new String[] { "example.txt", "example/example.txt", "emptyExample" }) {            assertTrue(new File(tempDir.getRoot(), expectedFileName).exists());        }    }
@Test  public void testAppendTo() {    final List<Object> a = new ArrayList<Object>();    // compile check    appendTo(a, list(1));    appendTo(a, list("a"));  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(6);	      assertEquals(0, strBuilder0.size());	      	      StrBuilder strBuilder1 = strBuilder0.ensureCapacity(6);	      assertEquals(0, strBuilder0.size());	      assertEquals(0, strBuilder1.size());	      	      StrBuilder strBuilder2 = strBuilder0.appendNull();	      assertEquals(0, strBuilder0.size());	      assertEquals(0, strBuilder2.size());	      	      StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher();	      	      int int0 = strBuilder2.indexOf((StrMatcher) strMatcher_TrimMatcher0);	      assertEquals(0, strBuilder0.size());	      assertEquals(0, strBuilder2.size());	      	      ArrayDeque<Integer> arrayDeque0 = new ArrayDeque<Integer>((-1));	      assertEquals(0, arrayDeque0.size());	      	      StrBuilder strBuilder3 = strBuilder2.appendAll((Iterable<?>) arrayDeque0);	      assertEquals(0, strBuilder0.size());	      assertEquals(0, strBuilder2.size());	      assertEquals(0, arrayDeque0.size());	      assertEquals(0, strBuilder3.size());	      	      StringBuilder stringBuilder0 = new StringBuilder("v@1?:{");	      	      // Undeclared exception!	      try { 	        stringBuilder0.insert((-1), (CharSequence) strBuilder2, (-1), 6);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // dstOffset -1	         //	         verifyException("java.lang.AbstractStringBuilder", e);	      }	  }
@Test    public void nineFM() {        final TestSubscriber<Object> observer = TestSubscriber.create();        RxComprehensions.doFlatMap(zero(1), one(true), two("result"), three("other"), four("other".length()),                five("other".length() < 5), six(Boolean.toString(false)), seven("true"), eight(Long.class),                this.<Long>nine()).subscribe(observer);        observer.awaitTerminalEvent();        observer.assertCompleted();        observer.assertNoErrors();        observer.assertValues(1, true, "result", "other", (long) "other".length(), "other".length() < 5,                Boolean.toString(false), false, Long.class);    }
@Test(timeout = 4000)	  public void testreset()  throws Throwable  {	      BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder();	      basicThreadFactory_Builder0.reset();	  }
@Test(timeout = 4000)	  public void testreplaceEach()  throws Throwable  {	      String string0 = "0O5I%'`Y@3b7";	      String[] stringArray0 = new String[8];	      String string1 = "";	      stringArray0[0] = "";	      stringArray0[1] = "0O5I%'`Y@3b7";	      stringArray0[2] = "Z}3oacB,Bk)FR";	      stringArray0[3] = "0O5I%'`Y@3b7";	      stringArray0[4] = "0O5I%'`Y@3b7";	      stringArray0[5] = "0O5I%'`Y@3b7";	      stringArray0[6] = "0O5I%'`Y@3b7";	      stringArray0[7] = "0O5I%'`Y@3b7";	      // Undeclared exception!	      try { 	        StringUtils.replaceEachRepeatedly("0O5I%'`Y@3b7", stringArray0, stringArray0);	        fail("Expecting exception: IllegalStateException");	      	      } catch(IllegalStateException e) {	         //	         // Aborting to protect against StackOverflowError - output of one loop is the input of another	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      int int0 = 102;	      StrBuilder strBuilder0 = new StrBuilder(102);	      assertEquals(0, strBuilder0.size());	      	      StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter();	      assertEquals(0, strBuilder0.size());	      	      IntStream intStream0 = strBuilder0.chars();	      assertEquals(0, strBuilder0.size());	      	      Writer writer0 = strBuilder_StrBuilderWriter0.append('H');	      assertEquals(1, strBuilder0.size());	      	      char[] charArray0 = new char[4];	      charArray0[0] = 'H';	      charArray0[1] = 'H';	      charArray0[2] = 'H';	      charArray0[3] = 'H';	      strBuilder_StrBuilderWriter0.write(charArray0);	      assertEquals(5, strBuilder0.size());	      	      StrBuilder strBuilder1 = strBuilder0.append((float) 102);	      assertEquals(10, strBuilder0.size());	      assertEquals(10, strBuilder1.size());	      	      // Undeclared exception!	      try { 	        strBuilder_StrBuilderWriter0.append((CharSequence) strBuilder0, 102, (-1));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: -103	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StringBuffer stringBuffer0 = new StringBuffer("");	      	      stringBuffer0.setLength(2016);	      	      StrBuilder strBuilder1 = strBuilder0.appendln(stringBuffer0, 2, 5);	      	      StrBuilder strBuilder2 = strBuilder0.appendln(2);	      	      StrBuilder strBuilder3 = strBuilder2.append(stringBuffer0);	      	      StringBuilder stringBuilder0 = strBuilder2.toStringBuilder();	      	      StrBuilder strBuilder4 = strBuilder0.append((-523.88385F));	      	      StrBuilder strBuilder5 = strBuilder0.append(5);	      	      StrBuilder strBuilder6 = strBuilder5.setNullText("/RDU5z0P,\u0001Ay");	      	      String string0 = strBuilder2.build();	      	      StrBuilder strBuilder7 = strBuilder3.append((Object) strBuilder5);	      	      Object object0 = new Object();	      	      StrBuilder strBuilder8 = strBuilder0.append(object0);	      	      StrBuilder strBuilder9 = strBuilder2.appendNewLine();	      	      StringBuffer stringBuffer1 = strBuilder9.toStringBuffer();	      	      char[] charArray0 = new char[1];	      charArray0[0] = 'G';	      strBuilder8.buffer = charArray0;	      	      StrBuilder strBuilder10 = strBuilder5.setNullText("");	      	      int int0 = strBuilder8.length();	      	      int int1 = strBuilder0.indexOf((String) null, (-677));	      	      // Undeclared exception!	      try { 	        strBuilder3.appendln((float) 5);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(dataProvider = "inOrderTree")    public void testInOrder(BinaryTreeNode head, List<Integer> expectedResult){        Traversal traversal = new Traversal();        assertEquals(traversal.inOrderTraverse(head), expectedResult);    }
@Test    public void testWMSCapabilitiesOperationUnsupported()                            throws XMLStreamException {        WMSCapabilitiesAdapter capabilities = createCapabilities();        assertFalse( capabilities.isOperationSupported( DescribeLayer ) );    }
@Test(timeout = 4000)	  public void testisAsciiAlpha()  throws Throwable  {	      boolean boolean0 = CharUtils.isAsciiAlphaLower('P');	  }
@Test(timeout = 4000)	  public void testformatDurationISO()  throws Throwable  {	      String string0 = DurationFormatUtils.ISO_EXTENDED_FORMAT_PATTERN;	      DurationFormatUtils.formatDurationHMS(2408L);	      DurationFormatUtils.formatDurationISO(0L);	      DurationFormatUtils.formatDurationHMS(0L);	      DurationFormatUtils.lexx("java.lang.StringBuilder@00000000260java.lang.StringBuilder@00000000270java.lang.StringBuilder@00000000280java.lang.StringBuilder@00000000290java.lang.StringBuilder@00000000300java.lang.StringBuilder@00000000310java.lang.StringBuilder@0000000032000java.lang.StringBuilder@0000000033");	      DurationFormatUtils.lexx("5({+>&Zs)R.'");	      DurationFormatUtils.formatDurationHMS(1L);	      DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("0java.lang.StringBuilder@000000000800java.lang.StringBuilder@000000000902java.lang.StringBuilder@0000000010408");	      DurationFormatUtils.formatPeriodISO(0L, 0L);	      DurationFormatUtils.formatDurationWords(86400000L, true, true);	      DurationFormatUtils.Token.containsTokenWithValue(durationFormatUtils_TokenArray0, (Object) null);	      System.setCurrentTimeMillis((-1876L));	  }
@Test    public void testFilter7()                            throws XMLStreamException, FactoryConfigurationError, IOException {        Filter result = parse( "v100/testfilter7.xml" );        IdFilter idFilter = (IdFilter) result;        Set<String> matchingIds = idFilter.getMatchingIds();        assertTrue( matchingIds.contains( "TREESA_1M.1234" ) );        assertTrue( matchingIds.contains( "TREESA_1M.5678" ) );        assertTrue( matchingIds.contains( "TREESA_1M.9012" ) );        assertTrue( matchingIds.contains( "INWATERA_1M.3456" ) );        assertTrue( matchingIds.contains( "INWATERA_1M.7890" ) );        assertTrue( matchingIds.contains( "BUILTUPA_1M.4321" ) );    }
@Test  public void interpretDecimalEquality() {    assertTrue(WorkflowConditionInterpreter.interpret("5.0 == 5"));  }
@Test(timeout = 4000)	  public void testcapacity()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(32, strBuilder0.capacity());	      	      StrBuilder strBuilder1 = strBuilder0.insert(0, false);	      assertEquals(32, strBuilder0.capacity());	      assertEquals(32, strBuilder1.capacity());	      	      StrMatcher strMatcher0 = StrMatcher.trimMatcher();	      	      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');	      	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("^3U^;XUW^MhqPybj");	      	      char[] charArray0 = new char[0];	      StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107);	      assertEquals(32, strBuilder0.capacity());	      assertEquals(32, strBuilder1.capacity());	      assertEquals(32, strBuilder2.capacity());	      	      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);	      	      int int0 = strBuilder0.indexOf(strMatcher0, (-2284));	      assertEquals(32, strBuilder0.capacity());	      	      IntStream intStream0 = strBuilder0.codePoints();	      assertEquals(32, strBuilder0.capacity());	      	      StrBuilder strBuilder3 = strBuilder0.appendln(289);	      assertEquals(32, strBuilder0.capacity());	      assertEquals(32, strBuilder3.capacity());	      	      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1);	      assertEquals(32, strBuilder0.capacity());	      assertEquals(32, strBuilder4.capacity());	      	      // Undeclared exception!	      try { 	        strBuilder3.deleteCharAt(1027);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 1027	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void testExecute_2()                            throws Exception {        String demoWPSURL = TestProperties.getProperty( "demo_wps_url" );        Assume.assumeNotNull( demoWPSURL );        WPSClient wpsClient = new WPSClient( new URL( demoWPSURL ) );        org.deegree.protocol.wps.client.process.Process proc = wpsClient.getProcess( "Buffer", null );        ProcessExecution execution = proc.prepareExecution();        execution.addLiteralInput( "BufferDistance", null, "0.1", "double", "unity" );        execution.addXMLInput( "GMLInput", null, CURVE_FILE.toURI(), false, "text/xml", null, null );        execution.addOutput( "BufferedGeometry", null, null, false, null, null, null );        ExecutionOutputs outputs = execution.execute();        ComplexOutput complexOut = outputs.getComplex( "BufferedGeometry", null );        XMLAdapter searchableXML = new XMLAdapter( complexOut.getAsXMLStream() );        String xpathStr = "/gml:Polygon/gml:exterior/gml:LinearRing/gml:posList";        NamespaceBindings nsContext = new NamespaceBindings();        nsContext.addNamespace( GML_PREFIX, GML_NAMESPACE );        XPath xpath = new XPath( xpathStr, nsContext );        String pointList = searchableXML.getRequiredNodeAsString( searchableXML.getRootElement(), xpath );        Assert.assertEquals( 460, pointList.split( "\\s" ).length );    }
@Test  public void testUpdateEvent() {    eventHeader.setEventType(EventType.EXT_UPDATE_ROWS);    UpdateRowsEventData eventData = new UpdateRowsEventData();    eventData.setTableId(TABLE_ID);    eventData.setRows(ImmutableList.of(Maps.immutableEntry(PREV_ROW, ROW)));    Optional<BinlogEvent> binlogEvent =        BinaryLogConnectorEventMapper.INSTANCE.map(            new Event(eventHeader, eventData), BINLOG_FILE_POS);    assertTrue(binlogEvent.isPresent());    assertTrue(binlogEvent.get() instanceof UpdateEvent);    UpdateEvent updateEvent = (UpdateEvent) (binlogEvent.get());    assertEquals(BINLOG_FILE_POS, updateEvent.getBinlogFilePos());    assertEquals(ImmutableList.of(Maps.immutableEntry(PREV_ROW, ROW)), updateEvent.getRows());    assertEquals(SERVER_ID, updateEvent.getServerId());    assertEquals(TABLE_ID, updateEvent.getTableId());    assertEquals(TIMESTAMP, updateEvent.getTimestamp());  }
@Test(timeout = 4000)	  public void testappendAll()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");	      	      char[] charArray0 = new char[1];	      charArray0[0] = '\\';	      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      	      StrBuilder strBuilder4 = strBuilder0.setLength(2822);	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) strBuilder4;	      objectArray0[2] = (Object) strBuilder4;	      objectArray0[2] = (Object) '\\';	      objectArray0[3] = (Object) strBuilder1;	      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);	      	      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);	      	      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");	      	      StrBuilder strBuilder7 = strBuilder0.append(false);	      	      int int1 = strBuilder6.validateRange(0, 1320);	      	      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);	      	      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);	      	      String string0 = strBuilder8.getNullText();	  }
@Test  public void testGetProcessing() throws ParseException, IOException {    InputStream stream = TasksEndpointTest.class.getResourceAsStream("/taskProcessing.json");    InputStreamReader reader = new InputStreamReader(stream);    JSONArray expected = (JSONArray) new JSONParser().parse(reader);    JSONArray actual = (JSONArray) parser            .parse(given().queryParam("tags", "archive").expect().statusCode(HttpStatus.SC_OK)                    .contentType(ContentType.JSON).when().get(rt.host("/processing.json")).asString());    assertEquals(expected, actual);  }
@Test(timeout = 4000)	  public void testendsWith()  throws Throwable  {	      boolean boolean0 = StringUtils.isBlank((CharSequence) null);	      	      boolean boolean1 = StringUtils.endsWith((CharSequence) null, (CharSequence) null);	      	      String string0 = StringUtils.defaultString("fXNk|L<");	      	      boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Search and Replace array lengths don't match: ");	  }
@Test    public void testWriteElement()                            throws XMLStreamException {        StringWriter stringWriter = new StringWriter();        XMLOutputFactory factory = XMLOutputFactory.newInstance();        factory.setProperty( XMLOutputFactory.IS_REPAIRING_NAMESPACES, Boolean.TRUE );        XMLStreamWriter writer = new IndentingXMLStreamWriter( factory.createXMLStreamWriter( stringWriter ) );        adapter.getRootElement().serializeAndConsume( writer );    }
@Test(timeout = 4000)	  public void testsetValue()  throws Throwable  {	      MutableShort mutableShort0 = new MutableShort((short) (-3428));	      // Undeclared exception!	      try { 	        mutableShort0.setValue((Number) null);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.mutable.MutableShort", e);	      }	  }
@Test(timeout = 4000)	  public void teststrip()  throws Throwable  {	      String string0 = StringUtils.repeat('?', 90);	      	      boolean boolean0 = StringUtils.isAsciiPrintable("??????????????????????????????????????????????????????????????????????????????????????????");	      	      String string1 = StringUtils.stripToNull("uMPC");	      	      String string2 = StringUtils.reverse("N\"o2#` PTHD!p1Id1i");	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "N\"o2#` PTHD!p1Id1i", (CharSequence) "uMPC", 1991);	      	      boolean boolean1 = StringUtils.containsWhitespace("N\"o2#` PTHD!p1Id1i");	      	      int int1 = StringUtils.indexOfDifference((CharSequence) "??????????????????????????????????????????????????????????????????????????????????????????", (CharSequence) "i1dI1p!DHTP `#2o\"N");	      	      String string3 = StringUtils.stripEnd("N\"o2#` PTHD!p1Id1i", "i1dI1p!DHTP `#2o\"N");	      	      String string4 = StringUtils.defaultString("hgNZ");	      	      String[] stringArray0 = new String[3];	      stringArray0[0] = "uMPC";	      stringArray0[1] = "i1dI1p!DHTP `#2o\"N";	      stringArray0[2] = "??????????????????????????????????????????????????????????????????????????????????????????";	      // Undeclared exception!	      try { 	        StringUtils.replaceEachRepeatedly("??????????????????????????????????????????????????????????????????????????????????????????", stringArray0, stringArray0);	        fail("Expecting exception: IllegalStateException");	      	      } catch(IllegalStateException e) {	         //	         // Aborting to protect against StackOverflowError - output of one loop is the input of another	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testsetLength()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      String string0 = "0rn@[CM";	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");	      	      StrBuilder strBuilder1 = new StrBuilder("0rn@[CM");	      	      char[] charArray0 = new char[3];	      charArray0[0] = '\\';	      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      	      int int0 = 0;	      int int1 = 2822;	      StrBuilder strBuilder4 = strBuilder0.setLength(2822);	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) strBuilder4;	      objectArray0[1] = (Object) strBuilder4;	      objectArray0[2] = (Object) '\\';	      objectArray0[3] = (Object) strBuilder1;	      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);	      	      // Undeclared exception!	      try { 	        strBuilder0.appendln(strBuilder1, 0, 2822);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // length must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void onChangeSettings() throws Exception {        presenter.onChangeSettings();        verify(view, times(1)).setTextAppearance(any(TextAppearance.class));        verify(view, times(1)).setReaderMode(any(ReaderWebView.Mode.class));        verify(view, times(1)).setKeepScreen(anyBoolean());        verify(view, times(1)).setCurrentOrientation(anyBoolean());        verify(view, times(1)).updateActivityMode();        verify(view).updateContent();    }
@Test(timeout = 4000)	  public void testindexOfDifference()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[3];	      String string0 = StringUtils.chomp("cK2@iqJ0FN");	      	      charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN";	      String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN");	      	      charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc";	      CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN");	      	      charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	      	      int int1 = StringUtils.INDEX_NOT_FOUND;	      	      int int2 = StringUtils.ordinalIndexOf("cK2@iqJ0FN", charSequenceArray0[1], 0);	      	      String string2 = StringUtils.leftPad("8~?Y97L,", 0);	      	      int int3 = StringUtils.lastIndexOfAny("8~?Y97L,", charSequenceArray0);	      	      String string3 = StringUtils.stripEnd("Afh\"z$ulNc", "*W.W@X:");	      	      String string4 = StringUtils.substringAfter("%f'c29(F`", ")P;=`iiS");	      	      String string5 = StringUtils.capitalize("&S");	      	      boolean boolean0 = StringUtils.equals((CharSequence) "Afh\"z$ulNc", (CharSequence) "Afh\"z$ulNc");	  }
@Test    public void testCreationTime() {        final long before = System.currentTimeMillis();        final long creation = (new DummySession(service)).getCreationTime();        final long after = System.currentTimeMillis();        assertTrue(creation <= after);        assertTrue(creation >= before);    }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String string0 = "";	      String string1 = StringUtils.uncapitalize("");	      assertTrue(string1.equals((Object)string0));	      	      String string2 = ";7+{,\"0c";	      int int0 = StringUtils.ordinalIndexOf("", "", 4096);	      	      CharSequence charSequence0 = null;	      // Undeclared exception!	      try { 	        StringUtils.getLevenshteinDistance((CharSequence) null, (CharSequence) "");	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Strings must not be null	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testmax()  throws Throwable  {	      // Undeclared exception!	      try { 	        IEEE754rUtils.max((float[]) null);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The Array must not be null	         //	         verifyException("org.apache.commons.lang3.math.IEEE754rUtils", e);	      }	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ",");	      int[] intArray0 = new int[3];	      Boolean boolean0 = Boolean.TRUE;	      standardToStringStyle0.append(stringBuffer0, ",", intArray0, boolean0);	  }
@Test(expectedExceptions = NullPointerException.class)    public void testInOutIteratorNull() {        EdgeStore edgeStore = new EdgeStore();        edgeStore.edgeIterator(null);    }
@Test(timeout = 4000)	  public void testreplace()  throws Throwable  {	      String string0 = StringUtils.removeEndIgnoreCase("9<-;", "9<-;");	      	      boolean boolean0 = StringUtils.isAlphanumericSpace("");	      	      String string1 = StringUtils.replaceChars("", "9<-;", "");	      	      String string2 = StringUtils.center((String) null, 11, 'H');	      	      int int0 = StringUtils.length((CharSequence) null);	      	      String string3 = StringUtils.overlay("eUUr{~\"Kk", "Array and element cannot both be null", 127, 838);	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'p';	      charArray0[1] = 'H';	      charArray0[2] = 'H';	      charArray0[3] = 'H';	      charArray0[4] = 'H';	      int int1 = StringUtils.indexOfAnyBut((CharSequence) "eUUr{~\"KkArray and element cannot both be null", charArray0);	      	      String[] stringArray0 = StringUtils.substringsBetween("uGFBSQ?f[)ER{hCc", "]QJCk)m+seUL", (String) null);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator("9.2a=P+HRf`R's^w+eE", "");	      	      String string4 = StringUtils.uncapitalize("Array and element cannot both be null");	      	      char[] charArray1 = new char[4];	      	      charArray1[0] = 'H';	      charArray1[1] = 'H';	      charArray1[2] = 'p';	      charArray1[3] = '[';	      boolean boolean1 = StringUtils.containsAny((CharSequence) "Array and element cannot both be null", charArray1);	  }
@Test(timeout = 4000)	  public void testcenter()  throws Throwable  {	      String string0 = StringUtils.upperCase("");	      	      String string1 = StringUtils.difference("", "");	      	      String string2 = "\\u";	      String string3 = StringUtils.chop(string2);	      	      CharSequence[] charSequenceArray0 = new CharSequence[0];	      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);	      	      String string4 = StringUtils.substringAfterLast("", (String) null);	      	      String string5 = StringUtils.join((Object[]) charSequenceArray0, 'F', 591, 0);	      	      Class<String> class0 = String.class;	      ServiceLoader<String> serviceLoader0 = ServiceLoader.loadInstalled(class0);	      	      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());	      serviceLoader0.forEach(consumer0);	      	      String string6 = StringUtils.join((Iterable<?>) serviceLoader0, 'F');	      	      String string7 = StringUtils.removeEndIgnoreCase("", (String) null);	      	      String string8 = StringUtils.center(" is not in the range '0' - '9'", 0, 'F');	      	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "", 591);	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      String[] stringArray0 = StringUtils.splitByWholeSeparator("", "");	      	      String string0 = StringUtils.lowerCase("");	      	      String string1 = StringUtils.remove("", 'a');	      assertTrue(string1.equals((Object)string0));	      	      String string2 = StringUtils.upperCase("");	      assertTrue(string2.equals((Object)string1));	      assertTrue(string2.equals((Object)string0));	      	      String string3 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);	      assertTrue(string3.equals((Object)string0));	      assertTrue(string3.equals((Object)string2));	      assertTrue(string3.equals((Object)string1));	      	      String string4 = StringUtils.leftPad("", (-497), "");	      assertTrue(string4.equals((Object)string2));	      assertTrue(string4.equals((Object)string1));	      assertTrue(string4.equals((Object)string0));	      assertTrue(string4.equals((Object)string3));	      	      String string5 = StringUtils.replace("", "The Character must not be null", "", 7);	      assertTrue(string5.equals((Object)string0));	      assertTrue(string5.equals((Object)string3));	      assertTrue(string5.equals((Object)string4));	      assertTrue(string5.equals((Object)string2));	      assertTrue(string5.equals((Object)string1));	      	      String string6 = StringUtils.leftPad("#KLQLBF9u{", 32, '[');	      assertFalse(string6.equals((Object)string4));	      assertFalse(string6.equals((Object)string3));	      assertFalse(string6.equals((Object)string5));	      assertFalse(string6.equals((Object)string2));	      assertFalse(string6.equals((Object)string0));	      assertFalse(string6.equals((Object)string1));	      	      boolean boolean0 = StringUtils.equals((CharSequence) "", (CharSequence) "#KLQLBF9u{");	      	      String string7 = StringUtils.leftPad("x+-3y=5*", 7);	      assertFalse(string7.equals((Object)string0));	      assertFalse(string7.equals((Object)string4));	      assertFalse(string7.equals((Object)string6));	      assertFalse(string7.equals((Object)string1));	      assertFalse(string7.equals((Object)string3));	      assertFalse(string7.equals((Object)string5));	      assertFalse(string7.equals((Object)string2));	  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("");	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      boolean boolean0 = strBuilder_StrBuilderReader0.ready();	      	      StrBuilder strBuilder1 = new StrBuilder();	      assertTrue(strBuilder1.equals((Object)strBuilder0));	      	      StrBuilder strBuilder2 = strBuilder1.appendNewLine();	      assertFalse(strBuilder1.equals((Object)strBuilder0));	      assertFalse(strBuilder2.equals((Object)strBuilder0));	      	      StrBuilder strBuilder3 = strBuilder0.append((Object) strBuilder1);	      assertFalse(strBuilder0.equals((Object)strBuilder1));	      assertFalse(strBuilder0.equals((Object)strBuilder2));	      assertFalse(strBuilder1.equals((Object)strBuilder0));	      assertFalse(strBuilder3.equals((Object)strBuilder1));	      assertFalse(strBuilder3.equals((Object)strBuilder2));	      	      StrBuilder strBuilder4 = new StrBuilder((String) null);	      assertFalse(strBuilder4.equals((Object)strBuilder1));	      assertFalse(strBuilder4.equals((Object)strBuilder3));	      assertFalse(strBuilder4.equals((Object)strBuilder0));	      assertFalse(strBuilder4.equals((Object)strBuilder2));	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();	      assertFalse(strBuilder4.equals((Object)strBuilder1));	      assertFalse(strBuilder4.equals((Object)strBuilder3));	      assertFalse(strBuilder4.equals((Object)strBuilder0));	      assertFalse(strBuilder4.equals((Object)strBuilder2));	      	      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getDelimiterMatcher();	      assertFalse(strBuilder4.equals((Object)strBuilder1));	      assertFalse(strBuilder4.equals((Object)strBuilder3));	      assertFalse(strBuilder4.equals((Object)strBuilder0));	      assertFalse(strBuilder4.equals((Object)strBuilder2));	      	      StrBuilder strBuilder5 = strBuilder3.deleteFirst(strMatcher0);	      assertFalse(strBuilder0.equals((Object)strBuilder4));	      assertFalse(strBuilder0.equals((Object)strBuilder1));	      assertFalse(strBuilder0.equals((Object)strBuilder2));	      assertFalse(strBuilder1.equals((Object)strBuilder3));	      assertFalse(strBuilder1.equals((Object)strBuilder4));	      assertFalse(strBuilder1.equals((Object)strBuilder0));	      assertFalse(strBuilder3.equals((Object)strBuilder4));	      assertFalse(strBuilder3.equals((Object)strBuilder1));	      assertFalse(strBuilder3.equals((Object)strBuilder2));	      assertFalse(strBuilder4.equals((Object)strBuilder1));	      assertFalse(strBuilder4.equals((Object)strBuilder3));	      assertFalse(strBuilder4.equals((Object)strBuilder0));	      assertFalse(strBuilder4.equals((Object)strBuilder2));	      assertFalse(strBuilder5.equals((Object)strBuilder4));	      assertFalse(strBuilder5.equals((Object)strBuilder1));	      assertFalse(strBuilder5.equals((Object)strBuilder2));	  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      String string0 = StringUtils.mid("", 64, 64);	      	      CharSequence[] charSequenceArray0 = new CharSequence[9];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "";	      charSequenceArray0[5] = (CharSequence) "";	      charSequenceArray0[6] = (CharSequence) "";	      charSequenceArray0[7] = (CharSequence) "";	      String string1 = StringUtils.substringAfter("r", "");	      	      charSequenceArray0[8] = (CharSequence) "r";	      boolean boolean0 = StringUtils.endsWithAny("", charSequenceArray0);	      assertEquals(9, charSequenceArray0.length);	      	      boolean boolean1 = StringUtils.equals(charSequenceArray0[1], (CharSequence) "");	      assertEquals(9, charSequenceArray0.length);	      	      int[] intArray0 = new int[8];	      intArray0[0] = 64;	      intArray0[1] = 64;	      intArray0[2] = 64;	      intArray0[3] = 64;	      intArray0[4] = 64;	      intArray0[5] = 64;	      intArray0[6] = 64;	      intArray0[7] = 1076;	      String string2 = StringUtils.join(intArray0, 'q', 0, (-385));	      assertEquals(8, intArray0.length);	  }
@Test(timeout = 4000)	  public void testappendSuper()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30));	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30));	      Object object0 = new Object();	      Object object1 = new Object();	      EqualsBuilder.reflectionEquals(object0, object1, (String[]) null);	      float float0 = (-941.3923F);	      equalsBuilder0.appendSuper(false);	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F));	      char[] charArray0 = new char[3];	      charArray0[0] = '<';	      charArray0[1] = '?';	      char char0 = 'S';	      charArray0[2] = 'S';	      EqualsBuilder equalsBuilder4 = equalsBuilder3.append(charArray0, charArray0);	      EqualsBuilder equalsBuilder5 = equalsBuilder3.append((Object[]) null, (Object[]) null);	      Object object2 = new Object();	      EqualsBuilder.reflectionEquals((Object) equalsBuilder5, object2, (String[]) null);	      Boolean boolean0 = equalsBuilder1.build();	      IDKey iDKey0 = new IDKey(boolean0);	      EqualsBuilder.isRegistered(equalsBuilder4, iDKey0);	      float[] floatArray0 = new float[2];	      floatArray0[0] = (float) '?';	      floatArray0[1] = (float) '<';	      equalsBuilder3.append(floatArray0, floatArray0);	      equalsBuilder1.append((byte) (-30), (byte) (-30));	      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();	      EqualsBuilder.reflectionEquals((Object) 'S', (Object) 'S', (String[]) null);	      double[] doubleArray0 = new double[3];	      double double0 = (-1.0);	      doubleArray0[0] = double0;	      doubleArray0[1] = (double) char0;	      doubleArray0[2] = (double) float0;	      EqualsBuilder equalsBuilder6 = equalsBuilder2.append(doubleArray0, doubleArray0);	  }
@Test(timeout = 4000)	  public void testisMatch()  throws Throwable  {	      char[] charArray0 = new char[10];	      StrMatcher.CharMatcher strMatcher_CharMatcher0 = new StrMatcher.CharMatcher('\u0000');	      int int0 = strMatcher_CharMatcher0.isMatch(charArray0, 1, 1, 1);	  }
@Test(timeout = 4000)	  public void testlastIndexOf()  throws Throwable  {	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "|{s@(4`4p", (CharSequence) "|{s@(4`4p", 0);	  }
@Test    public void testGetAttributeColumnsEmpty() {        GraphStore store = new GraphStore();        NodeImpl node = new NodeImpl("0", store);        Iterable<Column> pk = node.getAttributeColumns();        Assert.assertNotNull(pk);        Iterator<Column> itr = pk.iterator();        Assert.assertNotNull(itr);        int size = 0;        for (; itr.hasNext();) {            Column c = itr.next();            Assert.assertTrue(c.isProperty());            size++;        }        Assert.assertTrue(size == getElementPropertiesLength());    }
@Test    @SuppressWarnings("unchecked")    public void testConsumer()                            throws Exception {        BlockingQueue<ProducerMessage> producerQueue = mock( BlockingQueue.class );        BlockingQueue<ConsumerMessage> consumerQueue = mock( BlockingQueue.class );        Feature[] features = new Feature[] { mock( Feature.class ), mock( Feature.class ) };        when( producerQueue.take() ).thenReturn( new ProducerFeatureMessage( features[0] ),                                                 new ProducerFeatureMessage( features[1] ),                                                 new ProducerFinishedMessage() );        Consumer consumer = new Consumer( producerQueue, consumerQueue );        assertTrue( consumer.hasNext() );        assertEquals( features[0], consumer.next() );        assertTrue( consumer.hasNext() );        assertEquals( features[1], consumer.next() );        assertFalse( consumer.hasNext() );        consumer.close();        verify( consumerQueue, never() ).put( new ConsumerClosingMessage() );    }
@Test    public void testEquals() {        TimestampSet set1 = new TimestampSet();        set1.add(6.0);        set1.add(1.0);        TimestampSet set2 = new TimestampSet();        set2.add(6.0);        set2.add(1.0);        TimestampSet set3 = new TimestampSet();        set3.add(6.0);        set3.add(2.0);        Assert.assertTrue(set1.equals(set2));        Assert.assertTrue(set2.equals(set1));        Assert.assertFalse(set1.equals(set3));        Assert.assertFalse(set3.equals(set1));        Assert.assertTrue(set1.hashCode() == set2.hashCode());        Assert.assertFalse(set1.hashCode() == set3.hashCode());    }
@Test  public void testFromMapWithNull() throws Exception {    assertEquals(0, JSONUtils.fromMap(null).length());  }
@Test    public void testMultiplePut() {        for (IntervalMap set : getAllInstances()) {            Object[] defaultValues = getTestValues(set);            Assert.assertTrue(set.put(new Interval(1.0, 2.0), defaultValues[0]));            Assert.assertTrue(set.put(new Interval(6.0, 8.0), defaultValues[1]));            testValues(set, new Interval[] { new Interval(1.0, 2.0), new Interval(6.0, 8.0) }, defaultValues);        }    }
@Test(timeout = 4000)	  public void testisNegated()  throws Throwable  {	      CharRange charRange0 = CharRange.is('o');	      char char0 = charRange0.getEnd();	      assertFalse(charRange0.isNegated());	  }
@Test    public void testSecondBootstrapDoesNothing() {        final StoredOrDefaultConfigurationProvider configurationProvider =            new StoredOrDefaultConfigurationProvider(StoredOrDefaultConfigurationProviderTest.setupMockStorage(null));        final ConfigurationFileManager subject = getTestJenkinsConfiguration(configurationProvider);        subject.initConfiguration();        // modify the extracted configuration        assertTrue(defaultFile.delete());        // running bootstrap again must not restore the file        subject.initConfiguration();        assertFalse(defaultFile.exists());    }
@Test(timeout = 4000)	  public void testdeleteAll()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(79);	      	      StrBuilder strBuilder1 = strBuilder0.append(0.0F);	      	      StrBuilder strBuilder2 = strBuilder0.append((double) 79);	      	      StrBuilder strBuilder3 = strBuilder0.appendln((-2267));	      	      StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3);	      	      StrBuilder strBuilder5 = strBuilder4.deleteAll('#');	      	      StrBuilder strBuilder6 = strBuilder5.append((StringBuilder) null, 79, 44);	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      	      int int0 = 2;	      StrBuilder strBuilder7 = strBuilder0.append((CharSequence) strBuilder1);	      	      StrBuilder strBuilder8 = strBuilder0.replaceAll("nCIF=^XRVL:\t%AH&", "end < start");	      	      // Undeclared exception!	      try { 	        strBuilder2.append((CharSequence) stringBuilder0, 2, (-211));	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // length must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertNull(strBuilder0.getNullText());	      	      int int0 = strBuilder0.capacity();	      assertNull(strBuilder0.getNullText());	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, "");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StrBuilder strBuilder2 = strBuilder1.deleteFirst("");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      assertNull(strBuilder2.getNullText());	      	      // Undeclared exception!	      try { 	        strBuilder0.appendln(strBuilder2, 32, 32);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // startIndex must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testequalsIgnoreCase()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("0rn@[CM");	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "0rn@[CM");	      	      char[] charArray0 = new char[1];	      charArray0[0] = '\\';	      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      	      StrBuilder strBuilder4 = strBuilder3.appendNewLine();	      	      StrBuilder strBuilder5 = strBuilder0.setLength(2822);	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) strBuilder5;	      objectArray0[1] = (Object) strBuilder5;	      objectArray0[2] = (Object) '\\';	      objectArray0[3] = (Object) strBuilder1;	      StrBuilder strBuilder6 = strBuilder5.appendAll(objectArray0);	      	      StrBuilder strBuilder7 = strBuilder0.appendln(strBuilder1, 0, 2822);	      	      int int0 = strBuilder7.lastIndexOf("0rn@[CM");	      	      StrBuilder strBuilder8 = strBuilder0.append(true);	      	      StrBuilder strBuilder9 = strBuilder1.appendln(1490.882886748184);	      	      StrBuilder strBuilder10 = strBuilder7.append(strBuilder3, 0, 2822);	      	      boolean boolean0 = strBuilder8.equalsIgnoreCase(strBuilder1);	  }
@Test(timeout = 4000)	  public void testbyteToBinary()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[6];	      // Undeclared exception!	      try { 	        Conversion.byteToBinary((byte)107, (-622), booleanArray0, 0, 213);	        fail("Expecting exception: ArrayIndexOutOfBoundsException");	      	      } catch(ArrayIndexOutOfBoundsException e) {	         //	         // 6	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test(timeout = 2500)    public void testLineStylingSmallClipping()                            throws Exception {        BufferedImage img = new BufferedImage( 100, 100, TYPE_INT_ARGB );        long time = currentTimeMillis();        Graphics2D g = img.createGraphics();        GeometryFactory geomFac = new GeometryFactory();        Java2DRenderer r = new Java2DRenderer( g, img.getWidth(), img.getHeight(),                                               geomFac.createEnvelope( new double[] { 0, 0 }, new double[] { 50d, 50d },                                                                       mapcs ) );        Point p1 = geomFac.createPoint( "testP1", 0, 0, null );        Point p2 = geomFac.createPoint( "testP1", 10000000, 100000000, null );        Points points = new PointsArray( p1, p2 );        LineString lineString = geomFac.createLineString( "testLineString", null, points );        LineStyling styling = new LineStyling();        styling.stroke.color = red;        styling.stroke.width = 5;        styling.stroke.dasharray = new double[] { 15, 15, 17, 5 };        r.render( styling, lineString );        g.dispose();        long time2 = currentTimeMillis();        List<String> texts = new LinkedList<String>();        texts.add( "line: default style line dashed with pattern 15, 15, 25, 5" );        validateImage( img, time2 - time, "linestylingsmallclipping" );    }
@Test    public void testFromWei() {        assertThat(Convert.fromVon("21000000000000", Convert.Unit.VON),                is(new BigDecimal("21000000000000")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.KVON),                is(new BigDecimal("21000000000")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.MVON),                is(new BigDecimal("21000000")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.GVON),                is(new BigDecimal("21000")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.SZABO),                is(new BigDecimal("21")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.FINNEY),                is(new BigDecimal("0.021")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.LAT),                is(new BigDecimal("0.000021")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.KLAT),                is(new BigDecimal("0.000000021")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.MLAT),                is(new BigDecimal("0.000000000021")));        assertThat(Convert.fromVon("21000000000000", Convert.Unit.GLAT),                is(new BigDecimal("0.000000000000021")));    }
@Test    public void testWfs200SpecExample1()                            throws Exception {        LockFeatureXMLAdapter parser = new LockFeatureXMLAdapter();        parser.load( LockFeatureXMLAdapterTest.class.getResource( "wfs200/example1.xml" ) );        LockFeature request = parser.parse();        assertEquals( VERSION_200, request.getVersion() );        assertFalse( request.getLockAll() );        assertEquals( 1, request.getQueries().size() );        assertNull( request.getExistingLockId() );        assertNull( request.getExpiryInSeconds() );        assertNull( request.getHandle() );    }
@Test    public void priorityNoExclusive() {        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.PRIORITY_NO_EXCLUSIVE_MODE_BUFFER);        Http2PriorityFrame frame = (Http2PriorityFrame) decoder.decode(buffer, context);        assertNotNull(frame);        assertEquals(5, frame.getLength());        assertEquals(2, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(32, frame.getStreamID());        assertEquals(256, frame.getStreamDependencyID());        assertFalse(frame.getExclusiveMode());        assertEquals(2, frame.getWeight());    }
@Test(timeout = 4000)	  public void testremoveEndIgnoreCase()  throws Throwable  {	      String string0 = StringUtils.removeEndIgnoreCase("", "");	      	      CharSequence[] charSequenceArray0 = new CharSequence[0];	      int int0 = StringUtils.lastIndexOfAny("", charSequenceArray0);	      	      boolean boolean0 = StringUtils.equalsIgnoreCase("", "");	      	      boolean boolean1 = StringUtils.isAlpha("");	      	      TreeSet<String> treeSet0 = new TreeSet<String>();	      	      Iterator<String> iterator0 = treeSet0.descendingIterator();	      	      Locale locale0 = Locale.FRENCH;	      	      Set<String> set0 = locale0.getUnicodeLocaleKeys();	      	      boolean boolean2 = treeSet0.addAll(set0);	      	      String string1 = StringUtils.join(iterator0, "y)eN");	      	      String string2 = StringUtils.leftPad("", 16, 'c');	  }
@Test public void testOnDestroy() {		// Arrange:		final FragmentActivity activity = Robolectric.buildActivity(TestCompatActivity.class).create().start().resume().get();		final FragmentManager fragmentManager = activity.getSupportFragmentManager();		final BaseFragment fragment = new TestFragment();		// Act:		fragmentManager.beginTransaction().add(fragment, null).commit();		fragmentManager.executePendingTransactions();		fragmentManager.beginTransaction().remove(fragment).commit();		fragmentManager.executePendingTransactions();		// Assert:		assertThat(fragment.isDestroyed(), is(true));		assertThat(fragment.isCreated(), is(false));	}
@Test    public void testWMSCapabilitiesHasLayer()                            throws XMLStreamException {        WMSCapabilitiesAdapter capabilities = createCapabilities();        assertTrue( capabilities.hasLayer( "cite:NamedPlaces" ) );    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testGetAttributeKeyUnknown() {        GraphStore store = new GraphStore();        NodeImpl node = new NodeImpl("0", store);        node.getAttribute("foo");    }
@Test    public void evaluateBegunByInstant1() {        expectedException.expect( IllegalArgumentException.class );        expectedException.expectMessage( "Invalid arguments for SplitBy" );        splitBy.evaluate( period( "00:00:02", "00:00:05" ), instant( "00:00:02" ) );    }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseIntervalSetBadEmpty1() {        IntervalsParser.parseIntervalSet("[]");    }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      double[] doubleArray0 = new double[2];	      BitSet bitSet0 = new BitSet();	      // Undeclared exception!	      try { 	        ArrayUtils.removeAll((Object) doubleArray0[0], bitSet0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Argument is not an array	         //	         verifyException("java.lang.reflect.Array", e);	      }	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testParseIntervalSetBadEmpty3() {        IntervalsParser.parseIntervalSet("[1,]");    }
@Test(timeout = 4000)	  public void testindexOf()  throws Throwable  {	      String string0 = StringUtils.SPACE;	      	      CharSequence[] charSequenceArray0 = new CharSequence[1];	      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);	      	      int int1 = StringUtils.indexOf(charSequenceArray0[0], (CharSequence) " ");	      	      String string1 = StringUtils.capitalize(" ");	      	      String string2 = StringUtils.remove(" ", '8');	      	      String string3 = StringUtils.join((Object[]) charSequenceArray0, " ");	      	      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", "");	  }
@Test    public void testFileMd5SumNotEquals() throws Exception {        Path path1 = Paths.get(FileDigestUtilTest.class.getResource("file1.txt").toURI());        Path path2 = Paths.get(FileDigestUtilTest.class.getResource("file3.txt").toURI());        byte[] digest1 = fileDigestUtil.getFileMd5Sum(path1);        byte[] digest2 = fileDigestUtil.getFileMd5Sum(path2);        assertFalse(Arrays.equals(digest1, digest2));    }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertEquals(0, strBuilder0.size());	      	      StrBuilder strBuilder1 = strBuilder0.setNullText("Invalid startIndex: ");	      assertEquals(0, strBuilder0.size());	      assertEquals(0, strBuilder1.size());	      	      StrBuilder strBuilder2 = strBuilder0.replaceFirst("Invalid startIndex: ", "t~;\"vYIT!5d}%CW)%");	      assertEquals(0, strBuilder0.size());	      assertEquals(0, strBuilder2.size());	      	      int int0 = 537;	      // Undeclared exception!	      try { 	        strBuilder1.replace(537, 166, "");	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // end < start	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test   public void testCeilingInterval() throws Exception   {      Date then = format.parse("5/20/2009");      Date ref = format.parse("6/17/2009");      PrettyTime t = new PrettyTime(ref);      Assert.assertEquals("1 month ago", t.format(then));   }
@Test    public void testContextMissingStrategyOverrideSystemProperty() {        System.setProperty(ContextMissingStrategy.CONTEXT_MISSING_STRATEGY_SYSTEM_PROPERTY_OVERRIDE_KEY, "log_error");        AWSXRayRecorder recorder = AWSXRayRecorderBuilder.standard().withContextMissingStrategy(            new RuntimeErrorContextMissingStrategy()).build();        Assert.assertTrue(recorder.getContextMissingStrategy() instanceof LogErrorContextMissingStrategy);    }
@Test(timeout = 4000)	  public void testsetValue()  throws Throwable  {	      MutableShort mutableShort0 = new MutableShort();	      Short short0 = mutableShort0.getValue();	      mutableShort0.setValue((Number) short0);	  }
@Test(timeout = 4000)	  public void testisUseIdentityHashCode()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      Class<Long> class0 = Long.class;	      standardToStringStyle0.NO_FIELD_NAMES_STYLE.getShortClassName(class0);	      assertTrue(standardToStringStyle0.isUseIdentityHashCode());	  }
@Test(timeout = 4000)	  public void testgetNewLineText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(1354);	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      assertNull(strBuilder0.getNewLineText());	      	      int int0 = strBuilder_StrBuilderReader0.read();	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      assertNull(strBuilder0.getNewLineText());	      	      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();	      assertNull(strBuilder0.getNewLineText());	      	      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0);	      assertNull(strBuilder0.getNewLineText());	      	      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      	      StrBuilder strBuilder2 = strBuilder1.append('E');	      assertNull(strBuilder0.getNewLineText());	      assertNull(strBuilder1.getNewLineText());	      assertNull(strBuilder2.getNewLineText());	      	      // Undeclared exception!	      try { 	        strBuilder2.charAt(2193);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 2193	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    void testToSnakeCaseNoExtraUnderscores() {        Assertions.assertEquals("table_name", StringTransform.toSnakeCase("table_name"));    }
@Test(timeout = 4000)	  public void testabbreviate()  throws Throwable  {	      String[] stringArray0 = new String[9];	      stringArray0[0] = "";	      stringArray0[1] = "Index: ";	      stringArray0[2] = "t=$]1l^E";	      stringArray0[3] = "R";	      stringArray0[4] = "3 pZ(|hk3o";	      stringArray0[5] = "";	      String string0 = "\\u000";	      stringArray0[6] = string0;	      stringArray0[7] = "V'4=.E,,{";	      stringArray0[8] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "3 pZ(|hk3o", (CharSequence) "");	      	      String string1 = StringUtils.replaceOnce("VQ_N6", "", "z/c");	      	      String string2 = StringUtils.overlay("", "", 2521, 0);	      	      boolean boolean0 = StringUtils.startsWithAny("V'4=.E,,{", stringArray1);	      	      String[] stringArray2 = StringUtils.splitByCharacterType(stringArray0[6]);	      	      String string3 = StringUtils.abbreviateMiddle("!*", "#JFYM}vU \"],4Y", 1448);	      	      String string4 = StringUtils.leftPad("!*", 2521, 'X');	      	      double[] doubleArray0 = new double[3];	      doubleArray0[0] = (double) 0;	      doubleArray0[1] = (double) 2521;	      doubleArray0[2] = (double) 'X';	      String string5 = StringUtils.join(doubleArray0, 'X');	  }
@Test(timeout = 4000)	  public void testtoString()  throws Throwable  {	      String string0 = ObjectUtils.toString((Object) null, "org.apache.commons.lang3.ArrayUtils");	  }
@Test(timeout = 4000)	  public void testisPrimitiveWrapper()  throws Throwable  {	      Class<Boolean> class0 = Boolean.TYPE;	      boolean boolean0 = ClassUtils.isPrimitiveWrapper(class0);	  }
@Test(timeout = 4000)	  public void testendsWith()  throws Throwable  {	      String string0 = StringUtils.rightPad((String) null, 1337);	      	      String string1 = StringUtils.chomp("", (String) null);	      	      String string2 = StringUtils.stripEnd("", (String) null);	      	      boolean boolean0 = StringUtils.containsIgnoreCase("", (CharSequence) null);	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase((CharSequence) null, (CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase("");	      	      int[] intArray0 = new int[5];	      intArray0[0] = 1337;	      intArray0[1] = 1337;	      intArray0[2] = 1337;	      intArray0[3] = 1337;	      intArray0[4] = 1337;	      String string3 = StringUtils.join(intArray0, '?');	      	      boolean boolean2 = StringUtils.isAllLowerCase("1337?1337?1337?1337?1337");	      	      String string4 = StringUtils.substring("", 1337, 1337);	      	      String string5 = StringUtils.mid("7>", 0, 4430);	      	      String[] stringArray1 = StringUtils.split("I`7=)^j");	      	      int[] intArray1 = new int[2];	      	      intArray1[0] = 0;	      intArray1[1] = 0;	      String string6 = StringUtils.join(intArray1, 'V');	  }
@Test(timeout = 4000)	  public void testhexDigitToBinary()  throws Throwable  {	      // Undeclared exception!	      try { 	        Conversion.hexDigitToBinary('^');	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Cannot interpret '^' as a hexadecimal digit	         //	         verifyException("org.apache.commons.lang3.Conversion", e);	      }	  }
@Test  public void testAddSourcePrefixCreateIndex() throws Exception {    String ddl = "CREATE INDEX id_index ON lookup (id) USING BTREE;";    assertEquals(ddl, schemaDatabase.addSourcePrefix(ddl));    ddl = "CREATE UNIQUE INDEX unique_index ON `my_db`.`my_table` (`col1`, `col2`)";    String expectedDDL =        "CREATE UNIQUE INDEX unique_index ON `source/my_db`.`my_table` (`col1`, `col2`)";    assertEquals(expectedDDL, schemaDatabase.addSourcePrefix(ddl));  }
@Test  public void testGetEventAccessInformation() throws Exception {    String eventAccessJson = IOUtils.toString(getClass().getResource("/eventAccess.json"));    given().pathParam("eventId", "notExists").expect().statusCode(HttpStatus.SC_NOT_FOUND).when()            .get(rt.host("{eventId}/access.json"));    JSONObject result = (JSONObject) new JSONParser().parse(given().pathParam("eventId", "asdasd").expect()            .statusCode(HttpStatus.SC_OK).when().get(rt.host("{eventId}/access.json")).asString());    // Fix ordering for embedded acl json string    String expectedAclString = getAclString(eventAccessJson);    String aclString = getAclString(result.toJSONString());    assertThat(expectedAclString, SameJSONAs.sameJSONAs(aclString));    JSONObject episodeAccess = (JSONObject) result.get("episode_access");    episodeAccess.replace("acl", expectedAclString);    assertThat(eventAccessJson, SameJSONAs.sameJSONAs(result.toJSONString()));  }
@Test    public void given$setOnShowSurveyHandler_whenQuery_thenShouldSetNativeCallback() {        try {            // given            PowerMockito.mockStatic(Surveys.class);            PowerMockito.mockStatic(InstabugUtil.class);            // when            PowerMockito.doAnswer(new Answer<Object>() {                @Override                public Object answer(InvocationOnMock invocation) {                    ((OnShowCallback) invocation.getArguments()[0]).onShow();                    return null;                }            }).when(Surveys.class, "setOnShowCallback", Matchers.anyObject());            surveysModule.setOnShowHandler(null);            // then            PowerMockito.verifyStatic(VerificationModeFactory.times(1));            InstabugUtil.sendEvent(any(ReactApplicationContext.class), eq(Constants.IBG_ON_SHOW_SURVEY_HANDLER), Matchers.isNull(WritableMap.class));        } catch (Exception e) {            e.printStackTrace();        }    }
@Test    public void startInstanceByName() {        snakerEngineFacets.initFlows();        List<Process> allProcess = snakerEngineFacets.getAllProcess();        if (!CollectionUtils.isEmpty(allProcess)) {            Process process = allProcess.get(0);            Order dm = snakerEngineFacets.startInstanceByName(process.getName(), 0, "apply.operator", null);            Assert.assertNotNull(dm);        }    }
@Test(timeout = 4000)	  public void testlongValue()  throws Throwable  {	      MutableFloat mutableFloat0 = new MutableFloat();	      Short short0 = new Short((short) (-1));	      mutableFloat0.setValue((Number) short0);	      long long0 = mutableFloat0.longValue();	  }
@Test    public void testDownloadFromFileStorage() {        final ConfigurationFileManager subject = getTestJenkinsConfiguration();        assertNotNull(subject.downloadStoredConfiguration());    }
@Test    public void sevenFM() {        Assert.assertEquals(                RxComprehensions                        .doFlatMap(zero(1), one(true), two("result"), three("other"), four("other".length()),                                five("other".length() < 5), six(Boolean.toString(false)), seven("true"))                        .toBlocking().first(),                false);    }
@Test(timeout = 4000)	  public void testisAlphanumeric()  throws Throwable  {	      String[] stringArray0 = StringUtils.splitByWholeSeparator("'U TLe$1Bk", "");	      	      boolean boolean0 = StringUtils.isAlphanumericSpace("");	      	      Locale locale0 = Locale.JAPAN;	      	      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();	      	      Vector<String> vector1 = new Vector<String>();	      	      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) vector1);	      	      String string0 = StringUtils.upperCase("", locale0);	      	      Vector<Object> vector2 = new Vector<Object>(10, 10);	      	      String string1 = StringUtils.join((Iterable<?>) vector2, 'o');	      	      String[] stringArray1 = StringUtils.split("'U TLe$1Bk", "", 0);	  }
@Test(timeout = 4000)	  public void testtranslate()  throws Throwable  {	      CharSequence[][] charSequenceArray0 = new CharSequence[4][4];	      CharSequence[] charSequenceArray1 = new CharSequence[2];	      char[] charArray0 = new char[16];	      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);	      charSequenceArray1[0] = (CharSequence) charBuffer0;	      charSequenceArray0[0] = charSequenceArray1;	      StringWriter stringWriter0 = new StringWriter(0);	      charSequenceArray0[1] = charSequenceArray0[0];	      charSequenceArray0[2] = charSequenceArray0[0];	      charSequenceArray0[3] = charSequenceArray0[1];	      LookupTranslator lookupTranslator0 = new LookupTranslator(charSequenceArray0);	      // Undeclared exception!	      try { 	        lookupTranslator0.translate(charSequenceArray1[0], (-3), (Writer) stringWriter0);	        fail("Expecting exception: IndexOutOfBoundsException");	      	      } catch(IndexOutOfBoundsException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.nio.HeapCharBuffer", e);	      }	  }
@Test    public void simplifySurface1() {        Point p0 = fac.createPoint( null, 0.0, 0.0, CRSUtils.EPSG_4326 );        Point p1 = fac.createPoint( null, 10.0, 0.0, CRSUtils.EPSG_4326 );        Point p2 = fac.createPoint( null, 10.0, 10.0, CRSUtils.EPSG_4326 );        Point p3 = fac.createPoint( null, 10.0, 10.0, CRSUtils.EPSG_4326 );        Point p4 = fac.createPoint( null, 0.0, 10.0, CRSUtils.EPSG_4326 );        Point p5 = fac.createPoint( null, 1.0, 1.0, CRSUtils.EPSG_4326 );        Point p6 = fac.createPoint( null, 1.0, 9.0, CRSUtils.EPSG_4326 );        Point p7 = fac.createPoint( null, 9.0, 9.0, CRSUtils.EPSG_4326 );        Point p8 = fac.createPoint( null, 9.0, 1.0, CRSUtils.EPSG_4326 );        Point p9 = fac.createPoint( null, 1.0, 10.0, CRSUtils.EPSG_4326 );        LineStringSegment seg0 = fac.createLineStringSegment( new PointsArray( p0, p1, p2, p3, p4 ) );        LineStringSegment seg1 = fac.createLineStringSegment( new PointsArray( p5, p6, p7, p8, p9 ) );        Curve curve0 = fac.createCurve( null, CRSUtils.EPSG_4326, seg0 );        Curve curve1 = fac.createCurve( null, CRSUtils.EPSG_4326, seg1 );        Ring exteriorRing = fac.createRing( null, CRSUtils.EPSG_4326, Collections.singletonList( curve0 ) );        Ring interiorRing = fac.createRing( null, CRSUtils.EPSG_4326, Collections.singletonList( curve1 ) );        SurfacePatch patch0 = fac.createPolygonPatch( exteriorRing, Collections.singletonList( interiorRing ) );        Surface surface = fac.createSurface( null, Collections.singletonList( patch0 ), CRSUtils.EPSG_4326 );        Polygon simplified = (Polygon) simplifier.simplify( surface );        assertEquals(                      "POLYGON ((0.000000 0.000000,10.000000 0.000000,10.000000 10.000000,10.000000 10.000000,0.000000 10.000000),(1.000000 1.000000,1.000000 9.000000,9.000000 9.000000,9.000000 1.000000,1.000000 10.000000))",                      simplified.toString() );    }
@Test(timeout = 4000)	  public void testisEquals()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();	      equalsBuilder0.append(true, true);	      Class<Integer> class0 = Integer.class;	      String[] stringArray0 = new String[3];	      stringArray0[1] = "";	      stringArray0[2] = "Q@a+w^PT*i";	      EqualsBuilder.reflectionEquals((Object) equalsBuilder0, (Object) null, true, (Class<?>) class0, stringArray0);	      Boolean boolean0 = Boolean.FALSE;	      MutablePair<IDKey, IDKey> mutablePair0 = new MutablePair<IDKey, IDKey>();	      float[] floatArray0 = new float[4];	      floatArray0[1] = (float) (byte)2;	      EqualsBuilder.reflectionEquals((Object) stringArray0[0], (Object) boolean0, stringArray0);	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append((-3995L), (-3995L));	      assertTrue(equalsBuilder1.isEquals());	      	      float[] floatArray1 = new float[1];	      floatArray1[0] = (float) (byte)2;	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append(floatArray0, floatArray1);	      assertFalse(equalsBuilder0.isEquals());	  }
@Test(timeout = 4000)	  public void testisNegated()  throws Throwable  {	      CharRange charRange0 = CharRange.is('6');	      boolean boolean0 = charRange0.contains(charRange0);	      assertFalse(charRange0.isNegated());	  }
@Test    public void parseClothoid()                            throws XMLStreamException, FactoryConfigurationError, IOException, XMLParsingException,                            UnknownCRSException {        Clothoid segment = (Clothoid) getParser().parseCurveSegment( getReader( "Clothoid.gml" ),                                                                     CRSManager.getCRSRef( "EPSG:4326" ) );        Assert.assertEquals( 47.0, segment.getReferenceLocation().getLocation().get0() );        Assert.assertEquals( 11.0, segment.getReferenceLocation().getLocation().get1() );        Assert.assertEquals( 13.0, segment.getReferenceLocation().getLocation().get2() );        Assert.assertEquals( 2, segment.getReferenceLocation().getRefDirections().size() );        Assert.assertEquals( 3.0, segment.getReferenceLocation().getRefDirections().get( 0 ).get0() );        Assert.assertEquals( 4.0, segment.getReferenceLocation().getRefDirections().get( 0 ).get1() );        Assert.assertEquals( 8.0, segment.getReferenceLocation().getRefDirections().get( 0 ).get2() );        Assert.assertEquals( 5.0, segment.getReferenceLocation().getRefDirections().get( 1 ).get0() );        Assert.assertEquals( 6.0, segment.getReferenceLocation().getRefDirections().get( 1 ).get1() );        Assert.assertEquals( 9.0, segment.getReferenceLocation().getRefDirections().get( 1 ).get2() );        Assert.assertEquals( 2, segment.getReferenceLocation().getInDimension() );        Assert.assertEquals( 3, segment.getReferenceLocation().getOutDimension() );        Assert.assertEquals( 0.9, segment.getScaleFactor() );        Assert.assertEquals( -2.5, segment.getStartParameter() );        Assert.assertEquals( 3.0, segment.getEndParameter() );    }
@Test(timeout = 4000)	  public void testgetExternalExecutor()  throws Throwable  {	      Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());	      CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0);	      ExecutorService executorService0 = callableBackgroundInitializer0.getExternalExecutor();	  }
@Test(timeout = 4000)	  public void testaddDays()  throws Throwable  {	      // Undeclared exception!	      try { 	        DateUtils.addDays((Date) null, (-1));	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // The date must not be null	         //	         verifyException("org.apache.commons.lang3.time.DateUtils", e);	      }	  }
@Test    public void evaluateBegunByInstant2() {        expectedException.expect( IllegalArgumentException.class );        expectedException.expectMessage( "Invalid arguments for SplitBy" );        splitBy.evaluate( period( "00:00:02", null ), instant( "00:00:02" ) );    }
@Test    public void testInspectInputParametersFromJrxml() {        OtherContentProvider wmsContentProvider = new OtherContentProvider( null );        Map<String, String> parameters = new HashMap<String, String>();        parameters.put( "DATE", "java.util.Date" );        parameters.put( "DESCRIPTION", "java.lang.String" );        parameters.put( "MAPSCALE", "java.lang.Integer" );        parameters.put( "printOptTxt", "java.lang.Boolean" );        List<JAXBElement<? extends ProcessletInputDefinition>> inputs = new ArrayList<JAXBElement<? extends ProcessletInputDefinition>>();        XMLAdapter adapter = new XMLAdapter(                                             TestOtherContentProviderTest.class.getResourceAsStream( "../testWPSreportTemplate.jrxml" ) );        List<String> handledParams = new ArrayList<String>();        wmsContentProvider.inspectInputParametersFromJrxml( new HashMap<String, ParameterDescription>(), inputs,                                                            adapter, parameters, handledParams );        assertEquals( 4, parameters.size() );        // handled        assertEquals( 4, handledParams.size() );        assertEquals( 4, inputs.size() );        JAXBElement<? extends ProcessletInputDefinition> pDate = null;        JAXBElement<? extends ProcessletInputDefinition> pString = null;        JAXBElement<? extends ProcessletInputDefinition> pInt = null;        JAXBElement<? extends ProcessletInputDefinition> pBool = null;        for ( JAXBElement<? extends ProcessletInputDefinition> in : inputs ) {            if ( "DATE".equals( in.getValue().getIdentifier().getValue() ) ) {                pDate = in;            } else if ( "DESCRIPTION".equals( in.getValue().getIdentifier().getValue() ) ) {                pString = in;            } else if ( "MAPSCALE".equals( in.getValue().getIdentifier().getValue() ) ) {                pInt = in;            } else if ( "printOptTxt".equals( in.getValue().getIdentifier().getValue() ) ) {                pBool = in;            }        }        assertNotNull( pDate );        assertNotNull( pString );        assertNotNull( pInt );        assertNotNull( pBool );        assertTrue( pDate.getDeclaredType() == LiteralInputDefinition.class );        assertTrue( pString.getDeclaredType() == LiteralInputDefinition.class );        assertTrue( pInt.getDeclaredType() == LiteralInputDefinition.class );        assertTrue( pBool.getDeclaredType() == LiteralInputDefinition.class );        assertEquals( "date", ( ( (LiteralInputDefinition) pDate.getValue() ).getDataType().getValue() ) );        assertEquals( "string", ( ( (LiteralInputDefinition) pString.getValue() ).getDataType().getValue() ) );        assertEquals( "integer", ( ( (LiteralInputDefinition) pInt.getValue() ).getDataType().getValue() ) );        assertEquals( "boolean", ( ( (LiteralInputDefinition) pBool.getValue() ).getDataType().getValue() ) );    }
@Test(timeout = 4000)	  public void teststrip()  throws Throwable  {	      String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768));	      	      boolean boolean0 = StringUtils.isAllUpperCase("");	      	      String string1 = StringUtils.remove("x", ')');	      	      String string2 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768));	      	      boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type ");	      	      String string3 = StringUtils.stripToNull("ptgNwtnxatzWXwA");	      	      String[] stringArray0 = StringUtils.split("Cannot clone Cloneable type ", "x", (-32768));	      	      String string4 = StringUtils.removeEnd((String) null, "aEK60VM*X");	      	      boolean boolean2 = StringUtils.isNumeric("Cannot clone Cloneable type ");	      	      boolean boolean3 = StringUtils.isAlphanumericSpace("Cannot clone Cloneable type ");	      	      String string5 = StringUtils.substringBeforeLast((String) null, "");	      	      String string6 = StringUtils.rightPad("aEK60VM*X", 25, 'D');	      	      String string7 = StringUtils.abbreviateMiddle("Cannot clone Cloneable type ", "cnC6A#Qa.Kd}", (-32768));	      	      int int0 = StringUtils.indexOf((CharSequence) "Cannot clone Cloneable type ", 7, 19);	      	      String string8 = StringUtils.rightPad("x", 174, 'D');	      	      String string9 = StringUtils.substringBetween("ptgNwtnxatzWXwA", "");	  }
@Test(timeout = 4000)	  public void testlastIndexOfIgnoreCase()  throws Throwable  {	      String[] stringArray0 = new String[6];	      stringArray0[0] = "";	      stringArray0[1] = "";	      stringArray0[2] = "";	      stringArray0[3] = "";	      stringArray0[4] = "X69]M!8$l}E@BGv1jB";	      stringArray0[5] = "";	      String string0 = StringUtils.replaceEach("", stringArray0, stringArray0);	      	      String string1 = StringUtils.replaceEachRepeatedly("", stringArray0, stringArray0);	      	      String string2 = StringUtils.substring("jS6+ObwFdd@<v/K", 0);	      	      String string3 = StringUtils.rightPad((String) null, 0, 'V');	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens("X69]M!8$l}E@BGv1jB", "");	      	      String string4 = StringUtils.chomp((String) null, "-!*N;DIA");	      	      String string5 = StringUtils.trim((String) null);	      	      int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "", (CharSequence) null, 1514);	      	      int int1 = StringUtils.indexOfAny((CharSequence) null, (CharSequence[]) stringArray0);	      	      String string6 = StringUtils.substring((String) null, 1514);	      	      CharSequence[] charSequenceArray0 = new CharSequence[2];	      charSequenceArray0[0] = (CharSequence) "";	      charSequenceArray0[1] = (CharSequence) "";	      int int2 = StringUtils.indexOfDifference(charSequenceArray0);	      	      boolean boolean0 = StringUtils.isAlpha((CharSequence) null);	      	      String string7 = StringUtils.difference("-!*N;DIA", (String) null);DIA", string7);	      	      boolean boolean1 = StringUtils.isNumericSpace("-!*N;DIA");	      	      String string8 = StringUtils.join((int[]) null, '\'');	      	      String string9 = StringUtils.defaultIfBlank("J(k87R7s&`_@", (String) null);	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testAddAllSelf() {        NodeStore nodeStore = new NodeStore();        nodeStore.addAll(nodeStore);    }
@Test    public void eightCM() {        Assert.assertEquals(RxComprehensions                .doConcatMap(zero(1), one(true), two("result"), three("other"), four("other".length()),                        five("other".length() < 5), six(Boolean.toString(false)), seven("true"), eight(Long.class))                .toBlocking().first(), Long.class);    }
@Test    void testDecoration() throws SQLException {        Assertions.assertTrue(connection instanceof TracingConnection);        Assertions.assertTrue(connection.isWrapperFor(Connection.class));        Assertions.assertTrue(connection.isWrapperFor(TracingConnection.class));        Assertions.assertTrue(connection.isWrapperFor(OtherWrapper.class));        Assertions.assertTrue(connection.isWrapperFor(ExtraInterface.class));        Assertions.assertFalse(connection.isWrapperFor(Long.class));        verify(delegate, never()).isWrapperFor(Connection.class);        verify(delegate, never()).isWrapperFor(TracingConnection.class);        verify(delegate).isWrapperFor(OtherWrapper.class);        verify(delegate).isWrapperFor(ExtraInterface.class);        verify(delegate).isWrapperFor(Long.class);    }
@Test  public void testRetractMultipleJob() throws Exception {    Set<String> mpeIds = new LinkedHashSet<String>();    mpeIds.add("presenter-delivery");    boolean checkAvailability = false;    List<String> args = new LinkedList<String>();    args.add("channelId");    args.add(MediaPackageParser.getAsXml(mp));    args.add(gson.toJson(mpeIds));    EasyMock.expect(            serviceRegistry.createJob(                    AwsS3DistributionServiceImpl.JOB_TYPE,                    AwsS3DistributionServiceImpl.Operation.Retract.toString(),                    args, AwsS3DistributionServiceImpl.DEFAULT_RETRACT_JOB_LOAD            )).andReturn(null).once();    EasyMock.replay(serviceRegistry);    service.retract("channelId", mp, mpeIds);    EasyMock.verify(serviceRegistry);  }
@Test(timeout = 4000)	  public void testequals()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(0);	      	      StrBuilder strBuilder1 = strBuilder0.appendln((long) 0);	      	      Reader reader0 = strBuilder1.asReader();	      	      char[] charArray0 = strBuilder0.toCharArray(0, 0);	      	      StringBuilder stringBuilder0 = strBuilder1.toStringBuilder();	      	      StrBuilder strBuilder2 = strBuilder0.appendNull();	      	      ArrayList<Object> arrayList0 = new ArrayList<Object>();	      	      boolean boolean0 = arrayList0.add((Object) "org.apache.commons.lang3.text.StrBuilder$StrBuilderReader");	      	      ListIterator<Object> listIterator0 = arrayList0.listIterator();	      	      StrBuilder strBuilder3 = strBuilder1.appendWithSeparators((Iterator<?>) listIterator0, "");	      	      StrBuilder strBuilder4 = strBuilder0.minimizeCapacity();	      	      Object[] objectArray0 = new Object[4];	      objectArray0[0] = (Object) "";	      objectArray0[1] = (Object) "";	      objectArray0[2] = (Object) strBuilder0;	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder4.new StrBuilderTokenizer();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer1 = (StrBuilder.StrBuilderTokenizer)strBuilder_StrBuilderTokenizer0.clone();	      assertFalse(strBuilder_StrBuilderTokenizer1.equals((Object)strBuilder_StrBuilderTokenizer0));	      	      objectArray0[3] = (Object) strBuilder_StrBuilderTokenizer1;	      StrBuilder strBuilder5 = strBuilder0.appendWithSeparators(objectArray0, "\u0005~t3<ZfA9n`W0/IY");	  }
@Test   public void testMinutesFromNow() throws Exception   {      PrettyTime t = new PrettyTime(new Date(0));      Assert.assertEquals("12 minutes from now", t.format(new Date(1000 * 60 * 12)));   }
@Test  public void testNoFlavorFail() throws WorkflowOperationException {    // setup    operation.setConfiguration("catalog-flavor", "");    operation.setConfiguration("catalog-type-collision-behavior", "keep");    // execution    expectedException.expect(WorkflowOperationException.class);    operationHandler.start(instance, null);  }
@Test(timeout = 4000)	  public void testappendIfMissing()  throws Throwable  {	      String string0 = StringUtils.difference(",-t8JJh/bUr{+$_DS", "WDl?;hCf*= F");hCf*= F", string0);	      	      int int0 = StringUtils.indexOfAny((CharSequence) "WDl?;hCf*= F", "RWSLzV4h");	      	      String string1 = StringUtils.stripAccents(",-t8JJh/bUr{+$_DS");	      	      String string2 = StringUtils.uncapitalize("uOcUk");	      	      boolean boolean0 = StringUtils.isAlphaSpace("uOcUk");	      	      CharSequence[] charSequenceArray0 = new CharSequence[4];	      charSequenceArray0[0] = (CharSequence) "uOcUk";	      charSequenceArray0[1] = (CharSequence) ",-t8JJh/bUr{+$_DS";	      charSequenceArray0[2] = (CharSequence) ",-t8JJh/bUr{+$_DS";	      String string3 = StringUtils.center("WDl?;hCf*= F", 13);hCf*= F ", string3);	      	      charSequenceArray0[3] = (CharSequence) "WDl?;hCf*= F ";	      String string4 = StringUtils.appendIfMissingIgnoreCase("Ha?BYN:B?", "WDl?;hCf*= F", charSequenceArray0);hCf*= F", string4);	      	      boolean boolean1 = StringUtils.containsNone((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (char[]) null);	      	      String string5 = StringUtils.join((Iterator<?>) null, 'z');	      	      int int1 = StringUtils.lastIndexOf((CharSequence) "Ha?BYN:B?WDl?;hCf*= F", (CharSequence) null);	  }
@Test(timeout = 4000)	  public void testremove()  throws Throwable  {	      String string0 = StringUtils.SPACE;	      	      CharSequence[] charSequenceArray0 = new CharSequence[1];	      int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0);	      	      String string1 = StringUtils.capitalize(" ");	      	      String string2 = StringUtils.remove(" ", '8');	      	      boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " ");	      	      int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]);	  }
@Test(timeout = 4000)	  public void testremoveElement()  throws Throwable  {	      byte[] byteArray0 = new byte[9];	      byte[] byteArray1 = ArrayUtils.removeElement(byteArray0, (byte)15);	  }
@Test(timeout = 4000)	  public void testisAsciiAlphanumeric()  throws Throwable  {	      boolean boolean0 = CharUtils.isAsciiAlphanumeric('z');	  }
@Test    public void decodeExtraData() {        Http2Connection connection = new Http2Connection();        ByteBuffer buffer = ByteBuffer.wrap(TestMessages.PING_EXTRA_DATA_BUFFER);        Http2PingFrame frame = (Http2PingFrame) connection.decode(buffer);        assertNotNull(frame);        assertEquals(9, frame.getLength());        assertEquals(6, frame.getType());        assertEquals(0x00, frame.getFlags());        assertEquals(32, frame.getStreamID());        assertArrayEquals(new byte[] {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08}, frame.getData());    }
@Config(sdk = {Build.VERSION_CODES.JELLY_BEAN, Build.VERSION_CODES.LOLLIPOP})	@Test public void testExitTransition() {		// Arrange:		final Object transition = createTestTransition();		final FragmentRequest request = new FragmentRequest(mock(FragmentController.class), FragmentRequest.NO_ID);		// Act + Assert:		assertThat(request.exitTransition(transition), is(request));		assertThat(request.exitTransition(), is(transition));		assertThat(request.hasTransition(FragmentRequest.TRANSITION_EXIT), is(true));	}
@Test(timeout = 4000)	  public void testisAlpha()  throws Throwable  {	      String string0 = StringUtils.rightPad(",@ZB0lHp2{", 122);	      	      String string1 = StringUtils.substringBeforeLast("", "[\tu");	      	      char[] charArray0 = new char[4];	      charArray0[0] = 's';	      charArray0[1] = '{';	      charArray0[2] = '+';	      charArray0[3] = 'I';	      String string2 = StringUtils.join(charArray0, 's');	      	      boolean boolean0 = StringUtils.isAlphanumeric(",@ZB0lHp2{                                                                                                                ");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("SrIO", ",@ZB0lHp2{");	      	      String string3 = StringUtils.rightPad("SrIO", 122);	      	      int[] intArray0 = new int[1];	      intArray0[0] = (int) 'I';	      String string4 = StringUtils.join(intArray0, 's');	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens("ss{s+sI", "ss{s+sI", 256);	      	      String string5 = StringUtils.prependIfMissingIgnoreCase("v", "SrIO                                                                                                                      ", stringArray1);	  }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      Object[] objectArray0 = new Object[5];	      // Undeclared exception!	      try { 	        standardToStringStyle0.MULTI_LINE_STYLE.appendSummary((StringBuffer) null, "", objectArray0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.builder.ToStringStyle", e);	      }	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testAddAllSelf() {        EdgeStore edgeStore = new EdgeStore();        edgeStore.addAll(edgeStore);    }
@Test(timeout = 4000)	  public void testappendln()  throws Throwable  {	      int int0 = 517;	      StrBuilder strBuilder0 = new StrBuilder(517);	      	      Object object0 = new Object();	      	      StrBuilder strBuilder1 = strBuilder0.append('S');	      	      StrBuilder strBuilder2 = strBuilder0.appendln(object0);	      	      StrBuilder strBuilder3 = strBuilder2.append((long) 517);	      	      StrBuilder strBuilder4 = strBuilder2.appendln((Object) strBuilder0);	      	      StrBuilder strBuilder5 = strBuilder0.replaceFirst("G1", "G1");	      	      StrBuilder strBuilder6 = strBuilder5.append((long) 517);	      	      StrBuilder strBuilder7 = strBuilder0.appendSeparator("v5a", 517);	      	      StrMatcher strMatcher0 = StrMatcher.charMatcher('S');	      	      StrBuilder strBuilder8 = strBuilder7.replaceFirst(strMatcher0, "");	      	      StrBuilder strBuilder9 = strBuilder1.appendln("v5a");	      	      StrBuilder strBuilder10 = strBuilder1.appendFixedWidthPadRight(517, 517, 'o');	      	      int int1 = 2001;	      boolean boolean0 = true;	      // Undeclared exception!	      try { 	        strBuilder9.append((CharSequence) strBuilder1, 517, 1738);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // length must be valid	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testgetNullText()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder("@uY");	      assertNull(strBuilder0.getNullText());	      	      ArrayDeque<String> arrayDeque0 = new ArrayDeque<String>();	      	      boolean boolean0 = arrayDeque0.add("2qZ^>Qrw9g\"x/].J");	      	      StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher();	      	      char[] charArray0 = new char[5];	      charArray0[0] = 'Q';	      charArray0[1] = 'E';	      charArray0[2] = '8';	      charArray0[3] = '&';	      charArray0[4] = 'D';	      StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0);	      	      int int0 = strBuilder0.indexOf(strMatcher0);	      assertNull(strBuilder0.getNullText());	      	      ArrayDeque<String> arrayDeque1 = arrayDeque0.clone();	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterable<?>) arrayDeque1, "@uY");	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      StrBuilder strBuilder2 = strBuilder0.append(0.0);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder2.getNullText());	      	      int int1 = strBuilder0.indexOf('c');	      assertNull(strBuilder0.getNullText());	      	      int int2 = strBuilder0.lastIndexOf('c');	      assertNull(strBuilder0.getNullText());	      	      int int3 = strBuilder1.size();	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder1.getNullText());	      	      arrayDeque0.addFirst("2qZ^>Qrw9g\"x/].J");	      	      StrBuilder strBuilder3 = strBuilder1.append(2998);	      assertNull(strBuilder0.getNullText());	      assertNull(strBuilder3.getNullText());	      assertNull(strBuilder1.getNullText());	  }
@Test(timeout = 4000)	  public void testreset()  throws Throwable  {	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      long[] longArray0 = new long[1];	      longArray0[0] = (-2776L);	      long[] longArray1 = new long[8];	      longArray1[0] = (-2776L);	      longArray1[1] = (-2776L);	      longArray1[2] = (-2776L);	      longArray1[3] = (-2776L);	      longArray1[4] = 0L;	      longArray1[5] = (-2776L);	      longArray1[6] = (-2776L);	      longArray1[7] = (-2776L);	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(longArray0, longArray1);	      IDKey iDKey0 = new IDKey(equalsBuilder0);	      EqualsBuilder equalsBuilder2 = equalsBuilder0.append((Object) equalsBuilder1, (Object) iDKey0);	      equalsBuilder0.append((Object) equalsBuilder1, (Object) equalsBuilder2);	      equalsBuilder0.setEquals(false);	      equalsBuilder0.reset();	  }
@Test(timeout = 4000)	  public void teststartTimer()  throws Throwable  {	      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;	      TimedSemaphore timedSemaphore0 = new TimedSemaphore(4173L, timeUnit0, 2041);	      timedSemaphore0.isShutdown();	      timedSemaphore0.endOfPeriod();	      timedSemaphore0.getPeriod();	      timedSemaphore0.setLimit(2041);	      timedSemaphore0.getUnit();	      timedSemaphore0.startTimer();	      timedSemaphore0.acquire();	      timedSemaphore0.getLastAcquiresPerPeriod();	      timedSemaphore0.getLimit();	  }
@Test(timeout = 4000)	  public void testleft()  throws Throwable  {	      String[] stringArray0 = new String[2];	      stringArray0[0] = "o&$W$9Myt(-BI6CNQZ";	      String string0 = " v](>;:r<Bi6i@@h-";	      stringArray0[1] = " v](>;:r<Bi6i@@h-";	      String string1 = StringUtils.getCommonPrefix(stringArray0);	      	      boolean boolean0 = StringUtils.isBlank(" v](>;:r<Bi6i@@h-");	      	      String string2 = StringUtils.left("P{", Integer.MAX_VALUE);	      	      boolean boolean1 = StringUtils.containsIgnoreCase("P{", "");	      	      // Undeclared exception!	      try { 	        StringUtils.abbreviate("P{", Integer.MAX_VALUE, (-3384));	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Minimum abbreviation width is 4	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test    public void testRemoveNode() {        GraphStore graphStore = GraphGenerator.generateSmallMultiTypeGraphStore();        Node[] nodes = graphStore.getNodes().toArray();        for (Node n : nodes) {            Edge[] edges = graphStore.getEdges(n).toArray();            Assert.assertTrue(graphStore.removeNode(n));            Assert.assertFalse(graphStore.contains(n));            for (Edge e : edges) {                Assert.assertFalse(graphStore.contains(e));            }        }        Assert.assertEquals(graphStore.getNodeCount(), 0);        Assert.assertEquals(graphStore.getEdgeCount(), 0);    }
@Test    public void testFielesystemResourceOverriding() throws Exception {        StaticResourceClassloader klas = new StaticResourceClassloader(new MockBundle(), overrideDir, bundlePath);        URL result = klas.getResource(overriddenBundleResource);        Assert.assertNotNull(result);        Assert.assertEquals(overrideResource.toURI().toURL(), result);    }
@Test   public void testYearsFromNow() throws Exception   {      PrettyTime t = new PrettyTime(new Date(0));      Assert.assertEquals("3 years from now", t.format(new Date(2629743830L * 12L * 3L)));   }
@Test    public void given$getAppToken_whenQuery_thenShouldCallNativeApiAndReturnValue() {        // given        PowerMockito.mockStatic(Instabug.class);        PowerMockito.when(Instabug.getAppToken()).thenReturn("APP_TOKEN");        // when        String appToken = rnModule.getAppToken();        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        Instabug.getAppToken();        Assert.assertEquals("APP_TOKEN", appToken);    }
@Test    public void testGenerationOfLogReference() throws IOException {        List<Path> pathList = new ArrayList<>();        pathList.add(Paths.get("/"));        Mockito.doReturn(pathList).when(fakeFs).getRootDirectories();        List<String> groupList = new ArrayList<>();        groupList.add("test_group");        BDDMockito.given(JsonUtils.getMatchingListFromJsonArrayNode(Mockito.any(), Mockito.any())).willReturn(groupList);        Set<AWSLogReference> logReferences = ec2Plugin.getLogReferences();        assertThat(logReferences).hasOnlyOneElementSatisfying(            reference -> assertThat(reference.getLogGroup()).isEqualTo("test_group"));    }
@Test    public void parseDWithinFilter()                            throws XMLStreamException, FactoryConfigurationError, IOException {        Filter filter = parse( "testfilter19.xml" );        Assert.assertNotNull( filter );    }
@Test    public void sixFM() {        Assert.assertEquals(RxComprehensions.doFlatMap(zero(1), one(true), two("result"), three("other"), four("other".length()), five("other".length() < 5), six(Boolean.toString(false))).blockingFirst(), "false");    }
@Test(expected = IllegalStateException.class)  public void testIncorrectColumn() throws Exception {    Row row =        new Row(            TABLE,            ImmutableMap.of(                ID_COLUMN,                createColumn(ID_COLUMN, ColumnDataType.LONGLONG, true, 1L, 0),                NAME_COLUMN,                createColumn(NAME_COLUMN, ColumnDataType.VARCHAR, false, "bob", 1),                AGE_COLUMN,                createColumn(AGE_COLUMN, ColumnDataType.INT24, false, 25, 2),                "bad_column",                createColumn("bad_column", ColumnDataType.VARCHAR, false, "bad", 3)));    validator.validate(createMutation(row));  }
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>();	      	      Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator();	      	      String string0 = StringUtils.join(iterator0, "");	      	      String string1 = "";	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "");	      assertEquals(0, stringArray0.length);	      	      CharBuffer charBuffer0 = CharBuffer.allocate(10);	      assertEquals(10, charBuffer0.length());	      	      boolean boolean0 = arrayDeque0.add(charBuffer0);	      assertEquals(10, charBuffer0.length());	      	      String string2 = "gnJJZW&\"[wj";	      String string3 = StringUtils.replace("", "gnJJZW&\"[wj", "\"GNm5", (-2972));	      	      int int0 = StringUtils.length("");	      	      int int1 = (-2532);	      String string4 = StringUtils.center("", (-2532));	      	      String string5 = StringUtils.stripToEmpty("");	      	      // Undeclared exception!	      try { 	        StringUtils.abbreviate("", 0);	        fail("Expecting exception: IllegalArgumentException");	      	      } catch(IllegalArgumentException e) {	         //	         // Minimum abbreviation width is 4	         //	         verifyException("org.apache.commons.lang3.StringUtils", e);	      }	  }
@Test  public void testIsTranslatable() throws Exception {    EasyMock.expect(securityService.getOrganization()).andReturn(specificOrg).anyTimes();    EasyMock.expect(specificOrg.getId()).andReturn("org1").anyTimes();    listName = "TEST.LIST.NAME";    File file = getResourceFile("/ListProvidersScannerTest-AllProperties.properties");    listProvidersScanner.install(file);    EasyMock.replay(securityService, specificOrg);    assertTrue("Translatable property not read correctly", listProvidersService.isTranslatable(listName));  }
@Test    public void testAddOne() {        IntervalIndexStore<Node> store = new IntervalIndexStore<Node>(Node.class, null, false);        int a = store.add(new Interval(1.0, 2.0));        Assert.assertEquals(a, 0);        Assert.assertTrue(store.contains(new Interval(1.0, 2.0)));        Assert.assertEquals(store.size(), 1);        Assert.assertEquals(store.getMap().get(new Interval(1.0, 2.0)).intValue(), 0);    }
@Test    public void constructor_test() {        ErrorResponse errorResponse = new ErrorResponse("message");        assertThat(errorResponse.getErrorMessage()).isEqualTo("message");    }
@Test  public void testGetPayload() throws Exception {    assertEquals("result", job.getPayload());  }
@Test(timeout = 4000)	  public void testsuspend()  throws Throwable  {	      StopWatch stopWatch0 = new StopWatch();	      stopWatch0.start();	      stopWatch0.suspend();	      System.setCurrentTimeMillis(0L);	      stopWatch0.resume();	  }
@Test    public void testClear() {        TimestampSet set = new TimestampSet();        set.add(1.0);        set.clear();        Assert.assertTrue(set.isEmpty());        Assert.assertFalse(set.contains(1.0));    }
@Test(timeout = 4000)	  public void testisEmpty()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      assertTrue(strBuilder0.isEmpty());	      	      StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: ");	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      	      StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: ");	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder1.isEmpty());	      	      char[] charArray0 = new char[1];	      charArray0[0] = '\\';	      StrBuilder strBuilder2 = strBuilder1.appendln(charArray0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      	      StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      	      StrBuilder strBuilder4 = strBuilder0.setLength(2822);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder4.isEmpty());	      	      Object[] objectArray0 = new Object[4];	      String string0 = strBuilder4.rightString(2822);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder4.isEmpty());	      	      objectArray0[0] = (Object) strBuilder0;	      objectArray0[2] = (Object) strBuilder4;	      objectArray0[2] = (Object) '\\';	      objectArray0[3] = (Object) strBuilder4;	      StrBuilder strBuilder5 = strBuilder4.appendAll(objectArray0);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder4.isEmpty());	      assertFalse(strBuilder5.isEmpty());	      	      StrBuilder strBuilder6 = strBuilder0.appendln(strBuilder1, 0, 2822);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder6.isEmpty());	      	      int int0 = strBuilder6.lastIndexOf("Invalid startIndex: ");	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder6.isEmpty());	      	      StrBuilder strBuilder7 = strBuilder0.append(false);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strBuilder7.isEmpty());	      	      StrBuilder strBuilder8 = strBuilder1.appendln(1490.882886748184);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder8.isEmpty());	      assertFalse(strBuilder1.isEmpty());	      	      StrBuilder strBuilder9 = strBuilder6.append(strBuilder3, 0, 2822);	      assertFalse(strBuilder0.isEmpty());	      assertFalse(strTokenizer0.isEmptyTokenAsNull());	      assertFalse(strBuilder1.isEmpty());	      assertFalse(strBuilder9.isEmpty());	      assertFalse(strBuilder2.isEmpty());	      assertFalse(strBuilder3.isEmpty());	      assertFalse(strBuilder6.isEmpty());	  }
@Test(timeout = 4000)	  public void testendsWith()  throws Throwable  {	      String string0 = StringUtils.EMPTY;	      	      int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3426));	      	      String string1 = StringUtils.substringAfter("", "");	      	      int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) "");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator("-&nd]JTIu9of_kp'Hb;", "Threshold must not be negative");	      	      int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) "");	      	      boolean boolean0 = StringUtils.endsWith("Threshold must not be negative", "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase("-&nd]JTIu9of_kp'Hb;", "");	      	      char[] charArray0 = new char[2];	      charArray0[0] = '2';	      charArray0[1] = '';	      boolean boolean2 = StringUtils.containsAny((CharSequence) "Threshold must not be negative", charArray0);	      	      boolean boolean3 = StringUtils.isNotBlank("Threshold must not be negative");	      	      StringUtils stringUtils0 = new StringUtils();	      	      boolean boolean4 = StringUtils.containsWhitespace("");	      	      String[] stringArray1 = StringUtils.splitPreserveAllTokens((String) null, "E");	      	      boolean boolean5 = StringUtils.containsWhitespace((CharSequence) null);	      	      double[] doubleArray0 = new double[5];	      doubleArray0[0] = (double) (-1);	      doubleArray0[1] = (double) '2';	      doubleArray0[2] = (double) 0;	      byte[] byteArray0 = new byte[8];	      byteArray0[0] = (byte) (-126);	      byteArray0[1] = (byte)0;	      byteArray0[2] = (byte) (-35);	      byteArray0[3] = (byte)32;	      byteArray0[4] = (byte)19;	      byteArray0[5] = (byte)7;	      byteArray0[6] = (byte)119;	      byteArray0[7] = (byte) (-115);	      String string2 = StringUtils.join(byteArray0, 'z', 3360, 0);	      	      doubleArray0[3] = (double) '2';	      doubleArray0[4] = (double) '';	      String string3 = StringUtils.join(doubleArray0, 'P');	  }
@Test(timeout = 4000)	  public void testCONST()  throws Throwable  {	      boolean boolean0 = ObjectUtils.CONST(false);	  }
@Test(timeout = 4000)	  public void testgenerateBitVector()  throws Throwable  {	      Class<JavaVersion> class0 = JavaVersion.class;	      ArrayList<JavaVersion> arrayList0 = new ArrayList<JavaVersion>();	      JavaVersion javaVersion0 = JavaVersion.JAVA_1_1;	      List<JavaVersion> list0 = arrayList0.subList(0, 0);	      arrayList0.add(javaVersion0);	      // Undeclared exception!	      try { 	        EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) list0);	        fail("Expecting exception: ConcurrentModificationException");	      	      } catch(ConcurrentModificationException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("java.util.ArrayList$SubList", e);	      }	  }
@Test  public void testUsernamesList() {    Map<String, String> list = contributorsListProvider.getList(ContributorsListProvider.NAMES_TO_USERNAMES, null);    Assert.assertTrue(list.containsKey(user1.getUsername()));    Assert.assertTrue(list.containsKey(user2.getUsername()));    Assert.assertTrue(list.containsKey(user3.getUsername()));    Assert.assertTrue(list.containsValue(user1.getName()));    Assert.assertTrue(list.containsValue(user2.getName()));    Assert.assertTrue(list.containsValue(user3.getUsername()));    Assert.assertTrue(list.containsKey("User 5"));    Assert.assertTrue(list.containsValue("User 5"));    Assert.assertEquals(5, list.size());  }
@Test  public void testCheckpoint() throws Exception {    pipe.checkpoint();    verify(source, times(1)).checkpoint(lastMutation);  }
@Test(timeout = 4000)	  public void testnoNullElements()  throws Throwable  {	      SQLNonTransientConnectionException sQLNonTransientConnectionException0 = new SQLNonTransientConnectionException();	      SQLNonTransientConnectionException sQLNonTransientConnectionException1 = Validate.noNullElements(sQLNonTransientConnectionException0);	  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testDictionaryDuplicate() {        EdgeStore edgeStore = new EdgeStore();        EdgeImpl edge = GraphGenerator.generateSingleEdge();        edgeStore.add(edge);        EdgeImpl edge2 = GraphGenerator.generateSingleEdge();        edgeStore.add(edge2);    }
@Test(timeout = 4000)	  public void testunescapeEcmaScript()  throws Throwable  {	      String string0 = StringEscapeUtils.unescapeEcmaScript((String) null);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      String string0 = StringUtils.substring((String) null, (-4035));	      	      String string1 = StringUtils.trim((String) null);	      	      boolean boolean0 = StringUtils.isAllLowerCase(charSequenceArray0[4]);	      	      boolean boolean1 = StringUtils.isAllUpperCase(charSequenceArray0[0]);	      	      String[] stringArray0 = new String[3];	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      boolean boolean2 = StringUtils.isWhitespace(charSequenceArray0[4]);	      	      boolean boolean3 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");	  }
@Test(timeout = 4000)	  public void testnullToEmpty()  throws Throwable  {	      Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null);	  }
@Test    public void testParseEncodingsWithoutRequestTypesSpecificAndKvp() {        DeegreeWFS supportedRequests = prepareSupportedRequestsWithoutRequestTypesSpecificAndKvp();        SupportedEncodings unlimitedSupportedEncodings = webFeatureService.parseEncodings( supportedRequests );        assertThat( unlimitedSupportedEncodings, CoreMatchers.instanceOf( UnlimitedSupportedEncodings.class ) );    }
@Test    public void call_idle() {        // prepare        IdleEvent event = mock(IdleEvent.class);        IdleStatus status = IdleStatus.READ_IDLE;        when(event.getIdleStatus()).thenReturn(status);        when(event.getSession()).thenReturn(session);        // run        caller.visit(event);        // verify        verify(event).getSession();        verify(event).getIdleStatus();        verify(session).getService();        verify(service).getIoHandler();        verify(handler).sessionIdle(session, status);        verifyNoMoreInteractions(session, event, handler);    }
@Test    public void testRenameType() {        // Skip. This is actually tested by testRenameTypeDesc above.    }
@Test    public void testIsAdjacent() {        GraphStore graphStore = GraphGenerator.generateTinyGraphStore();        Node n1 = graphStore.getNode("1");        Node n2 = graphStore.getNode("2");        Assert.assertTrue(graphStore.isAdjacent(n1, n2));        Assert.assertFalse(graphStore.isAdjacent(n2, n1));        graphStore.clearEdges();        Assert.assertFalse(graphStore.isAdjacent(n1, n2));    }
@Test(timeout = 4000)	  public void testisFieldSeparatorAtEnd()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      StringBuffer stringBuffer0 = new StringBuffer("^e");	      standardToStringStyle0.appendIdentityHashCode(stringBuffer0, (Object) null);	      assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd());	  }
@Test  public void testGetEventsMetadata() throws Exception {    given().formParam("eventIds", "").expect().statusCode(HttpStatus.SC_BAD_REQUEST).when()      .post(rt.host("events/metadata.json"));    given().formParam("eventIds", "[\"notExists\", \"notExists2\"]").expect().statusCode(HttpStatus.SC_NOT_FOUND).when()      .post(rt.host("events/metadata.json"));    String eventMetadataString = IOUtils.toString(getClass().getResource("/eventsMetadata.json"));    String result = given().formParam("eventIds", "[\"notExists\", \"exists\", \"exists2\"]").expect().statusCode(HttpStatus.SC_OK)      .when().post(rt.host("events/metadata.json")).asString();    assertThat(eventMetadataString, SameJSONAs.sameJSONAs(result));  }
@Test  public void testDefaultUpdate() throws Exception {    File file = getResourceFile("/ListProvidersScannerTest-GoodProperties.properties");    listProvidersScanner.update(file);    Map<String, String> dictionary = listProvidersService.getList(listName, null, false);    assertEquals("TEST.VALUE.1", dictionary.get("TEST.KEY.1"));    assertEquals("TEST.VALUE.2", dictionary.get("TEST.KEY.2"));    assertEquals("TEST.VALUE.3", dictionary.get("TEST.KEY.3"));  }
@Test(timeout = 4000)	  public void testset()  throws Throwable  {	      Calendar calendar0 = MockCalendar.getInstance();	      Calendar calendar1 = DateUtils.round(calendar0, 9);	      Calendar calendar2 = DateUtils.truncate(calendar1, 9);	      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392422400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", calendar2.toString());	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      String string0 = StringUtils.chop("T");	      	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      charSequenceArray0[0] = (CharSequence) "T";	      charSequenceArray0[1] = (CharSequence) "T";	      charSequenceArray0[2] = (CharSequence) "";	      charSequenceArray0[3] = (CharSequence) "";	      charSequenceArray0[4] = (CharSequence) "T";	      charSequenceArray0[5] = (CharSequence) "T";	      charSequenceArray0[6] = (CharSequence) "";	      charSequenceArray0[7] = (CharSequence) "T";	      boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0);	      	      String string1 = StringUtils.removePattern("", "");	      	      String string2 = StringUtils.substring((String) null, (-4043));	      	      String string3 = StringUtils.trim((String) null);	      	      boolean boolean1 = StringUtils.containsOnly((CharSequence) null, (String) null);	      	      boolean boolean2 = StringUtils.isAllUpperCase(charSequenceArray0[0]);	      	      String[] stringArray0 = new String[3];	      stringArray0[0] = "T";	      stringArray0[1] = "";	      stringArray0[2] = "";	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	      	      boolean boolean3 = StringUtils.isWhitespace(charSequenceArray0[4]);	      	      int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", charSequenceArray0[2], 0);	      	      boolean boolean4 = StringUtils.containsNone(charSequenceArray0[6], "{FakYXNQUOHZ");	      	      long[] longArray0 = new long[2];	      longArray0[0] = 1885L;	      longArray0[1] = (long) 0;	      String string4 = StringUtils.join(longArray0, 'S', 285, 0);	      	      String[] stringArray2 = StringUtils.splitPreserveAllTokens("LaKB", "{FakYXNQUOHZ", (-4043));	      	      byte[] byteArray0 = new byte[7];	      byteArray0[0] = (byte)21;	      byteArray0[1] = (byte)0;	      byteArray0[2] = (byte)16;	      byteArray0[3] = (byte) (-1);	      byteArray0[4] = (byte)3;	      byteArray0[5] = (byte)64;	      byteArray0[6] = (byte)36;	      try { 	        StringUtils.toString(byteArray0, "");	        fail("Expecting exception: UnsupportedEncodingException");	      	      } catch(UnsupportedEncodingException e) {	      }	  }
@Test  public void testTemplateContent() throws Exception {    String templateName = "template";    String templateContent = "This is the media package: ${mediaPackage.identifier}";    String result = service.applyTemplate(templateName, templateContent, workflowInstance);    Assert.assertEquals("This is the media package: 3e7bb56d-2fcc-4efe-9f0e-d6e56422f557", result);  }
@Test(timeout = 4000)	  public void testsetValue()  throws Throwable  {	      ImmutablePair<String, Comparable<String>> immutablePair0 = ImmutablePair.of("", (Comparable<String>) "");	      // Undeclared exception!	      try { 	        immutablePair0.setValue("(,)");	        fail("Expecting exception: UnsupportedOperationException");	      	      } catch(UnsupportedOperationException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.tuple.ImmutablePair", e);	      }	  }	}
@Test(timeout = 4000)	  public void testlength()  throws Throwable  {	      float[] floatArray0 = new float[2];	      floatArray0[0] = 1424.4987F;	      floatArray0[1] = (-1.0F);	      String string0 = StringUtils.join(floatArray0, 'A', 0, 0);	      assertEquals(2, floatArray0.length);	      	      String string1 = StringUtils.rightPad(",,=9_", (-1182));	      	      CharSequence[] charSequenceArray0 = new CharSequence[1];	      charSequenceArray0[0] = (CharSequence) "";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	      assertEquals(1, charSequenceArray0.length);	      	      String string2 = StringUtils.substring("V[BQedlGTy?P=", 974);	      	      String string3 = StringUtils.upperCase("V[BQedlGTy?P=");	      	      String string4 = StringUtils.join((Object[]) charSequenceArray0, 'z');	      assertEquals(1, charSequenceArray0.length);	      	      int int1 = StringUtils.indexOfAny((CharSequence) ",,=9_", charSequenceArray0);	      assertEquals(1, charSequenceArray0.length);	      	      String string5 = StringUtils.upperCase("");	      	      boolean boolean0 = StringUtils.isAsciiPrintable("");	      	      int int2 = StringUtils.lastIndexOf(charSequenceArray0[0], (-1));	      assertEquals(1, charSequenceArray0.length);	      	      boolean boolean1 = StringUtils.isAlphaSpace(charSequenceArray0[0]);	      assertEquals(1, charSequenceArray0.length);	      	      byte[] byteArray0 = new byte[1];	      byteArray0[0] = (byte)0;	      String string6 = StringUtils.toString(byteArray0, (String) null);	      assertEquals(1, byteArray0.length);	      	      char[] charArray0 = new char[3];	      charArray0[0] = 'A';	      charArray0[1] = 'z';	      charArray0[2] = 'A';	      boolean boolean2 = StringUtils.containsAny((CharSequence) ",,=9_", charArray0);	      assertEquals(3, charArray0.length);	  }
@Test(timeout = 4000)	  public void testsize()  throws Throwable  {	      int int0 = 107;	      StrBuilder strBuilder0 = new StrBuilder(107);	      assertEquals(0, strBuilder0.size());	      	      int int1 = 0;	      StrBuilder strBuilder1 = strBuilder0.insert(0, false);	      assertEquals(5, strBuilder0.size());	      assertEquals(5, strBuilder1.size());	      	      StrMatcher strMatcher0 = StrMatcher.trimMatcher();	      	      char char0 = 'w';	      StrMatcher strMatcher1 = StrMatcher.charMatcher('w');	      	      StrMatcher strMatcher2 = StrMatcher.charSetMatcher("");	      	      char[] charArray0 = new char[0];	      StrBuilder strBuilder2 = strBuilder1.appendSeparator('w', 107);	      assertEquals(6, strBuilder0.size());	      assertEquals(6, strBuilder1.size());	      assertEquals(6, strBuilder2.size());	      	      StrMatcher strMatcher3 = StrMatcher.charSetMatcher(charArray0);	      	      int int2 = strBuilder0.indexOf(strMatcher0, (-2284));	      assertEquals(6, strBuilder0.size());	      	      IntStream intStream0 = strBuilder0.codePoints();	      assertEquals(6, strBuilder0.size());	      	      StrBuilder strBuilder3 = strBuilder0.appendln(289);	      assertEquals(10, strBuilder0.size());	      assertEquals(10, strBuilder3.size());	      	      StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher1);	      assertEquals(9, strBuilder0.size());	      assertEquals(9, strBuilder4.size());	      	      // Undeclared exception!	      try { 	        strBuilder3.deleteCharAt(1027);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 1027	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test    public void testMerge() {        Canvas c1 = new Canvas(10, 10);        c1.box();        Canvas c2 = new Canvas(5, 5);        c2.box();        c1.merge(c2, 5, 5);        assertEquals("" + "┌────────┐\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│    ┌───┤\n" + "│    │   │\n" + "│    │   │\n" + "│    │   │\n" + "└────┴───┘\n" + "", c1.toString());        c1.merge(c2, 0, 0);        c1.merge(c2, 4, 0);        assertEquals("" + "┌───┬───┬┐\n" + "│   │   ││\n" + "│   │   ││\n" + "│   │   ││\n" + "├───┴───┘│\n" + "│    ┌───┤\n" + "│    │   │\n" + "│    │   │\n" + "│    │   │\n" + "└────┴───┘\n" + "", c1.toString());        c1.clear().box();        c1.merge(c2, -3, -2);        assertEquals("" + " ┼───────┐\n" + " │       │\n" + "┼┘       │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "└────────┘\n" + "", c1.toString());        c1.merge(c2, 8, 8);        assertEquals("" + " ┼───────┐\n" + " │       │\n" + "┼┘       │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│        │\n" + "│       ┌┼\n" + "└───────┼ \n" + "", c1.toString());    }
@Test    public void onPause() throws Exception {        when(view.getCurrVerse()).thenReturn(10);        presenter.onPause();        verify(librarian).setCurrentVerseNumber(eq(10));    }
@Test(expected = IllegalArgumentException.class)  public void testParseWithInvalidDirection() throws Exception {    SortCriterionImpl.parse("name:ASCDESC");  }
@Test(timeout = 4000)	  public void testtoCharacterObject()  throws Throwable  {	      Character character0 = CharUtils.toCharacterObject('\\');	      	      int int0 = CharUtils.toIntValue(character0, (-2814));	  }
@Test  public void testOrderOfFieldsInputMultipleOrderedFieldsExpectsInCorrectPositions() {    DublinCoreMetadataCollection collection = new DublinCoreMetadataCollection(Arrays      .asList(unorderedOne, unorderedTwo, unorderedThree, first, third, seventh));    assertEquals(6, collection.getFields().size());    assertEquals("A field with an order value of 0 should be first in the list of fields", first, collection            .getFields().get(0));    assertEquals("A field with an order value of 2 should be in that position in the list of fields", third, collection            .getFields().get(2));    assertEquals("A field with an order value of 7 should be in the last position in the list of fields", seventh,            collection.getFields().get(5));    collection = new DublinCoreMetadataCollection(Arrays      .asList(first, third, seventh, unorderedOne, unorderedTwo, unorderedThree));    assertEquals(6, collection.getFields().size());    assertEquals("A field with an order value of 0 should be first in the list of fields", first, collection            .getFields().get(0));    assertEquals("A field with an order value of 2 should be in that position in the list of fields", third, collection            .getFields().get(2));    assertEquals("A field with an order value of 7 should be in the last position in the list of fields", seventh,            collection.getFields().get(5));    collection = new DublinCoreMetadataCollection(Arrays      .asList(third, unorderedOne, unorderedTwo, first, seventh, unorderedThree));    assertEquals(6, collection.getFields().size());    assertEquals("A field with an order value of 0 should be first in the list of fields", first, collection            .getFields().get(0));    assertEquals("A field with an order value of 2 should be in that position in the list of fields", third, collection            .getFields().get(2));    assertEquals("A field with an order value of 7 should be in the last position in the list of fields", seventh,            collection.getFields().get(5));  }
@Test(expectedExceptions = IllegalArgumentException.class)    public void testAddColumnDifferentCase() {        ColumnStore<Node> store = new ColumnStore(Node.class, false);        store.addColumn(new ColumnImpl("A", Integer.class, null, null, Origin.DATA, false, false));        store.addColumn(new ColumnImpl("a", Integer.class, null, null, Origin.DATA, false, false));    }
@Test  public void testMissingNoDefaultDCTerm() throws Exception {    // No Default Value    operation.setConfiguration(ConfigureByDublinCoreTermWOH.DCCATALOG_PROPERTY, "episode");    operation.setConfiguration(ConfigureByDublinCoreTermWOH.DCTERM_PROPERTY, "source");    operation.setConfiguration(ConfigureByDublinCoreTermWOH.MATCH_VALUE_PROPERTY, "Timbuktu");    operation.setConfiguration(ConfigureByDublinCoreTermWOH.COPY_PROPERTY, "false");    operation.setConfiguration("newConfigProperty", "true");    WorkflowOperationResult result = operationHandler.start(instance, null);    Map<String, String> properties = result.getProperties();    Assert.assertTrue(properties == null);  }
@Test(timeout = 4000)	  public void testsplit()  throws Throwable  {	      String string0 = StringUtils.join((int[]) null, 't', 0, 0);	      	      boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null);	      	      String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{');	      	      String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1);	      	      String string2 = StringUtils.leftPad("RWSLzV4h", 0, "");	      	      int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator("Nt{2P6~Pso'", "");	      	      String string3 = StringUtils.join((float[]) null, 't', (-1520), 0);	      	      String string4 = StringUtils.defaultIfEmpty((String) null, ":;6z");6z", string4);	  }
@Test(timeout = 4000)	  public void teststripAll()  throws Throwable  {	      String string0 = "\\u0";	      String string1 = StringUtils.center("!#uP", (-201), string0);	      	      String string2 = StringUtils.substringBefore((String) null, "TcBWicm1LpG#(Y%\"szP");	      	      char[] charArray0 = new char[6];	      charArray0[0] = 'W';	      charArray0[1] = 'A';	      charArray0[2] = 'v';	      charArray0[3] = 'p';	      charArray0[4] = '/';	      charArray0[5] = 'S';	      boolean boolean0 = StringUtils.containsNone((CharSequence) null, charArray0);	      	      StringUtils stringUtils0 = new StringUtils();	      	      String string3 = StringUtils.center("!#uP", 0, 'B');	      	      int int0 = StringUtils.countMatches((CharSequence) null, "");	      	      String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "!#uP", 0);	      	      String string4 = StringUtils.prependIfMissingIgnoreCase("\r", "\r", (CharSequence[]) null);	      	      String[] stringArray1 = StringUtils.stripAll(stringArray0);	  }
@Test(timeout = 4000)	  public void testxor()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[1];	      booleanArray0[0] = true;	      Boolean[] booleanArray1 = new Boolean[2];	      booleanArray1[0] = (Boolean) booleanArray0[0];	      booleanArray1[1] = (Boolean) true;	      Boolean boolean0 = BooleanUtils.xor(booleanArray1);	  }
@Test    public void testServletUsesPassedInRecorder() throws IOException, ServletException {        AWSXRayRecorder customRecorder = Mockito.spy(getMockRecorder());        AWSXRayServletFilter servletFilter = new AWSXRayServletFilter(new FixedSegmentNamingStrategy("test"), customRecorder);        AsyncContext asyncContext = mock(AsyncContext.class);        HttpServletRequest request = mock(HttpServletRequest.class);        when(request.getRequestURL()).thenReturn(new StringBuffer("test_url"));        when(request.getMethod()).thenReturn("TEST_METHOD");        when(request.isAsyncStarted()).thenReturn(true);        when(request.getAsyncContext()).thenReturn(asyncContext);        HttpServletResponse response = mock(HttpServletResponse.class);        FilterChain chain = mockChain(request, response);        AsyncEvent event = mock(AsyncEvent.class);        when(event.getSuppliedRequest()).thenReturn(request);        when(event.getSuppliedResponse()).thenReturn(response);        servletFilter.doFilter(request, response, chain);        Assert.assertNull(AWSXRay.getTraceEntity());        AWSXRayServletAsyncListener listener = (AWSXRayServletAsyncListener) Whitebox.getInternalState(servletFilter, "listener");        listener.onComplete(event);        verify(customRecorder.getEmitter(), Mockito.times(1)).sendSegment(Mockito.any());    }
@Test(timeout = 4000)	  public void testintValue()  throws Throwable  {	      MutableLong mutableLong0 = new MutableLong();	      mutableLong0.decrement();	      long long0 = mutableLong0.longValue();	      assertEquals((-1), mutableLong0.intValue());	  }
@Test(timeout = 4000)	  public void testmax()  throws Throwable  {	      double[] doubleArray0 = new double[1];	      doubleArray0[0] = (double) 328.7F;	      double double0 = IEEE754rUtils.max(doubleArray0);	  }
@Test(timeout = 4000)	  public void testreplace()  throws Throwable  {	      HashMap<String, String> hashMap0 = new HashMap<String, String>();	      StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0);	      StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k');	      strSubstitutor0.replace((StrBuilder) null);	  }
@Test(timeout = 4000)	  public void testbuild()  throws Throwable  {	      Object object0 = new Object();	      EqualsBuilder.unregister(object0, object0);	      EqualsBuilder equalsBuilder0 = new EqualsBuilder();	      EqualsBuilder equalsBuilder1 = equalsBuilder0.append(object0, object0);	      	      EqualsBuilder equalsBuilder2 = equalsBuilder1.append('z', 'I');	      boolean[] booleanArray0 = new boolean[1];	      booleanArray0[0] = true;	      equalsBuilder2.append(booleanArray0, booleanArray0);	      EqualsBuilder equalsBuilder3 = equalsBuilder2.append(230.227624869, 230.227624869);	      short[] shortArray0 = new short[2];	      shortArray0[0] = (short) (-391);	      shortArray0[1] = (short) (-3232);	      equalsBuilder3.append(shortArray0, shortArray0);	      assertFalse(equalsBuilder1.build());	  }
@Test    public void givenFalse$setViewHierarchyEnabled_whenQuery_shouldCallNativeApiWithDisabled() {        // given        PowerMockito.mockStatic(BugReporting.class);        // when        bugReportingModule.setViewHierarchyEnabled(false);        // then        PowerMockito.verifyStatic(VerificationModeFactory.times(1));        BugReporting.setViewHierarchyState(Feature.State.DISABLED);    }
@Test(timeout = 4000)	  public void testappend()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder(1354);	      	      StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader();	      	      int int0 = strBuilder_StrBuilderReader0.read();	      	      StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer();	      	      StrMatcher strMatcher0 = strBuilder_StrBuilderTokenizer0.getQuoteMatcher();	      	      StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setQuoteMatcher(strMatcher0);	      	      StrBuilder strBuilder1 = strBuilder0.deleteFirst(strMatcher0);	      	      StrBuilder strBuilder2 = strBuilder1.append('E');	      	      // Undeclared exception!	      try { 	        strBuilder2.charAt(2193);	        fail("Expecting exception: StringIndexOutOfBoundsException");	      	      } catch(StringIndexOutOfBoundsException e) {	         //	         // String index out of range: 2193	         //	         verifyException("org.apache.commons.lang3.text.StrBuilder", e);	      }	  }
@Test(timeout = 4000)	  public void testgetContentStart()  throws Throwable  {	      StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle();	      standardToStringStyle0.SIMPLE_STYLE.setContentEnd((String) null);	      assertEquals("[", standardToStringStyle0.getContentStart());	  }
@Test    public void nineSM() {        final TestObserver<Object> observer = TestObserver.create();        RxComprehensions.doSwitchMap(zero(1), one(true), two("result"), three("other"), four("other".length()), five("other".length() < 5), six(Boolean.toString(false)), seven("true"), eight(Long.class), this.<Long>nine()).subscribe(observer);        observer.awaitTerminalEvent();        observer.assertComplete();        observer.assertNoErrors();        observer.assertResult(1, true, "result", "other", (long) "other".length(), "other".length() < 5, Boolean.toString(false), false, Long.class);    }
@Test(timeout = 4000)	  public void testappendAll()  throws Throwable  {	      StrBuilder strBuilder0 = new StrBuilder();	      	      StrBuilder strBuilder1 = strBuilder0.appendln("rn$e:");	      	      Vector<String> vector0 = new Vector<String>();	      	      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(vector0);	      	      TreeSet<Object> treeSet0 = new TreeSet<Object>(linkedHashSet0);	      	      StrBuilder strBuilder2 = strBuilder0.appendAll((Iterable<?>) treeSet0);	      	      StrBuilder strBuilder3 = strBuilder1.appendSeparator("rn$e:", 1);	      	      StringBuffer stringBuffer0 = strBuilder0.toStringBuffer();	      	      Integer[] integerArray0 = new Integer[5];	      Integer integer0 = new Integer(1);	      	      integerArray0[0] = integer0;	      Integer integer1 = new Integer(862);	      	      integerArray0[1] = integer1;	      int int0 = 0;	      Integer integer2 = new Integer(0);	      	      integerArray0[2] = integer2;	      Integer integer3 = new Integer(862);	      	      integerArray0[3] = integer3;	      Integer integer4 = new Integer(int0);	      	      integerArray0[4] = integer4;	      StrBuilder strBuilder4 = strBuilder3.appendAll(integerArray0);	  }
@Test(timeout = 4000)	  public void testbinaryBeMsb0ToHexDigit()  throws Throwable  {	      boolean[] booleanArray0 = new boolean[4];	      booleanArray0[1] = true;	      booleanArray0[2] = true;	      char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0);	  }
@Test  public void testMergeMetadataFieldsFirstNull() {    final JSONObject metadata1 = null;    final JSONObject metadata2 = loadJsonObject("merge2.json");    final JSONObject expected = loadJsonObject("merge2.json");    final JSONObject actual = BulkUpdateUtil.mergeMetadataFields(metadata1, metadata2);    assertThat(actual.toJSONString(), SameJSONAs.sameJSONAs(expected.toJSONString()));  }
@Test(timeout = 4000)	  public void testdifference()  throws Throwable  {	      CharSequence[] charSequenceArray0 = new CharSequence[8];	      String string0 = StringUtils.strip("xlj[0BAT3@1");	      	      charSequenceArray0[0] = (CharSequence) "xlj[0BAT3@1";	      String string1 = StringUtils.removeStart("xlj[0BAT3@1", "&r");	      	      charSequenceArray0[1] = (CharSequence) "xlj[0BAT3@1";	      String string2 = StringUtils.leftPad("xlj[0BAT3@1", 8192, "}^M");	      	      charSequenceArray0[2] = (CharSequence) string2;	      String string3 = StringUtils.replaceChars("xlj[0BAT3@1", (String) null, "xlj[0BAT3@1");	      	      charSequenceArray0[3] = (CharSequence) "xlj[0BAT3@1";	      String string4 = StringUtils.stripToNull("Minimum abbreviation width is 4");	      	      charSequenceArray0[4] = (CharSequence) "Minimum abbreviation width is 4";	      String string5 = StringUtils.EMPTY;	      	      charSequenceArray0[5] = (CharSequence) "";	      String string6 = StringUtils.difference("", (String) null);	      	      charSequenceArray0[6] = (CharSequence) "";	      String string7 = StringUtils.substringBefore("", "Index: ");	      	      charSequenceArray0[7] = (CharSequence) "";	      int int0 = StringUtils.indexOfDifference(charSequenceArray0);	  }
@Test(timeout = 4000)	  public void testcontains()  throws Throwable  {	      String string0 = "\\u0";	      CharSequence[] charSequenceArray0 = new CharSequence[5];	      charSequenceArray0[0] = (CharSequence) string0;	      String string1 = StringUtils.normalizeSpace("^pE");	      	      charSequenceArray0[1] = (CharSequence) "^pE";	      charSequenceArray0[2] = (CharSequence) string0;	      charSequenceArray0[3] = (CharSequence) string0;	      charSequenceArray0[4] = (CharSequence) string0;	      String string2 = StringUtils.prependIfMissingIgnoreCase(string0, string0, charSequenceArray0);	      	      boolean boolean0 = StringUtils.isAlpha(string2);	      	      int int0 = StringUtils.lastIndexOf((CharSequence) string0, 10);	      	      boolean boolean1 = StringUtils.isAlphanumeric(string2);	      	      String string3 = StringUtils.repeat("za*k@6|lJ", (-1293));	      	      int int1 = StringUtils.getLevenshteinDistance(charSequenceArray0[2], charSequenceArray0[1]);	      	      String[] stringArray0 = StringUtils.splitByWholeSeparator((String) null, "", 1219);	      	      int int2 = StringUtils.indexOf((CharSequence) "^pE", 0, 16);	      	      String string4 = StringUtils.appendIfMissing("", charSequenceArray0[0], charSequenceArray0);	      	      String string5 = StringUtils.center("", (-1293));	      	      String string6 = StringUtils.trimToNull("");	      	      int int3 = StringUtils.indexOf((CharSequence) null, 16);	      	      String[] stringArray1 = StringUtils.substringsBetween((String) null, "^pE", (String) null);	      	      String string7 = StringUtils.replaceEachRepeatedly("Cannot store ", (String[]) null, (String[]) null);	      	      boolean boolean2 = StringUtils.containsNone((CharSequence) "Cannot store ", (String) null);	      	      String string8 = StringUtils.capitalize(string4);	  }
@Test  public void testAudioVideo() throws Exception {    operationInstance.setConfiguration("source-tags", "");    operationInstance.setConfiguration("source-flavor", "*/video-audio");    operationInstance.setConfiguration("source-flavors", "");    operationInstance.setConfiguration("force-transcode", "false");    WorkflowOperationResult result = operationHandler.start(instance, null);    Assert.assertEquals(Action.CONTINUE, result.getAction());    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 3, result.getMediaPackage()            .getElements().length);    Track[] tracks = result.getMediaPackage().getTracks(new MediaPackageElementFlavor("presentation", "video-audio"));    Assert.assertEquals("Resulting mediapackage has the wrong number of tracks", 1, tracks.length);    TrackImpl audioVideo = (TrackImpl) tracks[0];    Assert.assertEquals(-20f, audioVideo.getAudio().get(0).getRmsLevDb().floatValue(), 0.001d);  }
@Test(timeout = 4000)	  public void testisDigits()  throws Throwable  {	      boolean boolean0 = NumberUtils.isDigits("0");	  }
@Test public void testIterateFieldsWithMaxSuperClass() {		// Arrange:		final FragmentAnnotations.FieldProcessor mockProcessor = mock(FragmentAnnotations.FieldProcessor.class);		// Act:		FragmentAnnotations.iterateFields(mockProcessor, ChildAnnotatedComponent.class, BaseComponent.class);		// Assert:		for (final Field field : AnnotatedComponent.class.getDeclaredFields()) {			verify(mockProcessor).onProcessField(field, field.getName());		}		for (final Field field : ChildAnnotatedComponent.class.getDeclaredFields()) {			verify(mockProcessor).onProcessField(field, field.getName());		}		verifyNoMoreInteractions(mockProcessor);	}
@Test(timeout = 4000)	  public void testendsWith()  throws Throwable  {	      String string0 = StringUtils.stripToEmpty((String) null);	      	      int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) "", 114);	      	      int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1));	      	      int int2 = StringUtils.lastIndexOf((CharSequence) "", (CharSequence) null, 1124);	      	      String[] stringArray0 = StringUtils.split("\n", 'e');	      	      String string1 = StringUtils.removeStart("", "}%");	      	      String string2 = StringUtils.defaultIfBlank("", "3::s0DFSZzQA>V_CN");	      	      String string3 = StringUtils.prependIfMissing("", (CharSequence) null, stringArray0);	      	      String string4 = StringUtils.rightPad(" is not in the range '0' - '9'", 1124, "");	      	      boolean boolean0 = StringUtils.endsWithIgnoreCase("3::s0DFSZzQA>V_CN", string4);	      	      String[] stringArray1 = StringUtils.splitByWholeSeparator(string4, (String) null, (-1));	      	      String string5 = StringUtils.right("", (-240));	      	      String string6 = StringUtils.difference("", "");	      	      boolean boolean1 = StringUtils.endsWithIgnoreCase(string4, "");	      	      String string7 = StringUtils.reverse(" is not in the range '0' - '9'");	      	      char[] charArray0 = new char[2];	      charArray0[0] = 'e';	      charArray0[1] = 'e';	      boolean boolean2 = StringUtils.containsOnly((CharSequence) "'9' - '0' egnar eht ni ton si ", charArray0);	      	      short[] shortArray0 = new short[8];	      shortArray0[0] = (short) (-700);	      shortArray0[1] = (short)2431;	      shortArray0[2] = (short)336;	      shortArray0[0] = (short) (-1905);	      shortArray0[4] = (short)2;	      shortArray0[5] = (short)16;	      shortArray0[6] = (short)0;	      shortArray0[7] = (short) (-2743);	      String string8 = StringUtils.join(shortArray0, ')');	  }
@Test    public void testParseIntervalMapShort() {        IntervalShortMap expected = new IntervalShortMap();        expected.put(new Interval(1, 2), (short) 1);        expected.put(new Interval(3, 5), (short) 2);        expected.put(new Interval(5, 6), (short) 3);        expected.put(new Interval(6, 7), (short) 4);        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(Short.class, "[1, 2, 1.1]; [3, 5, 2]; [5, 6, '3']; [6, 7, \"4\"]"));// Decimals                                                                                                                                               // are                                                                                                                                               // ignored        assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(short.class, "[1, 2, 1.1]; [3, 5, 2]; [5, 6, '3']; [6, 7, \"4\"]"));// Decimals                                                                                                                                               // are                                                                                                                                               // ignored    }
@Test(timeout = 4000)	  public void testgetTimeInstance()  throws Throwable  {	      FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(0);	      MockDate mockDate0 = new MockDate(3, 1, (-309), (-2011), (-2011), 3);	      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());	      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1);	      // Undeclared exception!	      try { 	        fastDateFormat0.format((Object) mockDate0, (StringBuffer) null, fieldPosition0);	        fail("Expecting exception: NullPointerException");	      	      } catch(NullPointerException e) {	         //	         // no message in exception (getMessage() returned null)	         //	         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);	      }	  }
