@Test(timeout = 4000) [EOL]   public void testgetFuture()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0); [EOL]       scheduledThreadPoolExecutor0.getExecuteExistingDelayedTasksAfterShutdownPolicy(); [EOL]       scheduledThreadPoolExecutor0.setRemoveOnCancelPolicy(false); [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(scheduledThreadPoolExecutor0); [EOL]       multiBackgroundInitializer0.setExternalExecutor(scheduledThreadPoolExecutor0); [EOL]       multiBackgroundInitializer0.initialize(); [EOL]       Callable<Callable<Object>> callable0 = (Callable<Callable<Object>>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Callable<Object>> callableBackgroundInitial
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       charArray0[1] = 'j'; [EOL]       charArray0[2] = 'm'; [EOL]       charArray0[3] = 'C'; [EOL]       charArray0[4] = '^'; [EOL]       charArray0[5] = 'Y'; [EOL]       charArray0[6] = ','; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '0'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random((-121), charArray0); [EOL]       
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testappendIfMissing()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4';
@Test(timeout = 4000) [EOL]   public void testabove()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.above(255); [EOL]       StringWriter stringWriter0 = new StringWriter(59); [EOL]       boolean boolean0 = numericEntityEscaper0.translate(27, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceIn()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, 0, (int) '$'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = (String)DurationFormatUtils.d; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d", 1436); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 1436); [EOL]       DurationFormatUtils.formatPeriod((-3061L), (long) 1436, "^ipX1?>Wx8HIlS0?"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, 'c', 'O'); [EOL]       assertTrue(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcharAt()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = "A"; [EOL]       String string1 = "org.apache.commons.lang3.text.StrBuilder$StrBuilderTokenizer"; [EOL]       int int0 = 34; [EOL]       boolean boolean0 = false; [EOL]       StrBuilder strBuilder1 = new StrBuilder("A"); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln(strBuilder1); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.append(0); [EOL]        [EOL]       char char0 = strBuilder3.charAt(0); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]    
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsOnly()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQ
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]   
@Test(timeout = 4000) [EOL]   public void testisAlphanumericSpace()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.center("<@rd#", (-1), '#'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = null; [EOL]       charSequenceArray0[1] = (CharSequence) "<@rd#"; [EOL]       charSequenceArray0[2] = (CharSequence) "<@rd#"; [EOL]       String string1 = StringUtils.appendIfMissing("<@rd#", "<@rd#", charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "<@rd#", (char[]) null); [EOL]     
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone(";Sh'Rn[U"); [EOL]       Locale locale0 = Locale.CANADA; [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter(";Sh'Rn[U", timeZone0, locale0); [EOL]       fastDatePrinter0.format((-1L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragment()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli((-6L)); [EOL]       Date date0 = Date.from(instant0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.getFragmentInSeconds(date0, 0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The fragment 0 is not supported [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = (long) 37; [EOL]       hashCodeBuilder0.append(longArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         fail("Expecting exception: ArithmeticException"); [EOL]        [EOL]       } catch(ArithmeticException e) { [EOL]          // [EOL]          // overflow: can't negate [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.math.Fraction", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       MutableDouble mutableDouble1 = new MutableDouble((-1640.0216)); [EOL]       Double double0 = mutableDouble1.toDouble(); [EOL]       mutableDouble1.setValue((Number) mutableDouble0); [EOL]       mutableDouble1.subtract((Number) double0); [EOL]       mutableDouble1.toDouble(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)1233; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder0.append((float[]) null, (float[]) null); [EOL]       Boolean boolean0 = equalsBuilder0.build(); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       byte[] byteArray1 = new byte[6]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte)0; [EOL]  
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(0, fraction2.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       fraction0.toProperString(); [EOL]       String string0 = fraction0.toProperString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testsplitByCharacterType()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]    
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testtrim()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testindexOfAny()  throws Throwable  { [EOL]       String string0 = StringUtils.EMPTY; [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "", (CharSequence) "", (-3426)); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("", ""); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("-&nd]JTIu9of_kp'Hb;", "Threshold must not be negative"); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean0 = StringUt
@Test(timeout = 4000) [EOL]   public void testappendSummary()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("X>2Y%"); [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       standardToStringStyle0.SIMPLE_STYLE.appendSummary(stringBuffer0, "F", objectArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       fraction0.toProperString(); [EOL]       String string0 = fraction0.toProperString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       fraction0.toProperString(); [EOL]       String string0 = fraction0.toProperString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoStringBuilder()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append
@Test(timeout = 4000) [EOL]   public void testdefaultString()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.isBlank((CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWith((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.defaultString("fXNk|L<"); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Search and Replace array lengths don't match: "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleft()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(0L); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, "]J;-oeCxj.", long0, false); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testright()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testgetSplitTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitTime(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceIn()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, 0, (int) '$'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(65); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.parseObject("", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFixedWidthPadLeft()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]      
@Test(timeout = 4000) [EOL]   public void testappendFixedWidthPadLeft()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]      
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testsplitByCharacterType()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]    
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       AggregateTranslator aggregateTranslator0 = new AggregateTranslator((CharSequenceTranslator[]) null); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       StringWriter stringWriter1 = stringWriter0.append((CharSequence) "34"); [EOL]       StringBuffer stringBuffer0 = stringWriter1.getBuffer(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         aggregateTranslator0.translate((CharSequence) stringBuffer0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       byte byte0 = bitField0.setByteBoolean((byte)24, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddContextValue()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable(); [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(mockThrowable0); [EOL]       Object object0 = new Object(); [EOL]       contextedRuntimeException0.addContextValue("", object0); [EOL]       ContextedException contextedException0 = new ContextedException("", contextedRuntimeException0, contextedRuntimeException0); [EOL]       Set<String> set0 = contextedException0.getContextLabels(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInDays()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]   
@Test(timeout = 4000) [EOL]   public void testhandleCause()  throws Throwable  { [EOL]       MockError mockError0 = new MockError("F/]?"); [EOL]       mockError0.getCause(); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       concurrentUtils_ConstantFuture0.isCancelled(); [EOL]       ExecutionException executionException0 = new ExecutionException("F/]?", mockError0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.handleCauseUnchecked(executionException0); [EOL]         fail("Expecting exception: Error"); [EOL]        [EOL]       } catch(Error e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArraySeparator(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       ImmutablePair<String, String> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.tuple.Pair", ""); [EOL]       Pair<String, String> pair0 = Pair.of("", ""); [EOL]       int int0 = immutablePair0.compareTo(pair0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrTokenizer strTokenizer1 = (StrTokenizer)strTokenizer0.cloneReset(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreformat()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = 276.59881; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "^2b *9$Dg"; [EOL]       ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(choiceFormat0, choiceFormat0); [EOL]       String string0 = compositeFormat0.reformat("^2b *9$Dg"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSummaryObjectEndText(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripToNull()  throws Throwable  { [EOL]       CharSequence charSequence0 = null; [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, 0, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&,1fs'G.F7", 0); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '!'; [EOL]       charArray0[1] = '8'; [EOL]       charArray0[2] = '9'; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = ';'; [EOL]       charArray0[5] = 'B'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);', 'B
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]   
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]   
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = new int[2]; [EOL]       int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f"); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.setDelimiterChar('S'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", 'P'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteChar('5'); [EOL]       assertEquals((-1), strTokenizer1.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]        [EOL]       boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringBetween()  throws Throwable  { [EOL]       String string0 = StringUtils.defaultString("/N"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("/N"); [EOL]        [EOL]       String string1 = StringUtils.stripToNull("/N"); [EOL]        [EOL]       String string2 = StringUtils.swapCase("/N"); [EOL]        [EOL]       String string3 = StringUtils.leftPad("/n", 2430); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOfIgnoreCase((CharSequence) "/N", (CharSequence) "/N"); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) "/N", (CharSequence) "/N"); [EOL]        [EOL]       String string
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("", ""); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         range0.toString("$lYq*6A5%av<PLnRV$"); [EOL]         fail("Expecting exception: IllegalFormatConversionException"); [EOL]        [EOL]       } catch(IllegalFormatConversionException e) { [EOL]          // [EOL]          // a != java.lang.String [EOL]          // [EOL]          verifyException("java.util.Formatter$FormatSpecifier", e); [EOL]       } [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testhasPrevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.setQuoteChar('e'); [EOL]       char[] charArray0 = new char[10]; [EOL]       charArray0[2] = 'e'; [EOL]       charArray0[3] = 'e'; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       boolean boolean0 = strTokenizer1.hasPrevious(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]   
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMat
@Test(timeout = 4000) [EOL]   public void testsubstringAfter()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (-1.0F); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "Zjr?BzN"; [EOL]       stringArray0[1] = "zP;SekJ@"; [EOL]       EqualsBuilder.reflectionEquals(object1, object0, stringArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append((byte) (-26), (byte) (-26)); [EOL]       ImmutablePair<String, String> immutablePair0
@Test(timeout = 4000) [EOL]   public void testshortToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Conversion.shortToByteArray((short) (-1148), (short) (-3238), byteArray0, 2366, 16); [EOL]         fail("Expecting exception: ArrayIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(ArrayIndexOutOfBoundsException e) { [EOL]          // [EOL]          // 2366 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Conversion", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.appendSuper(true); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((int[]) null, (int[]) null); [EOL]       Class<Boolean> class0 = Boolean.class; [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = ""; [EOL]       boolean boolean0 = EqualsBuilder.reflectionEquals((Object) equalsBuilder2, (Object) "", true, (Class<?>) class0, stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testtruncatedEquals()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(29, 29, 29, 29, 29, 29); [EOL]       Calendar calendar0 = DateUtils.toCalendar(mockDate0); [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(29, (-2215), 436, (-2215), 436); [EOL]       boolean boolean0 = DateUtils.truncatedEquals(calendar0, (Calendar) mockGregorianCalendar0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetLength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder"); [EOL]       String string0 = strTokenizer0.toString(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTypeArguments()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[23]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getUpperBounds(); [EOL]       Class<Integer> class0 = Integer.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         TypeUtils.getTypeArguments((Type) wildcardType0, (Class<?>) class0); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // found an unhandled type: null [EOL]          // [EOL]          verifyException("org.apache
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = (String)DurationFormatUtils.d; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d", 1436); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 1436); [EOL]       DurationFormatUtils.formatPeriod((-3061L), (long) 1436, "^ipX1?>Wx8HIlS0?"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumeric()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = ObjectUtils.toString((Object) null, ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testsubstringBeforeLast()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("Cannot clone Cloneable type ", "ptgNwtnxatzWXwA", (-32768)); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       StringUtils.remove("x", ')'); [EOL]       String string1 = StringUtils.overlay("", "Cannot clone Cloneable type ", (-32768), (-32768)); [EOL]        [EOL]       boolean boolean1 = StringUtils.isAlphanumeric("Cannot clone Cloneable type "); [EOL]       String string2 = StringUtils.stripToNull("ptgNwtnxatzWXwA"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("ptgNwtnxatzWXwA", "ptgNwtnxatzWX
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       charArray0[1] = 'j'; [EOL]       charArray0[2] = 'm'; [EOL]       charArray0[3] = 'C'; [EOL]       charArray0[4] = '^'; [EOL]       charArray0[5] = 'Y'; [EOL]       charArray0[6] = ','; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '0'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random((-121), charArray0); [EOL]       
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", 'P'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]    
@Test(timeout = 4000) [EOL]   public void testcontainsAny()  throws Throwable  { [EOL]       String string0 = StringUtils.trim("fe|kO~[="); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "fe|kO~[=", (CharSequence) "fe|kO~[="); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuffer1.toString()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       char char0 =
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]   
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("java.lang.Object@2[]", (float) 'V'); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetAcquireCount()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.NANOSECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(830L, timeUnit0, 0); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.getAcquireCount(); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.getLimit(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.getLimit(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtrim()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripAll()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.substringsBetween(">6[jeJ<SAKbrgG+g7`", "KtUnGkJOKdUG25", "#|J|a=;l_S1^qmM"); [EOL]        [EOL]       String string0 = StringUtils.leftPad(">D<O)oa1X?)", (-1905), "Minimum abbreviation width is 4"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll((String[]) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "#|J|a=;l_S1^qmM", "Minimum abbreviation width is 4"); [EOL]        [EOL]       LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(); [EOL]        [EOL]       ListIterator<
@Test(timeout = 4000) [EOL]   public void testfirstNonNull()  throws Throwable  { [EOL]       Insets insets0 = ObjectUtils.firstNonNull((Insets[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testgetDateTimeInstance()  throws Throwable  { [EOL]       Locale locale0 = Locale.JAPANESE; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0); [EOL]       boolean boolean0 = fastDateFormat0.equals(";3q^1H>3r}6"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCodeMulti()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[1] = (Object) "org.apache.commons.lang3.ObjectUtils"; [EOL]       int int0 = ObjectUtils.hashCodeMulti(objectArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       MutablePair<ImmutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>> mutablePair0 = new MutablePair<ImmutablePair<Object, Object>, AbstractMap.SimpleImmutableEntry<Object, Integer>>(); [EOL]       AbstractMap.SimpleImmutableEntry<Object, Integer> abstractMap_SimpleImmutableEntry0 = mutablePair0.getRight(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1346, threadPoolExecutor_DiscardPolicy0); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, scheduledThreadPoolExecutor0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer0.get(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]      
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0); [EOL]       Integer integer0 = callableBackgroundInitializer0.initialize(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(65); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.parseObject("", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition((-289)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [E
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]   
@Test(timeout = 4000) [EOL]   public void testcontainsAny()  throws Throwable  { [EOL]       String[] stringArray0 = new String[11]; [EOL]       boolean boolean0 = CharSetUtils.containsAny("hmQS;JGGOpUvFJ", stringArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripToNull()  throws Throwable  { [EOL]       CharSequence charSequence0 = null; [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, 0, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, "&,1fs'G.F7", 0); [EOL]        [EOL]       char[] charArray0 = new char[6]; [EOL]       charArray0[0] = '!'; [EOL]       charArray0[1] = '8'; [EOL]       charArray0[2] = '9'; [EOL]       charArray0[3] = '('; [EOL]       charArray0[4] = ';'; [EOL]       charArray0[5] = 'B'; [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) null, charArray0);', 'B
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(true); [EOL]        [EOL]       boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtruncate()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.truncate((Object) "", 14); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // Could not truncate  [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuffer1.toString()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       char char0 =
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuffer1.toString()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       char char0 =
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]     
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(0, fraction2.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testisWhitespace()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testtoLocale()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         LocaleUtils.toLocale("rv_YTl"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Invalid locale format: rv_YTl [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.LocaleUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)1233; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder0.append((float[]) null, (float[]) null); [EOL]       Boolean boolean0 = equalsBuilder0.build(); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       byte[] byteArray1 = new byte[6]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte)0; [EOL]  
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(3474); [EOL]       int int0 = compareToBuilder1.toComparison(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFieldsIn()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) "<null>", toStringStyle0, (StringBuffer) null, (Class<? super Object>) class0, true, true); [EOL]       Class<Integer> class1 = Integer.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         reflectionToStringBuilder0.appendFieldsIn(class1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringAfterLast()  throws Throwable  { [EOL]       String string0 = StringUtils.substringAfterLast("", ""); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "", (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('z'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void teststripToEmpty()  throws Throwable  { [EOL]       ArrayDeque<CharBuffer> arrayDeque0 = new ArrayDeque<CharBuffer>(); [EOL]        [EOL]       Iterator<CharBuffer> iterator0 = arrayDeque0.descendingIterator(); [EOL]        [EOL]       String string0 = StringUtils.join(iterator0, ""); [EOL]        [EOL]       String string1 = ""; [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", ""); [EOL]        [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(10); [EOL]        [EOL]       boolean boolean0 = arrayDeque0.add(charBuffer0); [EOL]        [EOL]       String string2 = "gnJJZW&\"[wj"; [EOL]       String string3 = StringUtils
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetLength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testabbreviateMiddle()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "", 16); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseDate()  throws Throwable  { [EOL]       Locale locale0 = Locale.US; [EOL]       String[] stringArray0 = new String[4]; [EOL]       stringArray0[0] = "% "; [EOL]       Date date0 = DateUtils.parseDateStrictly("% ", locale0, stringArray0); [EOL]       long long0 = DateUtils.getFragmentInMilliseconds(date0, 5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CompareToBuilder.reflectionCompare((Object) "", (Object) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testdeleteCharAt()  throws Throwable  { [EOL]       String string0 = "C#5,rw4FJ>B.4K$lilj"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("C#5,rw4FJ>B.4K$lilj"); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(0.0); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) strBuilder0, 0, 0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.append('7'); [EOL]        [EOL]       // Undeclared exception! [EOL] 
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE; [EOL]       Format format0 = dateTimeFormatter0.toFormat(); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(format0, format0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(3931); [EOL]       Object object0 = compositeFormat0.parseObject("dS`?~nvW8Gi&jq", parsePosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOfAny()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL]
@Test(timeout = 4000) [EOL]   public void testgetShortCanonicalName()  throws Throwable  { [EOL]       ClassUtils classUtils0 = new ClassUtils(); [EOL]       String string0 = ClassUtils.getShortCanonicalName((Object) classUtils0, "ICR3K"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('{', '~'); [EOL]       CharRange charRange1 = CharRange.isIn('U', 'n'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       char[] charArray0 = new char[5]; [EOL]       String string0 = strSubstitutor0.replace(charArray0); [EOL]       assertEquals('k', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testrightPad()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad("QW=:? 4b7d", 2, 'u'); [EOL]        [EOL]       short[] shortArray0 = new short[4]; [EOL]       shortArray0[0] = (short)64; [EOL]       shortArray0[1] = (short)211; [EOL]       shortArray0[2] = (short)0; [EOL]       shortArray0[3] = (short)489; [EOL]       String string1 = StringUtils.join(shortArray0, 't', (int) (short)489, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", "QW=:? 4b7d", (int) (short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte)0); [EOL]       mutableByte0.setValue((byte)124); [EOL]       byte byte0 = mutableByte0.byteValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreate()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         EventListenerSupport.create(class0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Class {0} is not an interface [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(1, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.daemon(true); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("j>YC4.dSF9\"+@3eMr@>", "j>YC4.dSF9\"+@3eMr@>", (Comparator<String>) null); [EOL]       Range<String> range1 = Range.between("Owi7}v+X<cZ\")j", "Owi7}v+X<cZ\")j", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.isOverlappedBy(range1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInDays()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       long long0 = DateUtils.getFragmentInDays((Date) mockDate0, 2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short short0 = NumberUtils.max((short)3129, (short)3129, (short) (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder((String) null); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(false); [EOL]        [EOL]       int int0 = 32; [EOL]       int int1 = 8; [EOL]       char[] charArray0 = new char[4]; [EOL]       StrBuilder strBuilder2 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.appendln('}'); [EOL]        [EOL]       int int2 = 0; [EOL]       String string0 = strBuilder3.substring(0); [EOL]        [EOL]       int int3 = strBuilder2.indexOf((StrMatcher) null, 8); [EOL]        [EOL]       charArray0
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testrandomAlphanumeric()  throws Throwable  { [EOL]       int int0 = 204; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.randomAlphanumeric(204); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = ObjectUtils.toString((Object) null, ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testdeleteFirst()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int0 = strBuilder0.capacity(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Object[]) null, ""); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteFirst(""); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder0.appendln(strBuilder2, 32, 32); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]          // [EOL]          // startIndex must be valid [E
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte)0); [EOL]       mutableByte0.add((byte) (-1)); [EOL]       byte byte0 = mutableByte0.byteValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeHtml4()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml4((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)1233; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder0.append((float[]) null, (float[]) null); [EOL]       Boolean boolean0 = equalsBuilder0.build(); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       byte[] byteArray1 = new byte[6]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte)0; [EOL]  
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testisEnableSubstitutionInVariables()  throws Throwable  { [EOL]       HashMap<String, Locale.Category> hashMap0 = new HashMap<String, Locale.Category>(); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor((Map<String, Locale.Category>) hashMap0); [EOL]       strSubstitutor0.setEnableSubstitutionInVariables(true); [EOL]       boolean boolean0 = strSubstitutor0.isEnableSubstitutionInVariables(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testsubstringsBetween()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Conversion.longToByteArray(660L, 3786, byteArray0, 56, 24); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // (nBytes-1)*8+srcPos is greather or equal to than 64 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Conversion", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[7]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         octalUnescaper0.translate((CharSequence) charBuffer0, 545, (Writer) stringWriter0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]         
@Test(timeout = 4000) [EOL]   public void testdefaultIfBlank()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.INDEX_NOT_FOUND; [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short short0 = NumberUtils.max((short)3129, (short)3129, (short) (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("]"); [EOL]       Locale locale0 = Locale.JAPAN; [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", timeZone0, locale0); [EOL]       fastDatePrinter0.getMaxLengthEstimate(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandomAscii()  throws Throwable  { [EOL]       RandomStringUtils.randomAscii(0); [EOL]       RandomStringUtils.random(0, 0, 0, true, false, (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testCONST_SHORT()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT((-32768)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(class0).when(annotation0).annotationType(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         AnnotationUtils.hashCode(annotation0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('z'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]       assertFalse(integer0.equals((Object)int2)); [EOL]      
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli(0L); [EOL]       Date date0 = Date.from(instant0); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, (-2215)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       int[] intArray0 = new int[4]; [EOL]       int[] intArray1 = ArrayUtils.subarray(intArray0, (-3250), 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("]"); [EOL]       Locale locale0 = Locale.JAPAN; [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", timeZone0, locale0); [EOL]       fastDatePrinter0.getMaxLengthEstimate(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testsetEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoreEmptyTokens(false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testleft()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testsetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(65); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("0H+6+X"); [EOL]        [EOL]       char[] charArray0 = strBuilder0.getChars((char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testformatPeriod()  throws Throwable  { [EOL]       DurationFormatUtils.formatPeriodISO(303L, 86400000L); [EOL]       boolean boolean0 = true; [EOL]       DurationFormatUtils.formatDurationWords(0L, true, true); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000320java.lang.StringBuilder@00000000330java.lang.StringBuilder@00000000340java.lang.StringBuilder@0000000035", (-2139)); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, (-2139)); [EOL]       durationFormatUtils_Token1.getValue(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = null; [EOL]       int int0 = 212; [EOL]       durationFormatUtils_Token1.toString(); [EOL]       // Undeclared exception! [
@Test(timeout = 4000) [EOL]   public void testconstantFuture()  throws Throwable  { [EOL]       DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>(); [EOL]       delayQueue0.poll(); [EOL]       Future<Delayed> future0 = ConcurrentUtils.constantFuture((Delayed) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       MockError mockError0 = new MockError("F/]?"); [EOL]       mockError0.getCause(); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       concurrentUtils_ConstantFuture0.isCancelled(); [EOL]       ExecutionException executionException0 = new ExecutionException("F/]?", mockError0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.handleCauseUnchecked(executionException0); [EOL]         fail("Expecting exception: Error"); [EOL]        [EOL]       } catch(Error e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.subtract(563L); [EOL]       float float0 = mutableLong0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplacePattern()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.remove
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisCancelled()  throws Throwable  { [EOL]       ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>("R8^"); [EOL]       concurrentUtils_ConstantFuture0.isCancelled(); [EOL]       ConcurrentUtils.ConstantFuture<Object> concurrentUtils_ConstantFuture1 = new ConcurrentUtils.ConstantFuture<Object>("R8^"); [EOL]       concurrentUtils_ConstantFuture1.cancel(true); [EOL]       MockThrowable mockThrowable0 = new MockThrowable("pw,2"); [EOL]       ExecutionException executionException0 = new ExecutionException(mockThrowable0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.handleCauseUnchecked(executionException0); [EOL]         fail("Expecting exception: RuntimeException"); [EOL]        [EOL]  
@Test(timeout = 4000) [EOL]   public void testreplaceIn()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuffer) null, 0, (int) '$'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       mutableBoolean0.setValue(true); [EOL]       MutableBoolean mutableBoolean1 = new MutableBoolean(); [EOL]       int int0 = mutableBoolean0.compareTo(mutableBoolean1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testunescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson("Kr^K5)xi3M!@H]nX\"'Z"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(3474); [EOL]       int int0 = compareToBuilder1.toComparison(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(90); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parse("z!V+wg}ZGX_v,WK g", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSplitNanoTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitNanoTime(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3750); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = IEEE754rUtils.max(277.9878F, 277.9878F, 1.0F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(25, (-1)); [EOL]       assertEquals((-25.0F), fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn("qw)\"0^d").when(annotation0).toString(); [EOL]       doReturn(class0, class0).when(annotation0).annotationType(); [EOL]       String string0 = AnnotationUtils.toString(annotation0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.ASCII_ALPHA_LOWER; [EOL]       boolean boolean0 = charSet0.equals("java.util.Collections$SynchronizedSet@0000000001"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtrimToNull()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cb
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisWhitespace()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '$'; [EOL]       charArray0[1] = '\\'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.appendSeparator('#', 0); [EOL]        [EOL]       boolean boolean0 = strBuilder0.startsWith("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendSeparator("Invalid startIndex: ", "Invalid startIndex: "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("", "Minimum abbreviation width with offset is 7", 64); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string1 = StringUtils.join(floatArray0, '['); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("", "Minimum abbreviation width with offset is 7", 64); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string1 = StringUtils.join(floatArray0, '['); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0.0); [EOL]       float float0 = fraction0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdefaultIfEmpty()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL] 
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testpreviousToken()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported"); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterChar('i'); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer1.forEachRemaining(consumer0); [EOL]       strTokenizer0.previousToken(); [EOL]       strTokenizer1.setIgnoreEmptyTokens(true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(""); [EOL]       contextedRuntimeException0.setContextValue("", (Object) null); [EOL]       List<Object> list0 = contextedRuntimeException0.getContextValues(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder"); [EOL]       String string0 = strTokenizer0.toString(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.isNegated(); [EOL]       assertEquals('%', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetExcludeFieldNames()  throws Throwable  { [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, (ToStringStyle) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         reflectionToStringBuilder0.getExcludeFieldNames(); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.ReflectionToStringBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(90); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parse("z!V+wg}ZGX_v,WK g", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       MutablePair<ImmutablePair<Integer, Object>, Object> mutablePair0 = new MutablePair<ImmutablePair<Integer, Object>, Object>(); [EOL]       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", ""); [EOL]       ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of("", (Object) abstractMap_SimpleEntry0); [EOL]       MutablePair<AbstractMap.SimpleEntry<Object, Object>, ImmutablePair<String, Object>> mutablePair1 = MutablePair.of(abstractMap_SimpleEntry0, immutablePair0); [EOL]       Object object0 = mutablePair1.getValue(); [EOL]       boolean boolean0 = mutablePair0.equals(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testvalidateRange()  throws Throwable  { [EOL]       String string0 = "+[AQj^o1MB"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("+[AQj^o1MB"); [EOL]        [EOL]       int int0 = 2860; [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(2860); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll('+', '6'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.minimizeCapacity(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.validateRange(2860, (-32768)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [E
@Test(timeout = 4000) [EOL]   public void testlastIndexOfAny()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli(0L); [EOL]       Date date0 = Date.from(instant0); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, (-2215)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testisRegistered()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append((byte) (-30), (byte) (-30)); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append((float) (byte) (-30), (float) (byte) (-30)); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       EqualsBuilder.reflectionEquals(object0, object1, (String[]) null); [EOL]       equalsBuilder0.appendSuper(false); [EOL]       EqualsBuilder equalsBuilder3 = equalsBuilder2.append((-941.3923F), (-396.2F)); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '<'; [EOL]       charArray0[1] = '?'; [EOL]       charArray0[2
@Test(timeout = 4000) [EOL]   public void testor()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         BooleanUtils.xor(booleanArray0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Array is empty [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.BooleanUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetChars()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(65); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("0H+6+X"); [EOL]        [EOL]       char[] charArray0 = strBuilder0.getChars((char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitPreserveAllTokens()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testappendCyclicObject()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SHORT_PREFIX_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         toStringStyle0.SIMPLE_STYLE.appendCyclicObject(stringBuffer0, (String) null, (Object) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // Cannot get the toString of a null identity [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.ObjectUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL
@Test(timeout = 4000) [EOL]   public void testsetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentStart("<"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]    
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone(";Sh'Rn[U"); [EOL]       Locale locale0 = Locale.CANADA; [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter(";Sh'Rn[U", timeZone0, locale0); [EOL]       fastDatePrinter0.format((-1L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDateInstance()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("'"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2); [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.applyRules(mockGregorianCalendar0, (StringBuffer) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]        [EOL]       boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testkeep()  throws Throwable  { [EOL]       String[] stringArray0 = new String[11]; [EOL]       stringArray0[7] = "hmQS;JGGOpUvFJ"; [EOL]       String string0 = CharSetUtils.keep("hmQS;JGGOpUvFJ", stringArray0);JGGOpUvFJ", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testround()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, (-113), 1, 2, (-451), 3750); [EOL]       Calendar calendar0 = DateUtils.round((Calendar) mockGregorianCalendar0, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(true); [EOL]        [EOL]       boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       Locale locale0 = Locale.ENGLISH; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(3); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]  
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("haqSW1h"); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = DurationFormatUtils.lexx("2.yCA&VIq3y*mz+}([3"); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("haqSW1h"); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1825, 3593, 1825, 0, 1825, 0, 1825, true); [EOL]       DurationFormatUtils.formatDurationWords(1L, true, true); [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.priority(2745); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli(0L); [EOL]       Date date0 = Date.from(instant0); [EOL]       Date date1 = DateUtils.setMilliseconds(date0, (-2215)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlpha()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("9<-;", "9<-;"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("", "9<-;", ""); [EOL]        [EOL]       String string2 = StringUtils.center((String) null, 11, 'H'); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.overlay("eUUr{~\"Kk", "Array and element cannot both be null", 127, 838); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) "org.apache.commons.lang3.builder.IDKey", (Collection<String>) linkedList0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("syckr#6Cil1M}1|kY1U"); [EOL]       Class<Object> class0 = Object.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, (-1730)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.appendIdentityHashCode(stringBuffer0, stringBuffer0); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(90); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parse("z!V+wg}ZGX_v,WK g", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-809)); [EOL]       short short0 = bitField0.setShortValue((short)1319, (short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetReducedFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('7'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testgetSplitTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitTime(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) (byte)6; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       mockGregorianCalendar0.set(0, 996); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateFormatUtils.format((Calendar) mockGregorianCalendar0, "F", (TimeZone) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Invalid era [EOL]          // [EOL]          verifyException("java.util.GregorianCalendar", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = (long) 37; [EOL]       hashCodeBuilder0.append(longArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) (byte)6; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutablePair<Object, Pair<String, Object>> mutablePair0 = new MutablePair<Object, Pair<String, Object>>(); [EOL]       String string0 = mutablePair0.toString(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testsetUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setUseFieldNames(false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisTrue()  throws Throwable  { [EOL]       Validate.isTrue(true, "", 199.739098175266); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       int[] intArray0 = new int[4]; [EOL]       int[] intArray1 = ArrayUtils.subarray(intArray0, (-3250), 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstringAfter()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDone()  throws Throwable  { [EOL]       ConcurrentUtils.initializeUnchecked((ConcurrentInitializer<Object>) null); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       MockError mockError0 = new MockError(mockRuntimeException0); [EOL]       ConcurrentUtils.ConstantFuture<Error> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<Error>(mockError0); [EOL]       assertTrue(concurrentUtils_ConstantFuture0.isDone()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatUTC()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       String string0 = DateFormatUtils.formatUTC((Date) mockDate0, "F"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]   
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isIn('h', 'h'); [EOL]       boolean boolean0 = charRange0.equals(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceFirst()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]     
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getSizeStartText(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testisAsciiNumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiNumeric('7'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testupperCase()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = 1424.4987F; [EOL]       floatArray0[1] = (-1.0F); [EOL]       String string0 = StringUtils.CR; [EOL]        [EOL]       String string1 = StringUtils.rightPad(",,=9_", (-1182)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "\r"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.substring("V[BQedlGTy?P=", 974); [EOL]        [EOL]       String
@Test(timeout = 4000) [EOL]   public void testprependIfMissingIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '-'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'X'; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0); [EOL]        [EOL]       String string1 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null); [EOL
@Test(timeout = 4000) [EOL]   public void testsetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.DEFAULT_STYLE.setSizeEndText("AEhzPmLst|m|:e7J{Z"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.7"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testgetStackFrameList()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       mockThrowable0.setOriginForDelegate((StackTraceElement) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ExceptionUtils.getStackFrameList(mockThrowable0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0
@Test(timeout = 4000) [EOL]   public void testindexOfDifference()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]     
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeXml((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true); [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMat
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testdeleteCharAt()  throws Throwable  { [EOL]       String string0 = "C#5,rw4FJ>B.4K$lilj"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("C#5,rw4FJ>B.4K$lilj"); [EOL]        [EOL]       StringBuilder stringBuilder0 = new StringBuilder(); [EOL]        [EOL]       StringBuilder stringBuilder1 = stringBuilder0.append(0.0); [EOL]        [EOL]       StringBuilder stringBuilder2 = stringBuilder1.deleteCharAt(0); [EOL]        [EOL]       StringBuilder stringBuilder3 = stringBuilder2.insert(0, (CharSequence) strBuilder0, 0, 0); [EOL]        [EOL]       StringBuilder stringBuilder4 = stringBuilder3.append('7'); [EOL]        [EOL]       // Undeclared exception! [EOL] 
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = (-1.0F); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray0); [EOL]       Object object0 = new Object(); [EOL]       Object object1 = new Object(); [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = "Zjr?BzN"; [EOL]       stringArray0[1] = "zP;SekJ@"; [EOL]       EqualsBuilder.reflectionEquals(object1, object0, stringArray0); [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder0.append((byte) (-26), (byte) (-26)); [EOL]       ImmutablePair<String, String> immutablePair0
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testdefaultIfBlank()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.INDEX_NOT_FOUND; [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>V_CN"); [EOL
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitialize()  throws Throwable  { [EOL]       ForkJoinPool forkJoinPool0 = ForkJoinPool.commonPool(); [EOL]       MultiBackgroundInitializer multiBackgroundInitializer0 = new MultiBackgroundInitializer(forkJoinPool0); [EOL]       MultiBackgroundInitializer.MultiBackgroundInitializerResults multiBackgroundInitializer_MultiBackgroundInitializerResults0 = multiBackgroundInitializer0.initialize(); [EOL]       Set<String> set0 = multiBackgroundInitializer_MultiBackgroundInitializerResults0.initializerNames(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches("+SBt23`", false, 9, "d]HF6PiD+SBt23`", 9, (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[0]; [EOL]       Float[] floatArray1 = ArrayUtils.toObject(floatArray0); [EOL]       float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddDays()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.addDays((Date) null, (-1)); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The date must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0); [EOL]       hashCodeBuilder1.append((boolean[]) null); [EOL]       assertEquals((-1693551291), (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.uncapitalize((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrite()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]       assertNotNull(writer0); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[5] = true; [EOL]       booleanArray0[7] = true; [EOL]       booleanArray0[8] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetFragmentInSeconds()  throws Throwable  { [EOL]       Instant instant0 = MockInstant.ofEpochMilli(0L); [EOL]       Date date0 = Date.from(instant0); [EOL]       long long0 = DateUtils.getFragmentInSeconds(date0, 6); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testlexx()  throws Throwable  { [EOL]       DurationFormatUtils.lexx("O/+NxFAZIc{7*Tm#"); [EOL]       DurationFormatUtils.formatDuration((-1873L), "O/+NxFAZIc{7*Tm#"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float) 2018); [EOL]       hashCodeBuilder0.append((byte) (-1)); [EOL]       assertEquals((-126510360), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongToIntArray()  throws Throwable  { [EOL]       int[] intArray0 = Conversion.longToIntArray(1L, (-1), (int[]) null, 177, (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) (byte)6; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)64, 3132); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testcheckedException()  throws Throwable  { [EOL]       ExecutionException executionException0 = new ExecutionException((Throwable) null); [EOL]       executionException0.getSuppressed(); [EOL]       executionException0.getLocalizedMessage(); [EOL]       executionException0.getLocalizedMessage(); [EOL]       ConcurrentUtils.extractCauseUnchecked(executionException0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ConcurrentUtils.checkedException((Throwable) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Not a checked exception: null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent
@Test(timeout = 4000) [EOL]   public void testhasNext()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.ceiling((Date) mockDate0, 5); [EOL]       long long0 = DateUtils.getFragmentInMinutes(date0, 5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclose()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0[
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testhasPrevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       strTokenizer0.setQuoteChar('e'); [EOL]       char[] charArray0 = new char[10]; [EOL]       charArray0[2] = 'e'; [EOL]       charArray0[3] = 'e'; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       boolean boolean0 = strTokenizer1.hasPrevious(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetReducedFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getReducedFraction(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsIgnoreCase()  throws Throwable  { [EOL]       Locale locale0 = Locale.SIMPLIFIED_CHINESE; [EOL]        [EOL]       String string0 = StringUtils.upperCase("", locale0); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "", (CharSequence) "", 5); [EOL]        [EOL]       int int2 = StringUtils.indexOf((CharSequence) "", 236, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isEmpty(""); [EOL]        [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]        [EOL]       Iter
@Test(timeout = 4000) [EOL]   public void testintArrayToLong()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       long long0 = Conversion.intArrayToLong(intArray0, 0, 3161L, 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testinsert()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]      
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOSMatch()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isOSMatch("SolarisLinux", "Rs7HKj!g,", "SolarisLinux", "en"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuffer1.toString()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       char char0 =
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparatorPreserveAllTokens()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBefore("yc", "s/eB&ED@mIB"); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens("", "s/eB&ED@mIB", 0); [EOL]        [EOL]       String string1 = StringUtils.rightPad("yc", 0); [EOL]        [EOL]       String string2 = StringUtils.stripEnd("org.apache.commons.lang3.ArrayUtils", "Supplied value must be a valid byte literal between -128 and 127: ["); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcenter()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testwriteField()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FieldUtils.writeField((Field) null, (Object) "fuGrrp&;8$CAeRj.", (Object) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The field must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.FieldUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testhexToLong()  throws Throwable  { [EOL]       long long0 = Conversion.hexToLong("CHQE\n8;\"", (-1142), 0L, 726, (-1142)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripEnd()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "Array element ", (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0.0); [EOL]       float float0 = fraction0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       charArray0[1] = 'j'; [EOL]       charArray0[2] = 'm'; [EOL]       charArray0[3] = 'C'; [EOL]       charArray0[4] = '^'; [EOL]       charArray0[5] = 'Y'; [EOL]       charArray0[6] = ','; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '0'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random((-121), charArray0); [EOL]       
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("syckr#6Cil1M}1|kY1U"); [EOL]       Class<Object> class0 = Object.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, (-1730)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2382); [EOL]       MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, ""); [EOL]       Integer integer1 = new Integer(41); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, ""); [EOL]       int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testinsert()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]      
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       charArray0[0] = ''; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, 4, 4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceChars()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate("|Y$B-O?Px11WLnrt", 0, 16); [EOL]        [EOL]       String string1 = StringUtils.replace("|Y$B-O?Px11WLnrt", "|Y$B-O?Px11WLnrt", "", 396); [EOL]        [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "|Y$B-O?Px11WLnrt"; [EOL]       String string2 = StringUtils.replaceEach("", (String[]) null, stringArray0); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testequalsIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]  
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       charArray0[1] = 'j'; [EOL]       charArray0[2] = 'm'; [EOL]       charArray0[3] = 'C'; [EOL]       charArray0[4] = '^'; [EOL]       charArray0[5] = 'Y'; [EOL]       charArray0[6] = ','; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '0'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random((-121), charArray0); [EOL]       
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]        [EOL]       standardToStringStyle0.setFieldSeparatorAtStart(true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, new ViolatedAssumptionAnswer()); [EOL]       boolean boolean0 = TypeUtils.isAssignable((Type) null, wildcardType0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '-'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'X'; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0); [EOL]        [EOL]       String string1 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null); [EOL]   
@Test(timeout = 4000) [EOL]   public void testchomp()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL]  
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]       assertTrue(arrayList0.isEmpty()); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]       assertTrue(arrayList0.isEmpty()); [
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testappendWithSeparators()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]   
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)64, 3132); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) (byte)6; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrappedFactory()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         basicThreadFactory_Builder0.wrappedFactory((ThreadFactory) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // Wrapped ThreadFactory must not be null! [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsplitByWholeSeparator()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testright()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testparseDateStrictly()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       stringArray0[0] = ""; [EOL]       Date date0 = DateUtils.parseDateStrictly("", stringArray0); [EOL]       MockDate mockDate0 = new MockDate((-4272), (-4272), (-4272), (-4272), (-4272), (-4272)); [EOL]       boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, date0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprependIfMissing()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "X%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZz
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition((-289)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('{', '~'); [EOL]       CharRange charRange1 = CharRange.isIn('U', 'n'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CompareToBuilder.reflectionCompare((Object) "", (Object) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5); [EOL]       Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0); [EOL]       assertNull(comparable0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getTime(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition((-289)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short short0 = NumberUtils.max((short)3129, (short)3129, (short) (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT(0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPeriod()  throws Throwable  { [EOL]       DurationFormatUtils.formatPeriodISO(303L, 86400000L); [EOL]       boolean boolean0 = true; [EOL]       DurationFormatUtils.formatDurationWords(0L, true, true); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000320java.lang.StringBuilder@00000000330java.lang.StringBuilder@00000000340java.lang.StringBuilder@0000000035", (-2139)); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, (-2139)); [EOL]       durationFormatUtils_Token1.getValue(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = null; [EOL]       int int0 = 212; [EOL]       durationFormatUtils_Token1.toString(); [EOL]       // Undeclared exception! [
@Test(timeout = 4000) [EOL]   public void testshutdown()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(1L, timeUnit0, (-1)); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.setLimit((-1)); [EOL]       timedSemaphore0.shutdown(); [EOL]       int int0 = 0; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         timedSemaphore0.acquire(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]          // TimedSemaphore is shut down! [EOL]          // [E
@Test(timeout = 4000) [EOL]   public void testgetArrayType()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Class<?> class1 = TypeUtils.getRawType(class0, class0); [EOL]       Class<String> class2 = String.class; [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments((Type) class1, (Class<?>) class2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null, (Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<String> callableBackgroundInitializer0 = new CallableBackgroundInitializer<String>(callable0); [EOL]       callableBackgroundInitializer0.getTaskCount(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.initialize(); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.get(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsplitByCharacterType()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]    
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) "org.apache.commons.lang3.builder.IDKey", (Collection<String>) linkedList0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprependIfMissingIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '-'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'X'; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0); [EOL]        [EOL]       String string1 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null); [EOL
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testinvokeMethod()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       try {  [EOL]         MethodUtils.invokeMethod((Object) "endsWith", "endsWith", objectArray0); [EOL]         fail("Expecting exception: InvocationTargetException"); [EOL]        [EOL]       } catch(InvocationTargetException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(3474); [EOL]       int int0 = compareToBuilder1.toComparison(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       char[] charArray0 = new char[5]; [EOL]       String string0 = strSubstitutor0.replace(charArray0); [EOL]       assertEquals('k', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgenerateBitVector()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       LinkedHashSet<JavaVersion> linkedHashSet0 = new LinkedHashSet<JavaVersion>(); [EOL]       ArrayDeque<JavaVersion> arrayDeque0 = new ArrayDeque<JavaVersion>(linkedHashSet0); [EOL]       long long0 = EnumUtils.generateBitVector(class0, (Iterable<JavaVersion>) arrayDeque0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]   
@Test(timeout = 4000) [EOL]   public void testnotBlank()  throws Throwable  { [EOL]       CharSequence charSequence0 = Validate.notBlank((CharSequence) "6cG]>I{L|+BPpl", "aF&2rPDM-,1;", (Object[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.ceiling((Object) mockDate0, 5); [EOL]       long long0 = DateUtils.getFragmentInMinutes(date0, 5); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(0L); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, "]J;-oeCxj.", long0, false); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]       assertFalse(integer0.equals((Object)int2)); [EOL]      
@Test(timeout = 4000) [EOL]   public void testreplaceEachRepeatedly()  throws Throwable  { [EOL]       String string0 = "0O5I%'`Y@3b7"; [EOL]       String[] stringArray0 = new String[8]; [EOL]       String string1 = ""; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[2] = "Z}3oacB,Bk)FR"; [EOL]       stringArray0[3] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[4] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[5] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[6] = "0O5I%'`Y@3b7"; [EOL]       stringArray0[7
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Type[] typeArray0 = new Type[5]; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments(); [EOL]       doReturn(typeArray0[4]).when(parameterizedType0).getOwnerType(); [EOL]       doReturn(class0, class0).when(parameterizedType0).getRawType(); [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments(parameterizedType0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnotEmpty()  throws Throwable  { [EOL]       ArrayList<String> arrayList0 = new ArrayList<String>(0); [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.notEmpty(arrayList0, (String) null, objectArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-2587)); [EOL]       int int0 = mutableInt0.compareTo(mutableInt0); [EOL]       assertEquals((-2587), (int)mutableInt0.toInteger()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMat
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(0, fraction2.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLocalTime()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       mockGregorianCalendar0.set((-1), 637, 0, 0, 0, 5); [EOL]       MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(); [EOL]       boolean boolean0 = DateUtils.isSameLocalTime(mockGregorianCalendar0, mockGregorianCalendar1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.addHours(mockDate0, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       int int0 = ArrayUtils.indexOf(longArray0, (-1L), 1342); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatUTC()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       String string0 = DateFormatUtils.formatUTC((Date) mockDate0, "F"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetCommonPrefix()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cb
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((
@Test(timeout = 4000) [EOL]   public void testappendPadding()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendPadding(416, 'n'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0,
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true); [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]       assertTrue(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Character character0 = Character.valueOf('\u0092'); [EOL]       String string0 = CharUtils.toString(character0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE_TIME; [EOL]       Format format0 = dateTimeFormatter0.toFormat(); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(format0, format0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         compositeFormat0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // text [EOL]          // [EOL]          verifyException("java.util.Objects", e); [EOL]   
@Test(timeout = 4000) [EOL]   public void testlowerCase()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testnamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.namingPattern(""); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       basicThreadFactory0.newThread((Runnable) null); [EOL]       long long0 = basicThreadFactory0.getThreadCount(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       fraction0.toProperString(); [EOL]       String string0 = fraction0.toProperString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(0L); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendInternal(stringBuffer0, "]J;-oeCxj.", long0, false); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveStart()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       strTokenizer0.reset(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]       assertFalse(integer0.equals((Object)int2)); [EOL]      
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteWhitespace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMat
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Type[] typeArray0 = new Type[5]; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(parameterizedType0).getActualTypeArguments(); [EOL]       doReturn(typeArray0[4]).when(parameterizedType0).getOwnerType(); [EOL]       doReturn(class0, class0).when(parameterizedType0).getRawType(); [EOL]       Map<TypeVariable<?>, Type> map0 = TypeUtils.getTypeArguments(parameterizedType0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CompareToBuilder.reflectionCompare((Object) "", (Object) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testright()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[7]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         octalUnescaper0.translate((CharSequence) charBuffer0, 545, (Writer) stringWriter0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]         
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0,
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]   
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[0]; [EOL]       Float[] floatArray1 = ArrayUtils.toObject(floatArray0); [EOL]       float[] floatArray2 = ArrayUtils.toPrimitive(floatArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreateLong()  throws Throwable  { [EOL]       Long long0 = NumberUtils.createLong("0"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(2); [EOL]       StringWriter stringWriter0 = new StringWriter(2); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1225), ";3q^1Hv3rK6"); [EOL]       Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0); [EOL]       Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer()); [EOL]       FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 13); [EOL]       fastDateFormat0.format((Object) calendar0, stringBuffer0, fieldPosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testgetDateTimeInstance()  throws Throwable  { [EOL]       Locale locale0 = Locale.JAPANESE; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateTimeInstance(0, 0, locale0); [EOL]       boolean boolean0 = fastDateFormat0.equals(";3q^1H>3r}6"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprocessBitVector()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       long[] longArray0 = new long[0]; [EOL]       EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup_MapStrLookup0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn((StringBuilder) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetChars()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(65); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.setNullText("0H+6+X"); [EOL]        [EOL]       char[] charArray0 = strBuilder0.getChars((char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.appendDetail(stringBuffer0, "", byteArray0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripAll()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.substringsBetween(">6[jeJ<SAKbrgG+g7`", "KtUnGkJOKdUG25", "#|J|a=;l_S1^qmM"); [EOL]        [EOL]       String string0 = StringUtils.leftPad(">D<O)oa1X?)", (-1905), "Minimum abbreviation width is 4"); [EOL]        [EOL]       String[] stringArray1 = StringUtils.stripAll((String[]) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "#|J|a=;l_S1^qmM", "Minimum abbreviation width is 4"); [EOL]        [EOL]       LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>(); [EOL]        [EOL]       ListIterator<
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       Character[] characterArray0 = ArrayUtils.toObject(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]        [EOL]       boolean boolean0 = strBuilder_StrBuilderReader0.ready(); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       char[] charArray0 = new char[5]; [EOL]       String string0 = strSubstitutor0.replace(charArray0); [EOL]       assertEquals('k', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAllUpperCase()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String
@Test(timeout = 4000) [EOL]   public void teststartTimer()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(1426L, timeUnit0, 1867); [EOL]       timedSemaphore0.setLimit(1867); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.setLimit(1867); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.getUnit(); [EOL]       timedSemaphore0.setLimit(1867); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSem
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "Array element ", (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddYears()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.addYears((Date) null, 0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The date must not be null [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testappendAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(3217L); [EOL]       Double double0 = new Double(0.0); [EOL]       mutableLong0.setValue((Number) double0); [EOL]       mutableLong0.add(3217L); [EOL]       mutableLong0.getValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendFixedWidthPadLeft()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]      
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       DateTimeFormatter dateTimeFormatter0 = DateTimeFormatter.ISO_LOCAL_DATE; [EOL]       Format format0 = dateTimeFormatter0.toFormat(); [EOL]       CompositeFormat compositeFormat0 = new CompositeFormat(format0, format0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(3931); [EOL]       Object object0 = compositeFormat0.parseObject("dS`?~nvW8Gi&jq", parsePosition0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsNone()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.
@Test(timeout = 4000) [EOL]   public void testdefaultString()  throws Throwable  { [EOL]       boolean boolean0 = StringUtils.isBlank((CharSequence) null); [EOL]        [EOL]       boolean boolean1 = StringUtils.endsWith((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.defaultString("fXNk|L<"); [EOL]        [EOL]       boolean boolean2 = StringUtils.containsNone((CharSequence) null, "Search and Replace array lengths don't match: "); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3]; [EOL]       Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.validIndex(locale_FilteringModeArray0, 0, "The value %s is not in the specified exclusive range of %s to %s", (Object[]) locale_FilteringModeArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidateRange()  throws Throwable  { [EOL]       String string0 = "+[AQj^o1MB"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("+[AQj^o1MB"); [EOL]        [EOL]       int int0 = 2860; [EOL]       StrBuilder strBuilder1 = strBuilder0.ensureCapacity(2860); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.replaceAll('+', '6'); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.minimizeCapacity(); [EOL]        [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         strBuilder1.validateRange(2860, (-32768)); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [E
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(";.Wv4!3f/"); [EOL]       char[] charArray0 = new char[9]; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = 107; [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       int int1 = 0; [EOL]       StrBuilder strBuilder1 = strBuilder0.insert(0, true); [EOL]        [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]        [EOL]       char char0 = 'w'; [EOL]       StrMatcher strMatcher0 = StrMatcher.charMatcher('w'); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       StrMatcher strMatcher1 = StrMatcher.charSetMatcher(charArray0); [EOL]        [EOL]       int int2 = strBuilder0.indexOf((StrMatcher)
@Test(timeout = 4000) [EOL]   public void testwriteDeclaredStaticField()  throws Throwable  { [EOL]       Class<Field> class0 = Field.class; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         FieldUtils.writeDeclaredStaticField((Class<?>) class0, "char", (Object) "char"); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Cannot locate declared field java.lang.reflect.Field.char [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.reflect.FieldUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName((Object) null, ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testsubstringAfter()  throws Throwable  { [EOL]       String string0 = StringUtils.stripEnd("~@!LXZ6YxCtw", "BTj"); [EOL]        [EOL]       String string1 = StringUtils.substringAfter("p{InCombiningDiacriticalMarks}+", "'fJ"); [EOL]        [EOL]       String string2 = StringUtils.difference("p{InCombiningDiacriticalMarks}+", "~@!LXZ6YxCtw"); [EOL]        [EOL]       String string3 = StringUtils.substringBetween("", "", "cK2@iqJ0FN"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(675); [EOL]       int int0 = bitField0.getRawValue(2061); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(3474); [EOL]       int int0 = compareToBuilder1.toComparison(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(""); [EOL]       Class<Object> class0 = Object.class; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder((Object) null, toStringStyle0, stringBuffer0, (Class<? super Object>) class0, true, true); [EOL]       reflectionToStringBuilder0.setUpToClass(class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testgetAverageCallsPerPeriod()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer()); [EOL]       MockThread mockThread0 = new MockThread(); [EOL]       MockThread mockThread1 = new MockThread(threadGroup0, mockThread0); [EOL]       MockThread mockThread2 = new MockThread(mockThread1, ""); [EOL]       MockThread mockThread3 = new MockThread(mockThread2); [EOL]       ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer()); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(501, threadFactory0); [EOL]       threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread3, scheduledThreadPoolExecutor0); [EOL]       ScheduledThreadPoolExecutor
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(70, 1433); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = unicodeEscaper0.translate(65535, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]       assertFalse(integer0.equals((Object)int2)); [EOL]      
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       int[] intArray0 = new int[4]; [EOL]       int[] intArray1 = ArrayUtils.subarray(intArray0, (-3250), 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoCharArray()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL] 
@Test(timeout = 4000) [EOL]   public void testappendDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendDetail(stringBuffer0, ",", 0.0F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveStart()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA>
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]        [EOL]       StrBuilder.StrBuilderTokenizer strBuilder_StrBuilderTokenizer0 = strBuilder0.new StrBuilderTokenizer(); [EOL]        [EOL]       char[] charArray0 = new char[8]; [EOL]       charArray0[0] = '9'; [EOL]       charArray0[1] = '2'; [EOL]       charArray0[2] = '>'; [EOL]       charArray0[3] = 'C'; [EOL]       StrTokenizer strTokenizer0 = strBuilder_StrBuilderTokenizer0.setDelimiterString(""); [EOL]        [EOL]       charArray0[4] = 'h'; [EOL]       charArray0[5] = 'g'; [EOL]       charArray0[6] = 'T'; [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testtoCharArray()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL] 
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]     
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       MutableLong mutableLong0 = new MutableLong((Number) byte0); [EOL]       mutableLong0.increment(); [EOL]       mutableLong0.toLong(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2382); [EOL]       MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, ""); [EOL]       Integer integer1 = new Integer(41); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, ""); [EOL]       int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testremoveEndIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("6n(.8{1r7", ", Length: 0"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlpha("6n(.8{1r7"); [EOL]        [EOL]       boolean boolean1 = StringUtils.containsAny((CharSequence) "6n(.8{1r7", (CharSequence) "6n(.8{1r7"); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) ", Length: 0", "U4v=EwB5e'.{:hed"); [EOL]        [EOL]       String string1 = StringUtils.removeStartIgnoreCase((String) null, ";fN3eIB!Y<[m"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.7"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       int[] intArray0 = new int[4]; [EOL]       int[] intArray1 = ArrayUtils.subarray(intArray0, (-3250), 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testendsWith()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testisAlpha()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("9<-;", "9<-;"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("", "9<-;", ""); [EOL]        [EOL]       String string2 = StringUtils.center((String) null, 11, 'H'); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.overlay("eUUr{~\"Kk", "Array and element cannot both be null", 127, 838); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0]
@Test(timeout = 4000) [EOL]   public void testcontainsAny()  throws Throwable  { [EOL]       String string0 = StringUtils.trim("fe|kO~[="); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsAny((CharSequence) "fe|kO~[=", (CharSequence) "fe|kO~[="); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = (String)DurationFormatUtils.d; [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("d", 1436); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, 1436); [EOL]       DurationFormatUtils.formatPeriod((-3061L), (long) 1436, "^ipX1?>Wx8HIlS0?"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains('6'); [EOL]       assertEquals('6', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.reset("set() is unsupported"); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       char[] charArray0 = new char[5]; [EOL]       String string0 = strSubstitutor0.replace(charArray0); [EOL]       assertEquals('k', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       doubleArray0[0] = (double) (byte)6; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 6.0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlphanumericSpace()  throws Throwable  { [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null); [EOL]        [EOL]       String string0 = StringUtils.center("<@rd#", (-1), '#'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       charSequenceArray0[0] = null; [EOL]       charSequenceArray0[1] = (CharSequence) "<@rd#"; [EOL]       charSequenceArray0[2] = (CharSequence) "<@rd#"; [EOL]       String string1 = StringUtils.appendIfMissing("<@rd#", "<@rd#", charSequenceArray0); [EOL]        [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) "<@rd#", (char[]) null); [EOL]     
@Test(timeout = 4000) [EOL]   public void testreplaceAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(1920); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.append(0.0F); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.append((double) 1920); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder0.appendln(1920); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.appendln((Object) strBuilder3); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder4.deleteAll('#'); [EOL]        [EOL]       StringBuilder stringBuilder0 = strBuilder1.toStringBuilder(); [EOL]        [EOL]       int int0 = 2; [EOL]       StrBuilder strBuilder6 = strBuilder0.append((
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.add((-1L)); [EOL]       MutableLong mutableLong1 = new MutableLong("0"); [EOL]       boolean boolean0 = mutableLong0.equals(mutableLong1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlookup()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       hashMap0.put("", ""); [EOL]       StrLookup.MapStrLookup<String> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<String>(hashMap0); [EOL]       String string0 = strLookup_MapStrLookup0.lookup(""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(1, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlpha('z'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]     
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       DurationFormatUtils.formatDuration(0L, ""); [EOL]       DurationFormatUtils.formatPeriodISO(836L, (-1184L)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testrightPad()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad("QW=:? 4b7d", 2, 'u'); [EOL]        [EOL]       short[] shortArray0 = new short[4]; [EOL]       shortArray0[0] = (short)64; [EOL]       shortArray0[1] = (short)211; [EOL]       shortArray0[2] = (short)0; [EOL]       shortArray0[3] = (short)489; [EOL]       String string1 = StringUtils.join(shortArray0, 't', (int) (short)489, 0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("", "QW=:? 4b7d", (int) (short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdecrement()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(0.0F); [EOL]       mutableFloat0.decrement(); [EOL]       double double0 = mutableFloat0.doubleValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfDifference()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]     
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testrandomAscii()  throws Throwable  { [EOL]       RandomStringUtils.randomAscii(0); [EOL]       RandomStringUtils.random(0, 0, 0, true, false, (char[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testisWhitespace()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils
@Test(timeout = 4000) [EOL]   public void testgetUserDir()  throws Throwable  { [EOL]       File file0 = SystemUtils.getUserDir(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststripEnd()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.appendCyclicObject(stringBuffer0, (String) null, stringBuffer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutablePair<ImmutablePair<Integer, Object>, Object> mutablePair0 = new MutablePair<ImmutablePair<Integer, Object>, Object>(); [EOL]       AbstractMap.SimpleEntry<Object, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Object, Object>("", ""); [EOL]       ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of("", (Object) abstractMap_SimpleEntry0); [EOL]       MutablePair<AbstractMap.SimpleEntry<Object, Object>, ImmutablePair<String, Object>> mutablePair1 = MutablePair.of(abstractMap_SimpleEntry0, immutablePair0); [EOL]       Object object0 = mutablePair1.getValue(); [EOL]       boolean boolean0 = mutablePair0.equals(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testswapCase()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) ""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       String string0 = StringUtils.appendIfMissing("", "", charSequenceArray0); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '4';
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1346, threadPoolExecutor_DiscardPolicy0); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, scheduledThreadPoolExecutor0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer0.get(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]      
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testsetExcludeFieldNames()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(18); [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(toStringStyle0, toStringStyle0, stringBuffer0); [EOL]       String[] stringArray0 = new String[7]; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder1 = reflectionToStringBuilder0.setExcludeFieldNames(stringArray0); [EOL]       reflectionToStringBuilder1.toString(); [EOL]       String string0 = ReflectionToStringBuilder.toString((Object) stringBuffer0, toStringStyle0, true, true); [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       // Undeclared exception! [EOL]       ReflectionToStringBuilder.toStringExclude((Object) string0, (Collection<String>) linkedList0); [EOL] 
@Test(timeout = 4000) [EOL]   public void testisBefore()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-3988), 2617).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("%4D8,", comparator0); [EOL]       boolean boolean0 = range0.isBeforeRange(range0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToByte()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       byte byte0 = Conversion.binaryToByte(booleanArray0, 2778, (byte) (-1), (-2835), (byte) (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       mutableDouble0.decrement(); [EOL]       mutableDouble0.increment(); [EOL]       mutableDouble0.subtract((-447.178917)); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetDelimiterMatcher()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher("/Q&ZbFv0Je_(b+/."); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setDelimiterMatcher(strMatcher0); [EOL]       strTokenizer1.nextToken(); [EOL]        [EOL]       strTokenizer0.previous(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableObject<MutableObject<Object>> mutableObject0 = new MutableObject<MutableObject<Object>>(); [EOL]       MutableObject<Object> mutableObject1 = new MutableObject<Object>(mutableObject0); [EOL]       mutableObject0.setValue(mutableObject1); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         mutableObject1.equals(mutableObject0); [EOL]         fail("Expecting exception: StackOverflowError"); [EOL]        [EOL]       } catch(StackOverflowError e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = NumericEntityUnescaper.OPTION.values(); [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         numericEntityUnescaper0.translate((CharSequence) "622", 1570, (Writer) stringWriter0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("org.apache.commons.lang3.text.StrBuilder"); [EOL]       String string0 = strTokenizer0.toString(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(0.0F); [EOL]       MutableFloat mutableFloat1 = new MutableFloat(0.0F); [EOL]       mutableFloat1.increment(); [EOL]       int int0 = mutableFloat0.compareTo(mutableFloat1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]     
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]        [EOL]       String string2 = StringUtils.remove(" ", '8'); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " "); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteAll()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("hZ3CNnc|]e"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       int int0 = strBuilder_StrBuilderReader0.read(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((-963), 104, '/'); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.tabMatcher(); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder1.deleteAll(strMatcher0); [EOL]        [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = '/'; [EOL]       charArray0
@Test(timeout = 4000) [EOL]   public void testordinalIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.EMPTY; [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase(""); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.isEmpty(""); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparator("", "Minimum abbreviation width is 4"); [EOL]        [EOL]       int int1 = StringUtils.indexOfDifference((CharSequence) "", (CharSequence) ""); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOfAny("", stringArray0); [EOL]        [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testisNumeric()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.appendSuper(3474); [EOL]       int int0 = compareToBuilder1.toComparison(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       ImmutablePair<String, Object> immutablePair0 = new ImmutablePair<String, Object>("#X(oH<XmBW", "#X(oH<XmBW"); [EOL]       String string0 = immutablePair0.getLeft(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toString(false, "Array element ", (String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       byte byte0 = bitField0.setByteBoolean((byte)24, true); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNotIn('{', '~'); [EOL]       CharRange charRange1 = CharRange.isIn('U', 'n'); [EOL]       boolean boolean0 = charRange0.contains(charRange1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrappersToPrimitives()  throws Throwable  { [EOL]       Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 0); [EOL]       Class<?>[] classArray1 = ClassUtils.toClass(classArray0); [EOL]       Class<?>[] classArray2 = ClassUtils.wrappersToPrimitives(classArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('7'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testbyteArrayToInt()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       int int0 = Conversion.byteArrayToInt(byteArray0, 0, 0, 0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAlphaSpace()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[0] = 1424.4987F; [EOL]       floatArray0[1] = (-1.0F); [EOL]       String string0 = StringUtils.CR; [EOL]        [EOL]       String string1 = StringUtils.rightPad(",,=9_", (-1182)); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       charSequenceArray0[0] = (CharSequence) "\r"; [EOL]       int int0 = StringUtils.indexOfDifference(charSequenceArray0); [EOL]        [EOL]       String string2 = StringUtils.substring("V[BQedlGTy?P=", 974); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('['); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetUnit()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.MILLISECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(4173L, timeUnit0, 2041); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.getPeriod(); [EOL]       timedSemaphore0.setLimit(2041); [EOL]       timedSemaphore0.getUnit(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.getLastAcquiresPerPeriod(); [EOL]       timedSemaphore0.getLimit(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('['); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("", "Minimum abbreviation width with offset is 7", 64); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string1 = StringUtils.join(floatArray0, '['); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StringBuffer stringBuffer0 = strBuilder0.toStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       StringBuffer stringBuffer1 = stringBuffer0.reverse(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]       assertEquals("", stringBuffer1.toString()); [EOL]        [EOL]       StrMatcher.NoMatcher strMatcher_NoMatcher0 = new StrMatcher.NoMatcher(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.deleteAll((StrMatcher) strMatcher_NoMatcher0); [EOL]        [EOL]       char char0 =
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       RandomStringUtils randomStringUtils0 = new RandomStringUtils(); [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'B'; [EOL]       charArray0[1] = 'j'; [EOL]       charArray0[2] = 'm'; [EOL]       charArray0[3] = 'C'; [EOL]       charArray0[4] = '^'; [EOL]       charArray0[5] = 'Y'; [EOL]       charArray0[6] = ','; [EOL]       charArray0[7] = '5'; [EOL]       charArray0[8] = '0'; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         RandomStringUtils.random((-121), charArray0); [EOL]       
@Test(timeout = 4000) [EOL]   public void testgetDeclaredField()  throws Throwable  { [EOL]       Class<Annotation> class0 = Annotation.class; [EOL]       Field field0 = FieldUtils.getDeclaredField(class0, "sq$Exo['mcJa2<pc3S"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testgetTSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("/Q&ZbFv0Je_(b+/."); [EOL]       Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer()); [EOL]       strTokenizer0.forEachRemaining(consumer0); [EOL]       strTokenizer0.toString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplacePattern()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.remove
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Date date0 = DateUtils.addHours(mockDate0, 1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.build(); [EOL]        [EOL]       char[] charArray0 = strBuilder0.toCharArray(0, 0); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln('h'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.deleteCharAt(0); [EOL]        [EOL]       int int0 = StrBuilder.CAPACITY; [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(""); [EOL]        [EOL]       int int1 = strBuilder2.lastIndexOf('b', 0); [EOL]        [EOL]       Reader reader0
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldSeparator((String) null); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testLocale()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("z!V+wg}ZGX_v,WK g"); [EOL]       Locale locale0 = Locale.TRADITIONAL_CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser(">+", timeZone0, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition((-289)); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateParser0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfDifference()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]     
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(1, fraction1.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       Character character0 = CharUtils.toCharacterObject('\\'); [EOL]        [EOL]       int int0 = CharUtils.toIntValue(character0, (-2814)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-2587)); [EOL]       int int0 = mutableInt0.compareTo(mutableInt0); [EOL]       assertEquals((-2587), (int)mutableInt0.toInteger()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'u'; [EOL]       charArray0[6] = '0'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.next(); [EOL]       strTokenizer0.next(); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setQuoteMatcher(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       ImmutablePair<String, String> immutablePair0 = ImmutablePair.of("org.apache.commons.lang3.tuple.Pair", ""); [EOL]       Pair<String, String> pair0 = Pair.of("", ""); [EOL]       int int0 = immutablePair0.compareTo(pair0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = (long) 37; [EOL]       hashCodeBuilder0.append(longArray0); [EOL]       assertEquals(0, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testindexOfType()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("syckr#6Cil1M}1|kY1U"); [EOL]       Class<Object> class0 = Object.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) mockThrowable0, (Class<?>) class0, (-1730)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatDurationWords()  throws Throwable  { [EOL]       DurationFormatUtils.formatDurationWords(1L, false, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnumList()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         EnumUtils.getEnumList((Class<JavaVersion>) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.EnumUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.overlay("|{s@(4`4p", "|{s@(4`4p", 0, 0); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) "|{s@(4`4p|{s@(4`4p", (CharSequence) "|{s@(4`4p|{s@(4`4p"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3]; [EOL]       Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.validIndex(locale_FilteringModeArray0, 0, "The value %s is not in the specified exclusive range of %s to %s", (Object[]) locale_FilteringModeArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('6'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertFalse(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Formatter formatter0 = new Formatter((Appendable) null); [EOL]       FormattableUtils.append((CharSequence) "null", formatter0, (-1830), 963, 0, ' ', (CharSequence) ""); [EOL]       assertEquals("                                                                                                                                                                                                              
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("]"); [EOL]       Locale locale0 = Locale.JAPAN; [EOL]       FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", timeZone0, locale0); [EOL]       fastDatePrinter0.getMaxLengthEstimate(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction(0.0); [EOL]       float float0 = fraction0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       booleanArray0[2] = true; [EOL]       booleanArray0[3] = true; [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer((-484)); [EOL]       ImmutableTriple<Integer, String, Integer> immutableTriple0 = ImmutableTriple.of(integer0, "", integer0); [EOL]       int int0 = immutableTriple0.compareTo((Triple<Integer, String, Integer>) immutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsNone()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.
@Test(timeout = 4000) [EOL]   public void testunescapeXml()  throws Throwable  { [EOL]       String string0 = "\\u"; [EOL]       String string1 = StringEscapeUtils.unescapeXml(string0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         StringEscapeUtils.unescapeEcmaScript(string1); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Less than 4 hex digits in unicode value: '\\u' due to end of CharSequence [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.text.translate.UnicodeUnescaper", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testasWriter()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       float float0 = (-3134.9556F); [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]    
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         CompareToBuilder.reflectionCompare((Object) "", (Object) null); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.builder.CompareToBuilder", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(12); [EOL]       int int0 = CharSequenceUtils.indexOf(charBuffer0, charBuffer0, 12); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setFieldNameValueSeparator("JAVA_1_4"); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder((-811), (-811)); [EOL]       double[] doubleArray0 = new double[3]; [EOL]       HashCodeBuilder hashCodeBuilder1 = hashCodeBuilder0.append(doubleArray0); [EOL]       hashCodeBuilder1.append((boolean[]) null); [EOL]       assertEquals((-1693551291), (int)hashCodeBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdeleteWhitespace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       short[] shortArray0 = new short[1]; [EOL]       shortArray0[0] = (short)1233; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(shortArray0, shortArray0); [EOL]       equalsBuilder0.append((float[]) null, (float[]) null); [EOL]       Boolean boolean0 = equalsBuilder0.build(); [EOL]        [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byteArray0[2] = (byte)0; [EOL]       byteArray0[3] = (byte)0; [EOL]       byte[] byteArray1 = new byte[6]; [EOL]       byteArray1[0] = (byte) (-1); [EOL]       byteArray1[1] = (byte)0; [EOL]  
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]        [EOL]       StrBuilder strBuilder5 = strBuilder1.insert(0,
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphaLower()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaLower('P'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmarkSupported()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]    
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Integer> callable0 = (Callable<Integer>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1346, threadPoolExecutor_DiscardPolicy0); [EOL]       CallableBackgroundInitializer<Integer> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Integer>(callable0, scheduledThreadPoolExecutor0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         callableBackgroundInitializer0.get(); [EOL]         fail("Expecting exception: IllegalStateException"); [EOL]        [EOL]       } catch(IllegalStateException e) { [EOL]          // [EOL]      
@Test(timeout = 4000) [EOL]   public void testisAllUpperCase()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String
@Test(timeout = 4000) [EOL]   public void testsubstringsBetween()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testleft()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(true); [EOL]        [EOL]       boolean boolean0 = BooleanUtils.toBoolean(integer0, integer0, integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       charArray0[0] = ''; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, 4, 4); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testabbreviateMiddle()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "", 16); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, "k"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequalsIgnoreCase()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]  
@Test(timeout = 4000) [EOL]   public void testisAlpha()  throws Throwable  { [EOL]       String string0 = StringUtils.removeEndIgnoreCase("9<-;", "9<-;"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAlphanumericSpace(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("", "9<-;", ""); [EOL]        [EOL]       String string2 = StringUtils.center((String) null, 11, 'H'); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       String string3 = StringUtils.overlay("eUUr{~\"Kk", "Array and element cannot both be null", 127, 838); [EOL]        [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.subtract(563L); [EOL]       float float0 = mutableLong0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMessage()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("8z/t]?%'4"); [EOL]       mockThrowable0.setOriginForDelegate((StackTraceElement) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         ExceptionUtils.getStackFrameList(mockThrowable0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testabbreviateMiddle()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("', is neither of type Map.Entry nor an Array", "", 16); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsplitPreserveAllTokens()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-447.178917)); [EOL]       Double double0 = mutableDouble0.getValue(); [EOL]        [EOL]       boolean boolean0 = mutableDouble0.equals(double0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       int int0 = 7; [EOL]       StrBuilder strBuilder0 = new StrBuilder(7); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.trim(); [EOL]        [EOL]       int int1 = 0; [EOL]       int int2 = 32; [EOL]       StrBuilder strBuilder2 = strBuilder0.insert(0, 32); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder1.append('r'); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceAll("java.vm.specification.version", "java.vm.specification.version"); [EOL]        [EOL]       Integer integer0 = new Integer(0); [EOL]       assertFalse(integer0.equals((Object)int2)); [EOL]      
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) equalsBuilder1; [EOL]       Object object0 = new Object(); [EOL]       objectArray0[1] = object0; [EOL]       objectArray0[2] = (Object) equalsBuilder0; [EOL]       objectArray0[3] = (Object) equalsBuilder0; [EOL]       objectArray0[4] = (Object) equalsBuilder0; [EOL]       objectArray0[6] = (Object) equalsBuilder1; [EOL]       objectArray0[7] = (Object) equalsBuilder1; [EOL]       EqualsBuilder equalsBuilder2 = equalsBuilder1.append(objectArray0, objectArray0); [EOL]       double[]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setArraySeparator((String) null); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float) 2018); [EOL]       hashCodeBuilder0.append((byte) (-1)); [EOL]       assertEquals((-126510360), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void teststartsWith()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testabbreviate()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviateMiddle("", "Minimum abbreviation width with offset is 7", 64); [EOL]        [EOL]       float[] floatArray0 = new float[0]; [EOL]       String string1 = StringUtils.join(floatArray0, '['); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[5]; [EOL]       charSequenceArray0[0] = (CharSequence) ""; [EOL]       charSequenceArray0[1] = (CharSequence) ""; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendln(true); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendln((-3134.9556F)); [EOL]        [EOL]       String string0 = null; [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(0, (String) null); [EOL]        [EOL]       Writer writer0 = strBuilder3.asWriter(); [EOL]        [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.deleteAll(strMatcher0); [EOL]        [EOL]       StrMatcher strMatcher1 = StrMat
@Test(timeout = 4000) [EOL]   public void testcapacity()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assertEquals(32, strBuilder1.capacity()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(32, strBuilder0.capacity()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrandom()  throws Throwable  { [EOL]       int int0 = 0; [EOL]       RandomStringUtils.randomAlphabetic(0); [EOL]       int int1 = 0; [EOL]       RandomStringUtils.randomAlphanumeric(0); [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = 'C'; [EOL]       charArray0[1] = ''; [EOL]       charArray0[2] = 'q'; [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(56319, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testparseObject()  throws Throwable  { [EOL]       Locale locale0 = Locale.ENGLISH; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(1, locale0); [EOL]       ParsePosition parsePosition0 = new ParsePosition(3); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.parseObject((String) null, parsePosition0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.FastDateParser", e); [EOL]       } [EOL]  
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.outsideOf(70, 1433); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = unicodeEscaper0.translate(65535, (Writer) stringWriter0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher(";.Wv4!3f/"); [EOL]       char[] charArray0 = new char[9]; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Pair<Integer, Object> pair0 = Pair.of(integer0, (Object) integer0); [EOL]       Object object0 = new Object(); [EOL]       Pair<Integer, Object> pair1 = Pair.of(integer0, object0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         pair0.compareTo(pair1); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // java.lang.Object cannot be cast to java.lang.Integer [EOL]          // [EOL]          verifyException("java.lang.Integer", e); [EOL]       } [E
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testready()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append((-463.38F), (-1.0F)); [EOL]       int[] intArray0 = new int[3]; [EOL]       compareToBuilder1.append(intArray0, intArray0); [EOL]       assertEquals((-1), (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((short[]) null, (short)64, 3132); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtruncate()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateUtils.truncate((Object) "", 14); [EOL]         fail("Expecting exception: ClassCastException"); [EOL]        [EOL]       } catch(ClassCastException e) { [EOL]          // [EOL]          // Could not truncate  [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.time.DateUtils", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", 'P'); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJson((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinvert()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.FOUR_FIFTHS; [EOL]       Fraction fraction1 = fraction0.invert(); [EOL]       int int0 = fraction1.compareTo(fraction0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       mutableByte0.hashCode(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = DurationFormatUtils.lexx("haqSW1h"); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray1 = DurationFormatUtils.lexx("2.yCA&VIq3y*mz+}([3"); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("haqSW1h"); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.toString(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       DurationFormatUtils.format(durationFormatUtils_TokenArray0, 1825, 3593, 1825, 0, 1825, 0, 1825, true); [EOL]       DurationFormatUtils.formatDurationWords(1L, true, true); [EOL]   
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Formatter formatter0 = new Formatter((Appendable) null); [EOL]       FormattableUtils.append((CharSequence) "null", formatter0, (-1830), 963, 0, ' ', (CharSequence) ""); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetCause()  throws Throwable  { [EOL]       Throwable throwable0 = ExceptionUtils.getCause((Throwable) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.setValue((-1)); [EOL]       long long0 = mutableInt0.longValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("$i%f"); [EOL]       strTokenizer0.nextToken(); [EOL]       strTokenizer0.setDelimiterChar('S'); [EOL]       assertEquals(0, strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat('\"', 10); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[7]; [EOL]       charSequenceArray0[0] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[1] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[2] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) ""; [EOL]       charSequenceArray0[5] = (CharSequence) "\"\"\"\"\"\"\"\"\"\""; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]     
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)89); [EOL]       MutableDouble mutableDouble0 = new MutableDouble((Number) byte0); [EOL]       float float0 = mutableDouble0.floatValue(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       String string0 = StringUtils.chop("T"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       charSequenceArray0[0] = (CharSequence) "T"; [EOL]       charSequenceArray0[1] = (CharSequence) "T"; [EOL]       charSequenceArray0[2] = (CharSequence) ""; [EOL]       charSequenceArray0[3] = (CharSequence) ""; [EOL]       charSequenceArray0[4] = (CharSequence) "T"; [EOL]       charSequenceArray0[5] = (CharSequence) "T"; [EOL]       charSequenceArray0[6] = (CharSequence) ""; [EOL]       charSequenceArray0[7] = (CharSequence) "T"; [EOL]       boolean boolean0 = StringUtils.starts
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElement(booleanArray0, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveStart()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("0wIQ]L*]D"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.THREE_QUARTERS; [EOL]       fraction0.toProperString(); [EOL]       String string0 = fraction0.toProperString(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches("+SBt23`", false, 9, "d]HF6PiD+SBt23`", 9, (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] string
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.quoteMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("set() is unsupported", strMatcher0, strMatcher0); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       strTokenizer0.setEmptyTokenAsNull(true); [EOL]       strTokenizer0.reset("set() is unsupported"); [EOL]       assertTrue(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       Integer integer0 = new Integer(2382); [EOL]       MutableTriple<Integer, Integer, String> mutableTriple0 = new MutableTriple<Integer, Integer, String>(integer0, integer0, ""); [EOL]       Integer integer1 = new Integer(41); [EOL]       ImmutableTriple<Integer, Integer, String> immutableTriple0 = ImmutableTriple.of(integer1, integer1, ""); [EOL]       int int0 = mutableTriple0.compareTo((Triple<Integer, Integer, String>) immutableTriple0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testnoNullElements()  throws Throwable  { [EOL]       Vector<Object> vector0 = new Vector<Object>(); [EOL]       vector0.add((Object) null); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Validate.noNullElements(vector0); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // The validated collection contains null element at index: 0 [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.Validate", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(37, (-1)); [EOL]       hashCodeBuilder0.appendSuper(37); [EOL]       hashCodeBuilder0.append((short)0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       ImmutableTriple<Object, String, String> immutableTriple0 = ImmutableTriple.of((Object) null, "c(j,I&N$orhDD/xljLT", "c(j,I&N$orhDD/xljLT"); [EOL]       String string0 = immutableTriple0.getMiddle(); [EOL]   } [EOL] } [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isSameLength((Object[]) null, (Object[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       short short0 = NumberUtils.max((short)3129, (short)3129, (short) (-1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       ParsePosition parsePosition0 = new ParsePosition(65); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         fastDateFormat0.parseObject("", parsePosition0); [EOL]         fail("Expecting exception: StringIndexOutOfBoundsException"); [EOL]        [EOL]       } catch(StringIndexOutOfBoundsException e) { [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(); [EOL]       mockGregorianCalendar0.set(0, 996); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         DateFormatUtils.format((Calendar) mockGregorianCalendar0, "F", (TimeZone) null); [EOL]         fail("Expecting exception: IllegalArgumentException"); [EOL]        [EOL]       } catch(IllegalArgumentException e) { [EOL]          // [EOL]          // Invalid era [EOL]          // [EOL]          verifyException("java.util.GregorianCalendar", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappendSeparator()  throws Throwable  { [EOL]       String string0 = "SzpQ!4 ;U"; [EOL]       StrBuilder strBuilder0 = new StrBuilder("SzpQ!4 ;U"); [EOL]        [EOL]       char char0 = '`'; [EOL]       StrBuilder strBuilder1 = strBuilder0.appendFixedWidthPadLeft((Object) "SzpQ!4 ;U", 97, '`'); [EOL]        [EOL]       StrBuilder strBuilder2 = strBuilder0.appendSeparator("ekji"); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.insert(97, (long) 2817); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder1.replaceFirst("SzpQ!4 ;U", "ekji"); [EOL]        [EOL]       String string1 = strBuilder0.getNullText(); [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, String> hashMap0 = new HashMap<String, String>(); [EOL]       StrLookup<String> strLookup0 = StrLookup.mapLookup((Map<String, String>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0, "Variable prefix matcher must not be null!", "Variable prefix matcher must not be null!", 'k'); [EOL]       char[] charArray0 = new char[5]; [EOL]       String string0 = strSubstitutor0.replace(charArray0); [EOL]       assertEquals('k', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisBlank()  throws Throwable  { [EOL]       String string0 = StringUtils.repeat("RjtembD(Znc+< G<M", "RjtembD(Znc+< G<M", 16); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank("RjtembD(Znc+< G<M"); [EOL]        [EOL]       String string1 = StringUtils.removeEnd("", ""); [EOL]        [EOL]       boolean boolean1 = StringUtils.equalsIgnoreCase("", "RjtembD(Znc+< G<M"); [EOL]        [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[0] = (long) 16; [EOL]       longArray0[1] = (long) 16; [EOL]       longArray0[2] = (long) 16; [EOL]      
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.removeStart
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short)135); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((float[]) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOfAny()  throws Throwable  { [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[3]; [EOL]       String string0 = StringUtils.chomp("cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[0] = (CharSequence) "cK2@iqJ0FN"; [EOL]       String string1 = StringUtils.removeEnd("Afh\"z$ulNc", "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[1] = (CharSequence) "Afh\"z$ulNc"; [EOL]       CharSequence charSequence0 = StringUtils.defaultIfEmpty((CharSequence) "Afh\"z$ulNc", (CharSequence) "cK2@iqJ0FN"); [EOL]        [EOL]       charSequenceArray0[2] = (CharSequence) "Afh\"z$ulNc"; [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testskip()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.write(""); [EOL]        [EOL]       strBuilder_StrBuilderWriter0.flush(); [EOL]        [EOL]  
@Test(timeout = 4000) [EOL]   public void testtoIntValue()  throws Throwable  { [EOL]       Character character0 = Character.valueOf('0'); [EOL]       int int0 = CharUtils.toIntValue(character0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       Fraction fraction1 = Fraction.TWO_FIFTHS; [EOL]       boolean boolean0 = fraction0.equals(fraction1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testendOfPeriod()  throws Throwable  { [EOL]       TimeUnit timeUnit0 = TimeUnit.NANOSECONDS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(830L, timeUnit0, 0); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.acquire(); [EOL]       timedSemaphore0.getAcquireCount(); [EOL]       timedSemaphore0.setLimit(0); [EOL]       timedSemaphore0.getLimit(); [EOL]       timedSemaphore0.startTimer(); [EOL]       timedSemaphore0.endOfPeriod(); [EOL]       timedSemaphore0.isShutdown(); [EOL]       timedSemaphore0.getLimit(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       Locale.FilteringMode[] locale_FilteringModeArray0 = new Locale.FilteringMode[3]; [EOL]       Locale.FilteringMode[] locale_FilteringModeArray1 = Validate.validIndex(locale_FilteringModeArray0, 0, "The value %s is not in the specified exclusive range of %s to %s", (Object[]) locale_FilteringModeArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = WordUtils.uncapitalize((String) null); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPeriod()  throws Throwable  { [EOL]       DurationFormatUtils.formatPeriodISO(303L, 86400000L); [EOL]       boolean boolean0 = true; [EOL]       DurationFormatUtils.formatDurationWords(0L, true, true); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token("0java.lang.StringBuilder@00000000320java.lang.StringBuilder@00000000330java.lang.StringBuilder@00000000340java.lang.StringBuilder@0000000035", (-2139)); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token1 = new DurationFormatUtils.Token(durationFormatUtils_Token0, (-2139)); [EOL]       durationFormatUtils_Token1.getValue(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = null; [EOL]       int int0 = 212; [EOL]       durationFormatUtils_Token1.toString(); [EOL]       // Undeclared exception! [
@Test(timeout = 4000) [EOL]   public void testjoin()  throws Throwable  { [EOL]       String string0 = StringUtils.join((int[]) null, 't', 0, 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isAllUpperCase((CharSequence) null); [EOL]        [EOL]       String[] stringArray0 = StringUtils.splitPreserveAllTokens((String) null, '{'); [EOL]        [EOL]       String string1 = StringUtils.stripEnd(":;6z", (String) null);6z", string1); [EOL]        [EOL]       String string2 = StringUtils.leftPad("RWSLzV4h", 0, ""); [EOL]        [EOL]       int int0 = StringUtils.lastIndexOf((CharSequence) ":;6z", (CharSequence) "RWSLzV4h", 0); [EOL]        [EOL]       String[] stringArray1
@Test(timeout = 4000) [EOL]   public void testgetNewLineText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]       assertNull(strBuilder1.getNewLineText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNewLineText()); [EOL]    
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testnegate()  throws Throwable  { [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         Fraction.getFraction(Integer.MIN_VALUE, Integer.MIN_VALUE); [EOL]         fail("Expecting exception: ArithmeticException"); [EOL]        [EOL]       } catch(ArithmeticException e) { [EOL]          // [EOL]          // overflow: can't negate [EOL]          // [EOL]          verifyException("org.apache.commons.lang3.math.Fraction", e); [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getDefault(); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(2, timeZone0); [EOL]       Date date0 = fastDateFormat0.parse("Jan 1, 1970"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testreplacePattern()  throws Throwable  { [EOL]       String string0 = StringUtils.remove("null comparator", '.'); [EOL]        [EOL]       int int0 = StringUtils.getLevenshteinDistance((CharSequence) "null comparator", (CharSequence) "null comparator", 64); [EOL]        [EOL]       String string1 = StringUtils.replace("null comparator", "null comparator", "Minimum abbreviation width with offset is 7", (-809)); [EOL]        [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "Minimum abbreviation width with offset is 7", charArray0); [EOL]        [EOL]       String[] stringArray0 = StringUtils.substringsBetween("Minimum abbreviation width with offset is 7", "null comparator", "9'A"); [EOL]        [EOL]       String string2 = StringUtils.remove
@Test(timeout = 4000) [EOL]   public void testread()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       String string0 = strBuilder0.getNewLineText(); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       long long0 = strBuilder_StrBuilderReader0.skip((-1073L)); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       strBuilder_StrBuilderReader0.reset(); [EOL]       assertFalse(strBuilder_StrBuilderReader0.ready()); [EOL]        [EOL]       StrBuilder.StrBuilderWriter strBuilder_StrBuilderWriter0 = strBuilder0.new StrBuilderWriter(); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testsize()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.size()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.size()); [EOL]       assertEquals(27, strBuilder1.size()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.size()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((-1451)).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("!R3q", comparator0); [EOL]       String string0 = range0.toString("(x 0oq-IW,yyw#h*Sl"); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testsetIgnoredChar()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[2] = 'B'; [EOL]       charArray0[3] = 'r'; [EOL]       StrMatcher strMatcher0 = StrMatcher.trimMatcher(); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer(charArray0, strMatcher0, strMatcher0); [EOL]       strTokenizer0.setDelimiterChar('B'); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setIgnoredChar('\u0000'); [EOL]       boolean boolean0 = strTokenizer1.hasPrevious(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatDurationISO()  throws Throwable  { [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token((Object) null, 0); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       durationFormatUtils_Token0.getValue(); [EOL]       durationFormatUtils_Token0.equals((Object) null); [EOL]       durationFormatUtils_Token0.increment(); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[9]; [EOL]       durationFormatUtils_TokenArray0[0] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[1] = durationFormatUtils_Token0; [EOL]       durationFormatUtils_TokenArray0[2] = durationFormatUtils_Token
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       Comparable<Object>[] comparableArray0 = (Comparable<Object>[]) Array.newInstance(Comparable.class, 5); [EOL]       Comparable<Object> comparable0 = ObjectUtils.max(comparableArray0); [EOL]       assertNull(comparable0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtrim()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh
@Test(timeout = 4000) [EOL]   public void testiterator()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-199), (-199), (-199), (-3101), (-199)); [EOL]       DateUtils.iterator((Calendar) mockGregorianCalendar0, 2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       long long0 = stopWatch0.getTime(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('%'); [EOL]       boolean boolean0 = charRange0.isNegated(); [EOL]       assertEquals('%', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdifference()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQA
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("---------------------------------"); [EOL]       String string0 = contextedRuntimeException0.getRawMessage(); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertTrue(strBuilder0.isEmpty()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertFalse(strBuilder0.isEmpty()); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]       assertFalse(strBuilder1.isEmpty()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = str
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByWholeSeparatorPreserveAllTokens((String) null, "nStj ,MSo4WS`=."); [EOL]        [EOL]       boolean boolean0 = StringUtils.containsOnly((CharSequence) "nStj ,MSo4WS`=.", (String) null); [EOL]        [EOL]       String[] stringArray1 = StringUtils.splitByCharacterType("g"); [EOL]        [EOL]       String string0 = StringUtils.swapCase(""); [EOL]        [EOL]       String string1 = StringUtils.replaceChars("Y-#fu$T?im", ':', 'z'); [EOL]        [EOL]       String[] stringArray2 = StringUtils.split("Y-#fu$T?im"); [EOL]        [EOL]       String string2
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Range<String> range0 = Range.is("pKzJ'CmBAFa}&8mMy"); [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(955, 955, (-1614), (-20)).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range1 = Range.between((Object) "8BSsazZjZ<nSFi28~ ", (Object) range0, comparator0); [EOL]       boolean boolean0 = range1.containsRange(range1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertEquals(0, strBuilder0.length()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertEquals(27, strBuilder0.length()); [EOL]       assertEquals(27, strBuilder1.length()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertEquals(29, strBuilder0.length()); [EOL]       assert
@Test(timeout = 4000) [EOL]   public void testisNumeric()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]      
@Test(timeout = 4000) [EOL]   public void testappendln()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = StringUtils.SPACE; [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[1]; [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) " ", charSequenceArray0); [EOL]        [EOL]       String string1 = StringUtils.capitalize(" "); [EOL]        [EOL]       String string2 = StringUtils.remove(" ", '8'); [EOL]        [EOL]       boolean boolean0 = StringUtils.equalsIgnoreCase(" ", " "); [EOL]        [EOL]       int int1 = StringUtils.indexOfIgnoreCase((CharSequence) " ", charSequenceArray0[0]); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinvokeStaticMethod()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         MethodUtils.invokeStaticMethod(class0, (String) null, objectArray0, classArray0); [EOL]         fail("Expecting exception: NullPointerException"); [EOL]        [EOL]       } catch(NullPointerException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]       } [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplaceChars()  throws Throwable  { [EOL]       String string0 = StringUtils.abbreviate("|Y$B-O?Px11WLnrt", 0, 16); [EOL]        [EOL]       String string1 = StringUtils.replace("|Y$B-O?Px11WLnrt", "|Y$B-O?Px11WLnrt", "", 396); [EOL]        [EOL]       String[] stringArray0 = new String[2]; [EOL]       stringArray0[0] = ""; [EOL]       stringArray0[1] = "|Y$B-O?Px11WLnrt"; [EOL]       String string2 = StringUtils.replaceEach("", (String[]) null, stringArray0); [EOL]        [EOL]       int int0 = StringUtils.indexOfAny((CharSequence) "", (CharSequence[]) null); [EOL]        [EOL]      
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]        [EOL]       boolean boolean0 = ArrayUtils.isSameLength((boolean[]) null, booleanArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject(85, 85, 3832, 85); [EOL]       Boolean boolean1 = BooleanUtils.negate(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testwrap()  throws Throwable  { [EOL]       String string0 = WordUtils.wrap("|RY cXvuKn^,$~6S", (-5), "", false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[3]; [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonOptional; [EOL]       numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTIONArray0[0]; [EOL]       numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTION0; [EOL]       NumericEntityUnescaper numericEntityUnescaper0 = new NumericEntityUnescaper(numericEntityUnescaper_OPTIONArray0); [EOL]       boolean boolean0 = numericEntityUnescaper0.isSet(numericEntityUnescaper_OPTION0); [EOL
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone("<#"); [EOL]       Locale locale0 = Locale.CHINESE; [EOL]       FastDateParser fastDateParser0 = new FastDateParser("<#", timeZone0, locale0); [EOL]       Date date0 = fastDateParser0.parse("<#"); [EOL]       assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       char[] charArray0 = new char[7]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       // Undeclared exception! [EOL]       try {  [EOL]         octalUnescaper0.translate((CharSequence) charBuffer0, 545, (Writer) stringWriter0); [EOL]         fail("Expecting exception: IndexOutOfBoundsException"); [EOL]        [EOL]       } catch(IndexOutOfBoundsException e) { [EOL]          // [EOL]          // no message in exception (getMessage() returned null) [EOL]          // [EOL]         
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       compareToBuilder0.append(2074L, 2765L); [EOL]       compareToBuilder0.build(); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float) 2018); [EOL]       hashCodeBuilder0.append((byte) (-1)); [EOL]       assertEquals((-126510360), hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontainsOnly()  throws Throwable  { [EOL]       String string0 = StringUtils.leftPad((String) null, 114); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) null, (CharSequence) null, 114); [EOL]        [EOL]       int int1 = StringUtils.lastIndexOf((CharSequence) null, (-1)); [EOL]        [EOL]       int int2 = StringUtils.lastIndexOf((CharSequence) null, (CharSequence) null, 1124); [EOL]        [EOL]       String[] stringArray0 = StringUtils.split("\n", 'e'); [EOL]        [EOL]       String string1 = StringUtils.removeStart((String) null, "}%"); [EOL]        [EOL]       String string2 = StringUtils.defaultIfBlank((String) null, "3::s0DFSZzQ
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void teststrip()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]        [
@Test(timeout = 4000) [EOL]   public void testformatDuration()  throws Throwable  { [EOL]       DurationFormatUtils.lexx(" 0 days"); [EOL]       DurationFormatUtils durationFormatUtils0 = new DurationFormatUtils(); [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone(" 0 days"); [EOL]       DurationFormatUtils.formatPeriod((-896L), (-896L), " 0 days", true, timeZone0); [EOL]       DurationFormatUtils.formatPeriodISO((-3226L), (-2900L)); [EOL]       DurationFormatUtils.formatDurationWords(0L, true, true); [EOL]       DurationFormatUtils.formatPeriodISO((-1790L), 0L); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_FIFTHS; [EOL]       Fraction fraction1 = fraction0.subtract(fraction0); [EOL]       Fraction fraction2 = fraction1.reduce(); [EOL]       assertEquals(0, fraction2.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testrepeat()  throws Throwable  { [EOL]       String string0 = StringUtils.trimToNull(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       boolean boolean0 = StringUtils.isBlank(".ti')kKzb5J(cbBlh"); [EOL]        [EOL]       int int0 = StringUtils.indexOf((CharSequence) ".ti')kKzb5J(cbBlh", 10); [EOL]        [EOL]       String string1 = StringUtils.center(".ti')kKzb5J(cbBlh", 0, '3'); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) ".ti')kKzb5J(cbBlh"; [EOL]       charSequenceArray0[1] = (CharSequence) ".ti')kKzb5J(cbBlh";
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testuncapitalize()  throws Throwable  { [EOL]       String string0 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       int int0 = StringUtils.indexOfIgnoreCase((CharSequence) null, (CharSequence) null, (-1109)); [EOL]        [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[0] = '-'; [EOL]       charArray0[1] = 'Z'; [EOL]       charArray0[2] = 'X'; [EOL]       int int1 = StringUtils.indexOfAnyBut((CharSequence) null, charArray0); [EOL]        [EOL]       String string1 = StringUtils.uncapitalize((String) null); [EOL]        [EOL]       boolean boolean0 = StringUtils.contains((CharSequence) null, (CharSequence) null); [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.daemon(true); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       MockThread mockThread0 = new MockThread(""); [EOL]       Thread thread0 = basicThreadFactory0.newThread(mockThread0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]        [EOL]       StrBuilder strBuilder3 = strBuilder2.appendln((Object) strBuilder0); [EOL]        [EOL]       StrBuilder strBuilder4 = strBuilder0.setLength(2822); [EOL]        [EOL]       Object
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]        [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invalid startIndex: "); [EOL]        [EOL]       StrBuilder strBuilder1 = strBuilder0.appendWithSeparators((Iterator<?>) strTokenizer0, "Invalid startIndex: "); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(strBuilder1.getNullText()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = '\\'; [EOL]       StrBuilder strBuilder2 = strBuilder1.appendln(charArray0); [EOL]       assertNull(strBuilder0.getNullText()); [EOL]       assertNull(
@Test(timeout = 4000) [EOL]   public void testmark()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder("D:qv{0F`Yb3&H^f*N2"); [EOL]        [EOL]       StrBuilder.StrBuilderReader strBuilder_StrBuilderReader0 = strBuilder0.new StrBuilderReader(); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = strBuilder_StrBuilderReader0.read(charArray0); [EOL]       assertTrue(strBuilder_StrBuilderReader0.markSupported()); [EOL]        [EOL]       charArray0[0] = 'n'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]        [EOL]       int int1 = strBuilder_StrBuilderReader0.read(charBuffer0); [EOL]     
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.SIMPLE_STYLE.setUseShortClassName(true); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       booleanArray0[5] = true; [EOL]       booleanArray0[7] = true; [EOL]       booleanArray0[8] = true; [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubstring()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.split("*aKUDx7dwU3mi-y:{", "g?PZ{DRa[O6upHJ", 0); [EOL]        [EOL]       boolean boolean0 = StringUtils.isNotEmpty("*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       ArrayList<Object> arrayList0 = new ArrayList<Object>(); [EOL]        [EOL]       ListIterator<Object> listIterator0 = arrayList0.listIterator(); [EOL]        [EOL]       String string0 = StringUtils.join((Iterator<?>) listIterator0, "*aKUDx7dwU3mi-y:{"); [EOL]        [EOL]       boolean boolean1 = StringUtils.isWhitespace("*aKUDx7dwU3mi-y:{"); [EOL]       
