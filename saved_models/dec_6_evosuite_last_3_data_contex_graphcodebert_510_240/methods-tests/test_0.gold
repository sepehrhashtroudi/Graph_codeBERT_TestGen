methods/lang3/ArrayUtils.java
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[5]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, (float) (-1), 2116); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[4] = (-1.0); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)28); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       charArray0[0] = 'x'; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, '8', 1); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-3108), 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       intArray0[1] = 1383; [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, 1057); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[2]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0, 528); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, 905L, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Byte byte0 = new Byte((byte)19); [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, (Object) byte0, (int) (byte)19); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       ArrayUtils.reverse(booleanArray0); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       ArrayUtils.reverse(floatArray0); [EOL]       assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[8]; [EOL]       ArrayUtils.reverse(doubleArray0); [EOL]       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       ArrayUtils.reverse(byteArray0); [EOL]       assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       ArrayUtils.reverse(arrayUtils0.EMPTY_CHAR_ARRAY); [EOL]       assertEquals((-1), ArrayUtils.INDEX_NOT_FOUND); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {}, shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       ArrayUtils.reverse(intArray0); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       ArrayUtils.reverse(longArray0); [EOL]       assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-1319), 0); [EOL]       assertArrayEquals(new double[] {}, doubleArray1, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       byte[] byteArray1 = ArrayUtils.subarray(byteArray0, (int) (short)9, 0); [EOL]       assertArrayEquals(new byte[] {}, byteArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       Short[] shortArray0 = new Short[8]; [EOL]       Short short0 = new Short((short)4135); [EOL]       shortArray0[5] = short0; [EOL]       Short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) shortArray0[5], (-1538)); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = ArrayUtils.toString((Object) "", "jn~:%/i("); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-31)); [EOL]       assertFalse(shortArray1.equals((Object)shortArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.removeElement(shortArray0, (short) (-31)); [EOL]       assertFalse(shortArray1.equals((Object)shortArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[1]; [EOL]       Double double0 = new Double(1.0); [EOL]       doubleArray0[0] = double0; [EOL]       Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) double0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[1]; [EOL]       Double double0 = new Double(1.0); [EOL]       doubleArray0[0] = double0; [EOL]       Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) double0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-3936L)); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElement((long[]) null, (-3936L)); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1)); [EOL]       assertArrayEquals(new float[] {}, floatArray0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       float[] floatArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_FLOAT_ARRAY, (float) (-1)); [EOL]       assertArrayEquals(new float[] {}, floatArray0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-14)); [EOL]       assertEquals(0, byteArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       byte[] byteArray0 = ArrayUtils.removeElement(arrayUtils0.EMPTY_BYTE_ARRAY, (byte) (-14)); [EOL]       assertEquals(0, byteArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertEquals(0, booleanArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       boolean[] booleanArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_BOOLEAN_ARRAY, arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertEquals(0, booleanArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[2]; [EOL]       Integer integer0 = new Integer(0); [EOL]       integerArray0[0] = integer0; [EOL]       integerArray0[1] = integer0; [EOL]       int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 9); [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(1, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[2]; [EOL]       Integer integer0 = new Integer(0); [EOL]       integerArray0[0] = integer0; [EOL]       integerArray0[1] = integer0; [EOL]       int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 9); [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(1, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[2]; [EOL]       Integer integer0 = new Integer(0); [EOL]       integerArray0[0] = integer0; [EOL]       integerArray0[1] = integer0; [EOL]       int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 9); [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(1, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[8]; [EOL]       int[] intArray0 = new int[0]; [EOL]       float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0); [EOL]       assertEquals(8, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       float[] floatArray0 = new float[8]; [EOL]       int[] intArray0 = new int[0]; [EOL]       float[] floatArray1 = ArrayUtils.removeAll(floatArray0, intArray0); [EOL]       assertEquals(8, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertEquals(0, floatArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       float[] floatArray0 = ArrayUtils.removeAll(arrayUtils0.EMPTY_FLOAT_ARRAY, arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertEquals(0, floatArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       int[] intArray0 = new int[0]; [EOL]       double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0); [EOL]       assertEquals(6, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       int[] intArray0 = new int[0]; [EOL]       double[] doubleArray1 = ArrayUtils.removeAll(doubleArray0, intArray0); [EOL]       assertEquals(6, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, (int[]) null); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, (int[]) null); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.remove(floatArray0, 2); [EOL]       assertEquals(2, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byte[] byteArray1 = ArrayUtils.remove(byteArray0, 0); [EOL]       assertEquals(1, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       booleanArray0[0] = true; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)106); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       shortArray0[5] = (short) (-1064); [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short) (-1064)); [EOL]       assertEquals(5, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       longArray0[1] = (long) (-1); [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, (long) (short)0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[7]; [EOL]       longArray0[4] = 1L; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, 1L); [EOL]       assertEquals(4, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[6] = 2146263868; [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, 2146263868, 32); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short short0 = (short)19; [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[2] = (float) short0; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, 19.0F, 6); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[3] = (float) (byte) (-72); [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-72)); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 0.0, 0, 0.0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       doubleArray0[1] = (-1.0); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-1.0), 115); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (byte)15, 3257.0); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       charArray0[1] = 'd'; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameType()  throws Throwable  { [EOL]       Boolean boolean0 = Boolean.valueOf("Cannot store "); [EOL]       Long long0 = new Long(1277); [EOL]       boolean boolean1 = ArrayUtils.isSameType(boolean0, long0); [EOL]       assertFalse(boolean1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       Short short0 = new Short((short)823); [EOL]       boolean boolean0 = ArrayUtils.isEquals(short0, short0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, false, 3); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       booleanArray0[0] = true; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       booleanArray0[3] = true; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       shortArray0[0] = (short)4467; [EOL]       int int0 = ArrayUtils.indexOf(shortArray0, (short)4467); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       shortArray0[6] = (short)2447; [EOL]       int int0 = ArrayUtils.indexOf(shortArray0, (short)2447); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[8]; [EOL]       objectArray0[0] = (Object) (byte) (-83); [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[6]); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       MutableInt mutableInt0 = new MutableInt((-940.0F)); [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, (Object) mutableInt0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = (long) (-2065); [EOL]       int int0 = ArrayUtils.indexOf(longArray0, (long) (-2065), (-2065)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       intArray0[4] = (-2248); [EOL]       int int0 = ArrayUtils.indexOf(intArray0, (-2248), (-2248)); [EOL]       assertEquals(4, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       intArray0[5] = (int) 'd'; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 100); [EOL]       assertEquals(5, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       intArray0[0] = 2396; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       floatArray0[1] = 1.7F; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 1.7F); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short)7; [EOL]       floatArray0[1] = (float) (short)7; [EOL]       floatArray0[2] = (float) (short)7; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       doubleArray0[0] = 476.28595689993; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 476.28595689993); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = 117.0; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 0.0); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[0] = '-'; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, '-', (-1)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[2]; [EOL]       byteArray0[0] = (byte) (-118); [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-118)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       byteArray0[2] = (byte)78; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte)78); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.clone(shortArray0); [EOL]       assertFalse(shortArray1.equals((Object)shortArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       double[] doubleArray1 = ArrayUtils.clone(doubleArray0); [EOL]       assertNotSame(doubleArray0, doubleArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       char[] charArray0 = ArrayUtils.clone(arrayUtils0.EMPTY_CHAR_ARRAY); [EOL]       assertEquals(0, charArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY); [EOL]       assertArrayEquals(new short[] {}, shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       short[] shortArray0 = ArrayUtils.addAll(arrayUtils0.EMPTY_SHORT_ARRAY, arrayUtils0.EMPTY_SHORT_ARRAY); [EOL]       assertArrayEquals(new short[] {}, shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[9]; [EOL]       boolean[] booleanArray1 = ArrayUtils.add(booleanArray0, 0, true); [EOL]       assertTrue(Arrays.equals(new boolean[] {true, false, false, false, false, false, false, false, false, false}, booleanArray1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       short[] shortArray1 = ArrayUtils.add(shortArray0, 0, (short)0); [EOL]       assertArrayEquals(new short[] {(short)0}, shortArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       int[] intArray1 = ArrayUtils.add(intArray0, 5, 5); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 5, 0}, intArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       float[] floatArray1 = ArrayUtils.add(floatArray0, 0, (float) 0); [EOL]       assertArrayEquals(new float[] {0.0F}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       char[] charArray1 = ArrayUtils.add(charArray0, 0, 'K'); [EOL]       assertArrayEquals(new char[] {'K', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       byte[] byteArray1 = ArrayUtils.add(byteArray0, (int) (byte)0, (byte)0); [EOL]       assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(intArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(booleanArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       float[] floatArray0 = new float[9]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(floatArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(doubleArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(doubleArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(charArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(shortArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((long[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(objectArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte)106); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       booleanArray0[0] = true; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1001)); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, 1854); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((boolean[]) null, true, 1277); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, 1.0F, 5); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[8]; [EOL]       floatArray0[2] = (-1064.0F); [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, (-1064.0F), 0); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-4105.586979868256), Integer.MAX_VALUE); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((double[]) null, (-376.55114416522), 4, (double) 4); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[2] = 117.0; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 117.0, (-1848)); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte) (-20), 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)70, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte)0, (int) (byte)0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte)31, (int) (byte)31); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, '%', 2868); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[1] = 'v'; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'v', (-5217)); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'J', 2); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)359, 2070); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       shortArray0[6] = (short)2447; [EOL]       int int0 = ArrayUtils.indexOf(shortArray0, (short)2447, (int) (short) (-1)); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[2]; [EOL]       int int0 = ArrayUtils.indexOf(shortArray0, (short)582, 3217); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((int[]) null, (-447), 655); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[3] = 1L; [EOL]       int int0 = ArrayUtils.indexOf(longArray0, 1L, (-1906)); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[7]; [EOL]       int int0 = ArrayUtils.indexOf(longArray0, 0L, (int) (byte)51); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Byte byte0 = new Byte((byte)2); [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) null, (Object) byte0, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(480); [EOL]       int int0 = ArrayUtils.indexOf((Object[]) null, (Object) mutableInt0, 480); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetLength()  throws Throwable  { [EOL]       int int0 = ArrayUtils.getLength((Object) null); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       float[] floatArray0 = new float[9]; [EOL]       float[] floatArray1 = ArrayUtils.clone(floatArray0); [EOL]       assertEquals(9, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       double[] doubleArray1 = ArrayUtils.clone(doubleArray0); [EOL]       assertEquals(3, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.clone((double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.clone((byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.clone(shortArray0); [EOL]       assertEquals(9, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int[] intArray1 = ArrayUtils.clone(intArray0); [EOL]       assertEquals(1, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.clone((int[]) null); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       long[] longArray0 = new long[5]; [EOL]       long[] longArray1 = ArrayUtils.clone(longArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer(309); [EOL]       String string0 = ArrayUtils.toString((Object) integer0, "S7)9;=IRx#}-F`((:"); [EOL]       assertEquals("309", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       int int0 = ArrayUtils.indexOf(charArray0, 'F'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[6]; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte)78); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[8]; [EOL]       int[] intArray1 = ArrayUtils.remove(intArray0, 0); [EOL]       assertEquals(7, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[9]; [EOL]       double[] doubleArray1 = ArrayUtils.remove(doubleArray0, 0); [EOL]       assertEquals(8, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       int int0 = ArrayUtils.indexOf(longArray0, 3384L); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int int0 = ArrayUtils.indexOf(intArray0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[4]; [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, objectArray0[2]); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       int int0 = ArrayUtils.indexOf(arrayUtils0.EMPTY_SHORT_ARRAY, (short) (-3108)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0); [EOL]       assertEquals(0, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0); [EOL]       assertEquals(0, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeElements(booleanArray0, booleanArray0); [EOL]       assertEquals(0, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       double[] doubleArray1 = ArrayUtils.removeElements(doubleArray0, doubleArray0); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'J'; [EOL]       char[] charArray1 = new char[2]; [EOL]       char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1); [EOL]       assertArrayEquals(new char[] {'J'}, charArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'J'; [EOL]       char[] charArray1 = new char[2]; [EOL]       char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1); [EOL]       assertArrayEquals(new char[] {'J'}, charArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'J'; [EOL]       char[] charArray1 = new char[2]; [EOL]       char[] charArray2 = ArrayUtils.removeElements(charArray0, charArray1); [EOL]       assertArrayEquals(new char[] {'J'}, charArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = new char[15]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = new char[15]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       char[] charArray0 = new char[15]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       int[] intArray1 = ArrayUtils.removeElements(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)38); [EOL]       int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0); [EOL]       assertArrayEquals(new int[] {38}, intArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)38); [EOL]       int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0); [EOL]       assertArrayEquals(new int[] {38}, intArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)38); [EOL]       int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0); [EOL]       assertArrayEquals(new int[] {38}, intArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.add(intArray0, (int) (byte)38); [EOL]       int[] intArray2 = ArrayUtils.removeElements(intArray1, intArray0); [EOL]       assertArrayEquals(new int[] {38}, intArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       short[] shortArray1 = new short[7]; [EOL]       short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1); [EOL]       assertEquals(0, shortArray2.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       short[] shortArray1 = new short[7]; [EOL]       short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1); [EOL]       assertEquals(0, shortArray2.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       short[] shortArray1 = new short[7]; [EOL]       short[] shortArray2 = ArrayUtils.removeElements(shortArray0, shortArray1); [EOL]       assertEquals(0, shortArray2.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0); [EOL]       assertEquals(0, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0); [EOL]       assertEquals(0, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       byte[] byteArray1 = ArrayUtils.removeElements(byteArray0, byteArray0); [EOL]       assertEquals(0, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (byte)0); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.removeElement((int[]) null, (int) (byte)0); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 68.92F); [EOL]       assertEquals(3, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.removeElement(floatArray0, 68.92F); [EOL]       assertEquals(3, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[2] = (float) (byte) (-55); [EOL]       float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-55)); [EOL]       assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[2] = (float) (byte) (-55); [EOL]       float[] floatArray1 = ArrayUtils.removeElement(floatArray0, (float) (byte) (-55)); [EOL]       assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       double[] doubleArray1 = ArrayUtils.add(doubleArray0, 0, (double) 0); [EOL]       assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       long[] longArray0 = new long[2]; [EOL]       long[] longArray1 = ArrayUtils.add(longArray0, 1, 0L); [EOL]       assertEquals(3, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[3]; [EOL]       Character character0 = new Character('`'); [EOL]       Character[] characterArray1 = ArrayUtils.add(characterArray0, character0); [EOL]       assertEquals(4, characterArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0); [EOL]       assertEquals(10, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       double[] doubleArray1 = ArrayUtils.addAll(doubleArray0, doubleArray0); [EOL]       assertEquals(10, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0); [EOL]       assertEquals(6, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       float[] floatArray1 = ArrayUtils.addAll(floatArray0, floatArray0); [EOL]       assertEquals(6, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0); [EOL]       assertEquals(18, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.addAll(longArray0, longArray0); [EOL]       assertEquals(18, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0); [EOL]       assertEquals(10, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0); [EOL]       assertEquals(10, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0); [EOL]       assertEquals(6, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       short[] shortArray0 = new short[3]; [EOL]       short[] shortArray1 = ArrayUtils.addAll(shortArray0, shortArray0); [EOL]       assertEquals(6, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0); [EOL]       assertEquals(8, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       byte[] byteArray1 = ArrayUtils.addAll(byteArray0, byteArray0); [EOL]       assertEquals(8, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0); [EOL]       assertEquals(8, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       char[] charArray1 = ArrayUtils.addAll(charArray0, charArray0); [EOL]       assertEquals(8, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0); [EOL]       assertEquals(10, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       boolean[] booleanArray1 = ArrayUtils.addAll(booleanArray0, booleanArray0); [EOL]       assertEquals(10, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       String[] stringArray0 = new String[4]; [EOL]       String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0); [EOL]       assertEquals(8, stringArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       String[] stringArray0 = new String[4]; [EOL]       String[] stringArray1 = ArrayUtils.addAll(stringArray0, stringArray0); [EOL]       assertEquals(8, stringArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(booleanArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((boolean[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       float[] floatArray0 = new float[5]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(floatArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[1]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(doubleArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((double[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(byteArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int[] intArray0 = new int[0]; [EOL]       byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0); [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int[] intArray0 = new int[0]; [EOL]       byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0); [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int[] intArray0 = new int[0]; [EOL]       byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0); [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(byteArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((byte[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(charArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(charArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((char[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((short[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(longArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(longArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((long[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       Short[] shortArray0 = new Short[2]; [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty(shortArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(byteArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertArrayEquals(new char[] {}, charArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertArrayEquals(new char[] {}, charArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       char[] charArray1 = ArrayUtils.removeElements(charArray0, charArray0); [EOL]       assertArrayEquals(new char[] {}, charArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElements((char[]) null, (char[]) null); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[0]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(shortArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.removeElements(shortArray0, shortArray0); [EOL]       assertEquals(0, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(intArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       boolean boolean0 = ArrayUtils.isEmpty(arrayUtils0.EMPTY_INT_ARRAY); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(longArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       boolean boolean0 = ArrayUtils.isEmpty(longArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       booleanArray0[0] = true; [EOL]       Boolean[] booleanArray1 = ArrayUtils.toObject(booleanArray0); [EOL]       assertEquals(3, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = ArrayUtils.toObject((boolean[]) null); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0, true); [EOL]       assertEquals(0, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[2]; [EOL]       Boolean boolean0 = Boolean.valueOf("Array element "); [EOL]       booleanArray0[0] = boolean0; [EOL]       booleanArray0[1] = boolean0; [EOL]       boolean[] booleanArray1 = ArrayUtils.toPrimitive(booleanArray0); [EOL]       assertEquals(2, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.toPrimitive((Boolean[]) null); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Float[] floatArray0 = ArrayUtils.toObject((float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[0]; [EOL]       float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0, (float) (byte) (-60)); [EOL]       assertArrayEquals(new float[] {}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null, (float) (-2950L)); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[9]; [EOL]       Float float0 = new Float(1.5); [EOL]       floatArray0[0] = float0; [EOL]       floatArray0[1] = float0; [EOL]       floatArray0[2] = floatArray0[0]; [EOL]       floatArray0[3] = floatArray0[1]; [EOL]       floatArray0[4] = floatArray0[2]; [EOL]       floatArray0[5] = floatArray0[3]; [EOL]       floatArray0[6] = floatArray0[0]; [EOL]       floatArray0[7] = floatArray0[1]; [EOL]       floatArray0[8] = floatArray0[1]; [EOL]       float[] floatArray1 = ArrayUtils.toPrimitive(floatArray0); [EOL]       assertArrayEquals(new float[] {1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F, 1.5F}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.toPrimitive((Float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[6]; [EOL]       Double double0 = new Double((-523.127847288)); [EOL]       doubleArray0[0] = double0; [EOL]       doubleArray0[1] = doubleArray0[0]; [EOL]       doubleArray0[2] = doubleArray0[1]; [EOL]       doubleArray0[3] = double0; [EOL]       doubleArray0[4] = doubleArray0[2]; [EOL]       doubleArray0[5] = doubleArray0[2]; [EOL]       double[] doubleArray1 = ArrayUtils.toPrimitive(doubleArray0); [EOL]       assertArrayEquals(new double[] {(-523.127847288), (-523.127847288), (-523.127847288), (-523.127847288), (-523.127847288), (-523.127847288)}, doubleArray1, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.toPrimitive((Double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       Byte[] byteArray1 = ArrayUtils.toObject(byteArray0); [EOL]       assertEquals(5, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       Byte[] byteArray0 = ArrayUtils.toObject((byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       Byte[] byteArray1 = ArrayUtils.toObject(byteArray0); [EOL]       assertEquals(0, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[4]; [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       byteArray0[0] = byte0; [EOL]       byteArray0[1] = byteArray0[0]; [EOL]       byteArray0[2] = byteArray0[1]; [EOL]       byteArray0[3] = byteArray0[0]; [EOL]       byte[] byteArray1 = ArrayUtils.toPrimitive(byteArray0); [EOL]       assertEquals(4, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       short[] shortArray0 = new short[2]; [EOL]       Short[] shortArray1 = new Short[4]; [EOL]       shortArray1[0] = (Short) (short)0; [EOL]       short[] shortArray2 = ArrayUtils.toPrimitive(shortArray1, shortArray0[0]); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0}, shortArray2); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.toPrimitive((Short[]) null, (short)7); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       Integer[] integerArray0 = ArrayUtils.toObject(intArray0); [EOL]       assertEquals(0, integerArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[2]; [EOL]       Integer integer0 = new Integer(0); [EOL]       integerArray0[0] = integer0; [EOL]       int[] intArray0 = ArrayUtils.toPrimitive(integerArray0, 9); [EOL]       assertArrayEquals(new int[] {0, 9}, intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null, 2139674616); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       int[] intArray0 = ArrayUtils.toPrimitive(arrayUtils0.EMPTY_INTEGER_OBJECT_ARRAY, (-1)); [EOL]       assertEquals(0, intArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Integer integer0 = new Integer(64); [EOL]       Integer[] integerArray0 = new Integer[2]; [EOL]       integerArray0[0] = integer0; [EOL]       integerArray0[1] = integer0; [EOL]       int[] intArray0 = ArrayUtils.toPrimitive(integerArray0); [EOL]       assertArrayEquals(new int[] {64, 64}, intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.toPrimitive((Integer[]) null); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Long[] longArray0 = new Long[0]; [EOL]       long[] longArray1 = ArrayUtils.toPrimitive(longArray0, 248L); [EOL]       assertArrayEquals(new long[] {}, longArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.toPrimitive((Long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[3]; [EOL]       Character character0 = new Character('T'); [EOL]       characterArray0[0] = character0; [EOL]       characterArray0[1] = character0; [EOL]       characterArray0[2] = characterArray0[0]; [EOL]       char[] charArray0 = ArrayUtils.toPrimitive(characterArray0); [EOL]       assertArrayEquals(new char[] {'T', 'T', 'T'}, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.toPrimitive((Character[]) null); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean boolean0 = ArrayUtils.contains(booleanArray0, true); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, false, 3); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, true, (-1962)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((boolean[]) null, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true, (-1001)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       float[] floatArray0 = new float[5]; [EOL]       boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       floatArray0[0] = (float) (short)19; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, 19.0F, 6); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) 0L, (-320)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, (-1278.1539F), (int) (short) (-2383)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[3]; [EOL]       int int0 = ArrayUtils.indexOf(floatArray0, 0.0F); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[9]; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 0.0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[8]; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, (-533.9839)); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 3694.44890757516, 0.0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) 0L, 119, (double) 3383L); [EOL]       assertEquals(4, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-846.331372001425), (-2053), (-1386.0)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-376.55114416522), 0, 0.0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       doubleArray0[0] = (-3946.106913278942); [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (-3946.106913278942), 1); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, (double) (-1001)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(doubleArray0, 553.54422565, (-1001)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[8]; [EOL]       boolean boolean0 = ArrayUtils.contains(doubleArray0, 1.5, 363.190709); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       doubleArray0[3] = 1037.459205956365; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, (-1.0), (-1), (-376.55114416522)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 1.0, 299, 85.0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, 117.0, (-1848)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[0]; [EOL]       int int0 = ArrayUtils.indexOf(doubleArray0, (-1202.638807046)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[5]; [EOL]       int int0 = ArrayUtils.lastIndexOf(byteArray0, (byte)0, (int) (byte)0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((byte[]) null, (byte)2, Integer.MAX_VALUE); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       int int0 = ArrayUtils.indexOf(byteArray0, (byte) (-1), (int) (byte) (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       char[] charArray0 = new char[2]; [EOL]       charArray0[0] = 'Y'; [EOL]       boolean boolean0 = ArrayUtils.contains(charArray0, 'Y'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       boolean boolean0 = ArrayUtils.contains(charArray0, 'T'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       charArray0[0] = 'i'; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'i'); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'c', 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, '\u0000', (-30)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((char[]) null, '_', 6); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       short[] shortArray0 = new short[4]; [EOL]       boolean boolean0 = ArrayUtils.contains(shortArray0, (short)978); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[6]; [EOL]       shortArray0[0] = (short)1898; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1898); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       boolean boolean0 = ArrayUtils.contains(intArray0, 0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, 4, 37); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.contains((int[]) null, 119); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       long[] longArray0 = new long[3]; [EOL]       longArray0[2] = (-1276L); [EOL]       boolean boolean0 = ArrayUtils.contains(longArray0, (-1276L)); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.contains((long[]) null, 0L); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[1]; [EOL]       longArray0[0] = (-2122L); [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, (-2122L), 4470); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, 37L, (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((long[]) null, (-1129L), 4); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((long[]) null, (-1L), 49); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       String[] stringArray0 = new String[9]; [EOL]       boolean boolean0 = ArrayUtils.contains((Object[]) stringArray0, (Object) byteArray0[3]); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Long[] longArray0 = new Long[9]; [EOL]       double[] doubleArray0 = new double[5]; [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) longArray0, (Object) doubleArray0[3], Integer.MAX_VALUE); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[3]; [EOL]       Character character0 = new Character('`'); [EOL]       characterArray0[0] = character0; [EOL]       characterArray0[1] = character0; [EOL]       characterArray0[2] = character0; [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) characterArray0, (Object) null); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       objectArray0[2] = (Object) (short)2447; [EOL]       int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]); [EOL]       assertEquals(2, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[3]; [EOL]       int int0 = ArrayUtils.lastIndexOf((Object[]) integerArray0, (Object) integerArray0[2], (-509)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       int int0 = ArrayUtils.lastIndexOf(objectArray0, objectArray0[2]); [EOL]       assertEquals(6, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[13]; [EOL]       Float float0 = new Float(0.0); [EOL]       floatArray0[0] = float0; [EOL]       Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[13]; [EOL]       Float float0 = new Float(0.0); [EOL]       floatArray0[0] = float0; [EOL]       Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[13]; [EOL]       Float float0 = new Float(0.0); [EOL]       floatArray0[0] = float0; [EOL]       Float[] floatArray1 = ArrayUtils.removeElements(floatArray0, floatArray0); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Float float0 = new Float((double) 4470); [EOL]       int int0 = ArrayUtils.indexOf(objectArray0, (Object) float0, (-908)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[5]; [EOL]       ArrayUtils.reverse(booleanArray0); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       float[] floatArray0 = new float[6]; [EOL]       ArrayUtils.reverse(floatArray0); [EOL]       assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       ArrayUtils.reverse(doubleArray0); [EOL]       assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       ArrayUtils.reverse(byteArray0); [EOL]       assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       ArrayUtils.reverse(charArray0); [EOL]       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       short[] shortArray0 = new short[5]; [EOL]       ArrayUtils.reverse(shortArray0); [EOL]       assertArrayEquals(new short[] {(short)0, (short)0, (short)0, (short)0, (short)0}, shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       int[] intArray0 = new int[9]; [EOL]       ArrayUtils.reverse(intArray0); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       ArrayUtils.reverse(longArray0); [EOL]       assertEquals(9, longArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameType()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((int) (short)4); [EOL]       boolean boolean0 = ArrayUtils.isSameType(mutableInt0, mutableInt0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[7]; [EOL]       boolean[] booleanArray1 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       float[] floatArray0 = new float[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(floatArray0, (float[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(floatArray0, floatArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[5]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength((double[]) null, doubleArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isSameLength((double[]) null, (double[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[7]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(doubleArray0, doubleArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(byteArray0, byteArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isSameLength((char[]) null, (char[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(charArray0, charArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       short[] shortArray0 = new short[7]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(shortArray0, shortArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       int[] intArray0 = new int[2]; [EOL]       int[] intArray1 = new int[6]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isSameLength((int[]) null, (int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       int[] intArray0 = new int[2]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(intArray0, intArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       long[] longArray0 = new long[8]; [EOL]       long[] longArray1 = new long[7]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       long[] longArray0 = new long[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(longArray0, longArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       Object[] objectArray1 = new Object[9]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[2]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(objectArray0, objectArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.subarray((boolean[]) null, (int) (byte)5, (int) (byte)51); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       float[] floatArray1 = ArrayUtils.subarray(floatArray0, (-2493), 1); [EOL]       assertEquals(0, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[2]; [EOL]       double[] doubleArray1 = ArrayUtils.subarray(doubleArray0, (-2065), (-2065)); [EOL]       assertEquals(0, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.subarray((double[]) null, (int) (byte)0, (int) (byte)7); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       char[] charArray1 = ArrayUtils.subarray(charArray0, 4470, 4470); [EOL]       assertEquals(0, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.subarray((char[]) null, (-59), (-59)); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       short[] shortArray0 = new short[9]; [EOL]       short[] shortArray1 = ArrayUtils.subarray(shortArray0, (int) (short)2070, (-1)); [EOL]       assertFalse(shortArray1.equals((Object)shortArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2332, 2332); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       Double[] doubleArray0 = ArrayUtils.subarray((Double[]) null, 0, (-871)); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[0]; [EOL]       Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0); [EOL]       assertNotSame(booleanArray1, booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[5]; [EOL]       Boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0); [EOL]       assertEquals(5, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Float[] floatArray0 = new Float[2]; [EOL]       Float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0); [EOL]       assertEquals(2, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Float[] floatArray0 = ArrayUtils.nullToEmpty((Float[]) null); [EOL]       assertEquals(0, floatArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[1]; [EOL]       Double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0); [EOL]       assertEquals(1, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Byte[] byteArray0 = new Byte[0]; [EOL]       Byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0); [EOL]       assertNotSame(byteArray1, byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Character[] characterArray0 = new Character[1]; [EOL]       Character[] characterArray1 = ArrayUtils.nullToEmpty(characterArray0); [EOL]       assertEquals(1, characterArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Short[] shortArray0 = new Short[3]; [EOL]       Short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0); [EOL]       assertEquals(3, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Short[] shortArray0 = ArrayUtils.nullToEmpty((Short[]) null); [EOL]       assertEquals(0, shortArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Integer[] integerArray0 = new Integer[5]; [EOL]       Integer[] integerArray1 = ArrayUtils.nullToEmpty(integerArray0); [EOL]       assertEquals(5, integerArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Long[] longArray0 = new Long[0]; [EOL]       Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0); [EOL]       assertNotSame(longArray1, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Long[] longArray0 = new Long[9]; [EOL]       Long[] longArray1 = ArrayUtils.nullToEmpty(longArray0); [EOL]       assertEquals(9, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0); [EOL]       assertNotSame(booleanArray1, booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[6]; [EOL]       boolean[] booleanArray1 = ArrayUtils.nullToEmpty(booleanArray0); [EOL]       assertEquals(6, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0); [EOL]       assertNotSame(floatArray1, floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       float[] floatArray0 = new float[7]; [EOL]       float[] floatArray1 = ArrayUtils.nullToEmpty(floatArray0); [EOL]       assertEquals(7, floatArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[2]; [EOL]       double[] doubleArray1 = ArrayUtils.nullToEmpty(doubleArray0); [EOL]       assertEquals(2, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.nullToEmpty((double[]) null); [EOL]       assertEquals(0, doubleArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[3]; [EOL]       byte[] byteArray1 = ArrayUtils.nullToEmpty(byteArray0); [EOL]       assertEquals(3, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.nullToEmpty((byte[]) null); [EOL]       assertEquals(0, byteArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       char[] charArray0 = new char[8]; [EOL]       char[] charArray1 = ArrayUtils.nullToEmpty(charArray0); [EOL]       assertEquals(8, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.nullToEmpty((char[]) null); [EOL]       assertEquals(0, charArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = new short[1]; [EOL]       short[] shortArray1 = ArrayUtils.nullToEmpty(shortArray0); [EOL]       assertEquals(1, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.nullToEmpty((short[]) null); [EOL]       assertEquals(0, shortArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.subarray(intArray0, 1482, 1985); [EOL]       int[] intArray2 = ArrayUtils.nullToEmpty(intArray1); [EOL]       assertFalse(intArray2.equals((Object)intArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.subarray(intArray0, 1482, 1985); [EOL]       int[] intArray2 = ArrayUtils.nullToEmpty(intArray1); [EOL]       assertFalse(intArray2.equals((Object)intArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       int[] intArray0 = new int[1]; [EOL]       int[] intArray1 = ArrayUtils.nullToEmpty(intArray0); [EOL]       assertEquals(1, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       long[] longArray0 = new long[5]; [EOL]       long[] longArray1 = ArrayUtils.nullToEmpty(longArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.nullToEmpty((long[]) null); [EOL]       assertArrayEquals(new long[] {}, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       String[] stringArray0 = new String[7]; [EOL]       String[] stringArray1 = ArrayUtils.nullToEmpty(stringArray0); [EOL]       assertEquals(7, stringArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[9]; [EOL]       Object[] objectArray1 = ArrayUtils.nullToEmpty(objectArray0); [EOL]       assertEquals(9, objectArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Integer[] integerArray0 = ArrayUtils.nullToEmpty((Integer[]) null); [EOL]       Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) integerArray0); [EOL]       assertEquals(0, objectArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       Object[] objectArray0 = ArrayUtils.nullToEmpty((Object[]) null); [EOL]       assertEquals(0, objectArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.removeElement((boolean[]) null, true); [EOL]       assertNull(booleanArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       float[] floatArray0 = ArrayUtils.removeElements((float[]) null, (float[]) null); [EOL]       assertNull(floatArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.removeElements((double[]) null, (double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       char[] charArray0 = new char[6]; [EOL]       char[] charArray1 = ArrayUtils.clone(charArray0); [EOL]       assertEquals(6, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-3810)); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.removeElement((short[]) null, (short) (-3810)); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       int[] intArray0 = ArrayUtils.addAll((int[]) null, (int[]) null); [EOL]       assertNull(intArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = ArrayUtils.removeElements((long[]) null, (long[]) null); [EOL]       assertNull(longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Long long0 = Long.getLong(" in an array of ", 1118L); [EOL]       Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) long0); [EOL]       assertNull(integerArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Long long0 = Long.getLong(" in an array of ", 1118L); [EOL]       Integer[] integerArray0 = ArrayUtils.removeElement((Integer[]) null, (Object) long0); [EOL]       assertNull(integerArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       String[] stringArray0 = new String[4]; [EOL]       String[] stringArray1 = ArrayUtils.clone(stringArray0); [EOL]       assertNotSame(stringArray0, stringArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoMap()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0); [EOL]       assertTrue(map0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0); [EOL]       assertTrue(map0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoMap()  throws Throwable  { [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap((Object[]) null); [EOL]       assertNull(map0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[6]; [EOL]       int[] intArray0 = new int[9]; [EOL]       long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       long[] longArray0 = new long[6]; [EOL]       int[] intArray0 = new int[9]; [EOL]       long[] longArray1 = ArrayUtils.removeAll(longArray0, intArray0); [EOL]       assertEquals(5, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[3]; [EOL]       int[] intArray1 = ArrayUtils.removeElement(intArray0, 0); [EOL]       assertEquals(2, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       int[] intArray0 = new int[3]; [EOL]       int[] intArray1 = ArrayUtils.removeElement(intArray0, 0); [EOL]       assertEquals(2, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((double[]) null, (double) 63.0F); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoArray()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       Object[] objectArray1 = ArrayUtils.toArray(objectArray0); [EOL]       assertEquals(1, objectArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       long[] longArray1 = ArrayUtils.add(longArray0, (-5019L)); [EOL]       assertArrayEquals(new long[] {0L, 0L, 0L, 0L, (-5019L)}, longArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = ArrayUtils.add(byteArray0, (byte)91); [EOL]       assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)91}, byteArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       short[] shortArray0 = new short[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(shortArray0, (short)1898); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       long[] longArray1 = ArrayUtils.removeElement(longArray0, (-940L)); [EOL]       assertNotSame(longArray0, longArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       long[] longArray0 = new long[0]; [EOL]       long[] longArray1 = ArrayUtils.removeElement(longArray0, (-940L)); [EOL]       assertNotSame(longArray0, longArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       ArrayUtils arrayUtils0 = new ArrayUtils(); [EOL]       double[] doubleArray0 = ArrayUtils.nullToEmpty(arrayUtils0.EMPTY_DOUBLE_ARRAY); [EOL]       assertArrayEquals(new double[] {}, doubleArray0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[9]; [EOL]       int[] intArray0 = new int[3]; [EOL]       Boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0); [EOL]       assertEquals(8, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       Boolean[] booleanArray0 = new Boolean[9]; [EOL]       int[] intArray0 = new int[3]; [EOL]       Boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0); [EOL]       assertEquals(8, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       float[] floatArray0 = new float[0]; [EOL]       boolean boolean0 = ArrayUtils.contains(floatArray0, 0.0F); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean boolean0 = ArrayUtils.contains(booleanArray0, false); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'i'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.indexOf((double[]) null, (-1857.47193494), (-1857.47193494)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0); [EOL]       assertEquals(4, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       short[] shortArray0 = new short[4]; [EOL]       short[] shortArray1 = ArrayUtils.removeAll(shortArray0, intArray0); [EOL]       assertEquals(4, shortArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       double[] doubleArray0 = new double[3]; [EOL]       double[] doubleArray1 = ArrayUtils.add(doubleArray0, (-782.0)); [EOL]       assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-782.0)}, doubleArray1, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEquals((short) (-2189), (-4444.465F)); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int[] intArray0 = new int[9]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0); [EOL]       assertEquals(1, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int[] intArray0 = new int[9]; [EOL]       boolean[] booleanArray1 = ArrayUtils.removeAll(booleanArray0, intArray0); [EOL]       assertEquals(1, booleanArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       int int0 = ArrayUtils.lastIndexOf(booleanArray0, false); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElement((char[]) null, '|'); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       char[] charArray0 = ArrayUtils.removeElement((char[]) null, '|'); [EOL]       assertNull(charArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Integer integer0 = new Integer(6); [EOL]       String string0 = ArrayUtils.toString((Object) integer0); [EOL]       assertEquals("6", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       int[] intArray0 = new int[7]; [EOL]       byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0); [EOL]       assertEquals(3, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       int[] intArray0 = new int[7]; [EOL]       byte[] byteArray1 = ArrayUtils.removeAll(byteArray0, intArray0); [EOL]       assertEquals(3, byteArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       long[] longArray0 = new long[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(longArray0, (-3574L)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       float[] floatArray0 = new float[6]; [EOL]       int int0 = ArrayUtils.lastIndexOf(floatArray0, (float) (byte) (-72)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int int0 = ArrayUtils.lastIndexOf((double[]) null, 1.0, 1167.84); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[4]; [EOL]       Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]); [EOL]       assertEquals(3, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       Double[] doubleArray0 = new Double[4]; [EOL]       Double[] doubleArray1 = ArrayUtils.removeElement(doubleArray0, (Object) doubleArray0[0]); [EOL]       assertEquals(3, doubleArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       int[] intArray0 = new int[8]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0); [EOL]       assertEquals(4, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       int[] intArray0 = new int[8]; [EOL]       char[] charArray1 = ArrayUtils.removeAll(charArray0, intArray0); [EOL]       assertEquals(4, charArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       char[] charArray0 = new char[5]; [EOL]       char[] charArray1 = ArrayUtils.add(charArray0, '/'); [EOL]       assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '/'}, charArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       float[] floatArray0 = new float[2]; [EOL]       float[] floatArray1 = ArrayUtils.add(floatArray0, 2351.936F); [EOL]       assertArrayEquals(new float[] {0.0F, 0.0F, 2351.936F}, floatArray1, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       int[] intArray0 = new int[4]; [EOL]       int int0 = ArrayUtils.lastIndexOf(intArray0, 0); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]
