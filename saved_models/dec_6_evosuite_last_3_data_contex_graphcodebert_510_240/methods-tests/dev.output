@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]       assertEquals((-0.5F), float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetImplicitUpperBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[0]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getUpperBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0); [EOL]       assertEquals(1, typeArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       String string0 = CharSetUtils.squeeze(stringArray0[0], stringArray0); [EOL]       String string1 = CharSetUtils.keep(string0, stringArray0); [EOL]       assertNull(string1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeInstance()  throws Throwable  { [EOL]       Locale locale0 = Locale.forLanguageTag("Z"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, locale0); [EOL]       Object object0 = fastDateFormat0.clone(); [EOL]       boolean boolean0 = fastDateFormat0.equals(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       float float0 = mutableFloat0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("0/1"); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('c'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       NumericEntityEscaper numericEntityEscaper0 = NumericEntityEscaper.between((-109), (-109)); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = numericEntityEscaper0.translate(Integer.MAX_VALUE, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPeriodISO()  throws Throwable  { [EOL]       DurationFormatUtils.formatDurationHMS(3809L); [EOL]       String string0 = DurationFormatUtils.formatDurationWords(2362L, false, false); [EOL]       DurationFormatUtils.formatPeriodISO(2362L, 2362L); [EOL]       DurationFormatUtils.Token[] durationFormatUtils_TokenArray0 = new DurationFormatUtils.Token[4]; [EOL]       ThaiBuddhistDate thaiBuddhistDate0 = MockThaiBuddhistDate.now(); [EOL]       DurationFormatUtils.Token durationFormatUtils_Token0 = new DurationFormatUtils.Token(thaiBuddhistDate0, 920); [EOL]       durationFormatUtils_TokenArray
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]       assertEquals((-0.5F), float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclear()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.clearShort((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testcontainsRange()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isDefaultFullDetail(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreateIfAbsent()  throws Throwable  { [EOL]       MockError mockError0 = new MockError(); [EOL]       ConcurrentUtils.putIfAbsent((ConcurrentMap<Error, Error>) null, (Error) mockError0, (Error) mockError0); [EOL]       MockRuntimeException mockRuntimeException0 = new MockRuntimeException(); [EOL]       Callable<Error> callable0 = (Callable<Error>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       CallableBackgroundInitializer<Error> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Error>(callable0, (ExecutorService) null); [EOL]       Error error0 = ConcurrentUtils.createIfAbsentUnchecked((ConcurrentMap<RuntimeException, Error>) null, (RuntimeException
@Test(timeout = 4000) [EOL]   public void testprintRootCauseStackTrace()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("tzS-G?4K8JT3"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("tzS-G?4K8JT3", mockThrowable0); [EOL]       ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable1); [EOL]       assertEquals("tzS-G?4K8JT3", mockThrowable1.getMessage()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       String string0 = StringUtils.capitalize(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       HashCodeBuilder.register(linkedList0); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedList0, true); [EOL]       assertEquals(17, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0, toStringStyle0); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       mutableBoolean0.setValue(true); [EOL]       mutableBoolean0.hashCode(); [EOL]       assertTrue(mutableBoolean0.booleanValue()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0, toStringStyle0); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetVariableSuffix()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix(""); [EOL]       assertEquals('$', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(","); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("|(ADDNMDo;OhmaJ", parsePosition0); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetUserDir()  throws Throwable  { [EOL]       File file0 = SystemUtils.getUserHome(); [EOL]       assertFalse(file0.isHidden()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(0L); [EOL]       stopWatch0.suspend(); [EOL]       String string0 = stopWatch0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toObject((byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       String string0 = mutableShort0.toString(); [EOL]       assertEquals("1", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisSupported()  throws Throwable  { [EOL]       boolean boolean0 = CharEncoding.isSupported((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1), (-1)); [EOL]       boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testsubarray()  throws Throwable  { [EOL]       short[] shortArray0 = ArrayUtils.subarray((short[]) null, 2332, 2332); [EOL]       assertNull(shortArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeJson(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)0); [EOL]       double double0 = mutableShort0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       Locale locale0 = Locale.KOREA; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", locale0); [EOL]       String string0 = fastDateFormat0.toString(); [EOL]       assertEquals("FastDateFormat[],ko_KR,GMT]", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.UTC; [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       Locale locale0 = Locale.PRC; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0); [EOL]       String string0 = DateFormatUtils.format((Calendar) mockGregorianCalendar0, "$", timeZone0, locale0); [EOL]       assertEquals("$", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigit(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.setShort((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToInt()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       int int0 = Conversion.binaryToInt(booleanArray0, (-1), (-1), 1); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt((String) null, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       String string0 = basicThreadFactory0.getNamingPattern(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testshortToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[0]; [EOL]       boolean[] booleanArray1 = Conversion.shortToBinary((short)0, booleanArray0, booleanArray0, 1, 1); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray1)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.setShort((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("3X0f", '3'); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       Float float0 = new Float((-1.0)); [EOL]       mutableByte0.setValue((Number) float0); [EOL]       int int0 = mutableByte0.intValue(); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       Comparator<String> comparator1 = range0.getComparator(); [EOL]       Range<
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       strBuilder0.build(); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'W'; [EOL]       charArray0[1] = '#'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = 'S'; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]   
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]   
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       int int0 = mutableDouble0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetImplicitUpperBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[0]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getUpperBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitUpperBounds(wildcardType0); [EOL]       assertEquals(1, typeArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunicodeEscaped()  throws Throwable  { [EOL]       String string0 = CharUtils.unicodeEscaped((Character) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testbooleanValue()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       mutableBoolean0.setValue(true); [EOL]       mutableBoolean0.hashCode(); [EOL]       assertTrue(mutableBoolean0.booleanValue()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(); [EOL]       String string0 = fastDateFormat0.format((long) 1); [EOL]       assertEquals("1/1/70 12:00 AM", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       int int0 = ObjectUtils.compare((String) null, (String) null); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmultiplyBy()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ZERO; [EOL]       Fraction fraction1 = fraction0.multiplyBy(fraction0); [EOL]       assertEquals(0, fraction1.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleConstructor()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0); [EOL]       Constructor<Integer> constructor0 = ConstructorUtils.getMatchingAccessibleConstructor(class0, (Class<?>[]) classArray0); [EOL]       assertNull(constructor0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnamingPattern()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       basicThreadFactory_Builder0.namingPattern("1~Xo7N-eu"); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       String string0 = basicThreadFactory0.getNamingPattern(); [EOL]       assertEquals("1~Xo7N-eu", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       int int0 = CharSequenceUtils.indexOf(charBuffer0, charBuffer0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPattern()  throws Throwable  { [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("", hashMap0); [EOL]       String string0 = extendedMessageFormat0.toPattern(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('b'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testreflectionCompare()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       Object object0 = new Object(); [EOL]       int int0 = CompareToBuilder.reflectionCompare(object0, (Object) compareToBuilder0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetSeconds()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Date date0 = DateUtils.setSeconds(mockDate0, 9); [EOL]       Calendar calendar0 = DateUtils.toCalendar(date0); [EOL]       long long0 = DateUtils.getFragmentInMilliseconds(calendar0, 6); [EOL]       assertEquals(9000L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testmode()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.mode(objectArray0); [EOL]       Object object1 = ObjectUtils.clone(object0); [EOL]       assertNull(object1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdelete()  throws Throwable  { [EOL]       String[] stringArray0 = new String[7]; [EOL]       String string0 = CharSetUtils.delete("V jZ<??HEe=2Rc", stringArray0); [EOL]       assertEquals("V jZ<??HEe=2Rc", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeInstance()  throws Throwable  { [EOL]       Locale locale0 = Locale.forLanguageTag("Z"); [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getTimeInstance(3, locale0); [EOL]       Object object0 = fastDateFormat0.clone(); [EOL]       boolean boolean0 = fastDateFormat0.equals(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetVariableSuffix()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariableSuffix(""); [EOL]       assertEquals('$', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRootCauseStackTrace()  throws Throwable  { [EOL]       String[] stringArray0 = ExceptionUtils.getRootCauseStackTrace((Throwable) null); [EOL]       assertEquals(0, stringArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0, 1920, 1920); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnoNullElements()  throws Throwable  { [EOL]       SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray0 = new SQLNonTransientConnectionException[0]; [EOL]       SQLNonTransientConnectionException[] sQLNonTransientConnectionExceptionArray1 = Validate.noNullElements(sQLNonTransientConnectionExceptionArray0); [EOL]       assertEquals(0, sQLNonTransientConnectionExceptionArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) null, class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       String string0 = RandomStringUtils.randomAscii(4200); [EOL]       assertNotNull(string0); [EOL]        [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(4200, true, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0L, 0L); [EOL]       Object object0 = new Object(); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "', is neither of type Map.Entry nor an Array"; [EOL]       Object object1 = new Object(); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       linkedHashSet0.add("rGTPJTlv
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 10); [EOL]       Date date1 = DateUtils.setYears(date0, 14); [EOL]       assertEquals("Wed Dec 31 00:00:00 GMT 2", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String[]) null); [EOL]       assertNull(charSet0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testsplit()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       String string0 = stopWatch0.toSplitString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetCause()  throws Throwable  { [EOL]       Throwable throwable0 = ExceptionUtils.getCause((Throwable) null); [EOL]       assertNull(throwable0); [EOL]   } [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHexDigit()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigit(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetCharSetMatcher()  throws Throwable  { [EOL]       StrMatcher.StringMatcher strMatcher_StringMatcher0 = new StrMatcher.StringMatcher("Invalid length: "); [EOL]       StrTokenizer strTokenizer0 = new StrTokenizer("Invalid length: ", strMatcher_StringMatcher0); [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset((String) null); [EOL]       assertNull(strTokenizer1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSupported()  throws Throwable  { [EOL]       boolean boolean0 = CharEncoding.isSupported((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPackageName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageName((Object) null, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       float float0 = NumberUtils.toFloat((String) null, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       int int0 = bitField0.getRawValue(0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 10); [EOL]       Date date1 = DateUtils.setYears(date0, 14); [EOL]       assertEquals("Wed Dec 31 00:00:00 GMT 2", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprocessBitVector()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       long[] longArray0 = new long[8]; [EOL]       longArray0[7] = (-888L); [EOL]       EnumSet<JavaVersion> enumSet0 = EnumUtils.processBitVectors(class0, longArray0); [EOL]       assertEquals(2, enumSet0.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST_SHORT()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST_SHORT((-32768)); [EOL]       assertEquals((short) (-32768), short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       long long0 = mutableShort0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>(); [EOL]       Integer integer0 = new Integer(210); [EOL]       ImmutableTriple<Object, Object, Object> immutableTriple0 = ImmutableTriple.of((Object) mutableTriple0, (Object) mutableTriple0, (Object) integer0); [EOL]       ImmutableTriple<Triple<Triple<Object, Object, Object>, ImmutableTriple<Object, Object, Object>> immutableTriple1 = ImmutableTriple.of(mutableTriple0, (Object) mutableTriple0); [EOL]       boolean boolean0 = mutableTriple0.equals(mutableTriple0); [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       boolean boolean0 = mutableFloat0.equals(mutableFloat0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals(">", standardToStringStyle0.getSummaryObjectEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("3X0f", '3'); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       char[] charArray0 = new char[9]; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[8]; [EOL]       CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0, 0, 0); [EOL]       charSequenceArray0[0] = (CharSequence) charBuffer1; [EOL]       CharSequence[] charSequenceArray1 = new CharSequence[3]; [EOL]       charSequenceArray1[0] = (CharSequence) charBuffer0; [EOL]       charSequenceArray1[1] = (CharSequence)
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetAccessibleConstructor()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 0); [EOL]       Constructor<Object> constructor0 = ConstructorUtils.getAccessibleConstructor(class0, (Class<?>[]) classArray0); [EOL]       assertNull(constructor0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphanumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testdefaultIfNull()  throws Throwable  { [EOL]       PageAttributes pageAttributes0 = ObjectUtils.defaultIfNull((PageAttributes) null, (PageAttributes) null); [EOL]       assertNull(pageAttributes0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       ArrayUtils.reverse(longArray0); [EOL]       assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("0/1"); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       int int0 = ObjectUtils.compare((String) null, (String) null); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInt()  throws Throwable  { [EOL]       int int0 = NumberUtils.toInt((String) null, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testappendSuper()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]    
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = IEEE754rUtils.max((-1.0), (-1.0)); [EOL]       assertEquals((-1.0), double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContextValues()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       List<Pair<String, Object>> list0 = contextedRuntimeException0.getContextValues((String) null); [EOL]       assertFalse(list0.contains("")); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlphaUpper()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphaUpper('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeEcmaScript()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeEcmaScript(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setContentStart((String) null); [EOL]       String string0 = standardToStringStyle0.getContentStart(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       long long0 = mutableFloat0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('b'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('c'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexToByte()  throws Throwable  { [EOL]       byte byte0 = Conversion.hexToByte("", 0, (byte)0, (byte)0, 0); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 10); [EOL]       Date date1 = DateUtils.setYears(date0, 14); [EOL]       assertEquals("Wed Dec 31 00:00:00 GMT 2", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(1); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(1, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<null>"); [EOL]       reflectionToStringBuilder0.setExcludeFieldNames(stringArray0); [EOL]       reflectionToStringBuilder0.getExcludeFieldNames(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]   
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       double double0 = mutableFloat0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0, toStringStyle0); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField((-1132)); [EOL]       short short0 = bitField0.setShortValue((short)0, (short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testgetStackFrames()  throws Throwable  { [EOL]       String[] stringArray0 = ExceptionUtils.getStackFrames(""); [EOL]       assertEquals(0, stringArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Integer integer0 = mutableInt0.getValue(); [EOL]       assertEquals(0, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeXml("\"N35X"); [EOL]       assertEquals("\"N35X", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       String string0 = fraction0.toProperString(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHex()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(10); [EOL]       assertEquals('8', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       String string0 = fraction0.toProperString(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetJavaVersion()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.3"); [EOL]       assertEquals(JavaVersion.JAVA_1_3, javaVersion0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testof()  throws Throwable  { [EOL]       ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, "org.apache.commons.lang3.tuple.ImmutablePair"); [EOL]       ImmutablePair<Object, Object> immutablePair1 = new ImmutablePair<Object, Object>((Object) null, "Alo9q?"); [EOL]       Integer integer0 = new Integer((-32768)); [EOL]       ImmutablePair<ImmutablePair<Object, Object>, Integer> immutablePair2 = ImmutablePair.of(immutablePair1, integer0); [EOL]       Object object0 = immutablePair2.getLeft(); [EOL]       boolean boolean0 = immutablePair0.equ
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeXml("Q f$w}_"); [EOL]       assertEquals("Q f$w}_", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAccessible()  throws Throwable  { [EOL]       Member member0 = mock(Member.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(member0).getModifiers(); [EOL]       doReturn(false).when(member0).isSynthetic(); [EOL]       boolean boolean0 = MemberUtils.isAccessible(member0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.hashCode(); [EOL]       assertEquals("1.0", mutableFloat0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]       assertEquals((-0.5F), float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotFalse()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.isNotFalse((Boolean) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlookup()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup.MapStrLookup<Object> strLookup_MapStrLookup0 = new StrLookup.MapStrLookup<Object>(hashMap0); [EOL]       String string0 = strLookup_MapStrLookup0.lookup("r"); [EOL]       assertNotNull(string0); [EOL]   } [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       HashCodeBuilder.register(linkedList0); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedList0, true); [EOL]       assertEquals(17, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       String string0 = StrSubstitutor.replaceSystemProperties((Object) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setArrayContentDetail(false); [EOL]       boolean boolean0 = standardToStringStyle0.isArrayContentDetail(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetProperWhole()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPattern()  throws Throwable  { [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("", hashMap0); [EOL]       String string0 = extendedMessageFormat0.toPattern(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte) (-30)); [EOL]       String string0 = mutableByte0.toString(); [EOL]       assertEquals("-30", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableObject<String> mutableObject0 = new MutableObject<String>(); [EOL]       String string0 = mutableObject0.toString(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0L, 0L); [EOL]       Object object0 = new Object(); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "', is neither of type Map.Entry nor an Array"; [EOL]       Object object1 = new Object(); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       linkedHashSet0.add("rGTPJTlv
@Test(timeout = 4000) [EOL]   public void testintToHexDigitMsb0()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunregister()  throws Throwable  { [EOL]       EqualsBuilder.unregister("Unexpected IllegalAccessException", "Unexpected IllegalAccessException"); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       int[] intArray0 = new int[5]; [EOL]       intArray0[0] = 1376; [EOL]       intArray0[1] = (-6918); [EOL]       intArray0[2] = 1531; [EOL]       intArray0[3] = (-2200); [EOL]       intArray0[4] = 0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0); [EOL]     
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       short short0 = NumberUtils.toShort("9"); [EOL]       assertEquals((short)9, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       Comparator<String> comparator1 = range0.getComparator(); [EOL]       Range<
@Test(timeout = 4000) [EOL]   public void testsetBoolean()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       int int0 = bitField0.setBoolean((short)3, true); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       Comparator<String> comparator1 = range0.getComparator(); [EOL]       Range<
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsqueeze()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       String string0 = CharSetUtils.squeeze(stringArray0[0], stringArray0); [EOL]       String string1 = CharSetUtils.keep(string0, stringArray0); [EOL]       assertNull(string1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("3X0f", '3'); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntValue()  throws Throwable  { [EOL]       int int0 = CharUtils.toIntValue('0'); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubSequence()  throws Throwable  { [EOL]       CharSequence charSequence0 = CharSequenceUtils.subSequence("9", 1); [EOL]       assertEquals("", charSequence0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRegistry()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(0L, 0L); [EOL]       Object object0 = new Object(); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "', is neither of type Map.Entry nor an Array"; [EOL]       Object object1 = new Object(); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       linkedHashSet0.add("rGTPJTlvB
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testappendDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("N,"); [EOL]       standardToStringStyle0.appendDetail(stringBuffer0, "N,", '\\'); [EOL]       assertEquals("N,\\", stringBuffer0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0, 1920, 1920); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('c'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotTrue()  throws Throwable  { [EOL]       boolean boolean0 = BooleanUtils.isNotTrue((Boolean) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDigits()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isDigits(""); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprimitiveToWrapper()  throws Throwable  { [EOL]       Class<?> class0 = ClassUtils.primitiveToWrapper((Class<?>) null); [EOL]       assertNull(class0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintToHexDigitMsb0()  throws Throwable  { [EOL]       char char0 = Conversion.intToHexDigitMsb0(0); [EOL]       assertEquals('0', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOSMatch()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isOSMatch("1.7", "1.7", "1.7", "1.7"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetContextValue()  throws Throwable  { [EOL]       ContextedException contextedException0 = new ContextedException(); [EOL]       ContextedException contextedException1 = contextedException0.setContextValue("*=|", "*=|"); [EOL]       Object object0 = contextedException1.getContextValue("*=|"); [EOL]       assertEquals("*=|", object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnormalizeUpperBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[0]; [EOL]       Type[] typeArray1 = TypeUtils.normalizeUpperBounds(typeArray0); [EOL]       assertEquals(1, typeArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       Long long0 = mutableLong0.getValue(); [EOL]       assertEquals(0L, (long)long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.clone((double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableTriple<Object, Object, Object> mutableTriple0 = new MutableTriple<Object, Object, Object>(); [EOL]       String string0 = mutableTriple0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(0L); [EOL]       stopWatch0.suspend(); [EOL]       String string0 = stopWatch0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFragmentInHours()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       long long0 = DateUtils.getFragmentInHours((Date) mockDate0, 6); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetImplicitLowerBounds()  throws Throwable  { [EOL]       Type[] typeArray0 = new Type[0]; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(typeArray0).when(wildcardType0).getLowerBounds(); [EOL]       Type[] typeArray1 = TypeUtils.getImplicitLowerBounds(wildcardType0); [EOL]       assertEquals(1, typeArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       ChronoLocalDate chronoLocalDate0 = ObjectUtils.cloneIfPossible((ChronoLocalDate) null); [EOL]       assertNull(chronoLocalDate0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       double double0 = mutableDouble0.doubleValue(); [EOL]       assertEquals((-1.0), double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testescapeCsv()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeCsv(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testunescapeJava()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeJava(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetCharRanges()  throws Throwable  { [EOL]       String[] stringArray0 = new String[9]; [EOL]       String string0 = ":7~;40.\\uqU5cSp,B 8"; [EOL]       stringArray0[0] = string0; [EOL]       CharSet charSet0 = CharSet.getInstance(stringArray0); [EOL]       CharRange[] charRangeArray0 = charSet0.getCharRanges(); [EOL]       assertEquals(19, charRangeArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testincrement()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       mutableFloat0.increment(); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals(1.0F, mutableFloat0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       short short0 = bitField0.setShort((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutablePair<Integer, MutablePair<Integer, Integer>> mutablePair0 = new MutablePair<Integer, MutablePair<Integer, Integer>>(); [EOL]       String string0 = mutablePair0.toString(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCharMatcher()  throws Throwable  { [EOL]       char[] charArray0 = new char[10]; [EOL]       StrMatcher strMatcher0 = StrMatcher.CharMatcher(); [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt((-564)); [EOL]       mutableInt0.increment(); [EOL]       MutableInt mutableInt1 = new MutableInt(mutableInt0); [EOL]       mutableInt1.subtract((-564)); [EOL]       mutableInt1.subtract((Number) mutableInt0); [EOL]       mutableInt0.add((Number) mutableInt1); [EOL]       long long0 = mutableInt0.longValue(); [EOL]       assertEquals(1L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.above(265); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = unicodeEscaper0.translate(265, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreverse()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       ArrayUtils.reverse(longArray0); [EOL]       assertArrayEquals(new long[] {0L, 0L, 0L, 0L}, longArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAfter()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(674).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.is("9apdIVYVD0Icg&f", comparator0); [EOL]       boolean boolean0 = range0.isAfterRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbyteArrayToShort()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       short short0 = Conversion.byteArrayToShort(byteArray0, 0, (short)0, (byte)0, 0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testRandom()  throws Throwable  { [EOL]       String string0 = RandomStringUtils.randomAscii(4200); [EOL]       assertNotNull(string0); [EOL]        [EOL]       // Undeclared exception! [EOL]       RandomStringUtils.random(4200, true, false); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetLeft()  throws Throwable  { [EOL]       MutableTriple<Object, Object, String> mutableTriple0 = new MutableTriple<Object, String, String>(); [EOL]       Object object0 = mutableTriple0.getLeft(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOverlappedBy()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       Comparator<String> comparator1 = range0.getComparator(); [EOL]     
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Locale locale0 = Locale.KOREA; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance("]", locale0); [EOL]       String string0 = fastDateFormat0.toString(); [EOL]       assertEquals("FastDateFormat[],ko_KR,GMT]", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       toStringStyle0.NO_FIELD_NAMES_STYLE.appendEnd(stringBuffer0, stringBuffer0); [EOL]       assertEquals(1, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]       assertEquals((-0.5F), float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       ImmutablePair<String, Object> immutablePair0 = ImmutablePair.of("t<f2>}3B", (Object) "t<f2>}3B"); [EOL]       Object object0 = immutablePair0.getRight(); [EOL]       assertEquals("t<f2>}3B", object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.equals((Object) null, (Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance("Nl22#"); [EOL]       assertEquals(0, strTokenizer0.length); [EOL]        [EOL]       String string0 = strTokenizer0.next(); [EOL]       assertEquals(1, strTokenizer0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       String[] stringArray0 = new String[3]; [EOL]       String string0 = ObjectUtils.min(stringArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisOSNameMatch()  throws Throwable  { [EOL]       boolean boolean0 = SystemUtils.isOSNameMatch((String) null, (String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('c'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, true, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       int int0 = mutableByte0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(0); [EOL]       assertEquals(0, charBuffer0.length()); [EOL]        [EOL]       int int0 = charUtils.lastIndexOf((CharSequence) charBuffer0, 0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintArrayToLong()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       long long0 = Conversion.intArrayToLong(intArray0, (-1), 0L, 0, 0); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("9q1LAZWB!I", "9q1LAZWB!I", "Y.83v&eFU[<IS6{b", "Y.83v&eFU[<IS6{b"); [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(boolean0); [EOL]       assertEquals(1, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCharSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String[]) null); [EOL]       assertNull(charSet0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, "org.apache.commons.lang3.ImmutablePair"); [EOL]       ImmutablePair<Object, Object> immutablePair1 = new ImmutablePair<Object, Object>((Object) null, "Alo9q?"); [EOL]       int int0 = immutablePair0.compareTo((Object) null); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       fraction1.negate(); [EOL]       assertEquals((-1.0), fraction1.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       mutableDouble0.setValue(0.0); [EOL]       mutableDouble0.toDouble(); [EOL]       assertEquals(0.0, mutableDouble0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = IEEE754rUtils.max((-1.0), (-1.0)); [EOL]       assertEquals((-1.0), double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStackFrameList()  throws Throwable  { [EOL]       List<String> list0 = ExceptionUtils.getStackFrameList((Throwable) null); [EOL]       assertEquals(0, list0.size()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitMsb0ToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexDigitMsb0ToInt('C'); [EOL]       assertEquals(3, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmatchesPattern()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       // Undeclared exception! [EOL]       try {  [EOL]                                                                                                                                                             
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       String string0 = contextedRuntimeException0.getRawMessage(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       Long long0 = mutableLong0.toLong(); [EOL]       assertEquals(0L, (long)long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testbyteArrayToInt()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       int int0 = Conversion.byteArrayToInt(byteArray0, (byte)0, (byte)0, (byte)0, (byte)0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       float float0 = mutableByte0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1), (-1)); [EOL]       boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testbyteToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[2]; [EOL]       boolean[] booleanArray1 = Conversion.byteToBinary((byte) (-32), (-32), booleanArray0, (-32)); [EOL]       assertSame(booleanArray1, booleanArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertFalse(standardToStringStyle0.isUseShortClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setSizeStartText(""); [EOL]       String string0 = standardToStringStyle0.getSizeStartText(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       Formatter formatter0 = new Formatter(); [EOL]       Formatter formatter1 = FormattableUtils.append((CharSequence) stringBuffer0, formatter0, (-1), (-231), (-1808)); [EOL]       assertEquals("", formatter1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       int int0 = mutableDouble0.compareTo(mutableDouble0); [EOL]       assertEquals((-1.0), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       mutableShort0.setValue((short)15); [EOL]       Short short0 = mutableShort0.getValue(); [EOL]       assertEquals((short)15, (short)short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoPrimitive()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toPrimitive((Byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = StringUtils.rightPad(", '", 7, ", '"); [EOL]        [EOL]       float[] floatArray0 = new float[6]; [EOL]       floatArray0[0] = 1541.0F; [EOL]       floatArray0[1] = (float) 7; [EOL]       floatArray0[2] = (float) 7; [EOL]       floatArray0[3] = (float) 7; [EOL]       floatArray0[4] = (float) 7; [EOL]       floatArray0[5] = (float) 7; [EOL]       String string1 = StringUtils.join
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       mutableShort0.add((short)3165); [EOL]       assertEquals((short)3166, (short)mutableShort0.toShort()); [EOL]   } [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.appendClassName(stringBuffer0, (Object) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.appendClassName(stringBuffer0, (Object) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       String string0 = fraction0.toProperString(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       StringBuffer stringBuffer0 = stringWriter0.getBuffer(); [EOL]       Formatter formatter0 = new Formatter(); [EOL]       Formatter formatter1 = FormattableUtils.append((CharSequence) stringBuffer0, formatter0, (-1), (-231), (-1808)); [EOL]       assertEquals("", formatter1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       int int0 = ArrayUtils.toPrimitive((Object) null); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseShortClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseShortClassName(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.MIN; [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       Locale locale0 = Locale.TAIWAN; [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getDateInstance(3, timeZone0, locale0); [EOL]       Locale locale1 = fastDateFormat0.getLocale(); [EOL]       assertSame(locale0, locale1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSplitTime()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getSplitNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetJavaHome()  throws Throwable  { [EOL]       File file0 = SystemUtils.getJavaHome(); [EOL]       assertFalse(file0.equals()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) null, class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinitials()  throws Throwable  { [EOL]       String string0 = WordUtils.initials((String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("0/1"); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetAccessibleMethod()  throws Throwable  { [EOL]       Method method0 = MethodUtils.getAccessibleMethod((Method) null); [EOL]       assertNull(method0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       Float float0 = new Float((-1364.6F)); [EOL]       MutableByte mutableByte0 = new MutableByte(float0); [EOL]       mutableByte0.subtract((Number) float0); [EOL]       assertEquals((short)0, mutableByte0.shortValue()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableObject<String> mutableObject0 = new MutableObject<String>(); [EOL]       MutableObject<Object> mutableObject1 = new MutableObject<Object>(mutableObject0); [EOL]       Object object0 = mutableObject1.getValue(); [EOL]       boolean boolean0 = mutableObject0.equals(object0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testceiling()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1), (-1), (-1), (-1), (-1), (-1), (-1)); [EOL]       boolean boolean0 = DateUtils.isSameInstant((Date) mockDate0, (Date) mockDate0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(1190.3407F); [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       mutableFloat0.setValue((Number) byte0); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals(0.0F, mutableFloat0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMessage()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("tzS-G?4K8JT3"); [EOL]       MockThrowable mockThrowable1 = new MockThrowable("tzS-G?4K8JT3", mockThrowable0); [EOL]       ExceptionUtils.printRootCauseStackTrace((Throwable) mockThrowable1); [EOL]       assertEquals("tzS-G?4K8JT3", mockThrowable1.getMessage()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPackageName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageName((Object) null, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testidentityToString()  throws Throwable  { [EOL]       MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(); [EOL]       String string0 = ObjectUtils.identityToString((Object) mockSimpleDateFormat0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("0/1"); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(1190.3407F); [EOL]       Byte byte0 = new Byte((byte)0); [EOL]       mutableFloat0.setValue((Number) byte0); [EOL]       mutableFloat0.toFloat(); [EOL]       assertEquals(0.0F, mutableFloat0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testunescapeHtml4()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.unescapeHtml4(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       float float0 = mutableByte0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNumber()  throws Throwable  { [EOL]       boolean boolean0 = NumberUtils.isNumber("0x"); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       mutableLong0.setValue(1173L); [EOL]       float float0 = mutableLong0.floatValue(); [EOL]       assertEquals(1173.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSet()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       boolean boolean0 = bitField0.isSet(1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       short short0 = bitField0.getShortValue((short)1); [EOL]       assertEquals((short)1, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.subtract(446); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals((-446), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       mutableDouble0.setValue(0.0); [EOL]       mutableDouble0.toDouble(); [EOL]       assertEquals(0.0, mutableDouble0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       Float float0 = mutableFloat0.getValue(); [EOL]       assertEquals(0.0F, (float)float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testatLeast()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.JAVA_1_5; [EOL]       JavaVersion javaVersion1 = JavaVersion.JAVA_1_8; [EOL]       boolean boolean0 = javaVersion0.atLeast(javaVersion1); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       Integer integer0 = new Integer(0); [EOL]       MutableTriple<Integer, Object, Object> mutableTriple0 = new MutableTriple<Integer, Object, Object>(integer0, integer0, integer0); [EOL]       Integer integer1 = mutableTriple0.compareTo(integer0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameDay()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       boolean boolean0 = DateUtils.isSameDay((Date) mockDate0, (Date) mockDate0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toObject((byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetDenominator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction("0/1"); [EOL]       assertEquals(1, fraction0.getDenominator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongToIntArray()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       int[] intArray1 = Conversion.longToIntArray(0L, 0, intArray0, 0, 0); [EOL]       assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       ConstantInitializer<Object> constantInitializer0 = new ConstantInitializer<Object>((Object) null); [EOL]       ConcurrentUtils.ConstantFuture<String> concurrentUtils_ConstantFuture0 = new ConcurrentUtils.ConstantFuture<String>((String) null); [EOL]       boolean boolean0 = concurrentUtils_ConstantFuture0.isDone(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoObject()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.toObject((byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetProperWhole()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       float float0 = mutableShort0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.ONE.pow(Integer.MIN_VALUE); [EOL]       assertTrue(fraction1.equals((Object)fraction0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testaddAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[5]; [EOL]       int[] intArray1 = ArrayUtils.addAll(intArray0, intArray0); [EOL]       assertEquals(10, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<null>"); [EOL]       reflectionToStringBuilder0.setExcludeFieldNames(stringArray0); [EOL]       reflectionToStringBuilder0.getExcludeFieldNames(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getSimpleName((Object) null, (String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionToString()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       String string0 = ToStringBuilder.reflectionToString((Object) "", toStringStyle0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoHashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append(0.0F); [EOL]       assertEquals(629, hashCodeBuilder0.toHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, false); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoClass()  throws Throwable  { [EOL]       Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 0); [EOL]       Class<?>[] classArray1 = ClassUtils.toClass(classArray0); [EOL]       assertEquals(0, classArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRawType()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       ParameterizedType parameterizedType0 = mock(ParameterizedType.class, (MockSettings) new ViolatedAssumptionAnswer()); [EOL]       doReturn(class0, class0).when(parameterizedType0).getRawType(); [EOL]       Class<Integer> class1 = Integer.class; [EOL]       Type[] typeArray0 = new Type[6]; [EOL]       typeArray0[0] = (Type) class1; [EOL]       typeArray0[1] = (Type) parameterizedType0; [EOL]       WildcardType wildcardType0 = mock(WildcardType.class, (MockSettings)
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat((-3223.9314F)); [EOL]       String string0 = mutableFloat0.toString(); [EOL]       assertEquals("-3223.9314", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       Class<?> class0 = ClassUtils.getClass("org.apache.commons.lang3.ClassUtils", true); [EOL]       assertFalse(class0.isPrimitive()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       int int0 = mutableFloat0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((double) 0); [EOL]       assertEquals(0.0, fraction0.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isUseIdentityHashCode()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisInstanceOf()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       Object[] objectArray0 = new Object[5]; [EOL]       Validate.isInstanceOf((Class<?>) class0, (Object) class0, (Class<?>) class0); [EOL]       assertEquals(5, objectArray0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRootCause()  throws Throwable  { [EOL]       String string0 = ExceptionUtils.getRootCauseMessage((Throwable) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetShortClassName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortClassName((Class<?>) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoChar()  throws Throwable  { [EOL]       char char0 = CharUtils.toChar("3X0f", '3'); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       UnicodeEscaper unicodeEscaper0 = UnicodeEscaper.above(265); [EOL]       StringWriter stringWriter0 = new StringWriter(); [EOL]       boolean boolean0 = unicodeEscaper0.translate(265, (Writer) stringWriter0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetClass()  throws Throwable  { [EOL]       Class<?> class0 = ClassUtils.getClass("org.apache.commons.lang3.ClassUtils", true); [EOL]       assertFalse(class0.isPrimitive()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals("[", standardToStringStyle0.getContentStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoCharacterObject()  throws Throwable  { [EOL]       Character character0 = CharUtils.toCharacterObject('3'); [EOL]       char char0 = CharUtils.toChar(character0); [EOL]       assertEquals('3', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetObject()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       Object object1 = toStringBuilder0.getObject(); [EOL]       assertSame(object0, object1); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiControl()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiControl('\uDC00'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder1 = basicThreadFactory_Builder0.priority(1); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder1.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertEquals(1, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testidentityToString()  throws Throwable  { [EOL]       MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat(); [EOL]       String string0 = ObjectUtils.identityToString((Object) mockSimpleDateFormat0); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisSameLength()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       boolean boolean0 = ArrayUtils.isSameLength(booleanArray0, booleanArray0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRegisterPair()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(false, false); [EOL]       Object object0 = new Object(); [EOL]       Class<Object> class0 = Object.class; [EOL]       String[] stringArray0 = new String[5]; [EOL]       stringArray0[0] = "', is neither of type Map.Entry nor an Array"; [EOL]       Object object1 = new Object(); [EOL]       LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(); [EOL]       linkedHashSet0.add("rGTPJTlvB8
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStart()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testconvertClassNamesToClassNames()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       linkedList0.add(""); [EOL]       List<Class<?>> list0 = ClassUtils.convertClassNamesToClasses(linkedList0); [EOL]       assertFalse(list0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoLong()  throws Throwable  { [EOL]       long long0 = NumberUtils.toLong("", (-4L)); [EOL]       assertEquals((-4L), long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       String string0 = fraction0.toProperString(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrMatcher strMatcher0 = strTokenizer0.getIgnoredMatcher(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       MutableTriple<String, Integer, String> mutableTriple0 = new MutableTriple<String, Integer, String>(); [EOL]       String string0 = mutableTriple0.getRight(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testvalidIndex()  throws Throwable  { [EOL]       LinkedList<SQLIntegrityConstraintViolationException> linkedList0 = new LinkedList<SQLIntegrityConstraintViolationException>(); [EOL]       SQLIntegrityConstraintViolationException sQLIntegrityConstraintViolationException0 = new SQLIntegrityConstraintViolationException(); [EOL]       linkedList0.add(sQLIntegrityConstraintViolationException0); [EOL]       Object[] objectArray0 = new Object[1]; [EOL]       LinkedList<SQLIntegrityConstraintViolationException> linkedList1 = Validate.validIndex(linkedList0); [EOL]       assertSame(linkedList1, linkedList0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testregionMatches()  throws Throwable  { [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = '!'; [EOL]       CharBuffer charBuffer0 = CharBuffer.wrap(charArray0); [EOL]       boolean boolean0 = CharSequenceUtils.regionMatches(charBuffer0, true, 1, charBuffer0, '!'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isNotEmpty((float[]) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisValidEnum()  throws Throwable  { [EOL]       Class<JavaVersion> class0 = JavaVersion.class; [EOL]       boolean boolean0 = EnumUtils.isValidEnum(class0, (String) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       long long0 = mutableInt0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisDefaultFullDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isDefaultFullDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPackageCanonicalName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getPackageCanonicalName((Object) null, ""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableLong mutableLong0 = new MutableLong(); [EOL]       double double0 = mutableLong0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompare()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       boolean boolean0 = range0.isEndedBy((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetStringBuffer()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder((Object) null, standardToStringStyle0); [EOL]       StringBuffer stringBuffer0 = toStringBuilder0.getStringBuffer(); [EOL]       assertEquals("", stringBuffer0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testcount()  throws Throwable  { [EOL]       String[] stringArray0 = new String[7]; [EOL]       int int0 = CharSetUtils.count("V jZ<??HEe=2Rc", stringArray0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisShutdown()  throws Throwable  { [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2105); [EOL]        [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 2105, timeUnit0, 2105); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]        [EOL]       timedSemaphore0.acquire(); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]        [EOL]     
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testtoMap()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[0]; [EOL]       Map<Object, Object> map0 = ArrayUtils.toMap(objectArray0); [EOL]       assertTrue(map0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testisInstance()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       boolean boolean0 = TypeUtils.isInstance((Object) null, class0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableFloat mutableFloat0 = new MutableFloat(); [EOL]       long long0 = mutableFloat0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexToInt()  throws Throwable  { [EOL]       int int0 = Conversion.hexToInt(">Dc!61$`", (-1), (-1), (-1), (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testand()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[1]; [EOL]       boolean boolean0 = BooleanUtils.and(booleanArray0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testgetRawValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       int int0 = bitField0.getRawValue(0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetActiveExecutor()  throws Throwable  { [EOL]       Callable<Object> callable0 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((Object) null).when(callable0).call(); [EOL]       CallableBackgroundInitializer<Object> callableBackgroundInitializer0 = new CallableBackgroundInitializer<Object>(callable0); [EOL]       callableBackgroundInitializer0.start(); [EOL]       callableBackgroundInitializer0.getActiveExecutor(); [EOL]       assertTrue(callableBackgroundInitializer0.isStarted()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetShortClassName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getShortClassName((Class<?>) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       ImmutablePair<Object, String> immutablePair0 = new ImmutablePair<Object, String>((Object) null, "org.apache.commons.lang3.ImmutablePair"); [EOL]       ImmutablePair<Object, Object> immutablePair1 = new ImmutablePair<Object, Object>((Object) null, "Alo9q?"); [EOL]       int int0 = immutablePair0.compareTo((Object) null); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetByte()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       byte byte0 = bitField0.setByte((byte)0); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbyteToHex()  throws Throwable  { [EOL]       String string0 = Conversion.byteToHex((byte)0, (byte)1, "", (-1)); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer("bsc&2@"); [EOL]       standardToStringStyle0.appendClassName(stringBuffer0, (Object) null); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContentEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertEquals("]", standardToStringStyle0.getContentEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetShortValue()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       short short0 = bitField0.getShortValue((short)1); [EOL]       assertEquals((short)1, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testNull()  throws Throwable  { [EOL]       ChronoLocalDate chronoLocalDate0 = ObjectUtils.cloneIfPossible((ChronoLocalDate) null); [EOL]       assertNull(chronoLocalDate0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNegated()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('#'); [EOL]       charRange0.hashCode(); [EOL]       assertTrue(charRange0.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreplace()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isAlphaSpace((CharSequence) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoDouble()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       Double double0 = mutableDouble0.toDouble(); [EOL]       assertEquals((-1.0), (double)double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testinclusiveBetween()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[6]; [EOL]       Locale.Category locale_Category0 = Locale.DISPLAY; [EOL]       Validate.inclusiveBetween(locale_Category0, locale_Category0); [EOL]       assertEquals(5, locale_Category0.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetRawMessage()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       String string0 = contextedRuntimeException0.getRawMessage(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('M'); [EOL]       CharRange charRange1 = CharRange.isIn('M'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongToByteArray()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[0]; [EOL]       byte[] byteArray1 = Conversion.longToByteArray((-2432L), 0, byteArray0, (-3534), (-3534)); [EOL]       assertSame(byteArray1, byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststringMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.stringMatcher((String) null); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       double double0 = mutableByte0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testregister()  throws Throwable  { [EOL]       EqualsBuilder.unregister("Unexpected IllegalAccessException", "Unexpected IllegalAccessException"); [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       int[] intArray0 = new int[5]; [EOL]       intArray0[0] = 1376; [EOL]       intArray0[1] = (-6918); [EOL]       intArray0[2] = 1531; [EOL]       intArray0[3] = (-2200); [EOL]       intArray0[4] = 0; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(intArray0, intArray0); [EOL]      
@Test(timeout = 4000) [EOL]   public void testgetTSVInstance()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       int int0 = strTokenizer0.previousIndex(); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetPriority()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisUseIdentityHashCode()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseClassName(false); [EOL]       boolean boolean0 = standardToStringStyle0.isUseClassName(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.subtract(446); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals((-446), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testnullToEmpty()  throws Throwable  { [EOL]       boolean[] booleanArray0 = ArrayUtils.nullToEmpty((boolean[]) null); [EOL]       assertTrue(Arrays.equals(new boolean[] {}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoShort()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort((short)1); [EOL]       mutableShort0.add((short)3165); [EOL]       assertEquals((short)3166, (short)mutableShort0.toShort()); [EOL]   } [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setUseFieldNames(false); [EOL]       boolean boolean0 = standardToStringStyle0.isUseFieldNames(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       HashCodeBuilder.register(linkedList0); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedList0, true); [EOL]       assertEquals(17, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(); [EOL]       float float0 = mutableDouble0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisInnerClass()  throws Throwable  { [EOL]       Class<Object> class0 = Object.class; [EOL]       boolean boolean0 = ClassUtils.isInnerClass(class0); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBooleanObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetRight()  throws Throwable  { [EOL]       ImmutableTriple<Object, String, String> immutableTriple0 = ImmutableTriple.of((Object) null, "~s+Jv>4", "~s+Jv>4"); [EOL]       Object object0 = immutableTriple0.getRight(); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldSeparator(""); [EOL]       String string0 = standardToStringStyle0.getFieldSeparator(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testkeep()  throws Throwable  { [EOL]       String[] stringArray0 = new String[7]; [EOL]       String string0 = CharSetUtils.keep("", stringArray0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       double double0 = mutableInt0.doubleValue(); [EOL]       assertEquals(0.0, double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststart()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       System.setCurrentTimeMillis(0L); [EOL]       stopWatch0.suspend(); [EOL]       String string0 = stopWatch0.toString(); [EOL]       assertNotNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]   
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexToShort()  throws Throwable  { [EOL]       short short0 = Conversion.hexToShort("", 0, (short)0, (short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetAvailablePermits()  throws Throwable  { [EOL]       ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy(); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(232, threadPoolExecutor_DiscardPolicy0); [EOL]       ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer()); [EOL]       MockThread mockThread0 = new MockThread(threadGroup0, ""); [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(0, threadPoolExecutor_DiscardPolicy0); [EOL]       threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduled
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigitMsb0_4bits()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryToHexDigitMsb0_4bits(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeJson()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeJson(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(0); [EOL]       int int0 = CharSequenceUtils.lastIndexOf(charBuffer0, charBuffer0, 0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble(1.0); [EOL]       long long0 = mutableDouble0.longValue(); [EOL]       assertEquals(1L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfThrowable()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("tzS-G?4K8JT3"); [EOL]       Class<Throwable> class0 = Throwable.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoCalendar()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate((-1748), (-1748), (-1748)); [EOL]       Calendar calendar0 = DateUtils.toCalendar(mockDate0); [EOL]       long long0 = DateUtils.getFragmentInHours(calendar0, 5); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcharSetMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("5"); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte((byte) (-73)); [EOL]       Byte byte0 = mutableByte0.toByte(); [EOL]       assertEquals((byte) (-73), (byte)byte0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetInstance()  throws Throwable  { [EOL]       CharSet charSet0 = CharSet.getInstance((String[]) null); [EOL]       assertNull(charSet0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       boolean boolean0 = ArrayUtils.isEmpty((int[]) null); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringOnOff((Boolean) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       float float0 = mutableByte0.floatValue(); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotNull()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.isNotNull((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOfThrowable()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("tzS-G?4K8JT3"); [EOL]       Class<Throwable> class0 = Throwable.class; [EOL]       int int0 = ExceptionUtils.indexOfThrowable((Throwable) mockThrowable0, (Class<?>) class0, (-1)); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElement()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.removeElement((byte[]) null, (byte) (-73)); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetShort()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(1); [EOL]       short short0 = bitField0.setShortValue((short)3, (short)3); [EOL]       assertEquals((short)3, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFieldSeparatorAtStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertFalse(standardToStringStyle0.isFieldSeparatorAtStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcharSetMatcher()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher("5"); [EOL]       assertNotNull(strMatcher0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.setValue(1); [EOL]       Integer integer0 = mutableInt0.toInteger(); [EOL]       assertEquals(1, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisAsciiNumeric()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiNumeric('\u0080'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       NumericEntityUnescaper.OPTION[] numericEntityUnescaper_OPTIONArray0 = new NumericEntityUnescaper.OPTION[8]; [EOL]       NumericEntityUnescaper.OPTION numericEntityUnescaper_OPTION0 = NumericEntityUnescaper.OPTION.semiColonRequired; [EOL]       numericEntityUnescaper_OPTIONArray0[0] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[1] = numericEntityUnescaper_OPTION0; [EOL]       numericEntityUnescaper_OPTIONArray0[2] = numericEntityUnescaper_OPTION0; [EOL]      
@Test(timeout = 4000) [EOL]   public void testFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       int int0 = fraction0.getProperWhole(); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContextLabels()  throws Throwable  { [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException(); [EOL]       Set<String> set0 = contextedRuntimeException0.getContextLabels(); [EOL]       assertTrue(set0.isEmpty()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreateBigInteger()  throws Throwable  { [EOL]       BigInteger bigInteger0 = NumberUtils.createBigInteger((String) null); [EOL]       assertNull(bigInteger0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlongValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       long long0 = mutableInt0.longValue(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0, toStringStyle0); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testintValue()  throws Throwable  { [EOL]       MutableShort mutableShort0 = new MutableShort(); [EOL]       int int0 = mutableShort0.intValue(); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAsciiAlpha()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiAlphanumeric('Z'); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testleftPad()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       double double0 = IEEE754rUtils.max((-1.0), (-1.0)); [EOL]       assertEquals((-1.0), double0, 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoBoolean()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject((String) null); [EOL]       assertNull(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcompareTo()  throws Throwable  { [EOL]       MutableByte mutableByte0 = new MutableByte(); [EOL]       int int0 = mutableByte0.compareTo(mutableByte0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.isNot('M'); [EOL]       CharRange charRange1 = CharRange.isIn('M'); [EOL]       boolean boolean0 = charRange1.equals(charRange0); [EOL]       assertTrue(charRange1.isNegated()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSimpleName()  throws Throwable  { [EOL]       String string0 = ClassUtils.getSimpleName((Object) null, (String) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testisAssignable()  throws Throwable  { [EOL]       boolean boolean0 = ClassUtils.isAssignable((Class<?>[]) null, (Class<?>[]) null, false); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       Class<Integer> class0 = Integer.class; [EOL]       int int0 = ExceptionUtils.indexOfType((Throwable) null, class0); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfloatValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       float float0 = fraction1.floatValue(); [EOL]       assertEquals((-0.5F), float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetmin()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       boolean boolean0 = range0.contains((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremoveElements()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[4]; [EOL]       booleanArray0[0] = true; [EOL]       booleanArray0[2] = true; [EOL]       char char0 = Conversion.binaryToHexDigit(booleanArray0); [EOL]       assertEquals('a', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testremove()  throws Throwable  { [EOL]       long[] longArray0 = new long[9]; [EOL]       long[] longArray1 = ArrayUtils.removeElements(longArray0, longArray0); [EOL]       assertEquals(0, longArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testdoubleValue()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.ONE; [EOL]       Fraction fraction1 = fraction0.negate(); [EOL]       fraction1.negate(); [EOL]       assertEquals((-1.0), fraction1.doubleValue(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetContextValues()  throws Throwable  { [EOL]       DefaultExceptionContext defaultExceptionContext0 = new DefaultExceptionContext(); [EOL]       defaultExceptionContext0.addContextValue("~yub~!>4,#:CAl;", "~yub~!>4,#:CAl;"); [EOL]       List<Object> list0 = defaultExceptionContext0.getContextValues((String) null); [EOL]       assertFalse(list0.contains("~yub~!>4,#:CAl;")); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoFloat()  throws Throwable  { [EOL]       float float0 = NumberUtils.toFloat((String) null, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testpow()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.TWO_QUARTERS; [EOL]       Fraction fraction1 = fraction0.pow(0); [EOL]       assertEquals(1, fraction1.getProperWhole()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformatPattern()  throws Throwable  { [EOL]       HashMap<String, FormatFactory> hashMap0 = new HashMap<String, FormatFactory>(); [EOL]       ExtendedMessageFormat extendedMessageFormat0 = new ExtendedMessageFormat("", hashMap0); [EOL]       String string0 = extendedMessageFormat0.toPattern(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayStart()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setContentStart("?G -^Fz"); [EOL]       assertEquals("{", standardToStringStyle0.getArrayStart()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetHours()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 10); [EOL]       Date date1 = DateUtils.setYears(date0, 14); [EOL]       assertEquals("Wed Dec 31 00:00:00 GMT 2", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetVariablePrefix()  throws Throwable  { [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(); [EOL]       StrSubstitutor strSubstitutor1 = strSubstitutor0.setVariablePrefixMatcher(strSubstitutor0.DEFAULT_SUFFIX); [EOL]       assertEquals('$', strSubstitutor1.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisFalse()  throws Throwable  { [EOL]       MutableBoolean mutableBoolean0 = new MutableBoolean(); [EOL]       boolean boolean0 = mutableBoolean0.isFalse(); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsubtract()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       mutableInt0.subtract(446); [EOL]       int int0 = mutableInt0.intValue(); [EOL]       assertEquals((-446), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       OctalUnescaper octalUnescaper0 = new OctalUnescaper(); [EOL]       CharBuffer charBuffer0 = CharBuffer.allocate(10); [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       int int0 = octalUnescaper0.translate((CharSequence) charBuffer0, 0, (Writer) stringWriter0); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]
@Test(timeout = 4000) [EOL]   public void testbetween()  throws Throwable  { [EOL]       Range<String> range0 = Range.between("@?", "@?", (Comparator<String>) null); [EOL]       boolean boolean0 = range0.containsRange((Range<String>) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testshortToHex()  throws Throwable  { [EOL]       String string0 = Conversion.shortToHex((short)0, 0, "", 0, 1); [EOL]       assertEquals("0", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       String string0 = DateFormatUtils.format((Date) mockDate0, ":"); [EOL]       assertEquals(":", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetTimeZone()  throws Throwable  { [EOL]       ZoneOffset zoneOffset0 = ZoneOffset.UTC; [EOL]       TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0); [EOL]       Locale locale0 = Locale.PRC; [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0); [EOL]       String string0 = DateFormatUtils.format((Calendar) mockGregorianCalendar0, "$", timeZone0, locale0); [EOL]       assertEquals("$", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmin()  throws Throwable  { [EOL]       short short0 = NumberUtils.min((short)373, (short)373, (short)373); [EOL]       assertEquals((short)373, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmptyTokenAsNull()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertFalse(strTokenizer0.isEmptyTokenAsNull()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeXml()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeXml("Q f$w}_"); [EOL]       assertEquals("Q f$w}_", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcreateInteger()  throws Throwable  { [EOL]       Integer integer0 = NumberUtils.createInteger((String) null); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.DEFAULT_STYLE; [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       toStringStyle0.NO_FIELD_NAMES_STYLE.appendEnd(stringBuffer0, stringBuffer0); [EOL]       assertEquals(1, stringBuffer0.length()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetEnd()  throws Throwable  { [EOL]       CharRange charRange0 = CharRange.is('p'); [EOL]       boolean boolean0 = charRange0.contains(charRange0); [EOL]       assertEquals('p', charRange0.getEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testprevious()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.getContent(); [EOL]       assertEquals((-1), strTokenizer0.previousIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnext()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       List<String> list0 = strTokenizer0.tokenize(charArray0, 36, 36); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testformat()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       String string0 = DateFormatUtils.format((Date) mockDate0, ":"); [EOL]       assertEquals(":", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testelementCompareTo()  throws Throwable  { [EOL]       Range<String> range0 = Range.between(",8A9<~PCQqm", ",8A9<~PCQqm"); [EOL]       int int0 = range0.elementCompareTo("A"); [EOL]       assertEquals(1, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testset()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 10); [EOL]       Date date1 = DateUtils.setYears(date0, 14); [EOL]       assertEquals("Wed Dec 31 00:00:00 GMT 2", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       CompareToBuilder compareToBuilder1 = compareToBuilder0.append(0, 0); [EOL]       assertEquals(0, (int)compareToBuilder1.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEquals()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[0] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]   
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertEquals("=", standardToStringStyle0.getFieldNameValueSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testis()  throws Throwable  { [EOL]       Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0).when(comparator0).compare(any() , any()); [EOL]       Range<Object> range0 = Range.between((Object) "a2_", (Object) "a2_", comparator0); [EOL]       Integer integer0 = new Integer(1); [EOL]       Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn(0, 0).when(comparator1).compare(any() , any()); [EOL]       Range<Object> range
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0, 1920, 1920); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       String string0 = ReflectionToStringBuilder.toString(object0, toStringStyle0); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhexDigitToBinary()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitToBinary('b'); [EOL]       assertTrue(Arrays.equals(new boolean[] {false, false, false, false}, booleanArray0)); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoIntegerObject()  throws Throwable  { [EOL]       Boolean boolean0 = BooleanUtils.toBooleanObject("9q1LAZWB!I", "9q1LAZWB!I", "Y.83v&eFU[<IS6{b", "Y.83v&eFU[<IS6{b"); [EOL]       Integer integer0 = BooleanUtils.toIntegerObject(boolean0); [EOL]       assertEquals(1, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbinaryBeMsb0ToHexDigit()  throws Throwable  { [EOL]       boolean[] booleanArray0 = Conversion.hexDigitMsb0ToBinary('b'); [EOL]       char char0 = Conversion.binaryBeMsb0ToHexDigit(booleanArray0); [EOL]       assertEquals('b', char0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testCONST()  throws Throwable  { [EOL]       short short0 = ObjectUtils.CONST((short)0); [EOL]       assertEquals((short)0, short0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testadd()  throws Throwable  { [EOL]       byte[] byteArray0 = ArrayUtils.addAll((byte[]) null, (byte[]) null); [EOL]       assertNull(byteArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetMatchingAccessibleMethod()  throws Throwable  { [EOL]       Class<String> class0 = String.class; [EOL]       Method method0 = MethodUtils.getMatchingAccessibleMethod(class0, "toLowerCase", (Class<?>[]) null); [EOL]       Method method1 = MethodUtils.getMatchingAccessibleMethod(method0); [EOL]       assertFalse(method1.isVarArgs()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = BooleanUtils.toStringOnOff((Boolean) null); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtranslate()  throws Throwable  { [EOL]       StringEscapeUtils.CsvUnescaper stringEscapeUtils_CsvUnescaper0 = new StringEscapeUtils.CsvUnescaper(); [EOL]       StringWriter stringWriter0 = new StringWriter(0); [EOL]       stringEscapeUtils_CsvUnescaper0.translate((CharSequence) "\"\"\"\"\"", 0, (Writer) stringWriter0); [EOL]       assertEquals("\"", stringWriter0.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testsetByteBoolean()  throws Throwable  { [EOL]       BitField bitField0 = new BitField(0); [EOL]       byte byte0 = bitField0.setByteBoolean((byte)0, false); [EOL]       assertEquals((byte)0, byte0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendStatics()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       ToStringStyle toStringStyle0 = ToStringStyle.SIMPLE_STYLE; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder(linkedList0, toStringStyle0); [EOL]       reflectionToStringBuilder0.getUpToClass(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendStatics()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoInteger()  throws Throwable  { [EOL]       int int0 = BooleanUtils.toInteger(false); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNullText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setUseClassName(true); [EOL]       assertEquals("<null>", standardToStringStyle0.getNullText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testparse()  throws Throwable  { [EOL]       FastDateFormat fastDateFormat0 = FastDateFormat.getInstance(","); [EOL]       ParsePosition parsePosition0 = new ParsePosition(0); [EOL]       Object object0 = fastDateFormat0.parseObject("|(ADDNMDo;OhmaJ", parsePosition0); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testpreviousIndex()  throws Throwable  { [EOL]       char[] charArray0 = new char[22]; [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance(charArray0); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]        [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.setEmptyTokenAsNull(true); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer0.previousIndex()); [EOL]       //  // Unstable assertion: assertEquals((-1), strTokenizer1.previousIndex()); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       MutableDouble mutableDouble0 = new MutableDouble((-1.0)); [EOL]       mutableDouble0.hashCode(); [EOL]       assertEquals((-1.0), mutableDouble0.toDouble(), 0.01); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void teststop()  throws Throwable  { [EOL]       StopWatch stopWatch0 = new StopWatch(); [EOL]       stopWatch0.start(); [EOL]       stopWatch0.split(); [EOL]       long long0 = stopWatch0.getNanoTime(); [EOL]       assertEquals(0L, long0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testiterator()  throws Throwable  { [EOL]       MockDate mockDate0 = new MockDate(); [EOL]       Iterator<Calendar> iterator0 = DateUtils.iterator((Date) mockDate0, 2); [EOL]       assertNotNull(iterator0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       EqualsBuilder equalsBuilder0 = new EqualsBuilder(); [EOL]       float[] floatArray0 = new float[1]; [EOL]       floatArray0[0] = 4061.6345F; [EOL]       float[] floatArray1 = new float[1]; [EOL]       floatArray1[0] = 4061.6345F; [EOL]       EqualsBuilder equalsBuilder1 = equalsBuilder0.append(floatArray0, floatArray1); [EOL]       long[] longArray0 = new long[4]; [EOL]       longArray0[1] = 0L; [EOL]       longArray0[1] = 3412L; [EOL]     
@Test(timeout = 4000) [EOL]   public void testreflectionHashCode()  throws Throwable  { [EOL]       LinkedList<String> linkedList0 = new LinkedList<String>(); [EOL]       HashCodeBuilder.register(linkedList0); [EOL]       int int0 = HashCodeBuilder.reflectionHashCode((Object) linkedList0, true); [EOL]       assertEquals(17, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetComparator()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       Comparator<String> comparator1 = range0.getComparator(); [EOL]       Range
@Test(timeout = 4000) [EOL]   public void testappend()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetArrayEnd()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("}", standardToStringStyle0.getArrayEnd()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       ConstantInitializer<String> constantInitializer0 = new ConstantInitializer<String>((String) null); [EOL]       String string0 = constantInitializer0.getObject(); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFraction()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-3535.9)); [EOL]       assertEquals((-353535.9), fraction0.floatValue(), 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcontains()  throws Throwable  { [EOL]       byte[] byteArray0 = new byte[4]; [EOL]       boolean boolean0 = ArrayUtils.contains(byteArray0, (byte)0); [EOL]       assertTrue(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalizeFully()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisNotNull()  throws Throwable  { [EOL]       boolean boolean0 = ObjectUtils.isNotNull((Object) null); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetNumerator()  throws Throwable  { [EOL]       Fraction fraction0 = Fraction.getFraction((-1), (-1)); [EOL]       String string0 = fraction0.toProperString(); [EOL]       assertEquals(1, fraction0.getNumerator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbelow()  throws Throwable  { [EOL]       JavaUnicodeEscaper javaUnicodeEscaper0 = JavaUnicodeEscaper.below(0); [EOL]       assertNotNull(javaUnicodeEscaper0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testget()  throws Throwable  { [EOL]       JavaVersion javaVersion0 = JavaVersion.getJavaVersion("1.3"); [EOL]       assertEquals(JavaVersion.JAVA_1_4, javaVersion0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlength()  throws Throwable  { [EOL]       String[] stringArray0 = StringUtils.splitByCharacterTypeCamelCase((String) null); [EOL]        [EOL]       String string0 = StringUtils.replace((String) null, "Y~6!=!!oLYiu=(m3DGV", (String) null, 3520); [EOL]        [EOL]       int int0 = StringUtils.length((CharSequence) null); [EOL]        [EOL]       int int1 = StringUtils.indexOf((CharSequence) "Y~6!=!!oLYiu=(m3DGV", 267); [EOL]        [EOL]       String string1 = StringUtils.repeat((String
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoComparison()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]        [EOL]       byte[] byteArray0 = new byte[7]; [EOL]       byte[] byteArray1 = new byte[7]; [EOL]       compareToBuilder0.append(byteArray0, byteArray1); [EOL]       assertEquals((-1), compareToBuilder0.toComparison()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseClassName()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.NO_FIELD_NAMES_STYLE.setSummaryObjectStartText("["); [EOL]       assertTrue(standardToStringStyle0.isUseClassName()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringStyle toStringStyle0 = ToStringBuilder.getDefaultStyle(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0, toStringStyle0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append("", (-40L)); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisShutdown()  throws Throwable  { [EOL]       ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2105); [EOL]        [EOL]       TimeUnit timeUnit0 = TimeUnit.DAYS; [EOL]       TimedSemaphore timedSemaphore0 = new TimedSemaphore(scheduledThreadPoolExecutor0, 2105, timeUnit0, 2105); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]        [EOL]       timedSemaphore0.acquire(); [EOL]       assertFalse(timedSemaphore0.isShutdown()); [EOL]        [EOL]     
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       StrBuilder strBuilder0 = new StrBuilder(); [EOL]       strBuilder0.build(); [EOL]       StrMatcher.TrimMatcher strMatcher_TrimMatcher0 = new StrMatcher.TrimMatcher(); [EOL]       char[] charArray0 = new char[4]; [EOL]       charArray0[0] = 'W'; [EOL]       charArray0[1] = '#'; [EOL]       charArray0[2] = 'U'; [EOL]       charArray0[3] = 'S'; [EOL]       StrMatcher strMatcher0 = StrMatcher.charSetMatcher(charArray0); [EOL]  
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Object object0 = new Object(); [EOL]       ToStringBuilder toStringBuilder0 = new ToStringBuilder(object0); [EOL]       ToStringBuilder toStringBuilder1 = toStringBuilder0.append((int) (short)0); [EOL]       assertSame(toStringBuilder1, toStringBuilder0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testsetDays()  throws Throwable  { [EOL]       MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0); [EOL]       Date date0 = DateUtils.truncate((Object) mockGregorianCalendar0, 10); [EOL]       Date date1 = DateUtils.setYears(date0, 14); [EOL]       assertEquals("Wed Dec 31 00:00:00 GMT 2", date1.toString()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testchomp()  throws Throwable  { [EOL]       StringUtils.uncapitalize(""); [EOL]       StringUtils.splitByWholeSeparator("", "A{M+8", 1676); [EOL]       String string0 = StringUtils.LF; [EOL]       StringUtils.splitByWholeSeparator("", "{}"); [EOL]       StringUtils.chomp("{}", ""); [EOL]       StringUtils.substringBetween("", "(/rB[*", ""); [EOL]       String string1 = StringUtils.repeat("", "{}", 1676); [EOL]       StringUtils.leftPad("^c}e!xVF=(0#(14OT", 1676, "org
@Test(timeout = 4000) [EOL]   public void testgetEscapeChar()  throws Throwable  { [EOL]       HashMap<String, Object> hashMap0 = new HashMap<String, Object>(); [EOL]       StrLookup<Object> strLookup0 = StrLookup.mapLookup((Map<String, Object>) hashMap0); [EOL]       StrSubstitutor strSubstitutor0 = new StrSubstitutor(strLookup0); [EOL]       StrBuilder strBuilder0 = new StrBuilder(0); [EOL]       boolean boolean0 = strSubstitutor0.replaceIn(strBuilder0); [EOL]       assertEquals('$', strSubstitutor0.getEscapeChar()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFirstContextValue()  throws Throwable  { [EOL]       MockThrowable mockThrowable0 = new MockThrowable("Exception Context:\n"); [EOL]       ContextedRuntimeException contextedRuntimeException0 = new ContextedRuntimeException("Exception Context:\n", mockThrowable0); [EOL]       Object object0 = new Object(); [EOL]       ContextedRuntimeException contextedRuntimeException1 = contextedRuntimeException0.addContextValue("Exception Context:\n", object0); [EOL]       Object object1 = contextedRuntimeException1.getFirstContextValue("Exception Context:\n"); [EOL]       assertSame(object1, object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testlastIndexOf()  throws Throwable  { [EOL]       char[] charArray0 = new char[1]; [EOL]       int int0 = ArrayUtils.lastIndexOf(charArray0, 'd'); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testmax()  throws Throwable  { [EOL]       float float0 = NumberUtils.max(0.0F, 0.0F, 0.0F); [EOL]       assertEquals(0.0F, float0, 0.01F); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       BasicThreadFactory.Builder basicThreadFactory_Builder0 = new BasicThreadFactory.Builder(); [EOL]       BasicThreadFactory basicThreadFactory0 = basicThreadFactory_Builder0.build(); [EOL]       Integer integer0 = basicThreadFactory0.getPriority(); [EOL]       assertNull(integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testindexOf()  throws Throwable  { [EOL]       boolean[] booleanArray0 = new boolean[8]; [EOL]       int int0 = ArrayUtils.indexOf(booleanArray0, true); [EOL]       assertEquals((-1), int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisMatch()  throws Throwable  { [EOL]       StrMatcher strMatcher0 = StrMatcher.singleQuoteMatcher(); [EOL]       char[] charArray0 = new char[5]; [EOL]       charArray0[0] = '_'; [EOL]       int int0 = strMatcher0.isMatch(charArray0, 0, 1920, 1920); [EOL]       assertEquals(0, int0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getFieldSeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getArrayStart(); [EOL]       assertEquals("<size=", standardToStringStyle0.getSizeStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testescapeCsv()  throws Throwable  { [EOL]       String string0 = StringEscapeUtils.escapeCsv(""); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetFieldNameValueSeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       standardToStringStyle0.setFieldNameValueSeparator(""); [EOL]       String string0 = standardToStringStyle0.getFieldNameValueSeparator(); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSummaryObjectStartText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = ToStringStyle.isRegistered(standardToStringStyle0); [EOL]       assertEquals("<", standardToStringStyle0.getSummaryObjectStartText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testbuild()  throws Throwable  { [EOL]       CompareToBuilder compareToBuilder0 = new CompareToBuilder(); [EOL]       assertEquals(0, (int)compareToBuilder0.build()); [EOL]        [EOL]       compareToBuilder0.append((-1), (-268)); [EOL]       compareToBuilder0.append((byte[]) null, (byte[]) null); [EOL]       assertEquals(1, (int)compareToBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisEmpty()  throws Throwable  { [EOL]       String string0 = StringUtils.substringBeforeLast("2UAHRJOhlI8)[^", ", Length: 0"); [EOL]        [EOL]       CharSequence[] charSequenceArray0 = new CharSequence[2]; [EOL]       charSequenceArray0[0] = (CharSequence) "2UAHRJOhlI8)[^"; [EOL]       charSequenceArray0[1] = (CharSequence) ", Length: 0"; [EOL]       boolean boolean0 = StringUtils.startsWithAny("", charSequenceArray0); [EOL]        [EOL]       Stack<Object> stack0 = new Stack<Object>(); [EOL] 
@Test(timeout = 4000) [EOL]   public void testisIgnoreEmptyTokens()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getTSVInstance("Invaid startIndex: "); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]        [EOL]       boolean boolean0 = strTokenizer0.hasNext(); [EOL]       //  // Unstable assertion: assertFalse(strTokenizer0.isIgnoreEmptyTokens()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoByte()  throws Throwable  { [EOL]       byte byte0 = NumberUtils.toByte("9"); [EOL]       assertEquals((byte)9, byte0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisArrayContentDetail()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       String string0 = standardToStringStyle0.getNullText(); [EOL]       assertTrue(standardToStringStyle0.isArrayContentDetail()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisUseFieldNames()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       boolean boolean0 = standardToStringStyle0.isUseIdentityHashCode(); [EOL]       assertTrue(standardToStringStyle0.isUseFieldNames()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       String string0 = ObjectUtils.toString((Object) null); [EOL]       assertEquals("", string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAppendTransients()  throws Throwable  { [EOL]       String[] stringArray0 = new String[1]; [EOL]       ReflectionToStringBuilder reflectionToStringBuilder0 = new ReflectionToStringBuilder("<null>"); [EOL]       reflectionToStringBuilder0.setExcludeFieldNames(stringArray0); [EOL]       reflectionToStringBuilder0.getExcludeFieldNames(); [EOL]       assertFalse(reflectionToStringBuilder0.isAppendTransients()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testcapitalize()  throws Throwable  { [EOL]       char[] charArray0 = new char[0]; [EOL]       String string0 = WordUtils.capitalizeFully((String) null, charArray0); [EOL]       assertNull(string0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testnextIndex()  throws Throwable  { [EOL]       StrTokenizer strTokenizer0 = StrTokenizer.getCSVInstance(); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]        [EOL]       char[] charArray0 = new char[7]; [EOL]       charArray0[1] = ','; [EOL]       StrTokenizer strTokenizer1 = strTokenizer0.reset(charArray0); [EOL]       assertEquals(0, strTokenizer0.nextIndex()); [EOL]       assertEquals(0, strTokenizer1.nextIndex()); [EOL]        [EOL]       String string0 = strTokenizer0.nextToken();
@Test(timeout = 4000) [EOL]   public void testclone()  throws Throwable  { [EOL]       double[] doubleArray0 = ArrayUtils.clone((double[]) null); [EOL]       assertNull(doubleArray0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testtoString()  throws Throwable  { [EOL]       Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer()); [EOL]       doReturn((String) null).when(comparator0).toString(); [EOL]       doReturn(0, 0, 0, 0).when(comparator0).compare(anyString() , anyString()); [EOL]       Range<String> range0 = Range.between("", "r.Ngw'UzA", comparator0); [EOL]       Range<String> range1 = Range.between("fw", "r.Ngw'UzA"); [EOL]       Comparator<String> comparator1 = range0.getComparator(); [EOL]       Range<
@Test(timeout = 4000) [EOL]   public void testgetArraySeparator()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       Long long0 = new Long(266L); [EOL]       standardToStringStyle0.MULTI_LINE_STYLE.appendInternal(stringBuffer0, ">", long0, true); [EOL]       assertEquals(",", standardToStringStyle0.getArraySeparator()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testremoveAll()  throws Throwable  { [EOL]       int[] intArray0 = new int[0]; [EOL]       int[] intArray1 = ArrayUtils.removeAll(intArray0, intArray0); [EOL]       assertEquals(0, intArray1.length); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testgetSizeEndText()  throws Throwable  { [EOL]       StandardToStringStyle standardToStringStyle0 = new StandardToStringStyle(); [EOL]       StringBuffer stringBuffer0 = new StringBuffer(); [EOL]       standardToStringStyle0.SHORT_PREFIX_STYLE.appendToString(stringBuffer0, ">"); [EOL]       assertEquals(">", standardToStringStyle0.getSizeEndText()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testhashCode()  throws Throwable  { [EOL]       HashCodeBuilder hashCodeBuilder0 = new HashCodeBuilder(); [EOL]       hashCodeBuilder0.append((float[]) null); [EOL]       assertEquals(629, (int)hashCodeBuilder0.build()); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testequals()  throws Throwable  { [EOL]       String string0 = StringUtils.center("ZC6Axe1?SmzqL8x", 470, (String) null); [EOL]        [EOL]       String string1 = StringUtils.substring((String) null, 2969, (-900)); [EOL]        [EOL]       int int0 = StringUtils.ordinalIndexOf("ZC6Axe1?SmzqL8x", (CharSequence) null, 13); [EOL]        [EOL]       int int1 = StringUtils.indexOfAny((CharSequence) null, "i+PQL`~wAN9Vf0"); [EOL]        [EOL]    
@Test(timeout = 4000) [EOL]   public void testgetValue()  throws Throwable  { [EOL]       MutableInt mutableInt0 = new MutableInt(); [EOL]       Integer integer0 = mutableInt0.getValue(); [EOL]       assertEquals(0, (int)integer0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testfirstNonNull()  throws Throwable  { [EOL]       Object[] objectArray0 = new Object[7]; [EOL]       Object object0 = ObjectUtils.firstNonNull(objectArray0); [EOL]       assertNull(object0); [EOL]   } [EOL]  [EOL]
@Test(timeout = 4000) [EOL]   public void testisAscii()  throws Throwable  { [EOL]       boolean boolean0 = CharUtils.isAsciiPrintable('\uDE7C'); [EOL]       assertFalse(boolean0); [EOL]   } [EOL]  [EOL]
