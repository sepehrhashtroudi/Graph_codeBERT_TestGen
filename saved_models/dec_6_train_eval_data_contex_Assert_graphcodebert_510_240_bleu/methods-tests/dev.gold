[EOL] [EOL] // Especially should not be "api4" as provided by the inherited Endpoint4. [EOL] assertEquals("api", config.getName())
[EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_SERVICE_NAME, "serviceName"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_USER_NAME, "userName"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_IMPERSONATOR, "impersonator"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_IP_ADDRESS, "ipAddress"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_OPERATION, "operation"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_EVENT_TIME, "eventTime"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_OPERATION_TEXT, "operationText"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_ALLOWED, "allowed"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_OBJECT_TYPE, "objectType"); [EOL] assertEntryEquals(rootNode, Constants.LOG_FIELD_COMPONENT, "component"); [EOL] assertEntryEquals(rootNode, "resourceType1", "resourceName1"); [EOL] assertEntryEquals(rootNode, "resourceType2", "resourceName2"); [EOL] assertEntryEquals(rootNode, "resourceType3", "resourceName3"); [EOL] assertEntryEquals(rootNode, "resourceType4", "resourceName4")
[EOL] 		Assert.assertNotNull(rs.getLong("id")); [EOL] 		Assert.assertEquals(log.getContent(), rs.getString("content")); [EOL] 		Assert.assertEquals(log.getMobile(), rs.getString("mobile")); [EOL] 		Assert.assertEquals(log.getPriority().intValue(), rs.getInt("priority")); [EOL] 		Assert.assertEquals(log.getType(), rs.getString("type")); [EOL] 		Assert.assertNotNull(rs.getDate("send_date")); [EOL] 		Assert.assertEquals(log.getFailure() + 1, rs.getInt("failure"))
[EOL] assertNull(observation)

[EOL] [EOL] 		Assert.assertTrue( [EOL] 			_workflowTaskPermissionChecker.hasPermission( [EOL] 				RandomTestUtil.randomLong(), [EOL] 				mockCompletedWorkflowTask( [EOL] 					Role.class.getName(), permissionCheckerRoleIds[0]), [EOL] 				mockPermissionChecker( [EOL] 					RandomTestUtil.randomLong(), permissionCheckerRoleIds, [EOL] 					false, false, false)))
[EOL] [EOL] assertThat(destinationProvider.getDestination(destinationName), is(destination))
[EOL] assertEquals(0, info.getHeadersSetInCallback().size()); [EOL] assertNotNull(info.getRequestId())
[EOL] [EOL] assertThat(subtitle.getEventTimeCount()).isEqualTo(0); [EOL] assertThat(subtitle.getCues(0).isEmpty()).isTrue()
[EOL] 		 [EOL] 		//Assert [EOL] 		assertEquals(pixAddMessageMock, actualRet)
@Test [EOL] 	public void create(){ [EOL] 		assertSame(FieldName.create("x"), FieldName.create("x"))
[EOL] assertEquals(1, document.nodes.size()); [EOL] assertEquals("script", script.name); [EOL] assertTrue(script.nodes.isEmpty())
[EOL] [EOL] assertThat(matcher.matches(alert("website", "PATH_NOT_FOUND", Severity.WARN, "trace"))).isTrue(); [EOL] assertThat(matcher.matches(alert("frontend-website", "FORBIDDEN", Severity.WARN, "trace"))).isTrue(); [EOL] assertThat(matcher.matches(alert("customer-service", "FORBIDDEN", Severity.WARN, "trace"))).isFalse(); [EOL] assertThat(matcher.matches(alert("website", "METHOD_NOT_ALLOWED", Severity.WARN, "trace"))).isFalse(); [EOL] assertThat(matcher.matches(alert("customer-service", "VALIDATION_ERROR", Severity.WARN, "trace"))).isTrue(); [EOL] assertThat(matcher.matches(alert("customer-service", "UNAUTHORIZED", Severity.WARN, "trace"))).isTrue()
[EOL] [EOL] assertThat(errorMessage.getType()).isEqualTo("IllegalArgumentException")
@Test [EOL] void getParent() { [EOL] assertFalse(instance().getParent().isPresent())
[EOL] [EOL] 		assertNotNull(opBlockChain1.replicateBlock(opBlock)); [EOL] 		assertTrue(blcDB.rebaseOperations(opBlockChain1)); [EOL] [EOL] 		assertEquals(blcDB.getParent(), opBlockChain1)
[EOL] [EOL] // 結果検証 [EOL] assertNotNull(result)
[EOL] [EOL] // then [EOL] assertNotNull(message); [EOL] assertEquals("{\"errors\":[ {\"message\":\"Internal PaasManager Server error\",\"code\":500}]}", message)
[EOL] [EOL] try { [EOL] helper.assertObjectTypesToBindExist(definitions, "property")
@Test [EOL] void get2() { [EOL] assertEquals(m2, instance.get2())
[EOL] assertTrue(this.userRepository.findByLogin("testtest").isPresent()); [EOL] assertFalse(this.userRepository.findByLogin("testtest").isPresent())
[EOL] [EOL] // Note: this might fail when logonTime is summer time and current time is not [EOL] assertEquals("2 days, 14:44:06", howLongFromNow)
@Test [EOL] void get10() { [EOL] assertEquals(m10, instance.get10())
[EOL] assertThat(map).containsExactly(1, "one", 1, "uno")
[EOL] 		assertEquals(true, validateCall)
[EOL] assertEquals( "printer", sra.getPrinter() )
[EOL] assertEquals(1, lists.size()); [EOL] assertEquals(lists.get(0), list("one", "two", "three")); [EOL] assertEquals(2, lists.size()); [EOL] assertEquals(lists.get(1), list("four", "five"))
[EOL] 		Assert.assertEquals(DocumentType.FOREIGNER_E_PLUS, identity.getDocumentType()); [EOL] [EOL] 		assertNotNull(identity.getDuplicate()); [EOL] 		Assert.assertEquals(SpecialOrganisation.UNSPECIFIED, identity.getSpecialOrganisation())
[EOL] assertEquals(location, result.get("Location")); [EOL] assertEquals("EXTERNAL_TABLE", result.get("Table Type").trim()); [EOL] assertEquals("string", result.get("day")); [EOL] assertEquals("string", result.get("app_id"))
@Test [EOL] public void emptyBrowserString() throws Exception { [EOL] [EOL] Assert.assertFalse("empty string", StringUtils.isFromBrowser(""))
@Test [EOL] public void testSetRtfAvailable() throws Exception { [EOL] assertTrue( roh.isRtfAvailable() ); [EOL] assertFalse( roh.isRtfAvailable() )
[EOL] assertThat(object.toString()).isEqualTo(expected)
@Test [EOL] void testReduce() { [EOL] assertEqualsReducing(s -> s.reduce(3, Long::sum))
[EOL] assertEquals("value", values.get(0)); [EOL] assertEquals("SELECT FROM collection WHERE NOT (name = ?)", sql)
[EOL] [EOL] assertThat(mappingCache.size(), is(1)); [EOL] [EOL] assertThat(mappingCache.get(mediaType), is(schemaId))
[EOL] [EOL] assertThat(listener.getChanged()).containsExactly(monitoredFolder.resolve("aFile"))
[EOL] Assert.assertEquals(ViewEntityTest.class.getClassLoader(), viewDefinition.getClassLoader())
[EOL] assertEquals(expected, decode)
[EOL] 		assertEquals(2, d.getCols()); [EOL] 		assertEquals(2, d.getRows()); [EOL] 		assertEquals(2.9983328701, d.get(0, 0), 1e-10); [EOL] 		assertEquals(-1.1, d.get(0, 1), 1e-10); [EOL] 		assertEquals(0.0, d.get(1, 0), 1e-10); [EOL] 		assertEquals(1.0, d.get(1, 1), 1e-10)


[EOL] assertNull(XMLUtils.unescape(content))



[EOL] [EOL] // the heartbeat test passed if actual configs is populated [EOL] Assert.assertNotNull(serviceComponentHost1.getActualConfigs()); [EOL] Assert.assertEquals(serviceComponentHost1.getActualConfigs().size(), 1); [EOL] Assert.assertNotNull(serviceComponentHost2.getActualConfigs()); [EOL] Assert.assertEquals(serviceComponentHost2.getActualConfigs().size(), 1)
[EOL] 		Assert.assertEquals( f, resolvedFile.getFile()); [EOL] 		Assert.assertFalse( resolvedFile.existedBefore())
[EOL] assertThat( ftMappings.size(), is( 1 ) ); [EOL] [EOL] assertThat( mappings.size(), is( 5 ) ); [EOL] assertThat( featureCDepth0Mapping.size(), is( 3 ) ); [EOL] assertThat( featureDDepth0, is( nullValue() ) ); [EOL] assertThat( featureCDepth1, is( nullValue() ) ); [EOL] assertThat( featureDDepth1Mapping.size(), is( 3 ) ); [EOL] assertThat( featureCDepth2Mapping.size(), is( 3 ) ); [EOL] assertThat( featureDDepth2, is( nullValue() ) ); [EOL] assertThat( featureCDepth3, is( nullValue() ) ); [EOL] assertThat( featureDDepth3Mapping.size(), is( 3 ) )

[EOL] assertTrue(dataClientWrapper.createBulkRead(TABLE_ID) instanceof BulkReadClassicApi)
[EOL] assertEquals(expectedResposne, oidcEntityResponse)
[EOL] assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType()); [EOL] assertEquals("incorrect number of elements", 1, json.length()); [EOL] assertEquals("incorrect number of elements", 1, appAttempts.length()); [EOL] assertEquals("incorrect number of elements", 5, array.length())
[EOL] assertEquals("Hello, World!", output[i].toString().trim())
[EOL] assertEquals(genericsType, [EOL] ReflectionUtils.unserializeType("org.xwiki.component.descriptor.ComponentRole<java.lang.String>", [EOL] Thread.currentThread().getContextClassLoader()))

@Test [EOL] void secureSlashes() { [EOL] assertThat(Obfuscate.secure("/", "/")).isEqualTo("/"); [EOL] assertThat(Obfuscate.secure("//", "/")).isEqualTo("//"); [EOL] assertThat(Obfuscate.secure("///", "/")).isEqualTo("///")
[EOL] 		Assert.assertNotNull( provider.getContext( null )); [EOL] 		Assert.assertNotNull( provider.getContext( String.class ))
[EOL] assertEquals("Gets title from context using step id", "title", title); [EOL] assertEquals("Gets empty string when no title id on step", "", noTitle)
[EOL] [EOL] assertThat(stateChangedEvent.getCommandId(), is(commandId)); [EOL] assertThat(stateChangedEvent.getSystemCommand(), is(suspensionCommand)); [EOL] assertThat(stateChangedEvent.getCommandState(), is(COMMAND_FAILED)); [EOL] assertThat(stateChangedEvent.getStatusChangedAt(), is(stateChangedAt)); [EOL] assertThat(stateChangedEvent.getMessage(), is("SUSPEND failed. The following Suspendables failed: [Suspendable_1, Suspendable_2]"))
[EOL] Assert.assertNotNull(lastEvent); [EOL] Assert.assertEquals(Resource.Type.Service, lastEvent.getResourceType()); [EOL] Assert.assertEquals(ResourceProviderEvent.Type.Delete, lastEvent.getType()); [EOL] Assert.assertEquals(predicate, lastEvent.getPredicate()); [EOL] Assert.assertNull(lastEvent.getRequest())
@Test public void testSupportsPagination() throws Exception { [EOL] Assert.assertEquals( false, fastXLSXOutput.supportsPagination() )

[EOL] [EOL] assertEquals(expected, cfg)

[EOL] Assert.assertEquals(newList.get(0).get("name"), "2012-12-30"); [EOL] Assert.assertEquals(newList.get(1).get("name"), "2014-01-02"); [EOL] Assert.assertEquals(newList.get(2).get("name"), "01-02-2014"); [EOL] Assert.assertEquals(newList.size(), 4)
[EOL] assertThat(errors, contains("workflow id cannot be empty"))
i++) { [EOL] assertEquals(remains--, instance.estimateSize())
[EOL] [EOL] assertFalse( environmentManager.listeners.contains( listener ) )
@Test [EOL] void testCamelCaseToDash() { [EOL] assertEquals("abc-abc",camelCaseToDash("abcAbc"))
[EOL] assertThatThrownBy(() -> policy.savePolicies()).isInstanceOf(Exception.class)

[EOL] [EOL] assertEquals((3 * 365 + 1) * TimeUtil.SECONDS_PER_DAY, seconds, 0.0)
[EOL] 		assertEquals(h1.toString(), p.toString()); [EOL] 		assertEquals(h1.toJsonObject(), p.toJsonObject()); [EOL] 		assertEquals(h1.getMessageType(), p.getMessageType()); [EOL] 		assertEquals(h1.getSeq(), p.getSeq()); [EOL] 		assertEquals(h1.getStamp(), p.getStamp()); [EOL] 		assertEquals(h1.getFrameID(), p.getFrameID()); [EOL] 		assertNotSame(h1, p); [EOL] 		assertNotSame(h1.toString(), p.toString()); [EOL] 		assertNotSame(h1.toJsonObject(), p.toJsonObject())
[EOL] // should have already failed [EOL] Assert.assertThat(fieldType, nullValue())
[EOL] Assert.assertTrue(identityDescriptor.shouldInclude(context)); [EOL] Assert.assertFalse(identityDescriptor.shouldInclude(context))
[EOL] [EOL] assertSame(expected, CRest.oauth("a","b","c","d", "e", "f"))
[EOL] assertThat(inventory.getAllPurchases()).hasSize(1); [EOL] assertThat(inventory.getAllOwnedSkus()).hasSize(1); [EOL] assertThat(inventory.getSkuDetails()).isEmpty()
[EOL] assertTuple(mapper.apply(0), 21)

[EOL] } catch (ExecutionException e) { [EOL] Assert.assertEquals(InvalidArgumentException.class, e.getCause().getClass()); [EOL] Assert.assertEquals(StatusCode.Code.INVALID_ARGUMENT, apiException.getStatusCode().getCode())

[EOL] // UTF8 [EOL] Assert.assertArrayEquals(new byte[] { (byte) 0xe8, (byte) 0xaa, (byte) 0xb0, 0x20 }, codec.encode("誰", 32)); [EOL] Assert.assertArrayEquals(new byte[] { (byte) 0xb3, (byte) 0xc2, (byte) 0x20, 0x20 }, codec.encode("陈", 32)); [EOL] Assert.assertArrayEquals(new byte[] { (byte) 0xb3, (byte) 0xc2, (byte) 0x00, 0x00 }, codec.encode("陈", 32))
[EOL] [EOL] Assert.assertEquals( [EOL] "With UGI cache, two UGIs for the same user should be same", ugi11, [EOL] ugi12); [EOL] [EOL] Assert.assertEquals( [EOL] "With UGI cache, two UGIs for the same user should be same", url21, [EOL] url22); [EOL] [EOL] Assert.assertNotEquals( [EOL] "With UGI cache, two UGIs for the different user should not be same", [EOL] ugi11, url22); [EOL] Assert.assertNotEquals(msg, ugi11, ugi12); [EOL] Assert.assertNotEquals(msg, url21, url22); [EOL] [EOL] Assert.assertNotEquals( [EOL] "With UGI cache, two UGIs for the different user should not be same", [EOL] ugi11, url22)
[EOL] [EOL] assertTrue(synchronizer.handlesMoveColumnsTo(Collections.singletonList(md0)))

[EOL] [EOL] assertThat(input.startsWith(data)).isTrue(); [EOL] [EOL] assertThat(input.startsWith(data)).isTrue(); [EOL] [EOL] assertThat(input.startsWith(data)).isTrue(); [EOL] assertThat(output).isEqualTo(input)
[EOL] assertNotNull(e); [EOL] assertTrue(e.invoke(1, classMapper))
[EOL] doThrow(InvalidArgumentException.class).when(objectTypeHandler).assertObjectTypeNotExists(request.getName())

@Test [EOL] void apply() { [EOL] assertEquals(Tuples.of(0, 1, 2, 3, 4, 5, 6, 7), instance.apply(0))
[EOL] assertNotNull(result); [EOL] assertEquals(BigDecimal.valueOf(123456), result)
[EOL] [EOL] assertTrue(isGuidedDecisionTableEditable)
[EOL] [EOL] assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(Long.class, "[1, 2, 1.0];// Decimals [EOL] // are [EOL] // ignored [EOL] assertEqualIntervalMaps(expected, IntervalsParser.parseIntervalMap(long.class, "[1, 2, 1.0]
[EOL] [EOL] 		Assert.assertEquals(BigDecimal.ZERO, result)

[EOL] [EOL] 		Assert.assertEquals(0, attributesJSONObject.length())

[EOL] assertNotNull(entity); [EOL] assertEquals(factID, entity.getFactID()); [EOL] assertEquals(record.getId(), entity.getId()); [EOL] assertEquals(record.getSubjectID(), entity.getSubjectID()); [EOL] assertEquals(record.getOriginID(), entity.getOriginID()); [EOL] assertEquals(record.getTimestamp(), entity.getTimestamp())
[EOL] [EOL] assertThat(data) [EOL] .hasSize(1 + 2 * history.size())


[EOL] assertThat(properties.getProperty(AutomonPropertiesLoader.CONFIGURED_OPEN_MON)).isEmpty()
[EOL] [EOL] assertEquals( InternalBookmark.parse( bookmarkString ), await( future ) )

[EOL] Assert.assertNull("PageFilterAdapter should not return a Filters.Filter.", adaptedFilter); [EOL] Assert.assertEquals(20, query.toProto(requestContext).getRowsLimit())
@Test [EOL] void skipNegative() { [EOL] assertThrows(IllegalArgumentException.class, () -> instance.skip(-1))
[EOL] 		} [EOL] 		catch (IOException ioException2) { [EOL] 			Assert.assertSame(ioException1, ioException2); [EOL] 		} [EOL] [EOL] 		Assert.assertTrue(closeCalled.get())
[EOL] assertThat(instance.getModeOfInheritance(), equalTo(ModeOfInheritance.AUTOSOMAL_DOMINANT))
[EOL] [EOL] 		Assert.assertNotNull(responseAct); [EOL] 		Assert.assertEquals(responseExp.getStatusCode(), responseAct.getStatusCode())

[EOL] Assert.assertFalse("Static information log has no content", contents.isEmpty()); [EOL] assertTrue(checkResult(params, contents.get(0)))
[EOL] assertFalse(methodListFoo.path("request").has("parameters")); [EOL] assertTrue(methodGetFoo.path("request").has("parameters")); [EOL] assertFalse(0 == methodGetFoo.path("request").path("parameters").size()); [EOL] assertFalse(methodInsertFoo.path("request").has("parameters"))
[EOL] 		Assert.assertNotNull(new JsonXMLBinder().readObject(SampleRootElement.class, config, context, new StringReader("null")))
[EOL] [EOL] assertEquals("ShardPos Size", 2, node.getShardManager().loadInitialShardPositions().size()); [EOL] assertNotEquals("Record Seq No in Shard Id 1", "", e.getValue()); [EOL] assertNotEquals("Record Seq No in Shard Id 2", "", e.getValue()); [EOL] // Check results [EOL] assertEquals("Tuple count", totalCount, collectedTuples.size())
[EOL] [EOL] assertThat(LambdaLoggerUtils.isLogLevelEnabled(underlyingLogger, Level.WARN, null)).isFalse()
[EOL] assertThat(output, is(output))
@Test [EOL] public void testEmpty_Message() throws BitcoinURIParseException { [EOL] assertNull(new BitcoinURI(MAINNET, BITCOIN_SCHEME + ":" + MAINNET_GOOD_ADDRESS [EOL] + "?message=").getMessage())
[EOL] [EOL] // then [EOL] [EOL] assertTrue(propertyInfo.getPropertyAmbariUpgradeBehavior().isAdd()); [EOL] assertFalse(propertyInfo.getPropertyAmbariUpgradeBehavior().isUpdate()); [EOL] assertFalse(propertyInfo.getPropertyAmbariUpgradeBehavior().isDelete())
[EOL] // ok because this is a query that returned no rows [EOL] assertEquals(ResultStatus.STATUS.OK, result.getStatus().getStatus())

[EOL] [EOL] // do assert. [EOL] // not remove other value from MDC. [EOL] assertThat(MDC.getCopyOfContextMap().size(), is(2)); [EOL] assertThat(MDC.get("dummyKey"), is("dummyValue")); [EOL] assertThat(MDC.get("key"), is("value"))
@Test [EOL] public void testGenerateTimestamp() { [EOL] Assert.assertNotNull(Utils.generateTimestamp())

[EOL] [EOL] assertThat( styleMap.size(), is( 3 ) ); [EOL] assertThat( legendStyleMap.size(), is( 3 ) ); [EOL] assertThat( defaultLegendStyle.getName(), is( "simpleStyle" ) ); [EOL] assertThat( defaultLegendStyle.getLegendURL(), is( new URL( "http://test.de/legende.png" ) ) )
@Test [EOL] void testBytesNeededToHoldNumberThrowsWithNegative() { [EOL] 		assertThrows(IllegalArgumentException.class, () -> Utils.bytesNeededToHoldNumber(-123))

[EOL] assertEquals(refUtf8, out); [EOL] assertNotEquals(refUtf16, out)
@Test [EOL] public void testWithStdErrRedirection() throws Exception [EOL] { [EOL] assertNotNull( requestBuilder.withStdErrRedirection( OutputRedirection.RETURN ) )
[EOL] assertThat(file.getName()).isEqualTo(BASIC_FLOW_FILE); [EOL] assertThat(FileUtils.contentEquals(testYamlFile, file)).isTrue()
@Test [EOL] public void testIsOAuth2Token() { [EOL] for (String prefix : GoogleAuth.OAUTH2_TOKEN_PREFIXES) { [EOL] assertTrue(GoogleAuth.isOAuth2Token(prefix + "abc")); [EOL] assertFalse(GoogleAuth.isOAuth2Token("x" + prefix + "abc"))
[EOL] assertSoftly(softly -> { [EOL] softly.assertThat(c.compare(ld1, ld2)) [EOL] .isGreaterThan(0); [EOL] softly.assertThat(c.compare(ld2, ld1)) [EOL] .isLessThan(0); [EOL] softly.assertThat(c.compare(ld1, ld1)) [EOL] .isEqualTo(0)
[EOL] [EOL] 		Assert.assertNotNull(tuple); [EOL] 		Assert.assertEquals(2, tuple.size()); [EOL] 		Assert.assertEquals(TupleIteratorTest.tuple, tuple); [EOL] 		Assert.assertFalse(iterator.hasNext())
[EOL] // If no exception was thrown then the spec is build correctly. [EOL] assertThat(response.body().getTotalAddresses()).isEqualTo(7); [EOL] assertThat(response.body().getInvitationsSent()).isEqualTo(3); [EOL] assertThat(response.body().getAlreadyInvited()).containsExactly("kven.sever@example.net"); [EOL] assertThat(response.body().getInvalidAddresses()).containsExactly("@example.f"); [EOL] assertThat(response.body().getAlreadyMember().size()).isEqualTo(2)

[EOL] assertFalse(changes.has(History.HISTORIES)); [EOL] assertFalse(changes.has(Database.ChildTableColumn.synced.getColumnName())); [EOL] assertFalse(changes.has(Database.ChildTableColumn.last_updated_at.getColumnName())); [EOL] assertFalse(changes.has(Database.ChildTableColumn.last_synced_at.getColumnName())); [EOL] assertTrue(changedModel.has(History.HISTORIES)); [EOL] assertTrue(originalModel.has(History.HISTORIES))
[EOL] [EOL] assertEquals( host1, host ); [EOL] [EOL] assertFalse( host.equals( host1 ) )
[EOL] [EOL] // 返却値の確認 [EOL] assertEquals("aaa,aaa,aaa", result)

[EOL] [EOL] assertThat(variant, isAssignedTo(gene2))
[EOL] assertEquals(expected, actual.get())
[EOL] assertEquals(MediaType.APPLICATION_JSON + "
[EOL] assertThat(outputSettings.getOutputFormats(), equalTo((outputFormats)))
@Test [EOL] void get3() { [EOL] assertEquals(m3, instance.get3())
[EOL] [EOL] 		Assert.assertEquals(0, list.size())

[EOL] assertThat(returnedBuilder.builder).isSameAs(builder)

[EOL] assertNotNull(onNextEvents.get(0))
[EOL] } catch (RuntimeException e) { [EOL] assertThat(e, instanceOf(TransactionTimeoutException.class)); [EOL] assertThat(e.getCause(), instanceOf(IllegalMonitorStateException.class))


[EOL] [EOL] 		Assert.assertNotNull(vxKeyAct); [EOL] 		Assert.assertEquals(vxKeyAct, vxKeyExp); [EOL] 		Assert.assertEquals(vxKeyExp.getName(), vxKeyAct.getName())
[EOL] [EOL] 			assertEquals("orange_julius", user.getUsername()); [EOL] 			assertTrue(user.getAttributes().containsKey("email")); [EOL] 			assertEquals("Orange Julius", user.getAttributes().get("name"))
[EOL] assertFalse(peerAuth.authorizePeer())
[EOL] assertTrue(actual.get())
[EOL] assertThat(DistCpUtils.getRelativePath(root, child)).isEqualTo("/a")



[EOL] assertNull(resolver.getRequestHeader().getCredentials())


@Test [EOL] 	void singleNamed() throws Exception { [EOL] 		assertThat(storageMock.getAllExecutions()).isEmpty(); [EOL] [EOL] 		assertThat(executions.values()).containsExactlyInAnyOrder(managedQuery)
[EOL] assertEquals("ab\ufffda\ufffdc\ufffdbc", output.toString())
[EOL] [EOL] assertThat(groupA.getUsers()).extracting(User::getSystemName).containsExactly("user1"); [EOL] assertThat(groupB.getUsers()).extracting(User::getSystemName).containsExactly("user2"); [EOL] assertThat(groupD.getUsers()).extracting(User::getSystemName).containsExactly("user3"); [EOL] assertThat(groupC.getUsers()).hasSize(0)


[EOL] assertEquals(expResult, result, 0.0)
[EOL] [EOL] assertThat(reductions, notNullValue())
@Test [EOL] 	public void testShortConstructor() { [EOL] 		assertEquals((short) 127, i1.getData()); [EOL] [EOL] 		assertEquals("{\"data\":127}", i1.toString()); [EOL] [EOL] 		assertEquals(1, i1.toJsonObject().size()); [EOL] 		assertEquals(127, i1.toJsonObject().getInt(Int16.FIELD_DATA)); [EOL] [EOL] 		assertEquals(Int16.TYPE, i1.getMessageType())


[EOL] Assert.assertEquals(1, classes.size()); [EOL] Assert.assertEquals(1, classes.size()); [EOL] Assert.assertEquals(1, classes.size())
@Test [EOL] void get6() { [EOL] assertEquals(m6, instance.get6())

@Test [EOL] void get2() { [EOL] assertEquals(m2, instance.get2())
[EOL] Assert.assertTrue(HAUtilClient.isTokenForLogicalUri(tok2))
[EOL] [EOL] assertEquals(expectedTitles, [EOL] actualTitles)

[EOL] Assert.assertNotNull(map.get("ENV.IDENTITY_PROVIDER.simple ldap"))

[EOL] [EOL] assertTrue("Got point from " + WKT_POINT, point != null); [EOL] assertTrue("Point x correct", point.getCoordinate().x == 30); [EOL] assertTrue("Point y correct", point.getCoordinate().y == 10); [EOL] assertTrue("Got polygon from " + WKT_POLYGON, polygon != null)
[EOL] Assert.assertEquals("undertow", str); [EOL] Assert.assertEquals("hello undertow", str); [EOL] Assert.assertEquals("server-one", str); [EOL] Assert.assertEquals("hello server-one", str); [EOL] Assert.assertEquals("default-server", str); [EOL] Assert.assertEquals("hello default-server", str)
@Test [EOL] public void outOfRange() { [EOL] Truth.assertThat(createException(Code.OUT_OF_RANGE)).isInstanceOf(OutOfRangeException.class); [EOL] Truth.assertThat(createExceptionWithMessage(Code.OUT_OF_RANGE)) [EOL] .isInstanceOf(OutOfRangeException.class)

[EOL] [EOL] assertThat(testEvents.size()).as("Expecting 1 event").isEqualTo(1); [EOL] [EOL] assertThat(testEvents.get(0).getCount()).isEqualTo(1L)
[EOL] [EOL] // Ensure that the payload element is accessible [EOL] assertEquals(payloadQName, msgCtx.getEnvelope().getBody().getFirstElement().getQName()); [EOL] [EOL] // Ensure that the body isn't fully build to support the use of deferred building [EOL] assertFalse(msgCtx.getEnvelope().getBody().isComplete())
[EOL] Assert.assertEquals(serverList.getSpecs(), Arrays.asList(new ServerSpec("a", 1, STANDARD))); [EOL] Assert.assertEquals(serverList.getSpecs(), Arrays.asList(new ServerSpec("a", 1, STANDARD), new ServerSpec("b", 2, STANDARD))); [EOL] Assert.assertEquals(serverList.getSpecs(), Arrays.asList(new ServerSpec("b", 2, STANDARD), new ServerSpec("a", 1, STANDARD))); [EOL] Assert.assertNotEquals(serverList.getSpecs(), Arrays.asList(new ServerSpec("a", 1, STANDARD), new ServerSpec("b", 2, STANDARD)))
[EOL] 		assertTrue(sut.isDocumentExtensionPermitted(file))



@Test [EOL] void getState() { [EOL] assertEquals(STATE, instance.getState())
[EOL] [EOL] 			assertEquals(toBeSuspendedExecutionGraph, executionGraphFuture.get()); [EOL] [EOL] 			assertEquals(accessExecutionGraph, executionGraphFuture2.get()); [EOL] [EOL] 			assertEquals(accessExecutionGraph, executionGraphFuture3.get())
[EOL] } catch (final FunctionalException e) { [EOL] // Verify the test [EOL] assertEquals(fe, e)
[EOL] [EOL] 		Assert.assertEquals(array, new int[]{ [EOL] 			1, 2, 3, 4, 5, 6, 7, 8, 9, [EOL] 			1, 2, 3, 4, 5, 6, 7, 8, 9, [EOL] 			1, 2, 3, 4, 5, 6, 7, 8, 9, [EOL] 			1, 2, 3, 4, 5, 6, 7, 8 [EOL] 		})

[EOL] assertContains("<p>Apache Tika - \uCEE8\uD150\uCE20", result.xml); [EOL] assertEquals( [EOL] "application/x-hwp-v5", metadata.get(Metadata.CONTENT_TYPE)); [EOL] assertEquals("Apache Tika", metadata.get(TikaCoreProperties.TITLE)); [EOL] assertEquals("SooMyung Lee", metadata.get(TikaCoreProperties.CREATOR)); [EOL] [EOL] assertContains("Apache Tika", result.xml.toString())
@Test [EOL] void documentHasId() { [EOL] assertFalse(entityCodec.documentHasId(new TestEntity())); [EOL] assertTrue(entityCodec.documentHasId(entity))

[EOL] [EOL] 		// then [EOL] 		assertThat(result).containsOnly(FirstComponent.class, InnerClasses.InnerComponent.class)
[EOL] assertThat(jannovarDataFactory, instanceOf(JannovarDataFactory.class))
@Test [EOL] public void requiresNonEmptyString() { [EOL] Assertions.assertThrows(RuntimeException.class, () -> MediaType.from(""))
[EOL] assertTrue( listener.isFirstPageMode() ); [EOL] assertFalse( listener2.isFirstPageMode() )



[EOL] [EOL] 		Assert.assertEquals(expectedSB.toString(), pictureTag)
[EOL] [EOL] // Currently nothing happens - not even an error. [EOL] assertEquals(0, mList.size())


[EOL] assertNotNull(filteredList); [EOL] assertEquals(2, filteredList.size()); [EOL] [EOL] assertSamplePointAt(100, 100, 0, filteredList); [EOL] assertSamplePointAt(106, 107, 1, filteredList)
[EOL] [EOL] assertHomeFolderLocation("fred", "fr/fred"); // unchanged [EOL] assertTrue("Expected the empty parent 'a/b/c' to still exist as original " + [EOL] "root was unknown, because the original home folder provider was not set.", [EOL] exists("a/b/c"))
[EOL] [EOL] assertEquals( expectedMinX, [EOL] b.getX(), [EOL] 0.0 ); [EOL] assertEquals( BOUNDS_MIN_Y, [EOL] b.getY(), [EOL] 0.0 ); [EOL] assertEquals( BOUNDS_MAX_X - expectedMinX, [EOL] b.getWidth(), [EOL] 0.0 ); [EOL] assertEquals( BOUNDS_MAX_Y - BOUNDS_MIN_Y, [EOL] b.getHeight(), [EOL] 0.0 )
[EOL] [EOL] assertThat(ugiResult.getUserName(), is(userName)); [EOL] assertThat(ugiResult.getRealUser(), is(currentUserUgi)); [EOL] assertThat( [EOL] ugiResult.getAuthenticationMethod(), [EOL] is(UserGroupInformation.AuthenticationMethod.PROXY))
[EOL] [EOL] assertThat(importer).isEqualTo(pageArtifactImporter)
@Test [EOL] public void decode() throws Exception { [EOL] assertEquals(codec.decode(TO_BE_DECODE), TO_BE_ENCODE)

[EOL] assertThat(validator.authenticate("token"), is(nullValue()))



[EOL] Assert.assertEquals(expectedResponse, actualResponse); [EOL] Assert.assertEquals(1, actualRequests.size()); [EOL] [EOL] Assert.assertEquals(customerId, actualRequest.getCustomerId()); [EOL] Assert.assertEquals(billingSetup, actualRequest.getBillingSetup()); [EOL] Assert.assertEquals(issueYear, actualRequest.getIssueYear()); [EOL] Assert.assertEquals(issueMonth, actualRequest.getIssueMonth()); [EOL] Assert.assertTrue( [EOL] channelProvider.isHeaderSent( [EOL] ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), [EOL] GaxGrpcProperties.getDefaultApiClientHeaderPattern()))
[EOL] assertEquals("Protein", lui.getClassName())
[EOL] assertTrue(map.isEmpty()); [EOL] assertFalse(map.isEmpty()); [EOL] assertTrue(map.isEmpty())

[EOL] assertThat(ExecutorUtils.getMaxConcurrentRunsOneFlow(props)).isEqualTo( [EOL] Constants.DEFAULT_MAX_ONCURRENT_RUNS_ONEFLOW); [EOL] assertThat(ExecutorUtils.getMaxConcurrentRunsOneFlow(props)).isEqualTo( [EOL] 5)
[EOL] assertThat(builder.getCommonPrefix()).isEqualTo("discovery/v1/")
[EOL] [EOL] assertThat(gotCallA).isSameInstanceAs(gotCallB); [EOL] assertThat(gotCallA).isNotSameInstanceAs(gotCallC)

[EOL] assertEquals(expected, filterAclEntriesByAclSpec(existing, aclSpec))
[EOL] } catch (Exception ignore) {} [EOL] [EOL] assertThat(future1.isCancelled(), is(false)); [EOL] assertThat(future2.isCancelled(), is(false)); [EOL] assertThat(future3.isCancelled(), is(true))
[EOL] assertSame(exception, assertThrows(Exception.class, () -> maybe.orElseThrow(e -> e)))

@Test [EOL] 	public void binaryOr(){ [EOL] 		assertEquals(Boolean.TRUE, PredicateUtil.binaryOr(Boolean.TRUE, Boolean.TRUE)); [EOL] 		assertEquals(Boolean.TRUE, PredicateUtil.binaryOr(Boolean.TRUE, Boolean.FALSE)); [EOL] 		assertEquals(Boolean.TRUE, PredicateUtil.binaryOr(Boolean.TRUE, null)); [EOL] 		assertEquals(Boolean.TRUE, PredicateUtil.binaryOr(Boolean.FALSE, Boolean.TRUE)); [EOL] 		assertEquals(Boolean.FALSE, PredicateUtil.binaryOr(Boolean.FALSE, Boolean.FALSE)); [EOL] 		assertEquals(null, PredicateUtil.binaryOr(Boolean.FALSE, null)); [EOL] 		assertEquals(Boolean.TRUE, PredicateUtil.binaryOr(null, Boolean.TRUE)); [EOL] 		assertEquals(null, PredicateUtil.binaryOr(null, Boolean.FALSE)); [EOL] 		assertEquals(null, PredicateUtil.binaryOr(null, null))
[EOL] assertThat(catalogEntries, hasSize(2)); [EOL] assertThat(catalogEntries.get(0).getCode(), is("CRM")); [EOL] assertThat(catalogEntries.get(0).getDescription(), is("CRM system")); [EOL] assertThat(catalogEntries.get(1).getCode(), is("BILLING")); [EOL] assertThat(catalogEntries.get(1).getDescription(), is("Billing system"))
@Test [EOL] public void testSetHtmlPageVisible() throws Exception { [EOL] assertTrue( roh.isHtmlPageVisible() ); [EOL] assertFalse( roh.isHtmlPageVisible() )
[EOL] assertContainsOrders(actual, order(8), order(9), order(10))


[EOL] assertEquals(resource, result.getBaseUrl()); [EOL] assertEquals(before, result.getValidUntil())
@Test public void [EOL] shouldReturnEmptyCollectionWhenNoValuesWereAdded() [EOL] { [EOL] assertThat(multiValue.getValues(), isA(Collection.class))
[EOL] assertEquals(openEjbConfiguration, factory.getOpenEjbConfiguration())
[EOL] 		assertEquals(PollingResult.NO_CHANGES, op.invoke(null, null))

[EOL] 		assertThat(converter, is(instanceOf(converterType)))
[EOL] [EOL] // no exception expected and we have 3 folders [EOL] assertThat(temporaryFolder.toPath().resolve("pages")).exists(); [EOL] assertThat(temporaryFolder.toPath().resolve("widgets")).exists()
@Test [EOL] public void expectValueThrowsOnUnexpectedValue() { [EOL] Throwable thrown = Assertions.assertThrows(ExpectationNotMetException.class, () -> { [EOL] StringNode node = Node.from("hjk"); [EOL] [EOL] assertThat(thrown.getMessage(), containsString("Expected one of `abc`, `mno`, `xyz`


[EOL] assertEquals(expResult, result)
[EOL] [EOL] assertEquals(1, dsg.size()); [EOL] assertTrue(g1.isIsomorphicWith(dsg.getGraph(graphName1))); [EOL] assertTrue(g1.isIsomorphicWith(dsg.getDefaultGraph())); [EOL] assertTrue(dsg.getGraph(graphName2).isEmpty())
@Test [EOL] void get8Test() { [EOL] assertEquals(8, (int) instance.get8().orElseThrow(NoSuchElementException::new))
@Test [EOL] public void testIsBindable() { [EOL] assertFalse(plugin.isBindable())
[EOL] 		Assert.assertEquals(MathExpr.format(MathExpr.parse(expr).toTree()), expr)
[EOL] 		assertEquals(p1.toString(), p.toString()); [EOL] 		assertEquals(p1.toJsonObject(), p.toJsonObject()); [EOL] 		assertEquals(p1.getMessageType(), p.getMessageType()); [EOL] 		assertEquals(p1.getHeader(), p.getHeader()); [EOL] 		assertEquals(p1.getPoint(), p.getPoint()); [EOL] 		assertNotSame(p1, p); [EOL] 		assertNotSame(p1.toString(), p.toString()); [EOL] 		assertNotSame(p1.toJsonObject(), p.toJsonObject())
[EOL] assertSame(provider.authenticate(authentication), authentication)
[EOL] Assert.assertEquals("NONEXISTENT_URL", attributesByUrl.getAttribute())
[EOL] [EOL] [EOL] Assert.assertEquals(3, subResourceDefinitions.size()); [EOL] } [EOL] [EOL] Assert.assertTrue(names.contains("MY_VIEW{1.0.0}/resources")); [EOL] Assert.assertTrue(names.contains("MY_VIEW{1.0.0}/resource")); [EOL] Assert.assertTrue(names.contains("MY_VIEW{1.0.0}/subresource"))

[EOL] assertEquals("{\"not\":{\"type\":\"boolean\"}}", actual)
[EOL] assertNotNull(piElement); [EOL] [EOL] // check the presence of the href attribute [EOL] assertEquals("cid:" + payloadURI, [EOL] piElement.getAttribute(new QName("href")).getAttributeValue())




[EOL] Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction())); [EOL] Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction())); [EOL] Assert.assertTrue(NodeAction.NORMAL.equals(nodeHeartbeat.getNodeAction())); [EOL] Assert.assertTrue("The decommisioned metrics are not updated", [EOL] NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction())); [EOL] Assert.assertTrue("The decommisioned metrics are not updated", [EOL] NodeAction.SHUTDOWN.equals(nodeHeartbeat.getNodeAction()))
[EOL] assertThat(handler.getHandlers()).hasSize(2); [EOL] assertThat(handler.getHandlers()).hasSize(0)
@Test [EOL] void setForeignSchemaName() { [EOL] assertDoesNotThrow(() -> getMutatorInstance().setForeignSchemaName("table"))
[EOL] [EOL] 		Assert.assertEquals(tree.size(), 7); [EOL] 		Assert.assertEquals(tree.size(), 4); [EOL] 		Assert.assertEquals(detached.size(), 3)
[EOL] assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntity)

@Test [EOL] public void testReadString_BigEndan_Empty() throws Exception { [EOL] assertEquals("", asInputStream(0x00).readString(JBBPByteOrder.BIG_ENDIAN))
[EOL] Assert.assertFalse(rAllocation.containsGangs())
[EOL] assertEquals(expected, ResourceNames.operatingSystemVersionConstant(1234L))

[EOL] [EOL] assertTrue( promise.isSuccess() ); [EOL] assertTrue( promise.getNow() )
[EOL] //assertEquals(expResult, result)
[EOL] assertNull(stringConverters); [EOL] assertEquals(1, stringConverterCacheMap.size()); [EOL] assertSame(NullStringConverter.class, cacheMap01.getClass()); [EOL] [EOL] assertEquals(FileLineException.class, e.getTargetException().getClass()); [EOL] assertEquals("Failed in an instantiate of a stringConverter.", e.getTargetException() [EOL] .getMessage()); [EOL] assertEquals(InstantiationException.class, e.getTargetException().getCause().getClass()); [EOL] assertSame(fileName, ((FileLineException)e.getTargetException()).getFileName()); [EOL] assertEquals(-1, ((FileLineException)e.getTargetException()).getLineNo()); [EOL] assertEquals("column2", ((FileLineException)e.getTargetException()).getColumnName()); [EOL] assertEquals(1, ((FileLineException)e.getTargetException()).getColumnIndex())
[EOL] [EOL] Assert.assertTrue(feedManagerFieldDescriptors.size() == 2); [EOL] Assert.assertTrue(feedManagerFieldDescriptors.size() == 1); [EOL] Assert.assertTrue(finalDescriptors.size() == 1)
[EOL] assertEquals("usage is correct", 10, underTest.getPercentUsage()); [EOL] assertEquals("no new thread created without listener or callback",activeThreadCount, Thread.activeCount())
[EOL] Assert.assertEquals(expectedResponse, actualResponse); [EOL] Assert.assertEquals(1, actualRequests.size()); [EOL] [EOL] Assert.assertEquals( [EOL] resourceName, HotelPerformanceViewName.parse(actualRequest.getResourceName())); [EOL] Assert.assertTrue( [EOL] channelProvider.isHeaderSent( [EOL] ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), [EOL] GaxGrpcProperties.getDefaultApiClientHeaderPattern()))
[EOL] assertThat(originalMapSize, equalTo(10)); [EOL] assertThat(reOpenedAlleleMap.size(), equalTo(originalMapSize)); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10019, "TA", "T").getRsId(), equalTo("rs775809821")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10039, "A", "C").getRsId(), equalTo("rs978760828")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10043, "T", "A").getRsId(), equalTo("rs1008829651")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10051, "A", "G").getRsId(), equalTo("rs1052373574")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10055, "T", "A").getRsId(), equalTo("rs892501864")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10055, "T", "TA").getRsId(), equalTo("rs768019142")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10063, "A", "C").getRsId(), equalTo("rs1010989343")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10077, "C", "G").getRsId(), equalTo("rs1022805358")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10109, "A", "T").getRsId(), equalTo("rs376007522")); [EOL] assertThat(getAlleleProperties(reOpenedAlleleMap, 1, 10108, "C", "T").getRsId(), equalTo("rs62651026"))
[EOL] 		Assert.assertNotNull( InstanceHelpers.findInstanceByPath( this.app, tomcatPath ) ); [EOL] [EOL] 		// Check it is gone. [EOL] 		Assert.assertNull( InstanceHelpers.findInstanceByPath( this.app, tomcatPath ) )
[EOL] assertEquals(4, entityTypes.size()); [EOL] assertEquals(entityType1, entityTypes.get(0)); [EOL] assertEquals(entityType2, entityTypes.get(1)); [EOL] assertEquals(entityType4, entityTypes.get(2)); [EOL] assertEquals(entityType5, entityTypes.get(3))
[EOL] assertEquals("I Urge You to Require Notice of Mercury", m.get(TikaCoreProperties.TITLE))

[EOL] [EOL] assertEquals("heic", metadata.get("Major Brand")); [EOL] assertEquals("512 pixels", metadata.get("Width")); [EOL] assertEquals("512 pixels", metadata.get("Height")); [EOL] assertEquals("image/heic", metadata.get(Metadata.CONTENT_TYPE))
[EOL] [EOL] assertThat(a.getFilesIn("foo"), contains( [EOL] Paths.get("/foo/bam/qux"), Paths.get("/foo/bar/a"), Paths.get("/foo/bar/b"))); [EOL] assertThat(a.getFilesIn("foo/bam"), contains(Paths.get("/foo/bam/qux"))); [EOL] assertThat(a.getFilesIn("foo/bar"), contains(Paths.get("/foo/bar/a"), Paths.get("/foo/bar/b"))); [EOL] assertThat(a.getFilesIn("foo/bam"), contains(Paths.get("/foo/bam/qux")))

[EOL] assertTrue(serverChannelLatch.await(5, SECONDS)); [EOL] [EOL] assertTrue(messageLatch.await(5, SECONDS))
[EOL] assertEquals(0, map.size()); [EOL] assertTrue(map.isEmpty()); [EOL] assertNull(map.get("foo"))
[EOL] [EOL] Assert.assertTrue(plugin.isEnabled())
[EOL] assertEquals(responseEntityExpected.getStatusCode(), responseEntityActual.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntityActual)
[EOL] assertEquals(expected, s.retrieveMostFrequentlyUsedWords(literatureText, [EOL] wordsToExclude))
[EOL] Assert.assertTrue(MockDataSource.hasMethod("db", "db1", "executeBatch"))
[EOL] Assert.assertTrue(collector instanceof NormalMetricsCollector); [EOL] Assert.assertEquals(21, metricObjects.size()); [EOL] } [EOL] } [EOL] Assert.assertNotNull("Should have the .hit.count metric", found); [EOL] } [EOL] } [EOL] Assert.assertNotNull("Should have the .bucket_count metric", found); [EOL] Assert.assertEquals(found.getMetricType(), MetricObject.MetricType.DELTA); [EOL] } [EOL] } [EOL] Assert.assertNotNull("Should have the .success_bucket_count metric", found); [EOL] Assert.assertEquals(found.getMetricType(), MetricObject.MetricType.DELTA); [EOL] } [EOL] } [EOL] Assert.assertNotNull("Should have the .hit_bucket_count metric", found); [EOL] Assert.assertEquals(found.getMetricType(), MetricObject.MetricType.DELTA)

[EOL] [EOL] Exception e = assertThrows( Exception.class, () -> await( publisher ) ); [EOL] assertEquals( error, e ); [EOL] assertEquals( 2, scheduleDelays.size() ); [EOL] assertEquals( initialDelay, scheduleDelays.get( 0 ).intValue() ); [EOL] assertEquals( initialDelay * multiplier, scheduleDelays.get( 1 ).intValue() ); [EOL] [EOL] assertThat( executionCount.get(), equalTo( 3 ) )
[EOL] when(getTiService().retractFact(any(), isA(RetractFactRequest.class))).then(i -> { [EOL] assertEquals(oldFact, i.<RetractFactRequest>getArgument(1).getFact()); [EOL] assertEquals(201, response.getStatus()); [EOL] assertEquals(newFact.toString(), getPayload(response).get("id").textValue())
[EOL] [EOL] when(assertion.getPrincipal()).thenReturn(principal); [EOL] [EOL] assertThat(userDetailsService.loadUserDetails(assertion).getAuthorities()) [EOL] .extracting("authority", String.class) [EOL] .containsExactlyInAnyOrder("ROLE_USER", "ROLE_MEMBER", "ROLE_ADMIN"); [EOL] [EOL] verify(assertion, times(2)).getPrincipal()
@Test [EOL] public void testIfUriContainsAbfs() throws Exception { [EOL] Assert.assertTrue(UriUtils.containsAbfsUrl("abfs.dfs.core.windows.net")); [EOL] Assert.assertTrue(UriUtils.containsAbfsUrl("abfs.dfs.preprod.core.windows.net")); [EOL] Assert.assertFalse(UriUtils.containsAbfsUrl("abfs.dfs.cores.windows.net")); [EOL] Assert.assertFalse(UriUtils.containsAbfsUrl("")); [EOL] Assert.assertFalse(UriUtils.containsAbfsUrl(null)); [EOL] Assert.assertFalse(UriUtils.containsAbfsUrl("abfs.dfs.cores.windows.net")); [EOL] Assert.assertFalse(UriUtils.containsAbfsUrl("xhdfs.blob.core.windows.net"))
[EOL] 			assertTrue(file.exists())
@Test [EOL] void testRequireNegative3() { [EOL] assertThrows(RuntimeException.class, () -> LongRangeUtil.requireNegative(0, RuntimeException::new))
[EOL] assertTrue("first command should be the run command for the platform", [EOL] command[0].equals(Shell.WINUTILS) || command[0].equals("bash"))
[EOL] assertEquals(1, result.size()); [EOL] assertEquals(true, result.contains("100"))


[EOL] [EOL] 		Assert.assertEquals( [EOL] 			journalArticle.getModifiedDate(), [EOL] 			journalArticleContentDashboardItem.getModifiedDate())
[EOL] [EOL] Assert.assertNotNull(theAcl); [EOL] Assert.assertEquals(FsAction.NONE, [EOL] aclStatus.getEffectivePermission(theAcl)); [EOL] [EOL] Assert.assertNotNull(theAcl); [EOL] Assert.assertEquals(FsAction.READ_WRITE, [EOL] aclStatus.getEffectivePermission(theAcl))
[EOL] assertNotNull(attrs); [EOL] assertTrue(attrs.get("abc").equals("d\"ef\"")); [EOL] assertTrue(attrs.get("ghi").equals("jkl"))
[EOL] [EOL] assertEquals("Locality threshold node", "123.123", [EOL] yarnConvertedConfig.get( [EOL] CapacitySchedulerConfiguration.NODE_LOCALITY_DELAY)); [EOL] assertEquals("Locality threshold rack", "321.321", [EOL] yarnConvertedConfig.get( [EOL] CapacitySchedulerConfiguration.RACK_LOCALITY_ADDITIONAL_DELAY))
[EOL] [EOL] 		for( Instance i : app.getRootInstances()) [EOL] 			Assert.assertEquals( 0, this.mngr.pingAgent( ma, i, "TEST " + i.getName())); [EOL] 		Assert.assertEquals( app.getRootInstances().size(), sentMessages.size()); [EOL] 			Assert.assertTrue( message instanceof MsgEcho ); [EOL] 			Assert.assertEquals( "PING:TEST " + i.getName(), echo.getContent()); [EOL] 		} [EOL] [EOL] 		for( ManagedApplication t : argApp.getAllValues()) { [EOL] 			Assert.assertEquals( ma, t )
[EOL] [EOL] 		Assert.assertFalse(metricRegistry.isShutdown()); [EOL] [EOL] 		Assert.assertTrue(metricRegistry.isShutdown())

[EOL] [EOL] assertEquals(10000, result.getLimit()); [EOL] assertEquals(1, result.getCount()); [EOL] assertEquals(1, ListUtils.list(result.iterator()).size())

[EOL] 		Assert.assertTrue( targetFile.exists()); [EOL] [EOL] 		// Preconditions [EOL] 		Assert.assertEquals( 0, this.manager.targetsMngr().listAllTargets().size()); [EOL] 			Assert.assertEquals( [EOL] 					Status.FORBIDDEN.getStatusCode(), [EOL] 					this.resource.loadTargetArchive( in, fd ).getStatus()); [EOL] 		Assert.assertEquals( 0, targetIds.size())

[EOL] [EOL] assertNotNull(composeToString.firstStep()); [EOL] assertNotNull(composeToString.secondStep()); [EOL] [EOL] assertNull(composeToString.apply(null)); [EOL] assertNotNull(composeToString.apply("test"))
[EOL] [EOL] // 返却値の確認 [EOL] assertEquals("aaa,aaa,aaa", result)
[EOL] [EOL] 		Assert.assertEquals(StringPool.BLANK, fieldValue)
[EOL] Assert.assertEquals(string, string2)
[EOL] [EOL] assertEquals(".doc", doc.getExtension())
[EOL] assertNotNull(asProperties); [EOL] assertEquals("value", asProperties.getProperty("key"))
//$NON-NLS-1$ [EOL] Assert.assertEquals("different int", Integer.MIN_VALUE, prop.getIntProperty("int", 0), 0); //$NON-NLS-1$ [EOL] Assert.assertEquals("different int", Integer.MAX_VALUE, prop.getIntProperty("int", 0), 0)
[EOL] [EOL] assertEquals(ERROR_ELEMENT_NAME, eElement.getQName()); [EOL] [EOL] assertEquals(IEbmsError.Severity.failure.toString(), [EOL] eElement.getAttributeValue(SEVERITY_ATTR_NAME)); [EOL] assertEquals("some_new_error_code", [EOL] eElement.getAttributeValue(ERROR_CODE_ATTR_NAME)); [EOL] [EOL] assertEquals("some_category", [EOL] eElement.getAttributeValue(CATEGORY_ATTR_NAME)); [EOL] assertEquals("some_error_origin", [EOL] eElement.getAttributeValue(ORIGIN_ATTR_NAME)); [EOL] assertEquals("some_message", [EOL] eElement.getAttributeValue(SHORT_DESCR_ATTR_NAME)); [EOL] assertEquals("ref_to_some_message", [EOL] eElement.getAttributeValue(REF_TO_ATTR_NAME)); [EOL] assertEquals(Q_ERROR_DETAIL, errDetailElement.getQName()); [EOL] assertEquals("some_error_detail", errDetailElement.getText()); [EOL] assertEquals(DESCRIPTION_ELEMENT_NAME, dElement.getQName()); [EOL] assertEquals("some_text", dElement.getText()); [EOL] assertEquals("en-CA", [EOL] dElement.getAttributeValue(LANG_ATTR_NAME))
[EOL] for (URI uri : compositeURIs) { [EOL] assertTrue(uri + " must be detected as composite URI", URISupport.isCompositeURI(uri))
[EOL] [EOL] assertNull(skinFactory.createTailSkin(null)); [EOL] assertTrue(skinFactory.createTailSkin(CONNECTOR) instanceof DefaultTailSkin); [EOL] [EOL] assertTrue(skinFactory.createTailSkin(CONNECTOR) instanceof DefaultTailSkin); [EOL] [EOL] assertTrue(skinFactory.createTailSkin(CONNECTOR) instanceof CustomTailSkin)

[EOL] assertInState(STATE.INITED, child)


[EOL] Assert.assertEquals( typeNames[0].getFeatureTypeName(), fc.iterator().next().getName() ); [EOL] Assert.assertEquals( 7, fc.size() )
[EOL] assertEquals(1800L, interval)
@Test [EOL] public void nullLastChild() [EOL] { [EOL] assertNull(root.getLastChild())

[EOL] [EOL] assertNotNull( step.buildContainerEntity( TestHelper.PEER_ID, cloneResponse ) )
[EOL] assertEquals("GET http://localhost:9999/?p1=v1 HTTP/1.1\r\n", req)
[EOL] assertEquals(3, response.size())


[EOL] [EOL] // then [EOL] assertTrue(result instanceof HttpHead); [EOL] assertEquals(result.getURI(), new URI(expectedUrl))
@Test [EOL] void remove() { [EOL] assertNotNull(builder.remove(manager))
[EOL] Assert.assertFalse(reuseStrategy.keepAlive(null, response, context))
@Test [EOL] void count() { [EOL] assertEquals(1, instance.count()); [EOL] [EOL] assertThrows(IllegalStateException.class, () -> instance.count())
@Test [EOL] public void testGetId() throws Exception [EOL] { [EOL] assertNotNull( environment.getId() )

[EOL] 		Assert.assertNotNull(vService)
[EOL] 		Assert.assertSame(partial1Clone.getBatch(), partial2Clone.getBatch()); [EOL] 		Assert.assertSame(partial1Clone2.getBatch(), partial2Clone2.getBatch())

[EOL] [EOL] assertThat(page.getVariables()).contains(entry("task", anURLVariable().value("../API/bpm/userTask/{{taskId}}").build()))
[EOL] } catch (SerializationException e) { [EOL] assertEquals("Unable to read the data model version for the flow content.", e.getMessage())

[EOL] [EOL] assertEquals("#directive(param1 param2, param2)".length(), index); [EOL] assertEquals("#directive(param1 param2, param2)", buffer.toString()); [EOL] assertFalse(context.isInVelocityBlock()); [EOL] assertEquals(VelocityType.MACRO, context.getType())

[EOL] assertThat(uut.findController(child2.getId())).isEqualTo(child2)
[EOL] [EOL] 		Assert.assertEquals( [EOL] 			StringPool.BLANK, [EOL] 			dlEditFileEntryTypeDisplayContext.getFieldsJSONArrayString())
[EOL] Assert.assertEquals("113", user.getUser_no())
[EOL] assertThat(returnedBuilder).isSameAs(optionalExtraBuilder)
[EOL] assertEquals(a, a); [EOL] assertEquals(a, b); [EOL] assertEquals(b, a); [EOL] assertNotEquals(a, c); [EOL] assertNotEquals(c, a); [EOL] assertNotEquals(c, d); [EOL] assertNotEquals(d, c)
[EOL] Assert.assertEquals( XMLStreamConstants.START_ELEMENT, xmlReader.getEventType() ); [EOL] Assert.assertEquals( new QName( "http://www.opengis.net/gml", "CompositeSurface" ), xmlReader.getName() ); [EOL] Assert.assertEquals( XMLStreamConstants.END_ELEMENT, xmlReader.getEventType() ); [EOL] Assert.assertEquals( new QName( "http://www.opengis.net/gml", "CompositeSurface" ), xmlReader.getName() ); [EOL] Assert.assertEquals( 3, surface.getPatches().size() )
[EOL] Assert.assertEquals(0, Double.compare(len1, len2))

[EOL] 		assertEquals(42L, value)
[EOL] assertThat(configString).contains("Qux_String")

@Test [EOL] public void shouldParseVersion() [EOL] { [EOL] assertThat(Version.of(""), is(Version.of("0"))); [EOL] [EOL] assertThat(Version.of("1"), is(Version.of("1"))); [EOL] assertThat(Version.of("12"), is(Version.of("12"))); [EOL] assertThat(Version.of("1.2"), is(Version.of("1", "2"))); [EOL] assertThat(Version.of("12.34"), is(Version.of("12", "34"))); [EOL] [EOL] assertThat(Version.of("A"), is(Version.of("a"))); [EOL] assertThat(Version.of("A"), is(Version.of("alpha"))); [EOL] assertThat(Version.of("AB"), is(Version.of("ab"))); [EOL] assertThat(Version.of("A.B"), is(Version.of("a", "b"))); [EOL] assertThat(Version.of("A.B"), is(Version.of("alpha", "beta"))); [EOL] assertThat(Version.of("AB.CD"), is(Version.of("ab", "cd"))); [EOL] [EOL] assertThat(Version.of("1A"), is(Version.of("1", "a"))); [EOL] assertThat(Version.of("1A2B"), is(Version.of("1", "a", "2", "b"))); [EOL] [EOL] assertThat(Version.of(".1"), is(Version.of("0", "1"))); [EOL] assertThat(Version.of(".A"), is(Version.of("0", "a"))); [EOL] assertThat(Version.of("-1"), is(Version.of("0", "1"))); [EOL] assertThat(Version.of("-A"), is(Version.of("0", "a"))); [EOL] [EOL] assertThat(Version.of("1."), is(Version.of("1"))); [EOL] assertThat(Version.of("A."), is(Version.of("a"))); [EOL] assertThat(Version.of("1-"), is(Version.of("1"))); [EOL] assertThat(Version.of("A-"), is(Version.of("a"))); [EOL] [EOL] assertThat(Version.of("1.A"), is(Version.of("1", "a"))); [EOL] assertThat(Version.of("1-A"), is(Version.of("1", "a"))); [EOL] [EOL] assertThat(Version.of("1.2.3-A"), is(Version.of("1", "2", "3", "a"))); [EOL] assertThat(Version.of("1.2.3-A.B"), is(Version.of("1", "2", "3", "a", "b"))); [EOL] [EOL] assertThat(Version.of("1.0.0-SNAPSHOT"), is(Version.of("1", "0", "0", "SNAPSHOT")))
[EOL] assertNotNull(result)

[EOL] assertEquals(DOUBLE_VALUE_1, mKeyValue.getValue(), 0)
[EOL] [EOL] // then [EOL] assertThat(foundObjects, hasSize(6)); [EOL] assertThat(foundObjects.get(0).value, is("testObject01")); [EOL] assertThat(foundObjects.get(1).value, is("testObject02")); [EOL] assertThat(foundObjects.get(2).value, is("testObject03")); [EOL] assertThat(foundObjects.get(3).value, is("testObject04")); [EOL] assertThat(foundObjects.get(4).value, is("testObject05")); [EOL] assertThat(foundObjects.get(5).value, is("testObject06"))
[EOL] assertEquals( VERSION_200, request.getVersion() ); [EOL] assertEquals( "myns:age", request.getValueReference().getAsText() ); [EOL] assertEquals( 1, query.getTypeNames().length ); [EOL] assertEquals( QName.valueOf( "Person" ), query.getTypeNames()[0].getFeatureTypeName() ); [EOL] Assert.assertTrue( filter.getOperator() instanceof And )
[EOL] assertDirty(enhanced, false); [EOL] assertEquals("bar", enhanced.getFoo()); [EOL] assertNull(enhanced.getFoo()); [EOL] assertDirty(enhanced, true); [EOL] assertDirty(enhanced, false)


[EOL] [EOL] //then [EOL] assertThat(JNITestUtil.getCLong(cLongPointer.address)).isEqualTo(cl0.longValue()); [EOL] assertThat(JNITestUtil.getCLong(cLongPointer.address + sizeof((CLong) null))).isEqualTo(cl1.longValue())
[EOL] Assert.assertEquals(attemptId, response.getApplicationAttemptReport() [EOL] .getApplicationAttemptId())
[EOL] assertNotNull(config); [EOL] assertEquals("tag", config.getName()); [EOL] assertNull(config.getValue()); [EOL] assertEquals(1, config.getChildCount()); [EOL] assertEquals("a", config.getChild(0).getName()); [EOL] assertEquals("true", config.getChild(0).getValue())
[EOL] assertNotNull(variable); [EOL] assertEquals(new Long(20), variable.getId())
[EOL] assertThat(shouldDelete, is(false))
@Test [EOL] void get10() { [EOL] assertEquals(m10, instance.get10())
[EOL] assertThat(oftRunner.importItems(importSettings), sameInstance(importedItems))
@Test [EOL] public void shouldReturnPayloadAsJsonObject() { [EOL] assertThat(envelopeFrom(metadata, payloadAsJsonObject).payloadAsJsonObject(), equalTo(payloadAsJsonObject))

[EOL] [EOL] Assert.assertTrue(tr1.compareTo(tr2) < 0); [EOL] Assert.assertTrue(tr2.compareTo(tr1) > 0); [EOL] [EOL] Assert.assertTrue(tr2.compareTo(tr3) < 0); [EOL] Assert.assertTrue(tr3.compareTo(tr2) > 0); [EOL] [EOL] Assert.assertTrue(tr1.compareTo(tr3) < 0); [EOL] Assert.assertTrue(tr3.compareTo(tr1) > 0); [EOL] [EOL] Assert.assertEquals(0, tr1.compareTo(tr1)); [EOL] Assert.assertEquals(0, tr2.compareTo(tr2)); [EOL] Assert.assertEquals(0, tr3.compareTo(tr3)); [EOL] [EOL] Assert.assertEquals(0, tr1.compareTo(new TableRange(null, sp1))); [EOL] Assert.assertEquals(0, tr2.compareTo(new TableRange(sp1, sp2))); [EOL] Assert.assertEquals(0, tr3.compareTo(new TableRange(sp2, null))); [EOL] [EOL] Assert.assertEquals(0, new TableRange(null, null).compareTo(new TableRange(null, null)))

@Test [EOL] public void isAnnotationPresentWithClassWhereAnnotationIsNotPresent() { [EOL] assertFalse(Utils.isAnnotationPresent(Foo.class, Object.class))
[EOL] [EOL] assertThat(ref.toPointer(key.getId()), equalTo("#/definitions/Scripts/propertyNames")); [EOL] assertThat(ref.toPointer(value.getId()), equalTo("#/definitions/Scripts/additionalProperties"))
[EOL] assertThat(bl.getString("ab", new Locale("a", "b", "c")), is("b")); [EOL] assertThat(bl.getString("a", new Locale("a", "b", "c")), is("a")); [EOL] assertThat(bl.getString("a", new Locale("a", "b")), is("a"))
@Test [EOL] public void isNotEmptyTest() { [EOL] assertEquals(true, FunctionalUtils.isNotEmpty(Arrays.asList("a"))); [EOL] [EOL] assertEquals(true, FunctionalUtils.isNotEmpty("a"))
[EOL] assertThat(inetCodec).isSameAs(mapper.inet); [EOL] } catch (InvalidTypeException e) { [EOL] assertThat(e.getCause()).isInstanceOf(UnknownHostException.class)
[EOL] Assert.assertEquals(0, Iterables.size(storesIter))

[EOL] 			assertEquals(outExpected, outActual)
[EOL] assertEquals(expected, actual)
[EOL] } catch (IllegalArgumentException expected) { [EOL] Truth.assertThat(expected) [EOL] .hasMessageThat() [EOL] .contains("context must be an instance of GrpcCallContext")
@Test [EOL] public void testGeneratePrivateKeyPairBytes() throws Exception [EOL] { [EOL] assertNotNull( keyManager.generatePrivateKeyPairBytes() )
[EOL] 		assertEquals(TestConstants.USER_ADMIN.getSelf(), session.getUserUri()); [EOL] 		assertEquals("admin", session.getUsername()); [EOL] 		assertEquals(new LoginInfo(12, 413, TestUtil.toDateTime("2010-09-14T16:15:47.554+0200"), [EOL] 				TestUtil.toDateTime("2010-09-14T16:48:33.002+0200")), session.getLoginInfo())
[EOL] [EOL] Assert.assertEquals(history, retrievedRevision)

[EOL] TerminalParserTest.assertParser(parser, "private", SystemModifier.PRIVATE); [EOL] TerminalParserTest.assertParser(parser, "protected", SystemModifier.PROTECTED); [EOL] TerminalParserTest.assertParser(parser, "public", SystemModifier.PUBLIC); [EOL] TerminalParserTest.assertParser(parser, "static", SystemModifier.STATIC); [EOL] TerminalParserTest.assertParser(parser, "transient", SystemModifier.TRANSIENT); [EOL] TerminalParserTest.assertParser(parser, "volatile", SystemModifier.VOLATILE); [EOL] TerminalParserTest.assertParser(parser, "final", SystemModifier.FINAL); [EOL] TerminalParserTest.assertParser(parser, "abstract", SystemModifier.ABSTRACT); [EOL] TerminalParserTest.assertParser(parser, "synchronized", SystemModifier.SYNCHRONIZED); [EOL] TerminalParserTest.assertParser(parser, "native", SystemModifier.NATIVE)
[EOL] } [EOL] [EOL] assertThat(result, is(Arrays.asList(msg1, msg2)))
[EOL] assertTrue(adapter.canBoundTo("NonStop(tm) Servlets For JavaServer Pages(tm) v7.0"))
@Test [EOL] void get2() { [EOL] assertEquals(m2, instance.get2())


[EOL] [EOL] Assert.assertEquals(totalBadbefore + 1, [EOL] metrics.getMultipleAppsFailedRetrieved())
@Test [EOL] void should_be_thrown_EVCacheInvalidKeyException_when_lookup_key_is_null() { [EOL] assertThatThrownBy(() -> cache.lookup(null)).isExactlyInstanceOf(EVCacheInvalidKeyException.class)
@Test [EOL] public void testEmptyExcerpt_available() throws IOException { [EOL] // length = 0. [EOL] assertEquals(0, excerpt(makeEmpty(), 0, 0).available()); [EOL] assertEquals(0, excerpt(makeDigits(), 0, 0).available()); [EOL] [EOL] // start == underlying length. [EOL] assertEquals(0, excerpt(makeEmpty(), 0, 6).available()); [EOL] assertEquals(0, excerpt(makeDigits(), 10, 6).available()); [EOL] [EOL] // start > underlying length. [EOL] assertEquals(0, excerpt(makeEmpty(), 1, 0).available()); [EOL] assertEquals(0, excerpt(makeDigits(), 10, 0).available())
[EOL] assertEquals(8, responseMap.size())
[EOL] } [EOL] [EOL] assertEquals(inputBuffer.getPosition(), position)
[EOL] assertEquals(uiModel1, [EOL] uiModelCaptor.getValue()); [EOL] assertEquals(uiModel2, [EOL] uiModelCaptor.getValue())
[EOL] [EOL] assertEquals(PATH, path)
@Test [EOL] public void testSetXmlTableAvailable() throws Exception { [EOL] assertTrue( roh.isXmlTableAvailable() ); [EOL] assertFalse( roh.isXmlTableAvailable() )
[EOL] [EOL] // Should have <html>, <head>, <title>, <body> elements [EOL] assertTrue(Pattern.matches("(?s).*<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\">.*</html>.*$", content)); [EOL] assertTrue(Pattern.matches("(?s).*<head>.*</head>.*$", content)); [EOL] assertTrue(Pattern.matches("(?s).*<title>Title</title>.*$", content)); [EOL] assertTrue(Pattern.matches("(?s).*<body>.*</body>.*$", content))
[EOL] [EOL] assertNotNull(collection1); [EOL] [EOL] assertThat(collection1.getFieldValue("name")).isEqualTo("The Legend of the Hobbit part 1")
[EOL] Assert.assertEquals(Convert.stringToJava(value), object.toString())
[EOL] [EOL] assertThat(instance.generate(new Object(), Object.class.getMethod("toString"), variant), equalTo(expected))
[EOL] assertNotNull(newDrl); [EOL] assertTrue(newDrl.contains("MyNewFile"))


[EOL] assertThat(builder.toString()).isEqualTo("key1=&key2=value2&key3=")
[EOL] assertHostNameEquals("127.0.0.2", stream.next())


[EOL] [EOL] assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, responseEntityActual.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntityActual)

[EOL] TerminalParserTest.assertResult(parser, "package foo; [EOL] TerminalParserTest.assertResult(parser, "class Foo {{} static {}}", [EOL] Program.class, "class Foo {{} static {}}"); [EOL] TerminalParserTest.assertResult(parser, "package foo; [EOL] TerminalParserTest.assertResult(parser, "enum Foo {; [EOL] TerminalParserTest.assertResult(parser, "package foo; [EOL] TerminalParserTest.assertResult(parser, "package foo; [EOL] TerminalParserTest.assertResult(parser, "import foo.bar.*; [EOL] TerminalParserTest.assertResult(parser, "class Foo {class Bar {}}", [EOL] Program.class, "class Foo {class Bar {}}"); [EOL] TerminalParserTest.assertResult(parser, "class Foo {private static final class Bar {}}", [EOL] Program.class, "class Foo {private static final class Bar {}}"); [EOL] TerminalParserTest.assertResult(parser, "class Foo {enum Bar {B}}", [EOL] Program.class, "class Foo {enum Bar {B}}"); [EOL] TerminalParserTest.assertResult(parser, "class Foo {@interface Bar {
[EOL] Assert.assertEquals(item, retrievedItem)

// must be skipped [EOL] assertNull(StringPlus.normalize(new Object())); [EOL] assertEquals(Collections.singletonList(s1), StringPlus.normalize(s1)); [EOL] assertEquals(sa, StringPlus.normalize(sa)); [EOL] assertEquals(sa, StringPlus.normalize(sl))
[EOL] assertTrue(f.exists()); [EOL] assertNotNull(result); [EOL] assertTrue(result.getPath().contains(".java")); [EOL] if (Config.load().isJava9()) { [EOL] assertEquals(123, result.getLine()); [EOL] assertEquals(20, result.getColumn()); [EOL] } else { [EOL] assertEquals(111, result.getLine()); [EOL] assertEquals(20, result.getColumn())
[EOL] assertEquals(Integer.parseInt(line), numContainer, [EOL] 0.1 * Integer.parseInt(line))
[EOL] assertNotNull(element)
[EOL] FilterTestHelper.assertFailed(filterResult)
[EOL] assertThat(array.length, is(5)); [EOL] [EOL] assertThat(array[0], is(sameInstance(a))); [EOL] assertThat(array[1], is(sameInstance(b))); [EOL] assertThat(array[2], is(sameInstance(c))); [EOL] assertThat(array[3], is(sameInstance(d))); [EOL] assertThat(array[4], is(sameInstance(e)))


[EOL] Assert.assertEquals("User name doesn't match", [EOL] USER_NAME_WITH_DELIMITER, info.getUser())
[EOL] } catch (ArgusServiceException ex) { [EOL] assertEquals(401, ex.getStatus())
[EOL] [EOL] assertEquals(1, types.size()); [EOL] assertEquals(new DefaultParameterizedType(ComponentAnnotationLoaderTest.class, GenericRole.class, [EOL] String.class), types.iterator().next())
[EOL] [EOL] assertThrows(BundleLoadException.class, () -> loader.load(bundle, createPolicyBundleXml(doc, TEST_POLICY_ID, [EOL] TEST_POLICY_NAME, PolicyType.SERVICE_OPERATION.getType(), TEST_FOLDER_1, TEST_POLICY_XML, null, false)))
[EOL] 		assertThat(new TestTransition().sharedElementEnterTransition(transition).sharedElementEnterTransition(), is(transition))
[EOL] 		assertThat(selector.findElements(defaultContentElement), is(singletonList(childElement)))
[EOL] 		assertEquals(1, getUrls.size()); [EOL] 		assertEquals(0, putUrls.size()); [EOL] 		assertEquals(1, res.size()); [EOL] 		assertNotNull(ts); [EOL] 		assertEquals(TimesheetCouch.class, ts.getClass()); [EOL] 		assertEquals("ts_sebastian_2014_07", ((TimesheetCouch) ts).getCouchId()); [EOL] 		assertEquals("2-1983e046a14377c433c08711fbb57b28", ((TimesheetCouch) ts).getCouchRev()); [EOL] 		assertEquals(7, ts.getMonth()); [EOL] 		assertEquals(2014, ts.getYear()); [EOL] 		assertEquals(31, ts.getDays().size()); [EOL] 		assertEquals(1, ts.getDays().get(0).getDay()); [EOL] 		assertEquals(1, ts.getDays().get(0).getEntries().size()); [EOL] 		assertEquals("P1", ts.getDays().get(0).getEntries().get(0).getProject().getName()); [EOL] 		assertEquals("2:31", ts.getDays().get(0).getEntries().get(0).getHours()); [EOL] 		assertEquals(2, ts.getDays().get(1).getDay()); [EOL] 		assertEquals(3, ts.getDays().get(1).getEntries().size()); [EOL] 		assertEquals(14, ts.getDays().get(13).getDay()); [EOL] 		assertEquals(1, ts.getDays().get(13).getEntries().size()); [EOL] 		assertEquals(15, ts.getDays().get(14).getDay()); [EOL] 		assertEquals(0, ts.getDays().get(14).getEntries().size())
[EOL] [EOL] assertThat(pngFile).isNotNull(); [EOL] assertThat(new String(pngFile.content)).hasSize(634)
[EOL] Assert.assertEquals( [EOL] FILTERS.family().exactMatch(FAMILY_ID).toProto(), [EOL] query.toProto(requestContext).getFilter())
[EOL] Assert.assertEquals(response.getStatus(), Response.Status.OK.getStatusCode(), [EOL] "Expects to return HTTP 200 when the application list is retrieved successfully.")
[EOL] [EOL] assertEquals(expected, actual)
[EOL] assertThat(results, equalTo(neoGetBlocks)); [EOL] [EOL] assertTrue(disposable.isDisposed()); [EOL] assertThat(transactionLatch.getCount(), is(0L))
[EOL] Assert.assertEquals("The count number of estimator in MutableQuantiles" [EOL] + "metrics of file read is not right", [EOL] metric.getFileReadQuantiles()[0].getEstimator().getCount(), count); [EOL] [EOL] Assert.assertEquals("The count number of estimator in MutableQuantiles" [EOL] + "metrics of file write is not right", [EOL] metric.getFileWriteQuantiles()[0].getEstimator().getCount(), [EOL] count); [EOL] [EOL] MetricsRecords.assertMetric(collector.getRecords().get(0), [EOL] "FailureCount", 0); [EOL] MetricsRecords.assertMetric(collector.getRecords().get(0), [EOL] "LastFailureTime", (long)0); [EOL] [EOL] // All MutableQuantiles haven't rolled over yet because the minimum [EOL] // interval is 1 hours, so we just test if these metrics exist. [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "WriteLatency3600sNumOps"); [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "WriteLatency3600s50thPercentileLatencyMicros"); [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "WriteLatency86400sNumOps"); [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "WriteLatency864000sNumOps"); [EOL] [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "ReadLatency3600sNumOps"); [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "ReadLatency3600s50thPercentileLatencyMicros"); [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "ReadLatency86400sNumOps"); [EOL] MetricsRecords.assertMetricNotNull(collector.getRecords().get(0), [EOL] "ReadLatency864000sNumOps")
@Test [EOL] public void shouldHaveCorrectTypeIdentifier() throws Exception { [EOL] assertThat(this.vdb.getTypeIdentifier( getTransaction() ), is(KomodoType.VDB))
[EOL] [EOL] Assert.assertEquals("commands don't match.", [EOL] Lists.newArrayList("ls,-l, space"), launcher.getCommands())
[EOL] assertThat(instance.getPriorityType(), equalTo(PriorityType.PHIVE_PRIORITY))

@Test [EOL] public void testGetOverrides() { [EOL] get(ENDPOINT_OVERRIDES, EXPERIMENT_BAD) [EOL] .assertStatus(Status.NOT_FOUND); [EOL] [EOL] final Iterable<TreatmentOverrideDto> actual = [EOL] get(ENDPOINT_OVERRIDES, EXPERIMENT_1) [EOL] .assertStatus(Status.OK) [EOL] .result(iterable(TreatmentOverrideDto.class)); [EOL] [EOL] assertEquals(expected, actual)

[EOL] [EOL] assertEquals(getHeaderRepre(newColumn.getHeader()) + getDiffRepre(diffs), result.asString())
[EOL] assertSoftly(softly -> { [EOL] softly.assertThat(e.getLoansInvestedInto()) [EOL] .containsExactly(loan); [EOL] softly.assertThat(e.getPortfolioOverview()) [EOL] .isNotNull(); [EOL] softly.assertThat(e.getCreatedOn()) [EOL] .isBeforeOrEqualTo(OffsetDateTime.now()); [EOL] softly.assertThat(e.toString()) [EOL] .isNotEmpty()


[EOL] assertTrue(base.exists() && base.isDirectory()); [EOL] assertTrue(dir2.exists() && FileUtil.canWrite(dir2)); [EOL] } [EOL] assertTrue(fileSys.pathToFile(dataPath).exists()); [EOL] assertTrue(dataFileLength > 0); [EOL] [EOL] // check the the checksum file is created and not empty: [EOL] assertTrue(fileSys.pathToFile(checksumPath).exists()); [EOL] assertTrue(checksumFileLength > 0); [EOL] assertTrue(!retryIsNecessary); [EOL] [EOL] // the data file should be moved: [EOL] assertTrue(!fileSys.pathToFile(dataPath).exists()); [EOL] // the checksum file should be moved: [EOL] assertTrue(!fileSys.pathToFile(checksumPath).exists()); [EOL] assertTrue(dir1files != null); [EOL] assertTrue(dir1files.length == 1); [EOL] assertTrue(badFiles != null); [EOL] assertTrue(badFiles.length == 2); [EOL] for (File badFile: badFiles) { [EOL] if (badFile.getName().startsWith(dataFileName)) { [EOL] assertTrue(dataFileLength == badFile.length()); [EOL] } else if (badFile.getName().contains(dataFileName + ".crc")) { [EOL] assertTrue(checksumFileLength == badFile.length()); [EOL] } [EOL] } [EOL] assertTrue(dataFileFound); [EOL] assertTrue(checksumFileFound)
[EOL] assertEquals(Status.NOT_FOUND, response.getClientResponseStatus())
[EOL] assertEquals(TargetConfigurationResult.Status.VALID, configValidationResult.getStatus())

[EOL] 		 [EOL] 		Assert.assertTrue(TestHelper.isEquals(expected4report,report))
[EOL] Assert.assertEquals("Unexpected number of pre-existing files", 2, files.length); [EOL] Assert.assertTrue("Failed to create test dir", newDir.exists()); [EOL] Assert.assertEquals("New directory unexpectedly contains files", 0, files.length); [EOL] Assert.assertFalse("Failed to delete test dir", newDir.exists())

[EOL] [EOL] assertThat(labelstat1.getObserved(), CoreMatchers.is(0)); [EOL] assertThat(labelstat1.getExpected(), CoreMatchers.is(2)); [EOL] assertThat(labelstat1.getSupport(), CoreMatchers.is(2L)); [EOL] [EOL] assertThat(labelstat2.getObserved(), CoreMatchers.is(0)); [EOL] assertThat(labelstat2.getExpected(), CoreMatchers.is(1)); [EOL] assertThat(labelstat2.getSupport(), CoreMatchers.is(1L))
[EOL] } catch (RuntimeException e) { [EOL] assertThat(e, is(oops)); [EOL] [EOL] assertThat(event.globalTxId(), is(globalTxId)); [EOL] assertThat(event.localTxId(), is(newLocalTxId)); [EOL] assertThat(event.parentTxId(), is(localTxId)); [EOL] assertThat(event.type(), is(EventType.TxAbortedEvent)); [EOL] [EOL] assertThat(omegaContext.globalTxId(), is(globalTxId)); [EOL] assertThat(omegaContext.localTxId(), is(localTxId))

[EOL] assertTrue(result > 0)
@Test [EOL] void get16Test() { [EOL] assertEquals(16, (int) instance.get16().orElseThrow(NoSuchElementException::new))
@Test [EOL] public void testEqual() { [EOL] assertTrue(new ContentRange(1, 2).equals(new ContentRange(1, 2)))
[EOL] assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntity)
@Test [EOL] @Override [EOL] public void testSetMapping() { [EOL] // not supported [EOL] assertThrows(UnsupportedOperationException.class, () -> { [EOL] try (FDBRecordContext context = database.openContext()) { [EOL] globalScope.setMapping(context, "foo", new ResolverResult(23L, null)).join()

[EOL] Assert.assertEquals("Media package shouldn't contain any elements", 0, mp.getElements().length); [EOL] Assert.assertEquals("Delete on remote repository not allowed", 0, deletedFilesURIs.size())

@Test [EOL] void get11Test() { [EOL] assertEquals(11, (int) instance.get11().orElseThrow(NoSuchElementException::new))
[EOL] assertThat(annotations, not(nullValue())); [EOL] assertThat(annotations.getChromosome(), equalTo(0)); [EOL] assertThat(annotations.getPosition(), equalTo(1)); [EOL] assertThat(annotations.getRef(), equalTo("A")); [EOL] assertThat(annotations.getAlt(), equalTo("T")); [EOL] assertThat(annotations.getGeneId(), equalTo("")); [EOL] assertThat(annotations.getGeneSymbol(), equalTo(".")); [EOL] assertThat(annotations.getVariantEffect(), equalTo(VariantEffect.SEQUENCE_VARIANT)); [EOL] assertThat(annotations.hasTranscriptAnnotations(), is(false))
[EOL] assertEquals(Code.ERROR, result.code())
[EOL] assertFalse(utils.dbLockdownIgnoreErrors())
@Test [EOL] @Config(sdk = Config.ALL_SDKS) [EOL] public void normalizeLanguageCode_macrolanguageTags_areFullyMaintained() { [EOL] // See https://en.wikipedia.org/wiki/ISO_639_macrolanguage [EOL] assertThat(Util.normalizeLanguageCode("zh-cmn")).isEqualTo("zh-cmn"); [EOL] assertThat(Util.normalizeLanguageCode("zho-cmn")).isEqualTo("zh-cmn"); [EOL] assertThat(Util.normalizeLanguageCode("ar-ayl")).isEqualTo("ar-ayl"); [EOL] assertThat(Util.normalizeLanguageCode("ara-ayl")).isEqualTo("ar-ayl"); [EOL] [EOL] // Special case of short codes that are actually part of a macrolanguage. [EOL] assertThat(Util.normalizeLanguageCode("nb")).isEqualTo("no-nob"); [EOL] assertThat(Util.normalizeLanguageCode("nn")).isEqualTo("no-nno"); [EOL] assertThat(Util.normalizeLanguageCode("nob")).isEqualTo("no-nob"); [EOL] assertThat(Util.normalizeLanguageCode("nno")).isEqualTo("no-nno"); [EOL] assertThat(Util.normalizeLanguageCode("tw")).isEqualTo("ak-twi"); [EOL] assertThat(Util.normalizeLanguageCode("twi")).isEqualTo("ak-twi"); [EOL] assertThat(Util.normalizeLanguageCode("bs")).isEqualTo("hbs-bos"); [EOL] assertThat(Util.normalizeLanguageCode("bos")).isEqualTo("hbs-bos"); [EOL] assertThat(Util.normalizeLanguageCode("hr")).isEqualTo("hbs-hrv"); [EOL] assertThat(Util.normalizeLanguageCode("hrv")).isEqualTo("hbs-hrv"); [EOL] assertThat(Util.normalizeLanguageCode("sr")).isEqualTo("hbs-srp"); [EOL] assertThat(Util.normalizeLanguageCode("srp")).isEqualTo("hbs-srp"); [EOL] assertThat(Util.normalizeLanguageCode("id")).isEqualTo("ms-ind"); [EOL] assertThat(Util.normalizeLanguageCode("ind")).isEqualTo("ms-ind"); [EOL] assertThat(Util.normalizeLanguageCode("cmn")).isEqualTo("zh-cmn"); [EOL] assertThat(Util.normalizeLanguageCode("hak")).isEqualTo("zh-hak"); [EOL] assertThat(Util.normalizeLanguageCode("nan")).isEqualTo("zh-nan"); [EOL] assertThat(Util.normalizeLanguageCode("hsn")).isEqualTo("zh-hsn")
[EOL] assertThat(mIntentCaptor.getValue().getAction(), is("ackAddr")); [EOL] assertThat(mIntentCaptor.getValue().getStringExtra(Nanny.PROTOCOL_VERSION), is(Nanny.PPP_0_1)); [EOL] assertThat(mIntentCaptor.getValue().getStringExtra(Nanny.CLIENT_ADDRESS), is("clientAddr"))
[EOL] // Assert [EOL] Assert.assertNotNull(artifact.getProperty())
[EOL] assertEquals("http://localhost:9200/twitter/tweet/1", client.getRequestURL(elasticSearchServer, requestURI))
[EOL] [EOL] assertThat(temporaryFolder.toPath().resolve("pages").resolve("myPage")).exists(); [EOL] assertThat(temporaryFolder.toPath().resolve("pages").resolve("myPage").resolve("js")).doesNotExist()
@Test [EOL] public void testUnescapeBraceFormatIgnoresErrors() { [EOL] assertThat(unescapeBraceFormat("Hello '")).isEqualTo("Hello "); [EOL] assertThat(unescapeBraceFormat("Hello \\'")).isEqualTo("Hello ")
[EOL] Assert.assertEquals(4, fs.listStatus(new Path(targetBase)).length); [EOL] Assert.assertEquals(4, fs.listStatus(new Path(targetBase)).length)
[EOL] assertNull(obj.v_string); [EOL] assertNull(obj.v_empty)
@Test [EOL] void get6() { [EOL] assertEquals(m6, instance.get6())
[EOL] [EOL] // Only one constructor, private [EOL] assertNull("ReConstructor shouldn't instantiate a class with only a private constructor.", constructed)

[EOL] [EOL] assertEquals(DISTANCE_SYDNEY_LONDON_KM, distanceSydneyToLondonKM, DISTANCE_COMPARISON_DELTA_KM); [EOL] assertEquals(DISTANCE_SYDNEY_LONDON_KM, distanceLondonToSydneyKM, DISTANCE_COMPARISON_DELTA_KM)
[EOL] [EOL] assertEquals(0.0, SelectionTool.variance(data), 0.0)
[EOL] [EOL] // [EOL] // [EOL] assertEquals(expResult, result)
[EOL] 		Assert.assertFalse( this.factory.setConfiguration( map )); [EOL] 		Assert.assertFalse( this.factory.setConfiguration( map )); [EOL] 		Assert.assertTrue( this.factory.setConfiguration( map )); [EOL] 		Assert.assertEquals( DEFAULT_IP, this.factory.configuration.get( RABBITMQ_SERVER_IP )); [EOL] 		Assert.assertEquals( GUEST, this.factory.configuration.get( RABBITMQ_SERVER_USERNAME )); [EOL] 		Assert.assertEquals( GUEST, this.factory.configuration.get( RABBITMQ_SERVER_PASSWORD )); [EOL] [EOL] 		Assert.assertTrue( this.factory.setConfiguration( map )); [EOL] 		Assert.assertEquals( "127.0.0.1", this.factory.configuration.get( RABBITMQ_SERVER_IP )); [EOL] 		Assert.assertEquals( "bob", this.factory.configuration.get( RABBITMQ_SERVER_USERNAME )); [EOL] 		Assert.assertEquals( "2", this.factory.configuration.get( RABBITMQ_SERVER_PASSWORD ))
[EOL] 		assertNotNull(resultMap); [EOL] 		assertEquals(1, resultMap.size()); [EOL] 		assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.limit")); [EOL] 		assertEquals(new Integer(30), resultMap.get("f.proxy_dc_contributor.facet.limit"))
[EOL] assertFalse("sanity: combo not focused", field.hasFocus()); [EOL] assertEquals(field.hasFocus(), l.isFocused())
[EOL] assertEquals(HttpStatus.MULTI_STATUS, responseEntity.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntity)
[EOL] assertThat(sessionToken.getLSN()).isEqualTo(1); [EOL] assertThat(sessionToken.getLSN()).isEqualTo(2)

[EOL] assertNotNull(featureCollection); [EOL] assertTrue(featureCollection.isEmpty())
[EOL] [EOL] assertFalse(page.isConstraintValuePredicate())
@Test [EOL] public void testComputeAda() { [EOL] assertEquals(-55.6, MetopReader.computeAda(123.5, 67.9), 1e-8); [EOL] assertEquals(-10.1, MetopReader.computeAda(-172.5, 177.4), 1e-8); [EOL] assertEquals(7.7, MetopReader.computeAda(175.2, -177.1), 1e-8)
[EOL] } [EOL] catch (Throwable t) { [EOL] assertTrue(t instanceof PartialExecutionException); [EOL] assertTrue(t.getCause() instanceof RuntimeException); [EOL] assertTrue(t.getCause().getCause() instanceof FileNotFoundException)

[EOL] [EOL] assertEquals(plan, protectedPlan)
[EOL] [EOL] // two additional scopes are set, two (openid, email) are hard-coded [EOL] assertEquals(scope.toArray().length, 4); [EOL] assertTrue(scope.contains("openid")); [EOL] assertTrue(scope.contains("email")); [EOL] assertTrue(scope.contains(additionalScope_profile)); [EOL] assertTrue(scope.contains(additionalScope_abc))
@Test [EOL] void get4() { [EOL] assertEquals(m4, instance.get4())
[EOL] assertEquals(7, count)

[EOL] observer.assertCompleted(); [EOL] observer.assertNoErrors(); [EOL] observer.assertValues(1, true, "result", "other", (long) "other".length(), "other".length() < 5, [EOL] Boolean.toString(false), false, Long.class)


[EOL] Truth.assertThat(emptyContext.getCredentials()).isNull(); [EOL] Truth.assertThat(context.getCredentials()).isNotNull()
[EOL] assertTrue(new ChangeDateValidator(date).isCacheVersionValid(info)); [EOL] assertFalse(new ChangeDateValidator(date).isCacheVersionValid(info)); [EOL] assertFalse(new ChangeDateValidator(date).isCacheVersionValid(info)); [EOL] assertTrue(new ChangeDateValidator(date).isCacheVersionValid(info))
[EOL] [EOL] assertNotNull(entity); [EOL] assertNull(entity.getPayload().getNavigationLink("Supplier").getInlineEntitySet())
i++) { [EOL] 			Assert.assertEquals(ints[i], deserializer.readInt())

[EOL] assertEquals("barfeebarfie", regexReplacer.convertValue("foofeefoofie")); [EOL] assertEquals("", regexReplacer.convertValue("")); [EOL] assertEquals("barfeebarfie", regexReplacer.convertValue("barfeebarfie")); [EOL] assertEquals("", regexReplacer2.convertValue("N/A")); [EOL] assertEquals("", regexReplacer3.convertValue("N/A"))
[EOL] assertSame(context.getVar("x"), dummyVar)
@Test [EOL] public void findNullsInCurrentProject() throws NullfreeException { [EOL] Assert.assertThat( [EOL] new SimpleSources(new File("./src/"), new JavaSourceFileFactory()).nulls().asList().size(), [EOL] IsEqual.equalTo(0) [EOL] )
[EOL] [EOL] Assert.assertNotNull(lastPublishedEntities); [EOL] Assert.assertEquals(1, lastPublishedEntities.length); [EOL] Assert.assertEquals(cEntity, entity); [EOL] Assert.assertEquals(1, events.size()); [EOL] Assert.assertEquals(ContainerMetricsConstants.KILLED_EVENT_TYPE, [EOL] events.iterator().next().getId()); [EOL] Assert.assertTrue( [EOL] info.containsKey(ContainerMetricsConstants.DIAGNOSTICS_INFO)); [EOL] Assert.assertEquals("test kill", [EOL] info.get(ContainerMetricsConstants.DIAGNOSTICS_INFO)); [EOL] Assert.assertTrue( [EOL] info.containsKey(ContainerMetricsConstants.EXIT_STATUS_INFO)); [EOL] Assert.assertEquals(1, [EOL] info.get(ContainerMetricsConstants.EXIT_STATUS_INFO))
[EOL] [EOL] assertFalse("Provider should not be added without a name", listProvidersService.hasProvider(listName))
[EOL] [EOL] // テスト実施 [EOL] // 判定 [EOL] assertEquals(target.readLine(), "1あ1"); [EOL] assertEquals(target.readLine(), "2い2"); [EOL] assertEquals(target.readLine(), "３う"); [EOL] assertEquals(target.readLine(), "４え"); [EOL] assertEquals(target.readLine(), "五お"); [EOL] assertEquals(target.readLine(), "")
[EOL] [EOL] assertSame(expectedInputStream, configuration)
[EOL] [EOL] assertThat(labelstat1.getObserved(), is(4)); [EOL] assertThat(labelstat2.getObserved(), is(1)); [EOL] assertThat(labelstat1.getExpected(), is(4)); [EOL] assertThat(labelstat2.getExpected(), is(1)); [EOL] [EOL] assertThat(labelstat1.getSupport(), is(4L)); [EOL] assertThat(labelstat2.getSupport(), is(1L))
[EOL] assertTrue(c.getClass() != r.getClass()); [EOL] assertFalse(r instanceof ErrorComparator); [EOL] assertFalse(r instanceof AscComparator); [EOL] assertFalse(r instanceof DescComparator); [EOL] assertTrue(r instanceof DescComparator); [EOL] assertTrue(r instanceof DescComparator)
[EOL] 		Assert.assertEquals(new BasicResolution(TestUtil.toUri("http://localhost:8090/jira/rest/api/latest/resolution/4"), "Incomplete"), basicresolution)
[EOL] assertEquals("zz:s zz:p zz:o .\nzz:s zz:p 123 .", b.toString())
[EOL] assertThat(Stream.<String>empty().collect(toTinyContainer()).addAll(source).when((x, y) -> true, (a, b) -> a + b)) [EOL] .hasValue("ab"); [EOL] assertThat(Stream.of("c").collect(toTinyContainer()).addAll(source).size()) [EOL] .isEqualTo(3); [EOL] assertThat(Stream.of("c", "d").collect(toTinyContainer()).addAll(source).size()) [EOL] .isEqualTo(4); [EOL] assertThat(Stream.of("c", "d", "e").collect(toTinyContainer()).addAll(source).size()) [EOL] .isEqualTo(5)
[EOL] assertNotNull(foundLocator)
[EOL] [EOL] assertArrayEquals(BitmapUtils.rotate(pixels, 4, 3, null), expected)
[EOL] assertEquals( rrl.SOLUTION_SCHEMA_NAME, derivedKey.getSchema() ); [EOL] assertEquals( "", derivedKey.getIdentifierAsString() ); [EOL] assertEquals( rrl.SOLUTION_SCHEMA_NAME, derivedKey.getSchema() ); [EOL] assertEquals( rrl.SOLUTION_SCHEMA_NAME + rrl.SCHEMA_SEPARATOR, derivedKey.getIdentifierAsString() )
[EOL] [EOL] assertThat(MDC.get(LOG_CONTEXT), is(equalTo("type:type, instanceId:1, extId:extId, businessKey:businessKey")))
[EOL] assertEquals(expResult, result)
[EOL] assertEquals(EXPECTED_NODE_ID, selectedNodeId)
[EOL] Truth.assertThat(badVerifications.count()).isEqualTo(1)

[EOL] 			Assert.assertEquals( 1, messages.size()); [EOL] 			Assert.assertEquals( msg, messages.iterator().next())
[EOL] assertEquals(fixture.getId(), response.getId())
@Test [EOL] public void testLogCallerFinder() { [EOL] assertThat(platform.getCallerFinderImpl()).isEqualTo(mockCallerFinder)

[EOL] Assert.assertNotNull(allProcessNames)
[EOL] assertEquals(0, rmAdminCLI.run(args))

[EOL] 		Assert.assertTrue( os.toString( "UTF-8" ).contains( "Unknown target" ))
[EOL] [EOL] 		Assert.assertFalse(ddmExpressionImpl.evaluate())
[EOL] assertThat(newGitScmProvider().supports(baseDirEmpty)).isFalse(); [EOL] assertThat(newScmProvider().supports(baseDir)).isTrue()

[EOL] [EOL] // assert and verify [EOL] assertSame(controller, controllerCapture.getValue())
@Test(dataProvider = "parseValidProvider") [EOL] public void parseValid(@Nonnull String fileName, @Nonnull Map<String, String> expected) throws IOException { [EOL] try (InputStream stream = getClass().getResourceAsStream(fileName)) { [EOL] Assert.assertNotNull(stream); [EOL] Assert.assertEquals(Pointer.parsePointer(stream), expected)
[EOL] [EOL] // Then [EOL] assertFalse(result)
[EOL] [EOL] assertThat(newOp1.getFilterOperationMode().toString()).isEqualTo(Op.AND.toString()); [EOL] assertThat(newTerm1OpNode.getFilterOperationMode().toString()).isEqualTo(Op.OR.toString()); [EOL] assertThat(newTerm1OpNode.getChildren().size()).isEqualTo(3); [EOL] [EOL] assertThat(newTerm1SubTerm1.getTag()).isEqualTo("term1field"); [EOL] assertThat(newTerm1SubTerm1.getValue()).isEqualTo(term1value1); [EOL] assertThat(newTerm1SubTerm2.getTag()).isEqualTo("term1field"); [EOL] assertThat(newTerm1SubTerm2.getValue()).isEqualTo(term1value2); [EOL] assertThat(newTerm1SubTerm3.getTag()).isEqualTo("term1field"); [EOL] assertThat(newTerm1SubTerm3.getValue()).isEqualTo(term1value3); [EOL] [EOL] assertThat(newOp2.getFilterOperationMode().toString()).isEqualTo(Op.OR.toString()); [EOL] [EOL] assertThat(newTerm2.getTag()).isEqualTo("term2field"); [EOL] assertThat(newTerm2.getValue()).isEqualTo("term2value"); [EOL] assertThat(newTerm3.getTag()).isEqualTo("term3field"); [EOL] assertThat(newTerm3.getValue()).isEqualTo("term3value"); [EOL] assertThat(newOp3.getFilterOperationMode().toString()).isEqualTo(Op.NOT.toString()); [EOL] assertThat(newTerm4.getTag()).isEqualTo("term4field"); [EOL] assertThat(newTerm4.getValue()).isEqualTo("term4value")
[EOL] assertEquals(table.getRowHeight(), TableUtilities.getPreferredRowHeight(table, -1))
[EOL] assertSame(cheatSheetViewMock, optional.get())
@Test [EOL] public void getVersionSize() { [EOL] assertThat(new NefFile.Version().getSize(), is(4 * 32))
@Test [EOL] public void testCenterBigInteger() { [EOL] assertEquals(BigInteger.valueOf(10L), center(Range.closed(BigInteger.valueOf(0L), BigInteger.valueOf(20L))))

@Test [EOL] public void testTrackingTrue() { [EOL] assertTrue(LookAndFeelAddons.isTrackingLookAndFeelChanges())
@Test [EOL] public void testSplitString() { [EOL] assertArrayEquals(new String[] {""}, JBBPUtils.splitString("", '.')); [EOL] assertArrayEquals(new String[] {"aaa"}, JBBPUtils.splitString("aaa", '.')); [EOL] assertArrayEquals(new String[] {"aaa", "bbb"}, JBBPUtils.splitString("aaa.bbb", '.')); [EOL] assertArrayEquals(new String[] {"aaa", "bbb", ""}, JBBPUtils.splitString("aaa.bbb.", '.')); [EOL] assertArrayEquals(new String[] {"", ""}, JBBPUtils.splitString(".", '.'))
@Test [EOL] void get1() { [EOL] assertEquals(m1, instance.get1())

[EOL] assertTrue(stateEntities.isEmpty()); [EOL] assertTrue(stateEntities.contains(stateEntity)); [EOL] assertFalse(stateEntities.contains(stateEntity))
[EOL] [EOL] assertEquals( LocalDateTime.of( 1990, 2, 3, 0, 0, 3, 4 ), result )
@Test [EOL] public void tcRemoveBeginEndQuotations_TestMethod3() [EOL] { [EOL] assertEquals("Fuchs \"liebt\" Hase", OKW_Helper.removeBeginEndQuotations("Fuchs \"liebt\" Hase")); [EOL] assertEquals("Fuchs \"liebt\" Hase", OKW_Helper.removeBeginEndQuotations("\"Fuchs \"liebt\" Hase\""))
[EOL] assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntity)
[EOL] [EOL] // Then [EOL] assertEquals("user", name)
[EOL] 		assertTrue(e instanceof E_MD5)

[EOL] [EOL] // THEN [EOL] assertThat(resultReceiver.getReceivedResults()).containsExactlyInAnyOrder(toArray(validInds))
[EOL] Assert.assertEquals( [EOL] "*", initializer.filterConfig.get("proxyuser.foo.hosts")); [EOL] Assert.assertEquals( [EOL] "*", initializer.filterConfig.get("proxyuser.foo.users")); [EOL] Assert.assertEquals( [EOL] "*", initializer.filterConfig.get("proxyuser.foo.groups"))
[EOL] assertEquals(displayName, resolveComponent(info, parentInfo).getModuleInfo().getDisplayName()); [EOL] assertEquals(displayName, resolveComponent(info, parentInfo).getModuleInfo().getDisplayName()); [EOL] assertEquals(displayName2, resolveComponent(info, parentInfo).getModuleInfo().getDisplayName())


[EOL] assertNotNull(result)
@Test [EOL] public void should_checkForEventExistense() { [EOL] assertThat("Has unexpected commit", !st.hasEvents(EventType.COMMIT)); [EOL] assertThat("Doesnt have test case finish", st.hasEvents(EventType.TEST_CASE_FINISH))
[EOL] 		Assert.assertNotNull(value); [EOL] 		Assert.assertEquals(value.intValue(), defaultValue)
@Test [EOL] void get1() { [EOL] assertEquals(m1, instance.get1())

[EOL] [EOL] assertEquals(0, filteredEntities.size())
[EOL] assertEquals(expResult, result)
[EOL] [EOL] assertThat(view.enumField).isEqualTo(TestEnum.V1); [EOL] assertThat(view.stringField).isEqualTo("string1")
[EOL] assertEquals(INCORRECT_USER_SEARCH_FILTER, "(&(uid={0})(objectClass=dummyObjectClass))", ldapServerProperties.getUserSearchFilter(false)); [EOL] assertEquals(INCORRECT_USER_SEARCH_FILTER, "(&(anotherName={0})(objectClass=dummyObjectClass))", ldapServerProperties.getUserSearchFilter(false))
@Test [EOL] public void test_empty_index() throws Exception { [EOL] assertThat(new ScanIndexTask(documentCollectionFactory, indexer, propertiesProvider, User.nullUser(), "test:report").call()).isEqualTo(0)

[EOL] 		assertEquals(v1.toString(), clone.toString()); [EOL] 		assertEquals(v1.toJsonObject(), clone.toJsonObject()); [EOL] 		assertEquals(v1.getMessageType(), clone.getMessageType()); [EOL] 		assertEquals(v1.getX(), clone.getX(), 0); [EOL] 		assertEquals(v1.getY(), clone.getY(), 0); [EOL] 		assertEquals(v1.getZ(), clone.getZ(), 0); [EOL] 		assertNotSame(v1, clone); [EOL] 		assertNotSame(v1.toString(), clone.toString()); [EOL] 		assertNotSame(v1.toJsonObject(), clone.toJsonObject())

@Test [EOL] public void shouldHaveParentVdb() throws Exception { [EOL] assertThat( this.dataRole.getParent( getTransaction() ), is( instanceOf( Vdb.class ) ) )


[EOL] assertTrue(superTypesMap.containsKey(factType)); [EOL] assertEquals(Object.class.getCanonicalName(), superTypesMap.get(factType)); [EOL] assertTrue(superTypesMap.containsKey(factType2)); [EOL] assertEquals(Class.class.getCanonicalName(), superTypesMap.get(factType2))
[EOL] 		// Assert [EOL] 		assertEquals(pixMgrBean.getQueryMessage(), actObj.getQueryMessage())
@Test [EOL] public void testFromEntityWithNullEntity() { [EOL] assertNull(converter.fromEntity(null))

[EOL] assertEquals(point1, point2); [EOL] assertNotEquals(point1, point2); [EOL] assertNotEquals(point1, point2); [EOL] assertEquals(point1, point2)
@Test [EOL] public void testCounterNotNull() { [EOL] assertThat(openMon.getCounter(SharedConstants.EXCEPTION_LABEL)).isNotNull()
[EOL] [EOL] 		Assert.assertEquals("field1", ddmFormFieldValue.getName()); [EOL] [EOL] 		Assert.assertTrue(value instanceof LocalizedValue); [EOL] [EOL] 		Assert.assertEquals( [EOL] 			"Value 1", localizedValue.getString(LocaleUtil.ENGLISH)); [EOL] 		Assert.assertEquals( [EOL] 			"Valor 1", localizedValue.getString(LocaleUtil.BRAZIL))
@Test [EOL] 	public void testUnsignedIntToString() throws Exception [EOL] 	{ [EOL] 		Assert.assertEquals("4294967295", UnsignedNumberUtil.unsignedIntToString(-1))
[EOL] [EOL] // Verify the outcome [EOL] assertThat(memoAccount.getBalance(), equalTo(9L))
[EOL] 	assertTrue(objmap.containsValue("pub field value"))
[EOL] assertThat(snapshot, nullValue())
[EOL] [EOL] assertSame(expecteAuthDetails, authDetails)
[EOL] assertEquals("<span class=\"aecu-highlight\">fallback_</span>&lt

[EOL] } catch (ValidationException e) { [EOL] assertSame(input, e)

@Test [EOL] public void shouldReturnNPEWhenSettingsIsNull() { [EOL] assertThrows(NullPointerException.class, () -> configuration.get(null))
[EOL] [EOL] assertEquals("val1.3", configuration.getAttributeValue("type1", "prop1", "attribute1")); [EOL] assertEquals("val2.2", configuration.getAttributeValue("type1", "prop2", "attribute1")); [EOL] assertEquals("val3.1", configuration.getAttributeValue("type1", "prop3", "attribute1")); [EOL] assertEquals("val4.3", configuration.getAttributeValue("type1", "prop4", "attribute2")); [EOL] assertEquals("val5.1", configuration.getAttributeValue("type1", "prop5", "attribute2")); [EOL] assertEquals("val6.2", configuration.getAttributeValue("type1", "prop6", "attribute1")); [EOL] assertEquals("val7.3", configuration.getAttributeValue("type1", "prop7", "attribute3")); [EOL] assertEquals("val8.2", configuration.getAttributeValue("type1", "prop8", "attribute3")); [EOL] assertEquals("val100.3", configuration.getAttributeValue("type2", "prop100", "attribute100")); [EOL] assertEquals("val101.1", configuration.getAttributeValue("type2", "prop101", "attribute100")); [EOL] assertEquals("val102.3", configuration.getAttributeValue("type2", "prop102", "attribute100")); [EOL] assertEquals("val100.2", configuration.getAttributeValue("type2", "prop100", "attribute101")); [EOL] assertEquals("val101.1", configuration.getAttributeValue("type2", "prop101", "attribute101"))


[EOL] assertEquals("c", header.getKey()); [EOL] assertEquals("d", header.getValue())
[EOL] Assert.assertTrue(filter.matches(name, null)); [EOL] [EOL] Assert.assertTrue(filter.matches(name, null))
[EOL] assertThat(map.size(), is(2)); [EOL] assertThat(map, hasEntry("name", "yamada")); [EOL] assertThat(map, hasEntry("age", "20")); [EOL] assertThat(form.getName(), is("yamada")); [EOL] assertThat(form.getAge(), is(20))
[EOL] 		} catch (ConversionError e) { [EOL] 			assertThat(e.getMessage(), is(equalTo("--- is not a valid number.")))
[EOL] assertEquals(1, gaps.size()); [EOL] assertEquals(Range.closedOpen(12L, 16L), gaps.get(0))

[EOL] } [EOL] Assert.assertEquals(keys.size(), record.cardinality())
[EOL] [EOL] assertEquals(response, client.listFileNames(request)); [EOL] assertEquals(response, new B2ListFileNamesResponse(listOf(), null))
[EOL] [EOL] Assert.assertArrayEquals("Age Parser not invoked.", [EOL] new String[] {CompositeParser.class.getCanonicalName(), AgeRecogniser.class.getCanonicalName()}, [EOL] md.getValues("X-Parsed-By")); [EOL] Assert.assertArrayEquals("Wrong age predicted.", [EOL] new String[] {Double.toString(TEST_AGE)}, [EOL] md.getValues(AgeRecogniser.MD_KEY_ESTIMATED_AGE))
[EOL] assertEquals(saved.getId(), operation.getId())

@Test [EOL] public void testRound() { [EOL] Assert.assertEquals(0, MathUtil.round(0.0f)); [EOL] [EOL] Assert.assertEquals(0, MathUtil.round(0.4f)); [EOL] Assert.assertEquals(1, MathUtil.round(0.5f)); [EOL] Assert.assertEquals(1, MathUtil.round(0.6f)); [EOL] Assert.assertEquals(3, MathUtil.round(3f)); [EOL] [EOL] Assert.assertEquals(0, MathUtil.round(-0.4f)); [EOL] Assert.assertEquals(0, MathUtil.round(-0.5f)); [EOL] Assert.assertEquals(-1, MathUtil.round(-0.6f)); [EOL] Assert.assertEquals(-8, MathUtil.round(-8f))
@Test [EOL] void testRestRequireNotEquals7() { [EOL] assertEquals(-1.0, LongRangeUtil.requireNotEquals(-1, 0, RuntimeException::new))
[EOL] [EOL] 		assertEquals(valueFactory.newValue(2d / 4d), MeasureUtil.evaluateSimilarity(valueFactory, comparisonMeasure, clusteringFields, flags, referenceFlags)); [EOL] [EOL] 		assertEquals(valueFactory.newValue(1d / 3d), MeasureUtil.evaluateSimilarity(valueFactory, comparisonMeasure, clusteringFields, flags, referenceFlags)); [EOL] [EOL] 		assertEquals(valueFactory.newValue(2d / (1d + 2 * 2d + 1d)), MeasureUtil.evaluateSimilarity(valueFactory, comparisonMeasure, clusteringFields, flags, referenceFlags)); [EOL] [EOL] 		assertEquals(valueFactory.newValue(2d / 4d), MeasureUtil.evaluateSimilarity(valueFactory, comparisonMeasure, clusteringFields, flags, referenceFlags))
[EOL] [EOL] 		assertNotNull("No id set", feed.getId()); [EOL] 		assertNotNull("No title set", feed.getTitle()); [EOL] 		assertEquals("Invalid update set", new Date(2009, 0, 2), feed.getUpdated())

[EOL] assertTrue(entity.contains("Successfully updated"))
[EOL] Assert.assertEquals( [EOL] "Successfully created directory /root/testFile1\n\n", [EOL] output.message()); [EOL] Assert.assertTrue(existsDir)
@Test [EOL] void setCipherSuitesWithInvalidCipherSuite() { [EOL] assertThrows(IllegalArgumentException.class, () -> builder.setCipherSuites(new String[]{"foo"}))
[EOL] assertSame(edge.inVertex(), edge.outVertex())
@Test [EOL] void testRequireZero() { [EOL] assertEquals(0, LongRangeUtil.requireZero(0, RuntimeException::new))

[EOL] 		assertTrue(result.size() == 4)

[EOL] assertThat(rpIdProvider.provide(httpServletRequest)).isEqualTo("example.com")
[EOL] assertFalse(buf.isReadable())
[EOL] 		assertEquals(f1.toString(), clone.toString()); [EOL] 		assertEquals(f1.toJsonObject(), clone.toJsonObject()); [EOL] 		assertEquals(f1.getMessageType(), clone.getMessageType()); [EOL] 		assertEquals(f1.getData(), clone.getData(), 0); [EOL] 		assertNotSame(f1, clone); [EOL] 		assertNotSame(f1.toString(), clone.toString()); [EOL] 		assertNotSame(f1.toJsonObject(), clone.toJsonObject())

[EOL] assertEquals(HttpStatus.BAD_REQUEST, responseEntity.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntity)
@Test [EOL] public void testActionAll() throws Exception { [EOL] //host [EOL] assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_READ)); [EOL] assertTrue(KAFKA_HOST1_ALL.implies(KAFKA_HOST1_WRITE)); [EOL] [EOL] //topic [EOL] assertTrue(KAFKA_HOST1_TOPIC1_ALL.implies(KAFKA_HOST1_TOPIC1_READ)); [EOL] assertTrue(KAFKA_HOST1_TOPIC1_ALL.implies(KAFKA_HOST1_TOPIC1_WRITE)); [EOL] [EOL] //cluster [EOL] assertTrue(KAFKA_HOST1_CLUSTER1_ALL.implies(KAFKA_HOST1_CLUSTER1_READ)); [EOL] assertTrue(KAFKA_HOST1_CLUSTER1_ALL.implies(KAFKA_HOST1_CLUSTER1_WRITE)); [EOL] [EOL] //consumer group [EOL] assertTrue(KAFKA_HOST1_GROUP1_ALL.implies(KAFKA_HOST1_GROUP1_READ)); [EOL] assertTrue(KAFKA_HOST1_GROUP1_ALL.implies(KAFKA_HOST1_GROUP1_WRITE))
[EOL] [EOL] Assertions.assertThat(meta.getListing()) [EOL] .describedAs("Metadata listing for %s", path) [EOL] .doesNotContain(pathMeta1) [EOL] .contains(pathMeta2) [EOL] .contains(pathMeta3); [EOL] Assertions.assertThat(expired) [EOL] .describedAs("Expire entries underr %s", path) [EOL] .doesNotContain(pathMeta2) [EOL] .contains(pathMeta1)
[EOL] assertNotEquals(errorJsonStr, json)


@Test [EOL] void get0Test() { [EOL] assertEquals(0, (int) instance.get0())
[EOL] 		Assert.assertEquals( 0, items.size())

[EOL] assertNotNull(filter); [EOL] assertEquals("AVHRR-GAC-NC",filter.getFormatName())
@Test [EOL] public void shouldReturnMetadata() { [EOL] assertThat(envelopeFrom(metadata, payload).metadata(), equalTo(metadata))
[EOL] [EOL] Assert.assertEquals(2, [EOL] homeResponse.getPreemptionMessage().getContract() [EOL] .getContainers().size()); [EOL] Assert.assertEquals(2, [EOL] homeResponse.getAllocatedContainers().size()); [EOL] Assert.assertEquals(2, [EOL] homeResponse.getUpdatedNodes().size()); [EOL] Assert.assertEquals(2, [EOL] homeResponse.getCompletedContainersStatuses().size())
[EOL] Assert.assertEquals("/two=2/three=3", abs.toString()); [EOL] Assert.assertEquals("/two=2/three=3", abs.toString()); [EOL] Assert.assertEquals("/two=2/three=3", abs.toString()); [EOL] Assert.assertEquals("/one=1/two=2/three=3", abs.toString())

[EOL] [EOL] // Internal Server Error is expected because the request has no finished at this [EOL] assertEquals(HttpStatus.INTERNAL_SERVER_ERROR.value(), this.ctx.getResponseStatusCode())
[EOL] 		// Act + Assert: [EOL] 		assertThat(ActionBarDelegate.create(mockActivity), is(nullValue()))

@Test [EOL] public void testConvertToMs() throws Exception { [EOL] assertThat(TimeExpirable.convertToMs(0)).describedAs("Should convert from minutes to ms.").isEqualTo(0); [EOL] assertThat(TimeExpirable.convertToMs(1)).describedAs("Should convert from minutes to ms.").isEqualTo(MIN_IN_MS)

[EOL] 		assertNull(metadata.get("Geographic_NAME")); [EOL] 		assertNull(metadata.get("Geographic_LONGITUDE")); [EOL] 		assertNull(metadata.get("Geographic_LATITUDE"))

@Test [EOL] public void testEncodeConstructorUint() { [EOL] assertThat(FunctionEncoder.encodeConstructor( [EOL] Arrays.asList(new Uint(BigInteger.ONE), new Uint(BigInteger.valueOf(0x20)))), [EOL] is("0000000000000000000000000000000000000000000000000000000000000001" [EOL] + "0000000000000000000000000000000000000000000000000000000000000020"))
[EOL] assertEquals(BarcodeSearchResult.MULTIPLE_TASKS, dto.getBarcodeSearchResult()); [EOL] assertNull(dto.getTaskId())
[EOL] assertEquals(object.name(), file.name()); [EOL] assertTrue(file.actualName().endsWith(object.actualName())); [EOL] 		assertEquals(object.size(), file.size())
[EOL] 		 [EOL] 		Assert.assertFalse(isValid)
[EOL] assertEquals(1, ordering.compare(doubleValue(5d), doubleValue(4d))); [EOL] assertEquals(0, ordering.compare(doubleValue(5d), doubleValue(5d))); [EOL] assertEquals(-1, ordering.compare(doubleValue(4d), doubleValue(5d)))
[EOL] [EOL] 		Assert.assertEquals("url", runner.getCurrentUrl())

[EOL] [EOL] Assert.assertEquals(set.toArray(), new Double[] { 1.0 })
[EOL] 		Assert.assertEquals(Boolean.TRUE, factory.getProperty(JsonXMLOutputFactory.PROP_MULTIPLE_PI)); [EOL] 		Assert.assertEquals(Character.valueOf(':'), factory.getProperty(JsonXMLOutputFactory.PROP_NAMESPACE_SEPARATOR)); [EOL] 		Assert.assertNull(factory.getProperty(JsonXMLOutputFactory.PROP_VIRTUAL_ROOT)); [EOL] 		Assert.assertEquals(Boolean.TRUE, factory.getProperty(JsonXMLOutputFactory.PROP_NAMESPACE_DECLARATIONS)); [EOL] 		Assert.assertEquals(Boolean.FALSE, factory.getProperty(JsonXMLOutputFactory.PROP_PRETTY_PRINT)); [EOL] 		Assert.assertEquals(Boolean.FALSE, factory.getProperty(JsonXMLOutputFactory.PROP_AUTO_ARRAY)); [EOL] 		Assert.assertEquals(Boolean.TRUE, factory.getProperty(JsonXMLOutputFactory.PROP_MULTIPLE_PI)); [EOL] 		Assert.assertEquals(Character.valueOf('_'), factory.getProperty(JsonXMLOutputFactory.PROP_NAMESPACE_SEPARATOR)); [EOL] 		Assert.assertEquals(new QName("sampleRootElement"), factory.getProperty(JsonXMLOutputFactory.PROP_VIRTUAL_ROOT)); [EOL] 		Assert.assertEquals(Boolean.FALSE, factory.getProperty(JsonXMLOutputFactory.PROP_NAMESPACE_DECLARATIONS)); [EOL] 		Assert.assertEquals(Boolean.TRUE, factory.getProperty(JsonXMLOutputFactory.PROP_PRETTY_PRINT)); [EOL] 		Assert.assertEquals(Boolean.TRUE, factory.getProperty(JsonXMLOutputFactory.PROP_AUTO_ARRAY))
[EOL] assertEquals(TEST_ENCASS, nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); [EOL] assertEquals(encass.getGuid(), guidElement.getAttribute(PolicyEntityBuilder.STRING_VALUE))
[EOL] assertEquals(7, count); [EOL] assertTrue(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering")); [EOL] assertEquals(7, count); [EOL] assertFalse(writer.getBuffer().toString().contains("> Cocoon Cron Block Configurable Clustering"))

[EOL] assertTrue(MultiParts.hasMultiPart(metaDatas))

[EOL] assertEquals(expResult, result)

[EOL] assertNotNull(getSoapResourcesRootDir(temporaryFolder.getRoot()))

[EOL] assertFalse(insertion.overlap(98, true)); [EOL] assertFalse(insertion.overlap(99, true)); [EOL] assertTrue(insertion.overlap(100, true)); [EOL] assertFalse(insertion.overlap(101, true)); [EOL] [EOL] assertFalse(insertion.overlap(new RegionImpl("x", 97, 98), true)); [EOL] assertFalse(insertion.overlap(new RegionImpl("x", 97, 99), true)); [EOL] assertTrue(insertion.overlap(new RegionImpl("x", 97, 100), true)); [EOL] assertTrue(insertion.overlap(new RegionImpl("x", 98, 101), true)); [EOL] assertTrue(insertion.overlap(new RegionImpl("x", 98, 100), true)); [EOL] assertTrue(insertion.overlap(new RegionImpl("x", 99, 100), true)); [EOL] assertTrue(insertion.overlap(new RegionImpl("x", 100, 100), true)); [EOL] assertTrue(insertion.overlap(new RegionImpl("x", 100, 101), true)); [EOL] assertFalse(insertion.overlap(new RegionImpl("x", 101, 102), true)); [EOL] [EOL] assertTrue(insertion.overlap(insertion, true))
[EOL] ExecutionException executionException = assertThrows(ExecutionException.class, cursorResultFuture::get); [EOL] assertNotNull(executionException.getCause()); [EOL] assertSame(ex, executionException.getCause())
[EOL] assertTrue(SearchPattern.wildcardMatch(pat, str))
@Test [EOL] @Config(sdk = Config.ALL_SDKS) [EOL] public void normalizeLanguageCode_normalizesCodeToTwoLetterISOAndLowerCase_keepingAllSubtags() { [EOL] assertThat(Util.normalizeLanguageCode("es")).isEqualTo("es"); [EOL] assertThat(Util.normalizeLanguageCode("spa")).isEqualTo("es"); [EOL] assertThat(Util.normalizeLanguageCode("es-AR")).isEqualTo("es-ar"); [EOL] assertThat(Util.normalizeLanguageCode("SpA-ar")).isEqualTo("es-ar"); [EOL] assertThat(Util.normalizeLanguageCode("es_AR")).isEqualTo("es-ar"); [EOL] assertThat(Util.normalizeLanguageCode("spa_ar")).isEqualTo("es-ar"); [EOL] assertThat(Util.normalizeLanguageCode("es-AR-dialect")).isEqualTo("es-ar-dialect"); [EOL] // Regional subtag (South America) [EOL] assertThat(Util.normalizeLanguageCode("ES-419")).isEqualTo("es-419"); [EOL] // Script subtag (Simplified Taiwanese) [EOL] assertThat(Util.normalizeLanguageCode("zh-hans-tw")).isEqualTo("zh-hans-tw"); [EOL] assertThat(Util.normalizeLanguageCode("zho-hans-tw")).isEqualTo("zh-hans-tw"); [EOL] // Non-spec compliant subtags. [EOL] assertThat(Util.normalizeLanguageCode("sv-illegalSubtag")).isEqualTo("sv-illegalsubtag")
[EOL] assertThat(resultOne).hasSize(numberOne); [EOL] assertThat(resultTwo).hasSize(numberTwo); [EOL] assertThat(resultThree).hasSize(0)
[EOL] [EOL] assertTrue("User should have role 'testrole'", user.hasRole("testrole")); [EOL] assertFalse("User should NOT have role 'dummyrole'", user.hasRole("dummyrole")); [EOL] assertTrue("User should have role 'testrole 2'", user.hasRole("testrole 2")); [EOL] assertFalse("User should NOT have role 'dummyrole'", user.hasRole("dummyrole")); [EOL] assertFalse("User should NOT have any role in given array", user.hasAnyRoleIn(rolesArray)); [EOL] assertTrue("User should have role listed in given array", user.hasAnyRoleIn(rolesArray)); [EOL] assertTrue("Admin user should have any role", user.hasRole("any role what so ever"))
[EOL] assertEquals(TimeUtil.parseShortUtcFormat("2002-01-12"), FILE_TYPE.parseDate(file.getName())); [EOL] assertEquals(TimeUtil.parseShortUtcFormat("2002-04-16"), FILE_TYPE.parseDate(file1.getName())); [EOL] assertEquals(TimeUtil.parseShortUtcFormat("2002-01-20"), FILE_TYPE.parseDate(file2.getName())); [EOL] assertEquals(TimeUtil.parseShortUtcFormat("2002-09-15"), FILE_TYPE.parseDate(file3.getName()))


[EOL] [EOL] assertNotNull(definitions); [EOL] assertEquals(2, definitions.size())
@Test [EOL] public void test_set_state_unknown_batch_search() { [EOL] assertThat(repository.setState("false_uuid", State.RUNNING)).isFalse()
[EOL] [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 0)).isFalse(); [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 2)).isTrue(); [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 3)).isTrue(); [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 4)).isFalse(); [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 9)).isFalse(); [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 22)).isTrue(); [EOL] assertThat(IPv4Ranges.withinRanges(ranges, 31)).isFalse()
[EOL] [EOL] // then [EOL] assertNotNull(input); [EOL] assertEquals(2, [EOL] input.getInputId()); [EOL] assertEquals(InputType.FAUNA, [EOL] input.getType()); [EOL] assertEquals(calendar.getTime(), [EOL] input.getDate()); [EOL] [EOL] assertNull(input.getQualification()); [EOL] assertEquals(0, [EOL] input.getObservers() [EOL] .size()); [EOL] assertEquals(0, [EOL] input.getTaxa() [EOL] .size()); [EOL] assertEquals(-1, [EOL] input.getCurrentSelectedTaxonId())
[EOL] assertEquals(6, splits.length)
[EOL] [EOL] testObserver.assertComplete()
[EOL] 		Assert.assertEquals(serviceTags.getServiceName(), oldServiceTag.getServiceName()); [EOL] 		Assert.assertEquals(serviceTags.getTagVersion(), oldServiceTag.getTagVersion())


[EOL] assertThat(CompositeMetadataCodec.isWellKnownMimeType(wellKnown)).isTrue(); [EOL] assertThat(CompositeMetadataCodec.isWellKnownMimeType(explicit)).isFalse()
[EOL] assertThat(result).isEqualToIgnoringWhitespace(expected)
[EOL] [EOL] // then [EOL] assertFalse(result.isSucceeded()); [EOL] assertEquals(testResult.took, result.getTook()); [EOL] assertEquals(bulkResultItem, resultItem)
[EOL] assertThat(result, is(nullValue()))


[EOL] [EOL] 		assertEquals(origID.hashCode(), copyID.hashCode()); [EOL] 		assertEquals(origID, copyID)
[EOL] 		assertEquals(RestApiResponseHandler.getResponseOk().getStatus(), 200); [EOL] 		assertEquals(RestApiResponseHandler.getResponseOk("String for Test").getStatus() , (Response.ok("String for test").cacheControl(cc).build().getStatus())); [EOL] 		assertEquals(RestApiResponseHandler.getResponseOk(jo).getStatus() , Response.ok(jo.toString()).cacheControl(cc).build().getStatus())
@Test [EOL] public void testRelease1_2_0() { [EOL] assertTrue(NameNodeLayoutVersion.supports(LayoutVersion.Feature.CONCAT, [EOL] Feature.RESERVED_REL1_2_0.getInfo().getLayoutVersion()))

[EOL] [EOL] assertFalse(mask.getValue(0, 5)); [EOL] assertTrue(mask.getValue(1, 5)); [EOL] assertTrue(mask.getValue(2, 5)); [EOL] [EOL] assertFalse(mask.getValue(6, 2)); [EOL] assertFalse(mask.getValue(6, 3)); [EOL] assertFalse(mask.getValue(6, 4))



[EOL] 		Assert.assertFalse("Class name not constructed correctly", isQualified)
[EOL] [EOL] // [EOL] // [EOL] assertEquals(expResult, result)

@Test public void generateSingleElementStream() { [EOL] assertThat(MoreStreams.generate(1, x -> Stream.empty()).collect(toList())) [EOL] .containsExactly(1)
[EOL] 	assertThat(converter.convert("10.00", Double.class, bundle), is(equalTo(new Double("10.00")))); [EOL] 	assertThat(converter.convert("10.01", Double.class, bundle), is(equalTo(new Double("10.01"))))

[EOL] assertThat(i).isEmpty()
[EOL] [EOL] assertEquals(2, executionPlan.getStageDAG().getVertices().size()); [EOL] assertEquals(2, executionPlan.getStageDAG().getTopologicalSort().get(0).getIRDAG().getVertices().size()); [EOL] assertEquals(3, executionPlan.getStageDAG().getTopologicalSort().get(1).getIRDAG().getVertices().size())
[EOL] assertNull(model.getSimulation()); [EOL] assertNull(model.getBackground()); [EOL] assertNull(model.getSettings()); [EOL] [EOL] assertNotNull(returnPath); [EOL] assertNotNull(model.getSimulation()); [EOL] assertNotNull(model.getBackground()); [EOL] assertNotNull(model.getSettings())
[EOL] [EOL] assertTrue(targetArray.getElementType() == float.class); [EOL] assertEquals(10.5f, targetArray.getFloat(0), 0.0f); [EOL] assertEquals(14.5f, targetArray.getFloat(1), 0.0f)

[EOL] [EOL] // then [EOL] assertThat(credentials.isPresent(), is(false))
[EOL] 		assertEquals("https://www.gowalla.com/users/habuma", gowalla.getProfileUrl())
[EOL] [EOL] //Then [EOL] assertThat(actual.code()).isEqualTo(Code.SUCCESS); [EOL] assertThat(actual.message()).isEqualTo("title\tartist\tyear\n" + [EOL] "The Impossible Dream EP\tCarter the Unstoppable Sex Machine\t1992\n" + [EOL] "The Way You Are\tTears for Fears\t1983\n" + [EOL] "Primitive\tSoulfly\t2003\n")
[EOL] Assert.assertEquals( 8, fc.size() )
[EOL] assertEquals(1, results.size()); [EOL] assertEquals(5, results.size()); [EOL] assertEquals(7, results.size())
[EOL] Assert.assertTrue(byteChannel.isOpen()); [EOL] Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII)); [EOL] Assert.assertTrue(byteChannel.isOpen()); [EOL] Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII)); [EOL] Assert.assertTrue(byteChannel.isOpen()); [EOL] Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII)); [EOL] Assert.assertTrue(byteChannel.isOpen()); [EOL] Assert.assertEquals("12345", byteChannel.dump(StandardCharsets.US_ASCII)); [EOL] Assert.assertTrue(byteChannel.isOpen()); [EOL] Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII)); [EOL] Assert.assertTrue(byteChannel.isOpen()); [EOL] Assert.assertEquals("", byteChannel.dump(StandardCharsets.US_ASCII)); [EOL] Assert.assertFalse(byteChannel.isOpen()); [EOL] Assert.assertEquals("67890", byteChannel.dump(StandardCharsets.US_ASCII))
@Test [EOL] public void isValidExpression_startingDollar_false() { [EOL] assertFalse(OpmUtils.isValidExpression("${hallo"))
[EOL] assertThat(iterator.next(), is("service")); [EOL] assertThat(iterator.next(), is("version"))

[EOL] [EOL] assertThat(util.getMax(toCheck)).containsOnly(ind("wx", "yz"))
@Test [EOL] public void testBuilder() { [EOL] assertEquals(EmptySchema.builder().build(), EmptySchema.builder().build())
[EOL] assertSame(expected, actual)
[EOL] Assert.assertNull(builder.build().getLogPath()); [EOL] Assert.assertEquals(logPath, builder.build().getLogPath())
[EOL] [EOL] 		Assert.assertEquals(BooleanNode.TRUE, result)
[EOL] [EOL] assertTrue(handler.isEmpty())
@Test [EOL] public void testWrapReadOnly() { [EOL] assertWrapped(newBuffer(8).asReadOnly())
[EOL] Assert.assertTrue(HAUtil.isTokenForLogicalUri(tok2))
[EOL] Assert.assertEquals(5, fpgaResourceHandler.getFpgaAllocator() [EOL] .getAvailableFpgaCount()); [EOL] Assert.assertEquals(5, fpgaResourceHandler.getFpgaAllocator() [EOL] .getAllowedFpga().size()); [EOL] Assert.assertEquals(3, [EOL] fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size()); [EOL] } [EOL] } [EOL] Assert.assertTrue("Minor:" + s +" found", check); [EOL] } [EOL] Assert.assertEquals(3, [EOL] fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount()); [EOL] Assert.assertEquals(2, [EOL] fpgaResourceHandler.getFpgaAllocator().getAvailableFpgaCount()); [EOL] Assert.assertEquals(2, [EOL] fpgaResourceHandler.getFpgaAllocator().getAllowedFpga().size())


[EOL] } [EOL] Assert.assertTrue("ProcessStartFile doesn't exist!", [EOL] processStartFile.exists()); [EOL] Assert.assertEquals(cId.toString(), reader.readLine()); [EOL] Assert.assertEquals(context.getNodeId().getHost(), reader.readLine()); [EOL] Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), [EOL] reader.readLine()); [EOL] Assert.assertEquals(String.valueOf(HTTP_PORT), reader.readLine()); [EOL] Assert.assertEquals(StringUtils.join(",", appDirs), reader.readLine()); [EOL] Assert.assertEquals(user, reader.readLine()); [EOL] Assert.assertEquals(user, reader.readLine()); [EOL] } [EOL] } [EOL] Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found); [EOL] Assert.assertEquals( [EOL] conf.get( [EOL] YarnConfiguration.NM_USER_HOME_DIR, [EOL] YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), [EOL] reader.readLine()); [EOL] [EOL] for (String serviceName : containerManager.getAuxServiceMetaData().keySet()) { [EOL] Assert.assertEquals( [EOL] containerManager.getAuxServiceMetaData().get(serviceName), [EOL] ByteBuffer.wrap(Base64.decodeBase64(reader.readLine().getBytes()))); [EOL] } [EOL] [EOL] Assert.assertEquals(cId.toString(), containerLaunchContext [EOL] .getEnvironment().get(Environment.CONTAINER_ID.name())); [EOL] Assert.assertEquals(context.getNodeId().getHost(), containerLaunchContext [EOL] .getEnvironment().get(Environment.NM_HOST.name())); [EOL] Assert.assertEquals(String.valueOf(context.getNodeId().getPort()), [EOL] containerLaunchContext.getEnvironment().get(Environment.NM_PORT.name())); [EOL] Assert.assertEquals(String.valueOf(HTTP_PORT), containerLaunchContext [EOL] .getEnvironment().get(Environment.NM_HTTP_PORT.name())); [EOL] Assert.assertEquals(StringUtils.join(",", appDirs), containerLaunchContext [EOL] .getEnvironment().get(Environment.LOCAL_DIRS.name())); [EOL] Assert.assertEquals(StringUtils.join(",", containerLogDirs), [EOL] containerLaunchContext.getEnvironment().get(Environment.LOG_DIRS.name())); [EOL] Assert.assertEquals(user, containerLaunchContext.getEnvironment() [EOL] 	.get(Environment.USER.name())); [EOL] Assert.assertEquals(user, containerLaunchContext.getEnvironment() [EOL] 	.get(Environment.LOGNAME.name())); [EOL] } [EOL] } [EOL] Assert.assertTrue("Wrong local-dir found : " + obtainedPWD, found); [EOL] Assert.assertEquals( [EOL] conf.get( [EOL] 	 YarnConfiguration.NM_USER_HOME_DIR, [EOL] 	 YarnConfiguration.DEFAULT_NM_USER_HOME_DIR), [EOL] 	containerLaunchContext.getEnvironment() [EOL] 		.get(Environment.HOME.name())); [EOL] // No more lines [EOL] Assert.assertEquals(null, reader.readLine()); [EOL] [EOL] // Now test the stop functionality. [EOL] [EOL] // Assert that the process is alive [EOL] Assert.assertTrue("Process is not alive!", [EOL] DefaultContainerExecutor.containerIsAlive(pid)); [EOL] // Once more [EOL] Assert.assertTrue("Process is not alive!", [EOL] DefaultContainerExecutor.containerIsAlive(pid)); [EOL] Assert.assertEquals(expectedExitCode, containerStatus.getExitStatus()); [EOL] [EOL] // Assert that the process is not alive anymore [EOL] Assert.assertFalse("Process is still alive!", [EOL] DefaultContainerExecutor.containerIsAlive(pid))
[EOL] assertTrue("Failed to create log dir", logFile.getParentFile().mkdirs()); [EOL] assertEquals(logMessage, responseText); [EOL] Assert.assertEquals(Status.NOT_FOUND.getStatusCode(), response.getStatus()); [EOL] assertTrue(responseText.contains("Cannot find this log on the local disk.")); [EOL] Assert.assertNull(nmContext.getContainers().get(containerId)); [EOL] assertEquals(logMessage, responseText)
[EOL] assertContainsWhenRendered(NAME, "A")
[EOL] } [EOL] [EOL] assertEquals(control.size(), distinct.size()); [EOL] assertTrue(ResultSetCompare.equalsByTest(control, distinct, NodeUtils.sameNode))

[EOL] 		// Assert [EOL] 		assertEquals(expectedAddMsg, cstl.getAddMessage())
@Test [EOL] public void testEmptyValuesEqual() [EOL] { [EOL] assertEquals( 0, comparator.compare( cn_empty_1, cn_empty_1 ) ); [EOL] assertEquals( 0, comparator.compare( cn_empty_1, cn_empty_2 ) ); [EOL] assertEquals( 0, comparator.compare( cn_empty_2, cn_empty_1 ) )
[EOL] [EOL] assertTrue(abstractWitsmlObject instanceof com.hashmapinc.tempus.WitsmlObjects.v1411.ObjWell); [EOL] [EOL] assertEquals(null, objWell.getNumLicense())
// transferLengthInBlocks [EOL] assertEquals(0, result);// transferLengthInBlocks [EOL] assertEquals(2, result)
[EOL] assertThat(client.getApiVersion()).isEqualTo(DockerAPIVersion.parse("9.99"))

[EOL] assertThat(condition.getDescription()).isNotEmpty()
[EOL] [EOL] Assert.assertEquals(stroomLogger.isTraceEnabled() ? 1 : 0, counter.get())
[EOL] [EOL] assertEquals("explain", optreg.getOperation(ExplainCommand.class).getOperationNames()[0]); [EOL] assertEquals(true, optreg.getAllOperations().contains(optentry))

[EOL] Assert.assertEquals(Status.OK [EOL] .getStatusCode(), response.getStatus())
[EOL] [EOL] assertEquals(guestbookName, greeting.getKey().getParent().getName()); [EOL] assertEquals(testContent, greeting.getProperty("content")); [EOL] assertEquals(currentUser, greeting.getProperty("user")); [EOL] assertTrue("The date in the entity [" + date + "] is prior to the request being performed", [EOL] priorToRequest.before(date) || priorToRequest.equals(date)); [EOL] assertTrue("The date in the entity [" + date + "] is after to the request completed", [EOL] afterRequest.after(date) || afterRequest.equals(date))

[EOL] // Verify the success metric for download is incremented. [EOL] Assert.assertEquals(1, (int) backupMetrics.getValidDownloads().actualCount())
@Test [EOL] void getSupportedEntries() throws ComponentLookupException [EOL] { [EOL] assertTrue(this.manager.getSupportedEntries().isEmpty()); [EOL] [EOL] assertTrue(this.manager.getSupportedEntries().isEmpty()); [EOL] [EOL] assertEquals(toSet("entry11", "entry12"), toSet(this.manager.getSupportedEntries())); [EOL] [EOL] assertEquals(toSet("entry11", "entry12", "entry2"), toSet(this.manager.getSupportedEntries()))
[EOL] Assert.assertEquals(expectedResponse, actualResponse); [EOL] Assert.assertEquals(1, actualRequests.size()); [EOL] [EOL] Assert.assertEquals( [EOL] resourceName, AdGroupBidModifierName.parse(actualRequest.getResourceName())); [EOL] Assert.assertTrue( [EOL] channelProvider.isHeaderSent( [EOL] ApiClientHeaderProvider.getDefaultApiClientHeaderKey(), [EOL] GaxGrpcProperties.getDefaultApiClientHeaderPattern()))


[EOL] assertThat( pk, is( notNullValue() ) ); [EOL] assertThat( pk.getName( getTransaction() ), is( name ) ); [EOL] assertThat( this.table.hasChild( getTransaction(), name ), is( true ) )
[EOL] 		Assert.assertFalse(bnlChk)
[EOL] [EOL] assertThat(subscriptionsDescriptor.getSubscriptions().get(0), is(subscription2)); [EOL] assertThat(subscriptionsDescriptor.getSubscriptions().get(1), is(subscription1)); [EOL] assertThat(subscriptionsDescriptor.getSubscriptions().get(2), is(subscription3))
[EOL] [EOL] Assert.assertTrue(conflictMedicationIds.isEmpty())

[EOL] [EOL] assertEquals("sso token is not defined", response.getText())
[EOL] [EOL] // assert [EOL] assertThat(result, is(false))
[EOL] assertEquals(expResult, result)
[EOL] assertTrue(file + " should be a directory", file.isDirectory()); [EOL] assertTrue(file.listFiles().length == 1); [EOL] assertArrayEquals(bytesFromClasspath, bytesFromRepo)
[EOL] [EOL] // Assert that our response was written (we have a valid session) [EOL] assertEquals("SUCCESS_MOCK_LOGIN_SERVLET", writer.toString())

[EOL] assertNotEquals(HttpServletResponse.SC_NOT_FOUND, status); [EOL] assertEquals(RESULT, writer.toString())

[EOL] assertEquals(expResult, result)
[EOL] [EOL] Assert.assertEquals(200, StringCollectSink.values.size())
[EOL] [EOL] // Cache knows nothing of the doc so there cannot be a producer [EOL] assertThat(sharedKafkaProducer.getKafkaProducer()).isEmpty(); [EOL] assertThat(sharedKafkaProducer.hasKafkaProducer()).isFalse()


@Test [EOL] 	public void testExtractBoolean() { [EOL] [EOL] 		Assert.assertEquals( true, DockerUtils.extractBoolean( Boolean.TRUE )); [EOL] 		Assert.assertEquals( false, DockerUtils.extractBoolean( Boolean.FALSE )); [EOL] 		Assert.assertEquals( false, DockerUtils.extractBoolean( null ))
[EOL] assertEquals(HttpStatus.OK, responseEntity.getStatusCode()); [EOL] assertEquals(2, responseEntity.getBody().getData().getValues().length)
[EOL] assertEquals(expected, ResourceNames.sharedCriterion(1234L, 5678L, 91011L))
[EOL] 		assertEquals(true, result)
[EOL] [EOL] assertThat(copy, is(not(sameInstance(command)))); [EOL] assertCommand(copy, "list", "--deleted")
[EOL] assertEquals(UUID.fromString("00000000-0000-0000-0000-000000000001"), subject.getId()); [EOL] assertEquals("subject", subject.getName()); [EOL] assertNull(subject.getOrganization())
[EOL] } catch (Exception e) { [EOL] assertTrue(e instanceof IllegalArgumentException); [EOL] assertEquals(e.getMessage(), [EOL] "The value of property testClassName must not be null")
[EOL] assertThat(result).isEqualTo(RESULT_FORMAT_READ); [EOL] assertThat(formatHolder.drmSession).isSameInstanceAs(mockDrmSession); [EOL] assertReadEncryptedSample(/* sampleIndex= */ 0); [EOL] assertReadEncryptedSample(/* sampleIndex= */ 1); [EOL] assertThat(formatHolder.drmSession).isNull(); [EOL] assertThat(result).isEqualTo(RESULT_FORMAT_READ); [EOL] assertThat(formatHolder.drmSession).isNull(); [EOL] assertReadEncryptedSample(/* sampleIndex= */ 2); [EOL] assertThat(result).isEqualTo(RESULT_FORMAT_READ); [EOL] assertThat(formatHolder.drmSession).isSameInstanceAs(mockDrmSession)
[EOL] [EOL] assertThat(batchingCallSettings.toString()).contains("retryableCodes=" + retryCodes); [EOL] assertThat(batchingCallSettings.toString()).contains("retrySettings=" + retrySettings); [EOL] assertThat(batchingCallSettings.toString()).contains("batchingSettings=" + BATCHING_SETTINGS)
[EOL] assertTrue(logger.isTraceEnabled())

[EOL] assertTrue("sanity: ", prefWidth > 10); [EOL] assertEquals("pref width must be bounded by max", [EOL] max, columnExt.getPreferredWidth())

[EOL] assertThat(interpolatedValue).isWithin(0.000001).of(0.876125); [EOL] assertThat(i1).isWithin(0.000001).of(2.2)
[EOL] [EOL] Assertion assertion = mock(Assertion.class); [EOL] when(assertionProvider.getAssertion()).thenReturn(assertion); [EOL] when(assertion.getPrincipal()).thenReturn(null); [EOL] [EOL] assertThatThrownBy(() -> proxyTicketProvider.getProxyTicket(service)) [EOL] .isInstanceOf(IllegalStateException.class) [EOL] .hasMessage("Unable to provide a proxy ticket with null %s", AttributePrincipal.class.getSimpleName()); [EOL] [EOL] verify(assertionProvider, times(1)).getAssertion(); [EOL] verify(assertion, times(1)).getPrincipal()
[EOL] assertEquals(0, upgrades.size()); [EOL] assertEquals(0, requestIds.size())
[EOL] assertEquals("Map should be empty", 0, values.size())
[EOL] assertArrayEquals(new Integer[]{1, 1, 2, 2, 3, 3, 4, 4, 5, 5}, eval.toArray(new Integer[]{}))
[EOL] assertTrue("should throw!", false); [EOL] } catch (IOException e) { [EOL] assertEquals("Bad configuration of " + [EOL] KeyProviderFactory.KEY_PROVIDER_PATH + [EOL] " at unkn@own:/x/y", e.getMessage())
[EOL] 		assertEquals(false, result)
[EOL] assertThat(botApiResponse).isEqualTo(BOT_API_SUCCESS_RESPONSE)
[EOL] } [EOL] assertFalse(lfs.util().exists(p))
[EOL] 		assertEquals(sortField.getOrder(builder, root), order2)
[EOL] } catch (JBBPTokenizerException ex) { [EOL] assertEquals(2, ex.getPosition())
[EOL] [EOL] assertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> resources.text(null, new Object[0])); [EOL] assertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> resources.text("missing.key", [EOL] (Object[]) null)); [EOL] assertThatExceptionOfType(MissingResourceException.class).isThrownBy(() -> resources.text("missing.key", [EOL] new Object[0]))
@Test [EOL] void testRequireNonNullElements_array_contains_no_nulls() { [EOL] assertArrayEquals(ARRAY_WITHOUT_NULL, NullUtil.requireNonNullElements(ARRAY_WITHOUT_NULL))
@Test [EOL] void body() { [EOL] assertNotNull(Elements.body())

[EOL] 		Assert.assertEquals( Status.FORBIDDEN.getStatusCode(), resp.getStatus())
[EOL] assertActivationSpecValid()
[EOL] assertThat(op.toString(), is(equalTo("all of [host 'vm1', host 'vm2', host 'vm3', host 'vm4']")))

[EOL] Assert.assertEquals( 3, segment.getControlPoints().size() ); [EOL] Assert.assertEquals( 2.0, segment.getControlPoints().get( 0 ).get0() ); [EOL] Assert.assertEquals( 0.0, segment.getControlPoints().get( 0 ).get1() ); [EOL] Assert.assertEquals( 0.0, segment.getControlPoints().get( 1 ).get0() ); [EOL] Assert.assertEquals( 2.0, segment.getControlPoints().get( 1 ).get1() ); [EOL] Assert.assertEquals( -2.0, segment.getControlPoints().get( 2 ).get0() ); [EOL] Assert.assertEquals( 0.0, segment.getControlPoints().get( 2 ).get1() )
@Test [EOL] 	public void testFileTypeAsString() { [EOL] [EOL] 		Assert.assertNotSame( "unknown", FileDefinition.fileTypeAsString( FileDefinition.AGGREGATOR )); [EOL] 		Assert.assertNotSame( "unknown", FileDefinition.fileTypeAsString( FileDefinition.GRAPH )); [EOL] 		Assert.assertNotSame( "unknown", FileDefinition.fileTypeAsString( FileDefinition.INSTANCE )); [EOL] 		Assert.assertNotSame( "unknown", FileDefinition.fileTypeAsString( FileDefinition.UNDETERMINED )); [EOL] 		Assert.assertEquals( "unknown", FileDefinition.fileTypeAsString( 54 ))
[EOL] [EOL] assertEquals(expectedUrl, actualUrl)
[EOL] assertEquals("kavitha working", child.get("name")); [EOL] assertEquals("1-ec347c93b262e7db0e306b77f22c2e19", child.get("_rev"))

[EOL] assertNotNull(m); [EOL] assertNotNull(m.getDimensions()); [EOL] assertEquals(EXPECTED_DIMENSIONS_COUNT, m.getDimensions().size()); [EOL] assertEquals(EXPECTED_DIMENSION_ID, d.getId()); [EOL] assertNotNull(dimensionsAllowedValues); [EOL] assertEquals(EXPECTED_DIMENSION_ALLOWED_VALUES.size(), dimensionsAllowedValues.size()); [EOL] EXPECTED_DIMENSION_ALLOWED_VALUES.forEach(v -> assertTrue( [EOL] String.format("Expected key %s not found from dimensions parsed allowed values", v.getKey()), [EOL] dimensionsAllowedValues.contains(v)))

[EOL] assertThat(getOutput(), is(expected)); [EOL] assertThat(ret, is(TagSupport.EVAL_BODY_INCLUDE))

[EOL] assertEquals(0x5e, hash.getByte())
[EOL] [EOL] assertEquals(digest.getCount(), (double) values.size())
[EOL] assertThat(result, containsString("group TEST"))
[EOL] assertEquals(0, fields.size()); [EOL] assertEquals(1, fields.size()); [EOL] assertEquals(2, fields.size()); [EOL] assertThrows(IllegalArgumentException.class, () -> Search.getAllFields(null, search)); [EOL] assertThrows(IllegalArgumentException.class, () -> Search.getAllFields(BaseClass.class, null))
[EOL] assertThat(actual, sameJsonAs(EXPECTED))



[EOL] 		assertEquals( [EOL] 				"PERMIT", [EOL] 				pdp.evaluateRequest(simplePDP, request, [EOL] 						new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision()); [EOL] 		assertEquals( [EOL] 				"NOT_APPLICABLE", [EOL] 				pdp.evaluateRequest(simplePDP, request, [EOL] 						new LinkedList<Evaluatable>(), xacmlRequest).getPdpDecision())
[EOL] [EOL] Assert.assertEquals("myhost", pgpass.hostname); [EOL] Assert.assertEquals(5432, pgpass.port); [EOL] Assert.assertEquals("mydb", pgpass.database); [EOL] Assert.assertEquals("user", pgpass.username); [EOL] Assert.assertEquals("%:%:%::%", pgpass.password)

[EOL] assertEquals("1234", buffer.toString(bytes.length, bytes.length, CharsetUtil.UTF_8))
[EOL] } [EOL] catch (IllegalArgumentException ex) { [EOL] Assert.assertEquals("Found unsupported token: LITERAL_SYNCHRONIZED", ex.getMessage())
[EOL] [EOL] assertEquals(expectedUrl, client.getDownloadByIdUrl(request)); [EOL] [EOL] // check the "convenience" form that takes a fileId instead of a request. [EOL] assertEquals(expectedUrl, client.getDownloadByIdUrl(LARGE_FILE_ID))
[EOL] [EOL] assertThat(pathString, is("modified-path"))

[EOL] [EOL] 		assertSearch(searchSearchRequest, "bravo 1"); [EOL] [EOL] 		assertSearch(searchSearchRequest, "alpha 1", "bravo 1")

[EOL] assertArrayEquals(new byte[] {3, 2, 1,}, in.readByteArray(3, JBBPByteOrder.LITTLE_ENDIAN))
[EOL] [EOL] // VERIFY [EOL] assertAllExists(destDir)
[EOL] } catch (YarnException ex) { [EOL] Assert.assertEquals(ErrorStrings.SERVICE_UPGRADE_DISABLED, [EOL] ex.getMessage())
@Test [EOL] public void nullFieldConstructor() { [EOL] assertEquals("{}", new PgException(null, null, null, null).getMessage())
@Test [EOL] public void testTrimAll() { [EOL] Assert.assertNull(StringUtils.trimAll(null)); [EOL] Assert.assertEquals("foobar", StringUtils.trimAll(" f\to\ro\nb a r "))
[EOL] assertThat(graphML, notNullValue()); [EOL] assertThat(graphML, containsString("root.c1.n1")); [EOL] assertThat(graphML, containsString("_root_c1 -> _root_c2 [ color = \"#67001f\", fontcolor = \"#67001f\", penwidth = 3.0, style = dashed , label=\"2\", headlabel=\"1\", taillabel=\"2\"]
[EOL] assertEquals( [EOL] "Land and Vegetation: Key players on the Climate Scene", [EOL] DublinCoreXmlFormat.read(xml).getFirst(DublinCore.PROPERTY_TITLE))
[EOL] 		} [EOL] 		assert(true)
[EOL] [EOL] // do assert. [EOL] verify(mockExceptionLogger, times(1)).info((Exception) any())
[EOL] } [EOL] assertEquals(longs.length, set.size()); [EOL] [EOL] for (long val : longs) { [EOL] assertEquals(val, set.get(new Holder(val)).getId())
[EOL] assertNotNull(newDrl); [EOL] assertTrue(newDrl.contains("MyNewFile"))
[EOL] } catch (Exception e) { [EOL] assertEquals("Template name '' doesn't match the expected format: ^\\w[-\\w\\.]+$", e.getMessage())
[EOL] [EOL] assertThat(batchJobData.getJobAppCd(), is("jobAppCd")); [EOL] assertThat(batchJobData.getJobArgNm1(), is("1")); [EOL] assertThat(batchJobData.getJobArgNm2(), is("2")); [EOL] assertThat(batchJobData.getJobArgNm3(), is("3")); [EOL] assertThat(batchJobData.getJobArgNm4(), is("4")); [EOL] assertThat(batchJobData.getJobArgNm5(), is("5")); [EOL] assertThat(batchJobData.getJobArgNm6(), is("6")); [EOL] assertThat(batchJobData.getJobArgNm7(), is("7")); [EOL] assertThat(batchJobData.getJobArgNm8(), is("8")); [EOL] assertThat(batchJobData.getJobArgNm9(), is("9")); [EOL] assertThat(batchJobData.getJobArgNm10(), is("10")); [EOL] assertThat(batchJobData.getJobArgNm11(), is("11")); [EOL] assertThat(batchJobData.getJobArgNm12(), is("12")); [EOL] assertThat(batchJobData.getJobArgNm13(), is("13")); [EOL] assertThat(batchJobData.getJobArgNm14(), is("14")); [EOL] assertThat(batchJobData.getJobArgNm15(), is("15")); [EOL] assertThat(batchJobData.getJobArgNm16(), is("16")); [EOL] assertThat(batchJobData.getJobArgNm17(), is("17")); [EOL] assertThat(batchJobData.getJobArgNm18(), is("18")); [EOL] assertThat(batchJobData.getJobArgNm19(), is("19")); [EOL] assertThat(batchJobData.getJobArgNm20(), is("20")); [EOL] assertThat(batchJobData.getAddDateTime(), is(nullValue())); [EOL] assertThat(batchJobData.getBLogicAppStatus(), is("")); [EOL] assertThat(batchJobData.getCurAppStatus(), is("")); [EOL] assertThat(batchJobData.getJobSequenceId(), is("")); [EOL] assertThat(batchJobData.getUpdDateTime(), is(nullValue()))


[EOL] assertEquals("my-var", nameElement.getAttribute(PolicyEntityBuilder.STRING_VALUE)); [EOL] assertEquals(Base64.getEncoder().encodeToString("base64Text".getBytes(StandardCharsets.UTF_8)), b64)
[EOL] 		Assert.assertEquals( 1, proposals.size()); [EOL] [EOL] 		Assert.assertEquals( "f1", proposals.get( 0 ).getProposalName()); [EOL] 		Assert.assertEquals( "f1", proposals.get( 0 ).getProposalString()); [EOL] 		Assert.assertNull( proposals.get( 0 ).getProposalDescription()); [EOL] 		Assert.assertEquals( 0, proposals.get( 0 ).getReplacementOffset())
[EOL] [EOL] assertTrue(plane1.hashCode() == plane2.hashCode()); [EOL] assertTrue(plane1.hashCode() != plane3.hashCode())
[EOL] [EOL] // Then [EOL] assertFalse(check)
[EOL] Assert.assertFalse(response)
@Test [EOL] public void testNestedAnd() { [EOL] assertEquality(MatchType.NO_MATCH, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").equalsValue(2) [EOL] )), [EOL] queryField("c").equalsValue(3) [EOL] ), [EOL] keyField("p").nest(concatenateFields("a", "b"))); [EOL] [EOL] assertEqualityCoveringKey(MatchType.EQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").equalsValue(2) [EOL] )), [EOL] queryField("c").equalsValue(3) [EOL] ), [EOL] keyField("p").nest(concatenateFields("a", "b"))); [EOL] [EOL] assertEqualityCoveringKey(MatchType.INEQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").greaterThan(2) [EOL] )), [EOL] queryField("c").equalsValue(3) [EOL] ), [EOL] keyField("p").nest(concatenateFields("a", "b"))); [EOL] [EOL] assertEquality(MatchType.EQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").equalsValue(2) [EOL] )), [EOL] queryField("c").equalsValue(3) [EOL] ), [EOL] concat(keyField("p").nest(concatenateFields("a", "b")), keyField("c"))); [EOL] [EOL] assertEquality(MatchType.EQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").equalsValue(2) [EOL] )), [EOL] queryField("c").equalsValue(3) [EOL] ), [EOL] concat(keyField("c"), keyField("p").nest(concatenateFields("a", "b")), keyField("c"))); [EOL] [EOL] assertEquality(MatchType.NO_MATCH, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").matches(Query.and( [EOL] queryField("c").equalsValue(2), [EOL] queryField("d").equalsValue(3) [EOL] )) [EOL] )), [EOL] queryField("e").equalsValue(4) [EOL] ), [EOL] concat(keyField("e"), keyField("p").nest("a"))); [EOL] [EOL] assertEqualityCoveringKey(MatchType.EQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").matches(Query.and( [EOL] queryField("c").equalsValue(2), [EOL] queryField("d").equalsValue(3) [EOL] )) [EOL] )), [EOL] queryField("e").equalsValue(4) [EOL] ), [EOL] concat(keyField("e"), keyField("p").nest("a"))); [EOL] [EOL] assertEquality(MatchType.EQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").matches(Query.and( [EOL] queryField("c").equalsValue(2), [EOL] queryField("d").equalsValue(3) [EOL] )) [EOL] )), [EOL] queryField("e").equalsValue(4) [EOL] ), [EOL] concat(keyField("e"), keyField("p").nest(concat(keyField("b").nest(concatenateFields("c", "d")), keyField("a"))))); [EOL] [EOL] assertEquality(MatchType.INEQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").lessThan(1), [EOL] queryField("b").matches(Query.and( [EOL] queryField("c").equalsValue(2), [EOL] queryField("d").equalsValue(3) [EOL] )) [EOL] )), [EOL] queryField("e").equalsValue(4) [EOL] ), [EOL] concat(keyField("e"), keyField("p").nest(concat(keyField("b").nest(concatenateFields("c", "d")), keyField("a"))))); [EOL] [EOL] assertEqualityCoveringKey(MatchType.EQUALITY, [EOL] Query.and( [EOL] queryField("p").matches(Query.and( [EOL] queryField("a").equalsValue(1), [EOL] queryField("b").matches(Query.and( [EOL] queryField("c").equalsValue(2), [EOL] queryField("d").equalsValue(3) [EOL] )) [EOL] )), [EOL] queryField("e").equalsValue(4) [EOL] ), [EOL] concat(keyField("e"), keyField("p").nest(concat(keyField("b").nest(concatenateFields("c", "d")), keyField("a")))))

[EOL] } catch (ConfigurationException ex) { [EOL] Assert.assertEquals("Kafka privilege can not start with an action.\n" + KafkaPrivilegeValidator.KafkaPrivilegeHelpMsg, ex.getMessage())
@Test [EOL] public void getReturns90() { [EOL] assertThat(new Foo().get()).isEqualTo(90)
[EOL] } [EOL] assertByteArrayEquals(resultBuffer, 0, expected, 0, expected.length); [EOL] assertEquals(in.read(), -1)
[EOL] assertTrue(valid)
[EOL] [EOL] 		assertEquals(vst.update(updated), codeSystemDto)
[EOL] [EOL] 		assertEquals(5d, evaluate(normContinuous, name, null))
[EOL] assertNull(column1Attributes.get("sortOrder")); [EOL] assertEquals(SortOrder.ascending, column2Attributes.get("sortOrder")); [EOL] assertEquals(SortOrder.descending, column1Attributes.get("sortOrder")); [EOL] assertEquals(SortOrder.unsorted, column2Attributes.get("sortOrder")); [EOL] assertTrue(facesContext.getPartialViewContext().getRenderIds().contains(clientId))
[EOL] assertEquals(expectedPolicies, policies)
[EOL] [EOL] assertEquals(scope, scopeSaved)

@Test [EOL] public void testOf_instantiation_fail() { [EOL] Exception ex = assertThrows(IllegalArgumentException.class, [EOL] () -> CodePoints.of(AbstractCodePoints.class)); [EOL] assertThat(ex.getMessage(), is( [EOL] "exception occurred while initializing"))
[EOL] assertFalse(Arrays.equals(digest1, digest2))
[EOL] assertEquals(2, service.getWorkflowInstances(new WorkflowQuery()).size()); [EOL] assertEquals(0, service.getWorkflowInstances(new WorkflowQuery()).size()); [EOL] for (WorkflowOperationInstance op : wi1.getOperations()) { [EOL] assertEquals(0, serviceRegistry.getChildJobs(op.getId()).size())
[EOL] assertEquals( mock.getName(), reportContentRepository.getRoot().getName() )
[EOL] assertThat(result, equalTo(out)); [EOL] assertThat(result, not(equalTo(err)))
[EOL] assertThat( iterator.next().getValue(), instanceOf( ChunkDecoder.class ) ); [EOL] assertThat( iterator.next().getValue(), instanceOf( MessageDecoder.class ) ); [EOL] assertThat( iterator.next().getValue(), instanceOf( InboundMessageHandler.class ) ); [EOL] [EOL] assertThat( iterator.next().getValue(), instanceOf( OutboundMessageHandler.class ) ); [EOL] [EOL] assertThat( iterator.next().getValue(), instanceOf( ChannelErrorHandler.class ) ); [EOL] [EOL] assertFalse( iterator.hasNext() )
@Test [EOL] void filterAndReplace() { [EOL] assertEquals("example-slashed.xml", CharacterBlacklistUtil.filterAndReplace("example-/-\\-slashed.xml"))

@Test [EOL] 	public void testGenerateNewTicket() throws LoginTicketNotFoundException, ExternalAppNotMappedException [EOL] 	{ [EOL] 		assertNotNull(manager); [EOL] 		assertNotNull(ticket); [EOL] 		assertFalse(ticket.isExpired()); [EOL] 		assertEquals(ticket.getId(), removed.getId()); [EOL] 		assertEquals(ticket.getIdAsString(), removed.getIdAsString()); [EOL] 		assertEquals(ticket.getCreationTime(), removed.getCreationTime()); [EOL] 		assertEquals(ticket.getRequistingApplication(), removed.getRequistingApplication()); [EOL] 		assertEquals(ticket.getRequestingApplicationUsername(), removed.getRequestingApplicationUsername()); [EOL] 		assertEquals(ticket.getValidityDuration(), removed.getValidityDuration()); [EOL] 		assertEquals(0, manager.getSize())
@Test [EOL] public void testH() { [EOL] assertThat(Functions.h(null), is("")); [EOL] assertThat(Functions.h(""), is("")); [EOL] assertThat(Functions.h("<a href=\"\">"), is( [EOL] "&lt; [EOL] assertThat(Functions.h("<a href=''>"), is("&lt; [EOL] assertThat(Functions.h("&lt; [EOL] assertThat(Functions.h(new boolean[] { true, false }), is( [EOL] "[true, false]")); [EOL] assertThat(Functions.h(new int[] { 1, 2, 3 }), is("[1, 2, 3]")); [EOL] assertThat(Functions.h(new short[] { 1, 2, 3 }), is("[1, 2, 3]")); [EOL] assertThat(Functions.h(new long[] { 1, 2, 3 }), is("[1, 2, 3]")); [EOL] assertThat(Functions.h(new byte[] { 1, 2, 3 }), is("[1, 2, 3]")); [EOL] assertThat(Functions.h(new double[] { 1, 2, 3 }), is( [EOL] "[1.0, 2.0, 3.0]")); [EOL] assertThat(Functions.h(new float[] { 1, 2, 3 }), is("[1.0, 2.0, 3.0]")); [EOL] assertThat(Functions.h(new char[] { 'a', 'b', 'c' }), is("[a, b, c]")); [EOL] assertThat(Functions.h(new String[] { "a", "b", "c" }), is( [EOL] "[a, b, c]"))

[EOL] assertEquals("control", treatment.getName()); [EOL] assertEquals("new description", treatment.getDescription())

[EOL] assertEquals(expected, actual)
[EOL] } catch (ExitException ex) { [EOL] Assert.assertEquals(0, ex.getExitCode())
[EOL] [EOL] Assert.assertEquals(0, serializeLength)
[EOL] assertThat(tx.getVersion(), is((byte) 0)); [EOL] assertThat(tx.getNonce(), is(246070626L)); [EOL] assertThat(tx.getSender(), is(new ScriptHash("969a77db482f74ce27105f760efa139223431394"))); [EOL] assertThat(tx.getSystemFee(), is(9007810L)); [EOL] assertThat(tx.getNetworkFee(), is(1268390L)); [EOL] assertThat(tx.getValidUntilBlock(), is(2106265L)); [EOL] assertThat(tx.getAttributes(), hasSize(0)); [EOL] assertThat(tx.getSigners(), hasSize(1)); [EOL] assertThat(tx.getSigners().get(0).getScriptHash(), [EOL] is(new ScriptHash("969a77db482f74ce27105f760efa139223431394"))); [EOL] assertThat(tx.getSigners().get(0).getScopes(), contains(WitnessScope.CALLED_BY_ENTRY)); [EOL] assertArrayEquals(new byte[]{(byte) OpCode.PUSH1.getCode()}, tx.getScript()); [EOL] assertThat(tx.getWitnesses(), is( [EOL] Arrays.asList(new Witness(new byte[]{0x00}, new byte[]{0x00}))))

[EOL] assertEquals(10, outbag.size()); [EOL] for (Tuple to : outbag) { [EOL] assertEquals(1, to.size()); [EOL] assertEquals("9", to.get(0))
[EOL] [EOL] assertThat(dependency.getDependencyType(), is(DependencyType.CREATE)); [EOL] assertThat(dependency.toString(), is("n1 --[CREATE]--> n2"))


[EOL] } catch (IllegalArgumentException e) { [EOL] assertEquals("min < 0", e.getMessage()); [EOL] } catch (IllegalArgumentException e) { [EOL] assertEquals("max < 0", e.getMessage())
[EOL] assertEquals("{\"const\":true}", actual)
[EOL] assertThat(label).isEqualTo(""); [EOL] assertNextTag(xpp)
[EOL] Assert.assertEquals("h1", node.getHostName()); [EOL] Assert.assertNull(node); [EOL] Assert.assertEquals("h3", node.getHostName()); [EOL] Assert.assertNull(node)
[EOL] assertNotNull(innerFile); [EOL] assertNotNull(inner); [EOL] assertFalse(((File)f.get(outer)).exists())
[EOL] assertEquals(1, timer.getCount(FDBStoreTimer.Events.PERFORM_NO_OP)); [EOL] assertThat(timer.getCount(FDBStoreTimer.Waits.WAIT_PERFORM_NO_OP), lessThanOrEqualTo(1))
[EOL] assertEquals(0, flushCount.get()); [EOL] assertEquals(0, flushCount.get()); [EOL] assertEquals(1, flushCount.get()); [EOL] assertFalse(channel.finish())
[EOL] [EOL] assertTrue(builder.miCut.getMenuItem().isEnabled()); [EOL] assertTrue(builder.miCopy.getMenuItem().isEnabled()); [EOL] assertTrue(builder.miPaste.getMenuItem().isEnabled()); [EOL] assertTrue(builder.miDeleteSelectedCells.getMenuItem().isEnabled()); [EOL] assertFalse(builder.miDeleteSelectedColumns.getMenuItem().isEnabled()); [EOL] assertTrue(builder.miDeleteSelectedRows.getMenuItem().isEnabled()); [EOL] assertFalse(builder.miOtherwiseCell.getMenuItem().isEnabled())
@Test [EOL] public void parseRsIdConcatRsId() throws Exception { [EOL] assertThat(RsIdParser.parseRsId("rs12345


@Test [EOL] public void getColumnIndexForId_should_beCorrect() throws DataSetException { [EOL] assertThat(tableMetaData.getColumnIndex("ID"), is(0))
@Test [EOL] public void withNewOptions() { [EOL] assertEquals(new CoapTcpCSM(1152, false), BASE.withNewOptions(null, null)); [EOL] assertEquals(new CoapTcpCSM(1000, false), BASE.withNewOptions(1000L, null)); [EOL] assertEquals(new CoapTcpCSM(1000, true), BASE.withNewOptions(1000L, true))



[EOL] [EOL] assertEquals( [EOL] Table.fromProto(createTableData()), adminClientWrapper.createTableAsync(request).get())
[EOL] [EOL] // 検証 [EOL] assertFalse(result)
[EOL] [EOL] assertEquals(a2, eNames.get(0)); [EOL] assertEquals(b2, eNames.get(1)); [EOL] assertEquals(a1, eNames.get(2)); [EOL] assertEquals(b1, eNames.get(3))
@Test [EOL] public void map() { [EOL] assertEquals("http://www.example.com/content/parent.html", model.map(parent))
@Test [EOL] void get11() { [EOL] assertEquals(m11, instance.get11())
@Test( expected = HostNotFoundException.class ) [EOL] public void testGetResourceHostById() throws Exception [EOL] { [EOL] assertEquals( resourceHost, localPeer.getResourceHostById( RESOURCE_HOST_ID ) )
[EOL] assertEquals("length after deletion", 0, getLength())
[EOL] [EOL] 		Assert.assertEquals("showMetrics", String.valueOf(data.get("action"))); [EOL] 		Assert.assertEquals("validURL", String.valueOf(data.get("fetchURL")))
[EOL] assertThat(files.contains(new File(thisTestFile.getPath())), CoreMatchers.is(false)); [EOL] assertThat(files.contains(new File(aTestFile.getPath())), CoreMatchers.is(true))

[EOL] assertEquals(expResult, result)
[EOL] Assert.assertNotNull(service)
@Test [EOL] void invalidJSON() { [EOL] assertThatThrownBy(() -> JSON.fromJSON(TestBean.class, "{")) [EOL] .isInstanceOf(UncheckedIOException.class); [EOL] [EOL] assertThatThrownBy(() -> JSON.fromJSON(Types.list(TestBean.class), "{")) [EOL] .isInstanceOf(UncheckedIOException.class)
[EOL] assertNotNull(nodeIds); [EOL] assertEquals(1, nodeIds.size()); [EOL] assertEquals("rgn2", nodeIds.iterator().next())
[EOL] // If no exception was thrown then the spec is build correctly. [EOL] assertThat(response.body().size()).isEqualTo(5)
[EOL] } catch (EOFException e) { [EOL] // ignore [EOL] } [EOL] Assert.assertEquals("sendError called due to shuffle error", [EOL] 0, failures.size())
[EOL] [EOL] assertThat(jodaBeforeSwitch, is(DateTime.parse(oxfBeforeSwitch.toISO8601Format()))); [EOL] assertThat(jodaAtSwitch, is(DateTime.parse(oxfAtSwitch.toISO8601Format()))); [EOL] assertThat(jodaAfterSwitch, is(DateTime.parse(oxfAfterSwitch.toISO8601Format())))

[EOL] Assert.assertEquals( 3, result.x ); [EOL] Assert.assertEquals( 3, result.y ); [EOL] Assert.assertEquals( 2, result.width ); [EOL] Assert.assertEquals( 2, result.height )

[EOL] [EOL] assertThat(grabTaskInformation(page).getRows().get(1).get(0)).isEqualToIgnoringGivenFields(description.toComponent(new DimensionFactory()), "reference")
[EOL] Assert.assertEquals(1, serviceClasses.size()); [EOL] Assert.assertEquals(serviceClasses.get(0), "com.test.JunkEndpoint")
[EOL] [EOL] Assert.assertTrue(a); [EOL] Assert.assertFalse(b); [EOL] [EOL] Assert.assertTrue(c)
[EOL] assertNotEquals(h1, h2); [EOL] assertNotEquals(h2, h1); [EOL] assertEquals(h1, h1); [EOL] assertEquals(h2, h2)

[EOL] [EOL] // 判定 [EOL] assertEquals("", resultString)
[EOL] [EOL] assertEquals(MediaType.APPLICATION_JSON_TYPE, response.getType())
[EOL] assertThat(instance.getIndividuals().isEmpty(), is(true))
[EOL] [EOL] assertCommons(actual); [EOL] assertSame(mockRegexPathTemplate, actual.getPathTemplate())
[EOL] assertEquals("Three", list.getSelectedValue()); [EOL] assertEquals("Three", list.getSelectedValue())
[EOL] assertEquals(expResult, result)

[EOL] [EOL] assertEquals(0.0, NcTools.getAddOffset(variable), 1e-8)
[EOL] assertTrue(contextURL.isDelta()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] assertTrue(contextURL.isDeltaDeletedLink()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] assertTrue(contextURL.isDeltaLink()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity()); [EOL] assertTrue(contextURL.isDeltaDeletedEntity()); [EOL] assertNull(contextURL.getSelectList()); [EOL] assertNull(contextURL.getNavOrPropertyPath()); [EOL] assertFalse(contextURL.isEntity())
[EOL] Assert.assertNotNull( filter )


[EOL] assertFalse(dirNode.isSnapshottable()); [EOL] assertTrue(dirNode.isSnapshottable()); [EOL] assertTrue(dirNode.isSnapshottable()); [EOL] assertFalse(dirNode.isSnapshottable()); [EOL] assertFalse(dirNode.isSnapshottable()); [EOL] assertTrue(rootNode.isSnapshottable()); [EOL] // root is snapshottable dir, but with 0 snapshot quota [EOL] assertEquals(0, ((INodeDirectorySnapshottable) rootNode).getSnapshotQuota()); [EOL] assertTrue(rootNode.isSnapshottable()); [EOL] assertEquals(INodeDirectorySnapshottable.SNAPSHOT_LIMIT, [EOL] ((INodeDirectorySnapshottable) rootNode).getSnapshotQuota()); [EOL] assertTrue(rootNode.isSnapshottable()); [EOL] assertEquals(INodeDirectorySnapshottable.SNAPSHOT_LIMIT, [EOL] ((INodeDirectorySnapshottable) rootNode).getSnapshotQuota()); [EOL] assertTrue(rootNode.isSnapshottable()); [EOL] assertEquals(0, ((INodeDirectorySnapshottable) rootNode).getSnapshotQuota()); [EOL] assertTrue(rootNode.isSnapshottable()); [EOL] assertEquals(0, ((INodeDirectorySnapshottable) rootNode).getSnapshotQuota())
@Test [EOL] public void parseRsIdOneRsId() throws Exception { [EOL] assertThat(RsIdParser.parseRsId("rs12345"), equalTo("rs12345"))

[EOL] [EOL] // Just 2 top level parsers [EOL] assertEquals(2, parsers.size()); [EOL] assertTrue(p.toString(), p instanceof CompositeParser); [EOL] assertEquals(2, ((CompositeParser)p).getAllComponentParsers().size()); [EOL] assertTrue(p.toString(), p instanceof ParserDecorator); [EOL] assertEquals(EmptyParser.class, ((ParserDecorator)p).getWrappedParser().getClass()); [EOL] assertEquals("hello/world", p.getSupportedTypes(null).iterator().next().toString())
[EOL] [EOL] assertThat(err, containsLines(LoggerImplTest.class.getName() + "#ERROR: Hello World"))
[EOL] assertTrue(filter.include(entry))
[EOL] Assert.assertEquals("$(my)", resolved.get("res1"))
[EOL] assertThat(alleleResource.getAlleleParser(), instanceOf(ExacAlleleParser.class)); [EOL] assertThat(exacAlleleParser.getPopulationKeys(), equalTo(ExacPopulationKey.GNOMAD_EXOMES)); [EOL] assertThat(alleleResource.getAlleleArchive(), equalTo(expectedArchive))

[EOL] [EOL] assertEquals(child.get("name"), "test"); [EOL] assertNull(child.opt("name"))
@Test [EOL] void getConnector() { [EOL] assertThrows(IllegalArgumentException.class, () -> new Morphix(null)); [EOL] [EOL] assertEquals(connector, morphix.getConnector())
[EOL] } catch (YarnException e) { [EOL] Assert.assertNull(plan); [EOL] Assert.assertTrue(message [EOL] .startsWith("Invalid period ")); [EOL] } catch (YarnException e) { [EOL] Assert.assertNull(plan); [EOL] Assert.assertTrue(message [EOL] .startsWith("Duration of the requested reservation:"))
[EOL] [EOL] 		// Assert [EOL] 		assertEquals(POLICY_ID, policyDto.getId()); [EOL] 		assertXMLEqual(POLICY_STRING, new String(policyDto.getPolicy(), [EOL] 				DOMUtils.DEFAULT_ENCODING))
[EOL] assertEquals(HttpStatus.FORBIDDEN, responseEntity.getStatusCode()); [EOL] assertEquals(responseEntityExpected, responseEntity)
[EOL] 		Assert.assertTrue(returnAvlue)
@Test [EOL] public void testGetCarburantMax() { [EOL] assertEquals(100.0, v1.reqCarburantMax(), 0.0001); [EOL] assertEquals(20.0, v2.reqCarburantMax(), 0.0001); [EOL] assertEquals(100.0, v3.reqCarburantMax(), 0.0001); [EOL] assertEquals(20.0, v4.reqCarburantMax(), 0.0001)

[EOL] 		assertThat(propertyDescriptionUnderTest.getPropertyClassWithoutTypeParameter(), is("List"))
[EOL] assertEquals(expResult, result)
[EOL] assertEquals( true, upsertCommand.startsWith( "' UPDATE " + schemaName + "." + tableName + " SET\n" ) )

[EOL] assertEquals( ( (FilterQuery) queries.get( 0 ) ).getTypeNames()[0].getFeatureTypeName(), [EOL] new QName( "InWaterA_1M" ) )

[EOL] Assert.assertNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertNotNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertEquals(0, handler.getExecutableSearchPaths().length); [EOL] Assert.assertNotNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertEquals(0, handler.getExecutableSearchPaths().length); [EOL] Assert.assertNotNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertEquals(1, handler.getExecutableSearchPaths().length); [EOL] Assert.assertNotNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertEquals(3, handler.getExecutableSearchPaths().length); [EOL] Assert.assertEquals("/path1", handler.getExecutableSearchPaths()[0]); [EOL] Assert.assertEquals("path2", handler.getExecutableSearchPaths()[1]); [EOL] Assert.assertEquals("path3/", handler.getExecutableSearchPaths()[2]); [EOL] Assert.assertNotNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertEquals(3, handler.getExecutableSearchPaths().length); [EOL] Assert.assertEquals("/path1", handler.getExecutableSearchPaths()[0]); [EOL] Assert.assertEquals("path2", handler.getExecutableSearchPaths()[1]); [EOL] Assert.assertEquals("path3/", handler.getExecutableSearchPaths()[2]); [EOL] Assert.assertNotNull(handler.getExecutableSearchPaths()); [EOL] Assert.assertEquals(3, handler.getExecutableSearchPaths().length); [EOL] Assert.assertEquals("/path1", handler.getExecutableSearchPaths()[0]); [EOL] Assert.assertEquals("path2", handler.getExecutableSearchPaths()[1]); [EOL] Assert.assertEquals("path3/", handler.getExecutableSearchPaths()[2])
[EOL] 		assertNotNull(resultMap); [EOL] 		assertEquals(1, resultMap.size()); [EOL] 		assertTrue(resultMap.containsKey("f.proxy_dc_contributor.facet.offset")); [EOL] 		assertEquals(new Integer(0), resultMap.get("f.proxy_dc_contributor.facet.offset"))

[EOL] assertTrue(appsInDefault.contains(application_0.getApplicationAttemptId())); [EOL] assertTrue(appsInDefault.contains(application_1.getApplicationAttemptId())); [EOL] assertEquals(2, appsInDefault.size()); [EOL] [EOL] Assert.assertNull(scheduler.getAppsInQueue("someotherqueue"))

[EOL] 		 [EOL] 		/* test */ [EOL] 		assertFalse(found); [EOL] 		assertEquals(0,scanner.pos)
[EOL] // Then [EOL] assertHasAcl("/unprotected", "world", "anyone", READ)
[EOL] [EOL] assertEquals(12345, response.getStatusCode()); [EOL] assertNull(response.getContent()); [EOL] assertEquals(expectedHeaders, response.getHeaders())

[EOL] assertNotNull(result, "Returned null instead of a map"); [EOL] assertTrue(result.isEmpty(), "Returned map wasn't initially empty"); [EOL] [EOL] // Check that null values are supported [EOL] assertFalse(result.containsKey("nullvalue"), "null value already present in the empty map"); [EOL] assertFalse(result.containsValue(null), "null value already present in the empty map"); [EOL] assertNull(result.get("nullvalue")); [EOL] assertTrue(result.containsKey("nullvalue"), "Failed to insert null value in the map"); [EOL] assertTrue(result.containsValue(null), "Failed to insert null value in the map"); [EOL] [EOL] // Check that null keys are supported [EOL] assertFalse(result.containsKey(null), "null key already present in the empty map"); [EOL] assertFalse(result.containsValue("nullkey"), "null key already present in the empty map"); [EOL] assertEquals("nullkey", result.get(null), "Failed to insert null key in the map"); [EOL] assertTrue(result.containsKey(null), "Failed to insert null key in the map"); [EOL] assertTrue(result.containsValue("nullkey"), "Failed to insert null key in the map")
[EOL] [EOL] // verify the value of the sensitive property in job.xml is restored. [EOL] assertThat(conf.get(sensitivePropertyName)) [EOL] .isEqualTo(sensitivePropertyValue) [EOL] .withFailMessage(sensitivePropertyName + " is modified."); [EOL] Assert.assertTrue("The job_conf.xml file is not in the JHS directory", [EOL] FileContext.getFileContext(conf).util().exists(jhsJobConfFile)); [EOL] Assert.assertEquals( [EOL] sensitivePropertyName + " is not redacted in HDFS.", [EOL] MRJobConfUtil.REDACTION_REPLACEMENT_VAL, [EOL] jhsJobConf.get(sensitivePropertyName))
[EOL] Assert.assertEquals("taskattempts", definition.getPluralName())
[EOL] [EOL] Assert.assertEquals(prev, response.getPreviousResource())
[EOL] ConnectCallback callback = new ConnectCallback() { [EOL] @Override [EOL] public void success(String message) { [EOL] // check in asserts [EOL] } [EOL] [EOL] @Override [EOL] public void failure(String message) { [EOL] fail("Failed to connect"); [EOL] assertEquals("test", connection.getClientID())
[EOL] assertEquals(10, outbag.size()); [EOL] for (Tuple to : outbag) { [EOL] assertEquals(1, to.size()); [EOL] assertEquals(count/9.0, to.get(0))
[EOL] assertNull(scanner.parse("<<>>")); [EOL] assertFailure(mode, scanner, "<<a>>", 1, 3); [EOL] assertFailure(mode, scanner, "", 1, 1); [EOL] assertFailure(mode, scanner, "a", 1, 1)
@Test [EOL] public void shouldHaveCorrectTypeIdentifier() throws Exception { [EOL] assertThat(this.dataservice.getTypeIdentifier( getTransaction() ), is(KomodoType.DATASERVICE))
[EOL] [EOL] // テスト実行 [EOL] assertEquals(0, asyncJobOperator.start(new String[] {}))
[EOL] 		assertEquals("notification_add_one_provider_successed", result)
) { [EOL] assertTrue(client.getClientId().startsWith("foo"))
[EOL] assertThat(values).containsExactly(entry("A", "1"), entry("B", "2"), entry("C", "3")); [EOL] [EOL] assertThat(emptyNode().getObjectValues()).isEmpty()
[EOL] assertEquals(from, periods.get(0).getA()); [EOL] if (periods.size() > 1) { [EOL] assertEquals( [EOL] LocalDateTime [EOL] .ofInstant(from, ZoneOffset.UTC) [EOL] .plusYears(1) [EOL] .withMonth(1) [EOL] .withDayOfMonth(1) [EOL] .withHour(0) [EOL] .withMinute(0) [EOL] .withSecond(0) [EOL] .withNano(0) [EOL] .minusNanos(1) [EOL] .toInstant(ZoneOffset.UTC), [EOL] periods.get(0).getB()); [EOL] } else { [EOL] assertEquals(to, periods.get(0).getB()); [EOL] } [EOL] assertEquals(to, periods.get(periods.size() - 1).getB()); [EOL] assertEquals(LocalDateTime [EOL] .ofInstant(to, ZoneOffset.UTC) [EOL] .withMonth(1) [EOL] .withDayOfMonth(1) [EOL] .withHour(0) [EOL] .withMinute(0) [EOL] .withSecond(0) [EOL] .withNano(0) [EOL] .toInstant(ZoneOffset.UTC), [EOL] periods.get(periods.size() - 1).getA())
@Test [EOL] public void getClientIdWithNullDescription() { [EOL] assertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> DockerCloudUtils.getClientId(null))

[EOL] [EOL] assertNotNull(content); [EOL] assertEquals(14, body.size()); [EOL] assertEquals("--" + BOUNDARY + CRLF, body.get(line++)); [EOL] assertTrue(body.get(line++).startsWith("Content-Type: multipart/mixed; [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertTrue(body.get(line++).startsWith("--changeset_")); [EOL] assertEquals("Content-Type: application/http" + CRLF, body.get(line++)); [EOL] assertEquals("Content-Transfer-Encoding: binary" + CRLF, body.get(line++)); [EOL] assertEquals("Content-ID: 1" + CRLF, body.get(line++)); [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertEquals("HTTP/1.1 204 No Content" + CRLF, body.get(line++)); [EOL] assertEquals("Content-Length: 47" + CRLF, body.get(line++)); [EOL] assertEquals(CRLF, body.get(line++)); [EOL] assertEquals("{\"@odata.context\":\"../../$metadata\",\"value\":[]}" + CRLF, body.get(line++)); [EOL] assertTrue(body.get(line++).startsWith("--changeset_")); [EOL] assertEquals("--" + BOUNDARY + "--" + CRLF, body.get(line++))
[EOL] 		assertThat(result(), is(equalTo(expectedResult)))
