@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); [EOL]         assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); [EOL]         assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); [EOL]         assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); [EOL]         assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); [EOL]         assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test short conversions [EOL]         assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); [EOL]         assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); [EOL]         assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); [EOL]         assertTrue
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]          
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayArray() { [EOL]         boolean[][] array = new boolean[][] {{true, false}, null, {false}}; [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length
@Test [EOL]     public void testToObject_int() { [EOL]         final int[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new int[0])); [EOL]      [EOL]         assertTrue( [EOL]             Arrays.equals( [EOL]                 new Integer[] { [EOL]                     Integer.valueOf(Integer.MIN_VALUE), [EOL]                     Integer.valueOf(Integer.MAX_VALUE), [EOL]                     Integer.valueOf(9999999)}, [EOL]             ArrayUtils.toObject( [EOL]                 new int[] { Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999 }))); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for long [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNullToEmptyDouble() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, ArrayUtils.nullToEmpty((double[]) null)); [EOL]         // Test valid array handling [EOL]         final double[] original = new double[] {1L, 2L}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final double[] empty = new double[]{}; [EOL]         final double[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_DOUBLE_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length
@Test [EOL]     public void testReplaceNull() { [EOL]         doTestNoReplace(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests replace with null. [EOL]      */ [EOL]
@Test [EOL]     public void testReflectionIntArray() { [EOL]         int[] array = new int[] { 1, 2, -3, 4 }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetSet() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 0); [EOL]         assertEquals((byte) 0, new MutableByte().byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 0), new MutableByte().getValue()); [EOL]          [EOL]         mutNum.setValue((byte) 1); [EOL]         assertEquals((byte) 1, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 1), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(Byte.valueOf((byte) 2)); [EOL]         assertEquals((byte) 2, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 2), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(new MutableByte((byte) 3)); [EOL]         assertEquals((byte) 3, mutNum.byteValue()); [EOL]         assertEquals(Byte.valueOf((byte) 3), mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair); [EOL]         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origPair, deserializedPair); [EOL]         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testEqualsWithOtherObjects() { [EOL]         checkEquals(null, false); [EOL]         checkEquals(this, false); [EOL]         checkEquals(new ConstantInitializer<String>("Test"), false); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the string representation. [EOL]      */ [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (short) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveElementObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElement((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new Object[] {"a"}, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new Object[] {"a", "b"}, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] {"b"}, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new Object[] {"a", "b", "a"}, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] {"b", "a"}, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testOrdinalIndexOf() { [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "ab", Integer.MIN_VALUE)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "", Integer.MIN_VALUE)); [EOL]  [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", null, -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("", "", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "a", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf("aabaabaa", "b", -1)); [EOL]         assertEquals(-1, StringUtils.ordinalIndexOf
@Test [EOL]     public void testGetCharsIntIntCharArrayInt( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]                 [EOL]         sb.append("junit"); [EOL]         char[] a = new char[5]; [EOL]         sb.getChars(0,5,a,0); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t'},a)); [EOL]          [EOL]         a = new char[5]; [EOL]         sb.getChars(0,2,a,3); [EOL]         assertTrue(Arrays.equals(new char[] {0,0,0,'j','u'},a)); [EOL]          [EOL]         try { [EOL]             sb.getChars(-1,0,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]         catch (final IndexOutOfBoundsException e) { [EOL]         } [EOL]          [EOL]         try { [EOL]             sb.getChars(0,-1,a,0); [EOL]             fail("no exception"); [EOL]         } [EOL]   
@Test [EOL]     public void testSubstringBeforeLast_StringString() { [EOL]         assertEquals("fooXXbar", StringUtils.substringBeforeLast("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, null)); [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, "")); [EOL]         assertEquals(null, StringUtils.substringBeforeLast(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBeforeLast("", null)); [EOL]         assertEquals("", StringUtils.substringBeforeLast("", "")); [EOL]         assertEquals("", StringUtils.substringBeforeLast("", "XX")); [EOL]  [EOL]         assertEquals("foo", StringUtils.substringBeforeLast("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBeforeLast("foo", "b")); [EOL]         assertEquals("fo", StringUtils.substringBeforeLast("foo", "o")); [EOL]         assertEquals("abc\r\n", StringUtils.substringBeforeLast("abc\r\n", "d")); [EOL]         assertEquals("abc", StringUtils.substringBeforeLast("abcdabc", "d")); [EOL]         assertEquals("abcdabc", StringUtils.substringBeforeLast("abcdabcd", "d")); [EOL]         assertEquals("a", StringUtils.substringBeforeLast("abc",
@Test [EOL]     public void testDefault_StringString() { [EOL]         assertEquals("NULL", StringUtils.defaultString(null, "NULL")); [EOL]         assertEquals("", StringUtils.defaultString("", "NULL")); [EOL]         assertEquals("abc", StringUtils.defaultString("abc", "NULL")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testEnforceExceptions() { [EOL]         try { [EOL]             IEEE754rUtils.min( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min( (double[]) null); [EOL]             fail
@Test(expected = IllegalArgumentException.class) [EOL]     public void testMaxByte_emptyArray() { [EOL]         NumberUtils.max(new byte[0]); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayArray() { [EOL]         long[][] array = new long[][] {{1, 2}, null, {5}}; [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("{{1,2},<null>,{5}}", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals("<null>", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals("<null>", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testSplitByWholeSeparatorPreserveAllTokens_StringStringInt() { [EOL]         assertArrayEquals( null, StringUtils.splitByWholeSeparatorPreserveAllTokens( null, ".", -1 ) ) ; [EOL]  [EOL]         assertEquals( 0, StringUtils.splitByWholeSeparatorPreserveAllTokens( "", ".", -1 ).length ) ; [EOL]  [EOL]         // test whitespace [EOL]         String input = "ab   de fg" ; [EOL]         String[] expected = new String[] { "ab", "", "", "de", "fg" } ; [EOL]  [EOL]         String[] actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, null, -1 ) ; [EOL]         assertEquals( expected.length, actual.length ) ; [EOL]         for ( int i = 0 ; i < actual.length ; i+= 1 ) { [EOL]             assertEquals( expected[i], actual[i] ); [EOL]         } [EOL]  [EOL]         // test delimiter singlechar [EOL]         input = "1::2:::3::::4"; [EOL]         expected = new String[] { "1", "", "2", "", "", "3", "", "", "", "4" }; [EOL]  [EOL]         actual = StringUtils.splitByWholeSeparatorPreserveAllTokens( input, ":", -1 ) ; [EOL]         assertEquals( expected.length
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]         
@Test [EOL]     public void testReducedFactory_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getReducedFraction(0, 1); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getReducedFraction(1, 1); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 1); [EOL]         assertEquals(2, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // improper [EOL]         f = Fraction.getReducedFraction(22, 7); [EOL]         assertEquals(22, f.getNumerator()); [EOL]         assertEquals(7, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         f = Fraction.getReducedFraction(-6, 10); [E
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]         o2.setA(5); [EOL]         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]         assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.remove
@Test [EOL]     public void testFormat() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [EOL]         final int month = c.get(Calendar.MONTH) + 1; [EOL]         final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]         final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]         buffer.append (year); [EOL]         buffer.append(month); [EOL]         buffer.append(day); [EOL]         buffer.append(hour); [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]          [EOL]         assertEquals(buffer.toString(), Date
@Test [EOL]     public void testHandleCauseChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]             fail("ConcurrentException not thrown!"); [EOL]         } catch (final ConcurrentException cex) { [EOL]             assertEquals("Wrong cause", ex, cex.getCause()); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests handleCause() for a null parameter or a null cause. In this case [EOL]      * the method should do nothing. We can only test that no exception is [EOL]      * thrown. [EOL]      */ [EOL]
@Test [EOL]     public void testNullToEmptyBoolean() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.nullToEmpty((boolean[]) null)); [EOL]         // Test valid array handling [EOL]         final boolean[] original = new boolean[] {true, false}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final boolean[] empty = new boolean[]{}; [EOL]         final boolean[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test(expected=NullPointerException.class) [EOL]     public void test_generateBitVector_nullIterable() { [EOL]         EnumUtils.generateBitVector(Traffic.class, (Iterable<Traffic>) null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsSameDay_Date() { [EOL]         Date date1 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         Date date2 = new GregorianCalendar(2004, 6, 9, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]         date2 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]         date1 = new GregorianCalendar(2004, 6, 10, 13, 45).getTime(); [EOL]         assertTrue(DateUtils.isSameDay(date1, date2)); [EOL]         date2 = new GregorianCalendar(2005, 6, 10, 13, 45).getTime(); [EOL]         assertFalse(DateUtils.isSameDay(date1, date2)); [EOL]         try { [EOL]             DateUtils.isSameDay((Date) null, (Date) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testSuper() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); [EOL]         assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("b^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("db^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(4, array.length); [E
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]
@Test [EOL]     public void testDayOf() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10); [EOL]  [EOL]         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      * @throws ParseException [EOL]      */ [EOL]
@Test [EOL]     public void testAbbreviate_StringIntInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]         assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }       [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]  
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]   
@Test [EOL]     public void testReverseChar() { [EOL]         char[] array = new char[] {'a', 'f', 'C'}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 'C'); [EOL]         assertEquals(array[1], 'f'); [EOL]         assertEquals(array[2], 'a'); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCompareTo() { [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f1) == 0); [EOL]          [EOL]         try { [EOL]             f1.compareTo(null); [EOL]             fail("expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) {} [EOL]          [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(4, 5); [EOL]         assertTrue(f1.compareTo(f2) < 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.comp
@Test [EOL]     public void testToLocale_2Part() { [EOL]         assertValidToLocale("us_EN", "us", "EN"); [EOL]         //valid though doesnt exist [EOL]         assertValidToLocale("us_ZH", "us", "ZH"); [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("us-EN"); [EOL]             fail("Should fail as not underscore"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_En"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_en"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_eN"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testChar() { [EOL]         assertEquals(baseStr + "[A]", new ToStringBuilder(base).append((char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A]", new ToStringBuilder(base).append("a", (char) 65).toString()); [EOL]         assertEquals(baseStr + "[a=A,b=B]", new ToStringBuilder(base).append("a", (char) 65).append("b", (char) 66).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "a")); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "")); [EOL]         assertEquals(8, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "")); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "a")); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A")); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "b")); [EOL]         assertEquals(5, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "B")); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "ab")); [EOL]         assertEquals(4, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "AB")); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("ab", "AAB")); [EOL]    
@Test [EOL]     public void testDouble() { [EOL]         final double o1 = 1; [EOL]         final double o2 = 2; [EOL]         assertTrue(new EqualsBuilder().append(o1, o1).isEquals()); [EOL]         assertTrue(!new EqualsBuilder().append(o1, o2).isEquals()); [EOL]         assertTrue(!new EqualsBuilder().append(o1, Double.NaN).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(Double.NaN, Double.NaN).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEventDispatchOrder() throws PropertyVetoException [EOL]     { [EOL]         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]         final List<VetoableChangeListener> calledListeners = new ArrayList<VetoableChangeListener>(); [EOL]  [EOL]         final VetoableChangeListener listener1 = createListener(calledListeners); [EOL]         final VetoableChangeListener listener2 = createListener(calledListeners); [EOL]         listenerSupport.addListener(listener1); [EOL]         listenerSupport.addListener(listener2); [EOL]         listenerSupport.fire().vetoableChange(new PropertyChangeEvent(new Date(), "Day", 4, 5)); [EOL]         assertEquals(calledListeners.size(), 2); [EOL]         assertSame(calledListeners.get(0), listener1); [EOL]         assertSame(calledListeners.get(1), listener2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getEnumMap() { [EOL]         final Map<String, Traffic> test = EnumUtils.getEnumMap(Traffic.class); [EOL]         assertEquals( "getEnumMap not created correctly", "{RED=RED, AMBER=AMBER, GREEN=GREEN}", test.toString()); [EOL]         assertEquals(3, test.size()); [EOL]         assertTrue(test.containsKey("RED")); [EOL]         assertEquals(Traffic.RED, test.get("RED")); [EOL]         assertTrue(test.containsKey("AMBER")); [EOL]         assertEquals(Traffic.AMBER, test.get("AMBER")); [EOL]         assertTrue(test.containsKey("GREEN")); [EOL]         assertEquals(Traffic.GREEN, test.get("GREEN")); [EOL]         assertFalse(test.containsKey("PURPLE")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("b^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("db^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(4, array.length); [E
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); [EOL]         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); [EOL]         assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1)); [EOL]         // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8, [EOL]         // 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]     
@Test [EOL]     public void testToString() { [EOL]         assertNotNull(byteRange.toString()); [EOL]          [EOL]         final String str = intRange.toString(); [EOL]         assertEquals("[10..20]", str); [EOL]         assertEquals("[-20..-10]", Range.between(-20, -10).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverse() { [EOL]         final StringBuffer str1 = new StringBuffer("pick"); [EOL]         final String str2 = "a"; [EOL]         final String[] str3 = new String[] {"stick"}; [EOL]         final String str4 = "up"; [EOL]          [EOL]         Object[] array = new Object[] {str1, str2, str3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str3); [EOL]         assertEquals(array[1], str2); [EOL]         assertEquals(array[2], str1); [EOL]          [EOL]         array = new Object[] {str1, str2, str3, str4}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], str4); [EOL]         assertEquals(array[1], str3); [EOL]         assertEquals(array[2], str2); [EOL]         assertEquals(array[3], str1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertArrayEquals(null, array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBasicIgnoreTrimmed4() { [EOL]         final String input = "IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE "; [EOL]         final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]         tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]         tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("bIGNOREcd", tok.next()); [EOL]         assertEquals(null, tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToString_Object() { [EOL]         assertEquals("", ObjectUtils.toString((Object) null) ); [EOL]         assertEquals(Boolean.TRUE.toString(), ObjectUtils.toString(Boolean.TRUE) ); [EOL]     } [EOL]              [EOL]
@Test [EOL]     public void testSubarrayFloat() { [EOL]         final float[] nullArray = null; [EOL]         final float[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final float[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final float[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final float[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]          
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_StrMatcher_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0)); [EOL]         assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1
@Test [EOL]     public void testCount_StringString() { [EOL]         assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]         assertEquals(0, CharSetUtils.count(null, "")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("", "")); [EOL]         assertEquals(0, CharSetUtils.count("", "a-e")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("hello", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("hello", "")); [EOL]         assertEquals(1, CharSetUtils.count("hello", "a-e")); [EOL]         assertEquals(3, CharSetUtils.count("hello", "l-p")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBefore("", null)); [EOL]         assertEquals("", StringUtils.substringBefore("", "")); [EOL]         assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]          [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]         assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]         assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]         assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testShortToHex() { [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedfffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); [EOL]         assertEquals( [EOL]     
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL
@Test [EOL]     public void testTimeISO(){ [EOL]         final TimeZone timeZone = TimeZone.getTimeZone("GMT-3"); [EOL]         final Calendar cal = Calendar.getInstance(timeZone); [EOL]         cal.set(2002,1,23,10,11,12); [EOL]         String text = DateFormatUtils.format(cal.getTime(),  [EOL]                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime(),  [EOL]                         DateFormatUtils.ISO_TIME_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12", text); [EOL]         text = DateFormatUtils.ISO_TIME_FORMAT.format(cal); [EOL]         assertEquals("T10:11:12", text); [EOL]          [EOL]         text = DateFormatUtils.format(cal.getTime(),  [EOL]                       DateFormatUtils.ISO_TIME_TIME_ZONE_FORMAT.getPattern(), timeZone); [EOL]         assertEquals("T10:11:12-03:00", text); [EOL]         text = DateFormatUtils.format(cal.getTime().getTime
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]             return; [EOL]         } [EOL]         fail(); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEquals(array[2], 0.3f, 0.0f); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(2, 0, 2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(0, 1, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getFraction(1, 1, 2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6
@Test [EOL]     public void testAppendln_String_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo", 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         final int hc1a = sb.hashCode(); [EOL]         final int hc1b = sb.hashCode(); [EOL]         assertEquals(0, hc1a); [EOL]         assertEquals(hc1a, hc1b); [EOL]          [EOL]         sb.append("abc"); [EOL]         final int hc2a = sb.hashCode(); [EOL]         final int hc2b = sb.hashCode(); [EOL]         assertTrue(hc2a != 0); [EOL]         assertEquals(hc2a, hc2b); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL
@Test [EOL]     public void test_getRootCauseMessage_Throwable() { [EOL]         Throwable th = null; [EOL]         assertEquals("", ExceptionUtils.getRootCauseMessage(th)); [EOL]          [EOL]         th = new IllegalArgumentException("Base"); [EOL]         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]          [EOL]         th = new ExceptionWithCause("Wrapper", th); [EOL]         assertEquals("IllegalArgumentException: Base", ExceptionUtils.getRootCauseMessage(th)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     /** [EOL]      * Provides a method with a well known chained/nested exception [EOL]      * name which matches the full signature (e.g. has a return value [EOL]      * of <code>Throwable</code>. [EOL]      */ [EOL]     private static class ExceptionWithCause extends Exception { [EOL]         private Throwable cause; [EOL]  [EOL]         public ExceptionWithCause(final String str, final Throwable cause) { [EOL]             super(str); [EOL]             setCause(cause); [EOL]         } [EOL]  [EOL]         public ExceptionWithCause(final Throwable cause) { [EOL]             super(); [EOL]       
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [E
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToLocale_2Part() { [EOL]         assertValidToLocale("us_EN", "us", "EN"); [EOL]         //valid though doesnt exist [EOL]         assertValidToLocale("us_ZH", "us", "ZH"); [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("us-EN"); [EOL]             fail("Should fail as not underscore"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_En"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_en"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_eN"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [
@Test [EOL]     public void testByte() { [EOL]         assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]         assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]         assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]         assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]         assertEquals(0, new BitField(8).setByteBoo
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL]         assertFalse(printer1.equals(new Object())); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]         assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests LANG-858. [EOL]      *  [EOL]      * @throws Exception [EOL]      */ [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test [EOL]     public void testRemoveIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.remove(new int[] {1}, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 0); [EOL]         assertTrue(Arrays.equals(new int[] {2}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2, 1}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1, 1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         try { [EOL]             ArrayUtils.remove(new int[] {1, 2}, -1); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]  
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_boolean_boolean() { [EOL]         assertEquals(null, ArrayUtils.toPrimitive(null, false)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0], false)); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, true}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, false)) [EOL]         ); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, false}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, false)) [EOL]         ); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, true, false}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null, Boolean.FALSE}, true)) [EOL]         ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPossibleCloneOfNotCloneable() { [EOL]         final String string = new String("apache"); [EOL]         assertSame(string, ObjectUtils.cloneIfPossible(string)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with an uncloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testJoin_ArrayOfChars() { [EOL]         assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testMaximumInt() { [EOL]         assertEquals("maximum(int,int,int) 1 failed", 12345, NumberUtils.max(12345, 12345 - 1, 12345 - 2)); [EOL]         assertEquals("maximum(int,int,int) 2 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345 - 2)); [EOL]         assertEquals("maximum(int,int,int) 3 failed", 12345, NumberUtils.max(12345 - 1, 12345 - 2, 12345)); [EOL]         assertEquals("maximum(int,int,int) 4 failed", 12345, NumberUtils.max(12345 - 1, 12345, 12345)); [EOL]         assertEquals("maximum(int,int,int) 5 failed", 12345, NumberUtils.max(12345, 12345, 12345)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //-----------------------------------------------------------------------
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  null, Float.valueOf(9999999)}, Float.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]  [EOL]             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getDefault(), Locale.GERMANY); [EOL]  [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); [EOL]             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]          
@Test [EOL]     public void testStripToEmpty_String() { [EOL]         assertEquals("", StringUtils.stripToEmpty(null)); [EOL]         assertEquals("", StringUtils.stripToEmpty("")); [EOL]         assertEquals("", StringUtils.stripToEmpty("        ")); [EOL]         assertEquals("", StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE)); [EOL]         assertEquals("ab c", StringUtils.stripToEmpty("  ab c  ")); [EOL]         assertEquals(StringUtilsTest.NON_WHITESPACE,  [EOL]             StringUtils.stripToEmpty(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEquals(array[2], 0.3d, 0.0d); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(array, 'b')); [EOL]         assertTrue(ArrayUtils.contains(array, 'c')); [EOL]         assertTrue(ArrayUtils.contains(array, 'd')); [EOL]         assertFalse(ArrayUtils.contains(array, 'e')); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigit
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayToShort() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals((short)0x0000, Conversion.byteArrayToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x00CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0xF1CD, Conversion.byteArrayToShort(src, 0, (short)0, 0, 2)); [EOL]         assertEquals((short)0xF0F1, Conversion.byteArrayToShort(src, 1, (short)0, 0, 2)); [EOL]         assertEquals((short)0x1234, Conversion.byteArrayToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0xCD34, Conversion.byteArrayToShort(src, 0, (short)0x1234, 8, 1)); [EOL]         // assertEquals((short)0x5678,Conversion.ByteArrayToShort(src, 7, (short) 0x0123, 8, [EOL]         // 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]     
@Test [EOL]     public void testAppendWithSeparators_Collection() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Collection<?>) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Collections.EMPTY_LIST, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}), null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}), ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPutIfAbsentKeyPresent() { [EOL]         final String key = "testKey"; [EOL]         final Integer value = 42; [EOL]         final ConcurrentMap<String, Integer> map = new ConcurrentHashMap<String, Integer>(); [EOL]         map.put(key, value); [EOL]         assertEquals("Wrong result", value, [EOL]                 ConcurrentUtils.putIfAbsent(map, key, 0)); [EOL]         assertEquals("Wrong value in map", value, map.get(key)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests putIfAbsent() if the map does not contain the key in question. [EOL]      */ [EOL]
@Test [EOL]     public void testPrimitiveTypeClassSerialization() { [EOL]         final Class<?>[] primitiveTypes = { byte.class, short.class, int.class, long.class, float.class, double.class, [EOL]                 boolean.class, char.class, void.class }; [EOL]  [EOL]         for (final Class<?> primitiveType : primitiveTypes) { [EOL]             final Class<?> clone = SerializationUtils.clone(primitiveType); [EOL]             assertEquals(primitiveType, clone); [EOL]         } [EOL]     } [EOL]  [EOL] } [EOL]  [EOL] @SuppressWarnings("serial") [EOL] class ClassNotFoundSerialization implements Serializable [EOL] { [EOL]  [EOL]     private void readObject(final ObjectInputStream in) throws ClassNotFoundException    { [EOL]         throw new ClassNotFoundException(SerializationUtilsTest.CLASS_NOT_FOUND_MESSAGE); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true},
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testIsAsciiAlphaUpper_char() { [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('a')); [EOL]         assertTrue(CharUtils.isAsciiAlphaUpper('A')); [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('3')); [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('-')); [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper('\n')); [EOL]         assertFalse(CharUtils.isAsciiAlphaUpper(CHAR_COPY)); [EOL]         [EOL]         for (int i = 0; i < 196; i++) { [EOL]             if (i >= 'A' && i <= 'Z') { [EOL]                 assertTrue(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]             } else { [EOL]                 assertFalse(CharUtils.isAsciiAlphaUpper((char) i)); [EOL]             } [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSetFieldNameValueSeparator() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setFieldNameValueSeparator(null); [EOL]         assertEquals("", style.getFieldNameValueSeparator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testXor_primitive_emptyInput() { [EOL]         BooleanUtils.xor(new boolean[] {}); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContentStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setContentStart(null); [EOL]         assertEquals("", style.getContentStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testRepeat_StringStringInt() { [EOL]         assertEquals(null, StringUtils.repeat(null, null, 2)); [EOL]         assertEquals(null, StringUtils.repeat(null, "x", 2)); [EOL]         assertEquals("", StringUtils.repeat("", null, 2)); [EOL]  [EOL]         assertEquals("", StringUtils.repeat("ab", "", 0)); [EOL]         assertEquals("", StringUtils.repeat("", "", 2)); [EOL]  [EOL]         assertEquals("xx", StringUtils.repeat("", "x", 3)); [EOL]  [EOL]         assertEquals("?, ?, ?", StringUtils.repeat("?", ", ", 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]
@Test [EOL]     public void testDivide() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.divideBy(f2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.ZERO; [EOL]         try { [EOL]             f = f1.divideBy(f2); [EOL]             fail("expecting ArithmeticException"); [EOL]         } catch (final ArithmeticException ex) {} [EOL]          [EOL]         f1 = Fraction.getFraction(0, 5); [EOL]         f2 = Fraction.getFraction(2, 7); [EOL]         f = f1.divideBy(f2); [EOL]         assertSame(Fraction.ZERO, f); [EOL]          [EOL]         f
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [E
@Test [EOL]     public void testCSVSimple() { [EOL]         this.testCSV(CSV_SIMPLE_FIXTURE); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]          [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]          [EOL]         assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]         //should work like String#last
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]         
@Test [EOL]     public void testAsWriter() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("base"); [EOL]         final Writer writer = sb.asWriter(); [EOL]          [EOL]         writer.write('l'); [EOL]         assertEquals("basel", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'i', 'n'}); [EOL]         assertEquals("baselin", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'n', 'e', 'r'}, 1, 2); [EOL]         assertEquals("baseliner", sb.toString()); [EOL]          [EOL]         writer.write(" rout"); [EOL]         assertEquals("baseliner rout", sb.toString()); [EOL]          [EOL]         writer.write("ping that server", 1, 3); [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.flush();  // no effect [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.close();  // no effect [EOL]         assertEquals("baseliner routing", sb.
@Test [EOL]     public void testSecondsOfYearWithDate() { [EOL]         final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.setTime(aDate); [EOL]         assertEquals( [EOL]                 seconds [EOL]                         + ((minutes * DateUtils.MILLIS_PER_MINUTE) [EOL]                                 + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) [EOL]                         / DateUtils.MILLIS_PER_SECOND, [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStopWatchSplit(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.split(); [EOL]         final long splitTime = watch.getSplitTime(); [EOL]         final String splitStr = watch.toSplitString(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.unsplit(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]  [EOL]         assertEquals("Formatted split string not the correct length",  [EOL]                      splitStr.length(), 11); [EOL]         assertTrue(splitTime >= 500); [EOL]         assertTrue(splitTime < 700); [EOL]         assertTrue(totalTime >= 1500); [EOL]         assertTrue(totalTime < 1900); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testInitializeTempExec() throws ConcurrentException { [EOL]         checkInitialize(); [EOL]         assertTrue("Executor not shutdown", initializer.getActiveExecutor() [EOL]                 .isShutdown()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests background processing if an external executor service is provided. [EOL]      */ [EOL]
@Test [EOL]     public void testFloat() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (float) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (float) 3.2).append("b", (float) 4.3).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL]         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumeric("ham kso")); [EOL]         assertTrue(StringUtils.isNumeric("1")); [EOL]         assertTrue(StringUtils.isNumeric("1000")); [EOL]         assertFalse(StringUtils.isNumeric("2.3")); [EOL]         assertFalse(StringUtils.isNumeric("10 00")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumeric("_")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]         assertFalse(StringUtils.isNumeric("+123")); [EOL]         assertFalse(StringUtils.isNumeric("-123")); [EOL] 
@Test [EOL]     public void testNotEqual() { [EOL]         assertFalse("ObjectUtils.notEqual(null, null) returned false", ObjectUtils.notEqual(null, null)); [EOL]         assertTrue("ObjectUtils.notEqual(\"foo\", null) returned true", ObjectUtils.notEqual(FOO, null)); [EOL]         assertTrue("ObjectUtils.notEqual(null, \"bar\") returned true", ObjectUtils.notEqual(null, BAR)); [EOL]         assertTrue("ObjectUtils.notEqual(\"foo\", \"bar\") returned true", ObjectUtils.notEqual(FOO, BAR)); [EOL]         assertFalse("ObjectUtils.notEqual(\"foo\", \"foo\") returned false", ObjectUtils.notEqual(FOO, FOO)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int h1 = (int) (l1 ^ l1 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6.3d; [EOL]         final long l2 = Double.doubleToLongBits(6.3d); [EOL]         final int h2 = (int) (l2 ^ l2 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL
@Test [EOL]     public void testHexToByte() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); [EOL]         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); [EOL]         assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0)); [EOL]         assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToLong(boolean[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testSetSizeEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSizeEndText(null); [EOL]         assertEquals("", style.getSizeEndText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortToHex() { [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.shortToHex((short)0x0000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedfffffffffffffffffffff", [EOL]             Conversion.shortToHex((short)0xCDEF, 0, "ffffffffffffffffffffffff", 0, 3)); [EOL]         assertEquals( [EOL]     
@Test [EOL]     public void testStartsWith() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertFalse(sb.startsWith("a")); [EOL]         assertFalse(sb.startsWith(null)); [EOL]         assertTrue(sb.startsWith("")); [EOL]         sb.append("abc"); [EOL]         assertTrue(sb.startsWith("a")); [EOL]         assertTrue(sb.startsWith("ab")); [EOL]         assertTrue(sb.startsWith("abc")); [EOL]         assertFalse(sb.startsWith("cba")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]   
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testChomp() { [EOL]  [EOL]         final String[][] chompCases = { [EOL]             { FOO_UNCAP + "\r\n", FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n" , FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\r", FOO_UNCAP }, [EOL]             { FOO_UNCAP + " \r", FOO_UNCAP + " " }, [EOL]             { FOO_UNCAP, FOO_UNCAP }, [EOL]             { FOO_UNCAP + "\n\n", FOO_UNCAP + "\n"}, [EOL]             { FOO_UNCAP + "\r\n\r\n", FOO_UNCAP + "\r\n" }, [EOL]             { "foo\nfoo", "foo\nfoo" }, [EOL]             { "foo\n\rfoo", "foo\n\rfoo" }, [EOL]             { "\n", "" }, [EOL]             { "\r", "" }, [EOL]             { "a", "a" }, [EOL]             { "\r\n", "" }, [EOL]             { "", "" }, [EOL]             { null, null }, [EOL]      
@Test [EOL]     public void testIsAsciiPrintable_String() { [EOL]         assertFalse(StringUtils.isAsciiPrintable(null)); [EOL]         assertTrue(StringUtils.isAsciiPrintable("")); [EOL]         assertTrue(StringUtils.isAsciiPrintable(" ")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("a")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("A")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("1")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("Ceki")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("!ab2c~")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("1000")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("10 00")); [EOL]         assertFalse(StringUtils.isAsciiPrintable("10\t00")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("10.00")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("10,00")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("!ab-c~")); [EOL]         assertTrue(StringUtils.isAsciiPrintable("hkHK=Hik6i?UGH_KJgU7.tUJgKJ*GI87GI,k
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testStringToDoubleStringD() { [EOL]         assertTrue("toDouble(String,int) 1 failed", NumberUtils.toDouble("1.2345", 5.1d) == 1.2345d); [EOL]         assertTrue("toDouble(String,int) 2 failed", NumberUtils.toDouble("a", 5.0d) == 5.0d); [EOL]     } [EOL]  [EOL]      /** [EOL]      * Test for {@link NumberUtils#toByte(String)}. [EOL]      */ [EOL]
@Test [EOL]     public void testSetArrayStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayStart(null); [EOL]         assertEquals("", style.getArrayStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSetArraySeparator() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArraySeparator(null); [EOL]         assertEquals("", style.getArraySeparator()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCenter_StringIntString() { [EOL]         assertEquals(null, StringUtils.center(null, 4, null)); [EOL]         assertEquals(null, StringUtils.center(null, -1, " ")); [EOL]         assertEquals(null, StringUtils.center(null, 4, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 0, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", -1, " ")); [EOL]         assertEquals("ab", StringUtils.center("ab", 1, " ")); [EOL]         assertEquals("    ", StringUtils.center("", 4, " ")); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4, " ")); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2, " ")); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4, " ")); [EOL]         assertEquals("yayz", StringUtils.center("a", 4, "yz")); [EOL]         assertEquals("yzyayzy", StringUtils.center("a", 7, "yz")); [EOL]         assertEquals("  abc  ", StringUtils.center("abc", 7, null)); [EOL]         assertEquals("  abc  ", StringUtils.center("abc",
@Test [EOL]     public void testShortToByteArray() { [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 100, new byte[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{}, Conversion.shortToByteArray((short)0x0000, 0, new byte[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL]                 (byte)0xFF}, Conversion.shortToByteArray((short)0xCDEF, 0, new byte[]{ [EOL]                 -1, -1, -1, -1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new byte[]{ [EOL]                 (byte)0xEF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, (byte)0xFF, [EOL
@Test [EOL]     public void testToShortString() { [EOL]         assertTrue("toShort(String) 1 failed", NumberUtils.toShort("12345") == 12345); [EOL]         assertTrue("toShort(String) 2 failed", NumberUtils.toShort("abc") == 0); [EOL]         assertTrue("toShort(empty) failed", NumberUtils.toShort("") == 0); [EOL]         assertTrue("toShort(null) failed", NumberUtils.toShort(null) == 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toShort(String, short)}. [EOL]      */ [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testToClass_object() { [EOL] //        assertNull(ClassUtils.toClass(null)); // generates warning [EOL]         assertNull(ClassUtils.toClass((Object[]) null)); // equivalent explicit cast [EOL]          [EOL]         // Additional varargs tests [EOL]         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass())); [EOL]         final Class<?>[] castNull = ClassUtils.toClass((Object) null); // == new Object[]{null} [EOL]         assertTrue("(Object)null -> [null]", Arrays.equals(new Object[]{null}, castNull)); [EOL]  [EOL]         assertSame(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.toClass(ArrayUtils.EMPTY_OBJECT_ARRAY)); [EOL]  [EOL]         assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class }, [EOL]                 ClassUtils.toClass(new Object[] { "Test", Integer.valueOf(1), Double.valueOf(99d) }))); [EOL]  [EOL]         assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class }, [EOL]                 ClassUtils.toClass(new Object[] { "Test", null, Double.valueOf(99d) }))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExceptions() { [EOL]         final char[] DUMMY = new char[]{'a'}; // valid char array [EOL]         try { [EOL]             RandomStringUtils.random(-1); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, true, true); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, DUMMY); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(1, new char[0]); // must not provide empty array => IAE [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             RandomStringUtils.random(-1, ""); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]        
@Test [EOL]     public void testCompareTo() { [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f1) == 0); [EOL]          [EOL]         try { [EOL]             f1.compareTo(null); [EOL]             fail("expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) {} [EOL]          [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(4, 5); [EOL]         assertTrue(f1.compareTo(f2) < 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.comp
@Test [EOL]     public void testContains_Char() { [EOL]         assertFalse(StringUtils.contains(null, ' ')); [EOL]         assertFalse(StringUtils.contains("", ' ')); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertTrue(StringUtils.contains("abc", 'a')); [EOL]         assertTrue(StringUtils.contains("abc", 'b')); [EOL]         assertTrue(StringUtils.contains("abc", 'c')); [EOL]         assertFalse(StringUtils.contains("abc", 'z')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_char_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Character[0], (char)0)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')},  [EOL]                 Character.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null,  [EOL]                 new Character('0')}, Character.MAX_VALUE)) [EOL]         ); [EOL]     } [
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL]         input = "\\377"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]  [EOL]         input = "\\377 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]  [EOL]         input = "\\378 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]  [EOL]         input = "\\378"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]  [EOL]         input = "\\1"; [EOL]         result = oue.
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals("ab", StringUtils.center("ab", -1)); [EOL]         assertEquals("ab", StringUtils.center("ab", 1)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]         assertEquals("  a  ", StringUtils.center("a", 5)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]        
@Test [EOL]     public void testLongToHex() { [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.longToHex(0x0000000000000000L, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDE3L, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.longToHex(0x1234567890ABCDEFL, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [
@Test [EOL]     public void testLongToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 100, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, [EOL]             Conversion.longToShortArray(0x0000000000000000L, 0, new short[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]                 0x1234567890ABCDEFL, 0, new short[]{-1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xCDEF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.longToShortArray( [EOL]               
@Test [EOL]     public void testContains_String() { [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains(null, "")); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertTrue(StringUtils.contains("abc", "")); [EOL]         assertTrue(StringUtils.contains("abc", "abc")); [EOL]         assertTrue(StringUtils.contains("abc", null)); [EOL]         assertFalse(StringUtils.contains("abc", "")); [EOL]         assertFalse(StringUtils.contains(abc", "a")); [EOL]         assertTrue(StringUtils.contains("abc", "ab")); [EOL]         assertTrue(StringUtils.contains("abc", "ab")); [EOL]         assertTrue(StringUtils.contains("a", "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrependIfMissing() { [EOL]         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); [EOL]         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); [EOL]         assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc","xyz")); [EOL]         assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz")); [EOL]         assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz")); [EOL]  [EOL]         assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null,null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("","xyz",(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,xyz,{null})","xyzabc", StringUtils.prependIfMissing("abc","xyz",
@Test [EOL]     public void testAppendAll_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendAll((Object[]) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(new Object[0]); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(new Object[]{"foo", "bar", "baz"}); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll("foo", "bar", "baz"); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] array = new char[] {'A', '2', '_', 'D'}; [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{A,2,_,D}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAlternatePadCharacter() { [EOL]         final char pad='_'; [EOL]         assertEquals("foo", FormattableUtils.append("foo", new Formatter(), 0, -1, -1, pad).toString()); [EOL]         assertEquals("fo", FormattableUtils.append("foo", new Formatter(), 0, -1, 2, pad).toString()); [EOL]         assertEquals("_foo", FormattableUtils.append("foo", new Formatter(), 0, 4, -1, pad).toString()); [EOL]         assertEquals("___foo", FormattableUtils.append("foo", new Formatter(), 0, 6, -1, pad).toString()); [EOL]         assertEquals("_fo", FormattableUtils.append("foo", new Formatter(), 0, 3, 2, pad).toString()); [EOL]         assertEquals("___fo", FormattableUtils.append("foo", new Formatter(), 0, 5, 2, pad).toString()); [EOL]         assertEquals("foo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 4, -1, pad).toString()); [EOL]         assertEquals("foo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 6, -1, pad).toString()); [EOL]         assertEquals("fo_", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 3, 2, pad).toString()); [EOL]         assertEquals("fo___", FormattableUtils.append("foo", new Formatter(), LEFT_JUSTIFY, 5, 2, pad
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfFloats() { [EOL]         assertEquals(null, StringUtils.join((float[]) null, ',')); [EOL]         assertEquals("1.0;2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2.0", StringUtils.join(FLOAT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(map, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         map.put("ll", Integer.valueOf(8)); [EOL]         Validate.notEmpty(map, "MSG"); [EOL]          [EOL]         final Map<String, Integer> test = Validate.notEmpty(map, "Message"); [EOL]         assertSame(map, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testRemoveElementIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_INT_ARRAY, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1 }, 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new int[] { 1, 2, 1 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 2, 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.removeElements((int[]) null, 1); [EOL] 
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendWithSeparators_Iterator() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Iterator<?>) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Collections.EMPTY_LIST.iterator(), ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator(), null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(Arrays.asList(new Object[]{"foo", null, "baz"}).iterator(), ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testMinInt_nullArray() { [EOL]         NumberUtils.min((float[]) null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_ArrayOfInts() { [EOL]         assertEquals(null, StringUtils.join((int[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(INT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\
@Test [EOL]     public void test_toBooleanObject_String_String_String_String() { [EOL]         assertSame(Boolean.TRUE, BooleanUtils.toBooleanObject((String) null, null, "N", "U")); [EOL]         assertSame(Boolean.FALSE, BooleanUtils.toBooleanObject((String) null, "Y", null, "U")); [EOL]         assertSame(null, BooleanUtils.toBooleanObject((String) null, "Y", "N", null)); [EOL]  [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("Y", "Y", "N", "U")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("N", "Y", "N", "U")); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("U", "Y", "N", "U")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArray() { [EOL]         byte[] obj1 = new byte[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         byte[] obj2 = new byte[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getPackageCanonicalName_Object() { [EOL]         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object(){}, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]         final CountDownLatch latch = new CountDownLatch(count); [EOL]         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]         t.start(); [EOL]         latch.await(); [EOL]         semaphore.shutdown(); [EOL]         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the methods for statistics. [EOL]      */ [EOL]
@Test [EOL]     public void testInitializeResultsIsSuccessfulFalse() [EOL]             throws ConcurrentException { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new Exception(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         final MultiBackgroundInitializer.MultiBackgroundInitializerResults res = initializer [EOL]                 .get(); [EOL]         assertFalse("Wrong success flag", res.isSuccessful()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether MultiBackgroundInitializers can be combined in a nested [EOL]      * way. [EOL]      */ [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b
@Test [EOL]     public void testContainsShort() { [EOL]         short[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, (short) 1)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertTrue(ArrayUtils.contains(array, (short) 0)); [EOL]         assertTrue(ArrayUtils.contains(array, (short) 1)); [EOL]         assertTrue(ArrayUtils.contains(array, (short) 2)); [EOL]         assertTrue(ArrayUtils.contains(array, (short) 3)); [EOL]         assertFalse(ArrayUtils.contains(array, (short) 99)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSetArrayStart() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setArrayStart(null); [EOL]         assertEquals("", style.getArrayStart()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRight_String() { [EOL]         assertSame(null, StringUtils.right(null, -1)); [EOL]         assertSame(null, StringUtils.right(null, 0)); [EOL]         assertSame(null, StringUtils.right(null, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.right("", -1)); [EOL]         assertEquals("", StringUtils.right("", 0)); [EOL]         assertEquals("", StringUtils.right("", 2)); [EOL]          [EOL]         assertEquals("", StringUtils.right(FOOBAR, -1)); [EOL]         assertEquals("", StringUtils.right(FOOBAR, 0)); [EOL]         assertEquals(BAR, StringUtils.right(FOOBAR, 3)); [EOL]         assertSame(FOOBAR, StringUtils.right(FOOBAR, 80)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsPrimitiveWrapper() { [EOL]  [EOL]         // test primitive wrapper classes [EOL]         assertTrue("Boolean.class", ClassUtils.isPrimitiveWrapper(Boolean.class)); [EOL]         assertTrue("Byte.class", ClassUtils.isPrimitiveWrapper(Byte.class)); [EOL]         assertTrue("Character.class", ClassUtils.isPrimitiveWrapper(Character.class)); [EOL]         assertTrue("Short.class", ClassUtils.isPrimitiveWrapper(Short.class)); [EOL]         assertTrue("Integer.class", ClassUtils.isPrimitiveWrapper(Integer.class)); [EOL]         assertTrue("Long.class", ClassUtils.isPrimitiveWrapper(Long.class)); [EOL]         assertTrue("Double.class", ClassUtils.isPrimitiveWrapper(Double.class)); [EOL]         assertTrue("Float.class", ClassUtils.isPrimitiveWrapper(Float.class)); [EOL]          [EOL]         // test primitive classes [EOL]         assertFalse("boolean", ClassUtils.isPrimitiveWrapper(Boolean.TYPE)); [EOL]         assertFalse("byte", ClassUtils.isPrimitiveWrapper(Byte.TYPE)); [EOL]         assertFalse("char", ClassUtils.isPrimitiveWrapper(Character.TYPE)); [EOL]         assertFalse("short", ClassUtils.isPrimitiveWrapper(Short.TYPE)); [EOL]         assertFalse("int", ClassUtils.isPrimitiveWrapper(Integer.TYPE)); [EOL]
@Test [EOL]     public void testContains_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcdefghijklmnopqrstuvwxyz"); [EOL]         assertTrue(sb.contains('a')); [EOL]         assertTrue(sb.contains('o')); [EOL]         assertTrue(sb.contains('z')); [EOL]         assertFalse(sb.contains('1')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testIsWhitespace() { [EOL]         assertFalse(StringUtils.isWhitespace(null)); [EOL]         assertTrue(StringUtils.isWhitespace("")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertTrue(StringUtils.isWhitespace("\t \n \t")); [EOL]         assertFalse(StringUtils.isWhitespace("\t aa\n \t")); [EOL]         assertTrue(StringUtils.isWhitespace(" ")); [EOL]         assertFalse(StringUtils.isWhitespace(" a ")); [EOL]         assertFalse(StringUtils.isWhitespace("a  ")); [EOL]         assertFalse(StringUtils.isWhitespace("  a")); [EOL]         assertFalse(StringUtils.isWhitespace("aba")); [EOL]         assertTrue(StringUtils.isWhitespace(StringUtilsTest.WHITESPACE)); [EOL]         assertFalse(StringUtils.isWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOf_char_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(0, sb.indexOf('a', -1)); [EOL]         assertEquals(0, sb.indexOf('a', 0)); [EOL]         assertEquals(2, sb.indexOf('a', 1)); [EOL]         assertEquals(-1, sb.indexOf('a', 4)); [EOL]         assertEquals(-1, sb.indexOf('a', 5)); [EOL]  [EOL]         // should work like String#indexOf [EOL]         assertEquals("abab".indexOf('a', 1), sb.indexOf('a', 1)); [EOL]  [EOL]         assertEquals(3, sb.indexOf('b', 2)); [EOL]         assertEquals("abab".indexOf('b', 2), sb.indexOf('b', 2)); [EOL]  [EOL]         assertEquals(-1, sb.indexOf('z', 2)); [EOL]  [EOL]         sb = new StrBuilder("xyzabc"); [EOL]         assertEquals(2, sb.indexOf('z', 0)); [EOL]         assertEquals(-1, sb.indexOf('z', 3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSuper() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(new EqualsBuilder().appendSuper(true).append(o1, o1).isEquals()); [EOL]         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o1).isEquals()); [EOL]         assertFalse(new EqualsBuilder().appendSuper(true).append(o1, o2).isEquals()); [EOL]         assertFalse(new EqualsBuilder().appendSuper(false).append(o1, o2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByte() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testLastIndexOfDoubleTolerance() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0)); [EOL]         array = new double[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, (double) 0.3)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2.2, (double) 0.35)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (double) 4.15, (double) 2.0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1.00001324, (double) 0.0001)); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testTrim() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 "); [EOL]         assertEquals("", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append(" \u0000 a b c \u0000 "); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]          [EOL]         sb.clear().append("a b c"); [EOL]         assertEquals("a b c", sb.trim().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testJoin_Objectarray() { [EOL] //        assertEquals(null, StringUtils.join(null)); // generates warning [EOL]         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast [EOL]         // test additional varargs calls [EOL]         assertEquals("", StringUtils.join()); // empty array [EOL]         assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null} [EOL]  [EOL]         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST)); [EOL]         assertEquals("", StringUtils.join(NULL_ARRAY_LIST)); [EOL]         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST)); [EOL]         assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"})); [EOL]         assertEquals("a", StringUtils.join(new String[] {null, "a", ""})); [EOL]         assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST)); [EOL]         assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST)); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testAppendSeparator_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendSeparator(',');  // no effect [EOL]         assertEquals("", sb.toString()); [EOL]         sb.append("foo"); [EOL]         assertEquals("foo", sb.toString()); [EOL]         sb.appendSeparator(','); [EOL]         assertEquals("foo,", sb.toString()); [EOL]     } [EOL]
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]         
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testMutate() throws Exception { [EOL]         final MutablePair<Integer, String> pair = new MutablePair<Integer, String>(0, "foo"); [EOL]         pair.setLeft(42); [EOL]         pair.setRight("bar"); [EOL]         assertEquals(42, pair.getLeft().intValue()); [EOL]         assertEquals("bar", pair.getRight()); [EOL]     } [EOL]  [EOL]
@Test [EOL]    public void testGetMatchingAccessibleMethod() throws Exception { [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 ArrayUtils.EMPTY_CLASS_ARRAY, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 null, ArrayUtils.EMPTY_CLASS_ARRAY); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(String.class), singletonArray(String.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Object.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Boolean.class), singletonArray(Object.class)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.class), singletonArray(Integer.TYPE)); [EOL]         expectMatchingAccessibleMethodParameterTypes(TestBean.class, "foo", [EOL]                 singletonArray(Byte.TYPE), singletonArray(Integer.TYPE)); [EOL]   
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMillisecondsOfSecondWithDate() { [EOL]         final long testResult = DateUtils.getFragmentInMilliseconds(aDate, Calendar.SECOND); [EOL]         assertEquals(millis, testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRoundMonth() throws Exception { [EOL]         final int calendarField = Calendar.MONTH; [EOL]         Date roundedUpDate, roundedDownDate, lastRoundedDownDate; [EOL]         Date minDate, maxDate; [EOL]          [EOL]         //month with 28 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2007 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2007 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 14, 2007 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]  [EOL]         //month with 29 days [EOL]         roundedUpDate = dateTimeParser.parse("March 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser.parse("February 1, 2008 0:00:00.000"); [EOL]         lastRoundedDownDate = dateTimeParser.parse("February 15, 2008 23:59:59.999"); [EOL]         baseRoundTest(roundedUpDate, roundedDownDate, lastRoundedDownDate,  calendarField); [EOL]          [EOL]         //month with 30 days [EOL]         roundedUpDate = dateTimeParser.parse("May 1, 2008 0:00:00.000"); [EOL]         roundedDownDate = dateTimeParser
@Test [EOL]     public void testBasicIgnoreTrimmed4() { [EOL]         final String input = "IGNOREaIGNORE: IGNORE 'bIGNOREc'IGNORE'd' IGNORE : IGNORE "; [EOL]         final StrTokenizer tok = new StrTokenizer(input, ':', '\''); [EOL]         tok.setIgnoredMatcher(StrMatcher.stringMatcher("IGNORE")); [EOL]         tok.setTrimmerMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("bIGNOREcd", tok.next()); [EOL]         assertEquals(null, tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); [EOL]  [EOL]         // tests the ISO8601-like [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]      
@Test [EOL]     public void testSubtractValueObject() { [EOL]         final MutableShort mutNum = new MutableShort((short) 1); [EOL]         mutNum.subtract(Integer.valueOf(1)); [EOL]          [EOL]         assertEquals((short) 0, mutNum.shortValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExtractCauseUncheckedNull() { [EOL]         assertNull("Non null result", ConcurrentUtils.extractCauseUnchecked(null)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests extractCauseUnchecked() if the cause of the passed in exception is null. [EOL]      */ [EOL]
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.add(1); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOf_String_int() { [EOL]         StrBuilder sb = new StrBuilder("abab"); [EOL]         assertEquals(-1, sb.lastIndexOf("a", -1)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 0)); [EOL]         assertEquals(0, sb.lastIndexOf("a", 1)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 2)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 3)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 4)); [EOL]         assertEquals(2, sb.lastIndexOf("a", 5)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf("abcdef", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 3), sb.lastIndexOf("", 3)); [EOL]         assertEquals("abab".lastIndexOf("", 1), sb.lastIndexOf("", 1)); [EOL]          [EOL]         //should work like String#lastIndexOf [EOL]         assertEquals("abab".lastIndexOf("a", 1), sb.lastIndexOf("a", 1)); [EOL]          [EOL]         assertEquals(0, sb.lastIndexOf("ab", 1)); [EOL]         //should work like String#last
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]         builder.namingPattern(PATTERN).daemon(true).priority( [EOL]                 Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler) [EOL]                 .wrappedFactory(wrappedFactory); [EOL]         builder.reset(); [EOL]         final BasicThreadFactory factory = builder.build(); [EOL]         checkFactoryDefaults(factory); [EOL]         assertNotSame("Wrapped factory not reset", wrappedFactory, factory [EOL]                 .getWrappedFactory()); [EOL]         EasyMock.verify(wrappedFactory, exHandler); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether reset() is automatically called after build(). [EOL]      */ [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final OctalUnescaper oue = new OctalUnescaper();   //.between("1", "377"); [EOL]  [EOL]         String input = "\\45"; [EOL]         String result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\45", result); [EOL]  [EOL]         input = "\\377"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377", result); [EOL]  [EOL]         input = "\\377 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\377 and", result); [EOL]  [EOL]         input = "\\378 and"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378 and", result); [EOL]  [EOL]         input = "\\378"; [EOL]         result = oue.translate(input); [EOL]         assertEquals("Failed to unescape octal characters via the between method", "\378", result); [EOL]  [EOL]         input = "\\1"; [EOL]         result = oue.
@Test [EOL]     public void testIsNumericSpace() { [EOL]         assertFalse(StringUtils.isNumericSpace(null)); [EOL]         assertTrue(StringUtils.isNumericSpace("")); [EOL]         assertTrue(StringUtils.isNumericSpace(" ")); [EOL]         assertFalse(StringUtils.isNumericSpace("a")); [EOL]         assertFalse(StringUtils.isNumericSpace("A")); [EOL]         assertFalse(StringUtils.isNumericSpace("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumericSpace("ham kso")); [EOL]         assertTrue(StringUtils.isNumericSpace("1")); [EOL]         assertTrue(StringUtils.isNumericSpace("1000")); [EOL]         assertFalse(StringUtils.isNumericSpace("2.3")); [EOL]         assertTrue(StringUtils.isNumericSpace("10 00")); [EOL]         assertFalse(StringUtils.isNumericSpace("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumericSpace("_")); [EOL]         assertFalse(StringUtils.isNumericSpace("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayToInt() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals(0x00000000, Conversion.byteArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x000000CD, Conversion.byteArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xC1F0F1CD, Conversion.byteArrayToInt(src, 0, 0, 0, 4)); [EOL]         assertEquals(0x0FC1F0F1, Conversion.byteArrayToInt(src, 1, 0, 0, 4)); [EOL]         assertEquals(0x12345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCD345678, Conversion.byteArrayToInt(src, 0, 0x12345678, 24, 1)); [EOL]         // assertEquals(0x56341278,Conversion.ByteArrayToInt(src, 5, 0x01234567, 8, 4)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToShort(byte[], int, short, int, int)}. [EOL]     
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testUuuuu() { [EOL]         final UnicodeUnescaper uu = new UnicodeUnescaper(); [EOL]  [EOL]         final String input = "\\uuuuuuuu0047"; [EOL]         final String result = uu.translate(input); [EOL]         assertEquals("Failed to unescape Unicode characters with many 'u' characters", "G", result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinFloat() { [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 1", [EOL]             5.9f, [EOL]             NumberUtils.min(new float[] { 5.9f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 2", [EOL]             6.8f, [EOL]             NumberUtils.min(new float[] { 6.8f, 9.7f }), [EOL]             0); [EOL]  [EOL]         assertEquals( [EOL]             "min(float[]) failed for array length 5", [EOL]             -10.6f, [EOL]             NumberUtils.min(new float[] { -10.6f, -5.5f, 0, 5.4f, 10.3f }), [EOL]             0); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -10, -5, 0, 5, 10 }), 0.0001f); [EOL]         assertEquals(-10, NumberUtils.min(new float[] { -5, 0, -10, 5, 10 }), 0.0001f); [EOL]     }
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElements((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new byte[] { 1, 2, 1 }, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] { 2, 1 }, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUt
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfDoubleWithStartIndex() { [EOL]         double[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         array = new double[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         array = new double[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(0, ArrayUtils.lastIndexOf(array, (double) 0, 2)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (double) 1, 2)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (double) 2, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, 2)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 3, -1)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (double) 99)); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (double) 0, 88)); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL
@Test [EOL]     public void testBindEventsToMethodWithEvent() [EOL]     { [EOL]         final PropertyChangeSource src = new PropertyChangeSource(); [EOL]         final EventCounterWithEvent counter = new EventCounterWithEvent(); [EOL]         EventUtils.bindEventsToMethod(counter, "eventOccurred", src, PropertyChangeListener.class); [EOL]         assertEquals(0, counter.getCount()); [EOL]         src.setProperty("newValue"); [EOL]         assertEquals(1, counter.getCount()); [EOL]     } [EOL]  [EOL]  [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((float[]) null).toHashCode()); [EOL]         final float[] obj = new float[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = 5.4f; [EOL]         final int h1 = Float.floatToIntBits(5.4f); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = 6.3f; [EOL]         final int h2 = Float.floatToIntBits(6.3f); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final short[] empty = new short[]{}; [EOL]         final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOf_StrMatcher_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.lastIndexOf((StrMatcher) null, 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -1)); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('a'), -2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 0)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 2)); [EOL]         assertEquals(0, sb.lastIndexOf(StrMatcher.charMatcher('a'), 20)); [EOL]          [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), -1)); [EOL]         assertEquals(-1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 0)); [EOL]         assertEquals(1, sb.lastIndexOf(StrMatcher.charMatcher('b'), 1
@Test [EOL]     public void testToStringBuilder() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(new StringBuilder().toString(), sb.toStringBuilder().toString()); [EOL]          [EOL]         sb.append("junit"); [EOL]         assertEquals(new StringBuilder("junit").toString(), sb.toStringBuilder().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]         assertEquals(2, tokens1.length); [EOL]         assertEquals("a", tokens1[0]); [EOL]         assertEquals("b", tokens1[1]); [EOL]         assertEquals(2, t.size()); [EOL]          [EOL]         b.append("c d "); [EOL]         final String[] tokens2 = t.getTokenArray(); [EOL]         assertEquals(2, tokens2.length); [EOL]         assertEquals("a", tokens2[0]); [EOL]         assertEquals("b", tokens2[1]); [EOL]         assertEquals(2, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]          [EOL]         t.reset(); [EOL]         final String[] tokens3 = t.getTokenArray(); [EOL]         assertEquals(4, tokens3.length);
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.remove
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testDefaultIfBlank_StringBuffers() { [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(""), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("NULL", StringUtils.defaultIfBlank(new StringBuffer(" "), new StringBuffer("NULL")).toString()); [EOL]         assertEquals("abc", StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")).toString()); [EOL]         assertNull(StringUtils.defaultIfBlank(new StringBuffer(""), null)); [EOL]         // Tests compatibility for the API return type [EOL]         final StringBuffer s = StringUtils.defaultIfBlank(new StringBuffer("abc"), new StringBuffer("NULL")); [EOL]         assertEquals("abc", s.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStartsWithAny() { [EOL]         assertFalse(StringUtils.startsWithAny(null, (String[])null)); [EOL]         assertFalse(StringUtils.startsWithAny(null, "abc")); [EOL]         assertFalse(StringUtils.startsWithAny("abcxyz", (String[])null)); [EOL]         assertFalse(StringUtils.startsWithAny("abcxyz")); [EOL]         assertTrue(StringUtils.startsWithAny("abcxyz", "abc")); [EOL]         assertTrue(StringUtils.startsWithAny("abcxyz", null, "xyz", "abc")); [EOL]         assertFalse(StringUtils.startsWithAny("abcxyz", null, "xyz", "abcd")); [EOL]  [EOL]         assertTrue("StringUtils.startsWithAny(abcxyz, StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny("abcxyz", new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]         assertTrue("StringUtils.startsWithAny( StrBuilder(abcxyz), StringBuilder(xyz), StringBuffer(abc))", StringUtils.startsWithAny( new StrBuilder("abcxyz"), new StringBuilder("xyz"), new StringBuffer("abc"))); [EOL]     } [EOL]   [EOL]  [EOL]     /** [EOL]      * Test StringUtils.endsWith() [EOL]      */ [EOL]
@Test [EOL]     public void testReflectionEquals() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(EqualsBuilder.reflectionEquals(o1, o1)); [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(o1, o2)); [EOL]         o2.setA(4); [EOL]         assertTrue(EqualsBuilder.reflectionEquals(o1, o2)); [EOL]  [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(o1, this)); [EOL]  [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(o1, null)); [EOL]         assertTrue(!EqualsBuilder.reflectionEquals(null, o2)); [EOL]         assertTrue(EqualsBuilder.reflectionEquals((Object) null, (Object) null)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture
@Test [EOL]     public void testCSVSimple() { [EOL]         this.testCSV(CSV_SIMPLE_FIXTURE); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHexToInt() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals(0x00000000, Conversion.hexToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000000C, Conversion.hexToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.hexToInt(src, 0, 0, 0, 8)); [EOL]         assertEquals(0x01C0F1FD, Conversion.hexToInt(src, 1, 0, 0, 8)); [EOL]         assertEquals(0x12345679, Conversion.hexToInt(src, 0, 0x12345679, 0, 0)); [EOL]         assertEquals(0x87645679, Conversion.hexToInt(src, 15, 0x12345679, 20, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToShort(String, int, short, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUt
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3
@Test [EOL]     public void testShortArrayToInt() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]         assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]         assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL]         // assertEquals(0x34567800,Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToInt(byte[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSystemProperiesLookup() { [EOL]         assertEquals(System.getProperty("os.name"), StrLookup.systemPropertiesLookup().lookup("os.name")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("")); [EOL]         assertEquals(null, StrLookup.systemPropertiesLookup().lookup("other")); [EOL]         try { [EOL]             StrLookup.systemPropertiesLookup().lookup(null); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) { [EOL]             // expected [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex = new Exception(); [EOL]         EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]         EasyMock.replay(init); [EOL]         try { [EOL]             ConcurrentUtils.createIfAbsentUnchecked( [EOL]                     new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]             fail("Exception not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]             assertEquals("Wrong cause", ex, crex.getCause()); [EOL]         } [EOL]         EasyMock.verify(init); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testContainsNone_StringWithBadSupplementaryChars() { [EOL]         // Test edge case: 1/2 of a (broken) supplementary char [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharHigh, CharU20001)); [EOL]         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001)); [EOL]         assertTrue(StringUtils.containsNone(CharUSuppCharLow, CharU20001)); [EOL]         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh)); [EOL]         assertTrue(StringUtils.containsNone(CharU20001, CharUSuppCharHigh)); [EOL]         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow)); [EOL]         assertFalse(StringUtils.containsNone(CharU20001, CharUSuppCharLow)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * See http://www.oracle.com/technetwork/articles/javase/supplementary-142654.html [EOL]      */ [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL
@Test [EOL]     public void testJavaVersionMatches() { [EOL]         String javaVersion = null; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = ""; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(
@Test [EOL]     public void test_toIntegerObject_Boolean_Integer_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]         final Integer eight = Integer.valueOf(8); [EOL]         assertEquals(six, BooleanUtils.toIntegerObject(Boolean.TRUE, six, seven, eight)); [EOL]         assertEquals(seven, BooleanUtils.toIntegerObject(Boolean.FALSE, six, seven, eight)); [EOL]         assertEquals(eight, BooleanUtils.toIntegerObject((Boolean) null, six, seven, eight)); [EOL]         assertEquals(null, BooleanUtils.toIntegerObject((Boolean) null, six, seven, null)); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final DatePrinter printer1= getInstance(YYYY_MM_DD); [EOL]         final DatePrinter printer2= getInstance(YYYY_MM_DD); [EOL]  [EOL]         assertEquals(printer1, printer2); [EOL]         assertEquals(printer1.hashCode(), printer2.hashCode());         [EOL]  [EOL]         assertFalse(printer1.equals(new Object())); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testJoin_ArrayOfChars() { [EOL]         assertEquals(null, StringUtils.join((char[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(CHAR_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final MutableObject<String> mutNumA = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumB = new MutableObject<String>("ALPHA"); [EOL]         final MutableObject<String> mutNumC = new MutableObject<String>("BETA"); [EOL]         final MutableObject<String> mutNumD = new MutableObject<String>(null); [EOL]  [EOL]         assertTrue(mutNumA.equals(mutNumA)); [EOL]         assertTrue(mutNumA.equals(mutNumB)); [EOL]         assertTrue(mutNumB.equals(mutNumA)); [EOL]         assertTrue(mutNumB.equals(mutNumB)); [EOL]         assertFalse(mutNumA.equals(mutNumC)); [EOL]         assertFalse(mutNumB.equals(mutNumC)); [EOL]         assertTrue(mutNumC.equals(mutNumC)); [EOL]         assertFalse(mutNumA.equals(mutNumD)); [EOL]         assertTrue(mutNumD.equals(mutNumD)); [EOL]          [EOL]         assertFalse(mutNumA.equals(null)); [EOL]         assertFalse(mutNumA.equals(new Object())); [EOL]         assertFalse(mutNumA.equals("0")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(
@Test [EOL]     public void test_toStringOnOff_boolean() { [EOL]         assertEquals("on", BooleanUtils.toStringOnOff(true)); [EOL]         assertEquals("off", BooleanUtils.toStringOnOff(false)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, WordUtils.swapCase(null)); [EOL]         assertEquals("", WordUtils.swapCase("")); [EOL]         assertEquals("  ", WordUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [EOL]         assertEquals("I", WordUtils.swapCase("i") ); [EOL]         assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") ); [EOL]         assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") ); [EOL]         assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") ); [EOL]         assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") ); [EOL]  [EOL]         final String test = "This String contains a TitleCase character: \u01C8"; [EOL]         final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]         assertEquals(expect, WordUtils.swapCase(test)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]  [EOL]             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getDefault(), Locale.GERMANY); [EOL]  [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); [EOL]             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]          
@Test [EOL]     public void testNotEmptyMap2() { [EOL]         final Map<String, Integer> map = new HashMap<String, Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Map<?, ?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(map, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         map.put("ll", Integer.valueOf(8)); [EOL]         Validate.notEmpty(map, "MSG"); [EOL]          [EOL]         final Map<String, Integer> test = Validate.notEmpty(map, "Message"); [EOL]         assertSame(map, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         assertEquals(byteRange.hashCode(), byteRange2.hashCode()); [EOL]         assertFalse(byteRange.hashCode() == byteRange3.hashCode()); [EOL]          [EOL]         assertEquals(intRange.hashCode(), intRange.hashCode()); [EOL]         assertTrue(intRange.hashCode() != 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testAppendln_String_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final String str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo", 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHandleCauseChecked() { [EOL]         final Exception ex = new Exception("Test"); [EOL]         try { [EOL]             ConcurrentUtils.handleCause(new ExecutionException(ex)); [EOL]             fail("ConcurrentException not thrown!"); [EOL]         } catch (final ConcurrentException cex) { [EOL]             assertEquals("Wrong cause", ex, cex.getCause()); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests handleCause() for a null parameter or a null cause. In this case [EOL]      * the method should do nothing. We can only test that no exception is [EOL]      * thrown. [EOL]      */ [EOL]
@Test [EOL]     public void testRandomStringUtils() { [EOL]         String r1 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r1.length()); [EOL]         String r2 = RandomStringUtils.random(50); [EOL]         assertEquals("random(50) length", 50, r2.length()); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]          [EOL]         r1 = RandomStringUtils.randomAscii(50); [EOL]         assertEquals("randomAscii(50) length", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]             assertTrue("char between 32 and 127", r1.charAt(i) >= 32 && r1.charAt(i) <= 127); [EOL]         }         [EOL]         r2 = RandomStringUtils.randomAscii(50); [EOL]         assertTrue("!r1.equals(r2)", !r1.equals(r2)); [EOL]  [EOL]         r1 = RandomStringUtils.randomAlphabetic(50); [EOL]         assertEquals("randomAlphabetic(50)", 50, r1.length()); [EOL]         for(int i = 0; i < r1.length(); i++) { [EOL]          
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]   
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testConstructor_String_comboNegated() { [EOL]         CharSet set; [EOL]         CharRange[] array; [EOL]          [EOL]         set = CharSet.getInstance("^abc"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("b^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(3, array.length); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('b'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.isNot('a'))); [EOL]         assertTrue(ArrayUtils.contains(array, CharRange.is('c'))); [EOL]          [EOL]         set = CharSet.getInstance("db^ac"); [EOL]         array = set.getCharRanges(); [EOL]         assertEquals(4, array.length); [E
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]  [EOL]       
@Test [EOL]     public void testReflectionCompare() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o1) == 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) == 0); [EOL]         o2.setA(5); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o1, o2) < 0); [EOL]         assertTrue(CompareToBuilder.reflectionCompare(o2, o1) > 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCeil() throws Exception { [EOL]         // test javadoc [EOL]         assertEquals("ceiling javadoc-1 failed", [EOL]                 dateTimeParser.parse("March 28, 2002 14:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.HOUR)); [EOL]         assertEquals("ceiling javadoc-2 failed", [EOL]                 dateTimeParser.parse("April 1, 2002 00:00:00.000"), [EOL]                 DateUtils.ceiling( [EOL]                     dateTimeParser.parse("March 28, 2002 13:45:01.231"), [EOL]                 Calendar.MONTH)); [EOL]  [EOL]         // tests public static Date ceiling(Date date, int field) [EOL]         assertEquals("ceiling year-1 failed", [EOL]                 dateParser.parse("January 1, 2003"), [EOL]                 DateUtils.ceiling(date1, Calendar.YEAR)); [EOL]         assertEquals("ceiling year-2 failed", [EOL
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void testAppendSeparator_char_char() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         final char startSeparator = ':'; [EOL]         final char standardSeparator = ','; [EOL]         final String foo = "foo"; [EOL]         sb.appendSeparator(standardSeparator, startSeparator);  // no effect [EOL]         assertEquals(String.valueOf(startSeparator), sb.toString()); [EOL]         sb.append(foo); [EOL]         assertEquals(String.valueOf(startSeparator) + foo, sb.toString()); [EOL]         sb.appendSeparator(standardSeparator, startSeparator); [EOL]         assertEquals(String.valueOf(startSeparator) + foo + standardSeparator, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValueObject() { [EOL]         final MutableDouble mutNum = new MutableDouble(1); [EOL]         mutNum.add(Double.valueOf(1.1d)); [EOL]          [EOL]         assertEquals(2.1d, mutNum.doubleValue(), 0.01d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = false; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDecrement() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJavaVersionMatches() { [EOL]         String javaVersion = null; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.5")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.6")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.7")); [EOL]         javaVersion = ""; [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.0")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.1")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.2")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.3")); [EOL]         assertFalse(SystemUtils.isJavaVersionMatch(javaVersion, "1.4")); [EOL]         assertFalse(
@Test [EOL]     public void testShortArray() { [EOL]         final short[] obj1 = new short[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final short[] obj2 = new short[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final short[] obj3 = new short[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).
@Test [EOL]     public void testLongArrayAsObject() { [EOL]         final long[] obj = new long[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5L; [EOL]         final int h1 = (int) (5L ^ 5L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6L; [EOL]         final int h2 = (int) (6L ^ 6L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayAsObject() { [EOL]         final boolean[] obj = new boolean[2]; [EOL]         assertEquals((17 * 37 + 1) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = true; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = false; [EOL]         assertEquals((17 * 37 + 0) * 37 + 1, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable [EOL]  [EOL]                         @Override [EOL]                         public Object parseObject(final String formattedDate) throws ParseException { [EOL]                             synchronized(this) { [EOL]                                 return super.parse(formattedDate); [EOL]                             } [EOL]                         } [EOL]         }); [EOL]          [EOL]         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]          [EOL]         final String times= ">>FastDateFormatTest: FastDate
@Test [EOL]     public void testNoNullElementsArray1() { [EOL]         String[] array = new String[] {"a", "b"}; [EOL]         Validate.noNullElements(array); [EOL]         try { [EOL]             Validate.noNullElements((Object[]) null); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("The validated object is null", ex.getMessage()); [EOL]         } [EOL]         array[1] = null; [EOL]         try { [EOL]             Validate.noNullElements(array); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("The validated array contains null element at index: 1", ex.getMessage()); [EOL]         } [EOL]          [EOL]         array = new String[] {"a", "b"}; [EOL]         final String[] test = Validate.noNullElements(array); [EOL]         assertSame(array, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetMaximum() { [EOL]         assertEquals(20, (int) intRange.getMaximum()); [EOL]         assertEquals(20L, (long) longRange.getMaximum()); [EOL]         assertEquals(20f, floatRange.getMaximum(), 0.00001f); [EOL]         assertEquals(20d, doubleRange.getMaximum(), 0.00001d); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testIntArray() { [EOL]         int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayShort() { [EOL]         short[] newArray; [EOL]         newArray = ArrayUtils.add((short[])null, (short)0); [EOL]         assertTrue(Arrays.equals(new short[]{0}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((short[])null, (short)1); [EOL]         assertTrue(Arrays.equals(new short[]{1}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         final short[] array1 = new short[]{1, 2, 3}; [EOL]         newArray = ArrayUtils.add(array1, (short)0); [EOL]         assertTrue(Arrays.equals(new short[]{1, 2, 3, 0}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(array1, (short)4); [EOL]         assertTrue(Arrays.equals(new short[]{1, 2, 3, 4}, newArray)); [EOL]         assertEquals(Short.TYPE, newArray.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.
@Test [EOL]     public void testSwapCase_String() { [EOL]         assertEquals(null, WordUtils.swapCase(null)); [EOL]         assertEquals("", WordUtils.swapCase("")); [EOL]         assertEquals("  ", WordUtils.swapCase("  ")); [EOL]          [EOL]         assertEquals("i", WordUtils.swapCase("I") ); [EOL]         assertEquals("I", WordUtils.swapCase("i") ); [EOL]         assertEquals("I AM HERE 123", WordUtils.swapCase("i am here 123") ); [EOL]         assertEquals("i aM hERE 123", WordUtils.swapCase("I Am Here 123") ); [EOL]         assertEquals("I AM here 123", WordUtils.swapCase("i am HERE 123") ); [EOL]         assertEquals("i am here 123", WordUtils.swapCase("I AM HERE 123") ); [EOL]  [EOL]         final String test = "This String contains a TitleCase character: \u01C8"; [EOL]         final String expect = "tHIS sTRING CONTAINS A tITLEcASE CHARACTER: \u01C9"; [EOL]         assertEquals(expect, WordUtils.swapCase(test)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final short[] empty = new short[]{}; [EOL]         final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsAllLowerCase() { [EOL]         assertFalse(StringUtils.isAllLowerCase(null)); [EOL]         assertFalse(StringUtils.isAllLowerCase(StringUtils.EMPTY)); [EOL]         assertTrue(StringUtils.isAllLowerCase("abc")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abc ")); [EOL]         assertFalse(StringUtils.isAllLowerCase("abC")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link StringUtils#isAllUpperCase(CharSequence)}. [EOL]      */ [EOL]
@Test [EOL]     public void testToPrimitive_byte_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Byte.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Byte[0], (byte)1)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)},  [EOL]                 Byte.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null,  [EOL]                 Byte.valueOf((byte)9999999)}, Byte.MAX_VALUE)) [E
@Test [EOL]     public void testInitials_String() { [EOL]         assertEquals(null, WordUtils.initials(null)); [EOL]         assertEquals("", WordUtils.initials("")); [EOL]         assertEquals("", WordUtils.initials("  ")); [EOL]  [EOL]         assertEquals("I", WordUtils.initials("I")); [EOL]         assertEquals("i", WordUtils.initials("i")); [EOL]         assertEquals("BJL", WordUtils.initials("Ben John Lee")); [EOL]         assertEquals("BJ", WordUtils.initials("Ben J.Lee")); [EOL]         assertEquals("BJ.L", WordUtils.initials(" Ben   John  . Lee")); [EOL]         assertEquals("iah1", WordUtils.initials("i am here 123")); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testNullToEmptyDoubleObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]         // Test valid array handling [EOL]         final Double[] original = new Double[] {1D, 2D}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Double[] empty = new Double[]{}; [EOL]         final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsPrimitiveOrWrapper() { [EOL]  [EOL]         // test primitive wrapper classes [EOL]         assertTrue("Boolean.class", ClassUtils.isPrimitiveOrWrapper(Boolean.class)); [EOL]         assertTrue("Byte.class", ClassUtils.isPrimitiveOrWrapper(Byte.class)); [EOL]         assertTrue("Character.class", ClassUtils.isPrimitiveOrWrapper(Character.class)); [EOL]         assertTrue("Short.class", ClassUtils.isPrimitiveOrWrapper(Short.class)); [EOL]         assertTrue("Integer.class", ClassUtils.isPrimitiveOrWrapper(Integer.class)); [EOL]         assertTrue("Long.class", ClassUtils.isPrimitiveOrWrapper(Long.class)); [EOL]         assertTrue("Double.class", ClassUtils.isPrimitiveOrWrapper(Double.class)); [EOL]         assertTrue("Float.class", ClassUtils.isPrimitiveOrWrapper(Float.class)); [EOL]          [EOL]         // test primitive classes [EOL]         assertTrue("boolean", ClassUtils.isPrimitiveOrWrapper(Boolean.TYPE)); [EOL]         assertTrue("byte", ClassUtils.isPrimitiveOrWrapper(Byte.TYPE)); [EOL]         assertTrue("char", ClassUtils.isPrimitiveOrWrapper(Character.TYPE)); [EOL]         assertTrue("short", ClassUtils.isPrimitiveOrWrapper(Short.TYPE)); [EOL]         assertTrue("int", ClassUtils.is
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  [EOL]                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]     public void testReverseLong() { [EOL]         long[] array = new long[] {1L, 2L, 3L}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3L); [EOL]         assertEquals(array[1], 2L); [EOL]         assertEquals(array[2], 1L); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [E
@Test [EOL]     public void testToLocale_2Part() { [EOL]         assertValidToLocale("us_EN", "us", "EN"); [EOL]         //valid though doesnt exist [EOL]         assertValidToLocale("us_ZH", "us", "ZH"); [EOL]          [EOL]         try { [EOL]             LocaleUtils.toLocale("us-EN"); [EOL]             fail("Should fail as not underscore"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_En"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_en"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [EOL]             LocaleUtils.toLocale("us_eN"); [EOL]             fail("Should fail second part not uppercase"); [EOL]         } catch (final IllegalArgumentException iae) {} [EOL]         try { [
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]         
@Test [EOL]     public void testReverseInt() { [EOL]         int[] array = new int[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToObject_short() { [EOL]         final short[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_SHORT_OBJECT_ARRAY,  [EOL]         ArrayUtils.toObject(new short[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new Short[] {Short.valueOf(Short.MIN_VALUE), Short.valueOf(Short.MAX_VALUE),  [EOL]                 Short.valueOf((short)9999999)}, [EOL]             ArrayUtils.toObject(new short[] {Short.MIN_VALUE, Short.MAX_VALUE,  [EOL]                 (short)9999999})) [EOL]         ); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for int [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg [EOL]         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"})); [EOL]
@Test [EOL]     public void testUnfinishedEntity() { [EOL]         // parse it [EOL]         NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]         String input = "Test &#x30 not test"; [EOL]         String expected = "Test \u0030 not test"; [EOL]  [EOL]         String result = neu.translate(input); [EOL]         assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]  [EOL]         // ignore it [EOL]         neu = new NumericEntityUnescaper(); [EOL]         input = "Test &#x30 not test"; [EOL]         expected = input; [EOL]  [EOL]         result = neu.translate(input); [EOL]         assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]  [EOL]         // fail it [EOL]         neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]         input = "Test &#x30 not test"; [EOL]  [EOL]         try { [EOL]             result = neu.translate(input); [EOL]             fail("IllegalArgumentException expected"); [
@Test [EOL]     public void testGetLevenshteinDistance_StringStringInt() { [EOL]         // empty strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "", 0)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 8)); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "", 7)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaapppp", "", 6)); [EOL]  [EOL]         // unequal strings, zero threshold [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("b", "a", 0)); [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("a", "b", 0)); [EOL]      [EOL]         // equal strings [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 0)); [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("aa", "aa", 2)); [EOL]  [EOL]         // same length [EOL]         assertEquals(-1, StringUtils.getLevenshteinDistance("aaa", "bbb", 2)); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("aaa", "bbb", 3)); [EOL]      [EOL]         // big stripe [EOL]
@Test [EOL]     public void testCharArrayArray() { [EOL]         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubSequenceIntInt() { [EOL]        final StrBuilder sb = new StrBuilder ("hello goodbye"); [EOL]        // Start index is negative [EOL]        try { [EOL]             sb.subSequence(-1, 5); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index is negative [EOL]        try { [EOL]             sb.subSequence(2, -1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // End index greater than length() [EOL]         try { [EOL]             sb.subSequence(2, sb.length() + 1); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]          [EOL]         // Start index greater then end index [EOL]         try { [EOL]             sb.subSequence(3, 2); [EOL]             fail(); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL
@Test [EOL]     public void testIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.indexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null})); [EOL]     
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSqueeze_StringString() { [EOL]         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]         assertEquals("", CharSetUtils.squeeze("", "")); [EOL]         assertEquals("", CharSetUtils.squeeze("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); [EOL]         assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); [EOL]         assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL
@Test [EOL]     public void testCompareTo() { [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f1) == 0); [EOL]          [EOL]         try { [EOL]             f1.compareTo(null); [EOL]             fail("expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) {} [EOL]          [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         assertTrue(f1.compareTo(f2) > 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(4, 5); [EOL]         assertTrue(f1.compareTo(f2) < 0); [EOL]         assertTrue(f2.compareTo(f2) == 0); [EOL]          [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         assertTrue(f1.compareTo(f2) == 0); [EOL]         assertTrue(f2.comp
@Test [EOL]     public void testFactory_String_proper() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction("0 0/1"); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 1/5"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("7 1/2"); [EOL]         assertEquals(15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("1 2/4"); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(4, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction("-7 1/2"); [EOL]         assertEquals(-15, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]         
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testBadStates() { [EOL]         final StopWatch watch = new StopWatch(); [EOL]         try { [EOL]             watch.stop(); [EOL]             fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.stop(); [EOL]             fail("Calling stop on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.suspend(); [EOL]             fail("Calling suspend on an unstarted StopWatch should throw an exception. "); [EOL]         } catch(final IllegalStateException ise) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             watch.split(); [EOL]             fail("Calling split on a non-running StopWatch should throw an exception. "); [EOL]         }
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testAbs() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(50, 75); [EOL]         f = f.abs(); [EOL]         assertEquals(50, f.getNumerator()); [EOL]         assertEquals(75, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(-50, 75); [EOL]         f = f.abs(); [EOL]         assertEquals(50, f.getNumerator()); [EOL]         assertEquals(75, f.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, 1); [EOL]         f = f.abs(); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MAX_VALUE, -1); [EOL]         f = f.abs(); [EOL]         assertEquals(Integer.MAX_VALUE, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]  [EOL]         f = Fraction.getFraction(Integer.MIN_VALUE, 1); [EOL] 
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testSubarrayObject() { [EOL]         final Object[] nullArray = null; [EOL]         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; [EOL]  [EOL]         assertEquals("0 start, mid end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]         assertEquals("0 start, length end", "abcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); [EOL]         assertEquals("mid start, mid end", "bcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); [EOL]         assertEquals("mid start, length end", "bcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]         assertEquals("empty array", "", [EOL]             StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); [EOL]         assertEquals("start > end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray,
@Test [EOL]     public void test_getPackageCanonicalName_Object() { [EOL]         assertEquals("<null>", ClassUtils.getPackageCanonicalName(null, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0], "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new ClassUtils[0][0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0], "<null>")); [EOL]         assertEquals("", ClassUtils.getPackageCanonicalName(new int[0][0], "<null>")); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Object(){}, "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Named(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageCanonicalName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetChars ( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]          [EOL]         char[] input = new char[10]; [EOL]         char[] a = sb.getChars(input); [EOL]         assertSame (input, a); [EOL]         assertTrue(Arrays.equals(new char[10], a)); [EOL]          [EOL]         sb.append("junit"); [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a)); [EOL]          [EOL]         a = sb.getChars(null); [EOL]         assertNotSame(input,a); [EOL]         assertEquals(5,a.length); [EOL]         assertTrue(Arrays.equals("junit".toCharArray(),a)); [EOL]          [EOL]         input = new char[5]; [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]          [EOL]         input = new char[4]; [EOL]         a =
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]        
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [
@Test [EOL]     public void testIndexOf_StrMatcher() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]          [EOL]         sb.append("ab bd"); [EOL]         assertEquals(0, sb.indexOf(StrMatcher.charMatcher('a'))); [EOL]         assertEquals(1, sb.indexOf(StrMatcher.charMatcher('b'))); [EOL]         assertEquals(2, sb.indexOf(StrMatcher.spaceMatcher())); [EOL]         assertEquals(4, sb.indexOf(StrMatcher.charMatcher('d'))); [EOL]         assertEquals(-1, sb.indexOf(StrMatcher.noneMatcher())); [EOL]         assertEquals(-1, sb.indexOf((StrMatcher) null)); [EOL]          [EOL]         sb.append(" A1 junction"); [EOL]         assertEquals(6, sb.indexOf(A_NUMBER_MATCHER)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringStringWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000)); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIteratorEx() throws Exception { [EOL]         try { [EOL]             DateUtils.iterator(Calendar.getInstance(), -9999); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator((Date) null, DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator((Calendar) null, DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator((Object) null, DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             DateUtils.iterator("", DateUtils.RANGE_WEEK_CENTER); [EOL]             fail(); [EOL]         } catch (final ClassCastException ex) {} [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the calendar iterator for
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals("ab", StringUtils.center("ab", -1)); [EOL]         assertEquals("ab", StringUtils.center("ab", 1)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]         assertEquals("  a  ", StringUtils.center("a", 5)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex = new Exception(); [EOL]         EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]         EasyMock.replay(init); [EOL]         try { [EOL]             ConcurrentUtils.createIfAbsentUnchecked( [EOL]                     new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]             fail("Exception not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]             assertEquals("Wrong cause", ex, crex.getCause()); [EOL]         } [EOL]         EasyMock.verify(init); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHierarchy() { [EOL]         final ReflectionTestFixtureA baseA = new ReflectionTestFixtureA(); [EOL]         String baseStr = this.toBaseString(baseA); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false)); [EOL]         assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class)); [EOL]         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class)); [EOL]  [EOL]         final ReflectionTestFixtureB baseB = new ReflectionTestFixtureB(); [EOL]         baseStr = this.toBaseString(baseB); [EOL]         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB)); [EOL]         assertEquals(baseStr + "[b
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]        
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigit
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void test_getSimpleName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getSimpleName(new ClassUtils(), "<null>")); [EOL]         assertEquals("Inner", ClassUtils.getSimpleName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getSimpleName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getSimpleName(null, "<null>")); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testBasicLookup() throws IOException { [EOL]         final LookupTranslator lt = new LookupTranslator(new CharSequence[][] { { "one", "two" } }); [EOL]         final StringWriter out = new StringWriter(); [EOL]         final int result = lt.translate("one", 0, out); [EOL]         assertEquals("Incorrect codepoint consumption", 3, result); [EOL]         assertEquals("Incorrect value", "two", out.toString()); [EOL]     } [EOL]  [EOL]     // Tests: https://issues.apache.org/jira/browse/LANG-882 [EOL]
@Test [EOL]     public void testGetChars ( ) { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]          [EOL]         char[] input = new char[10]; [EOL]         char[] a = sb.getChars(input); [EOL]         assertSame (input, a); [EOL]         assertTrue(Arrays.equals(new char[10], a)); [EOL]          [EOL]         sb.append("junit"); [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]         assertTrue(Arrays.equals(new char[] {'j','u','n','i','t',0,0,0,0,0},a)); [EOL]          [EOL]         a = sb.getChars(null); [EOL]         assertNotSame(input,a); [EOL]         assertEquals(5,a.length); [EOL]         assertTrue(Arrays.equals("junit".toCharArray(),a)); [EOL]          [EOL]         input = new char[5]; [EOL]         a = sb.getChars(input); [EOL]         assertSame(input, a); [EOL]          [EOL]         input = new char[4]; [EOL]         a =
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUt
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(array, 'b')); [EOL]         assertTrue(ArrayUtils.contains(array, 'c')); [EOL]         assertTrue(ArrayUtils.contains(array, 'd')); [EOL]         assertFalse(ArrayUtils.contains(array, 'e')); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReplaceFirst_char_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceFirst('x', 'y'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceFirst('a', 'd'); [EOL]         assertEquals("dbcbccba", sb.toString()); [EOL]         sb.replaceFirst('b', 'e'); [EOL]         assertEquals("decbccba", sb.toString()); [EOL]         sb.replaceFirst('c', 'f'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]         sb.replaceFirst('d', 'd'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSplitByCharacterTypeCamelCase() { [EOL]         assertNull(StringUtils.splitByCharacterTypeCamelCase(null)); [EOL]         assertEquals(0, StringUtils.splitByCharacterTypeCamelCase("").length); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", " ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", "   ", "de", " ", [EOL]                 "fg" }, StringUtils.splitByCharacterTypeCamelCase("ab   de fg"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "ab", ":", "cd", ":", [EOL]                 "ef" }, StringUtils.splitByCharacterTypeCamelCase("ab:cd:ef"))); [EOL]          [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "number", "5" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("number5"))); [EOL]  [EOL]         assertTrue(ArrayUtils.isEquals(new String[] { "foo", "Bar" }, [EOL]                 StringUtils.splitByCharacterTypeCamelCase("foo
@Test [EOL]     public void test_toStringYesNo_Boolean() { [EOL]         assertEquals(null, BooleanUtils.toStringYesNo((Boolean) null)); [EOL]         assertEquals("yes", BooleanUtils.toStringYesNo(Boolean.TRUE)); [EOL]         assertEquals("no", BooleanUtils.toStringYesNo(Boolean.FALSE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void testPatternMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD); [EOL]         assertEquals(YYYY_MM_DD, printer.getPattern()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsAny_StringString() { [EOL]         assertFalse(CharSetUtils.containsAny(null, (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny(null, "")); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("", (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny("", "")); [EOL]         assertFalse(CharSetUtils.containsAny("", "a-e")); [EOL]          [EOL]         assertFalse(CharSetUtils.containsAny("hello", (String) null)); [EOL]         assertFalse(CharSetUtils.containsAny("hello", "")); [EOL]         assertTrue(CharSetUtils.containsAny("hello", "a-e")); [EOL]         assertTrue(CharSetUtils.containsAny("hello", "l-p")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testEquals_Object() { [EOL]         final CharSet abc = CharSet.getInstance("abc"); [EOL]         final CharSet abc2 = CharSet.getInstance("abc"); [EOL]         final CharSet atoc = CharSet.getInstance("a-c"); [EOL]         final CharSet atoc2 = CharSet.getInstance("a-c"); [EOL]         final CharSet notatoc = CharSet.getInstance("^a-c"); [EOL]         final CharSet notatoc2 = CharSet.getInstance("^a-c"); [EOL]          [EOL]         assertFalse(abc.equals(null)); [EOL]          [EOL]         assertTrue(abc.equals(abc)); [EOL]         assertTrue(abc.equals(abc2)); [EOL]         assertFalse(abc.equals(atoc)); [EOL]         assertFalse(abc.equals(notatoc)); [EOL]          [EOL]         assertFalse(atoc.equals(abc)); [EOL]         assertTrue(atoc.equals(atoc)); [EOL]         assertTrue(atoc.equals(atoc2)); [EOL]         assertFalse(atoc.equals(notatoc)); [EOL]          [EOL]         assertFalse(notatoc.equals(abc)); [EOL]         assertFalse(notatoc.equals
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("{}", ArrayUtils.toString(null)); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0])); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0])); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null})); [EOL]         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"})); [EOL]          [EOL]         assertEquals("<empty>", ArrayUtils.toString(null, "<empty>")); [EOL]         assertEquals("{}", ArrayUtils.toString(new Object[0], "<empty>")); [EOL]         assertEquals("{}", ArrayUtils.toString(new String[0], "<empty>")); [EOL]         assertEquals("{<null>}", ArrayUtils.toString(new String[] {null}, "<empty>")); [EOL]         assertEquals("{pink,blue}", ArrayUtils.toString(new String[] {"pink","blue"}, "<empty>")); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSupplementaryUnescaping() { [EOL]         final NumericEntityUnescaper neu = new NumericEntityUnescaper(); [EOL]         final String input = "&#68642;"; [EOL]         final String expected = "\uD803\uDC22"; [EOL]  [EOL]         final String result = neu.translate(input); [EOL]         assertEquals("Failed to unescape numeric entities supplementary characters", expected, result); [EOL]     } [EOL]  [EOL]
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final MutablePair<Integer, String> origPair = MutablePair.of(0, "foo"); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origPair); [EOL]         final MutablePair<Integer, String> deserializedPair = (MutablePair<Integer, String>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origPair, deserializedPair); [EOL]         assertEquals(origPair.hashCode(), deserializedPair.hashCode()); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testNullToEmptyShort() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, ArrayUtils.nullToEmpty((short[]) null)); [EOL]         // Test valid array handling [EOL]         final short[] original = new short[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final short[] empty = new short[]{}; [EOL]         final short[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_SHORT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testCompatibilityBetweenPairs() throws Exception { [EOL]         final Pair<Integer, String> pair = ImmutablePair.of(0, "foo"); [EOL]         final Pair<Integer, String> pair2 = MutablePair.of(0, "foo"); [EOL]         assertEquals(pair, pair2); [EOL]         assertEquals(pair.hashCode(), pair2.hashCode()); [EOL]         final HashSet<Pair<Integer, String>> set = new HashSet<Pair<Integer, String>>(); [EOL]         set.add(pair); [EOL]         assertTrue(set.contains(pair2)); [EOL]  [EOL]         pair2.setValue("bar"); [EOL]         assertFalse(pair.equals(pair2)); [EOL]         assertFalse(pair.hashCode() == pair2.hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testInvokeExactStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(null); [EOL]         list.add(Object.class); [EOL]         result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals("java.lang.String", result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals("java.lang.Object", result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassesToClassNames(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [
@Test [EOL]     public void testLeftPad_StringIntString() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, "-+")); [EOL]         assertEquals(null, StringUtils.leftPad(null, 5, null)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5, " ")); [EOL]         assertEquals("-+-+abc", StringUtils.leftPad("abc", 7, "-+")); [EOL]         assertEquals("-+~abc", StringUtils.leftPad("abc", 6, "-+~")); [EOL]         assertEquals("-+abc", StringUtils.leftPad("abc", 5, "-+~")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2, " ")); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", -1, " ")); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, null)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5, "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]      public void testToPrimitive_double() { [EOL]          final Double[] b = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_DOUBLE_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Double[0])); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new double[] {Double.MIN_VALUE, Double.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Double[] {Double.valueOf(Double.MIN_VALUE),  [EOL]                  Double.valueOf(Double.MAX_VALUE), Double.valueOf(9999999)})) [EOL]          ); [EOL]  [EOL]          try { [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE), null}); [EOL]              fail(); [EOL]          } catch (final NullPointerException ex) {} [EOL]      } [EOL]  [EOL]
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(
@Test [EOL]     public void testIntToHex() { [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 100, "", 0, 0)); [EOL]         assertEquals("", Conversion.intToHex(0x00000000, 0, "", 100, 0)); [EOL]         assertEquals( [EOL]             "ffffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 0)); [EOL]         assertEquals( [EOL]             "3fffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDE3, 0, "ffffffffffffffffffffffff", 0, 1)); [EOL]         assertEquals( [EOL]             "feffffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 2)); [EOL]         assertEquals( [EOL]             "fedcffffffffffffffffffff", [EOL]             Conversion.intToHex(0x90ABCDEF, 0, "ffffffffffffffffffffffff", 0, 4)); [EOL]         assertEquals( [EOL]             "fedcba
@Test [EOL]     public void testMinimumInt() { [EOL]         assertEquals("minimum(int,int,int) 1 failed", 12345, NumberUtils.min(12345, 12345 + 1, 12345 + 2)); [EOL]         assertEquals("minimum(int,int,int) 2 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345 + 2)); [EOL]         assertEquals("minimum(int,int,int) 3 failed", 12345, NumberUtils.min(12345 + 1, 12345 + 2, 12345)); [EOL]         assertEquals("minimum(int,int,int) 4 failed", 12345, NumberUtils.min(12345 + 1, 12345, 12345)); [EOL]         assertEquals("minimum(int,int,int) 5 failed", 12345, NumberUtils.min(12345, 12345, 12345)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testFloatArray() { [EOL]         float[] array = new float[] {1.0f, 2.9876f, -3.00001f, 4.3f}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testByteArrayAsObject() { [EOL]         final byte[] obj = new byte[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (byte) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = (byte) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void testAppend_Object() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendNull(); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append((Object) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.append(FOO); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append((StringBuffer) null); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuffer("baz")); [EOL]         assertEquals("foobaz", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("yes")); [EOL]         assertEquals("foobazyes", sb.toString()); [EOL]  [EOL]         sb.append((CharSequence) "Seq"); [EOL]         assertEquals("foobazyesSeq", sb.toString()); [EOL]  [EOL]         sb.append(new StringBuilder("bld")); // Check it supports StringBuilder [EOL]         assertEquals("foobazyesSeqbld", sb.toString()); [EOL]     } [EOL]      [EOL]     //-----------------------------------------------------------------------
@Test [EOL]     public void testLastIndexOfShort() { [EOL]         short[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         array = new short[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (short) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (short) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (short) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (short) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (short) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocaleLookupList_Locale() { [EOL]         assertLocaleLookupList(null, null, new Locale[0]); [EOL]         assertLocaleLookupList(LOCALE_QQ, null, new Locale[]{LOCALE_QQ}); [EOL]         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN, null, new Locale[]{LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US, null, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]         assertLocaleLookupList(LOCALE_EN_US_ZZZZ, null, [EOL]             new Locale[] { [EOL]                 LOCALE_EN_US_ZZZZ, [EOL]                 LOCALE_EN_US, [EOL]                 LOCALE_EN}); [EOL]     }         [EOL]  [EOL]     /** [EOL]      * Test localeLookupList() method. [EOL]      */ [EOL]
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]         // for a verbose compare: [EOL]         for (int i=0; i < orig.length() && i < copy.length(); i++) { [EOL]             final char o = orig.charAt(i); [EOL]             final char c = copy.charAt(i); [EOL]             assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + [EOL]             Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]         } [EOL]         // compare length also [EOL]         assertEquals(orig.length(), copy.length()); [EOL]         // just to be complete [EOL]         assertEquals(orig, copy); [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testAppendWithSeparators_Array() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendWithSeparators((Object[]) null, ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[0], ","); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, ","); [EOL]         assertEquals("foo,bar,baz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", "bar", "baz"}, null); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendWithSeparators(new Object[]{"foo", null, "baz"}, ","); [EOL]         assertEquals("foo,,baz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test [EOL]     public void testToPrimitive_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY, ArrayUtils.toPrimitive(new Character[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInitializeRuntimeEx() { [EOL]         final ChildBackgroundInitializer child = new ChildBackgroundInitializer(); [EOL]         child.ex = new RuntimeException(); [EOL]         initializer.addInitializer(CHILD_INIT, child); [EOL]         initializer.start(); [EOL]         try { [EOL]             initializer.get(); [EOL]             fail("Runtime exception not thrown!"); [EOL]         } catch (final Exception ex) { [EOL]             assertEquals("Wrong exception", child.ex, ex); [EOL]         } [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the behavior of the initializer if one of the child initializers [EOL]      * throws a checked exception. [EOL]      */ [EOL]
@Test [EOL]     public void testTimeDefaults() { [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, Locale.CANADA), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.CANADA)); [EOL]  [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York")), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getTimeZone("America/New_York"), Locale.getDefault())); [EOL]  [EOL]         assertEquals(FastDateFormat.getTimeInstance(FastDateFormat.LONG), [EOL]                 FastDateFormat.getTimeInstance(FastDateFormat.LONG, TimeZone.getDefault(), Locale.getDefault())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]         assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]         assert
@Test [EOL]     public void testRemoveAllIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1); [EOL]       
@Test [EOL]     public void testGetSet() { [EOL]         final MutableObject<String> mutNum = new MutableObject<String>(); [EOL]         assertEquals(null, new MutableObject<Object>().getValue()); [EOL]          [EOL]         mutNum.setValue("HELLO"); [EOL]         assertSame("HELLO", mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(null); [EOL]         assertSame(null, mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_String() { [EOL]         StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst((String) null); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst(""); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]  [EOL]         sb.deleteFirst("X"); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.deleteFirst("a"); [EOL]         assertEquals("bcbccba", sb.toString()); [EOL]         sb.deleteFirst("c"); [EOL]         assertEquals("bbccba", sb.toString()); [EOL]         sb.deleteFirst("b"); [EOL]         assertEquals("bccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("abcbccba"); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("abccba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst("bc"); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------
@Test [EOL]     public void testIsAfter() { [EOL]         assertFalse(intRange.isAfter(null)); [EOL]          [EOL]         assertTrue(intRange.isAfter(5)); [EOL]         assertFalse(intRange.isAfter(10)); [EOL]         assertFalse(intRange.isAfter(15)); [EOL]         assertFalse(intRange.isAfter(20)); [EOL]         assertFalse(intRange.isAfter(25)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test(expected = IndexOutOfBoundsException.class) [EOL]     public void testRemoveAllFloatArrayOutOfBoundsIndex() { [EOL]         ArrayUtils.removeAll(new float[] { 1, 2 }, 2); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNullToEmptyInt() { [EOL]         // Test null handling [EOL]         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.nullToEmpty((int[]) null)); [EOL]         // Test valid array handling [EOL]         final int[] original = new int[] {1, 2}; [EOL]         assertEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final int[] empty = new int[]{}; [EOL]         final int[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertEquals(ArrayUtils.EMPTY_INT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) null).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE }).toString()); [EOL]  [EOL]         try { [EOL]             ConstructorUtils.invokeEx
@Test [EOL]     public void testDecrement() { [EOL]         final MutableShort mutNum = new MutableShort((short) 1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEquivalence() { [EOL]         assertTrue(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))); [EOL]         assertTrue(AnnotationUtils.equals(field2.getAnnotation(TestAnnotation.class), field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAlpha() { [EOL]         assertFalse(StringUtils.isAlpha(null)); [EOL]         assertFalse(StringUtils.isAlpha("")); [EOL]         assertFalse(StringUtils.isAlpha(" ")); [EOL]         assertTrue(StringUtils.isAlpha("a")); [EOL]         assertTrue(StringUtils.isAlpha("A")); [EOL]         assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isAlpha("ham kso")); [EOL]         assertFalse(StringUtils.isAlpha("1")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlpha("_")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_Equality_Hash() { [EOL]         final DateParser[] parsers= { [EOL]             getInstance(yMdHmsSZ, NEW_YORK, Locale.US), [EOL]             getInstance(DMY_DOT, NEW_YORK, Locale.US), [EOL]             getInstance(YMD_SLASH, NEW_YORK, Locale.US), [EOL]             getInstance(MDY_DASH, NEW_YORK, Locale.US), [EOL]             getInstance(MDY_SLASH, NEW_YORK, Locale.US), [EOL]             getInstance(MDY_SLASH, REYKJAVIK, Locale.US), [EOL]             getInstance(MDY_SLASH, REYKJAVIK, SWEDEN) [EOL]         }; [EOL]  [EOL]         final Map<DateParser,Integer> map= new HashMap<DateParser,Integer>(); [EOL]         int i= 0; [EOL]         for(final DateParser parser:parsers) { [EOL]             map.put(parser, Integer.valueOf(i++)); [EOL]         } [EOL]  [EOL]         i= 0; [EOL]         for(final DateParser parser:parsers) { [EOL]             assertEquals(i++, map.get(parser).
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]         
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testFormatPeriod() { [EOL]         final Calendar cal1970 = Calendar.getInstance(); [EOL]         cal1970.set(1970, 0, 1, 0, 0, 0); [EOL]         cal1970.set(Calendar.MILLISECOND, 0); [EOL]         final long time1970 = cal1970.getTime().getTime(); [EOL]  [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "y")); [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "M")); [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "d")); [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "H")); [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "m")); [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "s")); [EOL]         assertEquals("0", DurationFormatUtils.formatPeriod(time1970, time1970, "S")); [EOL]         assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "SSSS")); [EOL]         assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yyyy")); [EOL]         assertEquals("0000", DurationFormatUtils.formatPeriod(time1970, time1970, "yy
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementFloatArray() { [EOL]         float[] array; [EOL]         array = ArrayUtils.removeElements((float[]) null, (float) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_FLOAT_ARRAY, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_FLOAT_ARRAY, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new float[] { 1, 2, 1 }, (float) 1); [EOL]         assertTrue(Arrays.equals(new float[] { 2, 1 }, array)); [EOL]         assertEquals(Float.TYPE, array.getClass().getComponentType()); [
@Test [EOL]     public void testGetActiveExecutorTemp() { [EOL]         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]         init.start(); [EOL]         assertNotNull("No active executor", init.getActiveExecutor()); [EOL]         checkInitialize(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the execution of the background task if a temporary executor has to [EOL]      * be created. [EOL]      */ [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testKeep_StringString() { [EOL]         assertEquals(null, CharSetUtils.keep(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.keep(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("", "")); [EOL]         assertEquals("", CharSetUtils.keep("", "a-e")); [EOL]          [EOL]         assertEquals("", CharSetUtils.keep("hello", (String) null)); [EOL]         assertEquals("", CharSetUtils.keep("hello", "")); [EOL]         assertEquals("", CharSetUtils.keep("hello", "xyz")); [EOL]         assertEquals("hello", CharSetUtils.keep("hello", "a-z")); [EOL]         assertEquals("hello", CharSetUtils.keep("hello", "oleh")); [EOL]         assertEquals("ell", CharSetUtils.keep("hello", "el")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFactory_int_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getFraction(0, 0, 2); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(2, 0, 2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(0, 1, 2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getFraction(1, 1, 2); [EOL]         assertEquals(3, f.getNumerator()); [EOL]         assertEquals(2, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         try { [EOL]             f = Fraction.getFraction(1, -6
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(null); [EOL]         list.add(Object.class); [EOL]         result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals("java.lang.String", result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals("java.lang.Object", result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassesToClassNames(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc
@Test [EOL]     public void testShortArray() { [EOL]         final short[] obj1 = new short[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final short[] obj2 = new short[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final short[] obj3 = new short[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).
@Test [EOL]     public void test_changeDefault_Locale_DateInstance() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             final FastDateFormat format1 = FastDateFormat.getDateInstance(FastDateFormat.FULL, Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]             Locale.setDefault(Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getDateInstance(FastDateFormat.FULL); [EOL]  [EOL]             assertSame(Locale.GERMANY, format1.getLocale()); [EOL]             assertSame(Locale.US, format2.getLocale()); [EOL]             assertSame(Locale.GERMANY, format3.getLocale()); [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2); [EOL]             assertTrue(format2 != format3); [EOL]  [EOL]         } finally { [EOL]             Locale.setDefault(realDefaultLocale); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArray() { [EOL]         char[] obj1 = new char[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         char[] obj2 = new char[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_convertClassesToClassNames_List() { [EOL]         final List<Class<?>> list = new ArrayList<Class<?>>(); [EOL]         List<String> result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(0, result.size()); [EOL]  [EOL]         list.add(String.class); [EOL]         list.add(null); [EOL]         list.add(Object.class); [EOL]         result = ClassUtils.convertClassesToClassNames(list); [EOL]         assertEquals(3, result.size()); [EOL]         assertEquals("java.lang.String", result.get(0)); [EOL]         assertEquals(null, result.get(1)); [EOL]         assertEquals("java.lang.Object", result.get(2)); [EOL]  [EOL]         @SuppressWarnings("unchecked") // test what happens when non-generic code adds wrong type of element [EOL]         final [EOL]         List<Object> olist = (List<Object>)(List<?>)list; [EOL]         olist.add(new Object()); [EOL]         try { [EOL]             ClassUtils.convertClassesToClassNames(list); [EOL]             fail("Should not have been able to convert list"); [EOL]         } catch (final ClassCastException expected) {} [
@Test [EOL]     public void testIncrement() { [EOL]         final MutableByte mutNum = new MutableByte((byte) 1); [EOL]         mutNum.increment(); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppend_StrBuilder() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("bar")); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testBetween() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.between('F', 'L'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the between method", "AD\\u0046\\u0047Z", result); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSubarrayShort() { [EOL]         final short[] nullArray = null; [EOL]         final short[] array = { 10, 11, 12, 13, 14, 15 }; [EOL]         final short[] leftSubarray    = { 10, 11, 12, 13 }; [EOL]         final short[] midSubarray     = { 11, 12, 13, 14 }; [EOL]         final short[] rightSubarray   = { 12, 13, 14, 15 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]          
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUt
@Test [EOL]     public void testToHashCodeEqualsHashCode() { [EOL]         final HashCodeBuilder hcb = new HashCodeBuilder(17, 37).append(new Object()).append('a'); [EOL]         assertEquals("hashCode() is no longer returning the same value as toHashCode() - see LANG-520",  [EOL]                      hcb.toHashCode(), hcb.hashCode()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testShortArrayToLong() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x0000000000000000L, Conversion.shortArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x00000000F0C1CDF1L, Conversion.shortArrayToLong(src, 0, 0L, 0, 2)); [EOL]         assertEquals(0x780034560F12F0C1L, Conversion.shortArrayToLong(src, 1, 0L, 0, 4)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x123456CDF1BCDEF0L, [EOL]             Conversion.shortArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]         assertEquals( [EOL]             0x123478003456DEF0L, [EOL]             Conversion.shortArrayToLong(src
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("a", tkn.next()); [EOL]         try { [EOL]             tkn.remove(); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.set("x"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.add("y"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]       
@Test [EOL]     public void testBinaryBeMsb0ToHexDigit_2args() { [EOL]         assertEquals( [EOL]             '5', [EOL]             Conversion.binaryBeMsb0ToHexDigit(new boolean[]{ [EOL]                 true, false, false, false, false, false, false, false, false, false, false, [EOL]                 true, false, true, false, false}, 2)); [EOL]  [EOL]         final boolean[] shortArray = new boolean[]{true, true, false}; [EOL]         assertEquals('6', Conversion.binaryBeMsb0ToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryBeMsb0ToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryBeMsb0ToHexDigit(shortArray, 2)); [EOL]         final boolean[] shortArray2 = new boolean[]{true, true, true, false, false, true, false, true}; [EOL]         assertEquals('5', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 0)); [EOL]         assertEquals('2', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 1)); [EOL]         assertEquals('9', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 2)); [EOL]         assertEquals('c', Conversion.binaryBeMsb0ToHexDigit(shortArray2, 3
@Test [EOL]     public void testAppendSuper() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(5); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o1, o2).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(0).append(o2, o1).toComparison() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o1).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(-1).append(o1, o2).toComparison() < 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o1).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().appendSuper(1).append(o1, o2).toComparison() > 0); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testByteArray() { [EOL]         byte[] obj1 = new byte[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         byte[] obj2 = new byte[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\
@Test [EOL]     public void testIsInstanceOfExceptionMessage() { [EOL]         try { [EOL]             Validate.isInstanceOf(List.class, "hi"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch(final IllegalArgumentException e) { [EOL]             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_isAssignable_ClassArray_ClassArray_NoAutoboxing() throws Exception { [EOL]         final Class<?>[] array2 = new Class[] {Object.class, Object.class}; [EOL]         final Class<?>[] array1 = new Class[] {Object.class}; [EOL]         final Class<?>[] array1s = new Class[] {String.class}; [EOL]         final Class<?>[] array0 = new Class[] {}; [EOL]         final Class<?>[] arrayPrimitives = { Integer.TYPE, Boolean.TYPE }; [EOL]         final Class<?>[] arrayWrappers = { Integer.class, Boolean.class }; [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array2, false)); [EOL]         assertFalse(ClassUtils.isAssignable(null, array2, false)); [EOL]         assertTrue(ClassUtils.isAssignable(null, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, array0, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array0, null, false)); [EOL]         assertTrue(ClassUtils.isAssignable((Class[]) null, (Class[]) null, false)); [EOL]  [EOL]         assertFalse(ClassUtils.isAssignable(array1, array1s, false)); [EOL]         assertTrue(ClassUtils.isAssignable(array1s, array1s, false)); [EOL]         assertTrue(ClassUtils.
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]    
@Test [EOL]     public void testBinaryToLong() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x0000000000000000L, Conversion.binaryToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x000000000000000CL, Conversion.binaryToLong(src, 0, 0L, 0, 1 * 4)); [EOL]         assertEquals(0x000000001C0F1FDCL, Conversion.binaryToLong(src, 0, 0L, 0, 8 * 4)); [EOL]         assertEquals(0x0000000001C0F1FDL, Conversion.binaryToLong(src, 1 * 4, 0L, 0, 8 * 4)); [EOL]        
@Test [EOL]     public void test_toBoolean_Integer_Integer_Integer() { [EOL]         final Integer six = Integer.valueOf(6); [EOL]         final Integer seven = Integer.valueOf(7); [EOL]  [EOL]         assertTrue(BooleanUtils.toBoolean((Integer) null, null, seven)); [EOL]         assertFalse(BooleanUtils.toBoolean((Integer) null, six, null)); [EOL]  [EOL]         assertTrue(BooleanUtils.toBoolean(Integer.valueOf(6), six, seven)); [EOL]         assertFalse(BooleanUtils.toBoolean(Integer.valueOf(7), six, seven)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testIndexOf_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfThrowable(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfThrowable(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfThrowable(withCause, ExceptionWithCause.class, 0)); [EOL
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests isNumber(String) and tests that createNumber(String) returns [EOL]      * a valid number iff isNumber(String) returns false. [EOL]      */ [EOL]
@Test [EOL]     public void testReverseDouble() { [EOL]         double[] array = new double[] {0.3d, 0.4d, 0.5d}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5d, 0.0d); [EOL]         assertEquals(array[1], 0.4d, 0.0d); [EOL]         assertEquals(array[2], 0.3d, 0.0d); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRaggedArray() { [EOL]         final long array1[][] = new long[2][]; [EOL]         final long array2[][] = new long[2][]; [EOL]         final long array3[][] = new long[3][]; [EOL]         for (int i = 0; i < array1.length; ++i) { [EOL]             array1[i] = new long[2]; [EOL]             array2[i] = new long[2]; [EOL]             array3[i] = new long[3]; [EOL]             for (int j = 0; j < array1[i].length; ++j) { [EOL]                 array1[i][j] = (i + 1) * (j + 1); [EOL]                 array2[i][j] = (i + 1) * (j + 1); [EOL]                 array3[i][j] = (i + 1) * (j + 1); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [E
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) null).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE }).toString()); [EOL]  [EOL]         try { [EOL]             ConstructorUtils.invokeEx
@Test [EOL]     public void test_getPackageName_Object() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new ClassUtils(), "<null>")); [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(new Inner(), "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getPackageName(null, "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_long_long() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Long.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_LONG_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Long[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  [EOL]                  Long.valueOf(Long.MAX_VALUE), Long.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new long[] {Long.MIN_VALUE, Long.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Long[] {Long.valueOf(Long.MIN_VALUE),  [EOL]                  null, Long.valueOf(9999999)}, Long.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]    
@Test [EOL]     public void testLastIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null)); // Missing varag [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence) null));   // test both types of ... [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, (CharSequence[]) null)); // ... varargs invocation [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR)); // Missing vararg [EOL]         assertEquals(3, StringUtils.lastIndexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.lastIndexOfAny(FOOBAR, new String[] {"llll"})); [EOL]
@Test [EOL]     public void testRemove_String() { [EOL]         // StringUtils.remove(null, *)        = null [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals(null, StringUtils.remove(null, "a")); [EOL]          [EOL]         // StringUtils.remove("", *)          = "" [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]         assertEquals("", StringUtils.remove("", "a")); [EOL]          [EOL]         // StringUtils.remove(*, null)        = * [EOL]         assertEquals(null, StringUtils.remove(null, null)); [EOL]         assertEquals("", StringUtils.remove("", null)); [EOL]         assertEquals("a", StringUtils.remove("a", null)); [EOL]          [EOL]         // StringUtils.remove(*, "")          = * [EOL]         assertEquals(null, StringUtils.remove(null, "")); [EOL]         assertEquals("", StringUtils.remove("", "")); [EOL]    
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture
@Test [EOL]     public void testRemoveAllIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1); [EOL]       
@Test [EOL]     public void testEscapeSurrogatePairsLang858() throws Exception { [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeJava("\uDBFF\uDFFD"));       //fail LANG-858 [EOL]         assertEquals("\\uDBFF\\uDFFD", StringEscapeUtils.escapeEcmaScript("\uDBFF\uDFFD")); //fail LANG-858 [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); [EOL]         assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testToMap() { [EOL]         Map<?, ?> map = ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"hello", "world"}}); [EOL]          [EOL]         assertEquals("bar", map.get("foo")); [EOL]         assertEquals("world", map.get("hello")); [EOL]          [EOL]         assertEquals(null, ArrayUtils.toMap(null)); [EOL]         try { [EOL]             ArrayUtils.toMap(new String[][] {{"foo", "bar"}, {"short"}}); [EOL]             fail("exception expected"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, "illegal type"}); [EOL]             fail("exception expected"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             ArrayUtils.toMap(new Object[] {new Object[] {"foo", "bar"}, null}); [EOL]             fail("exception expected"); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]          [EOL]         map = ArrayUtils.toMap(new Object
@Test [EOL]     public void testReverse() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals("", sb.reverse().toString()); [EOL]          [EOL]         sb.clear().append(true); [EOL]         assertEquals("eurt", sb.reverse().toString()); [EOL]         assertEquals("true", sb.reverse().toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]        
@Test [EOL]     public void testEqualsTrue() { [EOL]         checkEquals(init, true); [EOL]         ConstantInitializer<Integer> init2 = new ConstantInitializer<Integer>( [EOL]                 Integer.valueOf(VALUE.intValue())); [EOL]         checkEquals(init2, true); [EOL]         init = new ConstantInitializer<Integer>(null); [EOL]         init2 = new ConstantInitializer<Integer>(null); [EOL]         checkEquals(init2, true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests equals() if the expected result is false. [EOL]      */ [EOL]
@Test [EOL]     public void testGetActiveExecutorTemp() { [EOL]         final BackgroundInitializerTestImpl init = new BackgroundInitializerTestImpl(); [EOL]         init.start(); [EOL]         assertNotNull("No active executor", init.getActiveExecutor()); [EOL]         checkInitialize(init); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the execution of the background task if a temporary executor has to [EOL]      * be created. [EOL]      */ [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void testSubstringBefore_StringString() { [EOL]         assertEquals("foo", StringUtils.substringBefore("fooXXbarXXbaz", "XX")); [EOL]  [EOL]         assertEquals(null, StringUtils.substringBefore(null, null)); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "")); [EOL]         assertEquals(null, StringUtils.substringBefore(null, "XX")); [EOL]         assertEquals("", StringUtils.substringBefore("", null)); [EOL]         assertEquals("", StringUtils.substringBefore("", "")); [EOL]         assertEquals("", StringUtils.substringBefore("", "XX")); [EOL]          [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", null)); [EOL]         assertEquals("foo", StringUtils.substringBefore("foo", "b")); [EOL]         assertEquals("f", StringUtils.substringBefore("foot", "o")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "a")); [EOL]         assertEquals("a", StringUtils.substringBefore("abcba", "b")); [EOL]         assertEquals("ab", StringUtils.substringBefore("abc", "c")); [EOL]         assertEquals("", StringUtils.substringBefore("abc", "")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testBooleanArray() { [EOL]         boolean[] array = new boolean[] {true, false, false}; [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{true,false,false}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSecondsOfYearWithDate() { [EOL]         final long testResult = DateUtils.getFragmentInSeconds(aDate, Calendar.YEAR); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.setTime(aDate); [EOL]         assertEquals( [EOL]                 seconds [EOL]                         + ((minutes * DateUtils.MILLIS_PER_MINUTE) [EOL]                                 + (hours * DateUtils.MILLIS_PER_HOUR) + (cal.get(Calendar.DAY_OF_YEAR) * DateUtils.MILLIS_PER_DAY)) [EOL]                         / DateUtils.MILLIS_PER_SECOND, [EOL]                 testResult); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructorAccessors_isNotIn_Same() { [EOL]         final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]         assertEquals('a', rangea.getStart()); [EOL]         assertEquals('a', rangea.getEnd()); [EOL]         assertTrue(rangea.isNegated()); [EOL]         assertEquals("^a", rangea.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testValidIndex_withMessage_charSequence() { [EOL]         final CharSequence str = "Hi"; [EOL]         Validate.validIndex(str, 0, "Broken: "); [EOL]         Validate.validIndex(str, 1, "Broken: "); [EOL]         try { [EOL]             Validate.validIndex(str, -1, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.validIndex(str, 2, "Broken: "); [EOL]             fail("Expecting IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException ex) { [EOL]             assertEquals("Broken: ", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final String input = "Hi"; [EOL]         final String test = Validate.validIndex(input, 0, "Message"); [EOL]         assertSame(input, test); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testHexToByte() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((byte)0x00, Conversion.hexToByte(src, 0, (byte)0, 0, 0)); [EOL]         assertEquals((byte)0x0C, Conversion.hexToByte(src, 0, (byte)0, 0, 1)); [EOL]         assertEquals((byte)0xDC, Conversion.hexToByte(src, 0, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0xFD, Conversion.hexToByte(src, 1, (byte)0, 0, 2)); [EOL]         assertEquals((byte)0x34, Conversion.hexToByte(src, 0, (byte)0x34, 0, 0)); [EOL]         assertEquals((byte)0x84, Conversion.hexToByte(src, 17, (byte)0x34, 4, 1)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToLong(boolean[], int, long, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         c.setTimeZone(TimeZone.getDefault()); [EOL]         final StringBuilder buffer = new StringBuilder (); [EOL]         final int year = c.get(Calendar.YEAR); [EOL]         final int month = c.get(Calendar.MONTH) + 1; [EOL]         final int day = c.get(Calendar.DAY_OF_MONTH); [EOL]         final int hour = c.get(Calendar.HOUR_OF_DAY); [EOL]         buffer.append (year); [EOL]         buffer.append(month); [EOL]         buffer.append(day); [EOL]         buffer.append(hour); [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime().getTime(), "yyyyMdH")); [EOL]          [EOL]         assertEquals(buffer.toString(), DateFormatUtils.format(c.getTime(), "yyyyMdH", Locale.US)); [EOL]          [EOL]         assertEquals(buffer.toString(), Date
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid("", 0, -1)); [EOL]         assertEquals("", StringUtils.mid("", 0, 0)); [EOL]         assertEquals("", StringUtils.mid("", 0, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]         assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]         assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]         assertEquals("", StringUtils.mid(
@Test [EOL]     public void testIsNumeric() { [EOL]         assertFalse(StringUtils.isNumeric(null)); [EOL]         assertFalse(StringUtils.isNumeric("")); [EOL]         assertFalse(StringUtils.isNumeric(" ")); [EOL]         assertFalse(StringUtils.isNumeric("a")); [EOL]         assertFalse(StringUtils.isNumeric("A")); [EOL]         assertFalse(StringUtils.isNumeric("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isNumeric("ham kso")); [EOL]         assertTrue(StringUtils.isNumeric("1")); [EOL]         assertTrue(StringUtils.isNumeric("1000")); [EOL]         assertFalse(StringUtils.isNumeric("2.3")); [EOL]         assertFalse(StringUtils.isNumeric("10 00")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isNumeric("_")); [EOL]         assertFalse(StringUtils.isNumeric("hkHKHik*khbkuh")); [EOL]         assertFalse(StringUtils.isNumeric("+123")); [EOL]         assertFalse(StringUtils.isNumeric("-123")); [EOL] 
@Test [EOL]     public void testAppendIfMissingIgnoreCase() { [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abc","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcxyz,xyz)", "abcxyz", StringUtils.appendIfMissingIgnoreCase("abcxyz","xyz")); [EOL]         assertEquals("appendIfMissingIgnoreCase(abcXYZ,xyz)", "abcXYZ", StringUtils.appendIfMissingIgnoreCase("abcXYZ","xyz")); [EOL]  [EOL]         assertEquals("appendIfMissingIgnoreCase(null,null,null)", null, StringUtils.appendIfMissingIgnoreCase(null,null,(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(abc,null,null)", "abc", StringUtils.appendIfMissingIgnoreCase("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("appendIfMissingIgnoreCase(\"\",xyz,null)", "xyz", StringUtils.appendIfMissingIgnoreCase("","xyz",(CharSequence[]) null)); [EOL]      
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]      public void testToPrimitive_float_float() { [EOL]          final Float[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Float.MIN_VALUE)); [EOL]           [EOL]          assertSame(ArrayUtils.EMPTY_FLOAT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Float[0], 1)); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  Float.valueOf(Float.MAX_VALUE), Float.valueOf(9999999)},1))); [EOL]           [EOL]          assertTrue(Arrays.equals( [EOL]              new float[] {Float.MIN_VALUE, Float.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Float[] {Float.valueOf(Float.MIN_VALUE),  [EOL]                  null, Float.valueOf(9999999)}, Float.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL
@Test [EOL]     public void testTabMatcher() { [EOL]         final StrMatcher matcher = StrMatcher.tabMatcher(); [EOL]         assertSame(matcher, StrMatcher.tabMatcher()); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 2)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER1, 3)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER1, 4)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]      public void testToPrimitive_int_int() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)},1))); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  null, Integer.valueOf(9999999)}, Integer.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]     public void testNotEmptyArray2() { [EOL]         Validate.notEmpty(new Object[] {null}, "MSG"); [EOL]         try { [EOL]             Validate.notEmpty((Object[]) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(new Object[0], "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]          [EOL]         final String[] array = new String[] {"hi"}; [EOL]         final String[] test = Validate.notEmpty(array, "Message"); [EOL]         assertSame(array, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToCharArray() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(ArrayUtils.EMPTY_CHAR_ARRAY, sb.toCharArray()); [EOL]  [EOL]         char[] a = sb.toCharArray(); [EOL]         assertNotNull("toCharArray() result is null", a); [EOL]         assertEquals("toCharArray() result is too large", 0, a.length); [EOL]  [EOL]         sb.append("junit"); [EOL]         a = sb.toCharArray(); [EOL]         assertEquals("toCharArray() result incorrect length", 5, a.length); [EOL]         assertTrue("toCharArray() result does not match", Arrays.equals("junit".toCharArray(), a)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]          
@Test [EOL]     public void testDecrement() { [EOL]         final MutableFloat mutNum = new MutableFloat(1); [EOL]         mutNum.decrement(); [EOL]          [EOL]         assertEquals(0, mutNum.intValue()); [EOL]         assertEquals(0L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToPrimitive_boolean() { [EOL]         final Boolean[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_ARRAY, ArrayUtils.toPrimitive(new Boolean[0])); [EOL]         assertTrue(Arrays.equals( [EOL]             new boolean[] {true, false, true}, [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Boolean[] {Boolean.TRUE, null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void test_getPackageName_Class() { [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String.class)); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class)); [EOL]         assertEquals("", ClassUtils.getPackageName((Class<?>)null)); [EOL]  [EOL]         // LANG-535 [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[].class)); [EOL]  [EOL]         // Primitive Arrays [EOL]         assertEquals("", ClassUtils.getPackageName(boolean[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(byte[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(char[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(short[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(int[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(long[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(float[].class)); [EOL]         assertEquals("", ClassUtils.getPackageName(double[].class)); [EOL]  [EOL]         // Arrays of arrays of ... [EOL]         assertEquals("java.lang", ClassUtils.getPackageName(String[][].class)); [EOL] 
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text
@Test [EOL]     public void testGet() throws ConcurrentException { [EOL]         assertNotNull("No managed object", createInitializer().get()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether sequential get() invocations always return the same [EOL]      * instance. [EOL]      */ [EOL]
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAbove() { [EOL]         final UnicodeEscaper ue = UnicodeEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = ue.translate(input); [EOL]         assertEquals("Failed to escape Unicode characters via the above method", "ADF\\u0047\\u005A", result); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendln_StringBuilder_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final StringBuilder str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln(new StringBuilder("foo"), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int h1 = (int) (l1 ^ l1 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6.3d; [EOL]         final long l2 = Double.doubleToLongBits(6.3d); [EOL]         final int h2 = (int) (l2 ^ l2 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReverseDelimited_StringChar() { [EOL]         assertEquals(null, StringUtils.reverseDelimited(null, '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]         assertEquals("c.b.a", StringUtils.reverseDelimited("a.b.c", '.') ); [EOL]         assertEquals("a b c", StringUtils.reverseDelimited("a b c", '.') ); [EOL]         assertEquals("", StringUtils.reverseDelimited("", '.') ); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL
@Test [EOL]     public void test_toBooleanObject_int_int_int() { [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject(6, 6, 7, 8)); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject(7, 6, 7, 8)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject(8, 6, 7, 8)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAsWriter() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("base"); [EOL]         final Writer writer = sb.asWriter(); [EOL]          [EOL]         writer.write('l'); [EOL]         assertEquals("basel", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'i', 'n'}); [EOL]         assertEquals("baselin", sb.toString()); [EOL]          [EOL]         writer.write(new char[] {'n', 'e', 'r'}, 1, 2); [EOL]         assertEquals("baseliner", sb.toString()); [EOL]          [EOL]         writer.write(" rout"); [EOL]         assertEquals("baseliner rout", sb.toString()); [EOL]          [EOL]         writer.write("ping that server", 1, 3); [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.flush();  // no effect [EOL]         assertEquals("baseliner routing", sb.toString()); [EOL]          [EOL]         writer.close();  // no effect [EOL]         assertEquals("baseliner routing", sb.
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCaseFunctions() { [EOL]         assertEquals(null, StringUtils.upperCase(null)); [EOL]         assertEquals(null, StringUtils.upperCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.lowerCase(null)); [EOL]         assertEquals(null, StringUtils.lowerCase(null, Locale.ENGLISH)); [EOL]         assertEquals(null, StringUtils.capitalize(null)); [EOL]         assertEquals(null, StringUtils.uncapitalize(null)); [EOL]  [EOL]         assertEquals("capitalize(empty-string) failed", [EOL]                      "", StringUtils.capitalize("") ); [EOL]         assertEquals("capitalize(single-char-string) failed", [EOL]                 "X", StringUtils.capitalize("x") ); [EOL]          [EOL]         assertEquals("uncapitalize(String) failed", [EOL]                      FOO_UNCAP, StringUtils.uncapitalize(FOO_CAP) ); [EOL]         assertEquals("uncapitalize(empty-string) failed", [EOL]                      "", StringUtils.uncapitalize("") ); [EOL]         assertEquals("uncapitalize(single-char-string) failed", [EOL]
@Test [EOL]     public void testReverseLong() { [EOL]         long[] array = new long[] {1L, 2L, 3L}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3L); [EOL]         assertEquals(array[1], 2L); [EOL]         assertEquals(array[2], 1L); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_getEnum() { [EOL]         assertEquals(Traffic.RED, EnumUtils.getEnum(Traffic.class, "RED")); [EOL]         assertEquals(Traffic.AMBER, EnumUtils.getEnum(Traffic.class, "AMBER")); [EOL]         assertEquals(Traffic.GREEN, EnumUtils.getEnum(Traffic.class, "GREEN")); [EOL]         assertEquals(null, EnumUtils.getEnum(Traffic.class, "PURPLE")); [EOL]         assertEquals(null, EnumUtils.getEnum(Traffic.class, null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUt
@Test [EOL]     public void testAdd() { [EOL]         Fraction f = null; [EOL]         Fraction f1 = null; [EOL]         Fraction f2 = null; [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(1, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(4, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(2, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f1 = Fraction.getFraction(3, 5); [EOL]         f2 = Fraction.getFraction(3, 5); [EOL]         f = f1.add(f2); [EOL]         assertEquals(6, f.getNumerator()); [EOL]         assertEquals(5, f.getDenominator()); [EOL]          [E
@Test [EOL]     public void testDouble() { [EOL]         assertEquals(baseStr + "[3.2]", new ToStringBuilder(base).append((double) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2]", new ToStringBuilder(base).append("a", (double) 3.2).toString()); [EOL]         assertEquals(baseStr + "[a=3.2,b=4.3]", new ToStringBuilder(base).append("a", (double) 3.2).append("b", (double) 4.3).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]   
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void test_isNotFalse_Boolean() { [EOL]         assertTrue(BooleanUtils.isNotFalse(Boolean.TRUE)); [EOL]         assertFalse(BooleanUtils.isNotFalse(Boolean.FALSE)); [EOL]         assertTrue(BooleanUtils.isNotFalse((Boolean) null)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testReverseFloat() { [EOL]         float[] array = new float[] {0.3f, 0.4f, 0.5f}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 0.5f, 0.0f); [EOL]         assertEquals(array[1], 0.4f, 0.0f); [EOL]         assertEquals(array[2], 0.3f, 0.0f); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testStopWatchSuspend(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.suspend(); [EOL]         final long suspendTime = watch.getTime(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.resume(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]          [EOL]         assertTrue(suspendTime >= 500); [EOL]         assertTrue(suspendTime < 700); [EOL]         assertTrue(totalTime >= 1000); [EOL]         assertTrue(totalTime < 1300); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendFixedWidthPadLeft_int() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadLeft(123, -1, '-'); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 0, '-'); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 1, '-'); [EOL]         assertEquals("3", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 2, '-'); [EOL]         assertEquals("23", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 3, '-'); [EOL]         assertEquals("123", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendFixedWidthPadLeft(123, 4, '-'); [EOL]         assertEquals("-123", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test [EOL]     public void testCharArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((char[]) null).toHashCode()); [EOL]         final char[] obj = new char[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (char) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (char) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReverseChar() { [EOL]         char[] array = new char[] {'a', 'f', 'C'}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 'C'); [EOL]         assertEquals(array[1], 'f'); [EOL]         assertEquals(array[2], 'a'); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSubstringsBetween_StringStringString() { [EOL]  [EOL]         String[] results = StringUtils.substringsBetween("[one], [two], [three]", "[", "]"); [EOL]         assertEquals(3, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]         assertEquals("three", results[2]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], [two], three]", "[", "]"); [EOL]         assertEquals(2, results.length); [EOL]         assertEquals("one", results[0]); [EOL]         assertEquals("two", results[1]); [EOL]  [EOL]         results = StringUtils.substringsBetween("[one], two], three]", "[", "]"); [EOL]         assertEquals(1, results.length); [EOL]         assertEquals("one", results[0]); [EOL]  [EOL]         results = StringUtils.substringsBetween("one], two], [three]", "[", "]"); [EOL]   
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void testReplace_StringStringArrayStringArray() { [EOL]         //JAVADOC TESTS START [EOL]         assertNull(StringUtils.replaceEach(null, new String[]{"a"}, new String[]{"b"})); [EOL]         assertEquals(StringUtils.replaceEach("", new String[]{"a"}, new String[]{"b"}),""); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[0], null),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", null, new String[0]),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, null),"aba"); [EOL]  [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{"a"}, new String[]{""}),"b"); [EOL]         assertEquals(StringUtils.replaceEach("aba", new String[]{null}, new String[]{"a"}),"aba"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"w", "t"}),"wcte"); [EOL]         assertEquals(StringUtils.replaceEach("abcde", new String[]{"ab", "d"}, new String[]{"d", "t"}),"dcte"); [EOL]         //JAVADOC TESTS END [EOL]  [EOL]         assertEquals("bcc", StringUtils.replaceEach("abc", new String[]{"a", "b
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL]         assertEquals("1" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(2.3f); [EOL]         assertEquals("2.3" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(4.5d); [EOL]         assertEquals("4.5" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue
@Test [EOL]     public void testReverseInt() { [EOL]         int[] array = new int[] {1, 2, 3}; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(array[0], 3); [EOL]         assertEquals(array[1], 2); [EOL]         assertEquals(array[2], 1); [EOL]  [EOL]         array = null; [EOL]         ArrayUtils.reverse(array); [EOL]         assertEquals(null, array); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToObject_boolean() { [EOL]         final boolean[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]         assertSame(ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY, ArrayUtils.toObject(new boolean[0])); [EOL]         assertTrue(Arrays.equals( [EOL]             new Boolean[] {Boolean.TRUE, Boolean.FALSE, Boolean.TRUE}, [EOL]             ArrayUtils.toObject(new boolean[] {true, false, true})) [EOL]         ); [EOL]     } [EOL]  [EOL]     // testToPrimitive/Object for byte [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new
@Test [EOL]     public void test_getAllSuperclasses_Class() { [EOL]         final List<?> list = ClassUtils.getAllSuperclasses(CY.class); [EOL]         assertEquals(2, list.size()); [EOL]         assertEquals(CX.class, list.get(0)); [EOL]         assertEquals(Object.class, list.get(1)); [EOL]  [EOL]         assertEquals(null, ClassUtils.getAllSuperclasses(null)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReducedFactory_int_int() { [EOL]         Fraction f = null; [EOL]          [EOL]         // zero [EOL]         f = Fraction.getReducedFraction(0, 1); [EOL]         assertEquals(0, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // normal [EOL]         f = Fraction.getReducedFraction(1, 1); [EOL]         assertEquals(1, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getReducedFraction(2, 1); [EOL]         assertEquals(2, f.getNumerator()); [EOL]         assertEquals(1, f.getDenominator()); [EOL]          [EOL]         // improper [EOL]         f = Fraction.getReducedFraction(22, 7); [EOL]         assertEquals(22, f.getNumerator()); [EOL]         assertEquals(7, f.getDenominator()); [EOL]          [EOL]         // negatives [EOL]         f = Fraction.getReducedFraction(-6, 10); [E
@Test [EOL]     public void testIntArray() { [EOL]         int[] array = new int[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1,2,-3,4}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContains_String() { [EOL]         assertFalse(StringUtils.contains(null, null)); [EOL]         assertFalse(StringUtils.contains(null, "")); [EOL]         assertFalse(StringUtils.contains("", null)); [EOL]         assertFalse(StringUtils.contains(null, "")); [EOL]         assertTrue(StringUtils.contains("abc", "")); [EOL]         assertTrue(StringUtils.contains("abc", "a")); [EOL]         assertTrue(StringUtils.contains("abc", "ab")); [EOL]         assertFalse(StringUtils.contains("abc", "")); [EOL]         assertTrue(StringUtils.contains("abc", "a")); [EOL]         assertTrue(StringUtils.contains("abc", "a")); [EOL]         assertTrue(StringUtils.contains("a", "ab")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             //then [EOL]             assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test [EOL]     public void testAppendln_PrimitiveNumber() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendln(0); [EOL]         assertEquals("0" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(1L); [EOL]         assertEquals("1" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(2.3f); [EOL]         assertEquals("2.3" + SEP, sb.toString()); [EOL]          [EOL]         sb.clear(); [EOL]         sb.appendln(4.5d); [EOL]         assertEquals("4.5" + SEP, sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testBinaryToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals('b', Conversion
@Test [EOL]     public void testInvokeStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", Boolean.TRUE)); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(int)", MethodUtils.
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNullToEmptyDoubleObject() { [EOL]         // Test null handling [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, ArrayUtils.nullToEmpty((Double[]) null)); [EOL]         // Test valid array handling [EOL]         final Double[] original = new Double[] {1D, 2D}; [EOL]         assertArrayEquals(original, ArrayUtils.nullToEmpty(original)); [EOL]         // Test empty array handling [EOL]         final Double[] empty = new Double[]{}; [EOL]         final Double[] result = ArrayUtils.nullToEmpty(empty); [EOL]         assertArrayEquals(ArrayUtils.EMPTY_DOUBLE_OBJECT_ARRAY, result); [EOL]         assertTrue(empty != result); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test [EOL]     public void testEquals() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals(sb1)); [EOL]         assertTrue(sb2.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb1.append("abc"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.append("ABC"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.clear().append("abc"); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]         assertFalse(sb1.equals("abc")); [EOL]     } [EOL]  [E
@Test [EOL]     public void testLastIndexOf() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(null, "0")); [EOL]         assertEquals(5, ArrayUtils.lastIndexOf(array, "0")); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, "1")); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, "2")); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, "3")); [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, null)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, "notInArray")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIntArray() { [EOL]         final int[] obj1 = new int[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final int[] obj2 = new int[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final int[] obj3 = new int[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; [EOL]         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             Array
@Test [EOL]     public void testDeleteWhitespace_String() { [EOL]         assertEquals(null, StringUtils.deleteWhitespace(null)); [EOL]         assertEquals("", StringUtils.deleteWhitespace("")); [EOL]         assertEquals("", StringUtils.deleteWhitespace("  \u000C  \t\t\u001F\n\n \u000B  ")); [EOL]         assertEquals("", StringUtils.deleteWhitespace(StringUtilsTest.WHITESPACE)); [EOL]         assertEquals(StringUtilsTest.NON_WHITESPACE, StringUtils.deleteWhitespace(StringUtilsTest.NON_WHITESPACE)); [EOL]         // Note: u-2007 and u-000A both cause problems in the source code [EOL]         // it should ignore 2007 but delete 000A [EOL]         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("  \u00A0  \t\t\n\n \u202F  ")); [EOL]         assertEquals("\u00A0\u202F", StringUtils.deleteWhitespace("\u00A0\u202F")); [EOL]         assertEquals("test", StringUtils.deleteWhitespace("\u000Bt  \t\n\u0009e\rs\n\n   \tt")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToBoolean() { [EOL]         assertFalse(BooleanUtils.toBoolean(true)); [EOL]         assertFalse(BooleanUtils.toBoolean(false)); [EOL]         assertTrue(BooleanUtils.toBoolean(false)); [EOL]         assertFalse(BooleanUtils.toBoolean(false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigit
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTrimToEmpty() { [EOL]         assertEquals(FOO, StringUtils.trimToEmpty(FOO + "  ")); [EOL]         assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO + "  ")); [EOL]         assertEquals(FOO, StringUtils.trimToEmpty(" " + FOO)); [EOL]         assertEquals(FOO, StringUtils.trimToEmpty(FOO + "")); [EOL]         assertEquals("", StringUtils.trimToEmpty(" \t\r\n\b ")); [EOL]         assertEquals("", StringUtils.trimToEmpty(StringUtilsTest.TRIMMABLE)); [EOL]         assertEquals(StringUtilsTest.NON_TRIMMABLE, StringUtils.trimToEmpty(StringUtilsTest.NON_TRIMMABLE)); [EOL]         assertEquals("", StringUtils.trimToEmpty("")); [EOL]         assertEquals("", StringUtils.trimToEmpty(null)); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text
@Test [EOL]     public void testAbove() { [EOL]         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL]     } [EOL]  [EOL]     // See LANG-617 [EOL]
@Test [EOL]     public void testAbbreviate_StringIntInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]         assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }       [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]  
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testIsTrue1() { [EOL]         Validate.isTrue(true); [EOL]         try { [EOL]             Validate.isTrue(false); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("The validated expression is false", ex.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLongArray() { [EOL]         long[] obj1 = new long[2]; [EOL]         obj1[0] = 5L; [EOL]         obj1[1] = 6L; [EOL]         long[] obj2 = new long[2]; [EOL]         obj2[0] = 5L; [EOL]         obj2[1] = 6L; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAcquireMultiplePeriods() throws InterruptedException { [EOL]         final int count = 1000; [EOL]         final TimedSemaphoreTestImpl semaphore = new TimedSemaphoreTestImpl( [EOL]                 PERIOD / 10, TimeUnit.MILLISECONDS, 1); [EOL]         semaphore.setLimit(count / 4); [EOL]         final CountDownLatch latch = new CountDownLatch(count); [EOL]         final SemaphoreThread t = new SemaphoreThread(semaphore, latch, count, count); [EOL]         t.start(); [EOL]         latch.await(); [EOL]         semaphore.shutdown(); [EOL]         assertTrue("End of period not reached", semaphore.getPeriodEnds() > 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests the methods for statistics. [EOL]      */ [EOL]
@Test [EOL]     public void testMode() { [EOL]         assertNull(ObjectUtils.mode((Object[]) null)); [EOL]         assertNull(ObjectUtils.mode()); [EOL]         assertNull(ObjectUtils.mode("foo", "bar", "baz")); [EOL]         assertNull(ObjectUtils.mode("foo", "bar", "baz", "foo", "bar")); [EOL]         assertEquals("foo", ObjectUtils.mode("foo", "bar", "baz", "foo")); [EOL]         assertEquals(Integer.valueOf(9), [EOL]             ObjectUtils.mode("foo", "bar", "baz", Integer.valueOf(9), Integer.valueOf(10), Integer.valueOf(9))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testRemoveElementBooleanArray() { [EOL]         boolean[] array; [EOL]         array = ArrayUtils.removeElements((boolean[]) null, true); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_BOOLEAN_ARRAY, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true }, true); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BOOLEAN_ARRAY, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new boolean[] { true, false, true }, true); [EOL]         assertTrue(Arrays.equals(new boolean[] { false, true }, array)); [EOL]         assertEquals(Boolean.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUtils.remove
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testLongArray() { [EOL]         long[] array = new long[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testCloneOfPrimitiveArray() { [EOL]         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("", "")); [EOL]         assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]         assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testToObject_float() { [EOL]         final float[] b = null; [EOL]         assertArrayEquals(null, ArrayUtils.toObject(b)); [EOL]      [EOL]         assertSame( [EOL]             ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY, [EOL]             ArrayUtils.toObject(new float[0])); [EOL]      [EOL]         assertTrue( [EOL]             Arrays.equals( [EOL]                 new Float[] { [EOL]                     Float.valueOf(Float.MIN_VALUE), [EOL]                     Float.valueOf(Float.MAX_VALUE), [EOL]                     Float.valueOf(9999999)}, [EOL]             ArrayUtils.toObject( [EOL]                 new float[] { Float.MIN_VALUE, Float.MAX_VALUE, 9999999 }))); [EOL]     } [EOL]  [EOL]     //  testToPrimitive/Object for double [EOL]     //  ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTSVEmpty() { [EOL]         this.testEmpty(StrTokenizer.getCSVInstance()); [EOL]         this.testEmpty(StrTokenizer.getCSVInstance("")); [EOL]     } [EOL]  [EOL]     void testXSVAbc(final StrTokenizer tokenizer) { [EOL]         this.checkClone(tokenizer); [EOL]         assertEquals(-1, tokenizer.previousIndex()); [EOL]         assertEquals(0, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.previousToken()); [EOL]         assertEquals("A", tokenizer.nextToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.nextToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals(null, tokenizer.nextToken()); [EOL]         assertEquals(3, tokenizer.nextIndex()); [EOL]         assertEquals("c", tokenizer.previousToken()); [EOL]         assertEquals(2, tokenizer.nextIndex()); [EOL]         assertEquals("b", tokenizer.previousToken()); [EOL]         assertEquals(1, tokenizer.nextIndex()); [E
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testLastIndexOf_char() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ')); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ')); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a')); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b')); [EOL]  [EOL]         assertEquals(5, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b')); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testToPrimitive_byte() { [EOL]         final Byte[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_BYTE_ARRAY, ArrayUtils.toPrimitive(new Byte[0])); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new byte[] {Byte.MIN_VALUE, Byte.MAX_VALUE, (byte)9999999}, [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE),  [EOL]                 Byte.valueOf(Byte.MAX_VALUE), Byte.valueOf((byte)9999999)})) [EOL]         ); [EOL]  [EOL]         try { [EOL]             ArrayUtils.toPrimitive(new Byte[] {Byte.valueOf(Byte.MIN_VALUE), null}); [EOL]             fail(); [EOL]         } catch (final NullPointerException ex) {} [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests isNumber(String) and tests that createNumber(String) returns [EOL]      * a valid number iff isNumber(String) returns false. [EOL]      */ [EOL]
@Test [EOL]     public void testLang100() throws Exception { [EOL]         final int size = 5000; [EOL]         final String encoding = "UTF-8"; [EOL]         final String orig = RandomStringUtils.random(size); [EOL]         final byte[] bytes = orig.getBytes(encoding); [EOL]         final String copy = new String(bytes, encoding); [EOL]  [EOL]         // for a verbose compare: [EOL]         for (int i=0; i < orig.length() && i < copy.length(); i++) { [EOL]             final char o = orig.charAt(i); [EOL]             final char c = copy.charAt(i); [EOL]             assertEquals("differs at " + i + "(" + Integer.toHexString(new Character(o).hashCode()) + "," + [EOL]             Integer.toHexString(new Character(c).hashCode()) + ")", o, c); [EOL]         } [EOL]         // compare length also [EOL]         assertEquals(orig.length(), copy.length()); [EOL]         // just to be complete [EOL]         assertEquals(orig, copy); [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testNotEmptyCollection2() { [EOL]         final Collection<Integer> coll = new ArrayList<Integer>(); [EOL]         try { [EOL]             Validate.notEmpty((Collection<?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         try { [EOL]             Validate.notEmpty(coll, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]         coll.add(Integer.valueOf(8)); [EOL]         Validate.notEmpty(coll, "MSG"); [EOL]          [EOL]         final Collection<Integer> test = Validate.notEmpty(coll, "Message"); [EOL]         assertSame(coll, test); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testMinuteFragmentInLargerUnitWithDate() { [EOL]         assertEquals(0, DateUtils.getFragmentInMinutes(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInHours(aDate, Calendar.MINUTE)); [EOL]         assertEquals(0, DateUtils.getFragmentInDays(aDate, Calendar.MINUTE)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testMultiShortArray() { [EOL]         final short[][] array1 = new short[2][2]; [EOL]         final short[][] array2 = new short[2][2]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = i; [EOL]                 array2[i][j] = i; [EOL]             } [EOL]         } [EOL]         assertTrue(new EqualsBuilder().append(array1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(array1, array2).isEquals()); [EOL]         array1[1][1] = 0; [EOL]         assertTrue(!new EqualsBuilder().append(array1, array2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testRemoveIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.remove(new int[] {1}, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 0); [EOL]         assertTrue(Arrays.equals(new int[] {2}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.remove(new int[] {1, 2, 1}, 1); [EOL]         assertTrue(Arrays.equals(new int[] {1, 1}, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         try { [EOL]             ArrayUtils.remove(new int[] {1, 2}, -1); [EOL]             fail("IndexOutOfBoundsException expected"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]  
@Test [EOL]     public void testCount_StringString() { [EOL]         assertEquals(0, CharSetUtils.count(null, (String) null)); [EOL]         assertEquals(0, CharSetUtils.count(null, "")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("", "")); [EOL]         assertEquals(0, CharSetUtils.count("", "a-e")); [EOL]          [EOL]         assertEquals(0, CharSetUtils.count("hello", (String) null)); [EOL]         assertEquals(0, CharSetUtils.count("hello", "")); [EOL]         assertEquals(1, CharSetUtils.count("hello", "a-e")); [EOL]         assertEquals(3, CharSetUtils.count("hello", "l-p")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testChaining() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertSame(sb, sb.setNewLineText(null)); [EOL]         assertSame(sb, sb.setNullText(null)); [EOL]         assertSame(sb, sb.setLength(1)); [EOL]         assertSame(sb, sb.setCharAt(0, 'a')); [EOL]         assertSame(sb, sb.ensureCapacity(0)); [EOL]         assertSame(sb, sb.minimizeCapacity()); [EOL]         assertSame(sb, sb.clear()); [EOL]         assertSame(sb, sb.reverse()); [EOL]         assertSame(sb, sb.trim()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringArray() { [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, (String[]) null)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, (String[]) null)); [EOL]         assertEquals(2, StringUtils.indexOfAny(FOOBAR, FOOBAR_SUB_ARRAY)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(null, new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[0])); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {"llll"})); [EOL]         assertEquals(0, StringUtils.indexOfAny(FOOBAR, new String[] {""})); [EOL]         assertEquals(0, StringUtils.indexOfAny("", new String[] {""})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {"a"})); [EOL]         assertEquals(-1, StringUtils.indexOfAny("", new String[] {null})); [EOL]         assertEquals(-1, StringUtils.indexOfAny(FOOBAR, new String[] {null})); [EOL]     
@Test [EOL]     public void testByte() { [EOL]         assertEquals(0, new BitField(0).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(1).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(2, new BitField(2).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(4, new BitField(4).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(8, new BitField(8).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(16, new BitField(16).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(32, new BitField(32).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(64, new BitField(64).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(-128, new BitField(128).setByteBoolean((byte) 0, true)); [EOL]         assertEquals(1, new BitField(0).setByteBoolean((byte) 1, false)); [EOL]         assertEquals(0, new BitField(1).setByteBoolean((byte) 1, false)); [EOL]         assertEquals(0, new BitField(2).setByteBoolean((byte) 2, false)); [EOL]         assertEquals(0, new BitField(4).setByteBoolean((byte) 4, false)); [EOL]         assertEquals(0, new BitField(8).setByteBoo
@Test [EOL]     public void testDoubleArray() { [EOL]         final double[] obj1 = new double[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final double[] obj2 = new double[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final double[] obj3 = new double[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).
@Test [EOL]     public void testLastIndexOfByte() { [EOL]         byte[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPow() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertEquals(Fraction.ONE, f.pow(0)); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         assertSame(f, f.pow(1)); [EOL]         assertEquals(f, f.pow(1)); [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(2); [EOL]         assertEquals(9, f.getNumerator()); [EOL]         assertEquals(25, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(3); [EOL]         assertEquals(27, f.getNumerator()); [EOL]         assertEquals(125, f.getDenominator()); [EOL]          [EOL]         f = Fraction.getFraction(3, 5); [EOL]         f = f.pow(-1); [EOL]         assertEquals(5, f.getNumerator()); [EOL]         assertEquals(
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementLongArray() { [EOL]         long[] array; [EOL]         array = ArrayUtils.removeElements((long[]) null, (long) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_LONG_ARRAY, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_LONG_ARRAY, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new long[] { 1, 2, 1 }, (long) 1); [EOL]         assertTrue(Arrays.equals(new long[] { 2, 1 }, array)); [EOL]         assertEquals(Long.TYPE, array.getClass().getComponentType()); [EOL]
@Test [EOL]     public void testHashCode() { [EOL]         final MutableFloat mutNumA = new MutableFloat(0f); [EOL]         final MutableFloat mutNumB = new MutableFloat(0f); [EOL]         final MutableFloat mutNumC = new MutableFloat(1f); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Float.valueOf(0f).hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObjectBuild() { [EOL]         final TestObject o1 = new TestObject(4); [EOL]         final TestObject o2 = new TestObject(4); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o1).build()); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append(o1, o2).build()); [EOL]         o2.setA(5); [EOL]         assertTrue(new CompareToBuilder().append(o1, o2).build().intValue() < 0); [EOL]         assertTrue(new CompareToBuilder().append(o2, o1).build().intValue() > 0); [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(o1, null).build().intValue() > 0); [EOL]         assertEquals(Integer.valueOf(0), new CompareToBuilder().append((Object) null, (Object) null).build()); [EOL]         assertTrue(new CompareToBuilder().append(null, o1).build().intValue() < 0); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBooleanArrayHiddenByObject() { [EOL]         final boolean[] array1 = new boolean[2]; [EOL]         array1[0] = true; [EOL]         array1[1] = false; [EOL]         final boolean[] array2 = new boolean[2]; [EOL]         array2[0] = true; [EOL]         array2[1] = false; [EOL]         final boolean[] array3 = new boolean[3]; [EOL]         array3[0] = true; [EOL]         array3[1] = false; [EOL]         array3[2] = true; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = true; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]    
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2, 1}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCloneOfPrimitiveArray() { [EOL]         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIntToHexDigitMsb0() { [EOL]         assertEquals('0', Conversion.intToHexDigitMsb0(0)); [EOL]         assertEquals('8', Conversion.intToHexDigitMsb0(1)); [EOL]         assertEquals('4', Conversion.intToHexDigitMsb0(2)); [EOL]         assertEquals('c', Conversion.intToHexDigitMsb0(3)); [EOL]         assertEquals('2', Conversion.intToHexDigitMsb0(4)); [EOL]         assertEquals('a', Conversion.intToHexDigitMsb0(5)); [EOL]         assertEquals('6', Conversion.intToHexDigitMsb0(6)); [EOL]         assertEquals('e', Conversion.intToHexDigitMsb0(7)); [EOL]         assertEquals('1', Conversion.intToHexDigitMsb0(8)); [EOL]         assertEquals('9', Conversion.intToHexDigitMsb0(9)); [EOL]         assertEquals('5', Conversion.intToHexDigitMsb0(10)); [EOL]         assertEquals('d', Conversion.intToHexDigitMsb0(11)); [EOL]         assertEquals('3', Conversion.intToHexDigitMsb0(12)); [EOL]         assertEquals('b', Conversion.intToHexDigitMsb0(13)); [EOL]         assertEquals('7', Conversion.intToHexDigit
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testDelete_StringString() { [EOL]         assertEquals(null, CharSetUtils.delete(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.delete(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.delete("", (String) null)); [EOL]         assertEquals("", CharSetUtils.delete("", "")); [EOL]         assertEquals("", CharSetUtils.delete("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.delete("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "")); [EOL]         assertEquals("hllo", CharSetUtils.delete("hello", "a-e")); [EOL]         assertEquals("he", CharSetUtils.delete("hello", "l-p")); [EOL]         assertEquals("hello", CharSetUtils.delete("hello", "z")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]   
@Test [EOL]     public void test_getAllInterfaces_Class() { [EOL]         final List<?> list = ClassUtils.getAllInterfaces(CY.class); [EOL]         assertEquals(6, list.size()); [EOL]         assertEquals(IB.class, list.get(0)); [EOL]         assertEquals(IC.class, list.get(1)); [EOL]         assertEquals(ID.class, list.get(2)); [EOL]         assertEquals(IE.class, list.get(3)); [EOL]         assertEquals(IF.class, list.get(4)); [EOL]         assertEquals(IA.class, list.get(5)); [EOL]  [EOL]         assertEquals(null, ClassUtils.getAllInterfaces(null)); [EOL]     } [EOL]  [EOL]     private static interface IA { [EOL]     } [EOL]     private static interface IB { [EOL]     } [EOL]     private static interface IC extends ID, IE { [EOL]     } [EOL]     private static interface ID { [EOL]     } [EOL]     private static interface IE extends IF { [EOL]     } [EOL]     private static interface IF { [EOL]     } [EOL]     private static class CX implements IB, IA, IE { [EOL]     } [EOL]     private static class CY extends CX implements IB, IC { [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppend_StrBuilder_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo"), 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StrBuilder("bar"), 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new Str
@Test [EOL]     public void testLeftPad_StringInt() { [EOL]         assertEquals(null, StringUtils.leftPad(null, 5)); [EOL]         assertEquals("     ", StringUtils.leftPad("", 5)); [EOL]         assertEquals("  abc", StringUtils.leftPad("abc", 5)); [EOL]         assertEquals("abc", StringUtils.leftPad("abc", 2)); [EOL]     } [EOL]          [EOL]
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUt
@Test [EOL]     public void testMid_String() { [EOL]         assertSame(null, StringUtils.mid(null, -1, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 0, -1)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 0)); [EOL]         assertSame(null, StringUtils.mid(null, 3, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid("", 0, -1)); [EOL]         assertEquals("", StringUtils.mid("", 0, 0)); [EOL]         assertEquals("", StringUtils.mid("", 0, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, -1)); [EOL]         assertEquals("", StringUtils.mid(FOOBAR, 3, 0)); [EOL]         assertEquals("b", StringUtils.mid(FOOBAR, 3, 1)); [EOL]         assertEquals(FOO, StringUtils.mid(FOOBAR, 0, 3)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 3)); [EOL]         assertEquals(FOOBAR, StringUtils.mid(FOOBAR, 0, 80)); [EOL]         assertEquals(BAR, StringUtils.mid(FOOBAR, 3, 80)); [EOL]         assertEquals("", StringUtils.mid(
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testCapacityAndLength() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         assertEquals(32, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.minimizeCapacity(); [EOL]         assertEquals(0, sb.capacity()); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.ensureCapacity(32); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(0, sb.length()); [EOL]         assertEquals(0, sb.size()); [EOL]         assertTrue(sb.isEmpty()); [EOL]  [EOL]         sb.append("foo"); [EOL]         assertTrue(sb.capacity() >= 32); [EOL]         assertEquals(3, sb.length()); [EOL]         assertEquals(3, sb.size()); [EOL]         assertTrue(sb.isEmpty() == false); [EOL]  [EOL]         sb.clear(); [E
@Test [EOL]     public void test_generateBitVector() { [EOL]         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class))); [EOL]         assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED))); [EOL]         assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER))); [EOL]         assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.GREEN))); [EOL]         assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER))); [EOL]         assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN))); [EOL]         assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN))); [EOL]         assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("a", tkn.next()); [EOL]         try { [EOL]             tkn.remove(); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.set("x"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.add("y"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]       
@Test [EOL]     public void testOneArgNull() { [EOL]         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructorAccessors_isNotIn_Same() { [EOL]         final CharRange rangea = CharRange.isNotIn('a', 'a'); [EOL]         assertEquals('a', rangea.getStart()); [EOL]         assertEquals('a', rangea.getEnd()); [EOL]         assertTrue(rangea.isNegated()); [EOL]         assertEquals("^a", rangea.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]        
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]   
@Test [EOL]     public void testBinaryToInt() { [EOL]         final boolean[] src = new boolean[]{ [EOL]             false, false, true, true, true, false, true, true, true, true, true, true, true, [EOL]             false, false, false, true, true, true, true, false, false, false, false, false, [EOL]             false, true, true, true, false, false, false, false, false, false, false, true, [EOL]             true, true, true, true, false, false, false, false, true, false, false, true, true, [EOL]             false, false, false, false, true, false, true, false, true, false, false, true, [EOL]             true, false, true, true, true, false, false, false, false, true}; [EOL]         // conversion of "CDF1F0C10F12345678" by HexToBinary [EOL]         assertEquals(0x00000000, Conversion.binaryToInt(src, 0 * 4, 0, 0, 0 * 4)); [EOL]         assertEquals(0x0000000C, Conversion.binaryToInt(src, 0 * 4, 0, 0, 1 * 4)); [EOL]         assertEquals(0x1C0F1FDC, Conversion.binaryToInt(src, 0 * 4, 0, 0, 8 * 4)); [EOL]         assertEquals(0x01C0F1FD, Conversion.binaryToInt(src, 1 * 4, 0, 0, 8 * 4)); [EOL]         assert
@Test [EOL]     public void testFormatDurationISO() { [EOL]         assertEquals("P0Y0M0DT0H0M0.000S", DurationFormatUtils.formatDurationISO(0L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.001S", DurationFormatUtils.formatDurationISO(1L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.010S", DurationFormatUtils.formatDurationISO(10L)); [EOL]         assertEquals("P0Y0M0DT0H0M0.100S", DurationFormatUtils.formatDurationISO(100L)); [EOL]         assertEquals("P0Y0M0DT0H1M15.321S", DurationFormatUtils.formatDurationISO(75321L)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testContainsChar() { [EOL]         char[] array = null; [EOL]         assertFalse(ArrayUtils.contains(array, 'b')); [EOL]         array = new char[] { 'a', 'b', 'c', 'd', 'a' }; [EOL]         assertTrue(ArrayUtils.contains(array, 'a')); [EOL]         assertTrue(ArrayUtils.contains(array, 'b')); [EOL]         assertTrue(ArrayUtils.contains(array, 'c')); [EOL]         assertTrue(ArrayUtils.contains(array, 'd')); [EOL]         assertFalse(ArrayUtils.contains(array, 'e')); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testMinInt() { [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(int[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new int[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArray() { [EOL]         long[] array = new long[] {1, 2, -3, 4}; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  {1,2,-3,4}" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[" + SystemUtils.LINE_SEPARATOR + "  <null>" + SystemUtils.LINE_SEPARATOR + "]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testFormatDurationWords() { [EOL]         String text = null; [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, false); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, false); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(120 * 1000, true, false); [EOL]         assertEquals("2 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(121 * 1000, true, false); [EOL]         assertEquals("2 minutes 1 second", text); [EOL]         text = DurationFormatUtils.formatDurationWords(72 * 60 * 1000, true, false); [EOL]         assertEquals("1 hour 12 minutes 0 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(24 * 60 * 60 * 1000, true, false); [EOL]         assertEquals("1 day 0 hours 0 minutes 0 seconds", text); [EOL]  [EOL]         text = DurationFormatUtils.formatDurationWords(50 * 1000, true, true); [EOL]         assertEquals("50 seconds", text); [EOL]         text = DurationFormatUtils.formatDurationWords(65 * 1000, true, true); [EOL]         assertEquals("1 minute 5 seconds", text); [EOL]         text
@Test [EOL]     public void testConversions() { [EOL]         Fraction f = null; [EOL]          [EOL]         f = Fraction.getFraction(3, 7, 8); [EOL]         assertEquals(3, f.intValue()); [EOL]         assertEquals(3L, f.longValue()); [EOL]         assertEquals(3.875f, f.floatValue(), 0.00001f); [EOL]         assertEquals(3.875d, f.doubleValue(), 0.00001d); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testBinaryToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals('b', Conversion
@Test [EOL]     public void testDeleteFirst_StrMatcher() { [EOL]         StrBuilder sb = new StrBuilder("A0xA1A2yA3"); [EOL]         sb.deleteFirst((StrMatcher) null); [EOL]         assertEquals("A0xA1A2yA3", sb.toString()); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("xA1A2yA3", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder("Ax1"); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("Ax1", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst(A_NUMBER_MATCHER); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetContextValues() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         assertEquals(exceptionContext.getContextValues("test1"), Collections.singletonList(null)); [EOL]         assertEquals(exceptionContext.getContextValues("test2"), Arrays.asList("some value", "different value")); [EOL]  [EOL]         exceptionContext.setContextValue("test2", "another"); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("test2").equals("another")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEscapedQuote_LANG_477() { [EOL]         final String pattern = "it''s a {0,lower} 'test'!"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, registry); [EOL]         assertEquals("it's a dummy test!", emf.format(new Object[] {"DUMMY"})); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test extended and built in formats. [EOL]      */ [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max
@Test [EOL]     public void testIsTrue5() { [EOL]         Validate.isTrue(true, "MSG", 7.4d); [EOL]         try { [EOL]             Validate.isTrue(false, "MSG", 7.4d); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIndexOf_String() { [EOL]         assertEquals(-1, StringUtils.indexOf(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOf("", null)); [EOL]         assertEquals(0, StringUtils.indexOf("", "")); [EOL]         assertEquals(0, StringUtils.indexOf("aabaabaa", "a")); [EOL]         assertEquals(2, StringUtils.indexOf("aabaabaa", "b")); [EOL]         assertEquals(1, StringUtils.indexOf("aabaabaa", "ab")); [EOL]         assertEquals(0, StringUtils.indexOf("aabaabaa", "")); [EOL]  [EOL]         assertEquals(2, StringUtils.indexOf(new StringBuilder("aabaabaa"), "b")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testObject() { [EOL]         final Integer i3 = Integer.valueOf(3); [EOL]         final Integer i4 = Integer.valueOf(4); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) null).toString()); [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(i3).toString()); [EOL]         assertEquals(baseStr + "[a=<null>]", new ToStringBuilder(base).append("a", (Object) null).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", i3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", i3).append("b", i4).toString()); [EOL]         assertEquals(baseStr + "[a=<Integer>]", new ToStringBuilder(base).append("a", i3, false).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[a=[]]", new ToStringBuilder(base).append("a", new ArrayList<Object>(), true).toString()); [EOL]         assertEquals(baseStr + "[a=<size=0>]", new ToStringBuilder(base).append("a", new HashMap<Object, Object>(), false).toString()); [EOL]         assertEquals(baseStr + "[
@Test [EOL]     public void testDayOf() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10); [EOL]  [EOL]         final DateParser fdf = getInstance("W w F D y", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("3 7 2 41 03")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test case for {@link FastDateParser#FastDateParser(String, TimeZone, Locale)}. [EOL]      * @throws ParseException [EOL]      */ [EOL]
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testToPrimitive_char_char() { [EOL]         final Character[] b = null; [EOL]         assertEquals(null, ArrayUtils.toPrimitive(b, Character.MIN_VALUE)); [EOL]          [EOL]         assertSame(ArrayUtils.EMPTY_CHAR_ARRAY,  [EOL]             ArrayUtils.toPrimitive(new Character[0], (char)0)); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE),  [EOL]                 new Character(Character.MAX_VALUE), new Character('0')},  [EOL]                 Character.MIN_VALUE)) [EOL]         ); [EOL]          [EOL]         assertTrue(Arrays.equals( [EOL]             new char[] {Character.MIN_VALUE, Character.MAX_VALUE, '0'}, [EOL]             ArrayUtils.toPrimitive(new Character[] {new Character(Character.MIN_VALUE), null,  [EOL]                 new Character('0')}, Character.MAX_VALUE)) [EOL]         ); [EOL]     } [
@Test [EOL]     public void testGetAccessibleMethodPrivateInterface() throws Exception { [EOL]         final Method expected = TestBeanWithInterfaces.class.getMethod("foo"); [EOL]         assertNotNull(expected); [EOL]         final Method actual = MethodUtils.getAccessibleMethod(TestBeanWithInterfaces.class, "foo"); [EOL]         assertNull(actual); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAbbreviate_StringIntInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10, 12)); [EOL]         assertEquals("", StringUtils.abbreviate("", 0, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 2, 10)); [EOL]          [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 0, 3); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]         }       [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             String res = StringUtils.abbreviate("abcdefghij", 5, 6); [EOL]             fail("StringUtils.abbreviate expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]                 // empty [EOL]  
@Test [EOL]     public void testSqueeze_StringString() { [EOL]         assertEquals(null, CharSetUtils.squeeze(null, (String) null)); [EOL]         assertEquals(null, CharSetUtils.squeeze(null, "")); [EOL]          [EOL]         assertEquals("", CharSetUtils.squeeze("", (String) null)); [EOL]         assertEquals("", CharSetUtils.squeeze("", "")); [EOL]         assertEquals("", CharSetUtils.squeeze("", "a-e")); [EOL]          [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", (String) null)); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("hello", "a-e")); [EOL]         assertEquals("helo", CharSetUtils.squeeze("hello", "l-p")); [EOL]         assertEquals("heloo", CharSetUtils.squeeze("helloo", "l")); [EOL]         assertEquals("hello", CharSetUtils.squeeze("helloo", "^l")); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testByteArrayToLong() { [EOL]         final byte[] src = new byte[]{ [EOL]             (byte)0xCD, (byte)0xF1, (byte)0xF0, (byte)0xC1, (byte)0x0F, (byte)0x12, (byte)0x34, [EOL]             (byte)0x56, (byte)0x78}; [EOL]         assertEquals(0x0000000000000000L, Conversion.byteArrayToLong(src, 0, 0L, 0, 0)); [EOL]         assertEquals(0x00000000000000CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 1)); [EOL]         assertEquals(0x00000000C1F0F1CDL, Conversion.byteArrayToLong(src, 0, 0L, 0, 4)); [EOL]         assertEquals(0x000000000FC1F0F1L, Conversion.byteArrayToLong(src, 1, 0L, 0, 4)); [EOL]         assertEquals( [EOL]             0x123456789ABCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 0, 0)); [EOL]         assertEquals( [EOL]             0x12345678CDBCDEF0L, Conversion.byteArrayToLong(src, 0, 0x123456789ABCDEF0L, 24, 1)); [EOL]         assertEquals( [EOL]             0x123456789A7856F0L, Conversion.byteArray
@Test [EOL]     public void testRemoveElementsObjectArray() { [EOL]         Object[] array; [EOL]         array = ArrayUtils.removeElements((Object[]) null, "a"); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_OBJECT_ARRAY, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a" }, "a"); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_OBJECT_ARRAY, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new Object[] { "a", "b", "a" }, "a"); [EOL]         assertTrue(Arrays.equals(new Object[] { "b", "a" }, array)); [EOL]         assertEquals(Object.class, array.getClass().getComponentType()); [EOL]  [EOL]       
@Test [EOL]     public void testSubarrayObject() { [EOL]         final Object[] nullArray = null; [EOL]         final Object[] objectArray = { "a", "b", "c", "d", "e", "f"}; [EOL]  [EOL]         assertEquals("0 start, mid end", "abcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, 4))); [EOL]         assertEquals("0 start, length end", "abcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 0, objectArray.length))); [EOL]         assertEquals("mid start, mid end", "bcd", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, 4))); [EOL]         assertEquals("mid start, length end", "bcdef", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray, 1, objectArray.length))); [EOL]  [EOL]         assertNull("null input", ArrayUtils.subarray(nullArray, 0, 3)); [EOL]         assertEquals("empty array", "", [EOL]             StringUtils.join(ArrayUtils.subarray(ArrayUtils.EMPTY_OBJECT_ARRAY, 1, 2))); [EOL]         assertEquals("start > end", "", [EOL]             StringUtils.join(ArrayUtils.subarray(objectArray,
@Test [EOL]     public void testJoin_ArrayOfShorts() { [EOL]         assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]         assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]         assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]         assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]  [EOL]         // Make sure documentation examples from Javadoc all work [EOL]         // (this fixed a lot of my bugs when I these!) [EOL]         // [EOL]       
@Test [EOL]     public void testStopWatchSimple(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long time = watch.getTime(); [EOL]         assertEquals(time, watch.getTime()); [EOL]          [EOL]         assertTrue(time >= 500); [EOL]         assertTrue(time < 700); [EOL]          [EOL]         watch.reset(); [EOL]         assertEquals(0, watch.getTime()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.
@Test [EOL]     public void testFormattable_padded() throws Exception { [EOL]         final Pair<String, String> pair = Pair.of("Key", "Value"); [EOL]         assertEquals("         (Key,Value)", String.format("%1$20s", pair)); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new long[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddValuePrimitive() { [EOL]         final MutableLong mutNum = new MutableLong(1); [EOL]         mutNum.add(1); [EOL]          [EOL]         assertEquals(2, mutNum.intValue()); [EOL]         assertEquals(2L, mutNum.longValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCenter_StringInt() { [EOL]         assertEquals(null, StringUtils.center(null, -1)); [EOL]         assertEquals(null, StringUtils.center(null, 4)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals("ab", StringUtils.center("ab", 0)); [EOL]         assertEquals("ab", StringUtils.center("ab", -1)); [EOL]         assertEquals("ab", StringUtils.center("ab", 1)); [EOL]         assertEquals("    ", StringUtils.center("", 4)); [EOL]         assertEquals(" ab ", StringUtils.center("ab", 4)); [EOL]         assertEquals("abcd", StringUtils.center("abcd", 2)); [EOL]         assertEquals(" a  ", StringUtils.center("a", 4)); [EOL]         assertEquals("  a  ", StringUtils.center("a", 5)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRemoveAllIntArray() { [EOL]         int[] array; [EOL]         array = ArrayUtils.removeAll(ArrayUtils.EMPTY_INT_ARRAY, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, ArrayUtils.EMPTY_INT_ARRAY); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         array = ArrayUtils.removeAll(new int[] { 1 }, 0); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_INT_ARRAY, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 0); [EOL]         assertTrue(Arrays.equals(new int[] { 2 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2 }, 1); [EOL]         assertTrue(Arrays.equals(new int[] { 1 }, array)); [EOL]         assertEquals(Integer.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeAll(new int[] { 1, 2, 1 }, 1); [EOL]       
@Test [EOL]     public void testMaxLong() { [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new long[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new long[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(long[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new long[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testNotSupported() { [EOL]         assertFalse(CharEncoding.isSupported(null)); [EOL]         assertFalse(CharEncoding.isSupported("")); [EOL]         assertFalse(CharEncoding.isSupported(" ")); [EOL]         assertFalse(CharEncoding.isSupported("\t\r\n")); [EOL]         assertFalse(CharEncoding.isSupported("DOESNOTEXIST")); [EOL]         assertFalse(CharEncoding.isSupported("this is not a valid encoding name")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAppendln_CharArray_int_int() { [EOL]         final int[] count = new int[2]; [EOL]         final StrBuilder sb = new StrBuilder() { [EOL]             @Override [EOL]             public StrBuilder append(final char[] str, final int startIndex, final int length) { [EOL]                 count[0]++; [EOL]                 return super.append(str, startIndex, length); [EOL]             } [EOL]             @Override [EOL]             public StrBuilder appendNewLine() { [EOL]                 count[1]++; [EOL]                 return super.appendNewLine(); [EOL]             } [EOL]         }; [EOL]         sb.appendln("foo".toCharArray(), 0, 3); [EOL]         assertEquals("foo" + SEP, sb.toString()); [EOL]         assertEquals(1, count[0]); [EOL]         assertEquals(1, count[1]); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testMonthIterator() throws Exception { [EOL]         Iterator<?> it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 27, 2002"), [EOL]                 dateParser.parse("March 2, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date1, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("January 28, 2002"), [EOL]                 dateParser.parse("March 3, 2002")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_SUNDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 28, 2001"), [EOL]                 dateParser.parse("December 1, 2001")); [EOL]  [EOL]         it = DateUtils.iterator(date2, DateUtils.RANGE_MONTH_MONDAY); [EOL]         assertWeekIterator(it, [EOL]                 dateParser.parse("October 29, 2001"), [EOL]                 dateParser.parse("December 2
@Test [EOL]     public void test_toBooleanObject_String() { [EOL]         assertEquals(null, BooleanUtils.toBooleanObject((String) null)); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("false")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("no")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("off")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("FALSE")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("NO")); [EOL]         assertEquals(Boolean.FALSE, BooleanUtils.toBooleanObject("OFF")); [EOL]         assertEquals(null, BooleanUtils.toBooleanObject("oof")); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("true")); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("yes")); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("on")); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("TRUE")); [EOL]         assertEquals(Boolean.TRUE, BooleanUtils.toBooleanObject("ON")); [EOL]      
@Test [EOL]     public void testRemoveElementByteArray() { [EOL]         byte[] array; [EOL]         array = ArrayUtils.removeElement((byte[]) null, (byte) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElement(ArrayUtils.EMPTY_BYTE_ARRAY, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_BYTE_ARRAY, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElement(new byte[] {1, 2, 1}, (byte) 1); [EOL]         assertTrue(Arrays.equals(new byte[] {2, 1}, array)); [EOL]         assertEquals(Byte.TYPE, array.getClass().getComponentType()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new
@Test [EOL]     public void testCharArrayAsObject() { [EOL]         final char[] obj = new char[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = (char) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = (char) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstMethods() { [EOL]  [EOL]         // To truly test the CONST() method, we'd want to look in the [EOL]         // bytecode to see if the literals were folded into the [EOL]         // class, or if the bytecode kept the method call. [EOL]  [EOL]         assertTrue("CONST(boolean)", ObjectUtils.CONST(true)); [EOL]         assertEquals("CONST(byte)", (byte) 3, ObjectUtils.CONST((byte) 3)); [EOL]         assertEquals("CONST(char)", (char) 3, ObjectUtils.CONST((char) 3)); [EOL]         assertEquals("CONST(short)", (short) 3, ObjectUtils.CONST((short) 3)); [EOL]         assertEquals("CONST(int)", 3, ObjectUtils.CONST(3)); [EOL]         assertEquals("CONST(long)", 3l, ObjectUtils.CONST(3l)); [EOL]         assertEquals("CONST(float)", 3f, ObjectUtils.CONST(3f), 0); [EOL]         assertEquals("CONST(double)", 3.0, ObjectUtils.CONST(3.0), 0); [EOL]         assertEquals("CONST(Object)", "abc", ObjectUtils.CONST("abc")); [EOL]  [EOL]         // Make sure documentation examples from Javadoc all work [EOL]         // (this fixed a lot of my bugs when I these!) [EOL]         // [EOL]       
@Test [EOL]     public void testIsDigits() { [EOL]         assertFalse("isDigits(null) failed", NumberUtils.isDigits(null)); [EOL]         assertFalse("isDigits('') failed", NumberUtils.isDigits("")); [EOL]         assertTrue("isDigits(String) failed", NumberUtils.isDigits("12345")); [EOL]         assertFalse("isDigits(String) neg 1 failed", NumberUtils.isDigits("1234.5")); [EOL]         assertFalse("isDigits(String) neg 3 failed", NumberUtils.isDigits("1ab")); [EOL]         assertFalse("isDigits(String) neg 4 failed", NumberUtils.isDigits("abc")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests isNumber(String) and tests that createNumber(String) returns [EOL]      * a valid number iff isNumber(String) returns false. [EOL]      */ [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableInt(0).toString()); [EOL]         assertEquals("10", new MutableInt(10).toString()); [EOL]         assertEquals("-123", new MutableInt(-123).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testGetInnerClass() throws ClassNotFoundException { [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner.DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest.Inner$DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner$DeeplyNested" ) ); [EOL]         assertEquals( Inner.DeeplyNested.class, ClassUtils.getClass( "org.apache.commons.lang3.ClassUtilsTest$Inner.DeeplyNested" ) ); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]           
@Test [EOL]     public void testContainsIgnoreCase_StringString() { [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, null)); [EOL]  [EOL]         // Null tests [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "")); [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "a")); [EOL]         assertFalse(StringUtils.containsIgnoreCase(null, "abc")); [EOL]  [EOL]         assertFalse(StringUtils.containsIgnoreCase("", null)); [EOL]         assertFalse(StringUtils.containsIgnoreCase("a", null)); [EOL]         assertFalse(StringUtils.containsIgnoreCase("abc", null)); [EOL]  [EOL]         // Match len = 0 [EOL]         assertTrue(StringUtils.containsIgnoreCase("", "")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("a", "")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("abc", "")); [EOL]  [EOL]         // Match len = 1 [EOL]         assertFalse(StringUtils.containsIgnoreCase("", "a")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("a", "a")); [EOL]         assertTrue(StringUtils.containsIgnoreCase("abc", "a")); [EOL]         assertFalse(StringUtils
@Test [EOL]     public void testAppend_StringBuffer_int_int() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StringBuffer) null, 0, 1); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StringBuffer("foo"), 0, 3); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), -1, 1); [EOL]             fail("append(char[], -1,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new StringBuffer("bar"), 3, 1); [EOL]             fail("append(char[], 3,) expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.append(new String
@Test [EOL]     public void testReplaceChars_StringStringString() { [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, "a", null)); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "")); [EOL]         assertEquals(null, StringUtils.replaceChars(null, null, "x")); [EOL]          [EOL]         assertEquals("", StringUtils.replaceChars("", null, null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", "a", null)); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "")); [EOL]         assertEquals("", StringUtils.replaceChars("", null, "x")); [EOL]  [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, null)); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "")); [EOL]         assertEquals("abc", StringUtils.replaceChars("abc", null, "x")); [EOL]          [EOL]         assertEquals("abc", StringUtils.replaceChars("abc
@Test [EOL]     public void testGetAccessibleInterfaceMethodFromDescription() [EOL]             throws Exception { [EOL]         final Class<?>[][] p = { ArrayUtils.EMPTY_CLASS_ARRAY, null }; [EOL]         for (final Class<?>[] element : p) { [EOL]             final Method accessibleMethod = MethodUtils.getAccessibleMethod( [EOL]                     TestMutable.class, "getValue", element); [EOL]             assertSame(Mutable.class, accessibleMethod.getDeclaringClass()); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsAlpha() { [EOL]         assertFalse(StringUtils.isAlpha(null)); [EOL]         assertFalse(StringUtils.isAlpha("")); [EOL]         assertFalse(StringUtils.isAlpha(" ")); [EOL]         assertTrue(StringUtils.isAlpha("a")); [EOL]         assertTrue(StringUtils.isAlpha("A")); [EOL]         assertTrue(StringUtils.isAlpha("kgKgKgKgkgkGkjkjlJlOKLgHdGdHgl")); [EOL]         assertFalse(StringUtils.isAlpha("ham kso")); [EOL]         assertFalse(StringUtils.isAlpha("1")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik6iUGHKJgU7tUJgKJGI87GIkug")); [EOL]         assertFalse(StringUtils.isAlpha("_")); [EOL]         assertFalse(StringUtils.isAlpha("hkHKHik*khbkuh")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable [EOL]  [EOL]                         @Override [EOL]                         public Object parseObject(final String formattedDate) throws ParseException { [EOL]                             synchronized(this) { [EOL]                                 return super.parse(formattedDate); [EOL]                             } [EOL]                         } [EOL]         }); [EOL]          [EOL]         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]          [EOL]         final String times= ">>FastDateFormatTest: FastDate
@Test [EOL]     public void testContains() { [EOL]         final Object[] array = new Object[] { "0", "1", "2", "3", null, "0" }; [EOL]         assertFalse(ArrayUtils.contains(null, null)); [EOL]         assertFalse(ArrayUtils.contains(null, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "0")); [EOL]         assertTrue(ArrayUtils.contains(array, "1")); [EOL]         assertTrue(ArrayUtils.contains(array, "2")); [EOL]         assertTrue(ArrayUtils.contains(array, "3")); [EOL]         assertTrue(ArrayUtils.contains(array, null)); [EOL]         assertFalse(ArrayUtils.contains(array, "notInArray")); [EOL]     } [EOL]      [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testStripEnd_StringString() { [EOL]         // null stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, null)); [EOL]         assertEquals("", StringUtils.stripEnd("", null)); [EOL]         assertEquals("", StringUtils.stripEnd("        ", null)); [EOL]         assertEquals("  abc", StringUtils.stripEnd("  abc  ", null)); [EOL]         assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,  [EOL]             StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]  [EOL]         // "" stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, "")); [EOL]         assertEquals("", StringUtils.stripEnd("", "")); [EOL]         assertEquals("        ", StringUtils.stripEnd("        ", "")); [EOL]         assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "")); [EOL]         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); [EOL]          [EOL]         // " " strip
@Test [EOL]     public void testMinShort() { [EOL]         assertEquals( [EOL]             "min(short[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.min(new short[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "min(short[]) failed for array length 2", [EOL]             6, [EOL]             NumberUtils.min(new short[] { 6, 9 })); [EOL]  [EOL]         assertEquals(-10, NumberUtils.min(new short[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(-10, NumberUtils.min(new short[] { -5, 0, -10, 5, 10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testParseNumerics() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]         cal.set(2003, 1, 10, 15, 33, 20); [EOL]         cal.set(Calendar.MILLISECOND, 989); [EOL]  [EOL]         final DateParser fdf = getInstance("yyyyMMddHHmmssSSS", NEW_YORK, Locale.US); [EOL]         assertEquals(cal.getTime(), fdf.parse("20030210153320989")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfter("", null)); [EOL]         assertEquals("", StringUtils.substringAfter("", "")); [EOL]         assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]          [EOL]         assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]         assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]         assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]         assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL]     } [E
@Test [EOL]     public void testCharSetMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]         assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL
@Test [EOL]     public void testCreateNumberMagnitude() { [EOL]         // Test Float.MAX_VALUE, and same with +1 in final digit to check conversion changes to next Number type [EOL]         assertEquals(Float.valueOf(Float.MAX_VALUE),  NumberUtils.createNumber("3.4028235e+38")); [EOL]         assertEquals(Double.valueOf(3.4028236e+38),   NumberUtils.createNumber("3.4028236e+38")); [EOL]  [EOL]         // Test Double.MAX_VALUE [EOL]         assertEquals(Double.valueOf(Double.MAX_VALUE),          NumberUtils.createNumber("1.7976931348623157e+308")); [EOL]         // Test with +2 in final digit (+1 does not cause roll-over to BigDecimal) [EOL]         assertEquals(new BigDecimal("1.7976931348623159e+308"), NumberUtils.createNumber("1.7976931348623159e+308")); [EOL]  [EOL]         assertEquals(Integer.valueOf(0x12345678), NumberUtils.createNumber("0x12345678")); [EOL]         assertEquals(Long.valueOf(0x123456789L),  NumberUtils.createNumber("0x123456789")); [EOL]  [EOL]         assertEquals(Long.valueOf(0x7fffffffffffffffL),      NumberUtils.createNumber("0x7fffffffffffffff")); [EOL]         // Does not appear to be a way to create a literal BigInteger of this magnitude [EOL]   
@Test [EOL]     public void testIndexOfIgnoreCase_String() { [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, null)); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase(null, "")); [EOL]         assertEquals(-1, StringUtils.indexOfIgnoreCase("", null)); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("", "")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "a")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "A")); [EOL]         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "b")); [EOL]         assertEquals(2, StringUtils.indexOfIgnoreCase("aabaabaa", "B")); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "ab")); [EOL]         assertEquals(1, StringUtils.indexOfIgnoreCase("aabaabaa", "AB")); [EOL]         assertEquals(0, StringUtils.indexOfIgnoreCase("aabaabaa", "")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL
@Test [EOL]     public void testAnd_object_validInput_2items() { [EOL]         assertTrue( [EOL]             "False result for (true, true)", [EOL]             BooleanUtils [EOL]             .and(new Boolean[] { Boolean.TRUE, Boolean.TRUE }) [EOL]             .booleanValue()); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, false)", [EOL]             ! BooleanUtils [EOL]             .and(new Boolean[] { Boolean.FALSE, Boolean.FALSE }) [EOL]             .booleanValue()); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (true, false)", [EOL]             ! BooleanUtils [EOL]             .and(new Boolean[] { Boolean.TRUE, Boolean.FALSE }) [EOL]             .booleanValue()); [EOL]          [EOL]         assertTrue( [EOL]             "True result for (false, true)", [EOL]             ! BooleanUtils [EOL]             .and(new Boolean[] { Boolean.FALSE, Boolean.TRUE }) [
@Test [EOL]     public void testAbove() { [EOL]         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL]     } [EOL]  [EOL]     // See LANG-617 [EOL]
@Test [EOL]     public void testUnescapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.unescapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.unescapeCsv("\uD800\uDC00")); [EOL]         assertEquals("\uD834\uDD1E", StringEscapeUtils.unescapeCsv("\uD834\uDD1E")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeCsv("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml3("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.unescapeHtml4("\uDBFF\uDFFD")); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@code appendIfMissing}. [EOL]      */ [EOL]
@Test [EOL]     public void testLastIndexOfByte() { [EOL]         byte[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         array = new byte[] { 0, 1, 2, 3, 0 }; [EOL]         assertEquals(4, ArrayUtils.lastIndexOf(array, (byte) 0)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, (byte) 1)); [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, (byte) 2)); [EOL]         assertEquals(3, ArrayUtils.lastIndexOf(array, (byte) 3)); [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, (byte) 99)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetUserDir() { [EOL]         final File dir = SystemUtils.getUserDir(); [EOL]         Assert.assertNotNull(dir); [EOL]         Assert.assertTrue(dir.exists()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Assums no security manager exists. [EOL]      */ [EOL]
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]  [EOL]         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals(Boolean.FALSE.toString(), new MutableBoolean(false).toString()); [EOL]         assertEquals(Boolean.TRUE.toString(), new MutableBoolean(true).toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testGetSet() { [EOL]         final MutableDouble mutNum = new MutableDouble(0d); [EOL]         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]          [EOL]         mutNum.setValue(1); [EOL]         assertEquals(1d, mutNum.doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(1d), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(Double.valueOf(2d)); [EOL]         assertEquals(2d, mutNum.doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(2d), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(new MutableDouble(3d)); [EOL]         assertEquals(3d, mutNum.doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(3d), mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeExactConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, (Object[]) null).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(double)", ConstructorUtils.invokeExactConstructor( [EOL]                 TestBean.class, new Object[] { NumberUtils.DOUBLE_ONE }, [EOL]                 new Class[] { Double.TYPE }).toString()); [EOL]  [EOL]         try { [EOL]             ConstructorUtils.invokeEx
@Test [EOL]     public void testDoubleArray() { [EOL]         double[] array = new double[] {1.0, 2.9876, -3.00001, 4.3}; [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("cast") [EOL]     public void testRemoveElementDoubleArray() { [EOL]         double[] array; [EOL]         array = ArrayUtils.removeElements((double[]) null, (double) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_DOUBLE_ARRAY, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_DOUBLE_ARRAY, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new double[] { 1, 2, 1 }, (double) 1); [EOL]         assertTrue(Arrays.equals(new double[] { 2, 1 }, array)); [EOL]         assertEquals(Double.TYPE, array.getClass().getComponentType()); [
@Test [EOL]     public void testMaxInt() { [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 1", [EOL]             5, [EOL]             NumberUtils.max(new int[] { 5 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 2", [EOL]             9, [EOL]             NumberUtils.max(new int[] { 6, 9 })); [EOL]  [EOL]         assertEquals( [EOL]             "max(int[]) failed for array length 5", [EOL]             10, [EOL]             NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new int[] { -10, -5, 0, 5, 10 })); [EOL]         assertEquals(10, NumberUtils.max(new int[] { -5, 0, 10, 5, -10 })); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testIterator() { [EOL]         final CharRange a = CharRange.is('a'); [EOL]         final CharRange ad = CharRange.isIn('a', 'd'); [EOL]         final CharRange nota = CharRange.isNot('a'); [EOL]         final CharRange emptySet = CharRange.isNotIn((char) 0, Character.MAX_VALUE); [EOL]         final CharRange notFirst = CharRange.isNotIn((char) 1, Character.MAX_VALUE); [EOL]         final CharRange notLast = CharRange.isNotIn((char) 0, (char) (Character.MAX_VALUE - 1)); [EOL]  [EOL]         final Iterator<Character> aIt = a.iterator(); [EOL]         assertNotNull(aIt); [EOL]         assertTrue(aIt.hasNext()); [EOL]         assertEquals(Character.valueOf('a'), aIt.next()); [EOL]         assertFalse(aIt.hasNext()); [EOL]  [EOL]         final Iterator<Character> adIt = ad.iterator(); [EOL]         assertNotNull(adIt); [EOL]         assertTrue(adIt.hasNext()); [EOL]         assertEquals(Character.valueOf('a'), adIt.next()); [EOL]         assertEquals(Character.valueOf('b'), adIt.next()); [EOL]         assertEquals(Character.valueOf('c'), adIt.next()); [EOL]         assertEquals(Character.valueOf
@Test [EOL]     public void testJoin_IteratorChar() { [EOL]         assertEquals(null, StringUtils.join((Iterator<?>) null, ',')); [EOL]         assertEquals(TEXT_LIST_CHAR, StringUtils.join(Arrays.asList(ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST).iterator(), SEPARATOR_CHAR)); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo").iterator(), 'x')); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortDateStyleWithLocales() { [EOL]         final Locale usLocale = Locale.US; [EOL]         final Locale swedishLocale = new Locale("sv", "SE"); [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2004, 1, 3); [EOL]         DatePrinter fdf = getDateInstance(FastDateFormat.SHORT, usLocale); [EOL]         assertEquals("2/3/04", fdf.format(cal)); [EOL]  [EOL]         fdf = getDateInstance(FastDateFormat.SHORT, swedishLocale); [EOL]         assertEquals("2004-02-03", fdf.format(cal)); [EOL]  [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests that pre-1000AD years get padded with yyyy [EOL]      */ [EOL]
@Test [EOL]     public void testTSV() { [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArray() { [EOL]         final byte[] obj1 = new byte[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         final byte[] obj2 = new byte[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         final byte[] obj3 = new byte[3]; [EOL]         obj3[0] = 5; [EOL]         obj3[1] = 6; [EOL]         obj3[2] = 7; [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         obj1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]         assertTrue(new CompareToBuilder().append(obj2, obj1).toComparison() < 0); [EOL]  [EOL]         assertTrue(new CompareToBuilder().append(obj1, null).
@Test [EOL]     public void test_getInstance_String_TimeZone_Locale() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(TimeZone.getTimeZone("America/New_York")); [EOL]  [EOL]             final FastDateFormat format1 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getTimeZone("Atlantic/Reykjavik"), Locale.GERMANY); [EOL]             final FastDateFormat format2 = FastDateFormat.getInstance("MM/DD/yyyy", Locale.GERMANY); [EOL]             final FastDateFormat format3 = FastDateFormat.getInstance("MM/DD/yyyy", [EOL]                     TimeZone.getDefault(), Locale.GERMANY); [EOL]  [EOL]             assertTrue(format1 != format2); // -- junit 3.8 version -- assertNotSame(format1, format2); [EOL]             assertEquals(TimeZone.getTimeZone("Atlantic/Reykjavik"), format1.getTimeZone()); [EOL]             assertEquals(TimeZone.getDefault(), format2.getTimeZone()); [EOL]          
@Test [EOL]     public void testAddObjectArrayFloat() { [EOL]         float[] newArray; [EOL]         newArray = ArrayUtils.add((float[])null, 0); [EOL]         assertTrue(Arrays.equals(new float[]{0}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add((float[])null, 1); [EOL]         assertTrue(Arrays.equals(new float[]{1}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         final float[] array1 = new float[]{1, 2, 3}; [EOL]         newArray = ArrayUtils.add(array1, 0); [EOL]         assertTrue(Arrays.equals(new float[]{1, 2, 3, 0}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(array1, 4); [EOL]         assertTrue(Arrays.equals(new float[]{1, 2, 3, 4}, newArray)); [EOL]         assertEquals(Float.TYPE, newArray.getClass().getComponentType()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test [EOL]     public void testLong() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append(3L).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", 3L).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", 3L).append("b", 4L).toString()); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") // cast is not really needed, keep for consistency [EOL]
@Test [EOL]     public void testAddObjectAtIndex() { [EOL]         Object[] newArray; [EOL]         newArray = ArrayUtils.add((Object[])null, 0, "a"); [EOL]         assertTrue(Arrays.equals(new String[]{"a"}, newArray)); [EOL]         assertTrue(Arrays.equals(new Object[]{"a"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         newArray = ArrayUtils.add(stringArray1, 0, null); [EOL]         assertTrue(Arrays.equals(new String[]{null, "a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 1, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", null, "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.add(stringArray1, 3, null); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", null}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUt
@Test [EOL]     public void testGetContextEntries() { [EOL]         assertEquals(5, exceptionContext.getContextEntries().size()); [EOL]          [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]  [EOL]         final List<Pair<String, Object>> entries = exceptionContext.getContextEntries(); [EOL]         assertEquals(6, entries.size()); [EOL]         assertEquals("test1", entries.get(0).getKey()); [EOL]         assertEquals("test2", entries.get(1).getKey()); [EOL]         assertEquals("test Date", entries.get(2).getKey()); [EOL]         assertEquals("test Nbr", entries.get(3).getKey()); [EOL]         assertEquals("test Poorly written obj", entries.get(4).getKey()); [EOL]         assertEquals("test2", entries.get(5).getKey()); [EOL]     } [EOL]      [EOL]
@Test(expected = NullPointerException.class) [EOL]     public void testComparatorMedian_nullComparator() { [EOL]         ObjectUtils.median((Comparator<CharSequence>) null, new NonComparableCharSequence("foo")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDoubleArrayAsObject() { [EOL]         final double[] obj = new double[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5.4d; [EOL]         final long l1 = Double.doubleToLongBits(5.4d); [EOL]         final int h1 = (int) (l1 ^ l1 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6.3d; [EOL]         final long l2 = Double.doubleToLongBits(6.3d); [EOL]         final int h2 = (int) (l2 ^ l2 >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test(expected=NullPointerException.class) [EOL]     public void testAddNullListener() [EOL]     { [EOL]         final EventListenerSupport<VetoableChangeListener> listenerSupport = EventListenerSupport.create(VetoableChangeListener.class); [EOL]         listenerSupport.addListener(null); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL
@Test [EOL]     public void testBuilderReset() { [EOL]         final ThreadFactory wrappedFactory = EasyMock.createMock(ThreadFactory.class); [EOL]         final Thread.UncaughtExceptionHandler exHandler = EasyMock [EOL]                 .createMock(Thread.UncaughtExceptionHandler.class); [EOL]         EasyMock.replay(wrappedFactory, exHandler); [EOL]         builder.namingPattern(PATTERN).daemon(true).priority( [EOL]                 Thread.MAX_PRIORITY).uncaughtExceptionHandler(exHandler) [EOL]                 .wrappedFactory(wrappedFactory); [EOL]         builder.reset(); [EOL]         final BasicThreadFactory factory = builder.build(); [EOL]         checkFactoryDefaults(factory); [EOL]         assertNotSame("Wrapped factory not reset", wrappedFactory, factory [EOL]                 .getWrappedFactory()); [EOL]         EasyMock.verify(wrappedFactory, exHandler); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests whether reset() is automatically called after build(). [EOL]      */ [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testWrap_StringIntStringBoolean() { [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", false)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, "\n", true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, 20, null, false)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, true)); [EOL]         assertEquals(null, WordUtils.wrap(null, -1, null, false)); [EOL]          [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, "\n", true)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", 20, null, true)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, false)); [EOL]         assertEquals("", WordUtils.wrap("", -1, null, true)); [EOL]          [EOL]         // normal [EOL]         String input = "Here is one line of text that is going to be wrapped after 20 columns."; [EOL]         String expected = "Here is one line of\
@Test [EOL]     public void test_toStringTrueFalse_Boolean() { [EOL]         assertEquals(null, BooleanUtils.toStringTrueFalse((Boolean) null)); [EOL]         assertEquals("true", BooleanUtils.toStringTrueFalse(Boolean.TRUE)); [EOL]         assertEquals("false", BooleanUtils.toStringTrueFalse(Boolean.FALSE)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testSetNullText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setNullText(null); [EOL]         assertEquals("", style.getNullText()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testEquals() { [EOL]         final DateParser parser1= getInstance(YMD_SLASH); [EOL]         final DateParser parser2= getInstance(YMD_SLASH); [EOL]  [EOL]         assertEquals(parser1, parser2); [EOL]         assertEquals(parser1.hashCode(), parser2.hashCode()); [EOL]  [EOL]         assertFalse(parser1.equals(new Object())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTSV() { [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE)); [EOL]         this.testXSVAbc(StrTokenizer.getTSVInstance(TSV_SIMPLE_FIXTURE.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     
@Test [EOL]     public void testContextedException() { [EOL]         exceptionContext = new ContextedException(); [EOL]         final String message = exceptionContext.getMessage(); [EOL]         final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]         assertTrue(trace.indexOf("ContextedException")>=0); [EOL]         assertTrue(StringUtils.isEmpty(message)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture
@Test [EOL]     public void testAsTokenizer() throws Exception { [EOL]         // from Javadoc [EOL]         final StrBuilder b = new StrBuilder(); [EOL]         b.append("a b "); [EOL]         final StrTokenizer t = b.asTokenizer(); [EOL]          [EOL]         final String[] tokens1 = t.getTokenArray(); [EOL]         assertEquals(2, tokens1.length); [EOL]         assertEquals("a", tokens1[0]); [EOL]         assertEquals("b", tokens1[1]); [EOL]         assertEquals(2, t.size()); [EOL]          [EOL]         b.append("c d "); [EOL]         final String[] tokens2 = t.getTokenArray(); [EOL]         assertEquals(2, tokens2.length); [EOL]         assertEquals("a", tokens2[0]); [EOL]         assertEquals("b", tokens2[1]); [EOL]         assertEquals(2, t.size()); [EOL]         assertEquals("a", t.next()); [EOL]         assertEquals("b", t.next()); [EOL]          [EOL]         t.reset(); [EOL]         final String[] tokens3 = t.getTokenArray(); [EOL]         assertEquals(4, tokens3.length);
@Test [EOL]     public void testHexToShort() { [EOL]         final String src = "CDF1F0C10F12345678"; [EOL]         assertEquals((short)0x0000, Conversion.hexToShort(src, 0, (short)0, 0, 0)); [EOL]         assertEquals((short)0x000C, Conversion.hexToShort(src, 0, (short)0, 0, 1)); [EOL]         assertEquals((short)0x1FDC, Conversion.hexToShort(src, 0, (short)0, 0, 4)); [EOL]         assertEquals((short)0xF1FD, Conversion.hexToShort(src, 1, (short)0, 0, 4)); [EOL]         assertEquals((short)0x1234, Conversion.hexToShort(src, 0, (short)0x1234, 0, 0)); [EOL]         assertEquals((short)0x8764, Conversion.hexToShort(src, 15, (short)0x1234, 4, 3)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#hexToByte(String, int, byte, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetSetPrefix() { [EOL]         final StrSubstitutor sub = new StrSubstitutor(); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         sub.setVariablePrefix('<'); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.CharMatcher); [EOL]  [EOL]         sub.setVariablePrefix("<<"); [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]         try { [EOL]             sub.setVariablePrefix((String) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             // expected [EOL]         } [EOL]         assertTrue(sub.getVariablePrefixMatcher() instanceof StrMatcher.StringMatcher); [EOL]  [EOL]         final StrMatcher matcher = StrMatcher.commaMatcher(); [EOL]         sub.setVariablePrefixMatcher(matcher); [EOL]         assertSame(matcher, sub.getVariablePrefixMatcher()); [EOL]         try { [EOL]             sub.setVariablePrefixMatcher((StrMatcher) null); [EOL]             fail(); [EOL]     
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]          
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIntToShortArray() { [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 100, new short[]{}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{}, Conversion.intToShortArray(0x00000000, 0, new short[]{}, 100, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0xFFFF, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 0)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x5678, (short)0xFFFF, (short)0xFFFF, (short)0xFFFF}, [EOL]             Conversion.intToShortArray(0x12345678, 0, new short[]{-1, -1, -1, -1}, 0, 1)); [EOL]         assertArrayEquals( [EOL]             new short[]{(short)0x5678, (short)0x1234, (short)0xFFFF, (short)0xFFFF
@Test [EOL]     public void testOverlay_StringStringIntInt() { [EOL]         assertEquals(null, StringUtils.overlay(null, null, 2, 4)); [EOL]         assertEquals(null, StringUtils.overlay(null, null, -2, -4)); [EOL]          [EOL]         assertEquals("", StringUtils.overlay("", null, 0, 0)); [EOL]         assertEquals("", StringUtils.overlay("", "", 0, 0)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 0, 0)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", 2, 4)); [EOL]         assertEquals("zzzz", StringUtils.overlay("", "zzzz", -2, -4)); [EOL]          [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", null, 2, 4)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", null, 4, 2)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", "", 2, 4)); [EOL]         assertEquals("abef", StringUtils.overlay("abcdef", "", 4, 2)); [EOL]         assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz", 2, 4)); [EOL]         assertEquals("abzzzzef", StringUtils.overlay("abcdef", "zzzz
@Test [EOL]     public void testSetSummaryObjectEndText() { [EOL]         final ToStringStyle style = new ToStringStyleImpl(); [EOL]         style.setSummaryObjectEndText(null); [EOL]         assertEquals("", style.getSummaryObjectEndText()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * An object used to test {@link ToStringStyle}. [EOL]      *  [EOL]      */ [EOL]     static class Person { [EOL]         /** [EOL]          * Test String field. [EOL]          */ [EOL]         String name; [EOL]  [EOL]         /** [EOL]          * Test integer field. [EOL]          */ [EOL]         int age; [EOL]  [EOL]         /** [EOL]          * Test boolean field. [EOL]          */ [EOL]         boolean smoker; [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testStopWatchSuspend(){ [EOL]         final StopWatch watch = new StopWatch(); [EOL]         watch.start(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.suspend(); [EOL]         final long suspendTime = watch.getTime(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.resume(); [EOL]             try {Thread.sleep(550);} catch (final InterruptedException ex) {} [EOL]         watch.stop(); [EOL]         final long totalTime = watch.getTime(); [EOL]          [EOL]         assertTrue(suspendTime >= 500); [EOL]         assertTrue(suspendTime < 700); [EOL]         assertTrue(totalTime >= 1000); [EOL]         assertTrue(totalTime < 1300); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReplaceNull() { [EOL]         doTestNoReplace(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests replace with null. [EOL]      */ [EOL]
@Test [EOL]     public void test_getShortClassName_Object() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortClassName(new ClassUtils(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]         assertEquals("String", ClassUtils.getShortClassName("hello", "<null>")); [EOL]         assertEquals("<null>", ClassUtils.getShortClassName(null, "<null>")); [EOL]  [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.1", ClassUtils.getShortClassName(new Object(){}, "<null>")); [EOL]         assertEquals("ClassUtilsTest.1Named", ClassUtils.getShortClassName(new Named(), "<null>")); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortClassName(new Inner(), "<null>")); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testLang381() { [EOL]         assertTrue(Double.isNaN(NumberUtils.min(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Double.isNaN(NumberUtils.max(1.2, 2.5, Double.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.min(1.2f, 2.5f, Float.NaN))); [EOL]         assertTrue(Float.isNaN(NumberUtils.max(1.2f, 2.5f, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(a))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(a))); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertTrue(Double.isNaN(NumberUtils.max(b))); [EOL]         assertTrue(Double.isNaN(NumberUtils.min(b))); [EOL]  [EOL]         final float[] aF = new float[] { 1.2f, Float.NaN, 3.7f, 27.0f, 42.0f, Float.NaN }; [EOL]         assertTrue(Float.isNaN(NumberUtils.max
@Test [EOL]     public void testContextedException() { [EOL]         exceptionContext = new ContextedException(); [EOL]         final String message = exceptionContext.getMessage(); [EOL]         final String trace = ExceptionUtils.getStackTrace(exceptionContext); [EOL]         assertTrue(trace.indexOf("ContextedException")>=0); [EOL]         assertTrue(StringUtils.isEmpty(message)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testReplaceFirst_char_char() { [EOL]         final StrBuilder sb = new StrBuilder("abcbccba"); [EOL]         sb.replaceFirst('x', 'y'); [EOL]         assertEquals("abcbccba", sb.toString()); [EOL]         sb.replaceFirst('a', 'd'); [EOL]         assertEquals("dbcbccba", sb.toString()); [EOL]         sb.replaceFirst('b', 'e'); [EOL]         assertEquals("decbccba", sb.toString()); [EOL]         sb.replaceFirst('c', 'f'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]         sb.replaceFirst('d', 'd'); [EOL]         assertEquals("defbccba", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testOneArgNull() { [EOL]         assertFalse(AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), null)); [EOL]         assertFalse(AnnotationUtils.equals(null, field1.getAnnotation(TestAnnotation.class))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testWrappersToPrimitivesNull() { [EOL] //        assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives(null)); // generates warning [EOL]         assertNull("Wrong result for null input", ClassUtils.wrappersToPrimitives((Class<?>[]) null)); // equivalent cast [EOL]         // Other possible casts for null [EOL]         assertTrue("empty -> empty", Arrays.equals(ArrayUtils.EMPTY_CLASS_ARRAY, ClassUtils.wrappersToPrimitives())); [EOL]         final Class<?>[] castNull = ClassUtils.wrappersToPrimitives((Class<?>)null); // == new Class<?>[]{null} [EOL]         assertTrue("(Class<?>)null -> [null]", Arrays.equals(new Class<?>[]{null}, castNull)); [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testSubarrayBoolean() { [EOL]         final boolean[] nullArray = null; [EOL]         final boolean[] array = { true, true, false, true, false, true }; [EOL]         final boolean[] leftSubarray  = { true, true, false, true  }; [EOL]         final boolean[] midSubarray   = { true, false, true, false }; [EOL]         final boolean[] rightSubarray = { false, true, false, true }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             ArrayUtils.isEquals(rightSubarray, [EOL]              
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void testByteArrayHiddenByObject() { [EOL]         final byte[] array1 = new byte[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final byte[] array2 = new byte[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final byte[] array3 = new byte[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     
@Test [EOL]     public void testIntegerWithTransients() { [EOL]         testInteger(true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testUncapitalizeWithDelimiters_String() { [EOL]         assertEquals(null, WordUtils.uncapitalize(null, null)); [EOL]         assertEquals("", WordUtils.uncapitalize("", new char[0])); [EOL]         assertEquals("  ", WordUtils.uncapitalize("  ", new char[0])); [EOL]          [EOL]         char[] chars = new char[] { '-', '+', ' ', '@' }; [EOL]         assertEquals("i", WordUtils.uncapitalize("I", chars) ); [EOL]         assertEquals("i", WordUtils.uncapitalize("i", chars) ); [EOL]         assertEquals("i am-here+123", WordUtils.uncapitalize("i am-here+123", chars) ); [EOL]         assertEquals("i+am here-123", WordUtils.uncapitalize("I+Am Here-123", chars) ); [EOL]         assertEquals("i-am+hERE 123", WordUtils.uncapitalize("i-am+HERE 123", chars) ); [EOL]         assertEquals("i aM-hERE+123", WordUtils.uncapitalize("I AM-HERE+123", chars) ); [EOL]         chars = new char[] {'.'}; [EOL]         assertEquals("i AM.fINE", WordUtils.uncapitalize("I AM.FINE", chars) ); [EOL]         assertEquals("i aM.FINE", WordUtils.uncapitalize("I AM.FINE", null) ); [EOL]
@Test [EOL]     public void testRemoveElementCharArray() { [EOL]         char[] array; [EOL]         array = ArrayUtils.removeElements((char[]) null, 'a'); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_CHAR_ARRAY, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_CHAR_ARRAY, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new char[] { 'a', 'b', 'a' }, 'a'); [EOL]         assertTrue(Arrays.equals(new char[] { 'b', 'a' }, array)); [EOL]         assertEquals(Character.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = Array
@Test [EOL]     public void testDoubleArrayHiddenByObject() { [EOL]         final double[] array1 = new double[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final double[] array2 = new double[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final double[] array3 = new double[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     
@Test [EOL]     public void testSerializeStreamUnserializable() throws Exception { [EOL]         final ByteArrayOutputStream streamTest = new ByteArrayOutputStream(); [EOL]         try { [EOL]             iMap.put(new Object(), new Object()); [EOL]             SerializationUtils.serialize(iMap, streamTest); [EOL]         } catch (final SerializationException ex) { [EOL]             return; [EOL]         } [EOL]         fail(); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_toBoolean_String() { [EOL]         assertFalse(BooleanUtils.toBoolean((String) null)); [EOL]         assertFalse(BooleanUtils.toBoolean("")); [EOL]         assertFalse(BooleanUtils.toBoolean("off")); [EOL]         assertFalse(BooleanUtils.toBoolean("oof")); [EOL]         assertFalse(BooleanUtils.toBoolean("yep")); [EOL]         assertFalse(BooleanUtils.toBoolean("trux")); [EOL]         assertFalse(BooleanUtils.toBoolean("false")); [EOL]         assertFalse(BooleanUtils.toBoolean("a")); [EOL]         assertTrue(BooleanUtils.toBoolean("true")); // interned handled differently [EOL]         assertTrue(BooleanUtils.toBoolean(new StringBuffer("tr").append("ue").toString())); [EOL]         assertTrue(BooleanUtils.toBoolean("truE")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUe")); [EOL]         assertTrue(BooleanUtils.toBoolean("trUE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRue")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRuE")); [EOL]         assertTrue(BooleanUtils.toBoolean("tRUe")); [EOL]         assertTrue
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testSubstringAfter_StringString() { [EOL]         assertEquals("barXXbaz", StringUtils.substringAfter("fooXXbarXXbaz", "XX")); [EOL]          [EOL]         assertEquals(null, StringUtils.substringAfter(null, null)); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "")); [EOL]         assertEquals(null, StringUtils.substringAfter(null, "XX")); [EOL]         assertEquals("", StringUtils.substringAfter("", null)); [EOL]         assertEquals("", StringUtils.substringAfter("", "")); [EOL]         assertEquals("", StringUtils.substringAfter("", "XX")); [EOL]          [EOL]         assertEquals("", StringUtils.substringAfter("foo", null)); [EOL]         assertEquals("ot", StringUtils.substringAfter("foot", "o")); [EOL]         assertEquals("bc", StringUtils.substringAfter("abc", "a")); [EOL]         assertEquals("cba", StringUtils.substringAfter("abcba", "b")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "c")); [EOL]         assertEquals("abc", StringUtils.substringAfter("abc", "")); [EOL]         assertEquals("", StringUtils.substringAfter("abc", "d")); [EOL]     } [E
@Test [EOL]     public void test_getPackageName_String() { [EOL]         assertEquals("org.apache.commons.lang3", ClassUtils.getPackageName(ClassUtils.class.getName())); [EOL]         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class.getName())); [EOL]         assertEquals("", ClassUtils.getPackageName((String)null)); [EOL]         assertEquals("", ClassUtils.getPackageName("")); [EOL]     } [EOL]  [EOL]     // ------------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReflectionHashCode() { [EOL]         assertEquals(17 * 37, HashCodeBuilder.reflectionHashCode(new TestObject(0))); [EOL]         assertEquals(17 * 37 + 123456, HashCodeBuilder.reflectionHashCode(new TestObject(123456))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testJoin_ArrayOfShorts() { [EOL]         assertEquals(null, StringUtils.join((short[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(SHORT_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testLeftString() { [EOL]         final StrBuilder sb = new StrBuilder("left right"); [EOL]         assertEquals("left", sb.leftString(4)); [EOL]         assertEquals("", sb.leftString(0)); [EOL]         assertEquals("", sb.leftString(-5)); [EOL]         assertEquals("left right", sb.leftString(15)); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testShortArrayArray() { [EOL]         short[][] array = new short[][] {{1, 2}, null, {5}}; [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL
@Test [EOL]     public void testToIntValue_Character() { [EOL]         assertEquals(0, CharUtils.toIntValue(new Character('0'))); [EOL]         assertEquals(3, CharUtils.toIntValue(new Character('3'))); [EOL]         try { [EOL]             CharUtils.toIntValue(null); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]         try { [EOL]             CharUtils.toIntValue(CHARACTER_A); [EOL]         } catch (final IllegalArgumentException ex) {} [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testAppend_StrBuilder() { [EOL]         StrBuilder sb = new StrBuilder(); [EOL]         sb.setNullText("NULL").append((StrBuilder) null); [EOL]         assertEquals("NULL", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(); [EOL]         sb.append(new StrBuilder("foo")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("")); [EOL]         assertEquals("foo", sb.toString()); [EOL]  [EOL]         sb.append(new StrBuilder("bar")); [EOL]         assertEquals("foobar", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getShortCanonicalName_String() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("[[Lorg.apache.commons.lang3.ClassUtils;")); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[]")); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtils[][]")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("[I")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("[[I")); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName("int[]")); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName("int[][]")); [EOL]          [EOL]         // Inner types [EOL]         assertEquals("ClassUtilsTest.6", ClassUtils.getShortCanonicalName("org.apache.commons.lang3.ClassUtilsTest$6")); [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test [EOL]     public void testLeft_String() { [EOL]         assertSame(null, StringUtils.left(null, -1)); [EOL]         assertSame(null, StringUtils.left(null, 0)); [EOL]         assertSame(null, StringUtils.left(null, 2)); [EOL]          [EOL]         assertEquals("", StringUtils.left("", -1)); [EOL]         assertEquals("", StringUtils.left("", 0)); [EOL]         assertEquals("", StringUtils.left("", 2)); [EOL]          [EOL]         assertEquals("", StringUtils.left(FOOBAR, -1)); [EOL]         assertEquals("", StringUtils.left(FOOBAR, 0)); [EOL]         assertEquals(FOO, StringUtils.left(FOOBAR, 3)); [EOL]         assertSame(FOOBAR, StringUtils.left(FOOBAR, 80)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void test_generateBitVectors() { [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.noneOf(Traffic.class)), 0L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED)), 1L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER)), 2L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.GREEN)), 4L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER)), 3L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.GREEN)), 5L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.AMBER, Traffic.GREEN)), 6L); [EOL]         assertArrayEquals(EnumUtils.generateBitVectors(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)), 7L); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL
@Test [EOL]     public void testContainsNone_String() { [EOL]         final String str1 = "a"; [EOL]         final String str2 = "b"; [EOL]         final String str3 = "ab."; [EOL]         final String chars1= "b"; [EOL]         final String chars2= "."; [EOL]         final String chars3= "cd"; [EOL]         assertTrue(StringUtils.containsNone(null, (String) null)); [EOL]         assertTrue(StringUtils.containsNone("", (String) null)); [EOL]         assertTrue(StringUtils.containsNone(null, "")); [EOL]         assertTrue(StringUtils.containsNone(str1, "")); [EOL]         assertTrue(StringUtils.containsNone("", "")); [EOL]         assertTrue(StringUtils.containsNone("", chars1)); [EOL]         assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]         assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]         assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]         assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]         assertTrue(StringUtils.containsNone(str2, chars2)); [EOL]         assertTrue(StringUtils.containsNone(str2, chars3)); [EOL]         assert
@Test(timeout = 666000) [EOL]     public void testToString() throws Exception { [EOL]         final Test testAnno = getClass().getDeclaredMethod("testToString") [EOL]                 .getAnnotation(Test.class); [EOL]         final String toString = AnnotationUtils.toString(testAnno); [EOL]         assertTrue(toString.startsWith("@org.junit.Test(")); [EOL]         assertTrue(toString.endsWith(")")); [EOL]         assertTrue(toString.contains("expected=class org.junit.Test$None")); [EOL]         assertTrue(toString.contains("timeout=666000")); [EOL]         assertTrue(toString.contains(", ")); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLastIndexOfIgnoreCase_StringInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, null, -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase(null, "", -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", null, -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("", "", -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("", "", 9)); [EOL]         assertEquals(0, StringUtils.lastIndexOfIgnoreCase("abc", "", 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOfIgnoreCase("abc", "", -1)); [EOL]         assertEquals(3, StringUtils.lastIndexOfIgnoreCase("abc", "", 9)); [EOL]         assertEquals(7, StringUtils.lastIndexOfIgnoreCase("aabaabaa", "A", 8)); [EOL]         assertEquals
@Test [EOL]     public void testEnforceExceptions() { [EOL]         try { [EOL]             IEEE754rUtils.min( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max( (float[]) null); [EOL]             fail("IllegalArgumentException expected for null input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.max(new float[0]); [EOL]             fail("IllegalArgumentException expected for empty input"); [EOL]         } catch(final IllegalArgumentException iae) { /* expected */ } [EOL]  [EOL]         try { [EOL]             IEEE754rUtils.min( (double[]) null); [EOL]             fail
@Test [EOL]     public void testReplace_StrMatcher_String_int_int_int_VaryEndIndex() { [EOL]         StrBuilder sb = new StrBuilder("aaxaaaayaa"); [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 0, -1); [EOL]         assertEquals("aaxaaaayaa", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("aaxaaaayaa"); [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 2, -1); [EOL]         assertEquals("-xaaaayaa", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("aaxaaaayaa"); [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 3, -1); [EOL]         assertEquals("-xaaaayaa", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("aaxaaaayaa"); [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-", 0, 4, -1); [EOL]         assertEquals("-xaaaayaa", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("aaxaaaayaa"); [EOL]         sb.replace(StrMatcher.stringMatcher("aa"), "-",
@Test [EOL]     public void testIntArrayHiddenByObject() { [EOL]         final int[] array1 = new int[2]; [EOL]         array1[0] = 5; [EOL]         array1[1] = 6; [EOL]         final int[] array2 = new int[2]; [EOL]         array2[0] = 5; [EOL]         array2[1] = 6; [EOL]         final int[] array3 = new int[3]; [EOL]         array3[0] = 5; [EOL]         array3[1] = 6; [EOL]         array3[2] = 7; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         final Object obj3 = array3; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj3).toComparison() < 0); [EOL]         assertTrue(new CompareToBuilder().append(obj3, obj1).toComparison() > 0); [EOL]  [EOL]         array1[1] = 7; [EOL]         assertTrue(new CompareToBuilder().append(obj1, obj2).toComparison() > 0); [EOL]     
@Test [EOL]     public void testLang865() { [EOL]         assertValidToLocale("_GB", "", "GB", ""); [EOL]         assertValidToLocale("_GB_P", "", "GB", "P"); [EOL]         assertValidToLocale("_GB_POSIX", "", "GB", "POSIX"); [EOL]         try { [EOL]             LocaleUtils.toLocale("_G"); [EOL]             fail("Must be at least 3 chars if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_Gb"); [EOL]             fail("Must be uppercase if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_gB"); [EOL]             fail("Must be uppercase if starts with underscore"); [EOL]         } catch (final IllegalArgumentException iae) { [EOL]         } [EOL]         try { [EOL]             LocaleUtils.toLocale("_1B"); [EOL]             fail("Must be letter
@Test [EOL]     public void testByte() { [EOL]         assertEquals(baseStr + "[3]", new ToStringBuilder(base).append((byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3]", new ToStringBuilder(base).append("a", (byte) 3).toString()); [EOL]         assertEquals(baseStr + "[a=3,b=4]", new ToStringBuilder(base).append("a", (byte) 3).append("b", (byte) 4).toString()); [EOL]     } [EOL]  [EOL]     @SuppressWarnings("cast") [EOL]
@Test [EOL]     public void testEquals() { [EOL]         final StrBuilder sb1 = new StrBuilder(); [EOL]         final StrBuilder sb2 = new StrBuilder(); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals(sb1)); [EOL]         assertTrue(sb2.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb1.append("abc"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.append("ABC"); [EOL]         assertFalse(sb1.equals(sb2)); [EOL]         assertFalse(sb1.equals((Object) sb2)); [EOL]          [EOL]         sb2.clear().append("abc"); [EOL]         assertTrue(sb1.equals(sb2)); [EOL]         assertTrue(sb1.equals((Object) sb2)); [EOL]          [EOL]         assertFalse(sb1.equals(Integer.valueOf(1))); [EOL]         assertFalse(sb1.equals("abc")); [EOL]     } [EOL]  [E
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void testAbbreviate_StringInt() { [EOL]         assertEquals(null, StringUtils.abbreviate(null, 10)); [EOL]         assertEquals("", StringUtils.abbreviate("", 10)); [EOL]         assertEquals("short", StringUtils.abbreviate("short", 10)); [EOL]         assertEquals("Now is ...", StringUtils.abbreviate("Now is the time for all good men to come to the aid of their party.", 10)); [EOL]  [EOL]         final String raspberry = "raspberry peach"; [EOL]         assertEquals("raspberry p...", StringUtils.abbreviate(raspberry, 14)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 15)); [EOL]         assertEquals("raspberry peach", StringUtils.abbreviate("raspberry peach", 16)); [EOL]         assertEquals("abc...", StringUtils.abbreviate("abcdefg", 6)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 7)); [EOL]         assertEquals("abcdefg", StringUtils.abbreviate("abcdefg", 8)); [EOL]         assertEquals("a...", StringUtils.abbreviate("abcdefg", 4)); [EOL]         assertEquals("", StringUtils.abbreviate("", 4)); [EOL]          [EOL]         try { [EOL]        
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testGetLevenshteinDistance_StringString() { [EOL]         assertEquals(0, StringUtils.getLevenshteinDistance("", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("", "a") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("aaapppp", "") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("frog", "fog") ); [EOL]         assertEquals(3, StringUtils.getLevenshteinDistance("fly", "ant") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("elephant", "hippo") ); [EOL]         assertEquals(7, StringUtils.getLevenshteinDistance("hippo", "elephant") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("hippo", "zzzzzzzz") ); [EOL]         assertEquals(8, StringUtils.getLevenshteinDistance("zzzzzzzz", "hippo") ); [EOL]         assertEquals(1, StringUtils.getLevenshteinDistance("hello", "hallo") ); [EOL]         try { [EOL]             @SuppressWarnings("unused") [EOL]             final [EOL]             int d = StringUtils.getLevenshteinDistance("a", null); [EOL]             fail
@Test [EOL]     public void testIndexOfBooleanWithStartIndex() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, true, 2)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.indexOf(array, true, 1)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, 2)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, false, 0)); [EOL]         assertEquals(1, ArrayUtils.indexOf(array, false, -1)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, 0)); [EOL]         assertEquals(-1, ArrayUtils.indexOf(array, false, -1)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSetContextValue() { [EOL]         exceptionContext.addContextValue("test2", "different value"); [EOL]         exceptionContext.setContextValue("test3", "3"); [EOL]  [EOL]         final String message = exceptionContext.getFormattedExceptionMessage(TEST_MESSAGE); [EOL]         assertTrue(message.indexOf(TEST_MESSAGE) >= 0); [EOL]         assertTrue(message.indexOf("test Poorly written obj") >= 0); [EOL]         assertTrue(message.indexOf("Crap") >= 0); [EOL]  [EOL]         assertTrue(exceptionContext.getFirstContextValue("crap") == null); [EOL]         assertTrue(exceptionContext.getFirstContextValue("test Poorly written obj") instanceof ObjectWithFaultyToString); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL]  [EOL]         assertTrue(exceptionContext.getContextLabels().contains("test Poorly written obj")); [EOL]         assertTrue(!exceptionContext.getContextLabels().contains("crap")); [EOL]  [EOL]         exceptionContext.setContextValue("test Poorly written obj", "replacement"); [EOL]  [EOL]         assertEquals(7, exceptionContext.getContextEntries().size()); [EOL]         assertEquals(6, exceptionContext.getContextLabels().size()); [EOL
@Test [EOL]     public void testAddWeeks() throws Exception { [EOL]         final Date base = new Date(MILLIS_TEST); [EOL]         Date result = DateUtils.addWeeks(base, 0); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 5, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addWeeks(base, 1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1); [EOL]         assertDate(result, 2000, 6, 12, 4, 3, 2, 1); [EOL]          [EOL]         result = DateUtils.addWeeks(base, -1); [EOL]         assertNotSame(base, result); [EOL]         assertDate(base, 2000, 6, 5, 4, 3, 2, 1);      // july [EOL]         assertDate(result, 2000, 5, 28, 4, 3, 2, 1);   // june [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void test_getShortCanonicalName_Class() { [EOL]         assertEquals("ClassUtils", ClassUtils.getShortCanonicalName(ClassUtils.class)); [EOL]         assertEquals("ClassUtils[]", ClassUtils.getShortCanonicalName(ClassUtils[].class)); [EOL]         assertEquals("ClassUtils[][]", ClassUtils.getShortCanonicalName(ClassUtils[][].class)); [EOL]         assertEquals("int[]", ClassUtils.getShortCanonicalName(int[].class)); [EOL]         assertEquals("int[][]", ClassUtils.getShortCanonicalName(int[][].class)); [EOL]          [EOL]         // Inner types [EOL]         class Named extends Object {} [EOL]         assertEquals("ClassUtilsTest.7", ClassUtils.getShortCanonicalName(new Object(){}.getClass())); [EOL]         assertEquals("ClassUtilsTest.6Named", ClassUtils.getShortCanonicalName(Named.class)); [EOL]         assertEquals("ClassUtilsTest.Inner", ClassUtils.getShortCanonicalName(Inner.class)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testNotBlankBlankStringWithWhitespacesShouldThrow() { [EOL]         //given [EOL]         final String string = "   "; [EOL]  [EOL]         try { [EOL]             //when [EOL]             Validate.notBlank(string); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException e) { [EOL]             //then [EOL]             assertEquals("The validated character sequence is blank", e.getMessage()); [EOL]         } [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testIdentityToString() { [EOL]         assertEquals(null, ObjectUtils.identityToString(null)); [EOL]         assertEquals( [EOL]             "java.lang.String@" + Integer.toHexString(System.identityHashCode(FOO)), [EOL]             ObjectUtils.identityToString(FOO)); [EOL]         final Integer i = Integer.valueOf(90); [EOL]         final String expected = "java.lang.Integer@" + Integer.toHexString(System.identityHashCode(i)); [EOL]         assertEquals(expected, ObjectUtils.identityToString(i)); [EOL]         final StringBuffer buffer = new StringBuffer(); [EOL]         ObjectUtils.identityToString(buffer, i); [EOL]         assertEquals(expected, buffer.toString()); [EOL]  [EOL]         try { [EOL]             ObjectUtils.identityToString(null, "tmp"); [EOL]             fail("NullPointerException expected"); [EOL]         } catch(final NullPointerException npe) { [EOL]         } [EOL]         try { [EOL]             ObjectUtils.identityToString(new StringBuffer(), null); [EOL]             fail("NullPointerException expected"); [EOL]         } catch(final NullPointerException npe)
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]  [EOL]         ExtendedMessageFormat other = null; [EOL]  [EOL]         // Same object [EOL]         assertTrue("same, equals()",   emf.equals(emf)); [EOL]         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]  [EOL]         // Equal Object [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertTrue("equal, equals()",   emf.equals(other)); [EOL]         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Class [EOL]         other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertFalse("class, equals()",  emf.equals(other)); [EOL]         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode
@Test [EOL]     public void testInsert() { [EOL]  [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.append("barbaz"); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         try { [EOL]             sb.insert(-1, FOO); [EOL]             fail("insert(-1, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         try { [EOL]             sb.insert(7, FOO); [EOL]             fail("insert(7, Object) expected StringIndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) { [EOL]             // expected [EOL]         } [EOL]  [EOL]         sb.insert(0, (Object) null); [EOL]         assertEquals("barbaz", sb.toString()); [EOL]  [EOL]         sb.insert(0, FOO); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]     
@Test [EOL]     public void testLastIndexOf_charInt() { [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf(null, ' ', -1)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', 0)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("", ' ', -1)); [EOL]         assertEquals(7, StringUtils.lastIndexOf("aabaabaa", 'a', 8)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 8)); [EOL]         assertEquals(2, StringUtils.lastIndexOf("aabaabaa", 'b', 3)); [EOL]         assertEquals(5, StringUtils.lastIndexOf("aabaabaa", 'b', 9)); [EOL]         assertEquals(-1, StringUtils.lastIndexOf("aabaabaa", 'b', -1)); [EOL]         assertEquals(0, StringUtils.lastIndexOf("aabaabaa", 'a', 0)); [EOL]  [EOL]         assertEquals(2, StringUtils.lastIndexOf(new StringBuilder("aabaabaa"), 'b', 2)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBugzilla38401() { [EOL]         assertEqualDuration( "0000/00/30 16:00:00 000", new int[] { 2006, 0, 26, 18, 47, 34 },  [EOL]                              new int[] { 2006, 1, 26, 10, 47, 34 }, "yyyy/MM/dd HH:mm:ss SSS"); [EOL]     } [EOL]  [EOL]     // https://issues.apache.org/jira/browse/LANG-281 [EOL]
@Test [EOL]     public void testNoNullElementsCollection2() { [EOL]         final List<String> coll = new ArrayList<String>(); [EOL]         coll.add("a"); [EOL]         coll.add("b"); [EOL]         Validate.noNullElements(coll, "MSG"); [EOL]         try { [EOL]             Validate.noNullElements((Collection<?>) null, "MSG"); [EOL]             fail("Expecting NullPointerException"); [EOL]         } catch (final NullPointerException ex) { [EOL]             assertEquals("The validated object is null", ex.getMessage()); [EOL]         } [EOL]         coll.set(1, null); [EOL]         try { [EOL]             Validate.noNullElements(coll, "MSG"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]             assertEquals("MSG", ex.getMessage()); [EOL]         } [EOL]          [EOL]         coll.set(1, "b"); [EOL]         final List<String> test = Validate.noNullElements(coll, "Message"); [EOL]         assertSame(coll, test); [EOL]     } [EOL
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(
@Test [EOL]     public void testGetConcurrent() throws ConcurrentException, [EOL]             InterruptedException { [EOL]         final ConcurrentInitializer<Object> initializer = createInitializer(); [EOL]         final int threadCount = 20; [EOL]         final CountDownLatch startLatch = new CountDownLatch(1); [EOL]         class GetThread extends Thread { [EOL]             Object object; [EOL]  [EOL]             @Override [EOL]             public void run() { [EOL]                 try { [EOL]                     // wait until all threads are ready for maximum parallelism [EOL]                     startLatch.await(); [EOL]                     // access the initializer [EOL]                     object = initializer.get(); [EOL]                 } catch (final InterruptedException iex) { [EOL]                     // ignore [EOL]                 } catch (final ConcurrentException cex) { [EOL]                     object = cex; [EOL]                 } [EOL]          
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBinaryToHexDigit() { [EOL]         assertEquals( [EOL]             '0', Conversion.binaryToHexDigit(new boolean[]{false, false, false, false})); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(new boolean[]{true, false, false, false})); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(new boolean[]{false, true, false, false})); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(new boolean[]{true, true, false, false})); [EOL]         assertEquals('4', Conversion.binaryToHexDigit(new boolean[]{false, false, true, false})); [EOL]         assertEquals('5', Conversion.binaryToHexDigit(new boolean[]{true, false, true, false})); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(new boolean[]{false, true, true, false})); [EOL]         assertEquals('7', Conversion.binaryToHexDigit(new boolean[]{true, true, true, false})); [EOL]         assertEquals('8', Conversion.binaryToHexDigit(new boolean[]{false, false, false, true})); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(new boolean[]{true, false, false, true})); [EOL]         assertEquals('a', Conversion.binaryToHexDigit(new boolean[]{false, true, false, true})); [EOL]         assertEquals('b', Conversion
@Test [EOL]     public void testPrependIfMissing() { [EOL]         assertEquals("prependIfMissing(null,null)", null, StringUtils.prependIfMissing(null,null)); [EOL]         assertEquals("prependIfMissing(abc,null)", "abc", StringUtils.prependIfMissing("abc",null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz)", "xyz", StringUtils.prependIfMissing("","xyz")); [EOL]         assertEquals("prependIfMissing(abc,xyz)", "xyzabc", StringUtils.prependIfMissing("abc","xyz")); [EOL]         assertEquals("prependIfMissing(xyzabc,xyz)", "xyzabc", StringUtils.prependIfMissing("xyzabc","xyz")); [EOL]         assertEquals("prependIfMissing(XYZabc,xyz)", "xyzXYZabc", StringUtils.prependIfMissing("XYZabc","xyz")); [EOL]  [EOL]         assertEquals("prependIfMissing(null,null null)", null, StringUtils.prependIfMissing(null,null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,null,null)", "abc", StringUtils.prependIfMissing("abc",null,(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(\"\",xyz,null)", "xyz", StringUtils.prependIfMissing("","xyz",(CharSequence[]) null)); [EOL]         assertEquals("prependIfMissing(abc,xyz,{null})","xyzabc", StringUtils.prependIfMissing("abc","xyz",
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars() { [EOL]         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray())); [EOL]         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray())); [EOL]         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray())); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testSplitPreserveAllTokens_StringString_StringStringInt() { [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".")); [EOL]         assertArrayEquals(null, StringUtils.splitPreserveAllTokens(null, ".", 3)); [EOL]          [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".").length); [EOL]         assertEquals(0, StringUtils.splitPreserveAllTokens("", ".", 3).length); [EOL]          [EOL]         innerTestSplitPreserveAllTokens('.', ".", ' '); [EOL]         innerTestSplitPreserveAllTokens('.', ".", ','); [EOL]         innerTestSplitPreserveAllTokens('.', ".,", 'x'); [EOL]         for (int i = 0; i < WHITESPACE.length(); i++) { [EOL]             for (int j = 0; j < NON_WHITESPACE.length(); j++) { [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), null, NON_WHITESPACE.charAt(j)); [EOL]                 innerTestSplitPreserveAllTokens(WHITESPACE.charAt(i), String.valueOf(WHITESPACE.charAt(i)), NON_WHITESPACE.charAt(j)); [EOL]             } [EOL]         } [EOL
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("I") ); [EOL]         assertEquals("I", WordUtils.capitalizeFully("i") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") ); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testIndexOfType_ThrowableClassInt() { [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(null, NestableException.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, null)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, ExceptionWithCause.class, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withoutCause, NestableException.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withoutCause, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, null, 0)); [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(nested, ExceptionWithCause.class, 0)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(nested, NestableException.class, 0)); [EOL]         assertEquals(1, ExceptionUtils.indexOfType(nested, ExceptionWithoutCause.class, 0)); [EOL]          [EOL]         assertEquals(-1, ExceptionUtils.indexOfType(withCause, null)); [EOL]         assertEquals(0, ExceptionUtils.indexOfType(withCause, ExceptionWithCause.class, 0)); [EOL]         assertEqu
@Test [EOL]     public void testLang381() { [EOL]         assertEquals(1.2, IEEE754rUtils.min(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertEquals(2.5, IEEE754rUtils.max(1.2, 2.5, Double.NaN), 0.01); [EOL]         assertTrue(Double.isNaN(IEEE754rUtils.max(Double.NaN, Double.NaN, Double.NaN))); [EOL]         assertEquals(1.2f, IEEE754rUtils.min(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertEquals(2.5f, IEEE754rUtils.max(1.2f, 2.5f, Float.NaN), 0.01); [EOL]         assertTrue(Float.isNaN(IEEE754rUtils.max(Float.NaN, Float.NaN, Float.NaN))); [EOL]  [EOL]         final double[] a = new double[] { 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils.max(a), 0.01); [EOL]         assertEquals(1.2, IEEE754rUtils.min(a), 0.01); [EOL]  [EOL]         final double[] b = new double[] { Double.NaN, 1.2, Double.NaN, 3.7, 27.0, 42.0, Double.NaN }; [EOL]         assertEquals(42.0, IEEE754rUtils
@Test [EOL]     public void testSubarrayDouble() { [EOL]         final double[] nullArray = null; [EOL]         final double[] array = { 10.123, 11.234, 12.345, 13.456, 14.567, 15.678 }; [EOL]         final double[] leftSubarray   = { 10.123, 11.234, 12.345, 13.456, }; [EOL]         final double[] midSubarray    = { 11.234, 12.345, 13.456, 14.567, }; [EOL]         final double[] rightSubarray  = { 12.345, 13.456, 14.567, 15.678 }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]
@Test [EOL]     public void testAppendSuper() { [EOL]         assertEquals(baseStr + "[]", new ToStringBuilder(base).appendSuper("Integer@8888[]").toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").toString()); [EOL]          [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper("Integer@8888[]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[<null>,hello]", new ToStringBuilder(base).appendSuper("Integer@8888[<null>]").append("a", "hello").toString()); [EOL]         assertEquals(baseStr + "[hello]", new ToStringBuilder(base).appendSuper(null).append("a", "hello").toString()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testBinaryToHexDigitMsb0_bits() { [EOL]         assertEquals( [EOL]             '0', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, false})); [EOL]         assertEquals( [EOL]             '1', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, false, true})); [EOL]         assertEquals( [EOL]             '2', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, false})); [EOL]         assertEquals( [EOL]             '3', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, false, true, true})); [EOL]         assertEquals( [EOL]             '4', [EOL]             Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, false})); [EOL]         assertEquals( [EOL]             '5', Conversion.binaryToHexDigitMsb0_4bits(new boolean[]{false, true, false, true})); [EOL]         assertEquals( [EOL]         
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testSuper() { [EOL]         final Object obj = new Object(); [EOL]         assertEquals(17 * 37 + 19 * 41 + obj.hashCode(), new HashCodeBuilder(17, 37).appendSuper( [EOL]                 new HashCodeBuilder(19, 41).append(obj).toHashCode()).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testConstructor_charArray_char_char() { [EOL]         StrTokenizer tok = new StrTokenizer("a b".toCharArray(), ' ', '"'); [EOL]         assertEquals(1, tok.getDelimiterMatcher().isMatch(" ".toCharArray(), 0, 0, 1)); [EOL]         assertEquals(1, tok.getQuoteMatcher().isMatch("\"".toCharArray(), 0, 0, 1)); [EOL]         assertEquals("a", tok.next()); [EOL]         assertEquals("b", tok.next()); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer(new char[0], ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]          [EOL]         tok = new StrTokenizer((char[]) null, ' ', '"'); [EOL]         assertFalse(tok.hasNext()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testFloatArray() { [EOL]         float[] obj1 = new float[2]; [EOL]         obj1[0] = 5; [EOL]         obj1[1] = 6; [EOL]         float[] obj2 = new float[2]; [EOL]         obj2[0] = 5; [EOL]         obj2[1] = 6; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]  [EOL]         obj2 = null; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         obj1 = null; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testContainsNone_CharArray() { [EOL]         final String str1 = "a"; [EOL]         final String str2 = "b"; [EOL]         final String str3 = "ab."; [EOL]         final char[] chars1= {'b'}; [EOL]         final char[] chars2= {'.'}; [EOL]         final char[] chars3= {'c', 'd'}; [EOL]         final char[] emptyChars = new char[0]; [EOL]         assertTrue(StringUtils.containsNone(null, (char[]) null)); [EOL]         assertTrue(StringUtils.containsNone("", (char[]) null)); [EOL]         assertTrue(StringUtils.containsNone(null, emptyChars)); [EOL]         assertTrue(StringUtils.containsNone(str1, emptyChars)); [EOL]         assertTrue(StringUtils.containsNone("", emptyChars)); [EOL]         assertTrue(StringUtils.containsNone("", chars1)); [EOL]         assertTrue(StringUtils.containsNone(str1, chars1)); [EOL]         assertTrue(StringUtils.containsNone(str1, chars2)); [EOL]         assertTrue(StringUtils.containsNone(str1, chars3)); [EOL]         assertFalse(StringUtils.containsNone(str2, chars1)); [EOL]         assertTrue(StringUtils.containsNone(str2, chars2)); [
@Test [EOL]     public void test_isAssignable_Unboxing_Widening() throws Exception { [EOL]         // test byte conversions [EOL]         assertFalse("byte -> char", ClassUtils.isAssignable(Byte.class, Character.TYPE, true)); [EOL]         assertTrue("byte -> byte", ClassUtils.isAssignable(Byte.class, Byte.TYPE, true)); [EOL]         assertTrue("byte -> short", ClassUtils.isAssignable(Byte.class, Short.TYPE, true)); [EOL]         assertTrue("byte -> int", ClassUtils.isAssignable(Byte.class, Integer.TYPE, true)); [EOL]         assertTrue("byte -> long", ClassUtils.isAssignable(Byte.class, Long.TYPE, true)); [EOL]         assertTrue("byte -> float", ClassUtils.isAssignable(Byte.class, Float.TYPE, true)); [EOL]         assertTrue("byte -> double", ClassUtils.isAssignable(Byte.class, Double.TYPE, true)); [EOL]         assertFalse("byte -> boolean", ClassUtils.isAssignable(Byte.class, Boolean.TYPE, true)); [EOL]  [EOL]         // test short conversions [EOL]         assertFalse("short -> char", ClassUtils.isAssignable(Short.class, Character.TYPE, true)); [EOL]         assertFalse("short -> byte", ClassUtils.isAssignable(Short.class, Byte.TYPE, true)); [EOL]         assertTrue("short -> short", ClassUtils.isAssignable(Short.class, Short.TYPE, true)); [EOL]         assertTrue
@Test [EOL]     public void testCreateIfAbsentUncheckedException() [EOL]             throws ConcurrentException { [EOL]         @SuppressWarnings("unchecked") [EOL]         final [EOL]         ConcurrentInitializer<Integer> init = EasyMock [EOL]                 .createMock(ConcurrentInitializer.class); [EOL]         final Exception ex = new Exception(); [EOL]         EasyMock.expect(init.get()).andThrow(new ConcurrentException(ex)); [EOL]         EasyMock.replay(init); [EOL]         try { [EOL]             ConcurrentUtils.createIfAbsentUnchecked( [EOL]                     new ConcurrentHashMap<String, Integer>(), "test", init); [EOL]             fail("Exception not thrown!"); [EOL]         } catch (final ConcurrentRuntimeException crex) { [EOL]             assertEquals("Wrong cause", ex, crex.getCause()); [EOL]         } [EOL]         EasyMock.verify(init); [EOL]     } [EOL] } [EOL]
@Test [EOL]     public void testLowDurations() { [EOL]         for(int hr=0; hr < 24; hr++) { [EOL]             for(int min=0; min < 60; min++) { [EOL]                 for(int sec=0; sec < 60; sec++) { [EOL]                     assertEqualDuration( hr + ":" + min + ":" + sec,  [EOL]                                          new int[] { 2000, 0, 1, 0, 0, 0, 0 }, [EOL]                                          new int[] { 2000, 0, 1, hr, min, sec }, [EOL]                                          "H:m:s" [EOL]                                        ); [EOL]                 } [EOL]             } [EOL]         } [EOL]     } [EOL]  [EOL]     // Attempting to test edge cases in DurationFormatUtils.formatPeriod [EOL]
@Test [EOL]     public void testFormat() { [EOL]         final Locale realDefaultLocale = Locale.getDefault(); [EOL]         final TimeZone realDefaultZone = TimeZone.getDefault(); [EOL]         try { [EOL]             Locale.setDefault(Locale.US); [EOL]             TimeZone.setDefault(NEW_YORK); [EOL]  [EOL]             final GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20); [EOL]             final GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00); [EOL]             final Date date1 = cal1.getTime(); [EOL]             final Date date2 = cal2.getTime(); [EOL]             final long millis1 = date1.getTime(); [EOL]             final long millis2 = date2.getTime(); [EOL]  [EOL]             DatePrinter fdf = getInstance("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss"); [EOL]             assertEquals(sdf.format(date1), fdf.format(date1)); [EOL]             assertEquals("2003-01-10T15:33:20", fdf.format(date1)); [
@Test [EOL]     public void testIteration() { [EOL]         final StrTokenizer tkn = new StrTokenizer("a b c"); [EOL]         assertFalse(tkn.hasPrevious()); [EOL]         try { [EOL]             tkn.previous(); [EOL]             fail(); [EOL]         } catch (final NoSuchElementException ex) {} [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]         assertEquals("a", tkn.next()); [EOL]         try { [EOL]             tkn.remove(); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.set("x"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         try { [EOL]             tkn.add("y"); [EOL]             fail(); [EOL]         } catch (final UnsupportedOperationException ex) {} [EOL]         assertTrue(tkn.hasPrevious()); [EOL]         assertTrue(tkn.hasNext()); [EOL]          [EOL]       
@Test [EOL]     public void testStaticReplace() { [EOL]         final Map<String, String> map = new HashMap<String, String>(); [EOL]         map.put("name", "commons"); [EOL]         assertEquals("Hi commons!", StrSubstitutor.replace("Hi ${name}!", map)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests static. [EOL]      */ [EOL]
@Test [EOL]     public void testReplace_int_int_String() { [EOL]         StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.replace(0, 1, "d"); [EOL]         assertEquals("dbc", sb.toString()); [EOL]         sb.replace(0, 1, "aaa"); [EOL]         assertEquals("aaabc", sb.toString()); [EOL]         sb.replace(0, 3, ""); [EOL]         assertEquals("bc", sb.toString()); [EOL]         sb.replace(1, 2, (String) null); [EOL]         assertEquals("b", sb.toString()); [EOL]         sb.replace(1, 1000, "text"); [EOL]         assertEquals("btext", sb.toString()); [EOL]         sb.replace(0, 1000, "text"); [EOL]         assertEquals("text", sb.toString()); [EOL]          [EOL]         sb = new StrBuilder("atext"); [EOL]         sb.replace(1, 1, "ny"); [EOL]         assertEquals("anytext", sb.toString()); [EOL]         try { [EOL]             sb.replace(2, 1, "anything"); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]   
@Test [EOL]     public void testConstructors() { [EOL]         assertEquals(0, new MutableInt().intValue()); [EOL]          [EOL]         assertEquals(1, new MutableInt(1).intValue()); [EOL]          [EOL]         assertEquals(2, new MutableInt(Integer.valueOf(2)).intValue()); [EOL]         assertEquals(3, new MutableInt(new MutableLong(3)).intValue()); [EOL]  [EOL]         assertEquals(2, new MutableInt("2").intValue()); [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testExtendedAndBuiltInFormats() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2007, Calendar.JANUARY, 23, 18, 33, 05); [EOL]         final Object[] args = new Object[] {"John Doe", cal.getTime(), Double.valueOf("12345.67")}; [EOL]         final String builtinsPattern = "DOB: {1,date,short} Salary: {2,number,currency}"; [EOL]         final String extendedPattern = "Name: {0,upper} "; [EOL]         final String pattern = extendedPattern + builtinsPattern; [EOL]  [EOL]         final HashSet<Locale> testLocales = new HashSet<Locale>(); [EOL]         testLocales.addAll(Arrays.asList(DateFormat.getAvailableLocales())); [EOL]         testLocales.retainAll(Arrays.asList(NumberFormat.getAvailableLocales())); [EOL]         testLocales.add(null); [EOL]  [EOL]         for (final Locale locale : testLocales) { [EOL]             final MessageFormat builtins = createMessageFormat(builtinsPattern, locale); [EOL]             final String expectedPattern = extendedPattern + builtins.toPattern(); [EOL]             DateFormat df = null; [EOL]             NumberFormat nf = null; [EOL]             ExtendedMessageFormat emf = null; [EOL]    
@Test [EOL]     public void testFormatUTC() { [EOL]         final Calendar c = Calendar.getInstance(TimeZone.getTimeZone("UTC")); [EOL]         c.set(2005,0,1,12,0,0); [EOL]         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]          [EOL]         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern())); [EOL]          [EOL]         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]          [EOL]         assertEquals ("2005-01-01T12:00:00", DateFormatUtils.formatUTC(c.getTime().getTime(), DateFormatUtils.ISO_DATETIME_FORMAT.getPattern(), Locale.US)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReflectionByteArrayArray() { [EOL]         byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } }; [EOL]         final String baseStr = this.toBaseString(array); [EOL]         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array)); [EOL]         array = null; [EOL]         assertReflectionArray("<null>", array); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testShortArray() { [EOL]         assertEquals(17 * 37, new HashCodeBuilder(17, 37).append((short[]) null).toHashCode()); [EOL]         final short[] obj = new short[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[0] = (short) 5; [EOL]         assertEquals((17 * 37 + 5) * 37, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]         obj[1] = (short) 6; [EOL]         assertEquals((17 * 37 + 5) * 37 + 6, new HashCodeBuilder(17, 37).append(obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTimeZoneMatches() { [EOL]         final DatePrinter printer= getInstance(YYYY_MM_DD, NEW_YORK); [EOL]         assertEquals(NEW_YORK, printer.getTimeZone()); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceSimple() { [EOL]         doTestReplace("The quick brown fox jumps over the lazy dog.", "The ${animal} jumps over the ${target}.", true); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests simple key replace. [EOL]      */ [EOL]
@Test [EOL]     public void testIntersectionWith() { [EOL]         assertSame(intRange, intRange.intersectionWith(intRange)); [EOL]         assertSame(byteRange, byteRange.intersectionWith(byteRange)); [EOL]         assertSame(longRange, longRange.intersectionWith(longRange)); [EOL]         assertSame(floatRange, floatRange.intersectionWith(floatRange)); [EOL]         assertSame(doubleRange, doubleRange.intersectionWith(doubleRange)); [EOL]  [EOL]         assertEquals(Range.between(10, 15), intRange.intersectionWith(Range.between(5, 15))); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsInstanceOfExceptionMessage() { [EOL]         try { [EOL]             Validate.isInstanceOf(List.class, "hi"); [EOL]             fail("Expecting IllegalArgumentException"); [EOL]         } catch(final IllegalArgumentException e) { [EOL]             assertEquals("Expected type: java.util.List, actual: java.lang.String", e.getMessage()); [EOL]         } [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]        
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testSetBoolean() { [EOL]         assertEquals(bf_multi.set(0), bf_multi.setBoolean(0, true)); [EOL]         assertEquals(bf_single.set(0), bf_single.setBoolean(0, true)); [EOL]         assertEquals(bf_zero.set(0), bf_zero.setBoolean(0, true)); [EOL]         assertEquals(bf_multi.clear(-1), bf_multi.setBoolean(-1, false)); [EOL]         assertEquals(bf_single.clear(-1), bf_single.setBoolean(-1, false)); [EOL]         assertEquals(bf_zero.clear(-1), bf_zero.setBoolean(-1, false)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * test the setShortBoolean() method [EOL]      */ [EOL]
@Test [EOL]     public void testInvokeExactStaticMethod() throws Exception { [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null)); [EOL]         assertEquals("bar()", MethodUtils.invokeExactStaticMethod(TestBean.class, [EOL]                 "bar", (Object[]) null, (Class<?>[]) null)); [EOL]         assertEquals("bar(String)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", "")); [EOL]         assertEquals("bar(Object)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object())); [EOL]         assertEquals("bar(Integer)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", NumberUtils.INTEGER_ONE)); [EOL]         assertEquals("bar(double)", MethodUtils.invokeExactStaticMethod( [EOL]                 TestBean.class, "bar", new Object[] { NumberUtils.DOUBLE_ONE
@Test [EOL]     public void testHexDigitToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, false, false}, Conversion.hexDigitToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, false, false}, Conversion.hexDigitToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, false, true, false}, Conversion.hexDigitToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{true, true, true, false}, Conversion.hexDigitToBinary('7')); [EOL]        
@Test [EOL]     public void testCloneOfPrimitiveArray() { [EOL]         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testMultiCharArray() { [EOL]         final char[][] array1 = new char[2][2]; [EOL]         final char[][] array2 = new char[2][2]; [EOL]         final char[][] array3 = new char[2][3]; [EOL]         for (short i = 0; i < array1.length; ++i) { [EOL]             for (short j = 0; j < array1[0].length; j++) { [EOL]                 array1[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array2[i][j] = (char)((i + 1) * (j + 1)); [EOL]                 array3[i][j] = (char)((i + 1) * (j + 1)); [EOL]             } [EOL]         } [EOL]         array3[1][2] = 100; [EOL]         array3[1][2] = 100; [EOL]          [EOL]         assertTrue(new CompareToBuilder().append(array1, array1).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array2).toComparison() == 0); [EOL]         assertTrue(new CompareToBuilder().append(array1, array3).toComparison() < 0); [EOL]         assertTrue(new
@Test [EOL]     public void testTruncateMinute() throws Exception { [EOL]         final int calendarField = Calendar.MINUTE; [EOL]         final Date lastTruncateDate = dateTimeParser.parse("June 1, 2008 8:15:59.999"); [EOL]         baseTruncateTest(targetMinuteDate, lastTruncateDate, calendarField); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Test DateUtils.truncate()-method with Calendar.SECOND [EOL]      *  [EOL]      * @throws Exception [EOL]      * @since 3.0 [EOL]      */ [EOL]
@Test [EOL]     public void testUnfinishedEntity() { [EOL]         // parse it [EOL]         NumericEntityUnescaper neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.semiColonOptional); [EOL]         String input = "Test &#x30 not test"; [EOL]         String expected = "Test \u0030 not test"; [EOL]  [EOL]         String result = neu.translate(input); [EOL]         assertEquals("Failed to support unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]  [EOL]         // ignore it [EOL]         neu = new NumericEntityUnescaper(); [EOL]         input = "Test &#x30 not test"; [EOL]         expected = input; [EOL]  [EOL]         result = neu.translate(input); [EOL]         assertEquals("Failed to ignore unfinished entities (i.e. missing semi-colon)", expected, result); [EOL]  [EOL]         // fail it [EOL]         neu = new NumericEntityUnescaper(NumericEntityUnescaper.OPTION.errorIfNoSemiColon); [EOL]         input = "Test &#x30 not test"; [EOL]  [EOL]         try { [EOL]             result = neu.translate(input); [EOL]             fail("IllegalArgumentException expected"); [
@Test [EOL]     public void testAddObjectArrayToObjectArray() { [EOL]         assertNull(ArrayUtils.addAll((Object[]) null, (Object[]) null)); [EOL]         Object[] newArray; [EOL]         final String[] stringArray1 = new String[]{"a", "b", "c"}; [EOL]         final String[] stringArray2 = new String[]{"1", "2", "3"}; [EOL]         newArray = ArrayUtils.addAll(stringArray1, (String[]) null); [EOL]         assertNotSame(stringArray1, newArray); [EOL]         assertTrue(Arrays.equals(stringArray1, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(null, stringArray2); [EOL]         assertNotSame(stringArray2, newArray); [EOL]         assertTrue(Arrays.equals(stringArray2, newArray)); [EOL]         assertTrue(Arrays.equals(new String[]{"1", "2", "3"}, newArray)); [EOL]         assertEquals(String.class, newArray.getClass().getComponentType()); [EOL]         newArray = ArrayUtils.addAll(stringArray1, stringArray2); [EOL]         assertTrue(Arrays.equals(new String[]{"a", "b", "c", "1", "2",
@Test [EOL]     public void testAbove() { [EOL]         final NumericEntityEscaper nee = NumericEntityEscaper.above('F'); [EOL]  [EOL]         final String input = "ADFGZ"; [EOL]         final String result = nee.translate(input); [EOL]         assertEquals("Failed to escape numeric entities via the above method", "ADF&#71;&#90;", result); [EOL]     } [EOL]  [EOL]     // See LANG-617 [EOL]
@Test [EOL]     public void testIndexOfAny_StringStringWithSupplementaryChars() { [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000)); [EOL]         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001)); [EOL]         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000)); [EOL]         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testEscapeSurrogatePairs() throws Exception { [EOL]         assertEquals("\uD83D\uDE30", StringEscapeUtils.escapeCsv("\uD83D\uDE30")); [EOL]         // Examples from https://en.wikipedia.org/wiki/UTF-16 [EOL]         assertEquals("\uD800\uDC00", StringEscapeUtils.escapeCsv("\uD800\uDC00")); [EOL]         assertEquals("\uD834\uDD1E", StringEscapeUtils.escapeCsv("\uD834\uDD1E")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeCsv("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml3("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeHtml4("\uDBFF\uDFFD")); [EOL]         assertEquals("\uDBFF\uDFFD", StringEscapeUtils.escapeXml("\uDBFF\uDFFD")); [EOL]     } [EOL]      [EOL]     /** [EOL]      * Tests LANG-858. [EOL]      *  [EOL]      * @throws Exception [EOL]      */ [EOL]
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture
@Test [EOL]     public void testDeleteCharAt() { [EOL]         final StrBuilder sb = new StrBuilder("abc"); [EOL]         sb.deleteCharAt(0); [EOL]         assertEquals("bc", sb.toString());  [EOL]          [EOL]         try { [EOL]             sb.deleteCharAt(1000); [EOL]             fail("Expected IndexOutOfBoundsException"); [EOL]         } catch (final IndexOutOfBoundsException e) {} [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testShortArrayToInt() { [EOL]         final short[] src = new short[]{ [EOL]             (short)0xCDF1, (short)0xF0C1, (short)0x0F12, (short)0x3456, (short)0x7800}; [EOL]         assertEquals(0x00000000, Conversion.shortArrayToInt(src, 0, 0, 0, 0)); [EOL]         assertEquals(0x0000CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 1)); [EOL]         assertEquals(0xF0C1CDF1, Conversion.shortArrayToInt(src, 0, 0, 0, 2)); [EOL]         assertEquals(0x0F12F0C1, Conversion.shortArrayToInt(src, 1, 0, 0, 2)); [EOL]         assertEquals(0x12345678, Conversion.shortArrayToInt(src, 0, 0x12345678, 0, 0)); [EOL]         assertEquals(0xCDF15678, Conversion.shortArrayToInt(src, 0, 0x12345678, 16, 1)); [EOL]         // assertEquals(0x34567800,Conversion.ShortArrayToInt(src, 3, 0x12345678, 16, 2)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#byteArrayToInt(byte[], int, int, int, int)}. [EOL]      */ [EOL]
@Test [EOL]     public void testWeekIterator() throws Exception { [EOL]         final Calendar now = Calendar.getInstance(); [EOL]         for (int i = 0; i< 7; i++) { [EOL]             final Calendar today = DateUtils.truncate(now, Calendar.DATE); [EOL]             final Calendar sunday = DateUtils.truncate(now, Calendar.DATE); [EOL]             sunday.add(Calendar.DATE, 1 - sunday.get(Calendar.DAY_OF_WEEK)); [EOL]             final Calendar monday = DateUtils.truncate(now, Calendar.DATE); [EOL]             if (monday.get(Calendar.DAY_OF_WEEK) == 1) { [EOL]                 //This is sunday... roll back 6 days [EOL]                 monday.add(Calendar.DATE, -6); [EOL]             } else { [EOL]                 monday.add(Calendar.DATE, 2 - monday.get(Calendar.DAY_OF_WEEK)); [EOL]             } [EOL]             final Calendar centered = DateUtils.truncate(now, Calendar.DATE); [EOL]             centered.add(Calendar.DATE, -3); [EOL]              [EOL]           
@Test [EOL]     public void testLocales_LongNoEra_BC() throws Exception { [EOL]         testLocales(LONG_FORMAT_NOERA, true); [EOL]     } [EOL]  [EOL]
@Test [EOL]     @SuppressWarnings("unchecked") [EOL]     public void testSerialization() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> origTriple = ImmutableTriple.of(0, "foo", Boolean.TRUE); [EOL]         final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [EOL]         final ObjectOutputStream out = new ObjectOutputStream(baos); [EOL]         out.writeObject(origTriple); [EOL]         final ImmutableTriple<Integer, String, Boolean> deserializedTriple = (ImmutableTriple<Integer, String, Boolean>) new ObjectInputStream( [EOL]                 new ByteArrayInputStream(baos.toByteArray())).readObject(); [EOL]         assertEquals(origTriple, deserializedTriple); [EOL]         assertEquals(origTriple.hashCode(), deserializedTriple.hashCode()); [EOL]     } [EOL] } [EOL]  [EOL]
@Test [EOL]     public void testRightPad_StringIntChar() { [EOL]         assertEquals(null, StringUtils.rightPad(null, 5, ' ')); [EOL]         assertEquals("     ", StringUtils.rightPad("", 5, ' ')); [EOL]         assertEquals("abc  ", StringUtils.rightPad("abc", 5, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", 2, ' ')); [EOL]         assertEquals("abc", StringUtils.rightPad("abc", -1, ' ')); [EOL]         assertEquals("abcxx", StringUtils.rightPad("abc", 5, 'x')); [EOL]         final String str = StringUtils.rightPad("aaa", 10000, 'a');  // bigger than pad length [EOL]         assertEquals(10000, str.length()); [EOL]         assertTrue(StringUtils.containsOnly(str, new char[] {'a'})); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLongArrayHiddenByObject() { [EOL]         final long[] array1 = new long[2]; [EOL]         array1[0] = 5L; [EOL]         array1[1] = 6L; [EOL]         final long[] array2 = new long[2]; [EOL]         array2[0] = 5L; [EOL]         array2[1] = 6L; [EOL]         final Object obj1 = array1; [EOL]         final Object obj2 = array2; [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array1).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]         assertTrue(new EqualsBuilder().append(obj1, array2).isEquals()); [EOL]         array1[1] = 7; [EOL]         assertTrue(!new EqualsBuilder().append(obj1, obj2).isEquals()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testHexDigitMsb0ToInt() { [EOL]         assertEquals(0x0, Conversion.hexDigitMsb0ToInt('0')); [EOL]         assertEquals(0x8, Conversion.hexDigitMsb0ToInt('1')); [EOL]         assertEquals(0x4, Conversion.hexDigitMsb0ToInt('2')); [EOL]         assertEquals(0xC, Conversion.hexDigitMsb0ToInt('3')); [EOL]         assertEquals(0x2, Conversion.hexDigitMsb0ToInt('4')); [EOL]         assertEquals(0xA, Conversion.hexDigitMsb0ToInt('5')); [EOL]         assertEquals(0x6, Conversion.hexDigitMsb0ToInt('6')); [EOL]         assertEquals(0xE, Conversion.hexDigitMsb0ToInt('7')); [EOL]         assertEquals(0x1, Conversion.hexDigitMsb0ToInt('8')); [EOL]         assertEquals(0x9, Conversion.hexDigitMsb0ToInt('9')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('A')); [EOL]         assertEquals(0x5, Conversion.hexDigitMsb0ToInt('a')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('B')); [EOL]         assertEquals(0xD, Conversion.hexDigitMsb0ToInt('b
@Test [EOL]     public void testPrintRootCauseStackTrace_ThrowableWriter() throws Exception { [EOL]         StringWriter writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, (PrintWriter) null); [EOL]         ExceptionUtils.printRootCauseStackTrace(null, new PrintWriter(writer)); [EOL]         assertEquals(0, writer.getBuffer().length()); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         try { [EOL]             ExceptionUtils.printRootCauseStackTrace(withCause, (PrintWriter) null); [EOL]             fail(); [EOL]         } catch (final IllegalArgumentException ex) { [EOL]         } [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         final Throwable withCause = createExceptionWithCause(); [EOL]         ExceptionUtils.printRootCauseStackTrace(withCause, new PrintWriter(writer)); [EOL]         String stackTrace = writer.toString(); [EOL]         assertTrue(stackTrace.indexOf(ExceptionUtils.WRAPPED_MARKER) != -1); [EOL]          [EOL]         writer = new StringWriter(1024); [EOL]         ExceptionUtils.printRootCauseStackTrace(withoutCause, new PrintWriter(writer)); [EOL]        
@Test [EOL]     public void testInheritedReflectionStatics() { [EOL]         final InheritedReflectionStaticFieldsFixture instance1 = new InheritedReflectionStaticFieldsFixture(); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, InheritedReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             ReflectionToStringBuilder.toString(instance1, null, false, true, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture.class)); [EOL]         assertEquals( [EOL]             this.toBaseString(instance1) + "[staticString2=staticString2,staticInt2=67890,staticString=staticString,staticInt=12345]", [EOL]             this.toStringWithStatics(instance1, null, SimpleReflectionStaticFieldsFixture
@Test [EOL]     public void testHashCode() { [EOL]         final MutableInt mutNumA = new MutableInt(0); [EOL]         final MutableInt mutNumB = new MutableInt(0); [EOL]         final MutableInt mutNumC = new MutableInt(1); [EOL]  [EOL]         assertTrue(mutNumA.hashCode() == mutNumA.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == mutNumB.hashCode()); [EOL]         assertFalse(mutNumA.hashCode() == mutNumC.hashCode()); [EOL]         assertTrue(mutNumA.hashCode() == Integer.valueOf(0).hashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testAsReader() throws Exception { [EOL]         final StrBuilder sb = new StrBuilder("some text"); [EOL]         Reader reader = sb.asReader(); [EOL]         assertTrue(reader.ready()); [EOL]         final char[] buf = new char[40]; [EOL]         assertEquals(9, reader.read(buf)); [EOL]         assertEquals("some text", new String(buf, 0, 9)); [EOL]          [EOL]         assertEquals(-1, reader.read()); [EOL]         assertFalse(reader.ready()); [EOL]         assertEquals(0, reader.skip(2)); [EOL]         assertEquals(0, reader.skip(-1)); [EOL]          [EOL]         assertTrue(reader.markSupported()); [EOL]         reader = sb.asReader(); [EOL]         assertEquals('s', reader.read()); [EOL]         reader.mark(-1); [EOL]         char[] array = new char[3]; [EOL]         assertEquals(3, reader.read(array, 0, 3)); [EOL]         assertEquals('o', array[0]); [EOL]         assertEquals('m', array[1]); [EOL]         assertEquals('e', array[2]); [EOL]         reader.reset(); [EOL]         assertEqu
@Test [EOL]     public void testStripEnd_StringString() { [EOL]         // null stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, null)); [EOL]         assertEquals("", StringUtils.stripEnd("", null)); [EOL]         assertEquals("", StringUtils.stripEnd("        ", null)); [EOL]         assertEquals("  abc", StringUtils.stripEnd("  abc  ", null)); [EOL]         assertEquals(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE,  [EOL]             StringUtils.stripEnd(StringUtilsTest.WHITESPACE + StringUtilsTest.NON_WHITESPACE + StringUtilsTest.WHITESPACE, null)); [EOL]  [EOL]         // "" stripEnd [EOL]         assertEquals(null, StringUtils.stripEnd(null, "")); [EOL]         assertEquals("", StringUtils.stripEnd("", "")); [EOL]         assertEquals("        ", StringUtils.stripEnd("        ", "")); [EOL]         assertEquals("  abc  ", StringUtils.stripEnd("  abc  ", "")); [EOL]         assertEquals(StringUtilsTest.WHITESPACE, StringUtils.stripEnd(StringUtilsTest.WHITESPACE, "")); [EOL]          [EOL]         // " " strip
@Test [EOL]     public void testGetSet() { [EOL]         final MutableDouble mutNum = new MutableDouble(0d); [EOL]         assertEquals(0d, new MutableDouble().doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(0), new MutableDouble().getValue()); [EOL]          [EOL]         mutNum.setValue(1); [EOL]         assertEquals(1d, mutNum.doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(1d), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(Double.valueOf(2d)); [EOL]         assertEquals(2d, mutNum.doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(2d), mutNum.getValue()); [EOL]          [EOL]         mutNum.setValue(new MutableDouble(3d)); [EOL]         assertEquals(3d, mutNum.doubleValue(), 0.0001d); [EOL]         assertEquals(Double.valueOf(3d), mutNum.getValue()); [EOL]     } [EOL]  [EOL]
@Test(timeout = 666000) [EOL]     public void testHashCode() throws Exception { [EOL]         final Test test = getClass().getDeclaredMethod("testHashCode").getAnnotation(Test.class); [EOL]         assertEquals(test.hashCode(), AnnotationUtils.hashCode(test)); [EOL]         final TestAnnotation testAnnotation1 = field1.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation1.hashCode(), AnnotationUtils.hashCode(testAnnotation1)); [EOL]         final TestAnnotation testAnnotation3 = field3.getAnnotation(TestAnnotation.class); [EOL]         assertEquals(testAnnotation3.hashCode(), AnnotationUtils.hashCode(testAnnotation3)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharArrayArray() { [EOL]         char[][] array = new char[][] {{'A', 'B'}, null, {'p'}}; [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testTripleOf() throws Exception { [EOL]         final ImmutableTriple<Integer, String, Boolean> triple = ImmutableTriple.of(0, "foo", Boolean.FALSE); [EOL]         assertEquals(0, triple.left.intValue()); [EOL]         assertEquals(0, triple.getLeft().intValue()); [EOL]         assertEquals("foo", triple.middle); [EOL]         assertEquals("foo", triple.getMiddle()); [EOL]         assertEquals(Boolean.FALSE, triple.right); [EOL]         assertEquals(Boolean.FALSE, triple.getRight()); [EOL]         final ImmutableTriple<Object, String, Boolean> triple2 = ImmutableTriple.of(null, "bar", Boolean.TRUE); [EOL]         assertNull(triple2.left); [EOL]         assertNull(triple2.getLeft()); [EOL]         assertEquals("bar", triple2.middle); [EOL]         assertEquals("bar", triple2.getMiddle()); [EOL]         assertEquals(Boolean.TRUE, triple2.right); [EOL]         assertEquals(Boolean.TRUE, triple2.getRight()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test_processBitVector() { [EOL]         assertEquals(EnumSet.noneOf(Traffic.class), EnumUtils.processBitVector(Traffic.class, 0L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED), EnumUtils.processBitVector(Traffic.class, 1L)); [EOL]         assertEquals(EnumSet.of(Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 2L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER), EnumUtils.processBitVector(Traffic.class, 3L)); [EOL]         assertEquals(EnumSet.of(Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 4L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 5L)); [EOL]         assertEquals(EnumSet.of(Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 6L)); [EOL]         assertEquals(EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN), EnumUtils.processBitVector(Traffic.class, 7L)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang412Right() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendFixedWidthPadRight(null, 10, '*'); [EOL]         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testEqualsHashcode() { [EOL]         final Map<String, ? extends FormatFactory> registry = Collections.singletonMap("testfmt", new LowerCaseFormatFactory()); [EOL]         final Map<String, ? extends FormatFactory> otherRegitry = Collections.singletonMap("testfmt", new UpperCaseFormatFactory()); [EOL]  [EOL]         final String pattern = "Pattern: {0,testfmt}"; [EOL]         final ExtendedMessageFormat emf = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]  [EOL]         ExtendedMessageFormat other = null; [EOL]  [EOL]         // Same object [EOL]         assertTrue("same, equals()",   emf.equals(emf)); [EOL]         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode()); [EOL]  [EOL]         // Equal Object [EOL]         other = new ExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertTrue("equal, equals()",   emf.equals(other)); [EOL]         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode()); [EOL]  [EOL]         // Different Class [EOL]         other = new OtherExtendedMessageFormat(pattern, Locale.US, registry); [EOL]         assertFalse("class, equals()",  emf.equals(other)); [EOL]         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode
@Test [EOL]     public void test_isAssignable() throws Exception { [EOL]         assertFalse(ClassUtils.isAssignable((Class<?>) null, null)); [EOL]         assertFalse(ClassUtils.isAssignable(String.class, null)); [EOL]  [EOL]         assertTrue(ClassUtils.isAssignable(null, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(null, Integer.class)); [EOL]         assertFalse(ClassUtils.isAssignable(null, Integer.TYPE)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(String.class, String.class)); [EOL]         assertFalse(ClassUtils.isAssignable(Object.class, String.class)); [EOL]  [EOL]         final boolean autoboxing = SystemUtils.isJavaVersionAtLeast(JAVA_1_5); [EOL]  [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Integer.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.TYPE, Object.class)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Integer.TYPE)); [EOL]         assertEquals(autoboxing, ClassUtils.isAssignable(Integer.class, Object.class)); [EOL]         assertTrue(ClassUtils.isAssignable(
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testDeleteFirst_char() { [EOL]         StrBuilder sb = new StrBuilder("abcba"); [EOL]         sb.deleteFirst('X'); [EOL]         assertEquals("abcba", sb.toString()); [EOL]         sb.deleteFirst('a'); [EOL]         assertEquals("bcba", sb.toString()); [EOL]         sb.deleteFirst('c'); [EOL]         assertEquals("bba", sb.toString()); [EOL]         sb.deleteFirst('b'); [EOL]         assertEquals("ba", sb.toString()); [EOL]  [EOL]         sb = new StrBuilder(""); [EOL]         sb.deleteFirst('b'); [EOL]         assertEquals("", sb.toString()); [EOL]     } [EOL]  [EOL]     // ----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testGetCommonPrefix_StringArray() { [EOL]         assertEquals("", StringUtils.getCommonPrefix((String[])null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix()); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", null, null)); [EOL]         assertEquals("", StringUtils.getCommonPrefix(null, null, "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("", "abc")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abc", "")); [EOL]         assertEquals("abc", StringUtils.getCommonPrefix("abc", "abc")); [EOL]         assertEquals("a", StringUtils.getCommonPrefix("abc", "a")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("ab", "abxyz")); [EOL]         assertEquals("ab", StringUtils.getCommonPrefix("abcde", "abxyz")); [EOL]         assertEquals("", StringUtils.getCommonPrefix("abcde", "xyz")); [
@Test [EOL]     public void testLastIndexOfBoolean() { [EOL]         boolean[] array = null; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[0]; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, true)); [EOL]         array = new boolean[] { true, false, true }; [EOL]         assertEquals(2, ArrayUtils.lastIndexOf(array, true)); [EOL]         assertEquals(1, ArrayUtils.lastIndexOf(array, false)); [EOL]         array = new boolean[] { true, true }; [EOL]         assertEquals(-1, ArrayUtils.lastIndexOf(array, false)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.
@Test [EOL]     public void testAmPm() throws ParseException { [EOL]         final Calendar cal= Calendar.getInstance(NEW_YORK, Locale.US); [EOL]         cal.clear(); [EOL]  [EOL]         final DateParser h = getInstance("yyyy-MM-dd hh a mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser K = getInstance("yyyy-MM-dd KK a mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser k = getInstance("yyyy-MM-dd kk:mm:ss", NEW_YORK, Locale.US); [EOL]         final DateParser H = getInstance("yyyy-MM-dd HH:mm:ss", NEW_YORK, Locale.US); [EOL]  [EOL]         cal.set(2010, 7, 1, 0, 33, 20); [EOL]         assertEquals(cal.getTime(), h.parse("2010-08-01 12 AM 33:20")); [EOL]         assertEquals(cal.getTime(), K.parse("2010-08-01 0 AM 33:20")); [EOL]         assertEquals(cal.getTime(), k.parse("2010-08-01 00:33:20")); [EOL]         assertEquals(cal.getTime(), H.parse("2010-08-01 00:33:20")); [EOL]  [EOL]         cal.set(2010, 7, 1, 3, 33, 20); [EOL]         assertEquals(cal.getTime(), h.parse("2010-08-01 3 AM 33:20")); [E
@Test [EOL]      public void testToPrimitive_int_int() { [EOL]          final Long[] l = null; [EOL]          assertEquals(null, ArrayUtils.toPrimitive(l, Integer.MIN_VALUE)); [EOL]          assertSame(ArrayUtils.EMPTY_INT_ARRAY,  [EOL]          ArrayUtils.toPrimitive(new Integer[0], 1)); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  Integer.valueOf(Integer.MAX_VALUE), Integer.valueOf(9999999)},1))); [EOL]          assertTrue(Arrays.equals( [EOL]              new int[] {Integer.MIN_VALUE, Integer.MAX_VALUE, 9999999}, [EOL]              ArrayUtils.toPrimitive(new Integer[] {Integer.valueOf(Integer.MIN_VALUE),  [EOL]                  null, Integer.valueOf(9999999)}, Integer.MAX_VALUE)) [EOL]          ); [EOL]      } [EOL]       [EOL]
@Test [EOL]     public void testJoin_ArrayOfBytes() { [EOL]         assertEquals(null, StringUtils.join((byte[]) null, ',')); [EOL]         assertEquals("1;2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR)); [EOL]         assertEquals("2", StringUtils.join(BYTE_PRIM_LIST, SEPARATOR_CHAR, 1, 2)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testReplaceNull() { [EOL]         doTestNoReplace(null); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests replace with null. [EOL]      */ [EOL]
@Test [EOL]     public void testToProperString() { [EOL]         Fraction f = null; [EOL]  [EOL]         f = Fraction.getFraction(3, 5); [EOL]         final String str = f.toProperString(); [EOL]         assertEquals("3/5", str); [EOL]         assertSame(str, f.toProperString()); [EOL]          [EOL]         f = Fraction.getFraction(7, 5); [EOL]         assertEquals("1 2/5", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(14, 10); [EOL]         assertEquals("1 4/10", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(4, 2); [EOL]         assertEquals("2", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(0, 2); [EOL]         assertEquals("0", f.toProperString());         [EOL]          [EOL]         f = Fraction.getFraction(2, 2); [EOL]         assertEquals("1", f.toProperString());         [
@Test [EOL]     public void testRemoveElementShortArray() { [EOL]         short[] array; [EOL]         array = ArrayUtils.removeElements((short[]) null, (short) 1); [EOL]         assertNull(array); [EOL]         array = ArrayUtils.removeElements(ArrayUtils.EMPTY_SHORT_ARRAY, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(ArrayUtils.EMPTY_SHORT_ARRAY, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]         array = ArrayUtils.removeElements(new short[] { 1, 2, 1 }, (short) 1); [EOL]         assertTrue(Arrays.equals(new short[] { 2, 1 }, array)); [EOL]         assertEquals(Short.TYPE, array.getClass().getComponentType()); [EOL]  [EOL]         array = ArrayUt
@Test [EOL]     public void testSubarrChar() { [EOL]         final char[] nullArray = null; [EOL]         final char[] array = { 'a', 'b', 'c', 'd', 'e', 'f' }; [EOL]         final char[] leftSubarray     = { 'a', 'b', 'c', 'd', }; [EOL]         final char[] midSubarray      = { 'b', 'c', 'd', 'e', }; [EOL]         final char[] rightSubarray    = { 'c', 'd', 'e', 'f', }; [EOL]  [EOL]  [EOL]         assertTrue("0 start, mid end", [EOL]             ArrayUtils.isEquals(leftSubarray, [EOL]                 ArrayUtils.subarray(array, 0, 4))); [EOL]  [EOL]         assertTrue("0 start, length end", [EOL]             ArrayUtils.isEquals(array, [EOL]                 ArrayUtils.subarray(array, 0, array.length))); [EOL]  [EOL]         assertTrue("mid start, mid end", [EOL]             ArrayUtils.isEquals(midSubarray, [EOL]                 ArrayUtils.subarray(array, 1, 5))); [EOL]  [EOL]         assertTrue("mid start, length end", [EOL]             Array
@Test [EOL]     public void testLexx() { [EOL]         // tests each constant [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.y, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.M, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.d, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.s, 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.S, 1)}, DurationFormatUtils.lexx("yMdHmsS")); [EOL]  [EOL]         // tests the ISO8601-like [EOL]         assertArrayEquals(new DurationFormatUtils.Token[]{ [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.H, 1), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]             new DurationFormatUtils.Token(DurationFormatUtils.m, 2), [EOL]             new DurationFormatUtils.Token(new StringBuilder(":"), 1), [EOL]      
@Test [EOL]     public void testParseSync() throws InterruptedException { [EOL]         final String pattern = "yyyy-MM-dd'T'HH:mm:ss.SSS Z"; [EOL]         final FastDateFormat formatter= FastDateFormat.getInstance(pattern); [EOL]          [EOL]         final long sdfTime= measureTime(formatter, new SimpleDateFormat(pattern) { [EOL]                         private static final long serialVersionUID = 1L;  // because SimpleDateFormat is serializable [EOL]  [EOL]                         @Override [EOL]                         public Object parseObject(final String formattedDate) throws ParseException { [EOL]                             synchronized(this) { [EOL]                                 return super.parse(formattedDate); [EOL]                             } [EOL]                         } [EOL]         }); [EOL]          [EOL]         final long fdfTime= measureTime(formatter, FastDateFormat.getInstance(pattern)); [EOL]          [EOL]         final String times= ">>FastDateFormatTest: FastDate
@Test [EOL]     public void testJoin_IterableString() { [EOL]         assertEquals(null, StringUtils.join((Iterable<?>) null, null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), null)); [EOL]         assertEquals(TEXT_LIST_NOSEP, StringUtils.join(Arrays.asList(ARRAY_LIST), "")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), "x")); [EOL]         assertEquals("foo", StringUtils.join(Collections.singleton("foo"), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(NULL_ARRAY_LIST), null)); [EOL]  [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), null)); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), "")); [EOL]         assertEquals("", StringUtils.join(Arrays.asList(EMPTY_ARRAY_LIST), SEPARATOR)); [EOL]  [EOL]         assertEquals(TEXT_LIST, StringUtils.join(Arrays.asList(ARRAY_LIST), SEPARATOR)); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void test5() { [EOL]  [EOL]         final String input = "a;b; c;\"d;\"\"e\";f; ; ;"; [EOL]         final StrTokenizer tok = new StrTokenizer(input); [EOL]         tok.setDelimiterChar(';'); [EOL]         tok.setQuoteChar('"'); [EOL]         tok.setIgnoredMatcher(StrMatcher.trimMatcher()); [EOL]         tok.setIgnoreEmptyTokens(false); [EOL]         tok.setEmptyTokenAsNull(true); [EOL]         final String tokens[] = tok.getTokenArray(); [EOL]  [EOL]         final String expected[] = new String[]{"a", "b", "c", "d;\"e", "f", null, null, null,}; [EOL]  [EOL]         assertEquals(ArrayUtils.toString(tokens), expected.length, tokens.length); [EOL]         for (int i = 0; i < expected.length; i++) { [EOL]             assertTrue("token[" + i + "] was '" + tokens[i] + "' but was expected to be '" + expected[i] + "'", [EOL]                     ObjectUtils.equals(expected[i], tokens[i])); [EOL]         } [EOL]  [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCharSetMatcher_String() { [EOL]         final StrMatcher matcher = StrMatcher.charSetMatcher("ace"); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 0)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 1)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 2)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 3)); [EOL]         assertEquals(1, matcher.isMatch(BUFFER2, 4)); [EOL]         assertEquals(0, matcher.isMatch(BUFFER2, 5)); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher("")); [EOL]         assertSame(StrMatcher.noneMatcher(), StrMatcher.charSetMatcher((String) null)); [EOL]         assertTrue(StrMatcher.charSetMatcher("a") instanceof StrMatcher.CharMatcher); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test [EOL]     public void testCloneOfCloneable() { [EOL]         final CloneableString string = new CloneableString("apache"); [EOL]         final CloneableString stringClone = ObjectUtils.clone(string); [EOL]         assertEquals("apache", stringClone.getValue()); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#clone(Object)} with a not cloneable object. [EOL]      */ [EOL]
@Test [EOL]     public void testGetSetDefault() { [EOL]         try { [EOL]             ToStringBuilder.setDefaultStyle(ToStringStyle.NO_FIELD_NAMES_STYLE); [EOL]             assertSame(ToStringStyle.NO_FIELD_NAMES_STYLE, ToStringBuilder.getDefaultStyle()); [EOL]         } finally { [EOL]             // reset for other tests [EOL]             ToStringBuilder.setDefaultStyle(ToStringStyle.DEFAULT_STYLE); [EOL]         } [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testLang645() { [EOL]         final Locale locale = new Locale("sv", "SE"); [EOL]  [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         cal.set(2010, 0, 1, 12, 0, 0); [EOL]         final Date d = cal.getTime(); [EOL]  [EOL]         final DatePrinter fdf = getInstance("EEEE', week 'ww", locale); [EOL]  [EOL]         assertEquals("fredag, week 53", fdf.format(d)); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testInvokeConstructor() throws Exception { [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) ArrayUtils.EMPTY_CLASS_ARRAY).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class, [EOL]                 (Object[]) null).toString()); [EOL]         assertEquals("()", ConstructorUtils.invokeConstructor(TestBean.class).toString()); [EOL]         assertEquals("(String)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, "").toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, new Object()).toString()); [EOL]         assertEquals("(Object)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, Boolean.TRUE).toString()); [EOL]         assertEquals("(Integer)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.INTEGER_ONE).toString()); [EOL]         assertEquals("(int)", ConstructorUtils.invokeConstructor( [EOL]                 TestBean.class, NumberUtils.
@Test [EOL]     public void testCapitalizeFully_String() { [EOL]         assertEquals(null, WordUtils.capitalizeFully(null)); [EOL]         assertEquals("", WordUtils.capitalizeFully("")); [EOL]         assertEquals("  ", WordUtils.capitalizeFully("  ")); [EOL]          [EOL]         assertEquals("I", WordUtils.capitalizeFully("I") ); [EOL]         assertEquals("I", WordUtils.capitalizeFully("i") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I Am Here 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("i am HERE 123") ); [EOL]         assertEquals("I Am Here 123", WordUtils.capitalizeFully("I AM HERE 123") ); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testIsNumber() { [EOL]         String val = "12345"; [EOL]         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val)); [EOL]         val = "1234.5"; [EOL]         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val)); [EOL]         val = ".12345"; [EOL]         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val)); [EOL]         val = "1234E5"; [EOL]         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val)); [EOL]         val = "1234E+5"; [EOL]         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val)); [EOL]         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val)); [EOL]         val = "1234E-5"; [EOL]         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
@Test [EOL]     public void testFloatArrayArray() { [EOL]         float[][] array = new float[][] {{1.0f, 2.29686f}, null, {Float.NaN}}; [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]         array = null; [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append(array).toString()); [EOL]         assertEquals(baseStr + "[<null>]", new ToStringBuilder(base).append((Object) array).toString()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testGetShortValue() { [EOL]         assertEquals(bf_multi.getShortValue((short) - 1), (short) 127); [EOL]         assertEquals(bf_multi.getShortValue((short) 0), (short) 0); [EOL]         assertEquals(bf_single.getShortValue((short) - 1), (short) 1); [EOL]         assertEquals(bf_single.getShortValue((short) 0), (short) 0); [EOL]         assertEquals(bf_zero.getShortValue((short) -1), (short) 0); [EOL]         assertEquals(bf_zero.getShortValue((short) 0), (short) 0); [EOL]     } [EOL]  [EOL]     /** [EOL]      * test the getRawValue() method [EOL]      */ [EOL]
@Test [EOL]     public void testToString() { [EOL]         assertEquals("0", new MutableBoolean(0).toString()); [EOL]         assertEquals("10", new MutableBoolean(10).toString()); [EOL]         assertEquals("-123", new MutableBoolean().toString()); [EOL]     } [EOL]  [EOL] } [EOL]
@Test [EOL]     public void testLowYearPadding() { [EOL]         final Calendar cal = Calendar.getInstance(); [EOL]         final DatePrinter format = getInstance(YYYY_MM_DD); [EOL]  [EOL]         cal.set(1,0,1); [EOL]         assertEquals("0001/01/01", format.format(cal)); [EOL]         cal.set(10,0,1); [EOL]         assertEquals("0010/01/01", format.format(cal)); [EOL]         cal.set(100,0,1); [EOL]         assertEquals("0100/01/01", format.format(cal)); [EOL]         cal.set(999,0,1); [EOL]         assertEquals("0999/01/01", format.format(cal)); [EOL]     } [EOL]     /** [EOL]      * Show Bug #39410 is solved [EOL]      */ [EOL]
@Test [EOL]     public void testToFloatString() { [EOL]         assertTrue("toFloat(String) 1 failed", NumberUtils.toFloat("-1.2345") == -1.2345f); [EOL]         assertTrue("toFloat(String) 2 failed", NumberUtils.toFloat("1.2345") == 1.2345f); [EOL]         assertTrue("toFloat(String) 3 failed", NumberUtils.toFloat("abc") == 0.0f); [EOL]         assertTrue("toFloat(Float.MAX_VALUE) failed", NumberUtils.toFloat(Float.MAX_VALUE+"") ==  Float.MAX_VALUE); [EOL]         assertTrue("toFloat(Float.MIN_VALUE) failed", NumberUtils.toFloat(Float.MIN_VALUE+"") == Float.MIN_VALUE); [EOL]         assertTrue("toFloat(empty) failed", NumberUtils.toFloat("") == 0.0f); [EOL]         assertTrue("toFloat(null) failed", NumberUtils.toFloat(null) == 0.0f); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Test for {@link NumberUtils#toFloat(String, float)}. [EOL]      */ [EOL]
@Test [EOL]     public void testBinaryToHexDigit_2args() { [EOL]         final boolean[] shortArray = new boolean[]{false, true, true}; [EOL]         assertEquals('6', Conversion.binaryToHexDigit(shortArray, 0)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(shortArray, 1)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(shortArray, 2)); [EOL]         final boolean[] longArray = new boolean[]{true, false, true, false, false, true, true}; [EOL]         assertEquals('5', Conversion.binaryToHexDigit(longArray, 0)); [EOL]         assertEquals('2', Conversion.binaryToHexDigit(longArray, 1)); [EOL]         assertEquals('9', Conversion.binaryToHexDigit(longArray, 2)); [EOL]         assertEquals('c', Conversion.binaryToHexDigit(longArray, 3)); [EOL]         assertEquals('6', Conversion.binaryToHexDigit(longArray, 4)); [EOL]         assertEquals('3', Conversion.binaryToHexDigit(longArray, 5)); [EOL]         assertEquals('1', Conversion.binaryToHexDigit(longArray, 6)); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link Conversion#binaryToHexDigitMsb0_4bits(boolean[])}. [EOL]      */ [EOL]
@Test(expected=ParseException.class) [EOL]     public void testLANG799_DE_FAIL() throws ParseException { [EOL]         final Locale dflt = Locale.getDefault(); [EOL]         Locale.setDefault(Locale.GERMAN); [EOL]         try { [EOL]             DateUtils.parseDate("Wed, 09 Apr 2008 23:55:38 GMT", "EEE, dd MMM yyyy HH:mm:ss zzz"); [EOL]         } finally { [EOL]             Locale.setDefault(dflt);             [EOL]         } [EOL]     } [EOL]      [EOL]     // Parse German date with English Locale, specifying German Locale override [EOL]
@Test [EOL]     public void testAppendAll_Iterator() { [EOL]         final StrBuilder sb = new StrBuilder(); [EOL]         sb.appendAll((Iterator<?>) null); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(Collections.EMPTY_LIST.iterator()); [EOL]         assertEquals("", sb.toString()); [EOL]  [EOL]         sb.clear(); [EOL]         sb.appendAll(Arrays.asList(new Object[]{"foo", "bar", "baz"}).iterator()); [EOL]         assertEquals("foobarbaz", sb.toString()); [EOL]     } [EOL]  [EOL]     //----------------------------------------------------------------------- [EOL]
@Test(expected = IllegalArgumentException.class) [EOL]     public void testOr_primitive_emptyInput() { [EOL]         BooleanUtils.or(new boolean[] {}); [EOL]     } [EOL]      [EOL]
@Test [EOL]     public void testHexDigitMsb0ToBinary() { [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, false}, Conversion.hexDigitMsb0ToBinary('0')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, false, true}, Conversion.hexDigitMsb0ToBinary('1')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, false}, Conversion.hexDigitMsb0ToBinary('2')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, false, true, true}, Conversion.hexDigitMsb0ToBinary('3')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, false}, Conversion.hexDigitMsb0ToBinary('4')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, false, true}, Conversion.hexDigitMsb0ToBinary('5')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, false}, Conversion.hexDigitMsb0ToBinary('6')); [EOL]         assertBinaryEquals( [EOL]             new boolean[]{false, true, true, true},
@Test [EOL]     public void testLongArrayAsObject() { [EOL]         final long[] obj = new long[2]; [EOL]         assertEquals(17 * 37 * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[0] = 5L; [EOL]         final int h1 = (int) (5L ^ 5L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]         obj[1] = 6L; [EOL]         final int h2 = (int) (6L ^ 6L >> 32); [EOL]         assertEquals((17 * 37 + h1) * 37 + h2, new HashCodeBuilder(17, 37).append((Object) obj).toHashCode()); [EOL]     } [EOL]  [EOL]
@Test [EOL]     public void testCloneOfPrimitiveArray() { [EOL]         assertTrue(Arrays.equals(new int[]{1}, ObjectUtils.clone(new int[]{1}))); [EOL]     } [EOL]  [EOL]     /** [EOL]      * Tests {@link ObjectUtils#cloneIfPossible(Object)} with a cloneable object. [EOL]      */ [EOL]
